import cstd
import std
import runtime
import vector
import optional

export type SymbolKind = enum {
    OBJECT
    FUNCTION
}

export type Symbol = struct {
    kind: SymbolKind
    name: Str
    value: *
}

export type Library = struct {
    path: Str
    handle: *
    symbols: &[Symbol]
}

export def find_symbol(library: *Library, name: String) -> Optional(Symbol) {
    for var symbol in @library.symbols {
        if symbol.name == name {
            return optional::some(symbol)
        }
    }
    return optional::none(Symbol)
}

#if defined WIN32 {
    import windows

    const SYMOPT_UNDNAME = 0x2

    type EnumerateParams = struct {
        symbols: &Vector(Symbol)
        process: *
        dll: *
        sym_handle: uint64
    }

    def enumerate_symbols(info: *windows::s__SYMBOL_INFO, size: ulong, user: *) -> int {
        let params = @(user !*EnumerateParams)

        let name = zero_allocate(char, info.MaxNameLen)
        memcopy(info.Name.value, name.value, info.NameLen)
        let name_str = make_string(name.value)

        var kind = SymbolKind::OBJECT
        if name_str.index_of("::(") > 0 {
            kind = SymbolKind::FUNCTION
        }
        
        params.symbols.push({
            kind = kind,
            name = name_str,
            value = windows::GetProcAddress(params.dll !*windows::s_HINSTANCE__, name.value)
        } !Symbol)

        delete(name)
        return 1
    }

    export def load(path: String, init: bool = true) -> Library {
        windows::SymSetOptions(windows::SymGetOptions() & ~SYMOPT_UNDNAME)

        let dll = windows::LoadLibraryA(path.to_array().value)
        if not dll {
            abort("Couldn't open shared library " + path + "\n")
        }

        let process = windows::GetCurrentProcess()
        if not windows::SymInitialize(process, null, 0) {
            abort("Couldn't initialize symbols\n")
        }
        defer windows::SymCleanup(process)

        let fh = open(path, "rb")
        defer close(fh)

        let osfh = cstd::_get_osfhandle(cstd::fileno(fh)) !*
        let dll_size = windows::GetFileSize(osfh, null)
        let sym_handle = windows::SymLoadModule64(process, osfh, null, null, dll !uint64, dll_size)
        if not sym_handle {
            abort("Couldn't load symbol information for " + path + "\n")
        }

        let symbols = vector::make(Symbol)
        let params = {
            symbols = symbols,
            process = process,
            dll = dll,
            sym_handle = sym_handle
        } !EnumerateParams
        windows::SymEnumSymbols(process, sym_handle, null, *enumerate_symbols, *params)

        let library = {
            path = path,
            handle = dll,
            symbols = symbols.to_array()
        } !Library

        if init {
            let main_sym = find_symbol(*library, "main::__main__::([[char]])")
            if main_sym.exists {
                let main = main_sym.get().value !(def ([[char]]) -> ())
                // FIXME Pass in actual command line arguments
                let args = zero_allocate(type [char], 0)
                main(args)
                delete(args)
            }
        }

        return library
    }

    export def close(library: *Library, finalize: bool = true) {
        if finalize {
            let finalizer_sym = find_symbol(library, "main::__finalizer__::()")
            if finalizer_sym.exists {
                let finalizer = finalizer_sym.get().value !(def () -> ())
                finalizer()
            }
        }
        windows::FreeLibrary(library.handle !*windows::s_HINSTANCE__)
    }

} else {
    import linux

    const RTLD_NOW = 2
    const ET_DYN = 3
    const SHT_SYMTAB = 2
    const SHT_STRTAB = 3

    const STB_LOCAL = 0
    const STB_GLOBAL = 1
    const STB_WEAK = 2

    const STT_NOTYPE = 0
    const STT_OBJECT = 1
    const STT_FUNC = 2
    const STT_SECTION = 3
    const STT_FILE = 4
    const STT_COMMON = 5
    const STT_TLS = 6

    // TODO We can't use this because the return value can't be moved yet
    /*export def destruct(this: *Library) {
        close_library(this)
    }*/

    def elf_st_bind(x: byte) -> byte {
        return x >> 4 !byte
    }

    def elf_st_type(x: byte) -> byte {
        return x & 0xF !byte
    }

    export def load(path: String, init: bool = true) -> Library {
        let fh = open(path, "rb")
        if not fh {
            abort("Couldn't open library " + path + " (" + make_string(cstd::strerror(@linux::__errno_location())) + ")\n")
        }
        defer close(fh)

        seek(fh, 0, std::SEEK_END)
        let size: size_t = tell(fh)
        rewind(fh)

        let bytes = linux::mmap(null, size, 1 /*PROT_READ*/, 2 /*MAP_PRIVATE*/, cstd::fileno(fh), 0)
        defer linux::munmap(bytes, size)
        
        // Read elf header
        var elf_hdr = bytes !*linux::s_Elf64_Ehdr

        // TODO Actually use the elf magic values here
        assert (elf_hdr.e_ident[1] == 'E' and
            elf_hdr.e_ident[2] == 'L' and 
            elf_hdr.e_ident[3] == 'F'), "Not an ELF file"
        assert elf_hdr.e_type == ET_DYN, "Not a shared library"

        let handle = linux::dlopen(path.to_array().value, RTLD_NOW)
        if not handle { abort("Couldn't open shared library " + path + "\n") }

        let symbols = vector::make(Symbol)

        var symbol_shdr = (bytes ++ elf_hdr.e_shoff) !*linux::s_Elf64_Shdr
        for var i in 0..elf_hdr.e_shnum {
            var elf_sym: *linux::s_Elf64_Sym
            var symcount: uint
            var strtab: *char

            if symbol_shdr.sh_type == SHT_SYMTAB {
                elf_sym = (bytes ++ symbol_shdr.sh_offset) !*linux::s_Elf64_Sym
			    symcount = (symbol_shdr.sh_size / size_of linux::s_Elf64_Sym) !uint

                var strtab_shdr = (bytes ++ elf_hdr.e_shoff) !*linux::s_Elf64_Shdr
                for var j in 0..elf_hdr.e_shnum {
                    if j == symbol_shdr.sh_link and strtab_shdr.sh_type == SHT_STRTAB {
                        strtab = (bytes ++ strtab_shdr.sh_offset) !*char
                        break
                    }
                    strtab_shdr ++= 1
                }

                for var i in 0..symcount {
                    let name = strtab ++ elf_sym.st_name

                    if elf_sym.st_shndx > 0 and elf_st_bind(elf_sym.st_info) == STB_GLOBAL {
                        let sym_type = elf_st_type(elf_sym.st_info)
                        if sym_type == STT_FUNC or sym_type == STT_OBJECT {
                            let kind = SymbolKind::FUNCTION if sym_type == STT_FUNC else SymbolKind::OBJECT
                            symbols.push({
                                kind = kind,
                                name = make_string(name),
                                value = dlsym(handle, name)
                            } !Symbol)
                        }
                    }
                    
                    elf_sym ++= 1
                }
            }

            symbol_shdr ++= 1
        }

        let library = {
            path,
            handle,
            symbols.to_array()
        } !Library

        if init {
            let main_sym = find_symbol(*library, "main::__main__::([[char]])")
            if main_sym.exists {
                let main = main_sym.get().value !(def ([[char]]) -> ())
                // FIXME Pass in actual command line arguments
                let args = zero_allocate(type [char], 0)
                main(args)
                delete(args)
            }
        }
        return library
    }

    export def close(library: *Library, finalize: bool = true) {
        if finalize {
            let finalizer_sym = find_symbol(library, "main::__finalizer__::()")
            if finalizer_sym.exists {
                let finalizer = finalizer_sym.get().value !(def () -> ())
                finalizer()
            }
        }
        linux::dlclose(library.handle)
    }
}