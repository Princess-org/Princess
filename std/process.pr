import cstd
import std

#if defined WIN32 {
    import windows

    const WAIT_OBJECT_0 = 0 !ulong
    const WAIT_TIMEOUT = 0x102 !ulong
    const WAIT_FAILED = 0xFFFFFFFF !ulong

    const STARTF_USESTDHANDLES = 0x100
    const HANDLE_FLAG_INHERIT = 0x1

    export type Process = struct {
        exit_code: int
        running: bool

        // Windows specific
        si: windows::STARTUPINFOA
        pi: windows::PROCESS_INFORMATION
    }

    export def spawn(exe: String, args: &[String], stdin: File = null, stdout: File = null, stderr: File = null) -> Process {
        var si: windows::STARTUPINFOA 
        var pi: windows::PROCESS_INFORMATION

        si.cb = (size_of windows::STARTUPINFOA) !ulong

        if stdin {
            si.hStdInput = cstd::_get_osfhandle(cstd::fileno(stdin)) !*
            windows::SetHandleInformation(si.hStdInput, HANDLE_FLAG_INHERIT, HANDLE_FLAG_INHERIT)
        }
        if stdout { 
            si.hStdOutput = cstd::_get_osfhandle(cstd::fileno(stdout)) !* 
            windows::SetHandleInformation(si.hStdOutput, HANDLE_FLAG_INHERIT, HANDLE_FLAG_INHERIT)
        }
        if stderr { 
            si.hStdError = cstd::_get_osfhandle(cstd::fileno(stderr)) !* 
            windows::SetHandleInformation(si.hStdError, HANDLE_FLAG_INHERIT, HANDLE_FLAG_INHERIT)
        }

        if stdin or stdout or stderr {
            if not stdin { si.hStdInput = cstd::_get_osfhandle(0) !* }
            if not stdout { si.hStdOutput = cstd::_get_osfhandle(1) !* }
            if not stderr { si.hStdError = cstd::_get_osfhandle(2) !* }

            si.dwFlags |= STARTF_USESTDHANDLES
        }

        var cmd: StringBuffer = exe + " "
        for var arg in @args {
            cmd += arg + " "
        }

        if not windows::CreateProcessA(
            exe.to_array().value,
            cmd.to_array().value,
            null, null, 1, 0 !ulong, 
            null, null, *si, *pi
        ) { abort("Couldn't create process\n") }
        
        return {
            running = true,
            si = si, pi = pi
        } !Process
    }

    export def wait(process: *Process, timeout: ulong = -1) {
        let code = windows::WaitForSingleObject(process.pi.hProcess, timeout)
        if code == WAIT_TIMEOUT { return }
        if code == WAIT_FAILED { abort("wait failed\n") }

        var exit_code: ulong
        windows::GetExitCodeProcess(process.pi.hProcess, *exit_code)
        process.exit_code = exit_code !int
        process.running = false
    }

    // TODO Call this in the destructor
    export def dispose(process: *Process) {
        windows::CloseHandle(process.pi.hProcess)
        windows::CloseHandle(process.pi.hThread)
    }

} else {
    import linux
    
    const SYS_pidfd_open = 434
    const POLLIN: short = 1
    const SIGTERM = 15

    export type Process = struct {
        exit_code: int
        running: bool

        pid: int
    }

    export def spawn(exe: String, args: &[String], 
        stdin: File = null, stdout: File = null, stderr: File = null
    ) -> Process {
        
        var pargs = zero_allocate(type *char, args.size + 2)
        defer delete(pargs)

        let pargs_buf = zero_allocate(type &string, args.size + 1)
        defer delete(pargs_buf)

        pargs_buf[0] = exe.to_array()
        pargs[0] = pargs_buf[0].value
        for var i in 0..args.size {
            pargs_buf[i + 1] = args[i].to_array()
            pargs[i + 1] = pargs_buf[i + 1].value
        }

        var pid = 0
        if not (pid = linux::fork()) {
            if stdin {
                linux::dup2(cstd::fileno(stdin), 0)
            }
            if stdout {
                linux::dup2(cstd::fileno(stdout), 1)
            }
            if stderr {
                linux::dup2(cstd::fileno(stderr), 2)
            }
            
            linux::execvp(exe.to_array().value, pargs.value)
            exit(1)
        }

        return {
            pid = pid,
            running = true
        } !Process
    }

    def WIFSIGNALED(status: int) -> bool {
        return (((status & 0x7f) + 1) >> 1) > 0
    }
    def WTERMSIG(status: int) -> int {
        return status & 0x7f
    }
    def WIFEXITED(status: int) -> bool {
        return WTERMSIG(status) == 0
    }
    def WEXITSTATUS(status: int) -> int {
        return (status & 0xFF00) >> 8
    }

    export def wait(process: *Process, timeout: ulong = -1) {
        let fd = linux::syscall(SYS_pidfd_open, process.pid, 0)

        var pfd = {fd !int, POLLIN, 0} !linux::s_pollfd;
        if linux::poll(*pfd, 1, timeout !int) == 0 { 
            return 
        }

        var stat_val: int
        if linux::waitpid(process.pid, *stat_val, 0) == -1 {
            abort("Waitpid error\n")
        }
        if WIFSIGNALED(stat_val) {
            process.exit_code = 128 + WTERMSIG(stat_val)
        } else if WIFEXITED(stat_val) {
            process.exit_code = WEXITSTATUS(stat_val)
        } else {
            abort("Invalid signal\n")
        }

        process.running = false
    }

    export def terminate(process: *Process) {
        linux::kill(process.pid, SIGTERM)
    }

    export def dispose(process: *Process) {
        // Nothing here
    }
}