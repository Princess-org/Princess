import cstd

// Optional
export type Optional(type V) = struct {
    exists: bool
    value: V
}

export def none(type V) -> Optional(V) {
    return [] !Optional(V)
}

export def some(value: type V) -> Optional(V) {
    return [ true, value ] !Optional(V)
}

export def get(this: Optional(type T)) -> T {
    if this.exists {
        return this.value
    }
    // TODO Give proper error message without using stderr (?)
    cstd::abort()
}

export def get_or_default(this: Optional(type T), default: T) -> T {
    if this.exists {
        return this.value
    }
    return default
} 