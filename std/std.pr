import cstd
import runtime
import optional
import vector

#if defined WIN32 {
    import windows
    export type File = *cstd::FILE

    export def stdin  -> File { return cstd::__acrt_iob_func(0) }
    export def stdout -> File { return cstd::__acrt_iob_func(1) }
    export def stderr -> File { return cstd::__acrt_iob_func(2) }

    export const PATH_MAX = 260

} else if defined MACOS {
    import linux
    export type File = *cstd::FILE

    export def stdin  -> File { return cstd::__stdinp  }
    export def stdout -> File { return cstd::__stdoutp }
    export def stderr -> File { return cstd::__stderrp }

    export const PATH_MAX = 4096
} else {
    import linux
    export type File = *cstd::s__IO_FILE

    export def stdin  -> File { return cstd::stdin  }
    export def stdout -> File { return cstd::stdout }
    export def stderr -> File { return cstd::stderr }

    export const PATH_MAX = 4096
}

export const MAX_UINT8: uint8 = 0xFF
export const MAX_UINT16: uint16 = 0xFFFF
export const MAX_UINT32: uint32 = 0xFFFFFFFF
export const MAX_UINT64: uint64 = 0xFFFFFFFFFFFFFFFF

export const MIN_INT8: int8 = -0x80
export const MIN_INT16: int16 = -0x8000
export const MIN_INT32: int32 = -0x80000000
export const MIN_INT64: int64 = -0x7FFFFFFFFFFFFFFF - 1

export const MAX_INT8: int8 = 0x7F
export const MAX_INT16: int16 = 0x7FFF
export const MAX_INT32: int32 = 0x7FFFFFFF
export const MAX_INT64: int64 = 0x7FFFFFFFFFFFFFFF

// These are the same on both platforms
export const SEEK_SET = 0
export const SEEK_CUR = 1
export const SEEK_END = 2

// TODO This is causing an ambigious reference error, it really shouldn't
/*export def combine_hashes(a: uint64, b: uint64) -> uint64 {
    var hash: uint64 = 17
    hash = hash * 31 + a
    hash = hahs * 31 + b
    return hash
}*/

export def combine_hashes(hashes: uint64...) -> uint64 {
    var hash: uint64 = 17
    for var i in 0..hashes.size {
        hash = hash * 31 + hashes[i]
    }
    return hash
}

export def parse_int(str: &string) -> int {
    var end: *char
    return cstd::strtol(str.value, *end, 10) !int
}

// Iterate references to array
// TODO Broken
/*export def iterate(arr: type &[T]) -> T {
    for var i in 0..arr.size {
        yield arr[i]
    }
}*/

// TODO This should kinda be in runtime but we can't import vector there
export def to_array(gen: &runtime::Generator(type T)) -> &[T] {
    let vec = vector::make(T)
    for var v in gen {
        vec.push(v)
    }
    return vec.to_array()
}

// String functions
export def make_string(ptr: *char) -> string {
    var s: string
    s.value = ptr
    s.size = strlen(ptr) + 1
    return s
}

export def remove(str: &string, i: size_t) {
    assert i < str.length()
    if str.size > 0 {
        cstd::memmove(str.value ++ i, str.value ++ i ++ 1, str.length() - i)
    }
    str.size -= 1
    str.value[str.size - 1] = '\0'
}

export def remove(str: &string, start: size_t, end: size_t) {
    if start == end { 
        remove(str, start)
        return
    }
    assert end > start
    assert start < str.length()
    assert end < str.length()

    let len = end - start + 1
    if str.size > 0 {
        cstd::memmove(str.value ++ start, str.value ++ end ++ 1, str.length() - len - start)
    }
    str.size -= len
    str.value[str.size - 1] = '\0'
}

export def insert(str: &string, i: size_t, s: &string) {
    if s.length() == 0 { return }
    assert i < str.length()

    let new_size = str.size + length(s) !size_t
    str.value = reallocate(str.value, (size_of char) * new_size)
    
    if str.size >= 1 { 
        cstd::memmove(str.value ++ i ++ length(s), str.value ++ i, str.size - i) 
    }
    memcopy(s.value, str.value ++ i, length(s))
    str.size = new_size
}

export def insert(str: &string, i: size_t, c: char) {
    let new_size = str.size + 1 !size_t
    str.value = reallocate(str.value, (size_of char) * new_size)
    
    if str.size >= 1 { 
        cstd::memmove(str.value ++ i ++ 1, str.value ++ i, str.size - i) 
    }
    str.value[i] = c
    str.size = new_size
}

export def substring(str: &string, start: size_t, end: size_t) -> &string {
    assert end >= start
    assert end <= str.length
    assert start >= 0

    var substr: string
    substr.size = end - start
    substr.value = str.value ++ start
    var res: &string = substr
    res.value = reallocate(res.value, res.size + 1)
    res.value[res.size] = '\0'
    res.size += 1
    return res
}

export def substring(str: &string, start: size_t) -> &string {
    return substring(str, start, str.length)
}

export def index_of(str: &string, substring: &string, start: size_t = 0) -> int64 {
    assert start < str.length
    for var i in start..str.length {
        let c = str[i]
        if c == substring[0] {
            var found = true
            for var j in 0..substring.length {
                if i + j >= str.length { return -1 }
                if str[i + j] != substring[j] {
                    found = false
                    break 
                }
            }
            if found { return i }
        }
    }
    return -1
}

export def last_index_of(str: &string, substring: &string) -> int64 {
    for var i in 0..str.length {
        var k = str.length - i - 1
        let c = str[k]
        if c == substring[0] {
            var found = true
            for var j in 0..substring.length {
                if k + j >= str.length { return -1 }
                if str[k + j] != substring[j] {
                    found = false
                    break 
                }
            }
            if found { return k }
        }
    }
    return -1
}

export def ends_with(str: &string, suffix: &string) -> bool {
    return last_index_of(str, suffix) == str.length - suffix.length
}

export def starts_with(str: &string, pre: &string) -> bool {
    return (cstd::strncmp(pre.value, str.value, cstd::strlen(pre.value)) == 0) !bool
}

export def strip_margin(s: &string) -> &string {
    var res: &string = ""
    let len = length(s)

    var i = 0
    while i < len {
        var c = s[i]
        if c == '\n' or i == 0 {
            if c == '\n' { 
                res += '\n'
            }
            i += 1; c = s[i]
            while (c == ' ' or c == '\t') and (i + 1) < len {
                i += 1; c = s[i]
            }
            if c == '|' and (i + 1) < len { 
                i += 1
                continue
            }
        }
        res += c
        i += 1
    }
    return res
}

// https://stackoverflow.com/a/23457543/3258949
// TODO This algorithm is very inefficient

def match(pattern: &string, candidate: &string, p: int, c: int) -> bool {
    if pattern[p] == '\0' {
        return candidate[c] == '\0'
    } else if pattern[p] == '*' {
        while candidate[c] != '\0' {
            if match(pattern, candidate, p + 1, c) {
                return true
            }
            c += 1
        }
        return match(pattern, candidate, p + 1, c)
    } else if pattern[p] != '?' and pattern[p] != candidate[c] {
        return false
    } else {
        return match(pattern, candidate, p + 1, c + 1)
    }
}

export def match(pattern: &string, candidate: &string) -> bool {
    return match(pattern, candidate, 0, 0)
}

export type ToString = interface {
    def to_string -> &string
}

// TODO remove special casing this
export def == (a: string, b: string) -> bool {
    return strncmp(a.value, b.value, max(a.size - 1, b.size - 1) !size_t) == 0
}

export def != (a: string, b: string) -> bool {
    return not (a == b)
}

export def == (a: string, b: &string) -> bool {
    if b { return a == @b }
    return false
}

export def != (a: string, b: &string) -> bool {
    return not (a == b)
}

export def == (a: &string, b: string) -> bool {
    if a { return @a == b }
    return false
}

export def != (a: &string, b: string) -> bool {
    return not (a == b)
}

export def == (a: &string, b: &string) -> bool {
    if not a and not b { return true }
    if not a or not b { return false }
    return @a == @b
}

export def != (a: &string, b: &string) -> bool {
    return not (a == b)
}

export def + (a: &string, b: &string) -> &string {
    if not b { return a + "null" }
    let ret = allocate(char, a.size + b.size - 1)
    defer delete(ret)
    memcopy(a.value, ret.value, a.size - 1)
    memcopy(b.value, ret.value ++ (a.size - 1), b.size)
    return ret !&string
}

export def += (a: &string, b: &string) -> &string {
    return a + b
}

export def + (a: &string, b: &ToString) -> &string {
    return a + b.to_string()
}

export def += (a: &string, b: &ToString) -> &string {
    return a + b
}

export def + (a: &ToString, b: &string) -> &string {
    return a.to_string() + b
}

// These are defined for better performance
export def + (a: char, b: &string) -> &string {
    let ret = zero_allocate(char, b.size + 1)
    defer delete(ret)
    memcopy(b.value, ret.value ++ 1, b.size)
    ret[0] = a
    return ret !&string
}

export def + (a: &string, b: char) -> &string {
    let ret = zero_allocate(char, a.size + 1)
    defer delete(ret)
    memcopy(a.value, ret.value, a.size)
    ret[ret.size - 2] = b
    return ret !&string
}

export def += (a: &string, b: char) -> &string {
    return a + b
}

export def to_string(sign: int, n: uint64) -> &string {
    let digits = "0123456789"

    var str: &string = ""
    if n == 0 {
        str += '0'
        return str
    }

    while n {
        str = digits[n % 10] + str
        n /= 10
    }

    if sign < 0 {
        str = '-' + str
    }

    return str
}

export def to_string(a: &int64) -> &string {
    let n = -@a if @a < 0 else @a 
    return to_string(1 if @a >= 0 else -1, n)
}

export def to_string(a: &int32) -> &string {
    let n = -@a if @a < 0 else @a 
    return to_string(1 if @a >= 0 else -1, n)
}

export def to_string(a: &int16) -> &string {
    let n = -@a if @a < 0 else @a 
    return to_string(1 if @a >= 0 else -1, n)
}

export def to_string(a: &int8) -> &string {
    let n = -@a if @a < 0 else @a 
    return to_string(1 if @a >= 0 else -1, n)
}

export def to_string(a: &uint64) -> &string {
    return to_string(0, @a)
}

export def to_string(a: &uint32) -> &string {
    return to_string(0, @a)
}

export def to_string(a: &uint16) -> &string {
    return to_string(0, @a)
}

export def to_string(a: &uint8) -> &string {
    return to_string(0, @a)
}

export def to_string(a: &bool) -> &string {
    return "true" if @a else "false"
}

export def to_string(a: &char) -> &string {
    return [@a]
}

export def utf8_encode(code_point: uint64) -> &string {
    var res: &string = ""
    if code_point <= 0x007F {
        res += code_point !char
    } else if code_point <= 0x07FF {
        res += ((code_point >> 6) | 0b11000000) !char
        res += (code_point & 0b00111111 | 0b10000000) !char
    } else if code_point <= 0xFFFF {
        res += ((code_point >> 12) | 0b11100000) !char
        res += ((code_point >> 6 & 0b00111111) | 0b10000000) !char
        res += (code_point & 0b00111111 | 0b10000000) !char
    } else if code_point <= 0x10FFFF {
        res += ((code_point >> 18) | 0b11110000) !char
        res += ((code_point >> 12 & 0b00111111) | 0b10000000) !char
        res += ((code_point >> 6 & 0b00111111) | 0b10000000) !char
        res += (code_point & 0b00111111 | 0b10000000) !char
    }
    return res
}

export def int_to_hex_str(n: uint64, prefix: bool = true) -> &string {
    let digits = "0123456789ABCDEF"

    if n == 0 {
        return "0x0"
    }

    var str: &string = ""
    while n {
        str = digits[n % 16] + str
        n /= 16
    }
    if prefix {
        str = "0x" + str
    }
    
    return str
}

// TODO Implement these properly
const DOUBLE_MAX_EXP_10 = 308
const FLOAT_MAX_EXP_10 = 38

export def to_string(value: &float) -> &string {
    const size = FLOAT_MAX_EXP_10 + 20
    var buf: [size; char]
    cstd::snprintf(buf.value, size, "%f".value, @value)
    let str: &string = buf
    str.size = cstd::strlen(buf.value)
    return str
}

export def to_string(value: &double) -> &string {
    const size = DOUBLE_MAX_EXP_10 + 20
    var buf: [size; char]
    cstd::snprintf(buf.value, size, "%f".value, @value)
    let str: &string = buf
    str.size = cstd::strlen(buf.value)
    return str
}

export def print(args: &...) -> int {
    return fprint(stdout(), args)
}

export def error(args: &...) -> int {
    return fprint(stderr(), args)
}

def make_ref(tpe: *runtime::Type, value: *) -> runtime::Ref {
    var ref: runtime::Ref
    ref.tpe = tpe
    ref.value = value
    return ref
}

//TODO Clang craps itself when I use defer in here
def print_val(file: File, ref: runtime::Ref) -> int {
    let reftpe = runtime::ref_type(ref)
    let tpe = reftpe.tpe if reftpe else null !*runtime::Type
    let value = ref.value
    if not tpe or not value {
        return cstd::fprintf(file, "%p".value, value)
    } else if tpe == string {
        return cstd::fprintf(file, "%s".value, (@(value !*string)).value)
    } else if tpe.kind == runtime::TypeKind::STATIC_ARRAY and tpe.tpe == char {
        return cstd::fprintf(file, "%s".value, value !*char)
    } else if tpe == type *char {
        return cstd::fprintf(file, "%s".value, @(value !**char))
    } else if tpe == size_t {
        return cstd::fprintf(file, "%zu".value, @(value !*size_t))
    } else if tpe == char {
        return cstd::fprintf(file, "%c".value, @(value !*char))
    } else if tpe == int8 {
        return cstd::fprintf(file, "%hhd".value, @(value !*int8))
    } else if tpe == uint8 {
        return cstd::fprintf(file, "%hhu".value, @(value !*uint8))
    } else if tpe == int16 {
        return cstd::fprintf(file, "%hd".value, @(value !*int16))
    } else if tpe == uint16 {
        return cstd::fprintf(file, "%hu".value, @(value !*uint16))
    } else if tpe == int32 {
        return cstd::fprintf(file, "%d".value, @(value !*int32))
    } else if tpe == uint32 {
        return cstd::fprintf(file, "%u".value, @(value !*uint32))
    } else if tpe == int64 {
        return cstd::fprintf(file, "%ld".value, @(value !*int64))
    } else if tpe == uint64 {
        return cstd::fprintf(file, "%lu".value, @(value !*uint64))
    } else if tpe == float64 {
        return cstd::fprintf(file, "%lf".value, @(value !*float64))
    } else if tpe == float32 {
        return cstd::fprintf(file, "%f".value, @(value !*float32))
    } else if tpe == bool {
        if @(value !*bool) {
            return cstd::fprintf(file, "true".value)
        } else {
            return cstd::fprintf(file, "false".value)
        } 
    } else if tpe.kind == runtime::TypeKind::POINTER {
        return cstd::fprintf(file, "%p".value, @(value !**))
    } else if tpe.kind == runtime::TypeKind::REFERENCE {
        let v = value !*runtime::Ref
        let ref_tpe = runtime::reference(tpe.tpe)
        let res = print_val(file, make_ref(ref_tpe, v.value))
        delete(ref_tpe)
        return res
    } else if tpe.kind == runtime::TypeKind::ARRAY {
        let arr = @(value !*[int8])
        let size = arr.size
        let elements = arr.value
        var sum = 0

        sum += cstd::fprintf(file, "[".value)
        for var i in 0..size {
            let ref_tpe = runtime::reference(tpe.tpe)
            sum += print_val(file, make_ref(ref_tpe, elements ++ i * tpe.tpe.size))
            delete(ref_tpe)
            if i < size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "]".value)
        return sum
    } else if tpe.kind == runtime::TypeKind::STATIC_ARRAY {
        let size = tpe.length
        var sum = 0

        sum += cstd::fprintf(file, "[".value)
        for var i in 0..size {
            let ref_tpe = runtime::reference(tpe.tpe)
            sum += print_val(file, make_ref(ref_tpe, value ++ i * tpe.tpe.size))
            delete(ref_tpe)
            if i < size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "]".value)
        return sum
    } else if tpe.kind == runtime::TypeKind::ENUM {
        var v: int64 = 0
        for var i in 0..tpe.tpe.size {
            v |= (@((value ++ i) !*byte)) !int64 << (i * 8)
        }

        var str = "INVALID!!"
        for var i in 0..tpe.enum_values.size {
            let ev = tpe.enum_values[i]
            if ev.value == v {
                str = ev.name
            }
        }
        return cstd::fprintf(file, "%s".value, str.value)
    } else if runtime::implements(reftpe, ToString) {
        let str = (ref !&ToString).to_string()
        return cstd::fprintf(file, "%s".value, (@str).value)
    } else if tpe.kind == runtime::TypeKind::STRUCT or tpe.kind == runtime::TypeKind::UNION {
        let fields = tpe.fields
        var sum = 0
        sum += cstd::fprintf(file, "{".value)
        for var i in 0..fields.size {
            let field = fields[i]
            sum += cstd::fprintf(file, "%s = ".value, field.name.value)
            
            let ref_tpe = runtime::reference(field.tpe)
            sum += print_val(file, make_ref(ref_tpe, value ++ field.offset))
            delete(ref_tpe)
            if i < fields.size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "} !%s".value, tpe.name.value)
        return sum
    }
}

export def fprint(file: File, args: &...) -> int {
    var sum = 0
    for var i in 0..args.size {
        let arg = args[i]
        let ref_tpe = runtime::ref_type(arg)
        if ref_tpe {
            sum += print_val(file, arg !runtime::Ref)
        } else {
            sum += cstd::fprintf(file, "null".value)
        }
    }
    return sum
}

export def abort(s: &string) {
    abort(@s)
}

export def abort(s: string) {
    cstd::fprintf(stderr(), "%s\n".value, s.value)
    cstd::abort()
}

export def delete(v: type *T) {
    #if defined __destruct__::(*T) {
        __destruct__(v)
    }
    free(v)
}

export def delete(v: type [T]) {
    if not v.value { return }
    #if defined __destruct__::(*T) {
        for var i in 0..v.size {
            __destruct__(*v[i])
        }
    }
    free(v.value)
}

export def new(t: type T) -> *T {
    let ptr = allocate(T)
    memcopy(*t, ptr, size_of T)
    return ptr
}

// Deprecated
export def concat(base: string, to_append: string) {
    cstd::memcpy(base.value ++ strlen(base.value), to_append.value, to_append.size)
}

export def length(s: string) -> size_t {
    return s.size - 1
}

export def length(s: &string) -> size_t {
    return s.size - 1
}

// Allocators
export def allocate(size: size_t) -> * {
    return cstd::malloc(size)
}

export def allocate(type T) -> *T {
    return cstd::malloc(T.size) !*T
}

export def allocate(type T, size: size_t) -> [T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::malloc(T.size * size) !*T
    return arr
}

export def zero_allocate(size: size_t) -> * {
    return cstd::calloc(1, size)
}

export def zero_allocate(type T) -> *T {
    return cstd::calloc(1, T.size) !*T
}

export def zero_allocate(type T, size: size_t) -> [T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::calloc(size, T.size) !*T
    return arr
}

export def allocate_ref(type T, size: size_t) -> &[T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::calloc(size, T.size) !*T
    defer free(arr.value)
    return arr !&[T]
}

export def reallocate(value: type *T, size: size_t) -> *T {
    return cstd::realloc(value, size) !*T
}

// Free pointer is in cstd

export def free(value: type [T]) {
    cstd::free(value.value)
}

// File functions

export def open(file_path: &string, mode: &string) -> File {
    return cstd::fopen(file_path.value, mode.value)
}

export def reopen(file_path: &string, mode: &string, file: File) -> File {
    return cstd::freopen(file_path.value, mode.value, file)
}

export def close(file: File) -> int {
    return cstd::fclose(file)
} 

// Reads buffer.size * T.size bytes from file
export def read(file: File, buffer: type [T]) -> size_t {
    return cstd::fread(buffer.value, T.size, buffer.size, file)
}

export def read(file: File, buffer: type [T], size: size_t) -> size_t {
    return cstd::fread(buffer.value, T.size, size, file)
}

export def read(file: File, ptr: type *T) -> size_t {
    return cstd::fread(ptr, T.size, 1, file)
}

export def read_str(file: File) -> &string {
    var len: size_t
    file.read(*len)
    if len == 0 { return null }
    let buf = allocate_ref(char, len)
    read(file, @buf, len)
    return buf
}

export def write(file: File, buffer: type [T]) -> size_t {
    return cstd::fwrite(buffer.value, T.size, buffer.size, file)
}

// TODO This might not be needed
export def write(file: File, buffer: type [T], size: size_t) -> size_t {
    return cstd::fwrite(buffer.value, T.size, size, file)
}

export def write(file: File, ptr: type *T) -> size_t {
    return cstd::fwrite(ptr, T.size, 1, file)
}

export def write_str(file: File, str: &string) -> size_t {
    if not str { 
        let zero: size_t = 0
        return write(file, *zero) 
    }
    return write(file, *str.size) + write(file, @str)
}

// Deprecated
export def read_line(file: File, str: string) {
    cstd::fgets(str.value, str.size !int, file)
    str.size = strlen(str) + 1
}

// Rewind defined in cstd

export def seek(file: File, offset: long, whence: int) -> int {
    return cstd::fseek(file, offset, whence)
}

export def tell(file: File) -> long {
    return cstd::ftell(file)
}

// You should never have to use this
export def strlen(str: string) -> size_t {
    return cstd::strlen(str.value)
}

export def max(a: double, b: double) -> double {
    return cstd::fmax(a, b)
}

export def min(a: double, b: double) -> double {
    return cstd::fmin(a, b)
}

export def memcopy(src: *, dest: *, size: size_t) -> * {
    return cstd::memcpy(dest, src, size)
}

export def system(command: &string) -> int {
    return cstd::system(command.value)
}

export def getenv(str: &string) -> &string {
    let env = cstd::getenv(str.value)
    if env { return make_string(env) }
    return null
}

export def mkdir(path: &string) {
    #if defined WIN32 {
        windows::CreateDirectoryA(path.value, null)
    } else {
        linux::mkdir(path.value, 0o755 !ushort) // TODO MACOS
    }
}

export def dirname(file: &string) -> &string {
    var last_slash = -1
    for var i in 0..file.size {
        let c = file[i]
        if c == '/' or c == '\\' {
            last_slash = i
        }
    }
    let ret = allocate_ref(char, last_slash + 2)
    memcopy(file.value, ret.value, last_slash + 1)
    return ret
}

export def basename(file: &string) -> &string {
    var last_slash = 0
    for var i in 0..file.size {
        let c = file[i]
        if c == '/' or c == '\\' {
            last_slash = i
        }
    }
    let ret = allocate_ref(char, file.size - last_slash)
    memcopy(file.value ++ last_slash, ret.value, file.size - last_slash)
    return ret
}

export def executable_file -> &string {
    let resolved = zero_allocate(char, PATH_MAX)
    defer delete(resolved)
    #if defined WIN32 {
        let size = windows::GetModuleFileNameA(null, resolved.value, PATH_MAX)
        if size == 0 { 
            cstd::printf("GetModuleFileNameA failed with exit code: %lu\n".value, windows::GetLastError())
            abort()
        }
        resolved.size = size + 1
    } else {
        linux::readlink("/proc/self/exe".value, resolved.value, PATH_MAX)
        resolved.size = cstd::strlen(resolved.value) + 1
    }
    return resolved
}

export def absolute_path(pathname: &string) -> &string {
    let resolved = zero_allocate(char, PATH_MAX)
    defer delete(resolved)
    #if defined WIN32 {
        windows::GetFullPathNameA(pathname.value, PATH_MAX, resolved.value, null)
    } else {
        linux::realpath(pathname.value, resolved.value)
    }
    return make_string(resolved.value)
}

export def tmpfolder(name: &string) -> &string {
    #if defined WIN32 {
        // TODO We shouldn't ignore the name
        let path = allocate(char, PATH_MAX)
        defer delete(path)
        windows::GetTempPathA(PATH_MAX, path.value)
        concat(path, @name)
        windows::CreateDirectoryA(path.value, null)
        return make_string(path.value)
    } else {
        let path = zero_allocate(char, PATH_MAX)
        defer delete(path)
        concat(path, "/tmp/")
        concat(path, @name)
        concat(path, ".XXXXXX")
        path.size = strlen(path) + 1
        return make_string(linux::mkdtemp(path.value))
    }
}

export def read_all(fh: File) -> &string {
    seek(fh, 0, SEEK_END)
    let filesize = tell(fh)
    rewind(fh)
    let buf = allocate(char, filesize + 1)
    defer delete(buf)
    read(fh, buf, filesize)
    buf[filesize] = '\0'

    return buf
}

export def read_all_pipe(pipe: File) -> &string {
    var res: &string = ""
    var c: char
    while read(pipe, *c) {
        res += c
    }
    return res
}

export type UnixTime = uint64

#if defined WIN32 {
    const TICKS_PER_SECOND: uint64 = 10000000
    const EPOCH_DIFFERENCE: uint64 = 11644473600

    export def filetime_to_unix(ft: windows::FILETIME) -> UnixTime {
        let ticks: uint64 = ft.dwLowDateTime !uint64 | ft.dwHighDateTime !uint64 << 32
        var res = ticks / TICKS_PER_SECOND
        res -= EPOCH_DIFFERENCE
        return res
    }

    export def modified_time(file: File) -> UnixTime {
        let fh = cstd::_get_osfhandle(cstd::fileno(file)) !*
        var lpLastWriteTime: windows::FILETIME
        windows::GetFileTime(fh, null, null, *lpLastWriteTime)
        return filetime_to_unix(lpLastWriteTime)
    }

    export def created_time(file: File) -> UnixTime {
        let fh = cstd::_get_osfhandle(cstd::fileno(file)) !*
        var lpCreationTime: windows::FILETIME
        windows::GetFileTime(fh, *lpCreationTime, null, null)
        return filetime_to_unix(lpCreationTime)
    }
} else {

    export def timespec_to_unix(ts: linux::s_timespec) -> UnixTime {
        return ts.tv_sec !UnixTime
    }

    export def modified_time(file: File) -> UnixTime {
        let fd = cstd::fileno(file)
        var res: linux::s_stat
        linux::fstat(fd, *res)
        #if defined MACOS {
            return timespec_to_unix(res.st_mtimespec)
        } else {
            return timespec_to_unix(res.st_mtim)
        }
    }
    
    // Doesn't exist on linux
    /*export def created_time(file: File) -> UnixTime {
        
    }*/
}

export def print_stacktrace {
    const max_symbol_len = 512
    const max_stack = 128

    #if defined WIN32 {
        const SYMOPT_UNDNAME = 0x2
        
        let process = windows::GetCurrentProcess()
        windows::SymSetOptions(windows::SymGetOptions() & ~SYMOPT_UNDNAME)

        if not windows::SymInitialize(process, null, 1) {
            error("SymInitialize failed: ", windows::GetLastError(), "\n")
            abort()
        }

        var trace: [max_stack; *]
        let frames = windows::RtlCaptureStackBackTrace(0, max_stack, trace.value, null)
        var sym_info = zero_allocate(size_of windows::SYMBOL_INFO + max_symbol_len + 1) !*windows::SYMBOL_INFO
        sym_info.MaxNameLen = max_symbol_len
        sym_info.SizeOfStruct = size_of windows::SYMBOL_INFO !ulong

        for var i in 0..frames {

            if not windows::SymFromAddr(process, trace[i] !uint64, null, sym_info) {
                error("SymFromAddr failed: ", windows::GetLastError(), "\n")
                abort()
            }
            cstd::fprintf(stderr(), "%s [0x%x]\n".value, sym_info.Name.value, sym_info.Address)
        }

        windows::SymCleanup(process)
        delete(sym_info)
    } else {
        var trace: [max_stack; *]
        let frame_count = linux::backtrace(trace.value, max_stack)
        let symbols = linux::backtrace_symbols(trace.value, frame_count)
        if symbols {
            for var i in 0..frame_count {
                error(symbols[i], "\n")
            }
        }
    }
}