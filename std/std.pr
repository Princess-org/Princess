import cstd
import runtime
import optional
import vector

import strings
from strings export *

#if defined DEBUG_REF_CYCLES {
    import set
    import map
    
    type Root = struct {
        _ref: runtime::Ref
        file: Str
        line: int
    }

    var lock = false
    var ref_roots: *&map::Map(uint64, Root) = null // This is so that we keep the memory around

    // Internal methods
    def add_root(_ref: runtime::Ref, file: *char, line: int) {
        if lock { return } // This is because otherwise we stack overflow because adding a reference creates new roots
        var l = lock
        lock = true
        if not ref_roots {
            ref_roots = zero_allocate(type &map::Map(uint64, Root))
            @ref_roots = map::make(uint64, Root)
        }
        (@ref_roots)(_ref.value !uint64) = [ _ref = _ref, file = make_string(file), line = line ] !Root
        lock = l
    }

    def remove_root(_ref: runtime::Ref) {
        if lock { return }
        if not ref_roots { return }
        var l = lock
        lock = true
        (@ref_roots).remove(_ref.value !uint64)
        lock = l
    }

    def find_cycle_root(_ref: uint64, n: *int, all: &Set(uint64), children: &Set(uint64)) -> uint64 {
        let root = (@ref_roots)(_ref)
        let visited = set::make(uint64)
        let cycle = find_cycle(n, root._ref, visited, all, children)
        if cycle {
            error("Cycle root: ", ref_type(root._ref).tpe.name, " ", root.file + "@" + root.line, " (", _ref !*, ") \n")
        }
        all.add(_ref)
        return cycle
    }

    def copy(cur: &Set(uint64)) -> &Set(uint64) {
        let new_map = set::make(uint64)
        let keys = cur.keys()
        for var i in 0..keys.size {
            let key = keys(i)
            new_map.add(key)
        }
        return new_map
    }

    def find_cycle(tpe: *runtime::Type, n: *int, cur: *, visited: &Set(uint64), all: &Set(uint64), children: &Set(uint64)) -> uint64 {
        if tpe.kind == runtime::TypeKind::REFERENCE {
            let _ref = @(cur !*runtime::Ref)
            let cycle = find_cycle(n, _ref, copy(visited), all, children)
            children.add(_ref.value !uint64)
            return cycle
        } else if tpe.kind == runtime::TypeKind::STRUCT or tpe.kind == runtime::TypeKind::UNION {
            for var i in 0..tpe.fields.size {
                let field = tpe.fields(i)

                let value = cur ++ field.offset
                let cycle = find_cycle(field.tpe, n, value, copy(visited), all, children)
                if cycle {
                    error("-> ", field.tpe.name, ".", field.name, "\n")
                    return cycle
                }
            }
        } else if tpe.kind == runtime::TypeKind::STATIC_ARRAY {
            for var i in 0..tpe.length {
                let child = cur ++ (i * tpe.tpe.size)
                let cycle = find_cycle(tpe.tpe, n, child, copy(visited), all, children)
                if cycle {
                    error("-> ", tpe.name, "[", i, "]\n")
                    return cycle
                }
            }
        } else if tpe.kind == runtime::TypeKind::ARRAY {
            let value = @(cur !*[int8])
            for var i in 0..value.size {
                let child = value.value ++ (i * tpe.tpe.size)
                let cycle = find_cycle(tpe.tpe, n, child, copy(visited), all, children)
                if cycle {
                    error("-> ", tpe.name, "[", i, "]\n")
                    return cycle
                }
            }
        }
        return 0
    }

    def find_cycle(n: *int, cur: runtime::Ref, visited: &Set(uint64), all: &Set(uint64), children: &Set(uint64)) -> uint64 {
        if cur.value == null or not (@ref_roots).contains(cur.value !uint64) { 
            return 0 
        }
        
        if visited.contains(cur.value !uint64) {
            error("\n>>> Cycle ", @n, "\n")
            @n += 1
            return cur.value !uint64
        }

        var cycle: uint64 = 0
        visited.add(cur.value !uint64)
        if not all.contains(cur.value !uint64) { 
            let rtpe = ref_type(cur)
            if rtpe and rtpe.tpe {
                cycle = find_cycle(rtpe.tpe, n, cur.value, visited, all, children)
            }
        }
        all.add(cur.value !uint64)
        return cycle
    }

    def find_cycles_impl {
        if not ref_roots { 
            error("No roots found! No references were leaked\n")
            return 
        }
        error("Starting cycle finder...\n")
        let num_roots = (@ref_roots).size
        error(num_roots, " roots found\n")
        let keys = (@ref_roots).keys()
        let all = set::make(uint64)
        let children = set::make(uint64)
        var n = 1
        for var i in 0..keys.size {
            let _ref = keys(i)
            if not _ref { continue }
            let root = (@ref_roots)(_ref)
            cstd::printf("[%*d/%d] ".value, 1 + log10(num_roots) !int, i + 1, num_roots)
            let prev_n = n
            print(_ref !*, ": ", root._ref.tpe.name, " (" , @root._ref.ref_count, ")")
            fflush(stdout())

            find_cycle_root(_ref, *n, all, children)
            print("\x1B[2K\r")
        }
        print("\n")
        if n == 1 {
            error("No cycles found!\n")
        } else {
            error(n - 1, " cycles found!\n")
        }

        var m = 0
        for var i in 0..keys.size {
            let _ref = keys(i)
            if not _ref { continue }
            if not children.contains(_ref) {
                let root = (@ref_roots)(_ref)
                error("No reference to ", _ref !*, ": ", root._ref.tpe.name, " ", root.file, "@", root.line, " (", @root._ref.ref_count, ")\n")
                m += 1
            }
        }
        error(m, " out of ", keys.size, " references weren't reachable.\n")
    }

    export def find_cycles {
        var l = lock
        lock = true
        find_cycles_impl() // This is to prevent the lock from being reset before calling the destructors
        lock = l
    }
}

#if defined WIN32 {
    import windows
    export type File = *cstd::s__iobuf

    export def stdin  -> File { return cstd::__acrt_iob_func(0) }
    export def stdout -> File { return cstd::__acrt_iob_func(1) }
    export def stderr -> File { return cstd::__acrt_iob_func(2) }

    export const PATH_MAX = 260

} else if defined MACOS {
    import linux
    import macos
    export type File = *cstd::s___sFILE
    export type Dir = *linux::s_DIR

    export def stdin  -> File { return cstd::__stdinp  }
    export def stdout -> File { return cstd::__stdoutp }
    export def stderr -> File { return cstd::__stderrp }

    export const PATH_MAX = 4096
} else {
    import linux
    export type File = *cstd::s__IO_FILE
    export type Dir = *linux::s___dirstream

    export def stdin  -> File { return cstd::stdin  }
    export def stdout -> File { return cstd::stdout }
    export def stderr -> File { return cstd::stderr }

    export const PATH_MAX = 4096
}

export const MAX_UINT8: uint8 = 0xFF
export const MAX_UINT16: uint16 = 0xFFFF
export const MAX_UINT32: uint32 = 0xFFFFFFFF
export const MAX_UINT64: uint64 = 0xFFFFFFFFFFFFFFFF

export const MIN_INT8: int8 = -0x80
export const MIN_INT16: int16 = -0x8000
export const MIN_INT32: int32 = -0x80000000
export const MIN_INT64: int64 = -0x7FFFFFFFFFFFFFFF - 1

export const MAX_INT8: int8 = 0x7F
export const MAX_INT16: int16 = 0x7FFF
export const MAX_INT32: int32 = 0x7FFFFFFF
export const MAX_INT64: int64 = 0x7FFFFFFFFFFFFFFF

export const SEEK_SET: int = 0
export const SEEK_CUR: int = 1
export const SEEK_END: int = 2

export def c_error_str -> Str {
    #if defined MACOS {
        return make_string(cstd::strerror(@linux::__error()))
    } else if defined LINUX {
        return make_string(cstd::strerror(@liunx::__errno_location())) 
    } else {
        // TODO Implement for Windows
    }
}

// TODO This is causing an ambigious reference error, it really shouldn't
/*export def combine_hashes(a: uint64, b: uint64) -> uint64 {
    var hash: uint64 = 17
    hash = hash * 31 + a
    hash = hahs * 31 + b
    return hash
}*/

export def combine_hashes(hashes: uint64...) -> uint64 {
    var hash: uint64 = 17
    for var i in 0..hashes.size {
        hash = hash * 31 + hashes(i)
    }
    return hash
}

export def parse_int(str: String) -> int {
    var end: *char
    return cstd::strtol(str.to_array().value, *end, 10) !int
}

// Iterate references to array
// TODO Broken
/*export def iterate(arr: type &[T]) -> T {
    for var i in 0..arr.size {
        yield arr[i]
    }
}*/

// TODO This should kinda be in runtime but we can't import vector there
export def to_array(gen: &runtime::Generator(type T)) -> &[T] {
    let vec = vector::make(T)
    for var v in gen {
        vec.push(v)
    }
    return vec.to_array()
}

export def print(args: &...) -> int {
    return fprint(stdout(), args)
}

export def error(args: &...) -> int {
    return fprint(stderr(), args)
}

def make_ref(tpe: *runtime::Type, value: *) -> runtime::Ref {
    var _ref: runtime::Ref
    _ref.tpe = tpe
    _ref.value = value
    return _ref
}

//TODO Clang craps itself when I use defer in here
def print_val(file: File, _ref: runtime::Ref) -> int {
    let reftpe = runtime::ref_type(_ref)
    let tpe = reftpe.tpe if reftpe else null !*runtime::Type
    let value = _ref.value
    if not tpe or not value {
        return cstd::fprintf(file, "%p".value, value)
    } else if tpe == string {
        let str = value !*string
        cstd::fputs(str.value, file)
        return (str.size - 1) !int
    } else if tpe.kind == runtime::TypeKind::STATIC_ARRAY and tpe.tpe == char {
        return cstd::fprintf(file, "%s".value, value !*char)
    } else if tpe == StringSlice {
        let slc = _ref !&StringSlice
        if slc.data {
            cstd::fwrite(slc.data ++ slc.offset, 1, slc.count, file)
        } else {
            for var c in slc.chars() {
                cstd::putc(c, file)
            }
        }
        return slc.count !int
    } else if tpe == Str {
        let str = value !*Str
        cstd::fwrite(get_internal_buffer(str), 1, length(@str), file)
        return length(@str) !int
    } else if tpe == StringBuffer {
        fprint(file, to_string(@(value !*StringBuffer)))
    } else if tpe == type *char {
        return cstd::fprintf(file, "%s".value, @(value !**char))
    } else if tpe == size_t {
        return cstd::fprintf(file, "%zu".value, @(value !*size_t))
    } else if tpe == char {
        return cstd::fprintf(file, "%c".value, @(value !*char))
    } else if tpe == int8 {
        return cstd::fprintf(file, "%hhd".value, @(value !*int8))
    } else if tpe == uint8 {
        return cstd::fprintf(file, "%hhu".value, @(value !*uint8))
    } else if tpe == int16 {
        return cstd::fprintf(file, "%hd".value, @(value !*int16))
    } else if tpe == uint16 {
        return cstd::fprintf(file, "%hu".value, @(value !*uint16))
    } else if tpe == int32 {
        return cstd::fprintf(file, "%d".value, @(value !*int32))
    } else if tpe == uint32 {
        return cstd::fprintf(file, "%u".value, @(value !*uint32))
    } else if tpe == int64 {
        return cstd::fprintf(file, "%ld".value, @(value !*int64))
    } else if tpe == uint64 {
        return cstd::fprintf(file, "%lu".value, @(value !*uint64))
    } else if tpe == float64 {
        return cstd::fprintf(file, "%lf".value, @(value !*float64))
    } else if tpe == float32 {
        return cstd::fprintf(file, "%f".value, @(value !*float32))
    } else if tpe == bool {
        if @(value !*bool) {
            return cstd::fprintf(file, "true".value)
        } else {
            return cstd::fprintf(file, "false".value)
        } 
    } else if tpe.kind == runtime::TypeKind::POINTER {
        return cstd::fprintf(file, "%p".value, @(value !**))
    } else if tpe.kind == runtime::TypeKind::REFERENCE {
        let v = value !*runtime::Ref
        let ref_tpe = runtime::reference(tpe.tpe)
        let res = print_val(file, make_ref(ref_tpe, v.value))
        delete(ref_tpe)
        return res
    } else if tpe.kind == runtime::TypeKind::ARRAY {
        let arr = @(value !*[int8])
        let size = arr.size
        let elements = arr.value
        var sum = 0

        sum += cstd::fprintf(file, "[".value)
        for var i in 0..size {
            let ref_tpe = runtime::reference(tpe.tpe)
            sum += print_val(file, make_ref(ref_tpe, elements ++ i * tpe.tpe.size))
            delete(ref_tpe)
            if i < size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "]".value)
        return sum
    } else if tpe.kind == runtime::TypeKind::STATIC_ARRAY {
        let size = tpe.length
        var sum = 0

        sum += cstd::fprintf(file, "[".value)
        for var i in 0..size {
            let ref_tpe = runtime::reference(tpe.tpe)
            sum += print_val(file, make_ref(ref_tpe, value ++ i * tpe.tpe.size))
            delete(ref_tpe)
            if i < size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "]".value)
        return sum
    } else if tpe.kind == runtime::TypeKind::ENUM {
        var v: int64 = 0
        for var i in 0..tpe.tpe.size {
            v |= (@((value ++ i) !*byte)) !int64 << (i * 8)
        }

        var str = "INVALID!!"
        for var i in 0..tpe.enum_values.size {
            let ev = tpe.enum_values(i)
            if ev.value == v {
                str = ev.name
            }
        }
        return cstd::fprintf(file, "%s".value, str.value)
    } else if runtime::implements(reftpe, ToString) {
        let str = (_ref !&ToString).to_string()
        return print_val(file, str !Ref)
    } else if runtime::implements(reftpe, IString) {
        let str = (_ref !String)
        for var c in str.chars() {
            cstd::putc(c, file)
        }
        return str.length() !int
    } else if tpe.kind == runtime::TypeKind::STRUCT or tpe.kind == runtime::TypeKind::UNION {
        let fields = tpe.fields
        var sum = 0
        sum += cstd::fprintf(file, "[".value)
        for var i in 0..fields.size {
            let field = fields(i)
            sum += cstd::fprintf(file, "%s = ".value, field.name.value)
            
            let ref_tpe = runtime::reference(field.tpe)
            sum += print_val(file, make_ref(ref_tpe, value ++ field.offset))
            delete(ref_tpe)
            if i < fields.size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "] !%s".value, tpe.name.value)
        return sum
    }
}

export def fprint(file: File, args: &...) -> int {
    var sum = 0
    for var i in 0..args.size {
        let arg = args(i)
        let ref_tpe = runtime::ref_type(arg)
        if ref_tpe {
            sum += print_val(file, arg !runtime::Ref)
        } else {
            sum += cstd::fprintf(file, "null".value)
        }
    }
    return sum
}

// Optimized version
export def fprint(file: File, str: Str) -> int {
    cstd::fwrite(get_internal_buffer(*str), 1, length(str), file)
    return length(str) !int
}

export def abort(s: String) {
    fprint(stderr(), s)
    cstd::abort()
}

export def delete(v: type *T) {
    if not v { return }
    #if defined __destruct__::(*T) {
        __destruct__(v)
    }
    cstd::free(v)
}

export def delete(v: type [T]) {
    if not v.value { return }
    #if defined __destruct__::(*T) {
        for var i in 0..v.size {
            __destruct__(*v(i))
        }
    }
    cstd::free(v.value)
}

export def new(t: type T) -> *T {
    let ptr = allocate(T)
    memcopy(*t, ptr, size_of T)
    return ptr
}

// Deprecated
export def concat(base: string, to_append: string) {
    cstd::memcpy(base.value ++ cstd::strlen(base.value), to_append.value, to_append.size)
}

// Allocators
export def allocate(size: size_t) -> * {
    return cstd::malloc(size)
}

export def allocate(type T) -> *T {
    return cstd::malloc(T.size) !*T
}

export def allocate(type T, size: size_t) -> [T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::malloc(T.size * size) !*T
    return arr
}

export def zero_allocate(size: size_t) -> * {
    return cstd::calloc(1, size)
}

export def zero_allocate(type T) -> *T {
    return cstd::calloc(1, T.size) !*T
}

export def zero_allocate(type T, size: size_t) -> [T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::calloc(size, T.size) !*T
    return arr
}

export def allocate_ref(type T, size: size_t) -> &[T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::calloc(size, T.size) !*T
    defer cstd::free(arr.value)
    return arr !&[T]
}

export def reallocate(value: type *T, size: size_t) -> *T {
    return cstd::realloc(value, size) !*T
}

// Free pointer is in cstd

export def free(value: type [T]) {
    cstd::free(value.value)
}

// File functions

export def open(file_path: String, mode: String) -> File {
    return cstd::fopen(file_path.to_array().value, mode.to_array().value)
}

export def reopen(file_path: String, mode: String, file: File) -> File {
    return cstd::freopen(file_path.to_array().value, mode.to_array().value, file)
}

export def close(file: File) -> int {
    return cstd::fclose(file)
} 

// Reads buffer.size * T.size bytes from file
export def read(file: File, buffer: type [T]) -> size_t {
    return cstd::fread(buffer.value, T.size, buffer.size, file)
}

export def read(file: File, buffer: type [T], size: size_t) -> size_t {
    return cstd::fread(buffer.value, T.size, size, file)
}

export def read(file: File, ptr: type *T) -> size_t {
    return cstd::fread(ptr, T.size, 1, file)
}

export def read_str(file: File) -> Str {
    var len: size_t
    file.read(*len)
    if len == 0 { return [] !Str }
    let buf = allocate(char, len + 1)
    defer delete(buf)
    read(file, buf, len + 1)
    return buf
}

export def flush(file: File) {
    cstd::fflush(file)
    #if not defined WIN32 {
        linux::fsync(cstd::fileno(file))
    }
}

export def write(file: File, buffer: type [T]) -> size_t {
    return cstd::fwrite(buffer.value, T.size, buffer.size, file)
}

// TODO This might not be needed
export def write(file: File, buffer: type [T], size: size_t) -> size_t {
    return cstd::fwrite(buffer.value, T.size, size, file)
}

export def write(file: File, ptr: type *T) -> size_t {
    return cstd::fwrite(ptr, T.size, 1, file)
}

export def write(file: File, c: char) -> size_t {
    return cstd::fwrite(*c, 1, 1, file)
}

export def write_str(file: File, str: String) -> size_t {
    if not str or str.length() == 0 { 
        let zero: size_t = 0
        return write(file, *zero) 
    }
    return write(file, *str.length()) + write(file, @str.to_array())
}

// Deprecated
export def read_line(file: File, str: string) {
    cstd::fgets(str.value, str.size !int, file)
    str.size = strlen(str) + 1
}

// Rewind defined in cstd

export def seek(file: File, offset: long, whence: int) -> int {
    return cstd::fseek(file, offset, whence)
}

export def tell(file: File) -> long {
    return cstd::ftell(file)
}

// You should never have to use this
export def strlen(str: string) -> size_t {
    return cstd::strlen(str.value)
}

export def max(a: double, b: double) -> double {
    return cstd::fmax(a, b)
}

export def min(a: double, b: double) -> double {
    return cstd::fmin(a, b)
}

export def memcopy(src: *, dest: *, size: size_t) -> * {
    return cstd::memcpy(dest, src, size)
}

export def system(command: String) -> int {
    return cstd::system(command.to_array().value)
}

export def getenv(str: String) -> Str {
    let env = cstd::getenv(str.to_array().value)
    if env { return make_string(env) }
    return [] !Str
}

export def mkdir(path: String) {
    #if defined WIN32 {
        windows::CreateDirectoryA(path.to_array().value, null)
    } else {
        linux::mkdir(path.to_array().value, 0o755 !ushort) // TODO MACOS
    }
}

export def dirname(file: String) -> Str {
    var last_slash = -1
    for var i in 0..file.length() {
        let c = file(i)
        if c == '/' or c == '\\' {
            last_slash = i
        }
    }
    return file.substring(0, last_slash + 1)
}

export def basename(file: String) -> Str {
    var last_slash = 0
    for var i in 0..file.length() {
        let c = file(i)
        if c == '/' or c == '\\' {
            last_slash = i
        }
    }
    return file.substring(last_slash, file.length())
}

export def executable_file -> Str {
    let resolved = zero_allocate(char, PATH_MAX)
    defer delete(resolved)
    #if defined WIN32 {
        let size = windows::GetModuleFileNameA(null, resolved.value, PATH_MAX)
        if size == 0 { 
            cstd::printf("GetModuleFileNameA failed with exit code: %lu\n".value, windows::GetLastError())
            cstd::abort()
        }
        resolved.size = size + 1
    } else if defined MACOS {
        var size: uint = PATH_MAX !uint
        macos::_NSGetExecutablePath(resolved.value, *size)
        resolved.size = cstd::strlen(resolved.value) + 1
    } else {
        linux::readlink("/proc/self/exe".value, resolved.value, PATH_MAX)
        resolved.size = cstd::strlen(resolved.value) + 1
    }
    return resolved
}

export def absolute_path(pathname: String) -> Str {
    let resolved = zero_allocate(char, PATH_MAX)
    defer delete(resolved)
    #if defined WIN32 {
        windows::GetFullPathNameA(pathname.to_array().value, PATH_MAX, resolved.value, null)
    } else {
        cstd::realpath(pathname.to_array().value, resolved.value)
    }
    return make_string(resolved.value)
}

export def tmpfolder(name: String) -> Str {
    let cstr = name.to_array()
    #if defined WIN32 {
        // TODO We shouldn't ignore the name
        let path = allocate(char, PATH_MAX)
        defer delete(path)
        windows::GetTempPathA(PATH_MAX, path.value)
        concat(path, @cstr)
        windows::CreateDirectoryA(path.value, null)
        return make_string(path.value)
    } else {
        let path = zero_allocate(char, PATH_MAX)
        defer delete(path)
        concat(path, "/tmp/")
        concat(path, @cstr)
        concat(path, ".XXXXXX")
        path.size = strlen(path) + 1
        return make_string(linux::mkdtemp(path.value))
    }
}

export def read_all(fh: File) -> Str {
    seek(fh, 0, SEEK_END)
    let filesize = tell(fh)
    rewind(fh)
    let buf = allocate(char, filesize + 1)
    defer delete(buf)
    read(fh, buf, filesize)
    buf(filesize) = '\0'

    return buf
}

export def read_all_pipe(pipe: File) -> Str {
    var res: StringBuffer = ""
    var c: char
    while read(pipe, *c) {
        res += c
    }
    return res
}

// TODO Windows
#if not defined WIN32 {
    const BUFF_SIZE = 4096
    const POLLIN: short = 1

    export def read_remaining(file: File) -> Str {
        var res: StringBuffer
        let fd = cstd::fileno(file)

        var pfd = [fd = fd, events = POLLIN, revents = 0] !linux::s_pollfd;
        if linux::poll(*pfd, 1, 0) <= 0 {
            return ""
        }
        var buffer: [BUFF_SIZE; char]
        loop {
            let nread = linux::read(fd, buffer.value, BUFF_SIZE)
            if nread <= 0 { break }
            res += to_str(nread, buffer.value)
        }
        return res
    }
}

export type UnixTime = uint64

#if defined WIN32 {
    const TICKS_PER_SECOND: uint64 = 10000000
    const EPOCH_DIFFERENCE: uint64 = 11644473600

    export def filetime_to_unix(ft: windows::s__FILETIME) -> UnixTime {
        let ticks: uint64 = (ft.dwLowDateTime !uint64) | ft.dwHighDateTime !uint64 << 32
        var res = ticks / TICKS_PER_SECOND
        res -= EPOCH_DIFFERENCE
        return res
    }

    export def modified_time(file: File) -> UnixTime {
        let fh = cstd::_get_osfhandle(cstd::fileno(file)) !*
        var lpLastWriteTime: windows::s__FILETIME
        windows::GetFileTime(fh, null, null, *lpLastWriteTime)
        return filetime_to_unix(lpLastWriteTime)
    }

    export def created_time(file: File) -> UnixTime {
        let fh = cstd::_get_osfhandle(cstd::fileno(file)) !*
        var lpCreationTime: windows::s__FILETIME
        windows::GetFileTime(fh, *lpCreationTime, null, null)
        return filetime_to_unix(lpCreationTime)
    }
} else {

    export def timespec_to_unix(ts: linux::s_timespec) -> UnixTime {
        return ts.tv_sec !UnixTime
    }

    export def modified_time(file: File) -> UnixTime {
        let fd = cstd::fileno(file)
        var res: linux::s_stat
        linux::fstat(fd, *res)
        #if defined MACOS {
            return timespec_to_unix(res.st_mtimespec)
        } else {
            return timespec_to_unix(res.st_mtim)
        }
    }
    
    // Doesn't exist on linux
    /*export def created_time(file: File) -> UnixTime {
        
    }*/
}

export def print_stacktrace {
    const max_symbol_len = 512
    const max_stack = 128

    #if defined WIN32 {
        const SYMOPT_UNDNAME = 0x2
        
        let process = windows::GetCurrentProcess()
        windows::SymSetOptions(windows::SymGetOptions() & ~SYMOPT_UNDNAME)

        if not windows::SymInitialize(process, null, 1) {
            error("SymInitialize failed: ", windows::GetLastError(), "\n")
            cstd::abort()
        }

        var trace: [max_stack; *]
        let frames = windows::RtlCaptureStackBackTrace(0, max_stack, trace.value, null)
        var sym_info = zero_allocate(size_of windows::s__SYMBOL_INFO + max_symbol_len + 1) !*windows::s__SYMBOL_INFO
        sym_info.MaxNameLen = max_symbol_len
        sym_info.SizeOfStruct = size_of windows::s__SYMBOL_INFO !ulong

        for var i in 0..frames {

            if not windows::SymFromAddr(process, trace(i) !uint64, null, sym_info) {
                error("SymFromAddr failed: ", windows::GetLastError(), "\n")
                cstd::abort()
            }
            cstd::fprintf(stderr(), "%s [0x%x]\n".value, sym_info.Name.value, sym_info.Address)
        }

        windows::SymCleanup(process)
        delete(sym_info)
    } else if not defined cstd::MUSL and not defined MACOS {
        // TODO Backtrace on macos
        var trace: [max_stack; *]
        let frame_count = linux::backtrace(trace.value, max_stack)
        let symbols = linux::backtrace_symbols(trace.value, frame_count)
        if symbols {
            for var i in 0..frame_count {
                error(symbols(i), "\n")
            }
        }
    }
}