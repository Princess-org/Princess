import cstd
import std

const DEFAULT_REGION_SIZE = 4 * 1024 // Default page size

type Region = struct {
    next: *Region
    capacity: size_t
    count: size_t
    data: *
}

export type Arena = struct {
    start: *Region
    end: *Region
    region_capacity: size_t
}

def make_region(capacity: size_t) -> *Region {
    let region = zero_allocate(Region)
    region.capacity = capacity
    region.count = 0
    region.data = zero_allocate(capacity) // TODO We might not want to do that in the default case
    return region
}

export def make(capacity: size_t = DEFAULT_REGION_SIZE) -> &Arena {
    return [
        region_capacity = capacity
    ] !&Arena
}

export def allocate(arena: &Arena, type T) -> *T {
    return allocate(arena, T.size) !*T
}

export def allocate(arena: &Arena, size: size_t) -> * {
    var end = arena.end
    if not end {
        arena.start = make_region(arena.region_capacity)
        end = arena.end = arena.start
    }
    if end.count + size <= end.capacity {
        // We got enought capacity left
        let cur = end.count
        end.count += size
        return end.data ++ cur
    }
    // We need to create a new region
    let new_end = make_region(max(size, arena.region_capacity) !size_t)
    new_end.count = size
    end.next = new_end
    arena.end = new_end
    return new_end.data
}

// TODO Use destructor once we have move semantics
export def free(arena: &Arena) {
    var region = arena.start
    while region {
        free(region.data)
        let next_region = region.next
        free(region)
        region = next_region
    }
    // Reset the arena
    arena.start = null
    arena.end = null
}