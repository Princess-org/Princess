import cstd
import std
import map
import optional

let sentinel = 1 !*

export type Set(type T) = map::Map(T, *)
export type SSet = Set(Str)

export def make(type T) -> &Set(T) {
    return map::make(T, type *)
}

export def make() -> &SSet {
    return map::make(Str, type *)
}

export def add(set: &Set(type T), value: T) {
    map::set_item(set, value, sentinel)
}

export def add_all(set: &Set(type T), other: &Set(T)) {
    if not other { return }
    let keys = other.keys()
    for var i in 0..keys.size {
        set.add(keys[i])
    }
}

export def copy(set: &Set(type T)) -> &Set(T) {
    let new_set = make(T)
    add_all(new_set, set)
    return new_set
}

from map export remove, contains