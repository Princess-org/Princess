import runtime
import std
import cstd
import optional
let INITIAL_SIZE = 8

export type Vector(type T) = struct {
    length: size_t
    data: [T]
}

export def destruct(this: *Vector(type T)) {
    delete(this.data)
}

export def construct(copy: *Vector(type T), this: *Vector(T)) {
    copy.length = this.length
    copy.data = zero_allocate(T, this.data.size)
    for var i in 0..this.length {
        copy.data(i) = this.data(i)
    }
}

def roundup(n: size_t) -> size_t {
    if n == 0 {
        return 0
    }
    var r: size_t = 1
    while n > r {
        r *= 2
    }
    return r
}

export def make(type T) -> &Vector(T) {
    return [
        length = 0,
        data = zero_allocate(T, INITIAL_SIZE)
    ] !Vector(T)
}

export def resize(vec: &Vector(type T), size: size_t) {
    if size > vec.length {
        extend(vec, size - vec.length)
    }
    // TODO Call destructors on shrinking
    vec.length = size
}

def extend(vec: &Vector(type T), delta: size_t) {
    if vec.length + delta < vec.data.size {
        return
    }
    let nelem = max(roundup(vec.length + delta), INITIAL_SIZE) !size_t
    vec.data.value = reallocate(vec.data.value, size_of T * nelem)
    memset(vec.data.value ++ vec.data.size, 0, (nelem - vec.data.size) * size_of T)
    vec.data.size = nelem
}

export def length(vec: &Vector(type T)) -> size_t {
    return vec.length
}

export def get(vec: &Vector(type T), index: size_t) -> *T {
    assert index >= 0 and index < vec.length
    return *vec.data(index)
}

export def apply(vec: &Vector(type T), index: size_t) -> T {
    assert index >= 0 and index < vec.length
    return vec.data(index)
}

export def update(vec: &Vector(type T), index: size_t, val: T) {
    assert index >= 0 and index < vec.length
    vec.data(index) = val
}

export def push(vec: &Vector(type T), elem: T) {
    extend(vec, 1)
    vec.data(vec.length) = elem
    vec.length += 1
}

export def prepend(vec: &Vector(type T), elem: T) {
    extend(vec, 1)
    for var i in 0..vec.length {
        let j = vec.length - i
        vec.data(j) = vec.data(j - 1)
    }
    vec.data(0) = elem
    vec.length += 1
}

export def peek(vec: &Vector(type T)) -> T {
    assert vec.length > 0
    return vec.data(vec.length - 1)
}

export def pop(vec: &Vector(type T)) -> T {
    assert vec.length > 0
    var v = *vec.data(vec.length - 1)
    var ret = @v
    #if defined __destruct__::(*T) {
        __destruct__(v)
    }
    cstd::memset(vec.data.value ++ (vec.length - 1), 0, size_of T)
    vec.length -= 1
    return ret
}

export def head(vec: &Vector(type T)) -> T {
    assert vec.length > 0
    return vec(0)
}

export def head_vec(vec: &Vector(type T)) -> &Vector(T) {
    let elem = head(vec)
    let new = make(T)
    push(new, elem)
    return new
}

export def tail(vec: &Vector(type T)) -> &Vector(T) {
    let new = make(T)
    if length(vec) < 2 { return new }
    for var i in 1..vec.length {
        push(new, vec(i))
    }
    return new
}

export def copy(vec: &Vector(type T)) -> &Vector(T) {
    if not vec { return null }
    return @vec
}

// TODO Assert that equality is defined
/*export def index_of(vec: &Vector(type T), elem: T) -> int64 {
    for var i in 0..vec.length {
        if vec[i] == elem {
            return i
        }
    }
    return -1
}*/

export def insert(vec: &Vector(type T), index: size_t, elem: T) {
    assert index <= vec.length
    extend(vec, 1)
    vec.length += 1

    var i = vec.length - 1
    while i > index {
        vec(i) = vec(i - 1)
        i -= 1
    }
    vec(index) = elem
}

export def insert(vec: &Vector(type T), index: size_t, vec2: &Vector(T)) {
    if not vec2 or vec2.length == 0 {
        return 
    }
    
    assert index <= vec.length
    extend(vec, vec2.length)
    vec.length += vec2.length

    var i = vec.length - 1
    while i >= index + vec2.length {
        vec(i) = vec(i - vec2.length)
        i -= 1
    }
    for var i in 0..vec2.length {
        vec(index + i) = vec2(i)
    }
}

export def add_all(vec: &Vector(type T), vec2: &Vector(T)) {
    let offset = vec.length
    extend(vec, vec2.length)
    vec.length += vec2.length
    for var i in 0..vec2.length {
        vec(offset + i) = vec2(i)
    }
}

export def remove(vec: &Vector(type T), index: size_t) {
    assert index < vec.length
    
    for var i in index..(vec.length - 1)  {
        vec(i) = vec(i + 1)
    }
    #if defined __destruct__::(*T) {
        __destruct__(*vec.data(vec.length - 1))
    }
    memset(vec.data.value ++ (vec.length - 1), 0, size_of T)
    vec.length -= 1
}

export def iterate(vec: &Vector(type T)) -> T {
    for var i in 0..vec.length {
        yield vec(i)
    }
}

export def iterate_ref(vec: &Vector(type T)) -> *T {
    for var i in 0..vec.length {
        yield vec.get(i)
    }
}

export def to_array(vec: &Vector(type T)) -> &[T] {
    let ret = allocate_ref(T, vec.length)
    for var i in 0..vec.length {
        ret(i) = vec(i)
    }
    return ret
}