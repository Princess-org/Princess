// TODO This needs to be tested, and reworked

import cstd
import std
import map
import vector

type OptionKind = enum {
    STR
    STRARR
    BOOL
    STR_VEC
    STRARR_VEC
}

// TODO Marking these inline breaks the compiler, please investigate
def is_str(option: *Option) -> bool {
    return option.kind == OptionKind::STR or option.kind == OptionKind::STR_VEC
}
def is_arr(option: *Option) -> bool {
    return option.kind == OptionKind::STRARR or option.kind == OptionKind::STRARR_VEC
}

export type Option = struct {
    kind: OptionKind
    data: *

    longop: Str
    nargs: int
    shortop: char
    is_set: bool

    is_required: bool
    help: Str
    metavar: Str
}

export def option(data: *&[Str], longop: Str, nargs: int) -> Option {
    return { OptionKind::STRARR, data, longop, nargs } !Option
}
export def option(data: *bool, longop: Str) -> Option {
    return { OptionKind::BOOL, data, longop, 0 } !Option
}
export def option(data: *Str, longop: Str) -> Option {
    return { OptionKind::STR, data, longop, 1 } !Option
}
export def option(data: *&Vector(Str), longop: Str) -> Option {
    return { OptionKind::STR_VEC, data, longop, 1 } !Option
}
export def option(data: *&Vector(&[Str]), longop: Str, nargs: int) -> Option {
    return { OptionKind::STRARR_VEC, data, longop, nargs } !Option
}

export def set_required(option: Option) -> Option  {
    option.is_required = true
    return option
}
export def set_shortop(option: Option, shortop: char) -> Option {
    option.shortop = shortop
    return option
}
export def set_help(option: Option, help: Str) -> Option {
    option.help = help
    return option
}
export def set_metavar(option: Option, metavar: Str) -> Option {
    option.metavar = metavar
    return option
}

export type OptionParser = struct {
    options: &[Option]
    description: Str
}

export def make_parser(options: &[Option], description: Str) -> &OptionParser {
    return { options, description } !OptionParser
}

const INDENT = 26

def print_help(parser: &OptionParser, program: Str) {
    let options = parser.options
    print("OVERVIEW: ", parser.description, "\n")
    print("\n")
    print("USAGE: ", program, " [options] ")
    
    for var i in 0..options.size {
        let option = *options[i]
        if not starts_with(option.longop, "--") {
            if not option.metavar { continue }
            if option.is_required {
                print(option.metavar)
            } else {
                print("[", option.metavar, "]")
            }
        }
    }

    print("\n\n")
    print("OPTIONS: \n")

    var size = print(" --help ")
    while size < INDENT {
        size += print(" ")
    }
    print("Display this help message\n")
    
    for var i in 0..options.size {
        let option = *options[i]
        if not starts_with(option.longop, "--") {
            continue
        }

        var size = print(" ")
        if option.shortop {
            size += print("-", option.shortop, " ")
        }
        size += print(option.longop)

        if option.metavar {
            size += print(" <", option.metavar, "> ")
        }
        if size >= INDENT {
            size = 0
            print("\n")
        }
        while size < INDENT {
            size += print(" ")
        }
        if option.help {
            print(option.help)
        }
        print("\n")
    }
}

def find_option(options: &[Option], str: Str, index: int, end_of_options: bool) -> *Option {
    var optindex = 0
    for var i in 0..options.size {
        let option = *options[i]
        if not starts_with(option.longop, "-") {
            if (end_of_options or not starts_with(str, "--")) and (index - optindex < option.nargs) or option.kind == OptionKind::STR_VEC {
                return option
            } 
            optindex += option.nargs
        } else if not end_of_options and starts_with(str, "--") {
            if option.longop == str {
                return option
            } else if starts_with(str, option.longop) and 
                length(str) > length(option.longop) and
                str[length(option.longop)] == '=' {

                return option
            }
        } else {
            if length(str) > 1 and str[1] == option.shortop {
                return option
            }
        }
    }
    return null
}

def set_value(option: *Option, value: type T) -> bool {
    if option.kind == OptionKind::STR_VEC or option.kind == OptionKind::STRARR_VEC {
        let vec = (option.data !*&Vector(T))
        if not @vec { // Initialize vector if not set
            @vec = vector::make(T)
        }
        (@vec).push(value)
    } else if option.is_set {
        error("Option ", option.longop, " was repeated!\n")
        return false
    } else {
        @(option.data !*T) = value
    }
    option.is_set = true

    return true
}

export def parse(option_parser: &OptionParser, args: [string]) -> bool {
    let options = option_parser.options
    var index = 0
    var i = 1
    var end_of_options = false
    while i < args.size {
        let arg = args[i]
        var option = find_option(options, arg, index, end_of_options)
        
        if arg == "--" and not end_of_options { 
            end_of_options = true
            i += 1
            continue
        }

        if not end_of_options and starts_with(arg, "--") {
            if arg == "--help" {
                print_help(option_parser, args[0])
                exit(0)
            }
            if not option {
                error("Unknown long option: ", arg, "\n")
                return false
            }

            if option.kind == OptionKind::BOOL {
                // parse --opt
                if not set_value(option, not @(option.data !*bool)) { return false }
                i += 1
            } else if length(arg) > length(option.longop) {
                // parse --opt="arg"
                if not is_str(option) {
                    error("Invalid number of arguments to option ", arg, "\n")
                    return false
                }
                let s = arg.substring(length(option.longop) + 1, length(arg))
                if not set_value(option, s) { return false }
                i += 1
            } else if is_str(option) {
                // parse --opt arg
                var str: Str
                i += 1
                if i < args.size and not starts_with(args[i], "-") {
                    str = args[i]
                } else {
                    error("Not enough arguments to ", arg, "\n")
                    return false
                }
                if not set_value(option, str) { return false }
                i += 1
            } else if is_arr(option) {
                // parse --opt arg1 arg2
                let arr = allocate_ref(Str, option.nargs)
                i += 1
                for var j in 0..option.nargs {
                    if i < args.size and not starts_with(args[i], "-") {
                        arr[j] = args[i]
                    } else {
                        error("Not enough arguments to ", arg, "\n")
                        return false
                    }
                    i += 1
                }
                if not set_value(option, arr) { return false }
            } else {
                error("Wrong number of arguments provided for ", arg, "\n")
                return false
            }
        } else if not end_of_options and starts_with(arg, "-") {
            var j = 1
            loop {
                if not option {
                    error("Unknown short option: ", arg, "\n")
                    return false
                }

                if option.kind == OptionKind::BOOL {
                    // parse -X
                    if not set_value(option, not @(option.data !*bool)) { return false }
                    if j == length(arg) - 1 {
                        i += 1
                    }
                } else if is_str(option) and j < length(arg) - 1 {
                    // parse -XArg
                    if not set_value(option, arg.substring(j + 1, length(arg))) { return false }
                    i += 1
                    j = length(arg) !int - 1
                } else if j == length(arg) - 1 {
                    if is_str(option) {
                        // parse -X arg
                        i += 1
                        if i < args.size and not starts_with(args[i], "-") {
                            if not set_value(option, to_str(args[i])) { return false }
                        } else {
                            error("Not enough arguments to ", arg, "\n")
                            return false
                        }
                        i += 1
                    } else if is_arr(option) {
                        // parse -X arg1 arg2
                        let arr = allocate_ref(Str, option.nargs)
                        i += 1
                        for var j in 0..option.nargs {
                            if i < args.size and not starts_with(args[i], "-") {
                                arr[j] = args[i]
                            } else {
                                error("Not enough arguments to ", arg, "\n")
                                return false
                            }
                            i += 1
                        }
                        if not set_value(option, arr) { return false }
                    } else {
                        error("Invalid argument: ", arg, "\n")
                        return false
                    }
                } else {
                    error("Invalid argument: ", arg, "\n")
                    return false
                }

                // Deal with mashed shortopts like -abc for -a -b -c
                j += 1
                if j < length(arg) {
                    for var i in 0..options.size {
                        let option2 = *options[i]
                        if option2.shortop == arg[j] {
                            option = option2
                            break
                        }
                    }
                    continue
                }
                break
            }
        } else {
            if not option {
                error("Too many positional arguments\n")
                return false
            }

            if is_str(option) {
                if not set_value(option, to_str(args[i])) { return false }
                i += 1
            } else if is_arr(option) {
                let arr = allocate_ref(Str, option.nargs)
                for var j in 0..option.nargs {
                    if i < args.size and not starts_with(args[i], "-") {
                        arr[j] = args[i]
                    } else {
                        error("Not enough arguments to ", option.longop, "\n")
                        return false
                    }
                    i += 1
                }
                if not set_value(option, arr) { return false }
            }

            index += option.nargs
        }
    }
    for var i in 0..options.size {
        let option = *options[i]
        if not option.is_set {
            if option.is_required and not (option.kind == OptionKind::STR_VEC or option.kind == OptionKind::STRARR_VEC) {
                error("Option ", option.longop, " not specified\n")
                return false
            }
        }
    }
    return true
}