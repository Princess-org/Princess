// TODO This needs to be tested, and reworked

import cstd
import std
import map
import vector

export type ValueKind = enum {
    STRING
    ARRAY
    BOOLEAN
}

export type Value = struct {
    next: &Value
    kind: ValueKind
    struct #union {
        str: String
        arr: &[String]
        b: bool
    }
}

export def destruct(value: *Value) {
    if value.kind == ValueKind::STRING {
        __destruct__(*value.str)
    } else if value.kind == ValueKind::ARRAY {
        __destruct__(*value.arr)
    }
}

export type Option = struct {
    shortop: char
    longop: String
    nargs: int
    repeat: bool
    default: &Value
    is_set: bool
    value: &Value
    help: String
    metavar: String
}

export def option_repeat(shortop: char, longop: String) -> Option {
    return { shortop, longop, 1, true } !Option
}
export def option_repeat(shortop: char, longop: String, nargs: int) -> Option {
    return { shortop, longop, nargs, true } !Option
}
export def option_repeat(shortop: char, longop: String, default: [String]) -> Option {
    var value: &Value = null
    for var i in 0..default.size {
        let next = { kind = ValueKind::STRING} !&Value
        next.str = default[i]
        if value { value.next = next }
        value = next
    }
    return { shortop, longop, 1, true, value } !Option
}
export def option_repeat(shortop: char, longop: String, nargs: int, default: [[String]]) -> Option {
    var value: &Value = null
    for var i in 0..default.size {
        let next = { kind = ValueKind::ARRAY } !&Value
        next.arr = default[i]
        if value { value.next = next }
        value = next
    }
    return { shortop, longop, nargs, true, value } !Option
}

export def option_repeat(longop: String) -> Option {
    return option_repeat('\0', longop)
}
export def option_repeat(longop: String, nargs: int) -> Option {
    return option_repeat('\0', longop, nargs)
}
export def option_repeat(longop: String, default: [String]) -> Option {
    return option_repeat('\0', longop, default)
}
export def option_repeat(longop: String, nargs: int, default: [[String]]) -> Option {
    return option_repeat('\0', longop, nargs, default)
}

export def option(shortop: char, longop: String, nargs: int, default: [String]) -> Option {
    assert(nargs == default.size)
    assert(nargs > 1) // TODO This is a bit arbitrary
    let value = { kind = ValueKind::ARRAY } !&Value
    value.arr = default
    return { shortop, longop, nargs, false, value }
}
export def option(shortop: char, longop: String, default: bool) -> Option {
    let value = { kind = ValueKind::BOOLEAN } !&Value
    value.b = default
    return { shortop, longop, 0, false, value }
}
export def option(shortop: char, longop: String, default: String) -> Option {
    let value = { kind = ValueKind::STRING } !&Value
    value.str = default
    return { shortop, longop, 1, false, value }
}

export def option(shortop: char, longop: String, nargs: int) -> Option {
    assert(nargs > 1)
    return { shortop, longop, nargs, false }
}
export def option(shortop: char, longop: String) -> Option {
    return { shortop, longop, 1, false }
}

export def option(longop: String, nargs: int, default: [String]) -> Option {
    return option('\0', longop, nargs, default)
}
export def option(longop: String, default: bool) -> Option {
    return option('\0', longop, default)
}
export def option(longop: String, default: String) -> Option {
    return option('\0', longop, default)
}

export def option(longop: String, nargs: int) -> Option {
    return option('\0', longop, nargs)
}
export def option(longop: String) -> Option {
    return option('\0', longop)
}

export def set_help(option: Option, help: String) -> Option {
    option.help = help
    return option
}

export def set_metavar(option: Option, metavar: String) -> Option {
    option.metavar = metavar
    return option
}

export type OptionParser = struct {
    options: [Option]
    description: String
}

export def make_parser(options: [Option], description: String) -> OptionParser {
    return { options, description } !OptionParser
}

export def get_value(parser: *OptionParser, name: String) -> &Value {
    let options = parser.options
    for var i in 0..options.size {
        let option = *options[i]
        if option.longop == name {
            return option.value
        }
    }
    return null
}

export def get_value_as_vec(parser: *OptionParser, name: String) -> &Vector(&Value) {
    let res = vector::make(type &Value)
    var value = get_value(parser, name)
    while value {
        res.push(value)
        value = value.next
    }
    return res
}

const INDENT = 26

def print_help(parser: *OptionParser, program: String) {
    let options = parser.options
    print("OVERVIEW: ", parser.description, "\n")
    print("\n")
    print("USAGE: ", program, " [options] ")
    
    for var i in 0..options.size {
        let option = *options[i]
        if not starts_with(option.longop, "--") {
            if not option.metavar { continue }
            if not option.default {
                print(option.metavar)
            } else {
                print("[", option.metavar, "]")
            }
        }
    }

    print("\n\n")
    print("OPTIONS: \n")

    var size = print(" --help ")
    while size < INDENT {
        size += print(" ")
    }
    print("Display this help message\n")
    
    for var i in 0..options.size {
        let option = *options[i]
        if not starts_with(option.longop, "--") {
            continue
        }

        var size = print(" ")
        if option.shortop {
            size += print("-", option.shortop, " ")
        }
        size += print(option.longop)

        if option.metavar {
            size += print(" <", option.metavar, "> ")
        }
        if size >= INDENT {
            size = 0
            print("\n")
        }
        while size < INDENT {
            size += print(" ")
        }
        if option.help {
            print(option.help)
        }
        print("\n")
    }
}

def find_option(options: [Option], str: String, index: int) -> *Option {
    var optindex = 0
    for var i in 0..options.size {
        let option = *options[i]
        if not starts_with(option.longop, "-") {
            if not starts_with(str, "--") and index - optindex < option.nargs {
                return option
            } 
            optindex += option.nargs
        } else if starts_with(str, "--") {
            if option.longop == str {
                return option
            } else if starts_with(str, option.longop) and 
                length(str) > length(option.longop) and
                str[length(option.longop)] == '=' {

                return option        
            }
        } else {
            if length(str) > 1 and str[1] == option.shortop {
                return option
            }
        }
    }
    return null
}

def set_value(arg: String, option: *Option, value: &Value) -> bool {
    if option.is_set {
        if option.repeat {
            if not option.value {
                option.value = value
            } else {
                // Jump to the end of the linked list
                var last = option.value
                while last.next {
                    last = last.next
                }
                last.next = value
            }
        } else {
            error("Option ", arg, " was repeated!\n")
            return false
        }
    } else {
        option.value = value
    }
    option.is_set = true

    return true
}

export def parse(option_parser: *OptionParser, args: [string]) -> bool {
    let options = option_parser.options
    var index = 0
    var i = 1
    while i < args.size {
        let arg = args[i]
        var option = find_option(options, arg, index)
        if starts_with(arg, "--") {
            if arg == "--help" {
                print_help(option_parser, args[0])
                exit(0)
            }
            if not option {
                error("Unknown long option: ", arg, "\n")
                return false
            }

            let value = {} !&Value
            if option.nargs == 0 {
                // parse --opt
                value.kind = ValueKind::BOOLEAN
                value.b = not option.default.b
                i += 1
            } else if length(arg) > length(option.longop) {
                value.kind = ValueKind::STRING
                // parse --opt="arg"
                if option.nargs != 1 {
                    error("Invalid number of arguments to option ", arg, "\n")
                    return false
                }
                value.str = arg.substring(length(option.longop) + 1, length(arg))
                i += 1
            } else {
                if option.nargs == 1 {
                    value.kind = ValueKind::STRING
                    // parse --opt arg
                    i += 1
                    if i < args.size and not starts_with(args[i], "-") {
                        value.str = args[i]
                    } else {
                        error("Not enough arguments to ", arg, "\n")
                        return false
                    }
                    i += 1
                } else {
                    // parse --opt arg1 arg2
                    value.kind = ValueKind::ARRAY
                    let arr = allocate_ref(String, option.nargs)
                    i += 1
                    for var j in 0..option.nargs {
                        if i < args.size and not starts_with(args[i], "-") {
                            arr[j] = args[i]
                        } else {
                            error("Not enough arguments to ", arg, "\n")
                            return false
                        }
                        i += 1
                    }
                    value.arr = arr
                }
            }
            if not set_value(arg, option, value) { return false }
        } else if starts_with(arg, "-") {
            var j = 1
            loop {
                if not option {
                    error("Unknown short option: ", arg, "\n")
                    return false
                }

                let value = {} !&Value
                if option.nargs == 0 {
                    // parse -X
                    value.kind = ValueKind::BOOLEAN
                    value.b = not option.default.b
                    if j == length(arg) - 1 {
                        i += 1
                    }
                } else if option.nargs == 1 and j < length(arg) - 1 {
                    value.kind = ValueKind::STRING
                    // parse -XArg
                    value.str = arg.substring(j + 1, length(arg))
                    i += 1
                    j = length(arg) !int - 1
                } else if j == length(arg) - 1 {
                    if option.nargs == 1 {
                        value.kind = ValueKind::STRING
                        // parse -X arg
                        i += 1
                        if i < args.size and not starts_with(args[i], "-") {
                            value.str = args[i]
                        } else {
                            error("Not enough arguments to ", arg, "\n")
                            return false
                        }
                        i += 1
                    } else {
                        value.kind = ValueKind::ARRAY
                        // parse -X arg1 arg2
                        let arr = allocate_ref(String, option.nargs)
                        i += 1
                        for var j in 0..option.nargs {
                            if i < args.size and not starts_with(args[i], "-") {
                                arr[j] = args[i]
                            } else {
                                error("Not enough arguments to ", arg, "\n")
                                return false
                            }
                            i += 1
                        }
                        value.arr = arr
                    }
                } else {
                    error("Invalid argument: ", arg, "\n")
                    return false
                }
                if not set_value(arg, option, value) { return false }
                
                // Deal with mashed shortopts like -abc for -a -b -c
                j += 1
                if j < length(arg) {
                    for var i in 0..options.size {
                        let option2 = *options[i]
                        if option2.shortop == arg[j] {
                            option = option2
                            break
                        }
                    }
                    continue
                }
                break
            }
        } else {
            if not option {
                error("Too many positional arguments\n")
                return false
            }

            let value = {} !&Value

            if option.nargs == 1 {
                value.kind = ValueKind::STRING
                value.str = args[i]
                i += 1
            } else {
                let arr = allocate_ref(String, option.nargs)
                for var j in 0..option.nargs {
                    if i < args.size and not starts_with(args[i], "-") {
                        arr[j] = args[i]
                    } else {
                        error("Not enough arguments to ", option.longop, "\n")
                        return false
                    }
                    i += 1
                }
                value.kind = ValueKind::ARRAY
                value.arr = arr
            }

            set_value(arg, option, value)
            index += option.nargs
        }
    }
    for var i in 0..options.size {
        let option = *options[i]
        if not option.is_set {
            if not option.default and not option.repeat {
                error("Option ", option.longop, " not specified\n")
                return false
            } else {
                option.value = option.default
            }
        }
    }
    return true
}