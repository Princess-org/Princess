export type e_idtype_t = enum { P_ALL; P_PID = 1; P_PGID = 2; }
export type s_div_t = struct { quot: int; rem: int; }
export type s_ldiv_t = struct { quot: long; rem: long; }
export type s_lldiv_t = struct { quot: int64; rem: int64; }
export type s___fsid_t = struct { __val: [2; int]; }
export type s___sigset_t = struct { __val: [16; ulong]; }
export type s_fd_set = struct { __fds_bits: [16; long]; }
export type s___pthread_internal_list
export type s___pthread_internal_list = struct { __prev: *s___pthread_internal_list; __next: *s___pthread_internal_list; }
export type s___pthread_internal_slist
export type s___pthread_internal_slist = struct { __next: *s___pthread_internal_slist; }
export type u_pthread_mutexattr_t = struct #union { __size: [4; char]; __align: int; }
export type u_pthread_condattr_t = struct #union { __size: [4; char]; __align: int; }
export type u_pthread_attr_t
export type s___pthread_mutex_s
export type u_pthread_mutex_t = struct #union { __data: s___pthread_mutex_s; __size: [40; char]; __align: long; }
export type s___pthread_cond_s
export type u_pthread_cond_t = struct #union { __data: s___pthread_cond_s; __size: [48; char]; __align: int64; }
export type s___pthread_rwlock_arch_t
export type u_pthread_rwlock_t = struct #union { __data: s___pthread_rwlock_arch_t; __size: [56; char]; __align: long; }
export type u_pthread_rwlockattr_t = struct #union { __size: [8; char]; __align: long; }
export type u_pthread_barrier_t = struct #union { __size: [32; char]; __align: long; }
export type u_pthread_barrierattr_t = struct #union { __size: [4; char]; __align: int; }
export type s___mbstate_t = struct { __count: int; struct #union { __wch: uint; __wchb: [4; char]; }; __value: struct #union { __wch: uint; __wchb: [4; char]; }; }
export type s__G_fpos_t = struct { __pos: long; __state: s___mbstate_t; }
export type s__G_fpos64_t = struct { __pos: long; __state: s___mbstate_t; }
export type s__IO_FILE
export type s___locale_struct
export type u_sigval
export type s_siginfo_t = struct { si_signo: int; si_errno: int; si_code: int; __pad0: int; struct #union { _pad: [28; int]; struct { si_pid: int; si_uid: uint; }; _kill: struct { si_pid: int; si_uid: uint; }; struct { si_tid: int; si_overrun: int; si_sigval: u_sigval; }; _timer: struct { si_tid: int; si_overrun: int; si_sigval: u_sigval; }; struct { si_pid: int; si_uid: uint; si_sigval: u_sigval; }; _rt: struct { si_pid: int; si_uid: uint; si_sigval: u_sigval; }; struct { si_pid: int; si_uid: uint; si_status: int; si_utime: long; si_stime: long; }; _sigchld: struct { si_pid: int; si_uid: uint; si_status: int; si_utime: long; si_stime: long; }; struct { si_addr: *; si_addr_lsb: short; struct #union { struct { _lower: *; _upper: *; }; _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; _bounds: struct #union { struct { _lower: *; _upper: *; }; _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; }; _sigfault: struct { si_addr: *; si_addr_lsb: short; struct #union { struct { _lower: *; _upper: *; }; _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; _bounds: struct #union { struct { _lower: *; _upper: *; }; _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; }; struct { si_band: long; si_fd: int; }; _sigpoll: struct { si_band: long; si_fd: int; }; struct { _call_addr: *; _syscall: int; _arch: uint; }; _sigsys: struct { _call_addr: *; _syscall: int; _arch: uint; }; }; _sifields: struct #union { _pad: [28; int]; struct { si_pid: int; si_uid: uint; }; _kill: struct { si_pid: int; si_uid: uint; }; struct { si_tid: int; si_overrun: int; si_sigval: u_sigval; }; _timer: struct { si_tid: int; si_overrun: int; si_sigval: u_sigval; }; struct { si_pid: int; si_uid: uint; si_sigval: u_sigval; }; _rt: struct { si_pid: int; si_uid: uint; si_sigval: u_sigval; }; struct { si_pid: int; si_uid: uint; si_status: int; si_utime: long; si_stime: long; }; _sigchld: struct { si_pid: int; si_uid: uint; si_status: int; si_utime: long; si_stime: long; }; struct { si_addr: *; si_addr_lsb: short; struct #union { struct { _lower: *; _upper: *; }; _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; _bounds: struct #union { struct { _lower: *; _upper: *; }; _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; }; _sigfault: struct { si_addr: *; si_addr_lsb: short; struct #union { struct { _lower: *; _upper: *; }; _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; _bounds: struct #union { struct { _lower: *; _upper: *; }; _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; }; struct { si_band: long; si_fd: int; }; _sigpoll: struct { si_band: long; si_fd: int; }; struct { _call_addr: *; _syscall: int; _arch: uint; }; _sigsys: struct { _call_addr: *; _syscall: int; _arch: uint; }; }; }
export type s_sigevent = struct { sigev_value: u_sigval; sigev_signo: int; sigev_notify: int; struct #union { _pad: [12; int]; _tid: int; struct { _function: def (u_sigval) -> (); _attribute: *u_pthread_attr_t; }; _sigev_thread: struct { _function: def (u_sigval) -> (); _attribute: *u_pthread_attr_t; }; }; _sigev_un: struct #union { _pad: [12; int]; _tid: int; struct { _function: def (u_sigval) -> (); _attribute: *u_pthread_attr_t; }; _sigev_thread: struct { _function: def (u_sigval) -> (); _attribute: *u_pthread_attr_t; }; }; }
export type s__libc_fpstate
export type s_mcontext_t = struct { gregs: *int64; fpregs: *s__libc_fpstate; __reserved1: [8; uint64]; }
export type s_ucontext_t
export type s_ucontext_t = struct { uc_flags: ulong; uc_link: *s_ucontext_t; uc_stack: struct { ss_sp: *; ss_flags: int; ss_size: int; }; uc_mcontext: s_mcontext_t; uc_sigmask: s___sigset_t; __fpregs_mem: s__libc_fpstate; __ssp: [4; uint64]; }
export type s___jmp_buf_tag
export type s_timeval = struct { tv_sec: long; tv_usec: long; }
export type s_timespec = struct { tv_sec: long; tv_nsec: long; }
export type s___pthread_mutex_s = struct { __lock: int; __count: uint; __owner: int; __nusers: uint; __kind: int; __spins: short; __elision: short; __list: s___pthread_internal_list; }
export type s___pthread_rwlock_arch_t = struct { __readers: uint; __writers: uint; __wrphase_futex: uint; __writers_futex: uint; __pad3: uint; __pad4: uint; __cur_writer: int; __shared: int; __rwelision: char; __pad1: [7; uint8]; __pad2: ulong; __flags: uint; }
export type s___pthread_cond_s = struct { struct #union { __wseq: uint64; struct { __low: uint; __high: uint; }; __wseq32: struct { __low: uint; __high: uint; }; }; struct #union { __g1_start: uint64; struct { __low: uint; __high: uint; }; __g1_start32: struct { __low: uint; __high: uint; }; }; __g_refs: [2; uint]; __g_size: [2; uint]; __g1_orig_size: uint; __wrefs: uint; __g_signals: [2; uint]; }
export type u_pthread_attr_t = struct #union { __size: [56; char]; __align: long; }
export type s_random_data = struct { fptr: *int; rptr: *int; state: *int; rand_type: int; rand_deg: int; rand_sep: int; end_ptr: *int; }
export type s_drand48_data = struct { __x: [3; ushort]; __old_x: [3; ushort]; __c: ushort; __init: ushort; __a: uint64; }
export type s__IO_marker
export type s__IO_codecvt
export type s__IO_wide_data
export type s__IO_FILE = struct { _flags: int; _IO_read_ptr: *char; _IO_read_end: *char; _IO_read_base: *char; _IO_write_base: *char; _IO_write_ptr: *char; _IO_write_end: *char; _IO_buf_base: *char; _IO_buf_end: *char; _IO_save_base: *char; _IO_backup_base: *char; _IO_save_end: *char; _markers: *s__IO_marker; _chain: *s__IO_FILE; _fileno: int; _flags2: int; _old_offset: long; _cur_column: ushort; _vtable_offset: char; _shortbuf: [1; char]; _lock: *; _offset: long; _codecvt: *s__IO_codecvt; _wide_data: *s__IO_wide_data; _freeres_list: *s__IO_FILE; _freeres_buf: *; __pad5: int; _mode: int; _unused2: char; }
export type s___locale_data
export type s___locale_struct = struct { __locales: [13; *s___locale_data]; __ctype_b: *ushort; __ctype_tolower: *int; __ctype_toupper: *int; __names: [13; *char]; }
export type s_tm = struct { tm_sec: int; tm_min: int; tm_hour: int; tm_mday: int; tm_mon: int; tm_year: int; tm_wday: int; tm_yday: int; tm_isdst: int; tm_gmtoff: long; tm_zone: *char; }
export type s_itimerspec = struct { it_interval: s_timespec; it_value: s_timespec; }
export type u_sigval = struct #union { sival_int: int; sival_ptr: *; }
export type s_sigaction = struct { struct #union { sa_handler: def (int) -> (); sa_sigaction: def (int, *s_siginfo_t, *) -> (); }; __sigaction_handler: struct #union { sa_handler: def (int) -> (); sa_sigaction: def (int, *s_siginfo_t, *) -> (); }; sa_mask: s___sigset_t; sa_flags: int; sa_restorer: def () -> (); }
export type s__fpx_sw_bytes = struct { magic1: uint; extended_size: uint; xstate_bv: ulong; xstate_size: uint; __glibc_reserved1: [7; uint]; }
export type s__fpreg = struct { significand: [4; ushort]; exponent: ushort; }
export type s__fpxreg = struct { significand: [4; ushort]; exponent: ushort; __glibc_reserved1: [3; ushort]; }
export type s__xmmreg = struct { element: [4; uint]; }
export type s__fpstate = struct { cwd: ushort; swd: ushort; ftw: ushort; fop: ushort; rip: ulong; rdp: ulong; mxcsr: uint; mxcr_mask: uint; _st: [8; s__fpxreg]; _xmm: [16; s__xmmreg]; __glibc_reserved1: [24; uint]; }
export type s_sigcontext = struct { r8: ulong; r9: ulong; r10: ulong; r11: ulong; r12: ulong; r13: ulong; r14: ulong; r15: ulong; rdi: ulong; rsi: ulong; rbp: ulong; rbx: ulong; rdx: ulong; rax: ulong; rcx: ulong; rsp: ulong; rip: ulong; eflags: ulong; cs: ushort; gs: ushort; fs: ushort; __pad0: ushort; err: ulong; trapno: ulong; oldmask: ulong; cr2: ulong; struct #union { fpstate: *s__fpstate; __fpstate_word: ulong; }; __reserved1: [8; ulong]; }
export type s__xsave_hdr = struct { xstate_bv: ulong; __glibc_reserved1: [2; ulong]; __glibc_reserved2: [5; ulong]; }
export type s__ymmh_state = struct { ymmh_space: [64; uint]; }
export type s__xstate = struct { fpstate: s__fpstate; xstate_hdr: s__xsave_hdr; ymmh: s__ymmh_state; }
export type s__libc_fpxreg = struct { significand: [4; ushort]; exponent: ushort; __glibc_reserved1: [3; ushort]; }
export type s__libc_xmmreg = struct { element: [4; uint]; }
export type s__libc_fpstate = struct { cwd: ushort; swd: ushort; ftw: ushort; fop: ushort; rip: ulong; rdp: ulong; mxcsr: uint; mxcr_mask: uint; _st: [8; s__libc_fpxreg]; _xmm: [16; s__libc_xmmreg]; __glibc_reserved1: [24; uint]; }
export type s_sigstack = struct { ss_sp: *; ss_onstack: int; }
export type s_lconv = struct { decimal_point: *char; thousands_sep: *char; grouping: *char; int_curr_symbol: *char; currency_symbol: *char; mon_decimal_point: *char; mon_thousands_sep: *char; mon_grouping: *char; positive_sign: *char; negative_sign: *char; int_frac_digits: char; frac_digits: char; p_cs_precedes: char; p_sep_by_space: char; n_cs_precedes: char; n_sep_by_space: char; p_sign_posn: char; n_sign_posn: char; int_p_cs_precedes: char; int_p_sep_by_space: char; int_n_cs_precedes: char; int_n_sep_by_space: char; int_p_sign_posn: char; int_n_sign_posn: char; }
export type s___jmp_buf_tag = struct { __jmpbuf: *long; __mask_was_saved: int; __saved_mask: s___sigset_t; }
export const __llvm__: int = 1
export const __clang__: int = 1
export const __clang_major__: int = 16
export const __clang_minor__: int = 0
export const __clang_patchlevel__: int = 0
export const __clang_version__: [char] = "16.0.0 "
export const __GNUC__: int = 4
export const __GNUC_MINOR__: int = 2
export const __GNUC_PATCHLEVEL__: int = 1
export const __GXX_ABI_VERSION: int = 1002
export const __ATOMIC_RELAXED: int = 0
export const __ATOMIC_CONSUME: int = 1
export const __ATOMIC_ACQUIRE: int = 2
export const __ATOMIC_RELEASE: int = 3
export const __ATOMIC_ACQ_REL: int = 4
export const __ATOMIC_SEQ_CST: int = 5
export const __OPENCL_MEMORY_SCOPE_WORK_ITEM: int = 0
export const __OPENCL_MEMORY_SCOPE_WORK_GROUP: int = 1
export const __OPENCL_MEMORY_SCOPE_DEVICE: int = 2
export const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: int = 3
export const __OPENCL_MEMORY_SCOPE_SUB_GROUP: int = 4
export const __PRAGMA_REDEFINE_EXTNAME: int = 1
export const __VERSION__: [char] = "Clang 16.0.0"
export const __OBJC_BOOL_IS_BOOL: int = 0
export const __CONSTANT_CFSTRINGS__: int = 1
export const __clang_literal_encoding__: [char] = "UTF-8"
export const __clang_wide_literal_encoding__: [char] = "UTF-32"
export const __ORDER_LITTLE_ENDIAN__: int = 1234
export const __ORDER_BIG_ENDIAN__: int = 4321
export const __ORDER_PDP_ENDIAN__: int = 3412
export const __LITTLE_ENDIAN__: int = 1
export const _LP64: int = 1
export const __LP64__: int = 1
export const __CHAR_BIT__: int = 8
export const __BOOL_WIDTH__: int = 8
export const __SHRT_WIDTH__: int = 16
export const __INT_WIDTH__: int = 32
export const __LONG_WIDTH__: int = 64
export const __LLONG_WIDTH__: int = 64
export const __BITINT_MAXWIDTH__: int = 8388608
export const __SCHAR_MAX__: int = 127
export const __SHRT_MAX__: int = 32767
export const __INT_MAX__: int = 2147483647
export const __WCHAR_MAX__: int = 2147483647
export const __WCHAR_WIDTH__: int = 32
export const __WINT_WIDTH__: int = 32
export const __INTMAX_WIDTH__: int = 64
export const __SIZE_WIDTH__: int = 64
export const __UINTMAX_WIDTH__: int = 64
export const __PTRDIFF_WIDTH__: int = 64
export const __INTPTR_WIDTH__: int = 64
export const __UINTPTR_WIDTH__: int = 64
export const __SIZEOF_DOUBLE__: int = 8
export const __SIZEOF_FLOAT__: int = 4
export const __SIZEOF_INT__: int = 4
export const __SIZEOF_LONG__: int = 8
export const __SIZEOF_LONG_DOUBLE__: int = 16
export const __SIZEOF_LONG_LONG__: int = 8
export const __SIZEOF_POINTER__: int = 8
export const __SIZEOF_SHORT__: int = 2
export const __SIZEOF_PTRDIFF_T__: int = 8
export const __SIZEOF_SIZE_T__: int = 8
export const __SIZEOF_WCHAR_T__: int = 4
export const __SIZEOF_WINT_T__: int = 4
export const __SIZEOF_INT128__: int = 16
export const __INTMAX_FMTd__: [char] = "ld"
export const __INTMAX_FMTi__: [char] = "li"
export const __UINTMAX_FMTo__: [char] = "lo"
export const __UINTMAX_FMTu__: [char] = "lu"
export const __UINTMAX_FMTx__: [char] = "lx"
export const __UINTMAX_FMTX__: [char] = "lX"
export const __PTRDIFF_FMTd__: [char] = "ld"
export const __PTRDIFF_FMTi__: [char] = "li"
export const __INTPTR_FMTd__: [char] = "ld"
export const __INTPTR_FMTi__: [char] = "li"
export const __SIZE_FMTo__: [char] = "lo"
export const __SIZE_FMTu__: [char] = "lu"
export const __SIZE_FMTx__: [char] = "lx"
export const __SIZE_FMTX__: [char] = "lX"
export const __SIG_ATOMIC_MAX__: int = 2147483647
export const __SIG_ATOMIC_WIDTH__: int = 32
export const __UINTPTR_FMTo__: [char] = "lo"
export const __UINTPTR_FMTu__: [char] = "lu"
export const __UINTPTR_FMTx__: [char] = "lx"
export const __UINTPTR_FMTX__: [char] = "lX"
export const __FLT16_HAS_DENORM__: int = 1
export const __FLT16_DIG__: int = 3
export const __FLT16_DECIMAL_DIG__: int = 5
export const __FLT16_HAS_INFINITY__: int = 1
export const __FLT16_HAS_QUIET_NAN__: int = 1
export const __FLT16_MANT_DIG__: int = 11
export const __FLT16_MAX_10_EXP__: int = 4
export const __FLT16_MAX_EXP__: int = 16
export const __FLT_HAS_DENORM__: int = 1
export const __FLT_DIG__: int = 6
export const __FLT_DECIMAL_DIG__: int = 9
export const __FLT_HAS_INFINITY__: int = 1
export const __FLT_HAS_QUIET_NAN__: int = 1
export const __FLT_MANT_DIG__: int = 24
export const __FLT_MAX_10_EXP__: int = 38
export const __FLT_MAX_EXP__: int = 128
export const __DBL_DENORM_MIN__: double = 4.9406564584124654e-324
export const __DBL_HAS_DENORM__: int = 1
export const __DBL_DIG__: int = 15
export const __DBL_DECIMAL_DIG__: int = 17
export const __DBL_EPSILON__: double = 2.2204460492503131e-16
export const __DBL_HAS_INFINITY__: int = 1
export const __DBL_HAS_QUIET_NAN__: int = 1
export const __DBL_MANT_DIG__: int = 53
export const __DBL_MAX_10_EXP__: int = 308
export const __DBL_MAX_EXP__: int = 1024
export const __DBL_MAX__: double = 1.7976931348623157e+308
export const __DBL_MIN__: double = 2.2250738585072014e-308
export const __LDBL_HAS_DENORM__: int = 1
export const __LDBL_DIG__: int = 18
export const __LDBL_DECIMAL_DIG__: int = 21
export const __LDBL_HAS_INFINITY__: int = 1
export const __LDBL_HAS_QUIET_NAN__: int = 1
export const __LDBL_MANT_DIG__: int = 64
export const __LDBL_MAX_10_EXP__: int = 4932
export const __LDBL_MAX_EXP__: int = 16384
export const __POINTER_WIDTH__: int = 64
export const __BIGGEST_ALIGNMENT__: int = 16
export const __WINT_UNSIGNED__: int = 1
export const __INT8_FMTd__: [char] = "hhd"
export const __INT8_FMTi__: [char] = "hhi"
export const __INT16_FMTd__: [char] = "hd"
export const __INT16_FMTi__: [char] = "hi"
export const __INT32_FMTd__: [char] = "d"
export const __INT32_FMTi__: [char] = "i"
export const __INT64_FMTd__: [char] = "ld"
export const __INT64_FMTi__: [char] = "li"
export const __UINT8_FMTo__: [char] = "hho"
export const __UINT8_FMTu__: [char] = "hhu"
export const __UINT8_FMTx__: [char] = "hhx"
export const __UINT8_FMTX__: [char] = "hhX"
export const __UINT8_MAX__: int = 255
export const __INT8_MAX__: int = 127
export const __UINT16_FMTo__: [char] = "ho"
export const __UINT16_FMTu__: [char] = "hu"
export const __UINT16_FMTx__: [char] = "hx"
export const __UINT16_FMTX__: [char] = "hX"
export const __UINT16_MAX__: int = 65535
export const __INT16_MAX__: int = 32767
export const __UINT32_FMTo__: [char] = "o"
export const __UINT32_FMTu__: [char] = "u"
export const __UINT32_FMTx__: [char] = "x"
export const __UINT32_FMTX__: [char] = "X"
export const __INT32_MAX__: int = 2147483647
export const __UINT64_FMTo__: [char] = "lo"
export const __UINT64_FMTu__: [char] = "lu"
export const __UINT64_FMTx__: [char] = "lx"
export const __UINT64_FMTX__: [char] = "lX"
export const __INT_LEAST8_MAX__: int = 127
export const __INT_LEAST8_WIDTH__: int = 8
export const __INT_LEAST8_FMTd__: [char] = "hhd"
export const __INT_LEAST8_FMTi__: [char] = "hhi"
export const __UINT_LEAST8_MAX__: int = 255
export const __UINT_LEAST8_FMTo__: [char] = "hho"
export const __UINT_LEAST8_FMTu__: [char] = "hhu"
export const __UINT_LEAST8_FMTx__: [char] = "hhx"
export const __UINT_LEAST8_FMTX__: [char] = "hhX"
export const __INT_LEAST16_MAX__: int = 32767
export const __INT_LEAST16_WIDTH__: int = 16
export const __INT_LEAST16_FMTd__: [char] = "hd"
export const __INT_LEAST16_FMTi__: [char] = "hi"
export const __UINT_LEAST16_MAX__: int = 65535
export const __UINT_LEAST16_FMTo__: [char] = "ho"
export const __UINT_LEAST16_FMTu__: [char] = "hu"
export const __UINT_LEAST16_FMTx__: [char] = "hx"
export const __UINT_LEAST16_FMTX__: [char] = "hX"
export const __INT_LEAST32_MAX__: int = 2147483647
export const __INT_LEAST32_WIDTH__: int = 32
export const __INT_LEAST32_FMTd__: [char] = "d"
export const __INT_LEAST32_FMTi__: [char] = "i"
export const __UINT_LEAST32_FMTo__: [char] = "o"
export const __UINT_LEAST32_FMTu__: [char] = "u"
export const __UINT_LEAST32_FMTx__: [char] = "x"
export const __UINT_LEAST32_FMTX__: [char] = "X"
export const __INT_LEAST64_WIDTH__: int = 64
export const __INT_LEAST64_FMTd__: [char] = "ld"
export const __INT_LEAST64_FMTi__: [char] = "li"
export const __UINT_LEAST64_FMTo__: [char] = "lo"
export const __UINT_LEAST64_FMTu__: [char] = "lu"
export const __UINT_LEAST64_FMTx__: [char] = "lx"
export const __UINT_LEAST64_FMTX__: [char] = "lX"
export const __INT_FAST8_MAX__: int = 127
export const __INT_FAST8_WIDTH__: int = 8
export const __INT_FAST8_FMTd__: [char] = "hhd"
export const __INT_FAST8_FMTi__: [char] = "hhi"
export const __UINT_FAST8_MAX__: int = 255
export const __UINT_FAST8_FMTo__: [char] = "hho"
export const __UINT_FAST8_FMTu__: [char] = "hhu"
export const __UINT_FAST8_FMTx__: [char] = "hhx"
export const __UINT_FAST8_FMTX__: [char] = "hhX"
export const __INT_FAST16_MAX__: int = 32767
export const __INT_FAST16_WIDTH__: int = 16
export const __INT_FAST16_FMTd__: [char] = "hd"
export const __INT_FAST16_FMTi__: [char] = "hi"
export const __UINT_FAST16_MAX__: int = 65535
export const __UINT_FAST16_FMTo__: [char] = "ho"
export const __UINT_FAST16_FMTu__: [char] = "hu"
export const __UINT_FAST16_FMTx__: [char] = "hx"
export const __UINT_FAST16_FMTX__: [char] = "hX"
export const __INT_FAST32_MAX__: int = 2147483647
export const __INT_FAST32_WIDTH__: int = 32
export const __INT_FAST32_FMTd__: [char] = "d"
export const __INT_FAST32_FMTi__: [char] = "i"
export const __UINT_FAST32_FMTo__: [char] = "o"
export const __UINT_FAST32_FMTu__: [char] = "u"
export const __UINT_FAST32_FMTx__: [char] = "x"
export const __UINT_FAST32_FMTX__: [char] = "X"
export const __INT_FAST64_WIDTH__: int = 64
export const __INT_FAST64_FMTd__: [char] = "ld"
export const __INT_FAST64_FMTi__: [char] = "li"
export const __UINT_FAST64_FMTo__: [char] = "lo"
export const __UINT_FAST64_FMTu__: [char] = "lu"
export const __UINT_FAST64_FMTx__: [char] = "lx"
export const __UINT_FAST64_FMTX__: [char] = "lX"
export const __FINITE_MATH_ONLY__: int = 0
export const __GNUC_STDC_INLINE__: int = 1
export const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: int = 1
export const __CLANG_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_INT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __GCC_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __GCC_ATOMIC_INT_LOCK_FREE: int = 2
export const __GCC_ATOMIC_LONG_LOCK_FREE: int = 2
export const __GCC_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __GCC_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __NO_INLINE__: int = 1
export const __PIC__: int = 2
export const __pic__: int = 2
export const __PIE__: int = 2
export const __pie__: int = 2
export const __FLT_RADIX__: int = 2
export const __GCC_ASM_FLAG_OUTPUTS__: int = 1
export const __code_model_small__: int = 1
export const __amd64__: int = 1
export const __amd64: int = 1
export const __x86_64: int = 1
export const __x86_64__: int = 1
export const __SEG_GS: int = 1
export const __SEG_FS: int = 1
export const __k8: int = 1
export const __k8__: int = 1
export const __tune_k8__: int = 1
export const __NO_MATH_INLINES: int = 1
export const __FXSR__: int = 1
export const __SSE2__: int = 1
export const __SSE2_MATH__: int = 1
export const __SSE__: int = 1
export const __SSE_MATH__: int = 1
export const __MMX__: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: int = 1
export const __SIZEOF_FLOAT128__: int = 16
export const unix: int = 1
export const __unix: int = 1
export const __unix__: int = 1
export const linux: int = 1
export const __linux: int = 1
export const __linux__: int = 1
export const __ELF__: int = 1
export const __gnu_linux__: int = 1
export const __FLOAT128__: int = 1
export const __STDC__: int = 1
export const __STDC_HOSTED__: int = 1
export const __STDC_UTF_16__: int = 1
export const __STDC_UTF_32__: int = 1
export const __GCC_HAVE_DWARF2_CFI_ASM: int = 1
export const _FEATURES_H: int = 1
export const _DEFAULT_SOURCE: int = 1
export const __GLIBC_USE_ISOC2X: int = 0
export const __USE_ISOC11: int = 1
export const __USE_ISOC99: int = 1
export const __USE_ISOC95: int = 1
export const __USE_POSIX_IMPLICITLY: int = 1
export const _POSIX_SOURCE: int = 1
export const __USE_POSIX: int = 1
export const __USE_POSIX2: int = 1
export const __USE_POSIX199309: int = 1
export const __USE_POSIX199506: int = 1
export const __USE_XOPEN2K: int = 1
export const __USE_XOPEN2K8: int = 1
export const _ATFILE_SOURCE: int = 1
export const __USE_MISC: int = 1
export const __USE_ATFILE: int = 1
export const __USE_FORTIFY_LEVEL: int = 0
export const __GLIBC_USE_DEPRECATED_GETS: int = 0
export const __GLIBC_USE_DEPRECATED_SCANF: int = 0
export const _STDC_PREDEF_H: int = 1
export const __STDC_IEC_559__: int = 1
export const __STDC_IEC_559_COMPLEX__: int = 1
export const __GNU_LIBRARY__: int = 6
export const __GLIBC__: int = 2
export const __GLIBC_MINOR__: int = 31
export const _SYS_CDEFS_H: int = 1
export const __glibc_c99_flexarr_available: int = 1
export const __WORDSIZE: int = 64
export const __WORDSIZE_TIME64_COMPAT32: int = 1
export const __SYSCALL_WORDSIZE: int = 64
export const __LONG_DOUBLE_USES_FLOAT128: int = 0
export const __HAVE_GENERIC_SELECTION: int = 1
export const __GLIBC_USE_LIB_EXT2: int = 0
export const __GLIBC_USE_IEC_60559_BFP_EXT: int = 0
export const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: int = 0
export const __GLIBC_USE_IEC_60559_FUNCS_EXT: int = 0
export const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: int = 0
export const __GLIBC_USE_IEC_60559_TYPES_EXT: int = 0
export const _STDLIB_H: int = 1
export const WNOHANG: int = 1
export const WUNTRACED: int = 2
export const WSTOPPED: int = 2
export const WEXITED: int = 4
export const WCONTINUED: int = 8
export const __ENUM_IDTYPE_T: int = 1
export const __HAVE_FLOAT128: int = 0
export const __HAVE_DISTINCT_FLOAT128: int = 0
export const __HAVE_FLOAT64X: int = 1
export const __HAVE_FLOAT64X_LONG_DOUBLE: int = 1
export const __HAVE_FLOAT16: int = 0
export const __HAVE_FLOAT32: int = 1
export const __HAVE_FLOAT64: int = 1
export const __HAVE_FLOAT32X: int = 1
export const __HAVE_FLOAT128X: int = 0
export const __HAVE_DISTINCT_FLOAT32: int = 0
export const __HAVE_DISTINCT_FLOAT64: int = 0
export const __HAVE_DISTINCT_FLOAT32X: int = 0
export const __HAVE_DISTINCT_FLOAT64X: int = 0
export const __HAVE_FLOATN_NOT_TYPEDEF: int = 0
export const __ldiv_t_defined: int = 1
export const __lldiv_t_defined: int = 1
export const RAND_MAX: int = 2147483647
export const EXIT_FAILURE: int = 1
export const EXIT_SUCCESS: int = 0
export const _SYS_TYPES_H: int = 1
export const _BITS_TYPES_H: int = 1
export const _BITS_TYPESIZES_H: int = 1
export const __OFF_T_MATCHES_OFF64_T: int = 1
export const __INO_T_MATCHES_INO64_T: int = 1
export const __RLIM_T_MATCHES_RLIM64_T: int = 1
export const __STATFS_MATCHES_STATFS64: int = 1
export const __FD_SETSIZE: int = 1024
export const _BITS_TIME64_H: int = 1
export const __clock_t_defined: int = 1
export const __clockid_t_defined: int = 1
export const __time_t_defined: int = 1
export const __timer_t_defined: int = 1
export const _BITS_STDINT_INTN_H: int = 1
export const __BIT_TYPES_DEFINED__: int = 1
export const _ENDIAN_H: int = 1
export const _BITS_ENDIAN_H: int = 1
export const __LITTLE_ENDIAN: int = 1234
export const __BIG_ENDIAN: int = 4321
export const __PDP_ENDIAN: int = 3412
export const _BITS_ENDIANNESS_H: int = 1
export const _BITS_BYTESWAP_H: int = 1
export const _BITS_UINTN_IDENTITY_H: int = 1
export const _SYS_SELECT_H: int = 1
export const __FD_ZERO_STOS: [char] = "stosq"
export const __sigset_t_defined: int = 1
export const __timeval_defined: int = 1
export const _STRUCT_TIMESPEC: int = 1
export const _BITS_PTHREADTYPES_COMMON_H: int = 1
export const _THREAD_SHARED_TYPES_H: int = 1
export const _BITS_PTHREADTYPES_ARCH_H: int = 1
export const __SIZEOF_PTHREAD_MUTEX_T: int = 40
export const __SIZEOF_PTHREAD_ATTR_T: int = 56
export const __SIZEOF_PTHREAD_RWLOCK_T: int = 56
export const __SIZEOF_PTHREAD_BARRIER_T: int = 32
export const __SIZEOF_PTHREAD_MUTEXATTR_T: int = 4
export const __SIZEOF_PTHREAD_COND_T: int = 48
export const __SIZEOF_PTHREAD_CONDATTR_T: int = 4
export const __SIZEOF_PTHREAD_RWLOCKATTR_T: int = 8
export const __SIZEOF_PTHREAD_BARRIERATTR_T: int = 4
export const _THREAD_MUTEX_INTERNAL_H: int = 1
export const __PTHREAD_MUTEX_HAVE_PREV: int = 1
export const __have_pthread_attr_t: int = 1
export const _ALLOCA_H: int = 1
export const _STDIO_H: int = 1
export const _____fpos_t_defined: int = 1
export const ____mbstate_t_defined: int = 1
export const _____fpos64_t_defined: int = 1
export const ____FILE_defined: int = 1
export const __FILE_defined: int = 1
export const __struct_FILE_defined: int = 1
export const _IOFBF: int = 0
export const _IOLBF: int = 1
export const _IONBF: int = 2
export const BUFSIZ: int = 8192
export const SEEK_SET: int = 0
export const SEEK_CUR: int = 1
export const SEEK_END: int = 2
export const P_tmpdir: [char] = "/tmp"
export const _BITS_STDIO_LIM_H: int = 1
export const L_tmpnam: int = 20
export const TMP_MAX: int = 238328
export const FILENAME_MAX: int = 4096
export const L_ctermid: int = 9
export const FOPEN_MAX: int = 16
export const _STDINT_H: int = 1
export const _BITS_WCHAR_H: int = 1
export const _BITS_STDINT_UINTN_H: int = 1
export const _STRING_H: int = 1
export const _BITS_TYPES_LOCALE_T_H: int = 1
export const _BITS_TYPES___LOCALE_T_H: int = 1
export const _STRINGS_H: int = 1
export const _TIME_H: int = 1
export const _BITS_TIME_H: int = 1
export const CLOCK_REALTIME: int = 0
export const CLOCK_MONOTONIC: int = 1
export const CLOCK_PROCESS_CPUTIME_ID: int = 2
export const CLOCK_THREAD_CPUTIME_ID: int = 3
export const CLOCK_MONOTONIC_RAW: int = 4
export const CLOCK_REALTIME_COARSE: int = 5
export const CLOCK_MONOTONIC_COARSE: int = 6
export const CLOCK_BOOTTIME: int = 7
export const CLOCK_REALTIME_ALARM: int = 8
export const CLOCK_BOOTTIME_ALARM: int = 9
export const CLOCK_TAI: int = 11
export const TIMER_ABSTIME: int = 1
export const __struct_tm_defined: int = 1
export const __itimerspec_defined: int = 1
export const TIME_UTC: int = 1
export const _MATH_H: int = 1
export const _BITS_LIBM_SIMD_DECL_STUBS_H: int = 1
export const __FP_LOGB0_IS_MIN: int = 1
export const __FP_LOGBNAN_IS_MIN: int = 1
export const __MATH_DECLARING_DOUBLE: int = 0
export const __MATH_DECLARING_FLOATN: int = 1
export const __MATH_DECLARE_LDOUBLE: int = 1
export const FP_NAN: int = 0
export const FP_INFINITE: int = 1
export const FP_ZERO: int = 2
export const FP_SUBNORMAL: int = 3
export const FP_NORMAL: int = 4
export const MATH_ERRNO: int = 1
export const MATH_ERREXCEPT: int = 2
export const M_E: double = 2.7182818284590452354
export const M_LOG2E: double = 1.4426950408889634074
export const M_LOG10E: double = 0.43429448190325182765
export const M_LN2: double = 0.69314718055994530942
export const M_LN10: double = 2.30258509299404568402
export const M_PI: double = 3.14159265358979323846
export const M_PI_2: double = 1.57079632679489661923
export const M_PI_4: double = 0.78539816339744830962
export const M_1_PI: double = 0.31830988618379067154
export const M_2_PI: double = 0.63661977236758134308
export const M_2_SQRTPI: double = 1.12837916709551257390
export const M_SQRT2: double = 1.41421356237309504880
export const M_SQRT1_2: double = 0.70710678118654752440
export const _ASSERT_H: int = 1
export const _BITS_SIGNUM_H: int = 1
export const _BITS_SIGNUM_GENERIC_H: int = 1
export const SIGINT: int = 2
export const SIGILL: int = 4
export const SIGABRT: int = 6
export const SIGFPE: int = 8
export const SIGSEGV: int = 11
export const SIGTERM: int = 15
export const SIGHUP: int = 1
export const SIGQUIT: int = 3
export const SIGTRAP: int = 5
export const SIGKILL: int = 9
export const SIGBUS: int = 7
export const SIGSYS: int = 31
export const SIGPIPE: int = 13
export const SIGALRM: int = 14
export const SIGURG: int = 23
export const SIGSTOP: int = 19
export const SIGTSTP: int = 20
export const SIGCONT: int = 18
export const SIGCHLD: int = 17
export const SIGTTIN: int = 21
export const SIGTTOU: int = 22
export const SIGPOLL: int = 29
export const SIGXCPU: int = 24
export const SIGXFSZ: int = 25
export const SIGVTALRM: int = 26
export const SIGPROF: int = 27
export const SIGUSR1: int = 10
export const SIGUSR2: int = 12
export const SIGWINCH: int = 28
export const __SIGRTMIN: int = 32
export const SIGSTKFLT: int = 16
export const SIGPWR: int = 30
export const __SIGRTMAX: int = 64
export const __sig_atomic_t_defined: int = 1
export const __siginfo_t_defined: int = 1
export const __SI_MAX_SIZE: int = 128
export const _BITS_SIGINFO_ARCH_H: int = 1
export const __SI_ERRNO_THEN_CODE: int = 1
export const __SI_HAVE_SIGSYS: int = 1
export const _BITS_SIGINFO_CONSTS_H: int = 1
export const __SI_ASYNCIO_AFTER_SIGIO: int = 1
export const __sigevent_t_defined: int = 1
export const __SIGEV_MAX_SIZE: int = 64
export const _BITS_SIGEVENT_CONSTS_H: int = 1
export const _BITS_SIGACTION_H: int = 1
export const SA_NOCLDSTOP: int = 1
export const SA_NOCLDWAIT: int = 2
export const SA_SIGINFO: int = 4
export const SIG_BLOCK: int = 0
export const SIG_UNBLOCK: int = 1
export const SIG_SETMASK: int = 2
export const _BITS_SIGCONTEXT_H: int = 1
export const __stack_t_defined: int = 1
export const _SYS_UCONTEXT_H: int = 1
export const __NGREG: int = 23
export const _BITS_SIGSTACK_H: int = 1
export const MINSIGSTKSZ: int = 2048
export const SIGSTKSZ: int = 8192
export const _BITS_SS_FLAGS_H: int = 1
export const __sigstack_defined: int = 1
export const _BITS_SIGTHREAD_H: int = 1
export const _CTYPE_H: int = 1
export const _LOCALE_H: int = 1
export const _BITS_LOCALE_H: int = 1
export const __LC_CTYPE: int = 0
export const __LC_NUMERIC: int = 1
export const __LC_TIME: int = 2
export const __LC_COLLATE: int = 3
export const __LC_MONETARY: int = 4
export const __LC_MESSAGES: int = 5
export const __LC_ALL: int = 6
export const __LC_PAPER: int = 7
export const __LC_NAME: int = 8
export const __LC_ADDRESS: int = 9
export const __LC_TELEPHONE: int = 10
export const __LC_MEASUREMENT: int = 11
export const __LC_IDENTIFICATION: int = 12
export const _SETJMP_H: int = 1
export const _BITS_SETJMP_H: int = 1
export const _ERRNO_H: int = 1
export const _BITS_ERRNO_H: int = 1
export const EPERM: int = 1
export const ENOENT: int = 2
export const ESRCH: int = 3
export const EINTR: int = 4
export const EIO: int = 5
export const ENXIO: int = 6
export const E2BIG: int = 7
export const ENOEXEC: int = 8
export const EBADF: int = 9
export const ECHILD: int = 10
export const EAGAIN: int = 11
export const ENOMEM: int = 12
export const EACCES: int = 13
export const EFAULT: int = 14
export const ENOTBLK: int = 15
export const EBUSY: int = 16
export const EEXIST: int = 17
export const EXDEV: int = 18
export const ENODEV: int = 19
export const ENOTDIR: int = 20
export const EISDIR: int = 21
export const EINVAL: int = 22
export const ENFILE: int = 23
export const EMFILE: int = 24
export const ENOTTY: int = 25
export const ETXTBSY: int = 26
export const EFBIG: int = 27
export const ENOSPC: int = 28
export const ESPIPE: int = 29
export const EROFS: int = 30
export const EMLINK: int = 31
export const EPIPE: int = 32
export const EDOM: int = 33
export const ERANGE: int = 34
export const EDEADLK: int = 35
export const ENAMETOOLONG: int = 36
export const ENOLCK: int = 37
export const ENOSYS: int = 38
export const ENOTEMPTY: int = 39
export const ELOOP: int = 40
export const ENOMSG: int = 42
export const EIDRM: int = 43
export const ECHRNG: int = 44
export const EL2NSYNC: int = 45
export const EL3HLT: int = 46
export const EL3RST: int = 47
export const ELNRNG: int = 48
export const EUNATCH: int = 49
export const ENOCSI: int = 50
export const EL2HLT: int = 51
export const EBADE: int = 52
export const EBADR: int = 53
export const EXFULL: int = 54
export const ENOANO: int = 55
export const EBADRQC: int = 56
export const EBADSLT: int = 57
export const EBFONT: int = 59
export const ENOSTR: int = 60
export const ENODATA: int = 61
export const ETIME: int = 62
export const ENOSR: int = 63
export const ENONET: int = 64
export const ENOPKG: int = 65
export const EREMOTE: int = 66
export const ENOLINK: int = 67
export const EADV: int = 68
export const ESRMNT: int = 69
export const ECOMM: int = 70
export const EPROTO: int = 71
export const EMULTIHOP: int = 72
export const EDOTDOT: int = 73
export const EBADMSG: int = 74
export const EOVERFLOW: int = 75
export const ENOTUNIQ: int = 76
export const EBADFD: int = 77
export const EREMCHG: int = 78
export const ELIBACC: int = 79
export const ELIBBAD: int = 80
export const ELIBSCN: int = 81
export const ELIBMAX: int = 82
export const ELIBEXEC: int = 83
export const EILSEQ: int = 84
export const ERESTART: int = 85
export const ESTRPIPE: int = 86
export const EUSERS: int = 87
export const ENOTSOCK: int = 88
export const EDESTADDRREQ: int = 89
export const EMSGSIZE: int = 90
export const EPROTOTYPE: int = 91
export const ENOPROTOOPT: int = 92
export const EPROTONOSUPPORT: int = 93
export const ESOCKTNOSUPPORT: int = 94
export const EOPNOTSUPP: int = 95
export const EPFNOSUPPORT: int = 96
export const EAFNOSUPPORT: int = 97
export const EADDRINUSE: int = 98
export const EADDRNOTAVAIL: int = 99
export const ENETDOWN: int = 100
export const ENETUNREACH: int = 101
export const ENETRESET: int = 102
export const ECONNABORTED: int = 103
export const ECONNRESET: int = 104
export const ENOBUFS: int = 105
export const EISCONN: int = 106
export const ENOTCONN: int = 107
export const ESHUTDOWN: int = 108
export const ETOOMANYREFS: int = 109
export const ETIMEDOUT: int = 110
export const ECONNREFUSED: int = 111
export const EHOSTDOWN: int = 112
export const EHOSTUNREACH: int = 113
export const EALREADY: int = 114
export const EINPROGRESS: int = 115
export const ESTALE: int = 116
export const EUCLEAN: int = 117
export const ENOTNAM: int = 118
export const ENAVAIL: int = 119
export const EISNAM: int = 120
export const EREMOTEIO: int = 121
export const EDQUOT: int = 122
export const ENOMEDIUM: int = 123
export const EMEDIUMTYPE: int = 124
export const ECANCELED: int = 125
export const ENOKEY: int = 126
export const EKEYEXPIRED: int = 127
export const EKEYREVOKED: int = 128
export const EKEYREJECTED: int = 129
export const EOWNERDEAD: int = 130
export const ENOTRECOVERABLE: int = 131
export const ERFKILL: int = 132
export const EHWPOISON: int = 133
export const _LIBC_LIMITS_H_: int = 1
export const MB_LEN_MAX: int = 16
export const _BITS_POSIX1_LIM_H: int = 1
export const _POSIX_AIO_LISTIO_MAX: int = 2
export const _POSIX_AIO_MAX: int = 1
export const _POSIX_ARG_MAX: int = 4096
export const _POSIX_CHILD_MAX: int = 25
export const _POSIX_DELAYTIMER_MAX: int = 32
export const _POSIX_HOST_NAME_MAX: int = 255
export const _POSIX_LINK_MAX: int = 8
export const _POSIX_LOGIN_NAME_MAX: int = 9
export const _POSIX_MAX_CANON: int = 255
export const _POSIX_MAX_INPUT: int = 255
export const _POSIX_MQ_OPEN_MAX: int = 8
export const _POSIX_MQ_PRIO_MAX: int = 32
export const _POSIX_NAME_MAX: int = 14
export const _POSIX_NGROUPS_MAX: int = 8
export const _POSIX_OPEN_MAX: int = 20
export const _POSIX_PATH_MAX: int = 256
export const _POSIX_PIPE_BUF: int = 512
export const _POSIX_RE_DUP_MAX: int = 255
export const _POSIX_RTSIG_MAX: int = 8
export const _POSIX_SEM_NSEMS_MAX: int = 256
export const _POSIX_SEM_VALUE_MAX: int = 32767
export const _POSIX_SIGQUEUE_MAX: int = 32
export const _POSIX_SSIZE_MAX: int = 32767
export const _POSIX_STREAM_MAX: int = 8
export const _POSIX_SYMLINK_MAX: int = 255
export const _POSIX_SYMLOOP_MAX: int = 8
export const _POSIX_TIMER_MAX: int = 32
export const _POSIX_TTY_NAME_MAX: int = 9
export const _POSIX_TZNAME_MAX: int = 6
export const _POSIX_CLOCKRES_MIN: int = 20000000
export const NR_OPEN: int = 1024
export const NGROUPS_MAX: int = 65536
export const ARG_MAX: int = 131072
export const LINK_MAX: int = 127
export const MAX_CANON: int = 255
export const MAX_INPUT: int = 255
export const NAME_MAX: int = 255
export const PATH_MAX: int = 4096
export const PIPE_BUF: int = 4096
export const XATTR_NAME_MAX: int = 255
export const XATTR_SIZE_MAX: int = 65536
export const XATTR_LIST_MAX: int = 65536
export const RTSIG_MAX: int = 32
export const _POSIX_THREAD_KEYS_MAX: int = 128
export const PTHREAD_KEYS_MAX: int = 1024
export const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: int = 4
export const _POSIX_THREAD_THREADS_MAX: int = 64
export const AIO_PRIO_DELTA_MAX: int = 20
export const PTHREAD_STACK_MIN: int = 16384
export const DELAYTIMER_MAX: int = 2147483647
export const TTY_NAME_MAX: int = 32
export const LOGIN_NAME_MAX: int = 256
export const HOST_NAME_MAX: int = 64
export const MQ_PRIO_MAX: int = 32768
export const _BITS_POSIX2_LIM_H: int = 1
export const _POSIX2_BC_BASE_MAX: int = 99
export const _POSIX2_BC_DIM_MAX: int = 2048
export const _POSIX2_BC_SCALE_MAX: int = 99
export const _POSIX2_BC_STRING_MAX: int = 1000
export const _POSIX2_COLL_WEIGHTS_MAX: int = 2
export const _POSIX2_EXPR_NEST_MAX: int = 32
export const _POSIX2_LINE_MAX: int = 2048
export const _POSIX2_RE_DUP_MAX: int = 255
export const _POSIX2_CHARCLASS_NAME_MAX: int = 14
export const COLL_WEIGHTS_MAX: int = 255
export const CHARCLASS_NAME_MAX: int = 2048
export const P_ALL: int = 0
export const P_PID: int = 1
export const P_PGID: int = 2
export import def #extern __ctype_get_mb_cur_max() -> ulong
export import def #extern atof(__nptr: *char) -> double
export import def #extern atoi(__nptr: *char) -> int
export import def #extern atol(__nptr: *char) -> long
export import def #extern atoll(__nptr: *char) -> int64
export import def #extern strtod(__nptr: *char, __endptr: **char) -> double
export import def #extern strtof(__nptr: *char, __endptr: **char) -> float
export import def #extern strtold(__nptr: *char, __endptr: **char) -> float80
export import def #extern strtol(__nptr: *char, __endptr: **char, __base: int) -> long
export import def #extern strtoul(__nptr: *char, __endptr: **char, __base: int) -> ulong
export import def #extern strtoq(__nptr: *char, __endptr: **char, __base: int) -> int64
export import def #extern strtouq(__nptr: *char, __endptr: **char, __base: int) -> uint64
export import def #extern strtoll(__nptr: *char, __endptr: **char, __base: int) -> int64
export import def #extern strtoull(__nptr: *char, __endptr: **char, __base: int) -> uint64
export import def #extern l64a(__n: long) -> *char
export import def #extern a64l(__s: *char) -> long
export import def #extern select(__nfds: int, __readfds: *s_fd_set, __writefds: *s_fd_set, __exceptfds: *s_fd_set, __timeout: *s_timeval) -> int
export import def #extern pselect(__nfds: int, __readfds: *s_fd_set, __writefds: *s_fd_set, __exceptfds: *s_fd_set, __timeout: *s_timespec, __sigmask: *s___sigset_t) -> int
export import def #extern random() -> long
export import def #extern srandom(__seed: uint)
export import def #extern initstate(__seed: uint, __statebuf: *char, __statelen: ulong) -> *char
export import def #extern setstate(__statebuf: *char) -> *char
export import def #extern random_r(__buf: *s_random_data, __result: *int) -> int
export import def #extern srandom_r(__seed: uint, __buf: *s_random_data) -> int
export import def #extern initstate_r(__seed: uint, __statebuf: *char, __statelen: ulong, __buf: *s_random_data) -> int
export import def #extern setstate_r(__statebuf: *char, __buf: *s_random_data) -> int
export import def #extern rand() -> int
export import def #extern srand(__seed: uint)
export import def #extern rand_r(__seed: *uint) -> int
export import def #extern drand48() -> double
export import def #extern erand48(__xsubi: *ushort) -> double
export import def #extern lrand48() -> long
export import def #extern nrand48(__xsubi: *ushort) -> long
export import def #extern mrand48() -> long
export import def #extern jrand48(__xsubi: *ushort) -> long
export import def #extern srand48(__seedval: long)
export import def #extern seed48(__seed16v: *ushort) -> *ushort
export import def #extern lcong48(__param: *ushort)
export import def #extern drand48_r(__buffer: *s_drand48_data, __result: *double) -> int
export import def #extern erand48_r(__xsubi: *ushort, __buffer: *s_drand48_data, __result: *double) -> int
export import def #extern lrand48_r(__buffer: *s_drand48_data, __result: *long) -> int
export import def #extern nrand48_r(__xsubi: *ushort, __buffer: *s_drand48_data, __result: *long) -> int
export import def #extern mrand48_r(__buffer: *s_drand48_data, __result: *long) -> int
export import def #extern jrand48_r(__xsubi: *ushort, __buffer: *s_drand48_data, __result: *long) -> int
export import def #extern srand48_r(__seedval: long, __buffer: *s_drand48_data) -> int
export import def #extern seed48_r(__seed16v: *ushort, __buffer: *s_drand48_data) -> int
export import def #extern lcong48_r(__param: *ushort, __buffer: *s_drand48_data) -> int
export import def #extern malloc(__size: ulong) -> *
export import def #extern calloc(__nmemb: ulong, __size: ulong) -> *
export import def #extern realloc(__ptr: *, __size: ulong) -> *
export import def #extern reallocarray(__ptr: *, __nmemb: ulong, __size: ulong) -> *
export import def #extern free(__ptr: *)
export import def #extern valloc(__size: ulong) -> *
export import def #extern posix_memalign(__memptr: **, __alignment: ulong, __size: ulong) -> int
export import def #extern aligned_alloc(__alignment: ulong, __size: ulong) -> *
export import def #extern abort()
export import def #extern atexit(__func: def () -> ()) -> int
export import def #extern at_quick_exit(__func: def () -> ()) -> int
export import def #extern on_exit(__func: def (int, *) -> (), __arg: *) -> int
export import def #extern exit(__status: int)
export import def #extern quick_exit(__status: int)
export import def #extern _Exit(__status: int)
export import def #extern getenv(__name: *char) -> *char
export import def #extern putenv(__string: *char) -> int
export import def #extern setenv(__name: *char, __value: *char, __replace: int) -> int
export import def #extern unsetenv(__name: *char) -> int
export import def #extern clearenv() -> int
export import def #extern mkstemp(__template: *char) -> int
export import def #extern mkstemps(__template: *char, __suffixlen: int) -> int
export import def #extern mkdtemp(__template: *char) -> *char
export import def #extern system(__command: *char) -> int
export import def #extern realpath(__name: *char, __resolved: *char) -> *char
export import def #extern bsearch(__key: *, __base: *, __nmemb: ulong, __size: ulong, __compar: def (*, *) -> (int)) -> *
export import def #extern qsort(__base: *, __nmemb: ulong, __size: ulong, __compar: def (*, *) -> (int))
export import def #extern abs(__x: int) -> int
export import def #extern labs(__x: long) -> long
export import def #extern llabs(__x: int64) -> int64
export import def #extern div(__numer: int, __denom: int) -> s_div_t
export import def #extern ldiv(__numer: long, __denom: long) -> s_ldiv_t
export import def #extern lldiv(__numer: int64, __denom: int64) -> s_lldiv_t
export import def #extern ecvt(__value: double, __ndigit: int, __decpt: *int, __sign: *int) -> *char
export import def #extern fcvt(__value: double, __ndigit: int, __decpt: *int, __sign: *int) -> *char
export import def #extern gcvt(__value: double, __ndigit: int, __buf: *char) -> *char
export import def #extern qecvt(__value: float80, __ndigit: int, __decpt: *int, __sign: *int) -> *char
export import def #extern qfcvt(__value: float80, __ndigit: int, __decpt: *int, __sign: *int) -> *char
export import def #extern qgcvt(__value: float80, __ndigit: int, __buf: *char) -> *char
export import def #extern ecvt_r(__value: double, __ndigit: int, __decpt: *int, __sign: *int, __buf: *char, __len: ulong) -> int
export import def #extern fcvt_r(__value: double, __ndigit: int, __decpt: *int, __sign: *int, __buf: *char, __len: ulong) -> int
export import def #extern qecvt_r(__value: float80, __ndigit: int, __decpt: *int, __sign: *int, __buf: *char, __len: ulong) -> int
export import def #extern qfcvt_r(__value: float80, __ndigit: int, __decpt: *int, __sign: *int, __buf: *char, __len: ulong) -> int
export import def #extern mblen(__s: *char, __n: ulong) -> int
export import def #extern mbtowc(__pwc: *int, __s: *char, __n: ulong) -> int
export import def #extern wctomb(__s: *char, __wchar: int) -> int
export import def #extern mbstowcs(__pwcs: *int, __s: *char, __n: ulong) -> ulong
export import def #extern wcstombs(__s: *char, __pwcs: *int, __n: ulong) -> ulong
export import def #extern rpmatch(__response: *char) -> int
export import def #extern getsubopt(__optionp: **char, __tokens: **char, __valuep: **char) -> int
export import def #extern getloadavg(__loadavg: *double, __nelem: int) -> int
export import var #extern stdin: *s__IO_FILE
export import var #extern stdout: *s__IO_FILE
export import var #extern stderr: *s__IO_FILE
export import def #extern remove(__filename: *char) -> int
export import def #extern rename(__old: *char, __new: *char) -> int
export import def #extern renameat(__oldfd: int, __old: *char, __newfd: int, __new: *char) -> int
export import def #extern tmpfile() -> *s__IO_FILE
export import def #extern fclose(__stream: *s__IO_FILE) -> int
export import def #extern fflush(__stream: *s__IO_FILE) -> int
export import def #extern fflush_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern fopen(__filename: *char, __modes: *char) -> *s__IO_FILE
export import def #extern freopen(__filename: *char, __modes: *char, __stream: *s__IO_FILE) -> *s__IO_FILE
export import def #extern fdopen(__fd: int, __modes: *char) -> *s__IO_FILE
export import def #extern fmemopen(__s: *, __len: ulong, __modes: *char) -> *s__IO_FILE
export import def #extern open_memstream(__bufloc: **char, __sizeloc: *int) -> *s__IO_FILE
export import def #extern setbuf(__stream: *s__IO_FILE, __buf: *char)
export import def #extern setvbuf(__stream: *s__IO_FILE, __buf: *char, __modes: int, __n: ulong) -> int
export import def #extern setbuffer(__stream: *s__IO_FILE, __buf: *char, __size: ulong)
export import def #extern setlinebuf(__stream: *s__IO_FILE)
export import def #extern fprintf(__stream: *s__IO_FILE, __format: *char, ...) -> int
export import def #extern printf(__format: *char, ...) -> int
export import def #extern sprintf(__s: *char, __format: *char, ...) -> int
export import def #extern vfprintf(__s: *s__IO_FILE, __format: *char, __arg: int) -> int
export import def #extern vprintf(__format: *char, __arg: int) -> int
export import def #extern vsprintf(__s: *char, __format: *char, __arg: int) -> int
export import def #extern snprintf(__s: *char, __maxlen: ulong, __format: *char, ...) -> int
export import def #extern vsnprintf(__s: *char, __maxlen: ulong, __format: *char, __arg: int) -> int
export import def #extern vdprintf(__fd: int, __fmt: *char, __arg: int) -> int
export import def #extern dprintf(__fd: int, __fmt: *char, ...) -> int
export import def #extern fscanf(__stream: *s__IO_FILE, __format: *char, ...) -> int
export import def #extern scanf(__format: *char, ...) -> int
export import def #extern sscanf(__s: *char, __format: *char, ...) -> int
export import def #extern vfscanf(__s: *s__IO_FILE, __format: *char, __arg: int) -> int
export import def #extern vscanf(__format: *char, __arg: int) -> int
export import def #extern vsscanf(__s: *char, __format: *char, __arg: int) -> int
export import def #extern fgetc(__stream: *s__IO_FILE) -> int
export import def #extern getc(__stream: *s__IO_FILE) -> int
export import def #extern getchar() -> int
export import def #extern getc_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern getchar_unlocked() -> int
export import def #extern fgetc_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern fputc(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern putc(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern putchar(__c: int) -> int
export import def #extern fputc_unlocked(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern putc_unlocked(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern putchar_unlocked(__c: int) -> int
export import def #extern getw(__stream: *s__IO_FILE) -> int
export import def #extern putw(__w: int, __stream: *s__IO_FILE) -> int
export import def #extern fgets(__s: *char, __n: int, __stream: *s__IO_FILE) -> *char
export import def #extern __getdelim(__lineptr: **char, __n: *int, __delimiter: int, __stream: *s__IO_FILE) -> long
export import def #extern getdelim(__lineptr: **char, __n: *int, __delimiter: int, __stream: *s__IO_FILE) -> long
export import def #extern getline(__lineptr: **char, __n: *int, __stream: *s__IO_FILE) -> long
export import def #extern fputs(__s: *char, __stream: *s__IO_FILE) -> int
export import def #extern puts(__s: *char) -> int
export import def #extern ungetc(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern fread(__ptr: *, __size: ulong, __n: ulong, __stream: *s__IO_FILE) -> ulong
export import def #extern fwrite(__ptr: *, __size: ulong, __n: ulong, __s: *s__IO_FILE) -> ulong
export import def #extern fread_unlocked(__ptr: *, __size: ulong, __n: ulong, __stream: *s__IO_FILE) -> ulong
export import def #extern fwrite_unlocked(__ptr: *, __size: ulong, __n: ulong, __stream: *s__IO_FILE) -> ulong
export import def #extern fseek(__stream: *s__IO_FILE, __off: long, __whence: int) -> int
export import def #extern ftell(__stream: *s__IO_FILE) -> long
export import def #extern rewind(__stream: *s__IO_FILE)
export import def #extern fseeko(__stream: *s__IO_FILE, __off: long, __whence: int) -> int
export import def #extern ftello(__stream: *s__IO_FILE) -> long
export import def #extern fgetpos(__stream: *s__IO_FILE, __pos: *s__G_fpos_t) -> int
export import def #extern fsetpos(__stream: *s__IO_FILE, __pos: *s__G_fpos_t) -> int
export import def #extern clearerr(__stream: *s__IO_FILE)
export import def #extern feof(__stream: *s__IO_FILE) -> int
export import def #extern ferror(__stream: *s__IO_FILE) -> int
export import def #extern clearerr_unlocked(__stream: *s__IO_FILE)
export import def #extern feof_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern ferror_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern perror(__s: *char)
export import def #extern fileno(__stream: *s__IO_FILE) -> int
export import def #extern fileno_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern popen(__command: *char, __modes: *char) -> *s__IO_FILE
export import def #extern pclose(__stream: *s__IO_FILE) -> int
export import def #extern ctermid(__s: *char) -> *char
export import def #extern flockfile(__stream: *s__IO_FILE)
export import def #extern ftrylockfile(__stream: *s__IO_FILE) -> int
export import def #extern funlockfile(__stream: *s__IO_FILE)
export import def #extern __uflow(_0: *s__IO_FILE) -> int
export import def #extern __overflow(_0: *s__IO_FILE, _1: int) -> int
export import def #extern memcpy(__dest: *, __src: *, __n: ulong) -> *
export import def #extern memmove(__dest: *, __src: *, __n: ulong) -> *
export import def #extern memccpy(__dest: *, __src: *, __c: int, __n: ulong) -> *
export import def #extern memset(__s: *, __c: int, __n: ulong) -> *
export import def #extern memcmp(__s1: *, __s2: *, __n: ulong) -> int
export import def #extern memchr(__s: *, __c: int, __n: ulong) -> *
export import def #extern strcpy(__dest: *char, __src: *char) -> *char
export import def #extern strncpy(__dest: *char, __src: *char, __n: ulong) -> *char
export import def #extern strcat(__dest: *char, __src: *char) -> *char
export import def #extern strncat(__dest: *char, __src: *char, __n: ulong) -> *char
export import def #extern strcmp(__s1: *char, __s2: *char) -> int
export import def #extern strncmp(__s1: *char, __s2: *char, __n: ulong) -> int
export import def #extern strcoll(__s1: *char, __s2: *char) -> int
export import def #extern strxfrm(__dest: *char, __src: *char, __n: ulong) -> ulong
export import def #extern strcoll_l(__s1: *char, __s2: *char, __l: *s___locale_struct) -> int
export import def #extern strxfrm_l(__dest: *char, __src: *char, __n: ulong, __l: *s___locale_struct) -> ulong
export import def #extern strdup(__s: *char) -> *char
export import def #extern strndup(__string: *char, __n: ulong) -> *char
export import def #extern strchr(__s: *char, __c: int) -> *char
export import def #extern strrchr(__s: *char, __c: int) -> *char
export import def #extern strcspn(__s: *char, __reject: *char) -> ulong
export import def #extern strspn(__s: *char, __accept: *char) -> ulong
export import def #extern strpbrk(__s: *char, __accept: *char) -> *char
export import def #extern strstr(__haystack: *char, __needle: *char) -> *char
export import def #extern strtok(__s: *char, __delim: *char) -> *char
export import def #extern __strtok_r(__s: *char, __delim: *char, __save_ptr: **char) -> *char
export import def #extern strtok_r(__s: *char, __delim: *char, __save_ptr: **char) -> *char
export import def #extern strlen(__s: *char) -> ulong
export import def #extern strnlen(__string: *char, __maxlen: ulong) -> ulong
export import def #extern strerror(__errnum: int) -> *char
export import def #extern strerror_r(__errnum: int, __buf: *char, __buflen: ulong) -> int
export import def #extern strerror_l(__errnum: int, __l: *s___locale_struct) -> *char
export import def #extern bcmp(__s1: *, __s2: *, __n: ulong) -> int
export import def #extern bcopy(__src: *, __dest: *, __n: ulong)
export import def #extern bzero(__s: *, __n: ulong)
export import def #extern index(__s: *char, __c: int) -> *char
export import def #extern rindex(__s: *char, __c: int) -> *char
export import def #extern ffs(__i: int) -> int
export import def #extern ffsl(__l: long) -> int
export import def #extern ffsll(__ll: int64) -> int
export import def #extern strcasecmp(__s1: *char, __s2: *char) -> int
export import def #extern strncasecmp(__s1: *char, __s2: *char, __n: ulong) -> int
export import def #extern strcasecmp_l(__s1: *char, __s2: *char, __loc: *s___locale_struct) -> int
export import def #extern strncasecmp_l(__s1: *char, __s2: *char, __n: ulong, __loc: *s___locale_struct) -> int
export import def #extern explicit_bzero(__s: *, __n: ulong)
export import def #extern strsep(__stringp: **char, __delim: *char) -> *char
export import def #extern strsignal(__sig: int) -> *char
export import def #extern __stpcpy(__dest: *char, __src: *char) -> *char
export import def #extern stpcpy(__dest: *char, __src: *char) -> *char
export import def #extern __stpncpy(__dest: *char, __src: *char, __n: ulong) -> *char
export import def #extern stpncpy(__dest: *char, __src: *char, __n: ulong) -> *char
export import def #extern clock() -> long
export import def #extern time(__timer: *long) -> long
export import def #extern difftime(__time1: long, __time0: long) -> double
export import def #extern mktime(__tp: *s_tm) -> long
export import def #extern strftime(__s: *char, __maxsize: ulong, __format: *char, __tp: *s_tm) -> ulong
export import def #extern strftime_l(__s: *char, __maxsize: ulong, __format: *char, __tp: *s_tm, __loc: *s___locale_struct) -> ulong
export import def #extern gmtime(__timer: *long) -> *s_tm
export import def #extern localtime(__timer: *long) -> *s_tm
export import def #extern gmtime_r(__timer: *long, __tp: *s_tm) -> *s_tm
export import def #extern localtime_r(__timer: *long, __tp: *s_tm) -> *s_tm
export import def #extern asctime(__tp: *s_tm) -> *char
export import def #extern ctime(__timer: *long) -> *char
export import def #extern asctime_r(__tp: *s_tm, __buf: *char) -> *char
export import def #extern ctime_r(__timer: *long, __buf: *char) -> *char
export import var #extern __tzname: **char
export import var #extern __daylight: int
export import var #extern __timezone: long
export import var #extern tzname: **char
export import def #extern tzset()
export import var #extern daylight: int
export import var #extern timezone: long
export import def #extern timegm(__tp: *s_tm) -> long
export import def #extern timelocal(__tp: *s_tm) -> long
export import def #extern dysize(__year: int) -> int
export import def #extern nanosleep(__requested_time: *s_timespec, __remaining: *s_timespec) -> int
export import def #extern clock_getres(__clock_id: int, __res: *s_timespec) -> int
export import def #extern clock_gettime(__clock_id: int, __tp: *s_timespec) -> int
export import def #extern clock_settime(__clock_id: int, __tp: *s_timespec) -> int
export import def #extern clock_nanosleep(__clock_id: int, __flags: int, __req: *s_timespec, __rem: *s_timespec) -> int
export import def #extern clock_getcpuclockid(__pid: int, __clock_id: *int) -> int
export import def #extern timespec_get(__ts: *s_timespec, __base: int) -> int
export import def #extern __fpclassify(__value: double) -> int
export import def #extern __signbit(__value: double) -> int
export import def #extern __isinf(__value: double) -> int
export import def #extern __finite(__value: double) -> int
export import def #extern __isnan(__value: double) -> int
export import def #extern __iseqsig(__x: double, __y: double) -> int
export import def #extern __issignaling(__value: double) -> int
export import def #extern acos(__x: double) -> double
export import def #extern asin(__x: double) -> double
export import def #extern atan(__x: double) -> double
export import def #extern atan2(__y: double, __x: double) -> double
export import def #extern cos(__x: double) -> double
export import def #extern sin(__x: double) -> double
export import def #extern tan(__x: double) -> double
export import def #extern cosh(__x: double) -> double
export import def #extern sinh(__x: double) -> double
export import def #extern tanh(__x: double) -> double
export import def #extern acosh(__x: double) -> double
export import def #extern asinh(__x: double) -> double
export import def #extern atanh(__x: double) -> double
export import def #extern exp(__x: double) -> double
export import def #extern frexp(__x: double, __exponent: *int) -> double
export import def #extern ldexp(__x: double, __exponent: int) -> double
export import def #extern log(__x: double) -> double
export import def #extern log10(__x: double) -> double
export import def #extern modf(__x: double, __iptr: *double) -> double
export import def #extern expm1(__x: double) -> double
export import def #extern log1p(__x: double) -> double
export import def #extern logb(__x: double) -> double
export import def #extern exp2(__x: double) -> double
export import def #extern log2(__x: double) -> double
export import def #extern pow(__x: double, __y: double) -> double
export import def #extern sqrt(__x: double) -> double
export import def #extern hypot(__x: double, __y: double) -> double
export import def #extern cbrt(__x: double) -> double
export import def #extern ceil(__x: double) -> double
export import def #extern fabs(__x: double) -> double
export import def #extern floor(__x: double) -> double
export import def #extern fmod(__x: double, __y: double) -> double
export import def #extern isinf(__value: double) -> int
export import def #extern finite(__value: double) -> int
export import def #extern drem(__x: double, __y: double) -> double
export import def #extern significand(__x: double) -> double
export import def #extern copysign(__x: double, __y: double) -> double
export import def #extern nan(__tagb: *char) -> double
export import def #extern isnan(__value: double) -> int
export import def #extern j0(_0: double) -> double
export import def #extern j1(_0: double) -> double
export import def #extern jn(_0: int, _1: double) -> double
export import def #extern y0(_0: double) -> double
export import def #extern y1(_0: double) -> double
export import def #extern yn(_0: int, _1: double) -> double
export import def #extern erf(_0: double) -> double
export import def #extern erfc(_0: double) -> double
export import def #extern lgamma(_0: double) -> double
export import def #extern tgamma(_0: double) -> double
export import def #extern gamma(_0: double) -> double
export import def #extern lgamma_r(_0: double, __signgamp: *int) -> double
export import def #extern rint(__x: double) -> double
export import def #extern nextafter(__x: double, __y: double) -> double
export import def #extern nexttoward(__x: double, __y: float80) -> double
export import def #extern remainder(__x: double, __y: double) -> double
export import def #extern scalbn(__x: double, __n: int) -> double
export import def #extern ilogb(__x: double) -> int
export import def #extern scalbln(__x: double, __n: long) -> double
export import def #extern nearbyint(__x: double) -> double
export import def #extern round(__x: double) -> double
export import def #extern trunc(__x: double) -> double
export import def #extern remquo(__x: double, __y: double, __quo: *int) -> double
export import def #extern lrint(__x: double) -> long
export import def #extern llrint(__x: double) -> int64
export import def #extern lround(__x: double) -> long
export import def #extern llround(__x: double) -> int64
export import def #extern fdim(__x: double, __y: double) -> double
export import def #extern fmax(__x: double, __y: double) -> double
export import def #extern fmin(__x: double, __y: double) -> double
export import def #extern fma(__x: double, __y: double, __z: double) -> double
export import def #extern scalb(__x: double, __n: double) -> double
export import def #extern __fpclassifyf(__value: float) -> int
export import def #extern __signbitf(__value: float) -> int
export import def #extern __isinff(__value: float) -> int
export import def #extern __finitef(__value: float) -> int
export import def #extern __isnanf(__value: float) -> int
export import def #extern __iseqsigf(__x: float, __y: float) -> int
export import def #extern __issignalingf(__value: float) -> int
export import def #extern acosf(__x: float) -> float
export import def #extern asinf(__x: float) -> float
export import def #extern atanf(__x: float) -> float
export import def #extern atan2f(__y: float, __x: float) -> float
export import def #extern cosf(__x: float) -> float
export import def #extern sinf(__x: float) -> float
export import def #extern tanf(__x: float) -> float
export import def #extern coshf(__x: float) -> float
export import def #extern sinhf(__x: float) -> float
export import def #extern tanhf(__x: float) -> float
export import def #extern acoshf(__x: float) -> float
export import def #extern asinhf(__x: float) -> float
export import def #extern atanhf(__x: float) -> float
export import def #extern expf(__x: float) -> float
export import def #extern frexpf(__x: float, __exponent: *int) -> float
export import def #extern ldexpf(__x: float, __exponent: int) -> float
export import def #extern logf(__x: float) -> float
export import def #extern log10f(__x: float) -> float
export import def #extern modff(__x: float, __iptr: *float) -> float
export import def #extern expm1f(__x: float) -> float
export import def #extern log1pf(__x: float) -> float
export import def #extern logbf(__x: float) -> float
export import def #extern exp2f(__x: float) -> float
export import def #extern log2f(__x: float) -> float
export import def #extern powf(__x: float, __y: float) -> float
export import def #extern sqrtf(__x: float) -> float
export import def #extern hypotf(__x: float, __y: float) -> float
export import def #extern cbrtf(__x: float) -> float
export import def #extern ceilf(__x: float) -> float
export import def #extern fabsf(__x: float) -> float
export import def #extern floorf(__x: float) -> float
export import def #extern fmodf(__x: float, __y: float) -> float
export import def #extern isinff(__value: float) -> int
export import def #extern finitef(__value: float) -> int
export import def #extern dremf(__x: float, __y: float) -> float
export import def #extern significandf(__x: float) -> float
export import def #extern copysignf(__x: float, __y: float) -> float
export import def #extern nanf(__tagb: *char) -> float
export import def #extern isnanf(__value: float) -> int
export import def #extern j0f(_0: float) -> float
export import def #extern j1f(_0: float) -> float
export import def #extern jnf(_0: int, _1: float) -> float
export import def #extern y0f(_0: float) -> float
export import def #extern y1f(_0: float) -> float
export import def #extern ynf(_0: int, _1: float) -> float
export import def #extern erff(_0: float) -> float
export import def #extern erfcf(_0: float) -> float
export import def #extern lgammaf(_0: float) -> float
export import def #extern tgammaf(_0: float) -> float
export import def #extern gammaf(_0: float) -> float
export import def #extern lgammaf_r(_0: float, __signgamp: *int) -> float
export import def #extern rintf(__x: float) -> float
export import def #extern nextafterf(__x: float, __y: float) -> float
export import def #extern nexttowardf(__x: float, __y: float80) -> float
export import def #extern remainderf(__x: float, __y: float) -> float
export import def #extern scalbnf(__x: float, __n: int) -> float
export import def #extern ilogbf(__x: float) -> int
export import def #extern scalblnf(__x: float, __n: long) -> float
export import def #extern nearbyintf(__x: float) -> float
export import def #extern roundf(__x: float) -> float
export import def #extern truncf(__x: float) -> float
export import def #extern remquof(__x: float, __y: float, __quo: *int) -> float
export import def #extern lrintf(__x: float) -> long
export import def #extern llrintf(__x: float) -> int64
export import def #extern lroundf(__x: float) -> long
export import def #extern llroundf(__x: float) -> int64
export import def #extern fdimf(__x: float, __y: float) -> float
export import def #extern fmaxf(__x: float, __y: float) -> float
export import def #extern fminf(__x: float, __y: float) -> float
export import def #extern fmaf(__x: float, __y: float, __z: float) -> float
export import def #extern scalbf(__x: float, __n: float) -> float
export import def #extern __fpclassifyl(__value: float80) -> int
export import def #extern __signbitl(__value: float80) -> int
export import def #extern __isinfl(__value: float80) -> int
export import def #extern __finitel(__value: float80) -> int
export import def #extern __isnanl(__value: float80) -> int
export import def #extern __iseqsigl(__x: float80, __y: float80) -> int
export import def #extern __issignalingl(__value: float80) -> int
export import def #extern acosl(__x: float80) -> float80
export import def #extern asinl(__x: float80) -> float80
export import def #extern atanl(__x: float80) -> float80
export import def #extern atan2l(__y: float80, __x: float80) -> float80
export import def #extern cosl(__x: float80) -> float80
export import def #extern sinl(__x: float80) -> float80
export import def #extern tanl(__x: float80) -> float80
export import def #extern coshl(__x: float80) -> float80
export import def #extern sinhl(__x: float80) -> float80
export import def #extern tanhl(__x: float80) -> float80
export import def #extern acoshl(__x: float80) -> float80
export import def #extern asinhl(__x: float80) -> float80
export import def #extern atanhl(__x: float80) -> float80
export import def #extern expl(__x: float80) -> float80
export import def #extern frexpl(__x: float80, __exponent: *int) -> float80
export import def #extern ldexpl(__x: float80, __exponent: int) -> float80
export import def #extern logl(__x: float80) -> float80
export import def #extern log10l(__x: float80) -> float80
export import def #extern modfl(__x: float80, __iptr: *float80) -> float80
export import def #extern expm1l(__x: float80) -> float80
export import def #extern log1pl(__x: float80) -> float80
export import def #extern logbl(__x: float80) -> float80
export import def #extern exp2l(__x: float80) -> float80
export import def #extern log2l(__x: float80) -> float80
export import def #extern powl(__x: float80, __y: float80) -> float80
export import def #extern sqrtl(__x: float80) -> float80
export import def #extern hypotl(__x: float80, __y: float80) -> float80
export import def #extern cbrtl(__x: float80) -> float80
export import def #extern ceill(__x: float80) -> float80
export import def #extern fabsl(__x: float80) -> float80
export import def #extern floorl(__x: float80) -> float80
export import def #extern fmodl(__x: float80, __y: float80) -> float80
export import def #extern isinfl(__value: float80) -> int
export import def #extern finitel(__value: float80) -> int
export import def #extern dreml(__x: float80, __y: float80) -> float80
export import def #extern significandl(__x: float80) -> float80
export import def #extern copysignl(__x: float80, __y: float80) -> float80
export import def #extern nanl(__tagb: *char) -> float80
export import def #extern isnanl(__value: float80) -> int
export import def #extern j0l(_0: float80) -> float80
export import def #extern j1l(_0: float80) -> float80
export import def #extern jnl(_0: int, _1: float80) -> float80
export import def #extern y0l(_0: float80) -> float80
export import def #extern y1l(_0: float80) -> float80
export import def #extern ynl(_0: int, _1: float80) -> float80
export import def #extern erfl(_0: float80) -> float80
export import def #extern erfcl(_0: float80) -> float80
export import def #extern lgammal(_0: float80) -> float80
export import def #extern tgammal(_0: float80) -> float80
export import def #extern gammal(_0: float80) -> float80
export import def #extern lgammal_r(_0: float80, __signgamp: *int) -> float80
export import def #extern rintl(__x: float80) -> float80
export import def #extern nextafterl(__x: float80, __y: float80) -> float80
export import def #extern nexttowardl(__x: float80, __y: float80) -> float80
export import def #extern remainderl(__x: float80, __y: float80) -> float80
export import def #extern scalbnl(__x: float80, __n: int) -> float80
export import def #extern ilogbl(__x: float80) -> int
export import def #extern scalblnl(__x: float80, __n: long) -> float80
export import def #extern nearbyintl(__x: float80) -> float80
export import def #extern roundl(__x: float80) -> float80
export import def #extern truncl(__x: float80) -> float80
export import def #extern remquol(__x: float80, __y: float80, __quo: *int) -> float80
export import def #extern lrintl(__x: float80) -> long
export import def #extern llrintl(__x: float80) -> int64
export import def #extern lroundl(__x: float80) -> long
export import def #extern llroundl(__x: float80) -> int64
export import def #extern fdiml(__x: float80, __y: float80) -> float80
export import def #extern fmaxl(__x: float80, __y: float80) -> float80
export import def #extern fminl(__x: float80, __y: float80) -> float80
export import def #extern fmal(__x: float80, __y: float80, __z: float80) -> float80
export import def #extern scalbl(__x: float80, __n: float80) -> float80
export import var #extern signgam: int
export import def #extern __assert_fail(__assertion: *char, __file: *char, __line: uint, __function: *char)
export import def #extern __assert_perror_fail(__errnum: int, __file: *char, __line: uint, __function: *char)
export import def #extern __assert(__assertion: *char, __file: *char, __line: int)
export const SI_ASYNCNL: int = -60
export const SI_DETHREAD: int = -7
export const SI_TKILL: int = -6
export const SI_SIGIO: int = -5
export const SI_ASYNCIO: int = -4
export const SI_MESGQ: int = -3
export const SI_TIMER: int = -2
export const SI_QUEUE: int = -1
export const SI_USER: int = 0
export const SI_KERNEL: int = 128
export const ILL_ILLOPC: int = 1
export const ILL_ILLOPN: int = 2
export const ILL_ILLADR: int = 3
export const ILL_ILLTRP: int = 4
export const ILL_PRVOPC: int = 5
export const ILL_PRVREG: int = 6
export const ILL_COPROC: int = 7
export const ILL_BADSTK: int = 8
export const ILL_BADIADDR: int = 9
export const FPE_INTDIV: int = 1
export const FPE_INTOVF: int = 2
export const FPE_FLTDIV: int = 3
export const FPE_FLTOVF: int = 4
export const FPE_FLTUND: int = 5
export const FPE_FLTRES: int = 6
export const FPE_FLTINV: int = 7
export const FPE_FLTSUB: int = 8
export const FPE_FLTUNK: int = 14
export const FPE_CONDTRAP: int = 15
export const SEGV_MAPERR: int = 1
export const SEGV_ACCERR: int = 2
export const SEGV_BNDERR: int = 3
export const SEGV_PKUERR: int = 4
export const SEGV_ACCADI: int = 5
export const SEGV_ADIDERR: int = 6
export const SEGV_ADIPERR: int = 7
export const BUS_ADRALN: int = 1
export const BUS_ADRERR: int = 2
export const BUS_OBJERR: int = 3
export const BUS_MCEERR_AR: int = 4
export const BUS_MCEERR_AO: int = 5
export const CLD_EXITED: int = 1
export const CLD_KILLED: int = 2
export const CLD_DUMPED: int = 3
export const CLD_TRAPPED: int = 4
export const CLD_STOPPED: int = 5
export const CLD_CONTINUED: int = 6
export const POLL_IN: int = 1
export const POLL_OUT: int = 2
export const POLL_MSG: int = 3
export const POLL_ERR: int = 4
export const POLL_PRI: int = 5
export const POLL_HUP: int = 6
export const SIGEV_SIGNAL: int = 0
export const SIGEV_NONE: int = 1
export const SIGEV_THREAD: int = 2
export const SIGEV_THREAD_ID: int = 4
export import def #extern __sysv_signal(__sig: int, __handler: def (int) -> ()) -> def (int) -> ()
export import def #extern signal(__sig: int, __handler: def (int) -> ()) -> def (int) -> ()
export import def #extern kill(__pid: int, __sig: int) -> int
export import def #extern killpg(__pgrp: int, __sig: int) -> int
export import def #extern raise(__sig: int) -> int
export import def #extern ssignal(__sig: int, __handler: def (int) -> ()) -> def (int) -> ()
export import def #extern gsignal(__sig: int) -> int
export import def #extern psignal(__sig: int, __s: *char)
export import def #extern psiginfo(__pinfo: *s_siginfo_t, __s: *char)
export import def #extern sigblock(__mask: int) -> int
export import def #extern sigsetmask(__mask: int) -> int
export import def #extern sigemptyset(__set: *s___sigset_t) -> int
export import def #extern sigfillset(__set: *s___sigset_t) -> int
export import def #extern sigaddset(__set: *s___sigset_t, __signo: int) -> int
export import def #extern sigdelset(__set: *s___sigset_t, __signo: int) -> int
export import def #extern sigismember(__set: *s___sigset_t, __signo: int) -> int
export import def #extern sigprocmask(__how: int, __set: *s___sigset_t, __oset: *s___sigset_t) -> int
export import def #extern sigsuspend(__set: *s___sigset_t) -> int
export import def #extern sigaction(__sig: int, __act: *s_sigaction, __oact: *s_sigaction) -> int
export import def #extern sigpending(__set: *s___sigset_t) -> int
export import def #extern sigwait(__set: *s___sigset_t, __sig: *int) -> int
export import def #extern sigwaitinfo(__set: *s___sigset_t, __info: *s_siginfo_t) -> int
export import def #extern sigtimedwait(__set: *s___sigset_t, __info: *s_siginfo_t, __timeout: *s_timespec) -> int
export import def #extern sigqueue(__pid: int, __sig: int, __val: u_sigval) -> int
export import def #extern siginterrupt(__sig: int, __interrupt: int) -> int
export const SS_ONSTACK: int = 1
export const SS_DISABLE: int = 2
export import def #extern sigaltstack(__ss: *struct { ss_sp: *; ss_flags: int; ss_size: int; }, __oss: *struct { ss_sp: *; ss_flags: int; ss_size: int; }) -> int
export import def #extern pthread_sigmask(__how: int, __newmask: *s___sigset_t, __oldmask: *s___sigset_t) -> int
export import def #extern pthread_kill(__threadid: ulong, __signo: int) -> int
export import def #extern __libc_current_sigrtmin() -> int
export import def #extern __libc_current_sigrtmax() -> int
export const _ISupper: int = 256
export const _ISlower: int = 512
export const _ISalpha: int = 1024
export const _ISdigit: int = 2048
export const _ISxdigit: int = 4096
export const _ISspace: int = 8192
export const _ISprint: int = 16384
export const _ISgraph: int = 32768
export const _ISblank: int = 1
export const _IScntrl: int = 2
export const _ISpunct: int = 4
export const _ISalnum: int = 8
export import def #extern __ctype_b_loc() -> **ushort
export import def #extern __ctype_tolower_loc() -> **int
export import def #extern __ctype_toupper_loc() -> **int
export import def #extern isalnum(_0: int) -> int
export import def #extern isalpha(_0: int) -> int
export import def #extern iscntrl(_0: int) -> int
export import def #extern isdigit(_0: int) -> int
export import def #extern islower(_0: int) -> int
export import def #extern isgraph(_0: int) -> int
export import def #extern isprint(_0: int) -> int
export import def #extern ispunct(_0: int) -> int
export import def #extern isspace(_0: int) -> int
export import def #extern isupper(_0: int) -> int
export import def #extern isxdigit(_0: int) -> int
export import def #extern tolower(__c: int) -> int
export import def #extern toupper(__c: int) -> int
export import def #extern isblank(_0: int) -> int
export import def #extern isascii(__c: int) -> int
export import def #extern toascii(__c: int) -> int
export import def #extern _toupper(_0: int) -> int
export import def #extern _tolower(_0: int) -> int
export import def #extern isalnum_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isalpha_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern iscntrl_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isdigit_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern islower_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isgraph_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isprint_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern ispunct_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isspace_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isupper_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isxdigit_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isblank_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern __tolower_l(__c: int, __l: *s___locale_struct) -> int
export import def #extern tolower_l(__c: int, __l: *s___locale_struct) -> int
export import def #extern __toupper_l(__c: int, __l: *s___locale_struct) -> int
export import def #extern toupper_l(__c: int, __l: *s___locale_struct) -> int
export import def #extern setlocale(__category: int, __locale: *char) -> *char
export import def #extern localeconv() -> *s_lconv
export import def #extern newlocale(__category_mask: int, __locale: *char, __base: *s___locale_struct) -> *s___locale_struct
export import def #extern duplocale(__dataset: *s___locale_struct) -> *s___locale_struct
export import def #extern freelocale(__dataset: *s___locale_struct)
export import def #extern uselocale(__dataset: *s___locale_struct) -> *s___locale_struct
export import def #extern setjmp(__env: *s___jmp_buf_tag) -> int
export import def #extern __sigsetjmp(__env: *s___jmp_buf_tag, __savemask: int) -> int
export import def #extern _setjmp(__env: *s___jmp_buf_tag) -> int
export import def #extern longjmp(__env: *s___jmp_buf_tag, __val: int)
export import def #extern _longjmp(__env: *s___jmp_buf_tag, __val: int)
export import def #extern siglongjmp(__env: *s___jmp_buf_tag, __val: int)
export import def #extern __errno_location() -> *int
