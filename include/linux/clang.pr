export type s___fsid_t = struct { __val: [2; int]; }
export type s___locale_struct
export type s_CXString = struct { data: *; private_flags: uint; }
export type s_CXStringSet = struct { Strings: *s_CXString; Count: uint; }
export type s_CXVirtualFileOverlayImpl
export type s_CXModuleMapDescriptorImpl
export type s_CXTargetInfoImpl
export type s_CXTranslationUnitImpl
export type s_CXVersion = struct { Major: int; Minor: int; Subminor: int; }
export type e_CXGlobalOptFlags = enum { CXGlobalOpt_None; CXGlobalOpt_ThreadBackgroundPriorityForIndexing = 1; CXGlobalOpt_ThreadBackgroundPriorityForEditing = 2; CXGlobalOpt_ThreadBackgroundPriorityForAll = 3; }
export type s_CXFileUniqueID = struct { data: [3; uint64]; }
export type s_CXSourceLocation = struct { ptr_data: [2; *]; int_data: uint; }
export type s_CXSourceRange = struct { ptr_data: [2; *]; begin_int_data: uint; end_int_data: uint; }
export type s_CXSourceRangeList = struct { count: uint; ranges: *s_CXSourceRange; }
export type e_CXTUResourceUsageKind = enum { CXTUResourceUsage_AST = 1; CXTUResourceUsage_Identifiers = 2; CXTUResourceUsage_Selectors = 3; CXTUResourceUsage_GlobalCompletionResults = 4; CXTUResourceUsage_SourceManagerContentCache = 5; CXTUResourceUsage_AST_SideTables = 6; CXTUResourceUsage_SourceManager_Membuffer_Malloc = 7; CXTUResourceUsage_SourceManager_Membuffer_MMap = 8; CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = 9; CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = 10; CXTUResourceUsage_Preprocessor = 11; CXTUResourceUsage_PreprocessingRecord = 12; CXTUResourceUsage_SourceManager_DataStructures = 13; CXTUResourceUsage_Preprocessor_HeaderSearch = 14; CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = 1; CXTUResourceUsage_MEMORY_IN_BYTES_END = 14; CXTUResourceUsage_First = 1; CXTUResourceUsage_Last = 14; }
export type s_CXTUResourceUsageEntry = struct { kind: e_CXTUResourceUsageKind; amount: ulong; }
export type s_CXTUResourceUsage = struct { data: *; numEntries: uint; entries: *s_CXTUResourceUsageEntry; }
export type e_CXCursorKind = enum { CXCursor_UnexposedDecl = 1; CXCursor_StructDecl = 2; CXCursor_UnionDecl = 3; CXCursor_ClassDecl = 4; CXCursor_EnumDecl = 5; CXCursor_FieldDecl = 6; CXCursor_EnumConstantDecl = 7; CXCursor_FunctionDecl = 8; CXCursor_VarDecl = 9; CXCursor_ParmDecl = 10; CXCursor_ObjCInterfaceDecl = 11; CXCursor_ObjCCategoryDecl = 12; CXCursor_ObjCProtocolDecl = 13; CXCursor_ObjCPropertyDecl = 14; CXCursor_ObjCIvarDecl = 15; CXCursor_ObjCInstanceMethodDecl = 16; CXCursor_ObjCClassMethodDecl = 17; CXCursor_ObjCImplementationDecl = 18; CXCursor_ObjCCategoryImplDecl = 19; CXCursor_TypedefDecl = 20; CXCursor_CXXMethod = 21; CXCursor_Namespace = 22; CXCursor_LinkageSpec = 23; CXCursor_Constructor = 24; CXCursor_Destructor = 25; CXCursor_ConversionFunction = 26; CXCursor_TemplateTypeParameter = 27; CXCursor_NonTypeTemplateParameter = 28; CXCursor_TemplateTemplateParameter = 29; CXCursor_FunctionTemplate = 30; CXCursor_ClassTemplate = 31; CXCursor_ClassTemplatePartialSpecialization = 32; CXCursor_NamespaceAlias = 33; CXCursor_UsingDirective = 34; CXCursor_UsingDeclaration = 35; CXCursor_TypeAliasDecl = 36; CXCursor_ObjCSynthesizeDecl = 37; CXCursor_ObjCDynamicDecl = 38; CXCursor_CXXAccessSpecifier = 39; CXCursor_FirstDecl = 1; CXCursor_LastDecl = 39; CXCursor_FirstRef = 40; CXCursor_ObjCSuperClassRef = 40; CXCursor_ObjCProtocolRef = 41; CXCursor_ObjCClassRef = 42; CXCursor_TypeRef = 43; CXCursor_CXXBaseSpecifier = 44; CXCursor_TemplateRef = 45; CXCursor_NamespaceRef = 46; CXCursor_MemberRef = 47; CXCursor_LabelRef = 48; CXCursor_OverloadedDeclRef = 49; CXCursor_VariableRef = 50; CXCursor_LastRef = 50; CXCursor_FirstInvalid = 70; CXCursor_InvalidFile = 70; CXCursor_NoDeclFound = 71; CXCursor_NotImplemented = 72; CXCursor_InvalidCode = 73; CXCursor_LastInvalid = 73; CXCursor_FirstExpr = 100; CXCursor_UnexposedExpr = 100; CXCursor_DeclRefExpr = 101; CXCursor_MemberRefExpr = 102; CXCursor_CallExpr = 103; CXCursor_ObjCMessageExpr = 104; CXCursor_BlockExpr = 105; CXCursor_IntegerLiteral = 106; CXCursor_FloatingLiteral = 107; CXCursor_ImaginaryLiteral = 108; CXCursor_StringLiteral = 109; CXCursor_CharacterLiteral = 110; CXCursor_ParenExpr = 111; CXCursor_UnaryOperator = 112; CXCursor_ArraySubscriptExpr = 113; CXCursor_BinaryOperator = 114; CXCursor_CompoundAssignOperator = 115; CXCursor_ConditionalOperator = 116; CXCursor_CStyleCastExpr = 117; CXCursor_CompoundLiteralExpr = 118; CXCursor_InitListExpr = 119; CXCursor_AddrLabelExpr = 120; CXCursor_StmtExpr = 121; CXCursor_GenericSelectionExpr = 122; CXCursor_GNUNullExpr = 123; CXCursor_CXXStaticCastExpr = 124; CXCursor_CXXDynamicCastExpr = 125; CXCursor_CXXReinterpretCastExpr = 126; CXCursor_CXXConstCastExpr = 127; CXCursor_CXXFunctionalCastExpr = 128; CXCursor_CXXTypeidExpr = 129; CXCursor_CXXBoolLiteralExpr = 130; CXCursor_CXXNullPtrLiteralExpr = 131; CXCursor_CXXThisExpr = 132; CXCursor_CXXThrowExpr = 133; CXCursor_CXXNewExpr = 134; CXCursor_CXXDeleteExpr = 135; CXCursor_UnaryExpr = 136; CXCursor_ObjCStringLiteral = 137; CXCursor_ObjCEncodeExpr = 138; CXCursor_ObjCSelectorExpr = 139; CXCursor_ObjCProtocolExpr = 140; CXCursor_ObjCBridgedCastExpr = 141; CXCursor_PackExpansionExpr = 142; CXCursor_SizeOfPackExpr = 143; CXCursor_LambdaExpr = 144; CXCursor_ObjCBoolLiteralExpr = 145; CXCursor_ObjCSelfExpr = 146; CXCursor_OMPArraySectionExpr = 147; CXCursor_ObjCAvailabilityCheckExpr = 148; CXCursor_FixedPointLiteral = 149; CXCursor_OMPArrayShapingExpr = 150; CXCursor_OMPIteratorExpr = 151; CXCursor_CXXAddrspaceCastExpr = 152; CXCursor_LastExpr = 152; CXCursor_FirstStmt = 200; CXCursor_UnexposedStmt = 200; CXCursor_LabelStmt = 201; CXCursor_CompoundStmt = 202; CXCursor_CaseStmt = 203; CXCursor_DefaultStmt = 204; CXCursor_IfStmt = 205; CXCursor_SwitchStmt = 206; CXCursor_WhileStmt = 207; CXCursor_DoStmt = 208; CXCursor_ForStmt = 209; CXCursor_GotoStmt = 210; CXCursor_IndirectGotoStmt = 211; CXCursor_ContinueStmt = 212; CXCursor_BreakStmt = 213; CXCursor_ReturnStmt = 214; CXCursor_GCCAsmStmt = 215; CXCursor_AsmStmt = 215; CXCursor_ObjCAtTryStmt = 216; CXCursor_ObjCAtCatchStmt = 217; CXCursor_ObjCAtFinallyStmt = 218; CXCursor_ObjCAtThrowStmt = 219; CXCursor_ObjCAtSynchronizedStmt = 220; CXCursor_ObjCAutoreleasePoolStmt = 221; CXCursor_ObjCForCollectionStmt = 222; CXCursor_CXXCatchStmt = 223; CXCursor_CXXTryStmt = 224; CXCursor_CXXForRangeStmt = 225; CXCursor_SEHTryStmt = 226; CXCursor_SEHExceptStmt = 227; CXCursor_SEHFinallyStmt = 228; CXCursor_MSAsmStmt = 229; CXCursor_NullStmt = 230; CXCursor_DeclStmt = 231; CXCursor_OMPParallelDirective = 232; CXCursor_OMPSimdDirective = 233; CXCursor_OMPForDirective = 234; CXCursor_OMPSectionsDirective = 235; CXCursor_OMPSectionDirective = 236; CXCursor_OMPSingleDirective = 237; CXCursor_OMPParallelForDirective = 238; CXCursor_OMPParallelSectionsDirective = 239; CXCursor_OMPTaskDirective = 240; CXCursor_OMPMasterDirective = 241; CXCursor_OMPCriticalDirective = 242; CXCursor_OMPTaskyieldDirective = 243; CXCursor_OMPBarrierDirective = 244; CXCursor_OMPTaskwaitDirective = 245; CXCursor_OMPFlushDirective = 246; CXCursor_SEHLeaveStmt = 247; CXCursor_OMPOrderedDirective = 248; CXCursor_OMPAtomicDirective = 249; CXCursor_OMPForSimdDirective = 250; CXCursor_OMPParallelForSimdDirective = 251; CXCursor_OMPTargetDirective = 252; CXCursor_OMPTeamsDirective = 253; CXCursor_OMPTaskgroupDirective = 254; CXCursor_OMPCancellationPointDirective = 255; CXCursor_OMPCancelDirective = 256; CXCursor_OMPTargetDataDirective = 257; CXCursor_OMPTaskLoopDirective = 258; CXCursor_OMPTaskLoopSimdDirective = 259; CXCursor_OMPDistributeDirective = 260; CXCursor_OMPTargetEnterDataDirective = 261; CXCursor_OMPTargetExitDataDirective = 262; CXCursor_OMPTargetParallelDirective = 263; CXCursor_OMPTargetParallelForDirective = 264; CXCursor_OMPTargetUpdateDirective = 265; CXCursor_OMPDistributeParallelForDirective = 266; CXCursor_OMPDistributeParallelForSimdDirective = 267; CXCursor_OMPDistributeSimdDirective = 268; CXCursor_OMPTargetParallelForSimdDirective = 269; CXCursor_OMPTargetSimdDirective = 270; CXCursor_OMPTeamsDistributeDirective = 271; CXCursor_OMPTeamsDistributeSimdDirective = 272; CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273; CXCursor_OMPTeamsDistributeParallelForDirective = 274; CXCursor_OMPTargetTeamsDirective = 275; CXCursor_OMPTargetTeamsDistributeDirective = 276; CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277; CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278; CXCursor_OMPTargetTeamsDistributeSimdDirective = 279; CXCursor_BuiltinBitCastExpr = 280; CXCursor_OMPMasterTaskLoopDirective = 281; CXCursor_OMPParallelMasterTaskLoopDirective = 282; CXCursor_OMPMasterTaskLoopSimdDirective = 283; CXCursor_OMPParallelMasterTaskLoopSimdDirective = 284; CXCursor_OMPParallelMasterDirective = 285; CXCursor_OMPDepobjDirective = 286; CXCursor_OMPScanDirective = 287; CXCursor_OMPTileDirective = 288; CXCursor_OMPCanonicalLoop = 289; CXCursor_OMPInteropDirective = 290; CXCursor_OMPDispatchDirective = 291; CXCursor_OMPMaskedDirective = 292; CXCursor_OMPUnrollDirective = 293; CXCursor_LastStmt = 293; CXCursor_TranslationUnit = 300; CXCursor_FirstAttr = 400; CXCursor_UnexposedAttr = 400; CXCursor_IBActionAttr = 401; CXCursor_IBOutletAttr = 402; CXCursor_IBOutletCollectionAttr = 403; CXCursor_CXXFinalAttr = 404; CXCursor_CXXOverrideAttr = 405; CXCursor_AnnotateAttr = 406; CXCursor_AsmLabelAttr = 407; CXCursor_PackedAttr = 408; CXCursor_PureAttr = 409; CXCursor_ConstAttr = 410; CXCursor_NoDuplicateAttr = 411; CXCursor_CUDAConstantAttr = 412; CXCursor_CUDADeviceAttr = 413; CXCursor_CUDAGlobalAttr = 414; CXCursor_CUDAHostAttr = 415; CXCursor_CUDASharedAttr = 416; CXCursor_VisibilityAttr = 417; CXCursor_DLLExport = 418; CXCursor_DLLImport = 419; CXCursor_NSReturnsRetained = 420; CXCursor_NSReturnsNotRetained = 421; CXCursor_NSReturnsAutoreleased = 422; CXCursor_NSConsumesSelf = 423; CXCursor_NSConsumed = 424; CXCursor_ObjCException = 425; CXCursor_ObjCNSObject = 426; CXCursor_ObjCIndependentClass = 427; CXCursor_ObjCPreciseLifetime = 428; CXCursor_ObjCReturnsInnerPointer = 429; CXCursor_ObjCRequiresSuper = 430; CXCursor_ObjCRootClass = 431; CXCursor_ObjCSubclassingRestricted = 432; CXCursor_ObjCExplicitProtocolImpl = 433; CXCursor_ObjCDesignatedInitializer = 434; CXCursor_ObjCRuntimeVisible = 435; CXCursor_ObjCBoxable = 436; CXCursor_FlagEnum = 437; CXCursor_ConvergentAttr = 438; CXCursor_WarnUnusedAttr = 439; CXCursor_WarnUnusedResultAttr = 440; CXCursor_AlignedAttr = 441; CXCursor_LastAttr = 441; CXCursor_PreprocessingDirective = 500; CXCursor_MacroDefinition = 501; CXCursor_MacroExpansion = 502; CXCursor_MacroInstantiation = 502; CXCursor_InclusionDirective = 503; CXCursor_FirstPreprocessing = 500; CXCursor_LastPreprocessing = 503; CXCursor_ModuleImportDecl = 600; CXCursor_TypeAliasTemplateDecl = 601; CXCursor_StaticAssert = 602; CXCursor_FriendDecl = 603; CXCursor_FirstExtraDecl = 600; CXCursor_LastExtraDecl = 603; CXCursor_OverloadCandidate = 700; }
export type s_CXCursor = struct { kind: e_CXCursorKind; xdata: int; data: [3; *]; }
export type s_CXPlatformAvailability = struct { Platform: s_CXString; Introduced: s_CXVersion; Deprecated: s_CXVersion; Obsoleted: s_CXVersion; Unavailable: int; Message: s_CXString; }
export type s_CXCursorSetImpl
export type e_CXTypeKind = enum { CXType_Invalid; CXType_Unexposed = 1; CXType_Void = 2; CXType_Bool = 3; CXType_Char_U = 4; CXType_UChar = 5; CXType_Char16 = 6; CXType_Char32 = 7; CXType_UShort = 8; CXType_UInt = 9; CXType_ULong = 10; CXType_ULongLong = 11; CXType_UInt128 = 12; CXType_Char_S = 13; CXType_SChar = 14; CXType_WChar = 15; CXType_Short = 16; CXType_Int = 17; CXType_Long = 18; CXType_LongLong = 19; CXType_Int128 = 20; CXType_Float = 21; CXType_Double = 22; CXType_LongDouble = 23; CXType_NullPtr = 24; CXType_Overload = 25; CXType_Dependent = 26; CXType_ObjCId = 27; CXType_ObjCClass = 28; CXType_ObjCSel = 29; CXType_Float128 = 30; CXType_Half = 31; CXType_Float16 = 32; CXType_ShortAccum = 33; CXType_Accum = 34; CXType_LongAccum = 35; CXType_UShortAccum = 36; CXType_UAccum = 37; CXType_ULongAccum = 38; CXType_BFloat16 = 39; CXType_FirstBuiltin = 2; CXType_LastBuiltin = 39; CXType_Complex = 100; CXType_Pointer = 101; CXType_BlockPointer = 102; CXType_LValueReference = 103; CXType_RValueReference = 104; CXType_Record = 105; CXType_Enum = 106; CXType_Typedef = 107; CXType_ObjCInterface = 108; CXType_ObjCObjectPointer = 109; CXType_FunctionNoProto = 110; CXType_FunctionProto = 111; CXType_ConstantArray = 112; CXType_Vector = 113; CXType_IncompleteArray = 114; CXType_VariableArray = 115; CXType_DependentSizedArray = 116; CXType_MemberPointer = 117; CXType_Auto = 118; CXType_Elaborated = 119; CXType_Pipe = 120; CXType_OCLImage1dRO = 121; CXType_OCLImage1dArrayRO = 122; CXType_OCLImage1dBufferRO = 123; CXType_OCLImage2dRO = 124; CXType_OCLImage2dArrayRO = 125; CXType_OCLImage2dDepthRO = 126; CXType_OCLImage2dArrayDepthRO = 127; CXType_OCLImage2dMSAARO = 128; CXType_OCLImage2dArrayMSAARO = 129; CXType_OCLImage2dMSAADepthRO = 130; CXType_OCLImage2dArrayMSAADepthRO = 131; CXType_OCLImage3dRO = 132; CXType_OCLImage1dWO = 133; CXType_OCLImage1dArrayWO = 134; CXType_OCLImage1dBufferWO = 135; CXType_OCLImage2dWO = 136; CXType_OCLImage2dArrayWO = 137; CXType_OCLImage2dDepthWO = 138; CXType_OCLImage2dArrayDepthWO = 139; CXType_OCLImage2dMSAAWO = 140; CXType_OCLImage2dArrayMSAAWO = 141; CXType_OCLImage2dMSAADepthWO = 142; CXType_OCLImage2dArrayMSAADepthWO = 143; CXType_OCLImage3dWO = 144; CXType_OCLImage1dRW = 145; CXType_OCLImage1dArrayRW = 146; CXType_OCLImage1dBufferRW = 147; CXType_OCLImage2dRW = 148; CXType_OCLImage2dArrayRW = 149; CXType_OCLImage2dDepthRW = 150; CXType_OCLImage2dArrayDepthRW = 151; CXType_OCLImage2dMSAARW = 152; CXType_OCLImage2dArrayMSAARW = 153; CXType_OCLImage2dMSAADepthRW = 154; CXType_OCLImage2dArrayMSAADepthRW = 155; CXType_OCLImage3dRW = 156; CXType_OCLSampler = 157; CXType_OCLEvent = 158; CXType_OCLQueue = 159; CXType_OCLReserveID = 160; CXType_ObjCObject = 161; CXType_ObjCTypeParam = 162; CXType_Attributed = 163; CXType_OCLIntelSubgroupAVCMcePayload = 164; CXType_OCLIntelSubgroupAVCImePayload = 165; CXType_OCLIntelSubgroupAVCRefPayload = 166; CXType_OCLIntelSubgroupAVCSicPayload = 167; CXType_OCLIntelSubgroupAVCMceResult = 168; CXType_OCLIntelSubgroupAVCImeResult = 169; CXType_OCLIntelSubgroupAVCRefResult = 170; CXType_OCLIntelSubgroupAVCSicResult = 171; CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172; CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173; CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174; CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175; CXType_ExtVector = 176; CXType_Atomic = 177; }
export type s_CXType = struct { kind: e_CXTypeKind; data: [2; *]; }
export type e_CXChildVisitResult = enum { CXChildVisit_Break; CXChildVisit_Continue = 1; CXChildVisit_Recurse = 2; }
export type e_CXObjCPropertyAttrKind = enum { CXObjCPropertyAttr_noattr; CXObjCPropertyAttr_readonly = 1; CXObjCPropertyAttr_getter = 2; CXObjCPropertyAttr_assign = 4; CXObjCPropertyAttr_readwrite = 8; CXObjCPropertyAttr_retain = 16; CXObjCPropertyAttr_copy = 32; CXObjCPropertyAttr_nonatomic = 64; CXObjCPropertyAttr_setter = 128; CXObjCPropertyAttr_atomic = 256; CXObjCPropertyAttr_weak = 512; CXObjCPropertyAttr_strong = 1024; CXObjCPropertyAttr_unsafe_unretained = 2048; CXObjCPropertyAttr_class = 4096; }
export type e_CXObjCDeclQualifierKind = enum { CXObjCDeclQualifier_None; CXObjCDeclQualifier_In = 1; CXObjCDeclQualifier_Inout = 2; CXObjCDeclQualifier_Out = 4; CXObjCDeclQualifier_Bycopy = 8; CXObjCDeclQualifier_Byref = 16; CXObjCDeclQualifier_Oneway = 32; }
export type e_CXTokenKind = enum { CXToken_Punctuation; CXToken_Keyword = 1; CXToken_Identifier = 2; CXToken_Literal = 3; CXToken_Comment = 4; }
export type s_CXToken = struct { int_data: [4; uint]; ptr_data: *; }
export type s_CXCompletionResult = struct { CursorKind: e_CXCursorKind; CompletionString: *; }
export type s_CXCodeCompleteResults = struct { Results: *s_CXCompletionResult; NumResults: uint; }
export type e_CXEvalResultKind = enum { CXEval_Int = 1; CXEval_Float = 2; CXEval_ObjCStrLiteral = 3; CXEval_StrLiteral = 4; CXEval_CFStr = 5; CXEval_Other = 6; CXEval_UnExposed; }
export type e_CXVisitorResult = enum { CXVisit_Break; CXVisit_Continue = 1; }
export type s_CXCursorAndRangeVisitor = struct { context: *; visit: def (*, s_CXCursor, s_CXSourceRange) -> (e_CXVisitorResult); }
export type e_CXResult = enum { CXResult_Success; CXResult_Invalid = 1; CXResult_VisitBreak = 2; }
export type s_CXIdxLoc = struct { ptr_data: [2; *]; int_data: uint; }
export type s_CXIdxIncludedFileInfo = struct { hashLoc: s_CXIdxLoc; filename: *char; file: *; isImport: int; isAngled: int; isModuleImport: int; }
export type s_CXIdxImportedASTFileInfo = struct { file: *; module: *; loc: s_CXIdxLoc; isImplicit: int; }
export type e_CXIdxEntityKind = enum { CXIdxEntity_Unexposed; CXIdxEntity_Typedef = 1; CXIdxEntity_Function = 2; CXIdxEntity_Variable = 3; CXIdxEntity_Field = 4; CXIdxEntity_EnumConstant = 5; CXIdxEntity_ObjCClass = 6; CXIdxEntity_ObjCProtocol = 7; CXIdxEntity_ObjCCategory = 8; CXIdxEntity_ObjCInstanceMethod = 9; CXIdxEntity_ObjCClassMethod = 10; CXIdxEntity_ObjCProperty = 11; CXIdxEntity_ObjCIvar = 12; CXIdxEntity_Enum = 13; CXIdxEntity_Struct = 14; CXIdxEntity_Union = 15; CXIdxEntity_CXXClass = 16; CXIdxEntity_CXXNamespace = 17; CXIdxEntity_CXXNamespaceAlias = 18; CXIdxEntity_CXXStaticVariable = 19; CXIdxEntity_CXXStaticMethod = 20; CXIdxEntity_CXXInstanceMethod = 21; CXIdxEntity_CXXConstructor = 22; CXIdxEntity_CXXDestructor = 23; CXIdxEntity_CXXConversionFunction = 24; CXIdxEntity_CXXTypeAlias = 25; CXIdxEntity_CXXInterface = 26; }
export type e_CXIdxEntityLanguage = enum { CXIdxEntityLang_None; CXIdxEntityLang_C = 1; CXIdxEntityLang_ObjC = 2; CXIdxEntityLang_CXX = 3; CXIdxEntityLang_Swift = 4; }
export type e_CXIdxEntityCXXTemplateKind = enum { CXIdxEntity_NonTemplate; CXIdxEntity_Template = 1; CXIdxEntity_TemplatePartialSpecialization = 2; CXIdxEntity_TemplateSpecialization = 3; }
export type e_CXIdxAttrKind = enum { CXIdxAttr_Unexposed; CXIdxAttr_IBAction = 1; CXIdxAttr_IBOutlet = 2; CXIdxAttr_IBOutletCollection = 3; }
export type s_CXIdxAttrInfo = struct { kind: e_CXIdxAttrKind; cursor: s_CXCursor; loc: s_CXIdxLoc; }
export type s_CXIdxEntityInfo = struct { kind: e_CXIdxEntityKind; templateKind: e_CXIdxEntityCXXTemplateKind; lang: e_CXIdxEntityLanguage; name: *char; USR: *char; cursor: s_CXCursor; attributes: **s_CXIdxAttrInfo; numAttributes: uint; }
export type s_CXIdxContainerInfo = struct { cursor: s_CXCursor; }
export type s_CXIdxIBOutletCollectionAttrInfo = struct { attrInfo: *s_CXIdxAttrInfo; objcClass: *s_CXIdxEntityInfo; classCursor: s_CXCursor; classLoc: s_CXIdxLoc; }
export type e_CXIdxDeclInfoFlags = enum { CXIdxDeclFlag_Skipped = 1; }
export type s_CXIdxDeclInfo = struct { entityInfo: *s_CXIdxEntityInfo; cursor: s_CXCursor; loc: s_CXIdxLoc; semanticContainer: *s_CXIdxContainerInfo; lexicalContainer: *s_CXIdxContainerInfo; isRedeclaration: int; isDefinition: int; isContainer: int; declAsContainer: *s_CXIdxContainerInfo; isImplicit: int; attributes: **s_CXIdxAttrInfo; numAttributes: uint; flags: uint; }
export type e_CXIdxObjCContainerKind = enum { CXIdxObjCContainer_ForwardRef; CXIdxObjCContainer_Interface = 1; CXIdxObjCContainer_Implementation = 2; }
export type s_CXIdxObjCContainerDeclInfo = struct { declInfo: *s_CXIdxDeclInfo; kind: e_CXIdxObjCContainerKind; }
export type s_CXIdxBaseClassInfo = struct { base: *s_CXIdxEntityInfo; cursor: s_CXCursor; loc: s_CXIdxLoc; }
export type s_CXIdxObjCProtocolRefInfo = struct { protocol: *s_CXIdxEntityInfo; cursor: s_CXCursor; loc: s_CXIdxLoc; }
export type s_CXIdxObjCProtocolRefListInfo = struct { protocols: **s_CXIdxObjCProtocolRefInfo; numProtocols: uint; }
export type s_CXIdxObjCInterfaceDeclInfo = struct { containerInfo: *s_CXIdxObjCContainerDeclInfo; superInfo: *s_CXIdxBaseClassInfo; protocols: *s_CXIdxObjCProtocolRefListInfo; }
export type s_CXIdxObjCCategoryDeclInfo = struct { containerInfo: *s_CXIdxObjCContainerDeclInfo; objcClass: *s_CXIdxEntityInfo; classCursor: s_CXCursor; classLoc: s_CXIdxLoc; protocols: *s_CXIdxObjCProtocolRefListInfo; }
export type s_CXIdxObjCPropertyDeclInfo = struct { declInfo: *s_CXIdxDeclInfo; getter: *s_CXIdxEntityInfo; setter: *s_CXIdxEntityInfo; }
export type s_CXIdxCXXClassDeclInfo = struct { declInfo: *s_CXIdxDeclInfo; bases: **s_CXIdxBaseClassInfo; numBases: uint; }
export type e_CXIdxEntityRefKind = enum { CXIdxEntityRef_Direct = 1; CXIdxEntityRef_Implicit = 2; }
export type e_CXSymbolRole = enum { CXSymbolRole_None; CXSymbolRole_Declaration = 1; CXSymbolRole_Definition = 2; CXSymbolRole_Reference = 4; CXSymbolRole_Read = 8; CXSymbolRole_Write = 16; CXSymbolRole_Call = 32; CXSymbolRole_Dynamic = 64; CXSymbolRole_AddressOf = 128; CXSymbolRole_Implicit = 256; }
export type s_CXIdxEntityRefInfo = struct { kind: e_CXIdxEntityRefKind; cursor: s_CXCursor; loc: s_CXIdxLoc; referencedEntity: *s_CXIdxEntityInfo; parentEntity: *s_CXIdxEntityInfo; container: *s_CXIdxContainerInfo; role: e_CXSymbolRole; }
export type s_IndexerCallbacks = struct { abortQuery: def (*, *) -> (int); diagnostic: def (*, *, *) -> (); enteredMainFile: def (*, *, *) -> (*); ppIncludedFile: def (*, *s_CXIdxIncludedFileInfo) -> (*); importedASTFile: def (*, *s_CXIdxImportedASTFileInfo) -> (*); startedTranslationUnit: def (*, *) -> (*); indexDeclaration: def (*, *s_CXIdxDeclInfo) -> (); indexEntityReference: def (*, *s_CXIdxEntityRefInfo) -> (); }
export type e_CXIndexOptFlags = enum { CXIndexOpt_None; CXIndexOpt_SuppressRedundantRefs = 1; CXIndexOpt_IndexFunctionLocalSymbols = 2; CXIndexOpt_IndexImplicitTemplateInstantiations = 4; CXIndexOpt_SuppressWarnings = 8; CXIndexOpt_SkipParsedBodiesInSession = 16; }
export type s_tm = struct { tm_sec: int; tm_min: int; tm_hour: int; tm_mday: int; tm_mon: int; tm_year: int; tm_wday: int; tm_yday: int; tm_isdst: int; tm_gmtoff: long; tm_zone: *char; }
export type s_timespec = struct { tv_sec: long; tv_nsec: long; }
export type s_itimerspec = struct { it_interval: s_timespec; it_value: s_timespec; }
export type s_sigevent
export type s___locale_data
export type s___locale_struct = struct { __locales: [13; *s___locale_data]; __ctype_b: *ushort; __ctype_tolower: *int; __ctype_toupper: *int; __names: [13; *char]; }
export type e_CXErrorCode = enum { CXError_Success; CXError_Failure = 1; CXError_Crashed = 2; CXError_InvalidArguments = 3; CXError_ASTReadError = 4; }
export type s_CXVirtualFileOverlayImpl
export type s_CXModuleMapDescriptorImpl
export type s_CXTargetInfoImpl
export type s_CXTranslationUnitImpl
export type s_CXUnsavedFile = struct { Filename: *char; Contents: *char; Length: ulong; }
export type e_CXAvailabilityKind = enum { CXAvailability_Available; CXAvailability_Deprecated = 1; CXAvailability_NotAvailable = 2; CXAvailability_NotAccessible = 3; }
export type e_CXCursor_ExceptionSpecificationKind = enum { CXCursor_ExceptionSpecificationKind_None; CXCursor_ExceptionSpecificationKind_DynamicNone = 1; CXCursor_ExceptionSpecificationKind_Dynamic = 2; CXCursor_ExceptionSpecificationKind_MSAny = 3; CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4; CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5; CXCursor_ExceptionSpecificationKind_Unevaluated = 6; CXCursor_ExceptionSpecificationKind_Uninstantiated = 7; CXCursor_ExceptionSpecificationKind_Unparsed = 8; CXCursor_ExceptionSpecificationKind_NoThrow = 9; }
export type e_CXDiagnosticSeverity = enum { CXDiagnostic_Ignored; CXDiagnostic_Note = 1; CXDiagnostic_Warning = 2; CXDiagnostic_Error = 3; CXDiagnostic_Fatal = 4; }
export type e_CXLoadDiag_Error = enum { CXLoadDiag_None; CXLoadDiag_Unknown = 1; CXLoadDiag_CannotLoad = 2; CXLoadDiag_InvalidFile = 3; }
export type e_CXDiagnosticDisplayOptions = enum { CXDiagnostic_DisplaySourceLocation = 1; CXDiagnostic_DisplayColumn = 2; CXDiagnostic_DisplaySourceRanges = 4; CXDiagnostic_DisplayOption = 8; CXDiagnostic_DisplayCategoryId = 16; CXDiagnostic_DisplayCategoryName = 32; }
export type e_CXTranslationUnit_Flags = enum { CXTranslationUnit_None; CXTranslationUnit_DetailedPreprocessingRecord = 1; CXTranslationUnit_Incomplete = 2; CXTranslationUnit_PrecompiledPreamble = 4; CXTranslationUnit_CacheCompletionResults = 8; CXTranslationUnit_ForSerialization = 16; CXTranslationUnit_CXXChainedPCH = 32; CXTranslationUnit_SkipFunctionBodies = 64; CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128; CXTranslationUnit_CreatePreambleOnFirstParse = 256; CXTranslationUnit_KeepGoing = 512; CXTranslationUnit_SingleFileParse = 1024; CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048; CXTranslationUnit_IncludeAttributedTypes = 4096; CXTranslationUnit_VisitImplicitAttributes = 8192; CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384; CXTranslationUnit_RetainExcludedConditionalBlocks = 32768; }
export type e_CXSaveTranslationUnit_Flags = enum { CXSaveTranslationUnit_None; }
export type e_CXSaveError = enum { CXSaveError_None; CXSaveError_Unknown = 1; CXSaveError_TranslationErrors = 2; CXSaveError_InvalidTU = 3; }
export type e_CXReparse_Flags = enum { CXReparse_None; }
export type e_CXLinkageKind = enum { CXLinkage_Invalid; CXLinkage_NoLinkage = 1; CXLinkage_Internal = 2; CXLinkage_UniqueExternal = 3; CXLinkage_External = 4; }
export type e_CXVisibilityKind = enum { CXVisibility_Invalid; CXVisibility_Hidden = 1; CXVisibility_Protected = 2; CXVisibility_Default = 3; }
export type e_CXLanguageKind = enum { CXLanguage_Invalid; CXLanguage_C = 1; CXLanguage_ObjC = 2; CXLanguage_CPlusPlus = 3; }
export type e_CXTLSKind = enum { CXTLS_None; CXTLS_Dynamic = 1; CXTLS_Static = 2; }
export type s_CXCursorSetImpl
export type e_CXCallingConv = enum { CXCallingConv_Default; CXCallingConv_C = 1; CXCallingConv_X86StdCall = 2; CXCallingConv_X86FastCall = 3; CXCallingConv_X86ThisCall = 4; CXCallingConv_X86Pascal = 5; CXCallingConv_AAPCS = 6; CXCallingConv_AAPCS_VFP = 7; CXCallingConv_X86RegCall = 8; CXCallingConv_IntelOclBicc = 9; CXCallingConv_Win64 = 10; CXCallingConv_X86_64Win64 = 10; CXCallingConv_X86_64SysV = 11; CXCallingConv_X86VectorCall = 12; CXCallingConv_Swift = 13; CXCallingConv_PreserveMost = 14; CXCallingConv_PreserveAll = 15; CXCallingConv_AArch64VectorCall = 16; CXCallingConv_SwiftAsync = 17; CXCallingConv_Invalid = 100; CXCallingConv_Unexposed = 200; }
export type e_CXTemplateArgumentKind = enum { CXTemplateArgumentKind_Null; CXTemplateArgumentKind_Type = 1; CXTemplateArgumentKind_Declaration = 2; CXTemplateArgumentKind_NullPtr = 3; CXTemplateArgumentKind_Integral = 4; CXTemplateArgumentKind_Template = 5; CXTemplateArgumentKind_TemplateExpansion = 6; CXTemplateArgumentKind_Expression = 7; CXTemplateArgumentKind_Pack = 8; CXTemplateArgumentKind_Invalid = 9; }
export type e_CXTypeNullabilityKind = enum { CXTypeNullability_NonNull; CXTypeNullability_Nullable = 1; CXTypeNullability_Unspecified = 2; CXTypeNullability_Invalid = 3; CXTypeNullability_NullableResult = 4; }
export type e_CXTypeLayoutError = enum { CXTypeLayoutError_Invalid = -1; CXTypeLayoutError_Incomplete = -2; CXTypeLayoutError_Dependent = -3; CXTypeLayoutError_NotConstantSize = -4; CXTypeLayoutError_InvalidFieldName = -5; CXTypeLayoutError_Undeduced = -6; }
export type e_CXRefQualifierKind = enum { CXRefQualifier_None; CXRefQualifier_LValue = 1; CXRefQualifier_RValue = 2; }
export type e_CX_CXXAccessSpecifier = enum { CX_CXXInvalidAccessSpecifier; CX_CXXPublic = 1; CX_CXXProtected = 2; CX_CXXPrivate = 3; }
export type e_CX_StorageClass = enum { CX_SC_Invalid; CX_SC_None = 1; CX_SC_Extern = 2; CX_SC_Static = 3; CX_SC_PrivateExtern = 4; CX_SC_OpenCLWorkGroupLocal = 5; CX_SC_Auto = 6; CX_SC_Register = 7; }
export type e_CXPrintingPolicyProperty = enum { CXPrintingPolicy_Indentation; CXPrintingPolicy_SuppressSpecifiers = 1; CXPrintingPolicy_SuppressTagKeyword = 2; CXPrintingPolicy_IncludeTagDefinition = 3; CXPrintingPolicy_SuppressScope = 4; CXPrintingPolicy_SuppressUnwrittenScope = 5; CXPrintingPolicy_SuppressInitializers = 6; CXPrintingPolicy_ConstantArraySizeAsWritten = 7; CXPrintingPolicy_AnonymousTagLocations = 8; CXPrintingPolicy_SuppressStrongLifetime = 9; CXPrintingPolicy_SuppressLifetimeQualifiers = 10; CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11; CXPrintingPolicy_Bool = 12; CXPrintingPolicy_Restrict = 13; CXPrintingPolicy_Alignof = 14; CXPrintingPolicy_UnderscoreAlignof = 15; CXPrintingPolicy_UseVoidForZeroParams = 16; CXPrintingPolicy_TerseOutput = 17; CXPrintingPolicy_PolishForDeclaration = 18; CXPrintingPolicy_Half = 19; CXPrintingPolicy_MSWChar = 20; CXPrintingPolicy_IncludeNewlines = 21; CXPrintingPolicy_MSVCFormatting = 22; CXPrintingPolicy_ConstantsAsWritten = 23; CXPrintingPolicy_SuppressImplicitBase = 24; CXPrintingPolicy_FullyQualifiedName = 25; CXPrintingPolicy_LastProperty = 25; }
export type e_CXNameRefFlags = enum { CXNameRange_WantQualifier = 1; CXNameRange_WantTemplateArgs = 2; CXNameRange_WantSinglePiece = 4; }
export type e_CXCompletionChunkKind = enum { CXCompletionChunk_Optional; CXCompletionChunk_TypedText = 1; CXCompletionChunk_Text = 2; CXCompletionChunk_Placeholder = 3; CXCompletionChunk_Informative = 4; CXCompletionChunk_CurrentParameter = 5; CXCompletionChunk_LeftParen = 6; CXCompletionChunk_RightParen = 7; CXCompletionChunk_LeftBracket = 8; CXCompletionChunk_RightBracket = 9; CXCompletionChunk_LeftBrace = 10; CXCompletionChunk_RightBrace = 11; CXCompletionChunk_LeftAngle = 12; CXCompletionChunk_RightAngle = 13; CXCompletionChunk_Comma = 14; CXCompletionChunk_ResultType = 15; CXCompletionChunk_Colon = 16; CXCompletionChunk_SemiColon = 17; CXCompletionChunk_Equal = 18; CXCompletionChunk_HorizontalSpace = 19; CXCompletionChunk_VerticalSpace = 20; }
export type e_CXCodeComplete_Flags = enum { CXCodeComplete_IncludeMacros = 1; CXCodeComplete_IncludeCodePatterns = 2; CXCodeComplete_IncludeBriefComments = 4; CXCodeComplete_SkipPreamble = 8; CXCodeComplete_IncludeCompletionsWithFixIts = 16; }
export type e_CXCompletionContext = enum { CXCompletionContext_Unexposed; CXCompletionContext_AnyType = 1; CXCompletionContext_AnyValue = 2; CXCompletionContext_ObjCObjectValue = 4; CXCompletionContext_ObjCSelectorValue = 8; CXCompletionContext_CXXClassTypeValue = 16; CXCompletionContext_DotMemberAccess = 32; CXCompletionContext_ArrowMemberAccess = 64; CXCompletionContext_ObjCPropertyAccess = 128; CXCompletionContext_EnumTag = 256; CXCompletionContext_UnionTag = 512; CXCompletionContext_StructTag = 1024; CXCompletionContext_ClassTag = 2048; CXCompletionContext_Namespace = 4096; CXCompletionContext_NestedNameSpecifier = 8192; CXCompletionContext_ObjCInterface = 16384; CXCompletionContext_ObjCProtocol = 32768; CXCompletionContext_ObjCCategory = 65536; CXCompletionContext_ObjCInstanceMessage = 131072; CXCompletionContext_ObjCClassMessage = 262144; CXCompletionContext_ObjCSelectorName = 524288; CXCompletionContext_MacroName = 1048576; CXCompletionContext_NaturalLanguage = 2097152; CXCompletionContext_IncludedFile = 4194304; CXCompletionContext_Unknown = 8388607; }
export const __llvm__: int = 1
export const __clang__: int = 1
export const __clang_major__: int = 16
export const __clang_minor__: int = 0
export const __clang_patchlevel__: int = 0
export const __clang_version__: [char] = "16.0.0 "
export const __GNUC__: int = 4
export const __GNUC_MINOR__: int = 2
export const __GNUC_PATCHLEVEL__: int = 1
export const __GXX_ABI_VERSION: int = 1002
export const __ATOMIC_RELAXED: int = 0
export const __ATOMIC_CONSUME: int = 1
export const __ATOMIC_ACQUIRE: int = 2
export const __ATOMIC_RELEASE: int = 3
export const __ATOMIC_ACQ_REL: int = 4
export const __ATOMIC_SEQ_CST: int = 5
export const __OPENCL_MEMORY_SCOPE_WORK_ITEM: int = 0
export const __OPENCL_MEMORY_SCOPE_WORK_GROUP: int = 1
export const __OPENCL_MEMORY_SCOPE_DEVICE: int = 2
export const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: int = 3
export const __OPENCL_MEMORY_SCOPE_SUB_GROUP: int = 4
export const __PRAGMA_REDEFINE_EXTNAME: int = 1
export const __VERSION__: [char] = "Clang 16.0.0"
export const __OBJC_BOOL_IS_BOOL: int = 0
export const __CONSTANT_CFSTRINGS__: int = 1
export const __clang_literal_encoding__: [char] = "UTF-8"
export const __clang_wide_literal_encoding__: [char] = "UTF-32"
export const __ORDER_LITTLE_ENDIAN__: int = 1234
export const __ORDER_BIG_ENDIAN__: int = 4321
export const __ORDER_PDP_ENDIAN__: int = 3412
export const __LITTLE_ENDIAN__: int = 1
export const _LP64: int = 1
export const __LP64__: int = 1
export const __CHAR_BIT__: int = 8
export const __BOOL_WIDTH__: int = 8
export const __SHRT_WIDTH__: int = 16
export const __INT_WIDTH__: int = 32
export const __LONG_WIDTH__: int = 64
export const __LLONG_WIDTH__: int = 64
export const __BITINT_MAXWIDTH__: int = 8388608
export const __SCHAR_MAX__: int = 127
export const __SHRT_MAX__: int = 32767
export const __INT_MAX__: int = 2147483647
export const __WCHAR_MAX__: int = 2147483647
export const __WCHAR_WIDTH__: int = 32
export const __WINT_WIDTH__: int = 32
export const __INTMAX_WIDTH__: int = 64
export const __SIZE_WIDTH__: int = 64
export const __UINTMAX_WIDTH__: int = 64
export const __PTRDIFF_WIDTH__: int = 64
export const __INTPTR_WIDTH__: int = 64
export const __UINTPTR_WIDTH__: int = 64
export const __SIZEOF_DOUBLE__: int = 8
export const __SIZEOF_FLOAT__: int = 4
export const __SIZEOF_INT__: int = 4
export const __SIZEOF_LONG__: int = 8
export const __SIZEOF_LONG_DOUBLE__: int = 16
export const __SIZEOF_LONG_LONG__: int = 8
export const __SIZEOF_POINTER__: int = 8
export const __SIZEOF_SHORT__: int = 2
export const __SIZEOF_PTRDIFF_T__: int = 8
export const __SIZEOF_SIZE_T__: int = 8
export const __SIZEOF_WCHAR_T__: int = 4
export const __SIZEOF_WINT_T__: int = 4
export const __SIZEOF_INT128__: int = 16
export const __INTMAX_FMTd__: [char] = "ld"
export const __INTMAX_FMTi__: [char] = "li"
export const __UINTMAX_FMTo__: [char] = "lo"
export const __UINTMAX_FMTu__: [char] = "lu"
export const __UINTMAX_FMTx__: [char] = "lx"
export const __UINTMAX_FMTX__: [char] = "lX"
export const __PTRDIFF_FMTd__: [char] = "ld"
export const __PTRDIFF_FMTi__: [char] = "li"
export const __INTPTR_FMTd__: [char] = "ld"
export const __INTPTR_FMTi__: [char] = "li"
export const __SIZE_FMTo__: [char] = "lo"
export const __SIZE_FMTu__: [char] = "lu"
export const __SIZE_FMTx__: [char] = "lx"
export const __SIZE_FMTX__: [char] = "lX"
export const __SIG_ATOMIC_MAX__: int = 2147483647
export const __SIG_ATOMIC_WIDTH__: int = 32
export const __UINTPTR_FMTo__: [char] = "lo"
export const __UINTPTR_FMTu__: [char] = "lu"
export const __UINTPTR_FMTx__: [char] = "lx"
export const __UINTPTR_FMTX__: [char] = "lX"
export const __FLT16_HAS_DENORM__: int = 1
export const __FLT16_DIG__: int = 3
export const __FLT16_DECIMAL_DIG__: int = 5
export const __FLT16_HAS_INFINITY__: int = 1
export const __FLT16_HAS_QUIET_NAN__: int = 1
export const __FLT16_MANT_DIG__: int = 11
export const __FLT16_MAX_10_EXP__: int = 4
export const __FLT16_MAX_EXP__: int = 16
export const __FLT_HAS_DENORM__: int = 1
export const __FLT_DIG__: int = 6
export const __FLT_DECIMAL_DIG__: int = 9
export const __FLT_HAS_INFINITY__: int = 1
export const __FLT_HAS_QUIET_NAN__: int = 1
export const __FLT_MANT_DIG__: int = 24
export const __FLT_MAX_10_EXP__: int = 38
export const __FLT_MAX_EXP__: int = 128
export const __DBL_DENORM_MIN__: double = 4.9406564584124654e-324
export const __DBL_HAS_DENORM__: int = 1
export const __DBL_DIG__: int = 15
export const __DBL_DECIMAL_DIG__: int = 17
export const __DBL_EPSILON__: double = 2.2204460492503131e-16
export const __DBL_HAS_INFINITY__: int = 1
export const __DBL_HAS_QUIET_NAN__: int = 1
export const __DBL_MANT_DIG__: int = 53
export const __DBL_MAX_10_EXP__: int = 308
export const __DBL_MAX_EXP__: int = 1024
export const __DBL_MAX__: double = 1.7976931348623157e+308
export const __DBL_MIN__: double = 2.2250738585072014e-308
export const __LDBL_HAS_DENORM__: int = 1
export const __LDBL_DIG__: int = 18
export const __LDBL_DECIMAL_DIG__: int = 21
export const __LDBL_HAS_INFINITY__: int = 1
export const __LDBL_HAS_QUIET_NAN__: int = 1
export const __LDBL_MANT_DIG__: int = 64
export const __LDBL_MAX_10_EXP__: int = 4932
export const __LDBL_MAX_EXP__: int = 16384
export const __POINTER_WIDTH__: int = 64
export const __BIGGEST_ALIGNMENT__: int = 16
export const __WINT_UNSIGNED__: int = 1
export const __INT8_FMTd__: [char] = "hhd"
export const __INT8_FMTi__: [char] = "hhi"
export const __INT16_FMTd__: [char] = "hd"
export const __INT16_FMTi__: [char] = "hi"
export const __INT32_FMTd__: [char] = "d"
export const __INT32_FMTi__: [char] = "i"
export const __INT64_FMTd__: [char] = "ld"
export const __INT64_FMTi__: [char] = "li"
export const __UINT8_FMTo__: [char] = "hho"
export const __UINT8_FMTu__: [char] = "hhu"
export const __UINT8_FMTx__: [char] = "hhx"
export const __UINT8_FMTX__: [char] = "hhX"
export const __UINT8_MAX__: int = 255
export const __INT8_MAX__: int = 127
export const __UINT16_FMTo__: [char] = "ho"
export const __UINT16_FMTu__: [char] = "hu"
export const __UINT16_FMTx__: [char] = "hx"
export const __UINT16_FMTX__: [char] = "hX"
export const __UINT16_MAX__: int = 65535
export const __INT16_MAX__: int = 32767
export const __UINT32_FMTo__: [char] = "o"
export const __UINT32_FMTu__: [char] = "u"
export const __UINT32_FMTx__: [char] = "x"
export const __UINT32_FMTX__: [char] = "X"
export const __INT32_MAX__: int = 2147483647
export const __UINT64_FMTo__: [char] = "lo"
export const __UINT64_FMTu__: [char] = "lu"
export const __UINT64_FMTx__: [char] = "lx"
export const __UINT64_FMTX__: [char] = "lX"
export const __INT_LEAST8_MAX__: int = 127
export const __INT_LEAST8_WIDTH__: int = 8
export const __INT_LEAST8_FMTd__: [char] = "hhd"
export const __INT_LEAST8_FMTi__: [char] = "hhi"
export const __UINT_LEAST8_MAX__: int = 255
export const __UINT_LEAST8_FMTo__: [char] = "hho"
export const __UINT_LEAST8_FMTu__: [char] = "hhu"
export const __UINT_LEAST8_FMTx__: [char] = "hhx"
export const __UINT_LEAST8_FMTX__: [char] = "hhX"
export const __INT_LEAST16_MAX__: int = 32767
export const __INT_LEAST16_WIDTH__: int = 16
export const __INT_LEAST16_FMTd__: [char] = "hd"
export const __INT_LEAST16_FMTi__: [char] = "hi"
export const __UINT_LEAST16_MAX__: int = 65535
export const __UINT_LEAST16_FMTo__: [char] = "ho"
export const __UINT_LEAST16_FMTu__: [char] = "hu"
export const __UINT_LEAST16_FMTx__: [char] = "hx"
export const __UINT_LEAST16_FMTX__: [char] = "hX"
export const __INT_LEAST32_MAX__: int = 2147483647
export const __INT_LEAST32_WIDTH__: int = 32
export const __INT_LEAST32_FMTd__: [char] = "d"
export const __INT_LEAST32_FMTi__: [char] = "i"
export const __UINT_LEAST32_FMTo__: [char] = "o"
export const __UINT_LEAST32_FMTu__: [char] = "u"
export const __UINT_LEAST32_FMTx__: [char] = "x"
export const __UINT_LEAST32_FMTX__: [char] = "X"
export const __INT_LEAST64_WIDTH__: int = 64
export const __INT_LEAST64_FMTd__: [char] = "ld"
export const __INT_LEAST64_FMTi__: [char] = "li"
export const __UINT_LEAST64_FMTo__: [char] = "lo"
export const __UINT_LEAST64_FMTu__: [char] = "lu"
export const __UINT_LEAST64_FMTx__: [char] = "lx"
export const __UINT_LEAST64_FMTX__: [char] = "lX"
export const __INT_FAST8_MAX__: int = 127
export const __INT_FAST8_WIDTH__: int = 8
export const __INT_FAST8_FMTd__: [char] = "hhd"
export const __INT_FAST8_FMTi__: [char] = "hhi"
export const __UINT_FAST8_MAX__: int = 255
export const __UINT_FAST8_FMTo__: [char] = "hho"
export const __UINT_FAST8_FMTu__: [char] = "hhu"
export const __UINT_FAST8_FMTx__: [char] = "hhx"
export const __UINT_FAST8_FMTX__: [char] = "hhX"
export const __INT_FAST16_MAX__: int = 32767
export const __INT_FAST16_WIDTH__: int = 16
export const __INT_FAST16_FMTd__: [char] = "hd"
export const __INT_FAST16_FMTi__: [char] = "hi"
export const __UINT_FAST16_MAX__: int = 65535
export const __UINT_FAST16_FMTo__: [char] = "ho"
export const __UINT_FAST16_FMTu__: [char] = "hu"
export const __UINT_FAST16_FMTx__: [char] = "hx"
export const __UINT_FAST16_FMTX__: [char] = "hX"
export const __INT_FAST32_MAX__: int = 2147483647
export const __INT_FAST32_WIDTH__: int = 32
export const __INT_FAST32_FMTd__: [char] = "d"
export const __INT_FAST32_FMTi__: [char] = "i"
export const __UINT_FAST32_FMTo__: [char] = "o"
export const __UINT_FAST32_FMTu__: [char] = "u"
export const __UINT_FAST32_FMTx__: [char] = "x"
export const __UINT_FAST32_FMTX__: [char] = "X"
export const __INT_FAST64_WIDTH__: int = 64
export const __INT_FAST64_FMTd__: [char] = "ld"
export const __INT_FAST64_FMTi__: [char] = "li"
export const __UINT_FAST64_FMTo__: [char] = "lo"
export const __UINT_FAST64_FMTu__: [char] = "lu"
export const __UINT_FAST64_FMTx__: [char] = "lx"
export const __UINT_FAST64_FMTX__: [char] = "lX"
export const __FINITE_MATH_ONLY__: int = 0
export const __GNUC_STDC_INLINE__: int = 1
export const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: int = 1
export const __CLANG_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_INT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __GCC_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __GCC_ATOMIC_INT_LOCK_FREE: int = 2
export const __GCC_ATOMIC_LONG_LOCK_FREE: int = 2
export const __GCC_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __GCC_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __NO_INLINE__: int = 1
export const __PIC__: int = 2
export const __pic__: int = 2
export const __PIE__: int = 2
export const __pie__: int = 2
export const __FLT_RADIX__: int = 2
export const __GCC_ASM_FLAG_OUTPUTS__: int = 1
export const __code_model_small__: int = 1
export const __amd64__: int = 1
export const __amd64: int = 1
export const __x86_64: int = 1
export const __x86_64__: int = 1
export const __SEG_GS: int = 1
export const __SEG_FS: int = 1
export const __k8: int = 1
export const __k8__: int = 1
export const __tune_k8__: int = 1
export const __NO_MATH_INLINES: int = 1
export const __FXSR__: int = 1
export const __SSE2__: int = 1
export const __SSE2_MATH__: int = 1
export const __SSE__: int = 1
export const __SSE_MATH__: int = 1
export const __MMX__: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: int = 1
export const __SIZEOF_FLOAT128__: int = 16
export const unix: int = 1
export const __unix: int = 1
export const __unix__: int = 1
export const linux: int = 1
export const __linux: int = 1
export const __linux__: int = 1
export const __ELF__: int = 1
export const __gnu_linux__: int = 1
export const __FLOAT128__: int = 1
export const __STDC__: int = 1
export const __STDC_HOSTED__: int = 1
export const __STDC_UTF_16__: int = 1
export const __STDC_UTF_32__: int = 1
export const __GCC_HAVE_DWARF2_CFI_ASM: int = 1
export const _TIME_H: int = 1
export const _FEATURES_H: int = 1
export const _DEFAULT_SOURCE: int = 1
export const __GLIBC_USE_ISOC2X: int = 0
export const __USE_ISOC11: int = 1
export const __USE_ISOC99: int = 1
export const __USE_ISOC95: int = 1
export const __USE_POSIX_IMPLICITLY: int = 1
export const _POSIX_SOURCE: int = 1
export const __USE_POSIX: int = 1
export const __USE_POSIX2: int = 1
export const __USE_POSIX199309: int = 1
export const __USE_POSIX199506: int = 1
export const __USE_XOPEN2K: int = 1
export const __USE_XOPEN2K8: int = 1
export const _ATFILE_SOURCE: int = 1
export const __USE_MISC: int = 1
export const __USE_ATFILE: int = 1
export const __USE_FORTIFY_LEVEL: int = 0
export const __GLIBC_USE_DEPRECATED_GETS: int = 0
export const __GLIBC_USE_DEPRECATED_SCANF: int = 0
export const _STDC_PREDEF_H: int = 1
export const __STDC_IEC_559__: int = 1
export const __STDC_IEC_559_COMPLEX__: int = 1
export const __GNU_LIBRARY__: int = 6
export const __GLIBC__: int = 2
export const __GLIBC_MINOR__: int = 31
export const _SYS_CDEFS_H: int = 1
export const __glibc_c99_flexarr_available: int = 1
export const __WORDSIZE: int = 64
export const __WORDSIZE_TIME64_COMPAT32: int = 1
export const __SYSCALL_WORDSIZE: int = 64
export const __LONG_DOUBLE_USES_FLOAT128: int = 0
export const __HAVE_GENERIC_SELECTION: int = 1
export const _BITS_TIME_H: int = 1
export const _BITS_TYPES_H: int = 1
export const _BITS_TYPESIZES_H: int = 1
export const __OFF_T_MATCHES_OFF64_T: int = 1
export const __INO_T_MATCHES_INO64_T: int = 1
export const __RLIM_T_MATCHES_RLIM64_T: int = 1
export const __STATFS_MATCHES_STATFS64: int = 1
export const __FD_SETSIZE: int = 1024
export const _BITS_TIME64_H: int = 1
export const CLOCK_REALTIME: int = 0
export const CLOCK_MONOTONIC: int = 1
export const CLOCK_PROCESS_CPUTIME_ID: int = 2
export const CLOCK_THREAD_CPUTIME_ID: int = 3
export const CLOCK_MONOTONIC_RAW: int = 4
export const CLOCK_REALTIME_COARSE: int = 5
export const CLOCK_MONOTONIC_COARSE: int = 6
export const CLOCK_BOOTTIME: int = 7
export const CLOCK_REALTIME_ALARM: int = 8
export const CLOCK_BOOTTIME_ALARM: int = 9
export const CLOCK_TAI: int = 11
export const TIMER_ABSTIME: int = 1
export const __clock_t_defined: int = 1
export const __time_t_defined: int = 1
export const __struct_tm_defined: int = 1
export const _STRUCT_TIMESPEC: int = 1
export const _BITS_ENDIAN_H: int = 1
export const __LITTLE_ENDIAN: int = 1234
export const __BIG_ENDIAN: int = 4321
export const __PDP_ENDIAN: int = 3412
export const _BITS_ENDIANNESS_H: int = 1
export const __clockid_t_defined: int = 1
export const __timer_t_defined: int = 1
export const __itimerspec_defined: int = 1
export const _BITS_TYPES_LOCALE_T_H: int = 1
export const _BITS_TYPES___LOCALE_T_H: int = 1
export const TIME_UTC: int = 1
export const CINDEX_VERSION_MAJOR: int = 0
export const CINDEX_VERSION_MINOR: int = 62
export import def #extern clock() -> long
export import def #extern time(__timer: *long) -> long
export import def #extern difftime(__time1: long, __time0: long) -> double
export import def #extern mktime(__tp: *s_tm) -> long
export import def #extern strftime(__s: *char, __maxsize: ulong, __format: *char, __tp: *s_tm) -> ulong
export import def #extern strftime_l(__s: *char, __maxsize: ulong, __format: *char, __tp: *s_tm, __loc: *s___locale_struct) -> ulong
export import def #extern gmtime(__timer: *long) -> *s_tm
export import def #extern localtime(__timer: *long) -> *s_tm
export import def #extern gmtime_r(__timer: *long, __tp: *s_tm) -> *s_tm
export import def #extern localtime_r(__timer: *long, __tp: *s_tm) -> *s_tm
export import def #extern asctime(__tp: *s_tm) -> *char
export import def #extern ctime(__timer: *long) -> *char
export import def #extern asctime_r(__tp: *s_tm, __buf: *char) -> *char
export import def #extern ctime_r(__timer: *long, __buf: *char) -> *char
export import var #extern __tzname: **char
export import var #extern __daylight: int
export import var #extern __timezone: long
export import var #extern tzname: **char
export import def #extern tzset()
export import var #extern daylight: int
export import var #extern timezone: long
export import def #extern timegm(__tp: *s_tm) -> long
export import def #extern timelocal(__tp: *s_tm) -> long
export import def #extern dysize(__year: int) -> int
export import def #extern nanosleep(__requested_time: *s_timespec, __remaining: *s_timespec) -> int
export import def #extern clock_getres(__clock_id: int, __res: *s_timespec) -> int
export import def #extern clock_gettime(__clock_id: int, __tp: *s_timespec) -> int
export import def #extern clock_settime(__clock_id: int, __tp: *s_timespec) -> int
export import def #extern clock_nanosleep(__clock_id: int, __flags: int, __req: *s_timespec, __rem: *s_timespec) -> int
export import def #extern clock_getcpuclockid(__pid: int, __clock_id: *int) -> int
export import def #extern timer_create(__clock_id: int, __evp: *s_sigevent, __timerid: **) -> int
export import def #extern timer_delete(__timerid: *) -> int
export import def #extern timer_settime(__timerid: *, __flags: int, __value: *s_itimerspec, __ovalue: *s_itimerspec) -> int
export import def #extern timer_gettime(__timerid: *, __value: *s_itimerspec) -> int
export import def #extern timer_getoverrun(__timerid: *) -> int
export import def #extern timespec_get(__ts: *s_timespec, __base: int) -> int
export const CXError_Success: int = 0
export const CXError_Failure: int = 1
export const CXError_Crashed: int = 2
export const CXError_InvalidArguments: int = 3
export const CXError_ASTReadError: int = 4
export import def #extern clang_getCString(string: s_CXString) -> *char
export import def #extern clang_disposeString(string: s_CXString)
export import def #extern clang_disposeStringSet(set: *s_CXStringSet)
export import def #extern clang_getBuildSessionTimestamp() -> uint64
export import def #extern clang_VirtualFileOverlay_create(options: uint) -> *s_CXVirtualFileOverlayImpl
export import def #extern clang_VirtualFileOverlay_addFileMapping(_0: *s_CXVirtualFileOverlayImpl, virtualPath: *char, realPath: *char) -> e_CXErrorCode
export import def #extern clang_VirtualFileOverlay_setCaseSensitivity(_0: *s_CXVirtualFileOverlayImpl, caseSensitive: int) -> e_CXErrorCode
export import def #extern clang_VirtualFileOverlay_writeToBuffer(_0: *s_CXVirtualFileOverlayImpl, options: uint, out_buffer_ptr: **char, out_buffer_size: *uint) -> e_CXErrorCode
export import def #extern clang_free(buffer: *)
export import def #extern clang_VirtualFileOverlay_dispose(_0: *s_CXVirtualFileOverlayImpl)
export import def #extern clang_ModuleMapDescriptor_create(options: uint) -> *s_CXModuleMapDescriptorImpl
export import def #extern clang_ModuleMapDescriptor_setFrameworkModuleName(_0: *s_CXModuleMapDescriptorImpl, name: *char) -> e_CXErrorCode
export import def #extern clang_ModuleMapDescriptor_setUmbrellaHeader(_0: *s_CXModuleMapDescriptorImpl, name: *char) -> e_CXErrorCode
export import def #extern clang_ModuleMapDescriptor_writeToBuffer(_0: *s_CXModuleMapDescriptorImpl, options: uint, out_buffer_ptr: **char, out_buffer_size: *uint) -> e_CXErrorCode
export import def #extern clang_ModuleMapDescriptor_dispose(_0: *s_CXModuleMapDescriptorImpl)
export const CXAvailability_Available: int = 0
export const CXAvailability_Deprecated: int = 1
export const CXAvailability_NotAvailable: int = 2
export const CXAvailability_NotAccessible: int = 3
export const CXCursor_ExceptionSpecificationKind_None: int = 0
export const CXCursor_ExceptionSpecificationKind_DynamicNone: int = 1
export const CXCursor_ExceptionSpecificationKind_Dynamic: int = 2
export const CXCursor_ExceptionSpecificationKind_MSAny: int = 3
export const CXCursor_ExceptionSpecificationKind_BasicNoexcept: int = 4
export const CXCursor_ExceptionSpecificationKind_ComputedNoexcept: int = 5
export const CXCursor_ExceptionSpecificationKind_Unevaluated: int = 6
export const CXCursor_ExceptionSpecificationKind_Uninstantiated: int = 7
export const CXCursor_ExceptionSpecificationKind_Unparsed: int = 8
export const CXCursor_ExceptionSpecificationKind_NoThrow: int = 9
export import def #extern clang_createIndex(excludeDeclarationsFromPCH: int, displayDiagnostics: int) -> *
export import def #extern clang_disposeIndex(index: *)
export const CXGlobalOpt_None: int = 0
export const CXGlobalOpt_ThreadBackgroundPriorityForIndexing: int = 1
export const CXGlobalOpt_ThreadBackgroundPriorityForEditing: int = 2
export const CXGlobalOpt_ThreadBackgroundPriorityForAll: int = 3
export import def #extern clang_CXIndex_setGlobalOptions(_0: *, options: uint)
export import def #extern clang_CXIndex_getGlobalOptions(_0: *) -> uint
export import def #extern clang_CXIndex_setInvocationEmissionPathOption(_0: *, Path: *char)
export import def #extern clang_getFileName(SFile: *) -> s_CXString
export import def #extern clang_getFileTime(SFile: *) -> long
export import def #extern clang_getFileUniqueID(file: *, outID: *s_CXFileUniqueID) -> int
export import def #extern clang_isFileMultipleIncludeGuarded(tu: *s_CXTranslationUnitImpl, file: *) -> uint
export import def #extern clang_getFile(tu: *s_CXTranslationUnitImpl, file_name: *char) -> *
export import def #extern clang_getFileContents(tu: *s_CXTranslationUnitImpl, file: *, size: *int) -> *char
export import def #extern clang_File_isEqual(file1: *, file2: *) -> int
export import def #extern clang_File_tryGetRealPathName(file: *) -> s_CXString
export import def #extern clang_getNullLocation() -> s_CXSourceLocation
export import def #extern clang_equalLocations(loc1: s_CXSourceLocation, loc2: s_CXSourceLocation) -> uint
export import def #extern clang_getLocation(tu: *s_CXTranslationUnitImpl, file: *, line: uint, column: uint) -> s_CXSourceLocation
export import def #extern clang_getLocationForOffset(tu: *s_CXTranslationUnitImpl, file: *, offset: uint) -> s_CXSourceLocation
export import def #extern clang_Location_isInSystemHeader(location: s_CXSourceLocation) -> int
export import def #extern clang_Location_isFromMainFile(location: s_CXSourceLocation) -> int
export import def #extern clang_getNullRange() -> s_CXSourceRange
export import def #extern clang_getRange(begin: s_CXSourceLocation, end: s_CXSourceLocation) -> s_CXSourceRange
export import def #extern clang_equalRanges(range1: s_CXSourceRange, range2: s_CXSourceRange) -> uint
export import def #extern clang_Range_isNull(range: s_CXSourceRange) -> int
export import def #extern clang_getExpansionLocation(location: s_CXSourceLocation, file: **, line: *uint, column: *uint, offset: *uint)
export import def #extern clang_getPresumedLocation(location: s_CXSourceLocation, filename: *s_CXString, line: *uint, column: *uint)
export import def #extern clang_getInstantiationLocation(location: s_CXSourceLocation, file: **, line: *uint, column: *uint, offset: *uint)
export import def #extern clang_getSpellingLocation(location: s_CXSourceLocation, file: **, line: *uint, column: *uint, offset: *uint)
export import def #extern clang_getFileLocation(location: s_CXSourceLocation, file: **, line: *uint, column: *uint, offset: *uint)
export import def #extern clang_getRangeStart(range: s_CXSourceRange) -> s_CXSourceLocation
export import def #extern clang_getRangeEnd(range: s_CXSourceRange) -> s_CXSourceLocation
export import def #extern clang_getSkippedRanges(tu: *s_CXTranslationUnitImpl, file: *) -> *s_CXSourceRangeList
export import def #extern clang_getAllSkippedRanges(tu: *s_CXTranslationUnitImpl) -> *s_CXSourceRangeList
export import def #extern clang_disposeSourceRangeList(ranges: *s_CXSourceRangeList)
export const CXDiagnostic_Ignored: int = 0
export const CXDiagnostic_Note: int = 1
export const CXDiagnostic_Warning: int = 2
export const CXDiagnostic_Error: int = 3
export const CXDiagnostic_Fatal: int = 4
export import def #extern clang_getNumDiagnosticsInSet(Diags: *) -> uint
export import def #extern clang_getDiagnosticInSet(Diags: *, Index: uint) -> *
export const CXLoadDiag_None: int = 0
export const CXLoadDiag_Unknown: int = 1
export const CXLoadDiag_CannotLoad: int = 2
export const CXLoadDiag_InvalidFile: int = 3
export import def #extern clang_loadDiagnostics(file: *char, error: *e_CXLoadDiag_Error, errorString: *s_CXString) -> *
export import def #extern clang_disposeDiagnosticSet(Diags: *)
export import def #extern clang_getChildDiagnostics(D: *) -> *
export import def #extern clang_getNumDiagnostics(Unit: *s_CXTranslationUnitImpl) -> uint
export import def #extern clang_getDiagnostic(Unit: *s_CXTranslationUnitImpl, Index: uint) -> *
export import def #extern clang_getDiagnosticSetFromTU(Unit: *s_CXTranslationUnitImpl) -> *
export import def #extern clang_disposeDiagnostic(Diagnostic: *)
export const CXDiagnostic_DisplaySourceLocation: int = 1
export const CXDiagnostic_DisplayColumn: int = 2
export const CXDiagnostic_DisplaySourceRanges: int = 4
export const CXDiagnostic_DisplayOption: int = 8
export const CXDiagnostic_DisplayCategoryId: int = 16
export const CXDiagnostic_DisplayCategoryName: int = 32
export import def #extern clang_formatDiagnostic(Diagnostic: *, Options: uint) -> s_CXString
export import def #extern clang_defaultDiagnosticDisplayOptions() -> uint
export import def #extern clang_getDiagnosticSeverity(_0: *) -> e_CXDiagnosticSeverity
export import def #extern clang_getDiagnosticLocation(_0: *) -> s_CXSourceLocation
export import def #extern clang_getDiagnosticSpelling(_0: *) -> s_CXString
export import def #extern clang_getDiagnosticOption(Diag: *, Disable: *s_CXString) -> s_CXString
export import def #extern clang_getDiagnosticCategory(_0: *) -> uint
export import def #extern clang_getDiagnosticCategoryName(Category: uint) -> s_CXString
export import def #extern clang_getDiagnosticCategoryText(_0: *) -> s_CXString
export import def #extern clang_getDiagnosticNumRanges(_0: *) -> uint
export import def #extern clang_getDiagnosticRange(Diagnostic: *, Range: uint) -> s_CXSourceRange
export import def #extern clang_getDiagnosticNumFixIts(Diagnostic: *) -> uint
export import def #extern clang_getDiagnosticFixIt(Diagnostic: *, FixIt: uint, ReplacementRange: *s_CXSourceRange) -> s_CXString
export import def #extern clang_getTranslationUnitSpelling(CTUnit: *s_CXTranslationUnitImpl) -> s_CXString
export import def #extern clang_createTranslationUnitFromSourceFile(CIdx: *, source_filename: *char, num_clang_command_line_args: int, clang_command_line_args: **char, num_unsaved_files: uint, unsaved_files: *s_CXUnsavedFile) -> *s_CXTranslationUnitImpl
export import def #extern clang_createTranslationUnit(CIdx: *, ast_filename: *char) -> *s_CXTranslationUnitImpl
export import def #extern clang_createTranslationUnit2(CIdx: *, ast_filename: *char, out_TU: **s_CXTranslationUnitImpl) -> e_CXErrorCode
export const CXTranslationUnit_None: int = 0
export const CXTranslationUnit_DetailedPreprocessingRecord: int = 1
export const CXTranslationUnit_Incomplete: int = 2
export const CXTranslationUnit_PrecompiledPreamble: int = 4
export const CXTranslationUnit_CacheCompletionResults: int = 8
export const CXTranslationUnit_ForSerialization: int = 16
export const CXTranslationUnit_CXXChainedPCH: int = 32
export const CXTranslationUnit_SkipFunctionBodies: int = 64
export const CXTranslationUnit_IncludeBriefCommentsInCodeCompletion: int = 128
export const CXTranslationUnit_CreatePreambleOnFirstParse: int = 256
export const CXTranslationUnit_KeepGoing: int = 512
export const CXTranslationUnit_SingleFileParse: int = 1024
export const CXTranslationUnit_LimitSkipFunctionBodiesToPreamble: int = 2048
export const CXTranslationUnit_IncludeAttributedTypes: int = 4096
export const CXTranslationUnit_VisitImplicitAttributes: int = 8192
export const CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles: int = 16384
export const CXTranslationUnit_RetainExcludedConditionalBlocks: int = 32768
export import def #extern clang_defaultEditingTranslationUnitOptions() -> uint
export import def #extern clang_parseTranslationUnit(CIdx: *, source_filename: *char, command_line_args: **char, num_command_line_args: int, unsaved_files: *s_CXUnsavedFile, num_unsaved_files: uint, options: uint) -> *s_CXTranslationUnitImpl
export import def #extern clang_parseTranslationUnit2(CIdx: *, source_filename: *char, command_line_args: **char, num_command_line_args: int, unsaved_files: *s_CXUnsavedFile, num_unsaved_files: uint, options: uint, out_TU: **s_CXTranslationUnitImpl) -> e_CXErrorCode
export import def #extern clang_parseTranslationUnit2FullArgv(CIdx: *, source_filename: *char, command_line_args: **char, num_command_line_args: int, unsaved_files: *s_CXUnsavedFile, num_unsaved_files: uint, options: uint, out_TU: **s_CXTranslationUnitImpl) -> e_CXErrorCode
export const CXSaveTranslationUnit_None: int = 0
export import def #extern clang_defaultSaveOptions(TU: *s_CXTranslationUnitImpl) -> uint
export const CXSaveError_None: int = 0
export const CXSaveError_Unknown: int = 1
export const CXSaveError_TranslationErrors: int = 2
export const CXSaveError_InvalidTU: int = 3
export import def #extern clang_saveTranslationUnit(TU: *s_CXTranslationUnitImpl, FileName: *char, options: uint) -> int
export import def #extern clang_suspendTranslationUnit(_0: *s_CXTranslationUnitImpl) -> uint
export import def #extern clang_disposeTranslationUnit(_0: *s_CXTranslationUnitImpl)
export const CXReparse_None: int = 0
export import def #extern clang_defaultReparseOptions(TU: *s_CXTranslationUnitImpl) -> uint
export import def #extern clang_reparseTranslationUnit(TU: *s_CXTranslationUnitImpl, num_unsaved_files: uint, unsaved_files: *s_CXUnsavedFile, options: uint) -> int
export const CXTUResourceUsage_AST: int = 1
export const CXTUResourceUsage_Identifiers: int = 2
export const CXTUResourceUsage_Selectors: int = 3
export const CXTUResourceUsage_GlobalCompletionResults: int = 4
export const CXTUResourceUsage_SourceManagerContentCache: int = 5
export const CXTUResourceUsage_AST_SideTables: int = 6
export const CXTUResourceUsage_SourceManager_Membuffer_Malloc: int = 7
export const CXTUResourceUsage_SourceManager_Membuffer_MMap: int = 8
export const CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc: int = 9
export const CXTUResourceUsage_ExternalASTSource_Membuffer_MMap: int = 10
export const CXTUResourceUsage_Preprocessor: int = 11
export const CXTUResourceUsage_PreprocessingRecord: int = 12
export const CXTUResourceUsage_SourceManager_DataStructures: int = 13
export const CXTUResourceUsage_Preprocessor_HeaderSearch: int = 14
export const CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN: int = 1
export const CXTUResourceUsage_MEMORY_IN_BYTES_END: int = 14
export const CXTUResourceUsage_First: int = 1
export const CXTUResourceUsage_Last: int = 14
export import def #extern clang_getTUResourceUsageName(kind: e_CXTUResourceUsageKind) -> *char
export import def #extern clang_getCXTUResourceUsage(TU: *s_CXTranslationUnitImpl) -> s_CXTUResourceUsage
export import def #extern clang_disposeCXTUResourceUsage(usage: s_CXTUResourceUsage)
export import def #extern clang_getTranslationUnitTargetInfo(CTUnit: *s_CXTranslationUnitImpl) -> *s_CXTargetInfoImpl
export import def #extern clang_TargetInfo_dispose(Info: *s_CXTargetInfoImpl)
export import def #extern clang_TargetInfo_getTriple(Info: *s_CXTargetInfoImpl) -> s_CXString
export import def #extern clang_TargetInfo_getPointerWidth(Info: *s_CXTargetInfoImpl) -> int
export const CXCursor_UnexposedDecl: int = 1
export const CXCursor_StructDecl: int = 2
export const CXCursor_UnionDecl: int = 3
export const CXCursor_ClassDecl: int = 4
export const CXCursor_EnumDecl: int = 5
export const CXCursor_FieldDecl: int = 6
export const CXCursor_EnumConstantDecl: int = 7
export const CXCursor_FunctionDecl: int = 8
export const CXCursor_VarDecl: int = 9
export const CXCursor_ParmDecl: int = 10
export const CXCursor_ObjCInterfaceDecl: int = 11
export const CXCursor_ObjCCategoryDecl: int = 12
export const CXCursor_ObjCProtocolDecl: int = 13
export const CXCursor_ObjCPropertyDecl: int = 14
export const CXCursor_ObjCIvarDecl: int = 15
export const CXCursor_ObjCInstanceMethodDecl: int = 16
export const CXCursor_ObjCClassMethodDecl: int = 17
export const CXCursor_ObjCImplementationDecl: int = 18
export const CXCursor_ObjCCategoryImplDecl: int = 19
export const CXCursor_TypedefDecl: int = 20
export const CXCursor_CXXMethod: int = 21
export const CXCursor_Namespace: int = 22
export const CXCursor_LinkageSpec: int = 23
export const CXCursor_Constructor: int = 24
export const CXCursor_Destructor: int = 25
export const CXCursor_ConversionFunction: int = 26
export const CXCursor_TemplateTypeParameter: int = 27
export const CXCursor_NonTypeTemplateParameter: int = 28
export const CXCursor_TemplateTemplateParameter: int = 29
export const CXCursor_FunctionTemplate: int = 30
export const CXCursor_ClassTemplate: int = 31
export const CXCursor_ClassTemplatePartialSpecialization: int = 32
export const CXCursor_NamespaceAlias: int = 33
export const CXCursor_UsingDirective: int = 34
export const CXCursor_UsingDeclaration: int = 35
export const CXCursor_TypeAliasDecl: int = 36
export const CXCursor_ObjCSynthesizeDecl: int = 37
export const CXCursor_ObjCDynamicDecl: int = 38
export const CXCursor_CXXAccessSpecifier: int = 39
export const CXCursor_FirstDecl: int = 1
export const CXCursor_LastDecl: int = 39
export const CXCursor_FirstRef: int = 40
export const CXCursor_ObjCSuperClassRef: int = 40
export const CXCursor_ObjCProtocolRef: int = 41
export const CXCursor_ObjCClassRef: int = 42
export const CXCursor_TypeRef: int = 43
export const CXCursor_CXXBaseSpecifier: int = 44
export const CXCursor_TemplateRef: int = 45
export const CXCursor_NamespaceRef: int = 46
export const CXCursor_MemberRef: int = 47
export const CXCursor_LabelRef: int = 48
export const CXCursor_OverloadedDeclRef: int = 49
export const CXCursor_VariableRef: int = 50
export const CXCursor_LastRef: int = 50
export const CXCursor_FirstInvalid: int = 70
export const CXCursor_InvalidFile: int = 70
export const CXCursor_NoDeclFound: int = 71
export const CXCursor_NotImplemented: int = 72
export const CXCursor_InvalidCode: int = 73
export const CXCursor_LastInvalid: int = 73
export const CXCursor_FirstExpr: int = 100
export const CXCursor_UnexposedExpr: int = 100
export const CXCursor_DeclRefExpr: int = 101
export const CXCursor_MemberRefExpr: int = 102
export const CXCursor_CallExpr: int = 103
export const CXCursor_ObjCMessageExpr: int = 104
export const CXCursor_BlockExpr: int = 105
export const CXCursor_IntegerLiteral: int = 106
export const CXCursor_FloatingLiteral: int = 107
export const CXCursor_ImaginaryLiteral: int = 108
export const CXCursor_StringLiteral: int = 109
export const CXCursor_CharacterLiteral: int = 110
export const CXCursor_ParenExpr: int = 111
export const CXCursor_UnaryOperator: int = 112
export const CXCursor_ArraySubscriptExpr: int = 113
export const CXCursor_BinaryOperator: int = 114
export const CXCursor_CompoundAssignOperator: int = 115
export const CXCursor_ConditionalOperator: int = 116
export const CXCursor_CStyleCastExpr: int = 117
export const CXCursor_CompoundLiteralExpr: int = 118
export const CXCursor_InitListExpr: int = 119
export const CXCursor_AddrLabelExpr: int = 120
export const CXCursor_StmtExpr: int = 121
export const CXCursor_GenericSelectionExpr: int = 122
export const CXCursor_GNUNullExpr: int = 123
export const CXCursor_CXXStaticCastExpr: int = 124
export const CXCursor_CXXDynamicCastExpr: int = 125
export const CXCursor_CXXReinterpretCastExpr: int = 126
export const CXCursor_CXXConstCastExpr: int = 127
export const CXCursor_CXXFunctionalCastExpr: int = 128
export const CXCursor_CXXTypeidExpr: int = 129
export const CXCursor_CXXBoolLiteralExpr: int = 130
export const CXCursor_CXXNullPtrLiteralExpr: int = 131
export const CXCursor_CXXThisExpr: int = 132
export const CXCursor_CXXThrowExpr: int = 133
export const CXCursor_CXXNewExpr: int = 134
export const CXCursor_CXXDeleteExpr: int = 135
export const CXCursor_UnaryExpr: int = 136
export const CXCursor_ObjCStringLiteral: int = 137
export const CXCursor_ObjCEncodeExpr: int = 138
export const CXCursor_ObjCSelectorExpr: int = 139
export const CXCursor_ObjCProtocolExpr: int = 140
export const CXCursor_ObjCBridgedCastExpr: int = 141
export const CXCursor_PackExpansionExpr: int = 142
export const CXCursor_SizeOfPackExpr: int = 143
export const CXCursor_LambdaExpr: int = 144
export const CXCursor_ObjCBoolLiteralExpr: int = 145
export const CXCursor_ObjCSelfExpr: int = 146
export const CXCursor_OMPArraySectionExpr: int = 147
export const CXCursor_ObjCAvailabilityCheckExpr: int = 148
export const CXCursor_FixedPointLiteral: int = 149
export const CXCursor_OMPArrayShapingExpr: int = 150
export const CXCursor_OMPIteratorExpr: int = 151
export const CXCursor_CXXAddrspaceCastExpr: int = 152
export const CXCursor_LastExpr: int = 152
export const CXCursor_FirstStmt: int = 200
export const CXCursor_UnexposedStmt: int = 200
export const CXCursor_LabelStmt: int = 201
export const CXCursor_CompoundStmt: int = 202
export const CXCursor_CaseStmt: int = 203
export const CXCursor_DefaultStmt: int = 204
export const CXCursor_IfStmt: int = 205
export const CXCursor_SwitchStmt: int = 206
export const CXCursor_WhileStmt: int = 207
export const CXCursor_DoStmt: int = 208
export const CXCursor_ForStmt: int = 209
export const CXCursor_GotoStmt: int = 210
export const CXCursor_IndirectGotoStmt: int = 211
export const CXCursor_ContinueStmt: int = 212
export const CXCursor_BreakStmt: int = 213
export const CXCursor_ReturnStmt: int = 214
export const CXCursor_GCCAsmStmt: int = 215
export const CXCursor_AsmStmt: int = 215
export const CXCursor_ObjCAtTryStmt: int = 216
export const CXCursor_ObjCAtCatchStmt: int = 217
export const CXCursor_ObjCAtFinallyStmt: int = 218
export const CXCursor_ObjCAtThrowStmt: int = 219
export const CXCursor_ObjCAtSynchronizedStmt: int = 220
export const CXCursor_ObjCAutoreleasePoolStmt: int = 221
export const CXCursor_ObjCForCollectionStmt: int = 222
export const CXCursor_CXXCatchStmt: int = 223
export const CXCursor_CXXTryStmt: int = 224
export const CXCursor_CXXForRangeStmt: int = 225
export const CXCursor_SEHTryStmt: int = 226
export const CXCursor_SEHExceptStmt: int = 227
export const CXCursor_SEHFinallyStmt: int = 228
export const CXCursor_MSAsmStmt: int = 229
export const CXCursor_NullStmt: int = 230
export const CXCursor_DeclStmt: int = 231
export const CXCursor_OMPParallelDirective: int = 232
export const CXCursor_OMPSimdDirective: int = 233
export const CXCursor_OMPForDirective: int = 234
export const CXCursor_OMPSectionsDirective: int = 235
export const CXCursor_OMPSectionDirective: int = 236
export const CXCursor_OMPSingleDirective: int = 237
export const CXCursor_OMPParallelForDirective: int = 238
export const CXCursor_OMPParallelSectionsDirective: int = 239
export const CXCursor_OMPTaskDirective: int = 240
export const CXCursor_OMPMasterDirective: int = 241
export const CXCursor_OMPCriticalDirective: int = 242
export const CXCursor_OMPTaskyieldDirective: int = 243
export const CXCursor_OMPBarrierDirective: int = 244
export const CXCursor_OMPTaskwaitDirective: int = 245
export const CXCursor_OMPFlushDirective: int = 246
export const CXCursor_SEHLeaveStmt: int = 247
export const CXCursor_OMPOrderedDirective: int = 248
export const CXCursor_OMPAtomicDirective: int = 249
export const CXCursor_OMPForSimdDirective: int = 250
export const CXCursor_OMPParallelForSimdDirective: int = 251
export const CXCursor_OMPTargetDirective: int = 252
export const CXCursor_OMPTeamsDirective: int = 253
export const CXCursor_OMPTaskgroupDirective: int = 254
export const CXCursor_OMPCancellationPointDirective: int = 255
export const CXCursor_OMPCancelDirective: int = 256
export const CXCursor_OMPTargetDataDirective: int = 257
export const CXCursor_OMPTaskLoopDirective: int = 258
export const CXCursor_OMPTaskLoopSimdDirective: int = 259
export const CXCursor_OMPDistributeDirective: int = 260
export const CXCursor_OMPTargetEnterDataDirective: int = 261
export const CXCursor_OMPTargetExitDataDirective: int = 262
export const CXCursor_OMPTargetParallelDirective: int = 263
export const CXCursor_OMPTargetParallelForDirective: int = 264
export const CXCursor_OMPTargetUpdateDirective: int = 265
export const CXCursor_OMPDistributeParallelForDirective: int = 266
export const CXCursor_OMPDistributeParallelForSimdDirective: int = 267
export const CXCursor_OMPDistributeSimdDirective: int = 268
export const CXCursor_OMPTargetParallelForSimdDirective: int = 269
export const CXCursor_OMPTargetSimdDirective: int = 270
export const CXCursor_OMPTeamsDistributeDirective: int = 271
export const CXCursor_OMPTeamsDistributeSimdDirective: int = 272
export const CXCursor_OMPTeamsDistributeParallelForSimdDirective: int = 273
export const CXCursor_OMPTeamsDistributeParallelForDirective: int = 274
export const CXCursor_OMPTargetTeamsDirective: int = 275
export const CXCursor_OMPTargetTeamsDistributeDirective: int = 276
export const CXCursor_OMPTargetTeamsDistributeParallelForDirective: int = 277
export const CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective: int = 278
export const CXCursor_OMPTargetTeamsDistributeSimdDirective: int = 279
export const CXCursor_BuiltinBitCastExpr: int = 280
export const CXCursor_OMPMasterTaskLoopDirective: int = 281
export const CXCursor_OMPParallelMasterTaskLoopDirective: int = 282
export const CXCursor_OMPMasterTaskLoopSimdDirective: int = 283
export const CXCursor_OMPParallelMasterTaskLoopSimdDirective: int = 284
export const CXCursor_OMPParallelMasterDirective: int = 285
export const CXCursor_OMPDepobjDirective: int = 286
export const CXCursor_OMPScanDirective: int = 287
export const CXCursor_OMPTileDirective: int = 288
export const CXCursor_OMPCanonicalLoop: int = 289
export const CXCursor_OMPInteropDirective: int = 290
export const CXCursor_OMPDispatchDirective: int = 291
export const CXCursor_OMPMaskedDirective: int = 292
export const CXCursor_OMPUnrollDirective: int = 293
export const CXCursor_LastStmt: int = 293
export const CXCursor_TranslationUnit: int = 300
export const CXCursor_FirstAttr: int = 400
export const CXCursor_UnexposedAttr: int = 400
export const CXCursor_IBActionAttr: int = 401
export const CXCursor_IBOutletAttr: int = 402
export const CXCursor_IBOutletCollectionAttr: int = 403
export const CXCursor_CXXFinalAttr: int = 404
export const CXCursor_CXXOverrideAttr: int = 405
export const CXCursor_AnnotateAttr: int = 406
export const CXCursor_AsmLabelAttr: int = 407
export const CXCursor_PackedAttr: int = 408
export const CXCursor_PureAttr: int = 409
export const CXCursor_ConstAttr: int = 410
export const CXCursor_NoDuplicateAttr: int = 411
export const CXCursor_CUDAConstantAttr: int = 412
export const CXCursor_CUDADeviceAttr: int = 413
export const CXCursor_CUDAGlobalAttr: int = 414
export const CXCursor_CUDAHostAttr: int = 415
export const CXCursor_CUDASharedAttr: int = 416
export const CXCursor_VisibilityAttr: int = 417
export const CXCursor_DLLExport: int = 418
export const CXCursor_DLLImport: int = 419
export const CXCursor_NSReturnsRetained: int = 420
export const CXCursor_NSReturnsNotRetained: int = 421
export const CXCursor_NSReturnsAutoreleased: int = 422
export const CXCursor_NSConsumesSelf: int = 423
export const CXCursor_NSConsumed: int = 424
export const CXCursor_ObjCException: int = 425
export const CXCursor_ObjCNSObject: int = 426
export const CXCursor_ObjCIndependentClass: int = 427
export const CXCursor_ObjCPreciseLifetime: int = 428
export const CXCursor_ObjCReturnsInnerPointer: int = 429
export const CXCursor_ObjCRequiresSuper: int = 430
export const CXCursor_ObjCRootClass: int = 431
export const CXCursor_ObjCSubclassingRestricted: int = 432
export const CXCursor_ObjCExplicitProtocolImpl: int = 433
export const CXCursor_ObjCDesignatedInitializer: int = 434
export const CXCursor_ObjCRuntimeVisible: int = 435
export const CXCursor_ObjCBoxable: int = 436
export const CXCursor_FlagEnum: int = 437
export const CXCursor_ConvergentAttr: int = 438
export const CXCursor_WarnUnusedAttr: int = 439
export const CXCursor_WarnUnusedResultAttr: int = 440
export const CXCursor_AlignedAttr: int = 441
export const CXCursor_LastAttr: int = 441
export const CXCursor_PreprocessingDirective: int = 500
export const CXCursor_MacroDefinition: int = 501
export const CXCursor_MacroExpansion: int = 502
export const CXCursor_MacroInstantiation: int = 502
export const CXCursor_InclusionDirective: int = 503
export const CXCursor_FirstPreprocessing: int = 500
export const CXCursor_LastPreprocessing: int = 503
export const CXCursor_ModuleImportDecl: int = 600
export const CXCursor_TypeAliasTemplateDecl: int = 601
export const CXCursor_StaticAssert: int = 602
export const CXCursor_FriendDecl: int = 603
export const CXCursor_FirstExtraDecl: int = 600
export const CXCursor_LastExtraDecl: int = 603
export const CXCursor_OverloadCandidate: int = 700
export import def #extern clang_getNullCursor() -> s_CXCursor
export import def #extern clang_getTranslationUnitCursor(_0: *s_CXTranslationUnitImpl) -> s_CXCursor
export import def #extern clang_equalCursors(_0: s_CXCursor, _1: s_CXCursor) -> uint
export import def #extern clang_Cursor_isNull(cursor: s_CXCursor) -> int
export import def #extern clang_hashCursor(_0: s_CXCursor) -> uint
export import def #extern clang_getCursorKind(_0: s_CXCursor) -> e_CXCursorKind
export import def #extern clang_isDeclaration(_0: e_CXCursorKind) -> uint
export import def #extern clang_isInvalidDeclaration(_0: s_CXCursor) -> uint
export import def #extern clang_isReference(_0: e_CXCursorKind) -> uint
export import def #extern clang_isExpression(_0: e_CXCursorKind) -> uint
export import def #extern clang_isStatement(_0: e_CXCursorKind) -> uint
export import def #extern clang_isAttribute(_0: e_CXCursorKind) -> uint
export import def #extern clang_Cursor_hasAttrs(C: s_CXCursor) -> uint
export import def #extern clang_isInvalid(_0: e_CXCursorKind) -> uint
export import def #extern clang_isTranslationUnit(_0: e_CXCursorKind) -> uint
export import def #extern clang_isPreprocessing(_0: e_CXCursorKind) -> uint
export import def #extern clang_isUnexposed(_0: e_CXCursorKind) -> uint
export const CXLinkage_Invalid: int = 0
export const CXLinkage_NoLinkage: int = 1
export const CXLinkage_Internal: int = 2
export const CXLinkage_UniqueExternal: int = 3
export const CXLinkage_External: int = 4
export import def #extern clang_getCursorLinkage(cursor: s_CXCursor) -> e_CXLinkageKind
export const CXVisibility_Invalid: int = 0
export const CXVisibility_Hidden: int = 1
export const CXVisibility_Protected: int = 2
export const CXVisibility_Default: int = 3
export import def #extern clang_getCursorVisibility(cursor: s_CXCursor) -> e_CXVisibilityKind
export import def #extern clang_getCursorAvailability(cursor: s_CXCursor) -> e_CXAvailabilityKind
export import def #extern clang_getCursorPlatformAvailability(cursor: s_CXCursor, always_deprecated: *int, deprecated_message: *s_CXString, always_unavailable: *int, unavailable_message: *s_CXString, availability: *s_CXPlatformAvailability, availability_size: int) -> int
export import def #extern clang_disposeCXPlatformAvailability(availability: *s_CXPlatformAvailability)
export import def #extern clang_Cursor_getVarDeclInitializer(cursor: s_CXCursor) -> s_CXCursor
export import def #extern clang_Cursor_hasVarDeclGlobalStorage(cursor: s_CXCursor) -> int
export import def #extern clang_Cursor_hasVarDeclExternalStorage(cursor: s_CXCursor) -> int
export const CXLanguage_Invalid: int = 0
export const CXLanguage_C: int = 1
export const CXLanguage_ObjC: int = 2
export const CXLanguage_CPlusPlus: int = 3
export import def #extern clang_getCursorLanguage(cursor: s_CXCursor) -> e_CXLanguageKind
export const CXTLS_None: int = 0
export const CXTLS_Dynamic: int = 1
export const CXTLS_Static: int = 2
export import def #extern clang_getCursorTLSKind(cursor: s_CXCursor) -> e_CXTLSKind
export import def #extern clang_Cursor_getTranslationUnit(_0: s_CXCursor) -> *s_CXTranslationUnitImpl
export import def #extern clang_createCXCursorSet() -> *s_CXCursorSetImpl
export import def #extern clang_disposeCXCursorSet(cset: *s_CXCursorSetImpl)
export import def #extern clang_CXCursorSet_contains(cset: *s_CXCursorSetImpl, cursor: s_CXCursor) -> uint
export import def #extern clang_CXCursorSet_insert(cset: *s_CXCursorSetImpl, cursor: s_CXCursor) -> uint
export import def #extern clang_getCursorSemanticParent(cursor: s_CXCursor) -> s_CXCursor
export import def #extern clang_getCursorLexicalParent(cursor: s_CXCursor) -> s_CXCursor
export import def #extern clang_getOverriddenCursors(cursor: s_CXCursor, overridden: **s_CXCursor, num_overridden: *uint)
export import def #extern clang_disposeOverriddenCursors(overridden: *s_CXCursor)
export import def #extern clang_getIncludedFile(cursor: s_CXCursor) -> *
export import def #extern clang_getCursor(_0: *s_CXTranslationUnitImpl, _1: s_CXSourceLocation) -> s_CXCursor
export import def #extern clang_getCursorLocation(_0: s_CXCursor) -> s_CXSourceLocation
export import def #extern clang_getCursorExtent(_0: s_CXCursor) -> s_CXSourceRange
export const CXType_Invalid: int = 0
export const CXType_Unexposed: int = 1
export const CXType_Void: int = 2
export const CXType_Bool: int = 3
export const CXType_Char_U: int = 4
export const CXType_UChar: int = 5
export const CXType_Char16: int = 6
export const CXType_Char32: int = 7
export const CXType_UShort: int = 8
export const CXType_UInt: int = 9
export const CXType_ULong: int = 10
export const CXType_ULongLong: int = 11
export const CXType_UInt128: int = 12
export const CXType_Char_S: int = 13
export const CXType_SChar: int = 14
export const CXType_WChar: int = 15
export const CXType_Short: int = 16
export const CXType_Int: int = 17
export const CXType_Long: int = 18
export const CXType_LongLong: int = 19
export const CXType_Int128: int = 20
export const CXType_Float: int = 21
export const CXType_Double: int = 22
export const CXType_LongDouble: int = 23
export const CXType_NullPtr: int = 24
export const CXType_Overload: int = 25
export const CXType_Dependent: int = 26
export const CXType_ObjCId: int = 27
export const CXType_ObjCClass: int = 28
export const CXType_ObjCSel: int = 29
export const CXType_Float128: int = 30
export const CXType_Half: int = 31
export const CXType_Float16: int = 32
export const CXType_ShortAccum: int = 33
export const CXType_Accum: int = 34
export const CXType_LongAccum: int = 35
export const CXType_UShortAccum: int = 36
export const CXType_UAccum: int = 37
export const CXType_ULongAccum: int = 38
export const CXType_BFloat16: int = 39
export const CXType_FirstBuiltin: int = 2
export const CXType_LastBuiltin: int = 39
export const CXType_Complex: int = 100
export const CXType_Pointer: int = 101
export const CXType_BlockPointer: int = 102
export const CXType_LValueReference: int = 103
export const CXType_RValueReference: int = 104
export const CXType_Record: int = 105
export const CXType_Enum: int = 106
export const CXType_Typedef: int = 107
export const CXType_ObjCInterface: int = 108
export const CXType_ObjCObjectPointer: int = 109
export const CXType_FunctionNoProto: int = 110
export const CXType_FunctionProto: int = 111
export const CXType_ConstantArray: int = 112
export const CXType_Vector: int = 113
export const CXType_IncompleteArray: int = 114
export const CXType_VariableArray: int = 115
export const CXType_DependentSizedArray: int = 116
export const CXType_MemberPointer: int = 117
export const CXType_Auto: int = 118
export const CXType_Elaborated: int = 119
export const CXType_Pipe: int = 120
export const CXType_OCLImage1dRO: int = 121
export const CXType_OCLImage1dArrayRO: int = 122
export const CXType_OCLImage1dBufferRO: int = 123
export const CXType_OCLImage2dRO: int = 124
export const CXType_OCLImage2dArrayRO: int = 125
export const CXType_OCLImage2dDepthRO: int = 126
export const CXType_OCLImage2dArrayDepthRO: int = 127
export const CXType_OCLImage2dMSAARO: int = 128
export const CXType_OCLImage2dArrayMSAARO: int = 129
export const CXType_OCLImage2dMSAADepthRO: int = 130
export const CXType_OCLImage2dArrayMSAADepthRO: int = 131
export const CXType_OCLImage3dRO: int = 132
export const CXType_OCLImage1dWO: int = 133
export const CXType_OCLImage1dArrayWO: int = 134
export const CXType_OCLImage1dBufferWO: int = 135
export const CXType_OCLImage2dWO: int = 136
export const CXType_OCLImage2dArrayWO: int = 137
export const CXType_OCLImage2dDepthWO: int = 138
export const CXType_OCLImage2dArrayDepthWO: int = 139
export const CXType_OCLImage2dMSAAWO: int = 140
export const CXType_OCLImage2dArrayMSAAWO: int = 141
export const CXType_OCLImage2dMSAADepthWO: int = 142
export const CXType_OCLImage2dArrayMSAADepthWO: int = 143
export const CXType_OCLImage3dWO: int = 144
export const CXType_OCLImage1dRW: int = 145
export const CXType_OCLImage1dArrayRW: int = 146
export const CXType_OCLImage1dBufferRW: int = 147
export const CXType_OCLImage2dRW: int = 148
export const CXType_OCLImage2dArrayRW: int = 149
export const CXType_OCLImage2dDepthRW: int = 150
export const CXType_OCLImage2dArrayDepthRW: int = 151
export const CXType_OCLImage2dMSAARW: int = 152
export const CXType_OCLImage2dArrayMSAARW: int = 153
export const CXType_OCLImage2dMSAADepthRW: int = 154
export const CXType_OCLImage2dArrayMSAADepthRW: int = 155
export const CXType_OCLImage3dRW: int = 156
export const CXType_OCLSampler: int = 157
export const CXType_OCLEvent: int = 158
export const CXType_OCLQueue: int = 159
export const CXType_OCLReserveID: int = 160
export const CXType_ObjCObject: int = 161
export const CXType_ObjCTypeParam: int = 162
export const CXType_Attributed: int = 163
export const CXType_OCLIntelSubgroupAVCMcePayload: int = 164
export const CXType_OCLIntelSubgroupAVCImePayload: int = 165
export const CXType_OCLIntelSubgroupAVCRefPayload: int = 166
export const CXType_OCLIntelSubgroupAVCSicPayload: int = 167
export const CXType_OCLIntelSubgroupAVCMceResult: int = 168
export const CXType_OCLIntelSubgroupAVCImeResult: int = 169
export const CXType_OCLIntelSubgroupAVCRefResult: int = 170
export const CXType_OCLIntelSubgroupAVCSicResult: int = 171
export const CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout: int = 172
export const CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout: int = 173
export const CXType_OCLIntelSubgroupAVCImeSingleRefStreamin: int = 174
export const CXType_OCLIntelSubgroupAVCImeDualRefStreamin: int = 175
export const CXType_ExtVector: int = 176
export const CXType_Atomic: int = 177
export const CXCallingConv_Default: int = 0
export const CXCallingConv_C: int = 1
export const CXCallingConv_X86StdCall: int = 2
export const CXCallingConv_X86FastCall: int = 3
export const CXCallingConv_X86ThisCall: int = 4
export const CXCallingConv_X86Pascal: int = 5
export const CXCallingConv_AAPCS: int = 6
export const CXCallingConv_AAPCS_VFP: int = 7
export const CXCallingConv_X86RegCall: int = 8
export const CXCallingConv_IntelOclBicc: int = 9
export const CXCallingConv_Win64: int = 10
export const CXCallingConv_X86_64Win64: int = 10
export const CXCallingConv_X86_64SysV: int = 11
export const CXCallingConv_X86VectorCall: int = 12
export const CXCallingConv_Swift: int = 13
export const CXCallingConv_PreserveMost: int = 14
export const CXCallingConv_PreserveAll: int = 15
export const CXCallingConv_AArch64VectorCall: int = 16
export const CXCallingConv_SwiftAsync: int = 17
export const CXCallingConv_Invalid: int = 100
export const CXCallingConv_Unexposed: int = 200
export import def #extern clang_getCursorType(C: s_CXCursor) -> s_CXType
export import def #extern clang_getTypeSpelling(CT: s_CXType) -> s_CXString
export import def #extern clang_getTypedefDeclUnderlyingType(C: s_CXCursor) -> s_CXType
export import def #extern clang_getEnumDeclIntegerType(C: s_CXCursor) -> s_CXType
export import def #extern clang_getEnumConstantDeclValue(C: s_CXCursor) -> int64
export import def #extern clang_getEnumConstantDeclUnsignedValue(C: s_CXCursor) -> uint64
export import def #extern clang_getFieldDeclBitWidth(C: s_CXCursor) -> int
export import def #extern clang_Cursor_getNumArguments(C: s_CXCursor) -> int
export import def #extern clang_Cursor_getArgument(C: s_CXCursor, i: uint) -> s_CXCursor
export const CXTemplateArgumentKind_Null: int = 0
export const CXTemplateArgumentKind_Type: int = 1
export const CXTemplateArgumentKind_Declaration: int = 2
export const CXTemplateArgumentKind_NullPtr: int = 3
export const CXTemplateArgumentKind_Integral: int = 4
export const CXTemplateArgumentKind_Template: int = 5
export const CXTemplateArgumentKind_TemplateExpansion: int = 6
export const CXTemplateArgumentKind_Expression: int = 7
export const CXTemplateArgumentKind_Pack: int = 8
export const CXTemplateArgumentKind_Invalid: int = 9
export import def #extern clang_Cursor_getNumTemplateArguments(C: s_CXCursor) -> int
export import def #extern clang_Cursor_getTemplateArgumentKind(C: s_CXCursor, I: uint) -> e_CXTemplateArgumentKind
export import def #extern clang_Cursor_getTemplateArgumentType(C: s_CXCursor, I: uint) -> s_CXType
export import def #extern clang_Cursor_getTemplateArgumentValue(C: s_CXCursor, I: uint) -> int64
export import def #extern clang_Cursor_getTemplateArgumentUnsignedValue(C: s_CXCursor, I: uint) -> uint64
export import def #extern clang_equalTypes(A: s_CXType, B: s_CXType) -> uint
export import def #extern clang_getCanonicalType(T: s_CXType) -> s_CXType
export import def #extern clang_isConstQualifiedType(T: s_CXType) -> uint
export import def #extern clang_Cursor_isMacroFunctionLike(C: s_CXCursor) -> uint
export import def #extern clang_Cursor_isMacroBuiltin(C: s_CXCursor) -> uint
export import def #extern clang_Cursor_isFunctionInlined(C: s_CXCursor) -> uint
export import def #extern clang_isVolatileQualifiedType(T: s_CXType) -> uint
export import def #extern clang_isRestrictQualifiedType(T: s_CXType) -> uint
export import def #extern clang_getAddressSpace(T: s_CXType) -> uint
export import def #extern clang_getTypedefName(CT: s_CXType) -> s_CXString
export import def #extern clang_getPointeeType(T: s_CXType) -> s_CXType
export import def #extern clang_getTypeDeclaration(T: s_CXType) -> s_CXCursor
export import def #extern clang_getDeclObjCTypeEncoding(C: s_CXCursor) -> s_CXString
export import def #extern clang_Type_getObjCEncoding(type_: s_CXType) -> s_CXString
export import def #extern clang_getTypeKindSpelling(K: e_CXTypeKind) -> s_CXString
export import def #extern clang_getFunctionTypeCallingConv(T: s_CXType) -> e_CXCallingConv
export import def #extern clang_getResultType(T: s_CXType) -> s_CXType
export import def #extern clang_getExceptionSpecificationType(T: s_CXType) -> int
export import def #extern clang_getNumArgTypes(T: s_CXType) -> int
export import def #extern clang_getArgType(T: s_CXType, i: uint) -> s_CXType
export import def #extern clang_Type_getObjCObjectBaseType(T: s_CXType) -> s_CXType
export import def #extern clang_Type_getNumObjCProtocolRefs(T: s_CXType) -> uint
export import def #extern clang_Type_getObjCProtocolDecl(T: s_CXType, i: uint) -> s_CXCursor
export import def #extern clang_Type_getNumObjCTypeArgs(T: s_CXType) -> uint
export import def #extern clang_Type_getObjCTypeArg(T: s_CXType, i: uint) -> s_CXType
export import def #extern clang_isFunctionTypeVariadic(T: s_CXType) -> uint
export import def #extern clang_getCursorResultType(C: s_CXCursor) -> s_CXType
export import def #extern clang_getCursorExceptionSpecificationType(C: s_CXCursor) -> int
export import def #extern clang_isPODType(T: s_CXType) -> uint
export import def #extern clang_getElementType(T: s_CXType) -> s_CXType
export import def #extern clang_getNumElements(T: s_CXType) -> int64
export import def #extern clang_getArrayElementType(T: s_CXType) -> s_CXType
export import def #extern clang_getArraySize(T: s_CXType) -> int64
export import def #extern clang_Type_getNamedType(T: s_CXType) -> s_CXType
export import def #extern clang_Type_isTransparentTagTypedef(T: s_CXType) -> uint
export const CXTypeNullability_NonNull: int = 0
export const CXTypeNullability_Nullable: int = 1
export const CXTypeNullability_Unspecified: int = 2
export const CXTypeNullability_Invalid: int = 3
export const CXTypeNullability_NullableResult: int = 4
export import def #extern clang_Type_getNullability(T: s_CXType) -> e_CXTypeNullabilityKind
export const CXTypeLayoutError_Invalid: int = -1
export const CXTypeLayoutError_Incomplete: int = -2
export const CXTypeLayoutError_Dependent: int = -3
export const CXTypeLayoutError_NotConstantSize: int = -4
export const CXTypeLayoutError_InvalidFieldName: int = -5
export const CXTypeLayoutError_Undeduced: int = -6
export import def #extern clang_Type_getAlignOf(T: s_CXType) -> int64
export import def #extern clang_Type_getClassType(T: s_CXType) -> s_CXType
export import def #extern clang_Type_getSizeOf(T: s_CXType) -> int64
export import def #extern clang_Type_getOffsetOf(T: s_CXType, S: *char) -> int64
export import def #extern clang_Type_getModifiedType(T: s_CXType) -> s_CXType
export import def #extern clang_Type_getValueType(CT: s_CXType) -> s_CXType
export import def #extern clang_Cursor_getOffsetOfField(C: s_CXCursor) -> int64
export import def #extern clang_Cursor_isAnonymous(C: s_CXCursor) -> uint
export import def #extern clang_Cursor_isAnonymousRecordDecl(C: s_CXCursor) -> uint
export import def #extern clang_Cursor_isInlineNamespace(C: s_CXCursor) -> uint
export const CXRefQualifier_None: int = 0
export const CXRefQualifier_LValue: int = 1
export const CXRefQualifier_RValue: int = 2
export import def #extern clang_Type_getNumTemplateArguments(T: s_CXType) -> int
export import def #extern clang_Type_getTemplateArgumentAsType(T: s_CXType, i: uint) -> s_CXType
export import def #extern clang_Type_getCXXRefQualifier(T: s_CXType) -> e_CXRefQualifierKind
export import def #extern clang_Cursor_isBitField(C: s_CXCursor) -> uint
export import def #extern clang_isVirtualBase(_0: s_CXCursor) -> uint
export const CX_CXXInvalidAccessSpecifier: int = 0
export const CX_CXXPublic: int = 1
export const CX_CXXProtected: int = 2
export const CX_CXXPrivate: int = 3
export import def #extern clang_getCXXAccessSpecifier(_0: s_CXCursor) -> e_CX_CXXAccessSpecifier
export const CX_SC_Invalid: int = 0
export const CX_SC_None: int = 1
export const CX_SC_Extern: int = 2
export const CX_SC_Static: int = 3
export const CX_SC_PrivateExtern: int = 4
export const CX_SC_OpenCLWorkGroupLocal: int = 5
export const CX_SC_Auto: int = 6
export const CX_SC_Register: int = 7
export import def #extern clang_Cursor_getStorageClass(_0: s_CXCursor) -> e_CX_StorageClass
export import def #extern clang_getNumOverloadedDecls(cursor: s_CXCursor) -> uint
export import def #extern clang_getOverloadedDecl(cursor: s_CXCursor, index: uint) -> s_CXCursor
export import def #extern clang_getIBOutletCollectionType(_0: s_CXCursor) -> s_CXType
export const CXChildVisit_Break: int = 0
export const CXChildVisit_Continue: int = 1
export const CXChildVisit_Recurse: int = 2
export import def #extern clang_visitChildren(parent: s_CXCursor, visitor: def (s_CXCursor, s_CXCursor, *) -> (e_CXChildVisitResult), client_data: *) -> uint
export import def #extern clang_getCursorUSR(_0: s_CXCursor) -> s_CXString
export import def #extern clang_constructUSR_ObjCClass(class_name: *char) -> s_CXString
export import def #extern clang_constructUSR_ObjCCategory(class_name: *char, category_name: *char) -> s_CXString
export import def #extern clang_constructUSR_ObjCProtocol(protocol_name: *char) -> s_CXString
export import def #extern clang_constructUSR_ObjCIvar(name: *char, classUSR: s_CXString) -> s_CXString
export import def #extern clang_constructUSR_ObjCMethod(name: *char, isInstanceMethod: uint, classUSR: s_CXString) -> s_CXString
export import def #extern clang_constructUSR_ObjCProperty(property: *char, classUSR: s_CXString) -> s_CXString
export import def #extern clang_getCursorSpelling(_0: s_CXCursor) -> s_CXString
export import def #extern clang_Cursor_getSpellingNameRange(_0: s_CXCursor, pieceIndex: uint, options: uint) -> s_CXSourceRange
export const CXPrintingPolicy_Indentation: int = 0
export const CXPrintingPolicy_SuppressSpecifiers: int = 1
export const CXPrintingPolicy_SuppressTagKeyword: int = 2
export const CXPrintingPolicy_IncludeTagDefinition: int = 3
export const CXPrintingPolicy_SuppressScope: int = 4
export const CXPrintingPolicy_SuppressUnwrittenScope: int = 5
export const CXPrintingPolicy_SuppressInitializers: int = 6
export const CXPrintingPolicy_ConstantArraySizeAsWritten: int = 7
export const CXPrintingPolicy_AnonymousTagLocations: int = 8
export const CXPrintingPolicy_SuppressStrongLifetime: int = 9
export const CXPrintingPolicy_SuppressLifetimeQualifiers: int = 10
export const CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors: int = 11
export const CXPrintingPolicy_Bool: int = 12
export const CXPrintingPolicy_Restrict: int = 13
export const CXPrintingPolicy_Alignof: int = 14
export const CXPrintingPolicy_UnderscoreAlignof: int = 15
export const CXPrintingPolicy_UseVoidForZeroParams: int = 16
export const CXPrintingPolicy_TerseOutput: int = 17
export const CXPrintingPolicy_PolishForDeclaration: int = 18
export const CXPrintingPolicy_Half: int = 19
export const CXPrintingPolicy_MSWChar: int = 20
export const CXPrintingPolicy_IncludeNewlines: int = 21
export const CXPrintingPolicy_MSVCFormatting: int = 22
export const CXPrintingPolicy_ConstantsAsWritten: int = 23
export const CXPrintingPolicy_SuppressImplicitBase: int = 24
export const CXPrintingPolicy_FullyQualifiedName: int = 25
export const CXPrintingPolicy_LastProperty: int = 25
export import def #extern clang_PrintingPolicy_getProperty(Policy: *, Property: e_CXPrintingPolicyProperty) -> uint
export import def #extern clang_PrintingPolicy_setProperty(Policy: *, Property: e_CXPrintingPolicyProperty, Value: uint)
export import def #extern clang_getCursorPrintingPolicy(_0: s_CXCursor) -> *
export import def #extern clang_PrintingPolicy_dispose(Policy: *)
export import def #extern clang_getCursorPrettyPrinted(Cursor: s_CXCursor, Policy: *) -> s_CXString
export import def #extern clang_getCursorDisplayName(_0: s_CXCursor) -> s_CXString
export import def #extern clang_getCursorReferenced(_0: s_CXCursor) -> s_CXCursor
export import def #extern clang_getCursorDefinition(_0: s_CXCursor) -> s_CXCursor
export import def #extern clang_isCursorDefinition(_0: s_CXCursor) -> uint
export import def #extern clang_getCanonicalCursor(_0: s_CXCursor) -> s_CXCursor
export import def #extern clang_Cursor_getObjCSelectorIndex(_0: s_CXCursor) -> int
export import def #extern clang_Cursor_isDynamicCall(C: s_CXCursor) -> int
export import def #extern clang_Cursor_getReceiverType(C: s_CXCursor) -> s_CXType
export const CXObjCPropertyAttr_noattr: int = 0
export const CXObjCPropertyAttr_readonly: int = 1
export const CXObjCPropertyAttr_getter: int = 2
export const CXObjCPropertyAttr_assign: int = 4
export const CXObjCPropertyAttr_readwrite: int = 8
export const CXObjCPropertyAttr_retain: int = 16
export const CXObjCPropertyAttr_copy: int = 32
export const CXObjCPropertyAttr_nonatomic: int = 64
export const CXObjCPropertyAttr_setter: int = 128
export const CXObjCPropertyAttr_atomic: int = 256
export const CXObjCPropertyAttr_weak: int = 512
export const CXObjCPropertyAttr_strong: int = 1024
export const CXObjCPropertyAttr_unsafe_unretained: int = 2048
export const CXObjCPropertyAttr_class: int = 4096
export import def #extern clang_Cursor_getObjCPropertyAttributes(C: s_CXCursor, reserved: uint) -> uint
export import def #extern clang_Cursor_getObjCPropertyGetterName(C: s_CXCursor) -> s_CXString
export import def #extern clang_Cursor_getObjCPropertySetterName(C: s_CXCursor) -> s_CXString
export const CXObjCDeclQualifier_None: int = 0
export const CXObjCDeclQualifier_In: int = 1
export const CXObjCDeclQualifier_Inout: int = 2
export const CXObjCDeclQualifier_Out: int = 4
export const CXObjCDeclQualifier_Bycopy: int = 8
export const CXObjCDeclQualifier_Byref: int = 16
export const CXObjCDeclQualifier_Oneway: int = 32
export import def #extern clang_Cursor_getObjCDeclQualifiers(C: s_CXCursor) -> uint
export import def #extern clang_Cursor_isObjCOptional(C: s_CXCursor) -> uint
export import def #extern clang_Cursor_isVariadic(C: s_CXCursor) -> uint
export import def #extern clang_Cursor_isExternalSymbol(C: s_CXCursor, language: *s_CXString, definedIn: *s_CXString, isGenerated: *uint) -> uint
export import def #extern clang_Cursor_getCommentRange(C: s_CXCursor) -> s_CXSourceRange
export import def #extern clang_Cursor_getRawCommentText(C: s_CXCursor) -> s_CXString
export import def #extern clang_Cursor_getBriefCommentText(C: s_CXCursor) -> s_CXString
export import def #extern clang_Cursor_getMangling(_0: s_CXCursor) -> s_CXString
export import def #extern clang_Cursor_getCXXManglings(_0: s_CXCursor) -> *s_CXStringSet
export import def #extern clang_Cursor_getObjCManglings(_0: s_CXCursor) -> *s_CXStringSet
export import def #extern clang_Cursor_getModule(C: s_CXCursor) -> *
export import def #extern clang_getModuleForFile(_0: *s_CXTranslationUnitImpl, _1: *) -> *
export import def #extern clang_Module_getASTFile(Module: *) -> *
export import def #extern clang_Module_getParent(Module: *) -> *
export import def #extern clang_Module_getName(Module: *) -> s_CXString
export import def #extern clang_Module_getFullName(Module: *) -> s_CXString
export import def #extern clang_Module_isSystem(Module: *) -> int
export import def #extern clang_Module_getNumTopLevelHeaders(_0: *s_CXTranslationUnitImpl, Module: *) -> uint
export import def #extern clang_Module_getTopLevelHeader(_0: *s_CXTranslationUnitImpl, Module: *, Index: uint) -> *
export import def #extern clang_CXXConstructor_isConvertingConstructor(C: s_CXCursor) -> uint
export import def #extern clang_CXXConstructor_isCopyConstructor(C: s_CXCursor) -> uint
export import def #extern clang_CXXConstructor_isDefaultConstructor(C: s_CXCursor) -> uint
export import def #extern clang_CXXConstructor_isMoveConstructor(C: s_CXCursor) -> uint
export import def #extern clang_CXXField_isMutable(C: s_CXCursor) -> uint
export import def #extern clang_CXXMethod_isDefaulted(C: s_CXCursor) -> uint
export import def #extern clang_CXXMethod_isPureVirtual(C: s_CXCursor) -> uint
export import def #extern clang_CXXMethod_isStatic(C: s_CXCursor) -> uint
export import def #extern clang_CXXMethod_isVirtual(C: s_CXCursor) -> uint
export import def #extern clang_CXXRecord_isAbstract(C: s_CXCursor) -> uint
export import def #extern clang_EnumDecl_isScoped(C: s_CXCursor) -> uint
export import def #extern clang_CXXMethod_isConst(C: s_CXCursor) -> uint
export import def #extern clang_getTemplateCursorKind(C: s_CXCursor) -> e_CXCursorKind
export import def #extern clang_getSpecializedCursorTemplate(C: s_CXCursor) -> s_CXCursor
export import def #extern clang_getCursorReferenceNameRange(C: s_CXCursor, NameFlags: uint, PieceIndex: uint) -> s_CXSourceRange
export const CXNameRange_WantQualifier: int = 1
export const CXNameRange_WantTemplateArgs: int = 2
export const CXNameRange_WantSinglePiece: int = 4
export const CXToken_Punctuation: int = 0
export const CXToken_Keyword: int = 1
export const CXToken_Identifier: int = 2
export const CXToken_Literal: int = 3
export const CXToken_Comment: int = 4
export import def #extern clang_getToken(TU: *s_CXTranslationUnitImpl, Location: s_CXSourceLocation) -> *s_CXToken
export import def #extern clang_getTokenKind(_0: s_CXToken) -> e_CXTokenKind
export import def #extern clang_getTokenSpelling(_0: *s_CXTranslationUnitImpl, _1: s_CXToken) -> s_CXString
export import def #extern clang_getTokenLocation(_0: *s_CXTranslationUnitImpl, _1: s_CXToken) -> s_CXSourceLocation
export import def #extern clang_getTokenExtent(_0: *s_CXTranslationUnitImpl, _1: s_CXToken) -> s_CXSourceRange
export import def #extern clang_tokenize(TU: *s_CXTranslationUnitImpl, Range: s_CXSourceRange, Tokens: **s_CXToken, NumTokens: *uint)
export import def #extern clang_annotateTokens(TU: *s_CXTranslationUnitImpl, Tokens: *s_CXToken, NumTokens: uint, Cursors: *s_CXCursor)
export import def #extern clang_disposeTokens(TU: *s_CXTranslationUnitImpl, Tokens: *s_CXToken, NumTokens: uint)
export import def #extern clang_getCursorKindSpelling(Kind: e_CXCursorKind) -> s_CXString
export import def #extern clang_getDefinitionSpellingAndExtent(_0: s_CXCursor, startBuf: **char, endBuf: **char, startLine: *uint, startColumn: *uint, endLine: *uint, endColumn: *uint)
export import def #extern clang_enableStackTraces()
export import def #extern clang_executeOnThread(fn: def (*) -> (), user_data: *, stack_size: uint)
export const CXCompletionChunk_Optional: int = 0
export const CXCompletionChunk_TypedText: int = 1
export const CXCompletionChunk_Text: int = 2
export const CXCompletionChunk_Placeholder: int = 3
export const CXCompletionChunk_Informative: int = 4
export const CXCompletionChunk_CurrentParameter: int = 5
export const CXCompletionChunk_LeftParen: int = 6
export const CXCompletionChunk_RightParen: int = 7
export const CXCompletionChunk_LeftBracket: int = 8
export const CXCompletionChunk_RightBracket: int = 9
export const CXCompletionChunk_LeftBrace: int = 10
export const CXCompletionChunk_RightBrace: int = 11
export const CXCompletionChunk_LeftAngle: int = 12
export const CXCompletionChunk_RightAngle: int = 13
export const CXCompletionChunk_Comma: int = 14
export const CXCompletionChunk_ResultType: int = 15
export const CXCompletionChunk_Colon: int = 16
export const CXCompletionChunk_SemiColon: int = 17
export const CXCompletionChunk_Equal: int = 18
export const CXCompletionChunk_HorizontalSpace: int = 19
export const CXCompletionChunk_VerticalSpace: int = 20
export import def #extern clang_getCompletionChunkKind(completion_string: *, chunk_number: uint) -> e_CXCompletionChunkKind
export import def #extern clang_getCompletionChunkText(completion_string: *, chunk_number: uint) -> s_CXString
export import def #extern clang_getCompletionChunkCompletionString(completion_string: *, chunk_number: uint) -> *
export import def #extern clang_getNumCompletionChunks(completion_string: *) -> uint
export import def #extern clang_getCompletionPriority(completion_string: *) -> uint
export import def #extern clang_getCompletionAvailability(completion_string: *) -> e_CXAvailabilityKind
export import def #extern clang_getCompletionNumAnnotations(completion_string: *) -> uint
export import def #extern clang_getCompletionAnnotation(completion_string: *, annotation_number: uint) -> s_CXString
export import def #extern clang_getCompletionParent(completion_string: *, kind: *e_CXCursorKind) -> s_CXString
export import def #extern clang_getCompletionBriefComment(completion_string: *) -> s_CXString
export import def #extern clang_getCursorCompletionString(cursor: s_CXCursor) -> *
export import def #extern clang_getCompletionNumFixIts(results: *s_CXCodeCompleteResults, completion_index: uint) -> uint
export import def #extern clang_getCompletionFixIt(results: *s_CXCodeCompleteResults, completion_index: uint, fixit_index: uint, replacement_range: *s_CXSourceRange) -> s_CXString
export const CXCodeComplete_IncludeMacros: int = 1
export const CXCodeComplete_IncludeCodePatterns: int = 2
export const CXCodeComplete_IncludeBriefComments: int = 4
export const CXCodeComplete_SkipPreamble: int = 8
export const CXCodeComplete_IncludeCompletionsWithFixIts: int = 16
export const CXCompletionContext_Unexposed: int = 0
export const CXCompletionContext_AnyType: int = 1
export const CXCompletionContext_AnyValue: int = 2
export const CXCompletionContext_ObjCObjectValue: int = 4
export const CXCompletionContext_ObjCSelectorValue: int = 8
export const CXCompletionContext_CXXClassTypeValue: int = 16
export const CXCompletionContext_DotMemberAccess: int = 32
export const CXCompletionContext_ArrowMemberAccess: int = 64
export const CXCompletionContext_ObjCPropertyAccess: int = 128
export const CXCompletionContext_EnumTag: int = 256
export const CXCompletionContext_UnionTag: int = 512
export const CXCompletionContext_StructTag: int = 1024
export const CXCompletionContext_ClassTag: int = 2048
export const CXCompletionContext_Namespace: int = 4096
export const CXCompletionContext_NestedNameSpecifier: int = 8192
export const CXCompletionContext_ObjCInterface: int = 16384
export const CXCompletionContext_ObjCProtocol: int = 32768
export const CXCompletionContext_ObjCCategory: int = 65536
export const CXCompletionContext_ObjCInstanceMessage: int = 131072
export const CXCompletionContext_ObjCClassMessage: int = 262144
export const CXCompletionContext_ObjCSelectorName: int = 524288
export const CXCompletionContext_MacroName: int = 1048576
export const CXCompletionContext_NaturalLanguage: int = 2097152
export const CXCompletionContext_IncludedFile: int = 4194304
export const CXCompletionContext_Unknown: int = 8388607
export import def #extern clang_defaultCodeCompleteOptions() -> uint
export import def #extern clang_codeCompleteAt(TU: *s_CXTranslationUnitImpl, complete_filename: *char, complete_line: uint, complete_column: uint, unsaved_files: *s_CXUnsavedFile, num_unsaved_files: uint, options: uint) -> *s_CXCodeCompleteResults
export import def #extern clang_sortCodeCompletionResults(Results: *s_CXCompletionResult, NumResults: uint)
export import def #extern clang_disposeCodeCompleteResults(Results: *s_CXCodeCompleteResults)
export import def #extern clang_codeCompleteGetNumDiagnostics(Results: *s_CXCodeCompleteResults) -> uint
export import def #extern clang_codeCompleteGetDiagnostic(Results: *s_CXCodeCompleteResults, Index: uint) -> *
export import def #extern clang_codeCompleteGetContexts(Results: *s_CXCodeCompleteResults) -> uint64
export import def #extern clang_codeCompleteGetContainerKind(Results: *s_CXCodeCompleteResults, IsIncomplete: *uint) -> e_CXCursorKind
export import def #extern clang_codeCompleteGetContainerUSR(Results: *s_CXCodeCompleteResults) -> s_CXString
export import def #extern clang_codeCompleteGetObjCSelector(Results: *s_CXCodeCompleteResults) -> s_CXString
export import def #extern clang_getClangVersion() -> s_CXString
export import def #extern clang_toggleCrashRecovery(isEnabled: uint)
export import def #extern clang_getInclusions(tu: *s_CXTranslationUnitImpl, visitor: def (*, *s_CXSourceLocation, uint, *) -> (), client_data: *)
export const CXEval_Int: int = 1
export const CXEval_Float: int = 2
export const CXEval_ObjCStrLiteral: int = 3
export const CXEval_StrLiteral: int = 4
export const CXEval_CFStr: int = 5
export const CXEval_Other: int = 6
export const CXEval_UnExposed: int = 0
export import def #extern clang_Cursor_Evaluate(C: s_CXCursor) -> *
export import def #extern clang_EvalResult_getKind(E: *) -> e_CXEvalResultKind
export import def #extern clang_EvalResult_getAsInt(E: *) -> int
export import def #extern clang_EvalResult_getAsLongLong(E: *) -> int64
export import def #extern clang_EvalResult_isUnsignedInt(E: *) -> uint
export import def #extern clang_EvalResult_getAsUnsigned(E: *) -> uint64
export import def #extern clang_EvalResult_getAsDouble(E: *) -> double
export import def #extern clang_EvalResult_getAsStr(E: *) -> *char
export import def #extern clang_EvalResult_dispose(E: *)
export import def #extern clang_getRemappings(path: *char) -> *
export import def #extern clang_getRemappingsFromFileList(filePaths: **char, numFiles: uint) -> *
export import def #extern clang_remap_getNumFiles(_0: *) -> uint
export import def #extern clang_remap_getFilenames(_0: *, index: uint, original: *s_CXString, transformed: *s_CXString)
export import def #extern clang_remap_dispose(_0: *)
export const CXVisit_Break: int = 0
export const CXVisit_Continue: int = 1
export const CXResult_Success: int = 0
export const CXResult_Invalid: int = 1
export const CXResult_VisitBreak: int = 2
export import def #extern clang_findReferencesInFile(cursor: s_CXCursor, file: *, visitor: s_CXCursorAndRangeVisitor) -> e_CXResult
export import def #extern clang_findIncludesInFile(TU: *s_CXTranslationUnitImpl, file: *, visitor: s_CXCursorAndRangeVisitor) -> e_CXResult
export const CXIdxEntity_Unexposed: int = 0
export const CXIdxEntity_Typedef: int = 1
export const CXIdxEntity_Function: int = 2
export const CXIdxEntity_Variable: int = 3
export const CXIdxEntity_Field: int = 4
export const CXIdxEntity_EnumConstant: int = 5
export const CXIdxEntity_ObjCClass: int = 6
export const CXIdxEntity_ObjCProtocol: int = 7
export const CXIdxEntity_ObjCCategory: int = 8
export const CXIdxEntity_ObjCInstanceMethod: int = 9
export const CXIdxEntity_ObjCClassMethod: int = 10
export const CXIdxEntity_ObjCProperty: int = 11
export const CXIdxEntity_ObjCIvar: int = 12
export const CXIdxEntity_Enum: int = 13
export const CXIdxEntity_Struct: int = 14
export const CXIdxEntity_Union: int = 15
export const CXIdxEntity_CXXClass: int = 16
export const CXIdxEntity_CXXNamespace: int = 17
export const CXIdxEntity_CXXNamespaceAlias: int = 18
export const CXIdxEntity_CXXStaticVariable: int = 19
export const CXIdxEntity_CXXStaticMethod: int = 20
export const CXIdxEntity_CXXInstanceMethod: int = 21
export const CXIdxEntity_CXXConstructor: int = 22
export const CXIdxEntity_CXXDestructor: int = 23
export const CXIdxEntity_CXXConversionFunction: int = 24
export const CXIdxEntity_CXXTypeAlias: int = 25
export const CXIdxEntity_CXXInterface: int = 26
export const CXIdxEntityLang_None: int = 0
export const CXIdxEntityLang_C: int = 1
export const CXIdxEntityLang_ObjC: int = 2
export const CXIdxEntityLang_CXX: int = 3
export const CXIdxEntityLang_Swift: int = 4
export const CXIdxEntity_NonTemplate: int = 0
export const CXIdxEntity_Template: int = 1
export const CXIdxEntity_TemplatePartialSpecialization: int = 2
export const CXIdxEntity_TemplateSpecialization: int = 3
export const CXIdxAttr_Unexposed: int = 0
export const CXIdxAttr_IBAction: int = 1
export const CXIdxAttr_IBOutlet: int = 2
export const CXIdxAttr_IBOutletCollection: int = 3
export const CXIdxDeclFlag_Skipped: int = 1
export const CXIdxObjCContainer_ForwardRef: int = 0
export const CXIdxObjCContainer_Interface: int = 1
export const CXIdxObjCContainer_Implementation: int = 2
export const CXIdxEntityRef_Direct: int = 1
export const CXIdxEntityRef_Implicit: int = 2
export const CXSymbolRole_None: int = 0
export const CXSymbolRole_Declaration: int = 1
export const CXSymbolRole_Definition: int = 2
export const CXSymbolRole_Reference: int = 4
export const CXSymbolRole_Read: int = 8
export const CXSymbolRole_Write: int = 16
export const CXSymbolRole_Call: int = 32
export const CXSymbolRole_Dynamic: int = 64
export const CXSymbolRole_AddressOf: int = 128
export const CXSymbolRole_Implicit: int = 256
export import def #extern clang_index_isEntityObjCContainerKind(_0: e_CXIdxEntityKind) -> int
export import def #extern clang_index_getObjCContainerDeclInfo(_0: *s_CXIdxDeclInfo) -> *s_CXIdxObjCContainerDeclInfo
export import def #extern clang_index_getObjCInterfaceDeclInfo(_0: *s_CXIdxDeclInfo) -> *s_CXIdxObjCInterfaceDeclInfo
export import def #extern clang_index_getObjCCategoryDeclInfo(_0: *s_CXIdxDeclInfo) -> *s_CXIdxObjCCategoryDeclInfo
export import def #extern clang_index_getObjCProtocolRefListInfo(_0: *s_CXIdxDeclInfo) -> *s_CXIdxObjCProtocolRefListInfo
export import def #extern clang_index_getObjCPropertyDeclInfo(_0: *s_CXIdxDeclInfo) -> *s_CXIdxObjCPropertyDeclInfo
export import def #extern clang_index_getIBOutletCollectionAttrInfo(_0: *s_CXIdxAttrInfo) -> *s_CXIdxIBOutletCollectionAttrInfo
export import def #extern clang_index_getCXXClassDeclInfo(_0: *s_CXIdxDeclInfo) -> *s_CXIdxCXXClassDeclInfo
export import def #extern clang_index_getClientContainer(_0: *s_CXIdxContainerInfo) -> *
export import def #extern clang_index_setClientContainer(_0: *s_CXIdxContainerInfo, _1: *)
export import def #extern clang_index_getClientEntity(_0: *s_CXIdxEntityInfo) -> *
export import def #extern clang_index_setClientEntity(_0: *s_CXIdxEntityInfo, _1: *)
export import def #extern clang_IndexAction_create(CIdx: *) -> *
export import def #extern clang_IndexAction_dispose(_0: *)
export const CXIndexOpt_None: int = 0
export const CXIndexOpt_SuppressRedundantRefs: int = 1
export const CXIndexOpt_IndexFunctionLocalSymbols: int = 2
export const CXIndexOpt_IndexImplicitTemplateInstantiations: int = 4
export const CXIndexOpt_SuppressWarnings: int = 8
export const CXIndexOpt_SkipParsedBodiesInSession: int = 16
export import def #extern clang_indexSourceFile(_0: *, client_data: *, index_callbacks: *s_IndexerCallbacks, index_callbacks_size: uint, index_options: uint, source_filename: *char, command_line_args: **char, num_command_line_args: int, unsaved_files: *s_CXUnsavedFile, num_unsaved_files: uint, out_TU: **s_CXTranslationUnitImpl, TU_options: uint) -> int
export import def #extern clang_indexSourceFileFullArgv(_0: *, client_data: *, index_callbacks: *s_IndexerCallbacks, index_callbacks_size: uint, index_options: uint, source_filename: *char, command_line_args: **char, num_command_line_args: int, unsaved_files: *s_CXUnsavedFile, num_unsaved_files: uint, out_TU: **s_CXTranslationUnitImpl, TU_options: uint) -> int
export import def #extern clang_indexTranslationUnit(_0: *, client_data: *, index_callbacks: *s_IndexerCallbacks, index_callbacks_size: uint, index_options: uint, _5: *s_CXTranslationUnitImpl) -> int
export import def #extern clang_indexLoc_getFileLocation(loc: s_CXIdxLoc, indexFile: **, file: **, line: *uint, column: *uint, offset: *uint)
export import def #extern clang_indexLoc_getCXSourceLocation(loc: s_CXIdxLoc) -> s_CXSourceLocation
export import def #extern clang_Type_visitFields(T: s_CXType, visitor: def (s_CXCursor, *) -> (e_CXVisitorResult), client_data: *) -> uint
