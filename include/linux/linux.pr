export const SI_ASYNCNL: int = (- 60)
export const SI_DETHREAD: int = (- 7)
export const SI_TKILL: int = SI_DETHREAD + 1
export const SI_SIGIO: int = SI_TKILL + 1
export const SI_ASYNCIO: int = SI_SIGIO + 1
export const SI_MESGQ: int = SI_ASYNCIO + 1
export const SI_TIMER: int = SI_MESGQ + 1
export const SI_QUEUE: int = SI_TIMER + 1
export const SI_USER: int = SI_QUEUE + 1
export const SI_KERNEL: int = 128
export const ILL_ILLOPC: int = 1
export const ILL_ILLOPN: int = ILL_ILLOPC + 1
export const ILL_ILLADR: int = ILL_ILLOPN + 1
export const ILL_ILLTRP: int = ILL_ILLADR + 1
export const ILL_PRVOPC: int = ILL_ILLTRP + 1
export const ILL_PRVREG: int = ILL_PRVOPC + 1
export const ILL_COPROC: int = ILL_PRVREG + 1
export const ILL_BADSTK: int = ILL_COPROC + 1
export const ILL_BADIADDR: int = ILL_BADSTK + 1
export const FPE_INTDIV: int = 1
export const FPE_INTOVF: int = FPE_INTDIV + 1
export const FPE_FLTDIV: int = FPE_INTOVF + 1
export const FPE_FLTOVF: int = FPE_FLTDIV + 1
export const FPE_FLTUND: int = FPE_FLTOVF + 1
export const FPE_FLTRES: int = FPE_FLTUND + 1
export const FPE_FLTINV: int = FPE_FLTRES + 1
export const FPE_FLTSUB: int = FPE_FLTINV + 1
export const FPE_FLTUNK: int = 14
export const FPE_CONDTRAP: int = FPE_FLTUNK + 1
export const SEGV_MAPERR: int = 1
export const SEGV_ACCERR: int = SEGV_MAPERR + 1
export const SEGV_BNDERR: int = SEGV_ACCERR + 1
export const SEGV_PKUERR: int = SEGV_BNDERR + 1
export const SEGV_ACCADI: int = SEGV_PKUERR + 1
export const SEGV_ADIDERR: int = SEGV_ACCADI + 1
export const SEGV_ADIPERR: int = SEGV_ADIDERR + 1
export const BUS_ADRALN: int = 1
export const BUS_ADRERR: int = BUS_ADRALN + 1
export const BUS_OBJERR: int = BUS_ADRERR + 1
export const BUS_MCEERR_AR: int = BUS_OBJERR + 1
export const BUS_MCEERR_AO: int = BUS_MCEERR_AR + 1
export const CLD_EXITED: int = 1
export const CLD_KILLED: int = CLD_EXITED + 1
export const CLD_DUMPED: int = CLD_KILLED + 1
export const CLD_TRAPPED: int = CLD_DUMPED + 1
export const CLD_STOPPED: int = CLD_TRAPPED + 1
export const CLD_CONTINUED: int = CLD_STOPPED + 1
export const POLL_IN: int = 1
export const POLL_OUT: int = POLL_IN + 1
export const POLL_MSG: int = POLL_OUT + 1
export const POLL_ERR: int = POLL_MSG + 1
export const POLL_PRI: int = POLL_ERR + 1
export const POLL_HUP: int = POLL_PRI + 1
export const SIGEV_SIGNAL: int = 0
export const SIGEV_NONE: int = SIGEV_SIGNAL + 1
export const SIGEV_THREAD: int = SIGEV_NONE + 1
export const SIGEV_THREAD_ID: int = 4
export const SS_ONSTACK: int = 1
export const SS_DISABLE: int = SS_ONSTACK + 1
export const P_ALL: int = 0
export const P_PID: int = P_ALL + 1
export const P_PGID: int = P_PID + 1
export const _PC_LINK_MAX: int = 0
export const _PC_MAX_CANON: int = _PC_LINK_MAX + 1
export const _PC_MAX_INPUT: int = _PC_MAX_CANON + 1
export const _PC_NAME_MAX: int = _PC_MAX_INPUT + 1
export const _PC_PATH_MAX: int = _PC_NAME_MAX + 1
export const _PC_PIPE_BUF: int = _PC_PATH_MAX + 1
export const _PC_CHOWN_RESTRICTED: int = _PC_PIPE_BUF + 1
export const _PC_NO_TRUNC: int = _PC_CHOWN_RESTRICTED + 1
export const _PC_VDISABLE: int = _PC_NO_TRUNC + 1
export const _PC_SYNC_IO: int = _PC_VDISABLE + 1
export const _PC_ASYNC_IO: int = _PC_SYNC_IO + 1
export const _PC_PRIO_IO: int = _PC_ASYNC_IO + 1
export const _PC_SOCK_MAXBUF: int = _PC_PRIO_IO + 1
export const _PC_FILESIZEBITS: int = _PC_SOCK_MAXBUF + 1
export const _PC_REC_INCR_XFER_SIZE: int = _PC_FILESIZEBITS + 1
export const _PC_REC_MAX_XFER_SIZE: int = _PC_REC_INCR_XFER_SIZE + 1
export const _PC_REC_MIN_XFER_SIZE: int = _PC_REC_MAX_XFER_SIZE + 1
export const _PC_REC_XFER_ALIGN: int = _PC_REC_MIN_XFER_SIZE + 1
export const _PC_ALLOC_SIZE_MIN: int = _PC_REC_XFER_ALIGN + 1
export const _PC_SYMLINK_MAX: int = _PC_ALLOC_SIZE_MIN + 1
export const _PC_2_SYMLINKS: int = _PC_SYMLINK_MAX + 1
export const _SC_ARG_MAX: int = 0
export const _SC_CHILD_MAX: int = _SC_ARG_MAX + 1
export const _SC_CLK_TCK: int = _SC_CHILD_MAX + 1
export const _SC_NGROUPS_MAX: int = _SC_CLK_TCK + 1
export const _SC_OPEN_MAX: int = _SC_NGROUPS_MAX + 1
export const _SC_STREAM_MAX: int = _SC_OPEN_MAX + 1
export const _SC_TZNAME_MAX: int = _SC_STREAM_MAX + 1
export const _SC_JOB_CONTROL: int = _SC_TZNAME_MAX + 1
export const _SC_SAVED_IDS: int = _SC_JOB_CONTROL + 1
export const _SC_REALTIME_SIGNALS: int = _SC_SAVED_IDS + 1
export const _SC_PRIORITY_SCHEDULING: int = _SC_REALTIME_SIGNALS + 1
export const _SC_TIMERS: int = _SC_PRIORITY_SCHEDULING + 1
export const _SC_ASYNCHRONOUS_IO: int = _SC_TIMERS + 1
export const _SC_PRIORITIZED_IO: int = _SC_ASYNCHRONOUS_IO + 1
export const _SC_SYNCHRONIZED_IO: int = _SC_PRIORITIZED_IO + 1
export const _SC_FSYNC: int = _SC_SYNCHRONIZED_IO + 1
export const _SC_MAPPED_FILES: int = _SC_FSYNC + 1
export const _SC_MEMLOCK: int = _SC_MAPPED_FILES + 1
export const _SC_MEMLOCK_RANGE: int = _SC_MEMLOCK + 1
export const _SC_MEMORY_PROTECTION: int = _SC_MEMLOCK_RANGE + 1
export const _SC_MESSAGE_PASSING: int = _SC_MEMORY_PROTECTION + 1
export const _SC_SEMAPHORES: int = _SC_MESSAGE_PASSING + 1
export const _SC_SHARED_MEMORY_OBJECTS: int = _SC_SEMAPHORES + 1
export const _SC_AIO_LISTIO_MAX: int = _SC_SHARED_MEMORY_OBJECTS + 1
export const _SC_AIO_MAX: int = _SC_AIO_LISTIO_MAX + 1
export const _SC_AIO_PRIO_DELTA_MAX: int = _SC_AIO_MAX + 1
export const _SC_DELAYTIMER_MAX: int = _SC_AIO_PRIO_DELTA_MAX + 1
export const _SC_MQ_OPEN_MAX: int = _SC_DELAYTIMER_MAX + 1
export const _SC_MQ_PRIO_MAX: int = _SC_MQ_OPEN_MAX + 1
export const _SC_VERSION: int = _SC_MQ_PRIO_MAX + 1
export const _SC_PAGESIZE: int = _SC_VERSION + 1
export const _SC_RTSIG_MAX: int = _SC_PAGESIZE + 1
export const _SC_SEM_NSEMS_MAX: int = _SC_RTSIG_MAX + 1
export const _SC_SEM_VALUE_MAX: int = _SC_SEM_NSEMS_MAX + 1
export const _SC_SIGQUEUE_MAX: int = _SC_SEM_VALUE_MAX + 1
export const _SC_TIMER_MAX: int = _SC_SIGQUEUE_MAX + 1
export const _SC_BC_BASE_MAX: int = _SC_TIMER_MAX + 1
export const _SC_BC_DIM_MAX: int = _SC_BC_BASE_MAX + 1
export const _SC_BC_SCALE_MAX: int = _SC_BC_DIM_MAX + 1
export const _SC_BC_STRING_MAX: int = _SC_BC_SCALE_MAX + 1
export const _SC_COLL_WEIGHTS_MAX: int = _SC_BC_STRING_MAX + 1
export const _SC_EQUIV_CLASS_MAX: int = _SC_COLL_WEIGHTS_MAX + 1
export const _SC_EXPR_NEST_MAX: int = _SC_EQUIV_CLASS_MAX + 1
export const _SC_LINE_MAX: int = _SC_EXPR_NEST_MAX + 1
export const _SC_RE_DUP_MAX: int = _SC_LINE_MAX + 1
export const _SC_CHARCLASS_NAME_MAX: int = _SC_RE_DUP_MAX + 1
export const _SC_2_VERSION: int = _SC_CHARCLASS_NAME_MAX + 1
export const _SC_2_C_BIND: int = _SC_2_VERSION + 1
export const _SC_2_C_DEV: int = _SC_2_C_BIND + 1
export const _SC_2_FORT_DEV: int = _SC_2_C_DEV + 1
export const _SC_2_FORT_RUN: int = _SC_2_FORT_DEV + 1
export const _SC_2_SW_DEV: int = _SC_2_FORT_RUN + 1
export const _SC_2_LOCALEDEF: int = _SC_2_SW_DEV + 1
export const _SC_PII: int = _SC_2_LOCALEDEF + 1
export const _SC_PII_XTI: int = _SC_PII + 1
export const _SC_PII_SOCKET: int = _SC_PII_XTI + 1
export const _SC_PII_INTERNET: int = _SC_PII_SOCKET + 1
export const _SC_PII_OSI: int = _SC_PII_INTERNET + 1
export const _SC_POLL: int = _SC_PII_OSI + 1
export const _SC_SELECT: int = _SC_POLL + 1
export const _SC_UIO_MAXIOV: int = _SC_SELECT + 1
export const _SC_IOV_MAX: int = _SC_UIO_MAXIOV
export const _SC_PII_INTERNET_STREAM: int = _SC_IOV_MAX + 1
export const _SC_PII_INTERNET_DGRAM: int = _SC_PII_INTERNET_STREAM + 1
export const _SC_PII_OSI_COTS: int = _SC_PII_INTERNET_DGRAM + 1
export const _SC_PII_OSI_CLTS: int = _SC_PII_OSI_COTS + 1
export const _SC_PII_OSI_M: int = _SC_PII_OSI_CLTS + 1
export const _SC_T_IOV_MAX: int = _SC_PII_OSI_M + 1
export const _SC_THREADS: int = _SC_T_IOV_MAX + 1
export const _SC_THREAD_SAFE_FUNCTIONS: int = _SC_THREADS + 1
export const _SC_GETGR_R_SIZE_MAX: int = _SC_THREAD_SAFE_FUNCTIONS + 1
export const _SC_GETPW_R_SIZE_MAX: int = _SC_GETGR_R_SIZE_MAX + 1
export const _SC_LOGIN_NAME_MAX: int = _SC_GETPW_R_SIZE_MAX + 1
export const _SC_TTY_NAME_MAX: int = _SC_LOGIN_NAME_MAX + 1
export const _SC_THREAD_DESTRUCTOR_ITERATIONS: int = _SC_TTY_NAME_MAX + 1
export const _SC_THREAD_KEYS_MAX: int = _SC_THREAD_DESTRUCTOR_ITERATIONS + 1
export const _SC_THREAD_STACK_MIN: int = _SC_THREAD_KEYS_MAX + 1
export const _SC_THREAD_THREADS_MAX: int = _SC_THREAD_STACK_MIN + 1
export const _SC_THREAD_ATTR_STACKADDR: int = _SC_THREAD_THREADS_MAX + 1
export const _SC_THREAD_ATTR_STACKSIZE: int = _SC_THREAD_ATTR_STACKADDR + 1
export const _SC_THREAD_PRIORITY_SCHEDULING: int = _SC_THREAD_ATTR_STACKSIZE + 1
export const _SC_THREAD_PRIO_INHERIT: int = _SC_THREAD_PRIORITY_SCHEDULING + 1
export const _SC_THREAD_PRIO_PROTECT: int = _SC_THREAD_PRIO_INHERIT + 1
export const _SC_THREAD_PROCESS_SHARED: int = _SC_THREAD_PRIO_PROTECT + 1
export const _SC_NPROCESSORS_CONF: int = _SC_THREAD_PROCESS_SHARED + 1
export const _SC_NPROCESSORS_ONLN: int = _SC_NPROCESSORS_CONF + 1
export const _SC_PHYS_PAGES: int = _SC_NPROCESSORS_ONLN + 1
export const _SC_AVPHYS_PAGES: int = _SC_PHYS_PAGES + 1
export const _SC_ATEXIT_MAX: int = _SC_AVPHYS_PAGES + 1
export const _SC_PASS_MAX: int = _SC_ATEXIT_MAX + 1
export const _SC_XOPEN_VERSION: int = _SC_PASS_MAX + 1
export const _SC_XOPEN_XCU_VERSION: int = _SC_XOPEN_VERSION + 1
export const _SC_XOPEN_UNIX: int = _SC_XOPEN_XCU_VERSION + 1
export const _SC_XOPEN_CRYPT: int = _SC_XOPEN_UNIX + 1
export const _SC_XOPEN_ENH_I18N: int = _SC_XOPEN_CRYPT + 1
export const _SC_XOPEN_SHM: int = _SC_XOPEN_ENH_I18N + 1
export const _SC_2_CHAR_TERM: int = _SC_XOPEN_SHM + 1
export const _SC_2_C_VERSION: int = _SC_2_CHAR_TERM + 1
export const _SC_2_UPE: int = _SC_2_C_VERSION + 1
export const _SC_XOPEN_XPG2: int = _SC_2_UPE + 1
export const _SC_XOPEN_XPG3: int = _SC_XOPEN_XPG2 + 1
export const _SC_XOPEN_XPG4: int = _SC_XOPEN_XPG3 + 1
export const _SC_CHAR_BIT: int = _SC_XOPEN_XPG4 + 1
export const _SC_CHAR_MAX: int = _SC_CHAR_BIT + 1
export const _SC_CHAR_MIN: int = _SC_CHAR_MAX + 1
export const _SC_INT_MAX: int = _SC_CHAR_MIN + 1
export const _SC_INT_MIN: int = _SC_INT_MAX + 1
export const _SC_LONG_BIT: int = _SC_INT_MIN + 1
export const _SC_WORD_BIT: int = _SC_LONG_BIT + 1
export const _SC_MB_LEN_MAX: int = _SC_WORD_BIT + 1
export const _SC_NZERO: int = _SC_MB_LEN_MAX + 1
export const _SC_SSIZE_MAX: int = _SC_NZERO + 1
export const _SC_SCHAR_MAX: int = _SC_SSIZE_MAX + 1
export const _SC_SCHAR_MIN: int = _SC_SCHAR_MAX + 1
export const _SC_SHRT_MAX: int = _SC_SCHAR_MIN + 1
export const _SC_SHRT_MIN: int = _SC_SHRT_MAX + 1
export const _SC_UCHAR_MAX: int = _SC_SHRT_MIN + 1
export const _SC_UINT_MAX: int = _SC_UCHAR_MAX + 1
export const _SC_ULONG_MAX: int = _SC_UINT_MAX + 1
export const _SC_USHRT_MAX: int = _SC_ULONG_MAX + 1
export const _SC_NL_ARGMAX: int = _SC_USHRT_MAX + 1
export const _SC_NL_LANGMAX: int = _SC_NL_ARGMAX + 1
export const _SC_NL_MSGMAX: int = _SC_NL_LANGMAX + 1
export const _SC_NL_NMAX: int = _SC_NL_MSGMAX + 1
export const _SC_NL_SETMAX: int = _SC_NL_NMAX + 1
export const _SC_NL_TEXTMAX: int = _SC_NL_SETMAX + 1
export const _SC_XBS5_ILP32_OFF32: int = _SC_NL_TEXTMAX + 1
export const _SC_XBS5_ILP32_OFFBIG: int = _SC_XBS5_ILP32_OFF32 + 1
export const _SC_XBS5_LP64_OFF64: int = _SC_XBS5_ILP32_OFFBIG + 1
export const _SC_XBS5_LPBIG_OFFBIG: int = _SC_XBS5_LP64_OFF64 + 1
export const _SC_XOPEN_LEGACY: int = _SC_XBS5_LPBIG_OFFBIG + 1
export const _SC_XOPEN_REALTIME: int = _SC_XOPEN_LEGACY + 1
export const _SC_XOPEN_REALTIME_THREADS: int = _SC_XOPEN_REALTIME + 1
export const _SC_ADVISORY_INFO: int = _SC_XOPEN_REALTIME_THREADS + 1
export const _SC_BARRIERS: int = _SC_ADVISORY_INFO + 1
export const _SC_BASE: int = _SC_BARRIERS + 1
export const _SC_C_LANG_SUPPORT: int = _SC_BASE + 1
export const _SC_C_LANG_SUPPORT_R: int = _SC_C_LANG_SUPPORT + 1
export const _SC_CLOCK_SELECTION: int = _SC_C_LANG_SUPPORT_R + 1
export const _SC_CPUTIME: int = _SC_CLOCK_SELECTION + 1
export const _SC_THREAD_CPUTIME: int = _SC_CPUTIME + 1
export const _SC_DEVICE_IO: int = _SC_THREAD_CPUTIME + 1
export const _SC_DEVICE_SPECIFIC: int = _SC_DEVICE_IO + 1
export const _SC_DEVICE_SPECIFIC_R: int = _SC_DEVICE_SPECIFIC + 1
export const _SC_FD_MGMT: int = _SC_DEVICE_SPECIFIC_R + 1
export const _SC_FIFO: int = _SC_FD_MGMT + 1
export const _SC_PIPE: int = _SC_FIFO + 1
export const _SC_FILE_ATTRIBUTES: int = _SC_PIPE + 1
export const _SC_FILE_LOCKING: int = _SC_FILE_ATTRIBUTES + 1
export const _SC_FILE_SYSTEM: int = _SC_FILE_LOCKING + 1
export const _SC_MONOTONIC_CLOCK: int = _SC_FILE_SYSTEM + 1
export const _SC_MULTI_PROCESS: int = _SC_MONOTONIC_CLOCK + 1
export const _SC_SINGLE_PROCESS: int = _SC_MULTI_PROCESS + 1
export const _SC_NETWORKING: int = _SC_SINGLE_PROCESS + 1
export const _SC_READER_WRITER_LOCKS: int = _SC_NETWORKING + 1
export const _SC_SPIN_LOCKS: int = _SC_READER_WRITER_LOCKS + 1
export const _SC_REGEXP: int = _SC_SPIN_LOCKS + 1
export const _SC_REGEX_VERSION: int = _SC_REGEXP + 1
export const _SC_SHELL: int = _SC_REGEX_VERSION + 1
export const _SC_SIGNALS: int = _SC_SHELL + 1
export const _SC_SPAWN: int = _SC_SIGNALS + 1
export const _SC_SPORADIC_SERVER: int = _SC_SPAWN + 1
export const _SC_THREAD_SPORADIC_SERVER: int = _SC_SPORADIC_SERVER + 1
export const _SC_SYSTEM_DATABASE: int = _SC_THREAD_SPORADIC_SERVER + 1
export const _SC_SYSTEM_DATABASE_R: int = _SC_SYSTEM_DATABASE + 1
export const _SC_TIMEOUTS: int = _SC_SYSTEM_DATABASE_R + 1
export const _SC_TYPED_MEMORY_OBJECTS: int = _SC_TIMEOUTS + 1
export const _SC_USER_GROUPS: int = _SC_TYPED_MEMORY_OBJECTS + 1
export const _SC_USER_GROUPS_R: int = _SC_USER_GROUPS + 1
export const _SC_2_PBS: int = _SC_USER_GROUPS_R + 1
export const _SC_2_PBS_ACCOUNTING: int = _SC_2_PBS + 1
export const _SC_2_PBS_LOCATE: int = _SC_2_PBS_ACCOUNTING + 1
export const _SC_2_PBS_MESSAGE: int = _SC_2_PBS_LOCATE + 1
export const _SC_2_PBS_TRACK: int = _SC_2_PBS_MESSAGE + 1
export const _SC_SYMLOOP_MAX: int = _SC_2_PBS_TRACK + 1
export const _SC_STREAMS: int = _SC_SYMLOOP_MAX + 1
export const _SC_2_PBS_CHECKPOINT: int = _SC_STREAMS + 1
export const _SC_V6_ILP32_OFF32: int = _SC_2_PBS_CHECKPOINT + 1
export const _SC_V6_ILP32_OFFBIG: int = _SC_V6_ILP32_OFF32 + 1
export const _SC_V6_LP64_OFF64: int = _SC_V6_ILP32_OFFBIG + 1
export const _SC_V6_LPBIG_OFFBIG: int = _SC_V6_LP64_OFF64 + 1
export const _SC_HOST_NAME_MAX: int = _SC_V6_LPBIG_OFFBIG + 1
export const _SC_TRACE: int = _SC_HOST_NAME_MAX + 1
export const _SC_TRACE_EVENT_FILTER: int = _SC_TRACE + 1
export const _SC_TRACE_INHERIT: int = _SC_TRACE_EVENT_FILTER + 1
export const _SC_TRACE_LOG: int = _SC_TRACE_INHERIT + 1
export const _SC_LEVEL1_ICACHE_SIZE: int = _SC_TRACE_LOG + 1
export const _SC_LEVEL1_ICACHE_ASSOC: int = _SC_LEVEL1_ICACHE_SIZE + 1
export const _SC_LEVEL1_ICACHE_LINESIZE: int = _SC_LEVEL1_ICACHE_ASSOC + 1
export const _SC_LEVEL1_DCACHE_SIZE: int = _SC_LEVEL1_ICACHE_LINESIZE + 1
export const _SC_LEVEL1_DCACHE_ASSOC: int = _SC_LEVEL1_DCACHE_SIZE + 1
export const _SC_LEVEL1_DCACHE_LINESIZE: int = _SC_LEVEL1_DCACHE_ASSOC + 1
export const _SC_LEVEL2_CACHE_SIZE: int = _SC_LEVEL1_DCACHE_LINESIZE + 1
export const _SC_LEVEL2_CACHE_ASSOC: int = _SC_LEVEL2_CACHE_SIZE + 1
export const _SC_LEVEL2_CACHE_LINESIZE: int = _SC_LEVEL2_CACHE_ASSOC + 1
export const _SC_LEVEL3_CACHE_SIZE: int = _SC_LEVEL2_CACHE_LINESIZE + 1
export const _SC_LEVEL3_CACHE_ASSOC: int = _SC_LEVEL3_CACHE_SIZE + 1
export const _SC_LEVEL3_CACHE_LINESIZE: int = _SC_LEVEL3_CACHE_ASSOC + 1
export const _SC_LEVEL4_CACHE_SIZE: int = _SC_LEVEL3_CACHE_LINESIZE + 1
export const _SC_LEVEL4_CACHE_ASSOC: int = _SC_LEVEL4_CACHE_SIZE + 1
export const _SC_LEVEL4_CACHE_LINESIZE: int = _SC_LEVEL4_CACHE_ASSOC + 1
export const _SC_IPV6: int = (_SC_LEVEL1_ICACHE_SIZE + 50)
export const _SC_RAW_SOCKETS: int = _SC_IPV6 + 1
export const _SC_V7_ILP32_OFF32: int = _SC_RAW_SOCKETS + 1
export const _SC_V7_ILP32_OFFBIG: int = _SC_V7_ILP32_OFF32 + 1
export const _SC_V7_LP64_OFF64: int = _SC_V7_ILP32_OFFBIG + 1
export const _SC_V7_LPBIG_OFFBIG: int = _SC_V7_LP64_OFF64 + 1
export const _SC_SS_REPL_MAX: int = _SC_V7_LPBIG_OFFBIG + 1
export const _SC_TRACE_EVENT_NAME_MAX: int = _SC_SS_REPL_MAX + 1
export const _SC_TRACE_NAME_MAX: int = _SC_TRACE_EVENT_NAME_MAX + 1
export const _SC_TRACE_SYS_MAX: int = _SC_TRACE_NAME_MAX + 1
export const _SC_TRACE_USER_EVENT_MAX: int = _SC_TRACE_SYS_MAX + 1
export const _SC_XOPEN_STREAMS: int = _SC_TRACE_USER_EVENT_MAX + 1
export const _SC_THREAD_ROBUST_PRIO_INHERIT: int = _SC_XOPEN_STREAMS + 1
export const _SC_THREAD_ROBUST_PRIO_PROTECT: int = _SC_THREAD_ROBUST_PRIO_INHERIT + 1
export const _CS_PATH: int = 0
export const _CS_V6_WIDTH_RESTRICTED_ENVS: int = _CS_PATH + 1
export const _CS_GNU_LIBC_VERSION: int = _CS_V6_WIDTH_RESTRICTED_ENVS + 1
export const _CS_GNU_LIBPTHREAD_VERSION: int = _CS_GNU_LIBC_VERSION + 1
export const _CS_V5_WIDTH_RESTRICTED_ENVS: int = _CS_GNU_LIBPTHREAD_VERSION + 1
export const _CS_V7_WIDTH_RESTRICTED_ENVS: int = _CS_V5_WIDTH_RESTRICTED_ENVS + 1
export const _CS_LFS_CFLAGS: int = 1000
export const _CS_LFS_LDFLAGS: int = _CS_LFS_CFLAGS + 1
export const _CS_LFS_LIBS: int = _CS_LFS_LDFLAGS + 1
export const _CS_LFS_LINTFLAGS: int = _CS_LFS_LIBS + 1
export const _CS_LFS64_CFLAGS: int = _CS_LFS_LINTFLAGS + 1
export const _CS_LFS64_LDFLAGS: int = _CS_LFS64_CFLAGS + 1
export const _CS_LFS64_LIBS: int = _CS_LFS64_LDFLAGS + 1
export const _CS_LFS64_LINTFLAGS: int = _CS_LFS64_LIBS + 1
export const _CS_XBS5_ILP32_OFF32_CFLAGS: int = 1100
export const _CS_XBS5_ILP32_OFF32_LDFLAGS: int = _CS_XBS5_ILP32_OFF32_CFLAGS + 1
export const _CS_XBS5_ILP32_OFF32_LIBS: int = _CS_XBS5_ILP32_OFF32_LDFLAGS + 1
export const _CS_XBS5_ILP32_OFF32_LINTFLAGS: int = _CS_XBS5_ILP32_OFF32_LIBS + 1
export const _CS_XBS5_ILP32_OFFBIG_CFLAGS: int = _CS_XBS5_ILP32_OFF32_LINTFLAGS + 1
export const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: int = _CS_XBS5_ILP32_OFFBIG_CFLAGS + 1
export const _CS_XBS5_ILP32_OFFBIG_LIBS: int = _CS_XBS5_ILP32_OFFBIG_LDFLAGS + 1
export const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: int = _CS_XBS5_ILP32_OFFBIG_LIBS + 1
export const _CS_XBS5_LP64_OFF64_CFLAGS: int = _CS_XBS5_ILP32_OFFBIG_LINTFLAGS + 1
export const _CS_XBS5_LP64_OFF64_LDFLAGS: int = _CS_XBS5_LP64_OFF64_CFLAGS + 1
export const _CS_XBS5_LP64_OFF64_LIBS: int = _CS_XBS5_LP64_OFF64_LDFLAGS + 1
export const _CS_XBS5_LP64_OFF64_LINTFLAGS: int = _CS_XBS5_LP64_OFF64_LIBS + 1
export const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: int = _CS_XBS5_LP64_OFF64_LINTFLAGS + 1
export const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: int = _CS_XBS5_LPBIG_OFFBIG_CFLAGS + 1
export const _CS_XBS5_LPBIG_OFFBIG_LIBS: int = _CS_XBS5_LPBIG_OFFBIG_LDFLAGS + 1
export const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: int = _CS_XBS5_LPBIG_OFFBIG_LIBS + 1
export const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: int = _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS + 1
export const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: int = _CS_POSIX_V6_ILP32_OFF32_CFLAGS + 1
export const _CS_POSIX_V6_ILP32_OFF32_LIBS: int = _CS_POSIX_V6_ILP32_OFF32_LDFLAGS + 1
export const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: int = _CS_POSIX_V6_ILP32_OFF32_LIBS + 1
export const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: int = _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS + 1
export const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: int = _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS + 1
export const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: int = _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS + 1
export const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: int = _CS_POSIX_V6_ILP32_OFFBIG_LIBS + 1
export const _CS_POSIX_V6_LP64_OFF64_CFLAGS: int = _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS + 1
export const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: int = _CS_POSIX_V6_LP64_OFF64_CFLAGS + 1
export const _CS_POSIX_V6_LP64_OFF64_LIBS: int = _CS_POSIX_V6_LP64_OFF64_LDFLAGS + 1
export const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: int = _CS_POSIX_V6_LP64_OFF64_LIBS + 1
export const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: int = _CS_POSIX_V6_LP64_OFF64_LINTFLAGS + 1
export const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: int = _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS + 1
export const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: int = _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS + 1
export const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: int = _CS_POSIX_V6_LPBIG_OFFBIG_LIBS + 1
export const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: int = _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS + 1
export const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: int = _CS_POSIX_V7_ILP32_OFF32_CFLAGS + 1
export const _CS_POSIX_V7_ILP32_OFF32_LIBS: int = _CS_POSIX_V7_ILP32_OFF32_LDFLAGS + 1
export const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: int = _CS_POSIX_V7_ILP32_OFF32_LIBS + 1
export const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: int = _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS + 1
export const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: int = _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS + 1
export const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: int = _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS + 1
export const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: int = _CS_POSIX_V7_ILP32_OFFBIG_LIBS + 1
export const _CS_POSIX_V7_LP64_OFF64_CFLAGS: int = _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS + 1
export const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: int = _CS_POSIX_V7_LP64_OFF64_CFLAGS + 1
export const _CS_POSIX_V7_LP64_OFF64_LIBS: int = _CS_POSIX_V7_LP64_OFF64_LDFLAGS + 1
export const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: int = _CS_POSIX_V7_LP64_OFF64_LIBS + 1
export const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: int = _CS_POSIX_V7_LP64_OFF64_LINTFLAGS + 1
export const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: int = _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS + 1
export const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: int = _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS + 1
export const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: int = _CS_POSIX_V7_LPBIG_OFFBIG_LIBS + 1
export const _CS_V6_ENV: int = _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS + 1
export const _CS_V7_ENV: int = _CS_V6_ENV + 1
export const Val_GNU_MIPS_ABI_FP_ANY: int = 0
export const Val_GNU_MIPS_ABI_FP_DOUBLE: int = 1
export const Val_GNU_MIPS_ABI_FP_SINGLE: int = 2
export const Val_GNU_MIPS_ABI_FP_SOFT: int = 3
export const Val_GNU_MIPS_ABI_FP_OLD_64: int = 4
export const Val_GNU_MIPS_ABI_FP_XX: int = 5
export const Val_GNU_MIPS_ABI_FP_64: int = 6
export const Val_GNU_MIPS_ABI_FP_64A: int = 7
export const Val_GNU_MIPS_ABI_FP_MAX: int = 7
export const DT_UNKNOWN: int = 0
export const DT_FIFO: int = 1
export const DT_CHR: int = 2
export const DT_DIR: int = 4
export const DT_BLK: int = 6
export const DT_REG: int = 8
export const DT_LNK: int = 10
export const DT_SOCK: int = 12
export const DT_WHT: int = 14
export type __fsid_t = struct { __val: [2; int]; }
export type __sigset_t = struct { __val: [16; ulong]; }
export type u_sigval = struct #union { sival_int: int; sival_ptr: *; }
export type siginfo_t = struct { si_signo: int; si_errno: int; si_code: int; __pad0: int; _sifields: struct #union { _pad: [28; int]; _kill: struct { si_pid: int; si_uid: uint; }; _timer: struct { si_tid: int; si_overrun: int; si_sigval: u_sigval; }; _rt: struct { si_pid: int; si_uid: uint; si_sigval: u_sigval; }; _sigchld: struct { si_pid: int; si_uid: uint; si_status: int; si_utime: long; si_stime: long; }; _sigfault: struct { si_addr: *; si_addr_lsb: short; _bounds: struct #union { _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; }; _sigpoll: struct { si_band: long; si_fd: int; }; _sigsys: struct { _call_addr: *; _syscall: int; _arch: uint; }; }; }
export type pthread_attr_t
export type sigevent_t = struct { sigev_value: u_sigval; sigev_signo: int; sigev_notify: int; _sigev_un: struct #union { _pad: [12; int]; _tid: int; _sigev_thread: struct { _function: def (u_sigval) -> (); _attribute: *u_pthread_attr_t; }; }; }
export type stack_t = struct { ss_sp: *; ss_flags: int; ss_size: ulong; }
export type mcontext_t = struct { gregs: [23; int64]; fpregs: *s__libc_fpstate; __reserved1: [8; uint64]; }
export type s__libc_fpstate = struct { cwd: ushort; swd: ushort; ftw: ushort; fop: ushort; rip: ulong; rdp: ulong; mxcsr: uint; mxcr_mask: uint; _st: [8; s__libc_fpxreg]; _xmm: [16; s__libc_xmmreg]; __glibc_reserved1: [24; uint]; }
export type ucontext_t = struct { uc_flags: ulong; uc_link: *ucontext_t; uc_stack: stack_t; uc_mcontext: mcontext_t; uc_sigmask: __sigset_t; __fpregs_mem: s__libc_fpstate; __ssp: [4; uint64]; }
export type __pthread_list_t = struct { __prev: *__pthread_list_t; __next: *__pthread_list_t; }
export type __pthread_slist_t = struct { __next: *__pthread_slist_t; }
export type pthread_mutexattr_t = struct #union { __size: [4; char]; __align: int; }
export type pthread_condattr_t = struct #union { __size: [4; char]; __align: int; }
export type s___pthread_mutex_s = struct { __lock: int; __count: uint; __owner: int; __nusers: uint; __kind: int; __spins: short; __elision: short; __list: __pthread_list_t; }
export type pthread_mutex_t = struct #union { __data: s___pthread_mutex_s; __size: [40; char]; __align: long; }
export type s___pthread_cond_s = struct { _1: struct #union { __wseq: uint64; __wseq32: struct { __low: uint; __high: uint; }; }; _5: struct #union { __g1_start: uint64; __g1_start32: struct { __low: uint; __high: uint; }; }; __g_refs: [2; uint]; __g_size: [2; uint]; __g1_orig_size: uint; __wrefs: uint; __g_signals: [2; uint]; }
export type pthread_cond_t = struct #union { __data: s___pthread_cond_s; __size: [48; char]; __align: int64; }
export type s___pthread_rwlock_arch_t = struct { __readers: uint; __writers: uint; __wrphase_futex: uint; __writers_futex: uint; __pad3: uint; __pad4: uint; __cur_writer: int; __shared: int; __rwelision: char; __pad1: [7; char]; __pad2: ulong; __flags: uint; }
export type pthread_rwlock_t = struct #union { __data: s___pthread_rwlock_arch_t; __size: [56; char]; __align: long; }
export type pthread_rwlockattr_t = struct #union { __size: [8; char]; __align: long; }
export type pthread_barrier_t = struct #union { __size: [32; char]; __align: long; }
export type pthread_barrierattr_t = struct #union { __size: [4; char]; __align: int; }
export type idtype_t = enum { P_ALL; P_PID; P_PGID; }
export type fd_set = struct { __fds_bits: [16; long]; }
export type div_t = struct { quot: int; rem: int; }
export type ldiv_t = struct { quot: long; rem: long; }
export type lldiv_t = struct { quot: int64; rem: int64; }
export type Elf32_Ehdr = struct { e_ident: [16; char]; e_type: ushort; e_machine: ushort; e_version: uint; e_entry: uint; e_phoff: uint; e_shoff: uint; e_flags: uint; e_ehsize: ushort; e_phentsize: ushort; e_phnum: ushort; e_shentsize: ushort; e_shnum: ushort; e_shstrndx: ushort; }
export type Elf64_Ehdr = struct { e_ident: [16; char]; e_type: ushort; e_machine: ushort; e_version: uint; e_entry: ulong; e_phoff: ulong; e_shoff: ulong; e_flags: uint; e_ehsize: ushort; e_phentsize: ushort; e_phnum: ushort; e_shentsize: ushort; e_shnum: ushort; e_shstrndx: ushort; }
export type Elf32_Shdr = struct { sh_name: uint; sh_type: uint; sh_flags: uint; sh_addr: uint; sh_offset: uint; sh_size: uint; sh_link: uint; sh_info: uint; sh_addralign: uint; sh_entsize: uint; }
export type Elf64_Shdr = struct { sh_name: uint; sh_type: uint; sh_flags: ulong; sh_addr: ulong; sh_offset: ulong; sh_size: ulong; sh_link: uint; sh_info: uint; sh_addralign: ulong; sh_entsize: ulong; }
export type Elf32_Chdr = struct { ch_type: uint; ch_size: uint; ch_addralign: uint; }
export type Elf64_Chdr = struct { ch_type: uint; ch_reserved: uint; ch_size: ulong; ch_addralign: ulong; }
export type Elf32_Sym = struct { st_name: uint; st_value: uint; st_size: uint; st_info: char; st_other: char; st_shndx: ushort; }
export type Elf64_Sym = struct { st_name: uint; st_info: char; st_other: char; st_shndx: ushort; st_value: ulong; st_size: ulong; }
export type Elf32_Syminfo = struct { si_boundto: ushort; si_flags: ushort; }
export type Elf64_Syminfo = struct { si_boundto: ushort; si_flags: ushort; }
export type Elf32_Rel = struct { r_offset: uint; r_info: uint; }
export type Elf64_Rel = struct { r_offset: ulong; r_info: ulong; }
export type Elf32_Rela = struct { r_offset: uint; r_info: uint; r_addend: int; }
export type Elf64_Rela = struct { r_offset: ulong; r_info: ulong; r_addend: long; }
export type Elf32_Phdr = struct { p_type: uint; p_offset: uint; p_vaddr: uint; p_paddr: uint; p_filesz: uint; p_memsz: uint; p_flags: uint; p_align: uint; }
export type Elf64_Phdr = struct { p_type: uint; p_flags: uint; p_offset: ulong; p_vaddr: ulong; p_paddr: ulong; p_filesz: ulong; p_memsz: ulong; p_align: ulong; }
export type Elf32_Dyn = struct { d_tag: int; d_un: struct #union { d_val: uint; d_ptr: uint; }; }
export type Elf64_Dyn = struct { d_tag: long; d_un: struct #union { d_val: ulong; d_ptr: ulong; }; }
export type Elf32_Verdef = struct { vd_version: ushort; vd_flags: ushort; vd_ndx: ushort; vd_cnt: ushort; vd_hash: uint; vd_aux: uint; vd_next: uint; }
export type Elf64_Verdef = struct { vd_version: ushort; vd_flags: ushort; vd_ndx: ushort; vd_cnt: ushort; vd_hash: uint; vd_aux: uint; vd_next: uint; }
export type Elf32_Verdaux = struct { vda_name: uint; vda_next: uint; }
export type Elf64_Verdaux = struct { vda_name: uint; vda_next: uint; }
export type Elf32_Verneed = struct { vn_version: ushort; vn_cnt: ushort; vn_file: uint; vn_aux: uint; vn_next: uint; }
export type Elf64_Verneed = struct { vn_version: ushort; vn_cnt: ushort; vn_file: uint; vn_aux: uint; vn_next: uint; }
export type Elf32_Vernaux = struct { vna_hash: uint; vna_flags: ushort; vna_other: ushort; vna_name: uint; vna_next: uint; }
export type Elf64_Vernaux = struct { vna_hash: uint; vna_flags: ushort; vna_other: ushort; vna_name: uint; vna_next: uint; }
export type Elf32_auxv_t = struct { a_type: uint; a_un: struct #union { a_val: uint; }; }
export type Elf64_auxv_t = struct { a_type: ulong; a_un: struct #union { a_val: ulong; }; }
export type Elf32_Nhdr = struct { n_namesz: uint; n_descsz: uint; n_type: uint; }
export type Elf64_Nhdr = struct { n_namesz: uint; n_descsz: uint; n_type: uint; }
export type Elf32_Move = struct { m_value: ulong; m_info: uint; m_poffset: uint; m_repeat: ushort; m_stride: ushort; }
export type Elf64_Move = struct { m_value: ulong; m_info: ulong; m_poffset: ulong; m_repeat: ushort; m_stride: ushort; }
export type Elf32_gptab = struct #union { gt_header: struct { gt_current_g_value: uint; gt_unused: uint; }; gt_entry: struct { gt_g_value: uint; gt_bytes: uint; }; }
export type Elf32_RegInfo = struct { ri_gprmask: uint; ri_cprmask: [4; uint]; ri_gp_value: int; }
export type Elf_Options = struct { kind: char; size: char; section: ushort; info: uint; }
export type Elf_Options_Hw = struct { hwp_flags1: uint; hwp_flags2: uint; }
export type Elf32_Lib = struct { l_name: uint; l_time_stamp: uint; l_checksum: uint; l_version: uint; l_flags: uint; }
export type Elf64_Lib = struct { l_name: uint; l_time_stamp: uint; l_checksum: uint; l_version: uint; l_flags: uint; }
export type Elf_MIPS_ABIFlags_v0 = struct { version: ushort; isa_level: char; isa_rev: char; gpr_size: char; cpr1_size: char; cpr2_size: char; fp_abi: char; isa_ext: uint; ases: uint; flags1: uint; flags2: uint; }
export type DIR
export type s_timespec = struct { tv_sec: long; tv_nsec: long; }
export type s_stat = struct { st_dev: ulong; st_ino: ulong; st_nlink: ulong; st_mode: uint; st_uid: uint; st_gid: uint; __pad0: int; st_rdev: ulong; st_size: long; st_blksize: long; st_blocks: long; st_atim: s_timespec; st_mtim: s_timespec; st_ctim: s_timespec; __glibc_reserved: [3; long]; }
export type s_winsize = struct { ws_row: ushort; ws_col: ushort; ws_xpixel: ushort; ws_ypixel: ushort; }
export type s_termio = struct { c_iflag: ushort; c_oflag: ushort; c_cflag: ushort; c_lflag: ushort; c_line: char; c_cc: [8; char]; }
export type u_pthread_attr_t = struct #union { __size: [56; char]; __align: long; }
export type s_sigaction = struct { __sigaction_handler: struct #union { sa_handler: def (int) -> (); sa_sigaction: def (int, *siginfo_t, *) -> (); }; sa_mask: __sigset_t; sa_flags: int; sa_restorer: def () -> (); }
export type s__fpx_sw_bytes = struct { magic1: uint; extended_size: uint; xstate_bv: ulong; xstate_size: uint; __glibc_reserved1: [7; uint]; }
export type s__fpreg = struct { significand: [4; ushort]; exponent: ushort; }
export type s__fpxreg = struct { significand: [4; ushort]; exponent: ushort; __glibc_reserved1: [3; ushort]; }
export type s__xmmreg = struct { element: [4; uint]; }
export type s__fpstate = struct { cwd: ushort; swd: ushort; ftw: ushort; fop: ushort; rip: ulong; rdp: ulong; mxcsr: uint; mxcr_mask: uint; _st: [8; s__fpxreg]; _xmm: [16; s__xmmreg]; __glibc_reserved1: [24; uint]; }
export type s_sigcontext = struct { r8: ulong; r9: ulong; r10: ulong; r11: ulong; r12: ulong; r13: ulong; r14: ulong; r15: ulong; rdi: ulong; rsi: ulong; rbp: ulong; rbx: ulong; rdx: ulong; rax: ulong; rcx: ulong; rsp: ulong; rip: ulong; eflags: ulong; cs: ushort; gs: ushort; fs: ushort; __pad0: ushort; err: ulong; trapno: ulong; oldmask: ulong; cr2: ulong; _27: struct #union { fpstate: *s__fpstate; __fpstate_word: ulong; }; __reserved1: [8; ulong]; }
export type s__xsave_hdr = struct { xstate_bv: ulong; __glibc_reserved1: [2; ulong]; __glibc_reserved2: [5; ulong]; }
export type s__ymmh_state = struct { ymmh_space: [64; uint]; }
export type s__xstate = struct { fpstate: s__fpstate; xstate_hdr: s__xsave_hdr; ymmh: s__ymmh_state; }
export type s__libc_fpxreg = struct { significand: [4; ushort]; exponent: ushort; __glibc_reserved1: [3; ushort]; }
export type s__libc_xmmreg = struct { element: [4; uint]; }
export type s_sigstack = struct { ss_sp: *; ss_onstack: int; }
export type s_rusage
export type s_timeval = struct { tv_sec: long; tv_usec: long; }
export type s_termios = struct { c_iflag: uint; c_oflag: uint; c_cflag: uint; c_lflag: uint; c_line: char; c_cc: [32; char]; c_ispeed: uint; c_ospeed: uint; }
export type s_random_data = struct { fptr: *int; rptr: *int; state: *int; rand_type: int; rand_deg: int; rand_sep: int; end_ptr: *int; }
export type s_drand48_data = struct { __x: [3; ushort]; __old_x: [3; ushort]; __c: ushort; __init: ushort; __a: uint64; }
export type s_pollfd = struct { fd: int; events: short; revents: short; }
export type s_dirent = struct { d_ino: ulong; d_off: long; d_reclen: ushort; d_type: char; d_name: [256; char]; }
export import def #extern stat(__file: *char, __buf: *s_stat) -> int
export import def #extern fstat(__fd: int, __buf: *s_stat) -> int
export import def #extern fstatat(__fd: int, __file: *char, __buf: *s_stat, __flag: int) -> int
export import def #extern lstat(__file: *char, __buf: *s_stat) -> int
export import def #extern chmod(__file: *char, __mode: uint) -> int
export import def #extern fchmod(__fd: int, __mode: uint) -> int
export import def #extern fchmodat(__fd: int, __file: *char, __mode: uint, __flag: int) -> int
export import def #extern umask(__mask: uint) -> uint
export import def #extern mkdir(__path: *char, __mode: uint) -> int
export import def #extern mkdirat(__fd: int, __path: *char, __mode: uint) -> int
export import def #extern mknod(__path: *char, __mode: uint, __dev: ulong) -> int
export import def #extern mknodat(__fd: int, __path: *char, __mode: uint, __dev: ulong) -> int
export import def #extern mkfifo(__path: *char, __mode: uint) -> int
export import def #extern mkfifoat(__fd: int, __path: *char, __mode: uint) -> int
export import def #extern utimensat(__fd: int, __path: *char, __times: *s_timespec, __flags: int) -> int
export import def #extern futimens(__fd: int, __times: *s_timespec) -> int
export import def #extern __fxstat(__ver: int, __fildes: int, __stat_buf: *s_stat) -> int
export import def #extern __xstat(__ver: int, __filename: *char, __stat_buf: *s_stat) -> int
export import def #extern __lxstat(__ver: int, __filename: *char, __stat_buf: *s_stat) -> int
export import def #extern __fxstatat(__ver: int, __fildes: int, __filename: *char, __stat_buf: *s_stat, __flag: int) -> int
export import def #extern __xmknod(__ver: int, __path: *char, __mode: uint, __dev: *ulong) -> int
export import def #extern __xmknodat(__ver: int, __fd: int, __path: *char, __mode: uint, __dev: *ulong) -> int
export import def #extern ioctl(__fd: int, __request: ulong, ...) -> int
export import def #extern __sysv_signal(__sig: int, __handler: def (int) -> ()) -> def (int) -> ()
export import def #extern signal(__sig: int, __handler: def (int) -> ()) -> def (int) -> ()
export import def #extern kill(__pid: int, __sig: int) -> int
export import def #extern killpg(__pgrp: int, __sig: int) -> int
export import def #extern raise(__sig: int) -> int
export import def #extern ssignal(__sig: int, __handler: def (int) -> ()) -> def (int) -> ()
export import def #extern gsignal(__sig: int) -> int
export import def #extern psignal(__sig: int, __s: *char)
export import def #extern psiginfo(__pinfo: *siginfo_t, __s: *char)
export import def #extern sigblock(__mask: int) -> int
export import def #extern sigsetmask(__mask: int) -> int
export import def #extern sigemptyset(__set: *__sigset_t) -> int
export import def #extern sigfillset(__set: *__sigset_t) -> int
export import def #extern sigaddset(__set: *__sigset_t, __signo: int) -> int
export import def #extern sigdelset(__set: *__sigset_t, __signo: int) -> int
export import def #extern sigismember(__set: *__sigset_t, __signo: int) -> int
export import def #extern sigprocmask(__how: int, __set: *__sigset_t, __oset: *__sigset_t) -> int
export import def #extern sigsuspend(__set: *__sigset_t) -> int
export import def #extern sigaction(__sig: int, __act: *s_sigaction, __oact: *s_sigaction) -> int
export import def #extern sigpending(__set: *__sigset_t) -> int
export import def #extern sigwait(__set: *__sigset_t, __sig: *int) -> int
export import def #extern sigwaitinfo(__set: *__sigset_t, __info: *siginfo_t) -> int
export import def #extern sigtimedwait(__set: *__sigset_t, __info: *siginfo_t, __timeout: *s_timespec) -> int
export import def #extern sigqueue(__pid: int, __sig: int, __val: u_sigval) -> int
export import def #extern siginterrupt(__sig: int, __interrupt: int) -> int
export import def #extern sigaltstack(__ss: *stack_t, __oss: *stack_t) -> int
export import def #extern pthread_sigmask(__how: int, __newmask: *__sigset_t, __oldmask: *__sigset_t) -> int
export import def #extern pthread_kill(__threadid: ulong, __signo: int) -> int
export import def #extern __libc_current_sigrtmin() -> int
export import def #extern __libc_current_sigrtmax() -> int
export import def #extern wait(__stat_loc: *int) -> int
export import def #extern waitpid(__pid: int, __stat_loc: *int, __options: int) -> int
export import def #extern waitid(__idtype: idtype_t, __id: uint, __infop: *siginfo_t, __options: int) -> int
export import def #extern wait3(__stat_loc: *int, __options: int, __usage: *s_rusage) -> int
export import def #extern wait4(__pid: int, __stat_loc: *int, __options: int, __usage: *s_rusage) -> int
export import def #extern mmap(__addr: *, __len: ulong, __prot: int, __flags: int, __fd: int, __offset: long) -> *
export import def #extern munmap(__addr: *, __len: ulong) -> int
export import def #extern mprotect(__addr: *, __len: ulong, __prot: int) -> int
export import def #extern msync(__addr: *, __len: ulong, __flags: int) -> int
export import def #extern madvise(__addr: *, __len: ulong, __advice: int) -> int
export import def #extern posix_madvise(__addr: *, __len: ulong, __advice: int) -> int
export import def #extern mlock(__addr: *, __len: ulong) -> int
export import def #extern munlock(__addr: *, __len: ulong) -> int
export import def #extern mlockall(__flags: int) -> int
export import def #extern munlockall() -> int
export import def #extern mincore(__start: *, __len: ulong, __vec: *char) -> int
export import def #extern select(__nfds: int, __readfds: *fd_set, __writefds: *fd_set, __exceptfds: *fd_set, __timeout: *s_timeval) -> int
export import def #extern pselect(__nfds: int, __readfds: *fd_set, __writefds: *fd_set, __exceptfds: *fd_set, __timeout: *s_timespec, __sigmask: *__sigset_t) -> int
export import def #extern access(__name: *char, __type: int) -> int
export import def #extern faccessat(__fd: int, __file: *char, __type: int, __flag: int) -> int
export import def #extern lseek(__fd: int, __offset: long, __whence: int) -> long
export import def #extern close(__fd: int) -> int
export import def #extern read(__fd: int, __buf: *, __nbytes: ulong) -> long
export import def #extern write(__fd: int, __buf: *, __n: ulong) -> long
export import def #extern pread(__fd: int, __buf: *, __nbytes: ulong, __offset: long) -> long
export import def #extern pwrite(__fd: int, __buf: *, __n: ulong, __offset: long) -> long
export import def #extern pipe(__pipedes: *int) -> int
export import def #extern alarm(__seconds: uint) -> uint
export import def #extern sleep(__seconds: uint) -> uint
export import def #extern ualarm(__value: uint, __interval: uint) -> uint
export import def #extern usleep(__useconds: uint) -> int
export import def #extern pause() -> int
export import def #extern chown(__file: *char, __owner: uint, __group: uint) -> int
export import def #extern fchown(__fd: int, __owner: uint, __group: uint) -> int
export import def #extern lchown(__file: *char, __owner: uint, __group: uint) -> int
export import def #extern fchownat(__fd: int, __file: *char, __owner: uint, __group: uint, __flag: int) -> int
export import def #extern chdir(__path: *char) -> int
export import def #extern fchdir(__fd: int) -> int
export import def #extern getcwd(__buf: *char, __size: ulong) -> *char
export import def #extern dup(__fd: int) -> int
export import def #extern dup2(__fd: int, __fd2: int) -> int
export import def #extern execve(__path: *char, __argv: **char, __envp: **char) -> int
export import def #extern fexecve(__fd: int, __argv: **char, __envp: **char) -> int
export import def #extern execv(__path: *char, __argv: **char) -> int
export import def #extern execle(__path: *char, __arg: *char, ...) -> int
export import def #extern execl(__path: *char, __arg: *char, ...) -> int
export import def #extern execvp(__file: *char, __argv: **char) -> int
export import def #extern execlp(__file: *char, __arg: *char, ...) -> int
export import def #extern nice(__inc: int) -> int
export import def #extern _exit(__status: int)
export import def #extern pathconf(__path: *char, __name: int) -> long
export import def #extern fpathconf(__fd: int, __name: int) -> long
export import def #extern sysconf(__name: int) -> long
export import def #extern confstr(__name: int, __buf: *char, __len: ulong) -> ulong
export import def #extern getpid() -> int
export import def #extern getppid() -> int
export import def #extern getpgrp() -> int
export import def #extern __getpgid(__pid: int) -> int
export import def #extern getpgid(__pid: int) -> int
export import def #extern setpgid(__pid: int, __pgid: int) -> int
export import def #extern setpgrp() -> int
export import def #extern setsid() -> int
export import def #extern getsid(__pid: int) -> int
export import def #extern getuid() -> uint
export import def #extern geteuid() -> uint
export import def #extern getgid() -> uint
export import def #extern getegid() -> uint
export import def #extern getgroups(__size: int, __list: *uint) -> int
export import def #extern setuid(__uid: uint) -> int
export import def #extern setreuid(__ruid: uint, __euid: uint) -> int
export import def #extern seteuid(__uid: uint) -> int
export import def #extern setgid(__gid: uint) -> int
export import def #extern setregid(__rgid: uint, __egid: uint) -> int
export import def #extern setegid(__gid: uint) -> int
export import def #extern fork() -> int
export import def #extern vfork() -> int
export import def #extern ttyname(__fd: int) -> *char
export import def #extern ttyname_r(__fd: int, __buf: *char, __buflen: ulong) -> int
export import def #extern isatty(__fd: int) -> int
export import def #extern ttyslot() -> int
export import def #extern link(__from: *char, __to: *char) -> int
export import def #extern linkat(__fromfd: int, __from: *char, __tofd: int, __to: *char, __flags: int) -> int
export import def #extern symlink(__from: *char, __to: *char) -> int
export import def #extern readlink(__path: *char, __buf: *char, __len: ulong) -> long
export import def #extern symlinkat(__from: *char, __tofd: int, __to: *char) -> int
export import def #extern readlinkat(__fd: int, __path: *char, __buf: *char, __len: ulong) -> long
export import def #extern unlink(__name: *char) -> int
export import def #extern unlinkat(__fd: int, __name: *char, __flag: int) -> int
export import def #extern rmdir(__path: *char) -> int
export import def #extern tcgetpgrp(__fd: int) -> int
export import def #extern tcsetpgrp(__fd: int, __pgrp_id: int) -> int
export import def #extern getlogin() -> *char
export import def #extern getlogin_r(__name: *char, __name_len: ulong) -> int
export import def #extern getopt(___argc: int, ___argv: **char, __shortopts: *char) -> int
export import def #extern gethostname(__name: *char, __len: ulong) -> int
export import def #extern sethostname(__name: *char, __len: ulong) -> int
export import def #extern sethostid(__id: long) -> int
export import def #extern getdomainname(__name: *char, __len: ulong) -> int
export import def #extern setdomainname(__name: *char, __len: ulong) -> int
export import def #extern vhangup() -> int
export import def #extern acct(__name: *char) -> int
export import def #extern getusershell() -> *char
export import def #extern endusershell()
export import def #extern setusershell()
export import def #extern daemon(__nochdir: int, __noclose: int) -> int
export import def #extern chroot(__path: *char) -> int
export import def #extern getpass(__prompt: *char) -> *char
export import def #extern fsync(__fd: int) -> int
export import def #extern gethostid() -> long
export import def #extern sync()
export import def #extern getpagesize() -> int
export import def #extern getdtablesize() -> int
export import def #extern truncate(__file: *char, __length: long) -> int
export import def #extern ftruncate(__fd: int, __length: long) -> int
export import def #extern brk(__addr: *) -> int
export import def #extern sbrk(__delta: long) -> *
export import def #extern syscall(__sysno: long, ...) -> long
export import def #extern lockf(__fd: int, __cmd: int, __len: long) -> int
export import def #extern fdatasync(__fildes: int) -> int
export import def #extern getentropy(__buffer: *, __length: ulong) -> int
export import def #extern cfgetospeed(__termios_p: *s_termios) -> uint
export import def #extern cfgetispeed(__termios_p: *s_termios) -> uint
export import def #extern cfsetospeed(__termios_p: *s_termios, __speed: uint) -> int
export import def #extern cfsetispeed(__termios_p: *s_termios, __speed: uint) -> int
export import def #extern cfsetspeed(__termios_p: *s_termios, __speed: uint) -> int
export import def #extern tcgetattr(__fd: int, __termios_p: *s_termios) -> int
export import def #extern tcsetattr(__fd: int, __optional_actions: int, __termios_p: *s_termios) -> int
export import def #extern cfmakeraw(__termios_p: *s_termios)
export import def #extern tcsendbreak(__fd: int, __duration: int) -> int
export import def #extern tcdrain(__fd: int) -> int
export import def #extern tcflush(__fd: int, __queue_selector: int) -> int
export import def #extern tcflow(__fd: int, __action: int) -> int
export import def #extern tcgetsid(__fd: int) -> int
export import def #extern __ctype_get_mb_cur_max() -> ulong
export import def #extern atoll(__nptr: *char) -> int64
export import def #extern strtof(__nptr: *char, __endptr: **char) -> float
export import def #extern strtold(__nptr: *char, __endptr: **char) -> float80
export import def #extern strtoq(__nptr: *char, __endptr: **char, __base: int) -> int64
export import def #extern strtouq(__nptr: *char, __endptr: **char, __base: int) -> uint64
export import def #extern strtoll(__nptr: *char, __endptr: **char, __base: int) -> int64
export import def #extern strtoull(__nptr: *char, __endptr: **char, __base: int) -> uint64
export import def #extern l64a(__n: long) -> *char
export import def #extern a64l(__s: *char) -> long
export import def #extern random() -> long
export import def #extern srandom(__seed: uint)
export import def #extern initstate(__seed: uint, __statebuf: *char, __statelen: ulong) -> *char
export import def #extern setstate(__statebuf: *char) -> *char
export import def #extern random_r(__buf: *s_random_data, __result: *int) -> int
export import def #extern srandom_r(__seed: uint, __buf: *s_random_data) -> int
export import def #extern initstate_r(__seed: uint, __statebuf: *char, __statelen: ulong, __buf: *s_random_data) -> int
export import def #extern setstate_r(__statebuf: *char, __buf: *s_random_data) -> int
export import def #extern rand_r(__seed: *uint) -> int
export import def #extern drand48() -> double
export import def #extern erand48(__xsubi: *ushort) -> double
export import def #extern lrand48() -> long
export import def #extern nrand48(__xsubi: *ushort) -> long
export import def #extern mrand48() -> long
export import def #extern jrand48(__xsubi: *ushort) -> long
export import def #extern srand48(__seedval: long)
export import def #extern seed48(__seed16v: *ushort) -> *ushort
export import def #extern lcong48(__param: *ushort)
export import def #extern drand48_r(__buffer: *s_drand48_data, __result: *double) -> int
export import def #extern erand48_r(__xsubi: *ushort, __buffer: *s_drand48_data, __result: *double) -> int
export import def #extern lrand48_r(__buffer: *s_drand48_data, __result: *long) -> int
export import def #extern nrand48_r(__xsubi: *ushort, __buffer: *s_drand48_data, __result: *long) -> int
export import def #extern mrand48_r(__buffer: *s_drand48_data, __result: *long) -> int
export import def #extern jrand48_r(__xsubi: *ushort, __buffer: *s_drand48_data, __result: *long) -> int
export import def #extern srand48_r(__seedval: long, __buffer: *s_drand48_data) -> int
export import def #extern seed48_r(__seed16v: *ushort, __buffer: *s_drand48_data) -> int
export import def #extern lcong48_r(__param: *ushort, __buffer: *s_drand48_data) -> int
export import def #extern reallocarray(__ptr: *, __nmemb: ulong, __size: ulong) -> *
export import def #extern valloc(__size: ulong) -> *
export import def #extern posix_memalign(__memptr: **, __alignment: ulong, __size: ulong) -> int
export import def #extern aligned_alloc(__alignment: ulong, __size: ulong) -> *
export import def #extern at_quick_exit(__func: def () -> ()) -> int
export import def #extern on_exit(__func: def (int, *) -> (), __arg: *) -> int
export import def #extern quick_exit(__status: int)
export import def #extern _Exit(__status: int)
export import def #extern putenv(__string: *char) -> int
export import def #extern setenv(__name: *char, __value: *char, __replace: int) -> int
export import def #extern unsetenv(__name: *char) -> int
export import def #extern clearenv() -> int
export import def #extern mkstemp(__template: *char) -> int
export import def #extern mkstemps(__template: *char, __suffixlen: int) -> int
export import def #extern mkdtemp(__template: *char) -> *char
export import def #extern realpath(__name: *char, __resolved: *char) -> *char
export import def #extern llabs(__x: int64) -> int64
export import def #extern lldiv(__numer: int64, __denom: int64) -> lldiv_t
export import def #extern ecvt(__value: double, __ndigit: int, __decpt: *int, __sign: *int) -> *char
export import def #extern fcvt(__value: double, __ndigit: int, __decpt: *int, __sign: *int) -> *char
export import def #extern gcvt(__value: double, __ndigit: int, __buf: *char) -> *char
export import def #extern qecvt(__value: float80, __ndigit: int, __decpt: *int, __sign: *int) -> *char
export import def #extern qfcvt(__value: float80, __ndigit: int, __decpt: *int, __sign: *int) -> *char
export import def #extern qgcvt(__value: float80, __ndigit: int, __buf: *char) -> *char
export import def #extern ecvt_r(__value: double, __ndigit: int, __decpt: *int, __sign: *int, __buf: *char, __len: ulong) -> int
export import def #extern fcvt_r(__value: double, __ndigit: int, __decpt: *int, __sign: *int, __buf: *char, __len: ulong) -> int
export import def #extern qecvt_r(__value: float80, __ndigit: int, __decpt: *int, __sign: *int, __buf: *char, __len: ulong) -> int
export import def #extern qfcvt_r(__value: float80, __ndigit: int, __decpt: *int, __sign: *int, __buf: *char, __len: ulong) -> int
export import def #extern rpmatch(__response: *char) -> int
export import def #extern getsubopt(__optionp: **char, __tokens: **char, __valuep: **char) -> int
export import def #extern getloadavg(__loadavg: *double, __nelem: int) -> int
export import def #extern dlopen(__file: *char, __mode: int) -> *
export import def #extern dlclose(__handle: *) -> int
export import def #extern dlsym(__handle: *, __name: *char) -> *
export import def #extern dlerror() -> *char
export import def #extern poll(__fds: *s_pollfd, __nfds: ulong, __timeout: int) -> int
export import def #extern fnmatch(__pattern: *char, __name: *char, __flags: int) -> int
export import def #extern opendir(__name: *char) -> *DIR
export import def #extern fdopendir(__fd: int) -> *DIR
export import def #extern closedir(__dirp: *DIR) -> int
export import def #extern readdir(__dirp: *DIR) -> *s_dirent
export import def #extern readdir_r(__dirp: *DIR, __entry: *s_dirent, __result: **s_dirent) -> int
export import def #extern rewinddir(__dirp: *DIR)
export import def #extern seekdir(__dirp: *DIR, __pos: long)
export import def #extern telldir(__dirp: *DIR) -> long
export import def #extern dirfd(__dirp: *DIR) -> int
export import def #extern scandir(__dir: *char, __namelist: ***s_dirent, __selector: def (*s_dirent) -> (int), __cmp: def (**s_dirent, **s_dirent) -> (int)) -> int
export import def #extern alphasort(__e1: **s_dirent, __e2: **s_dirent) -> int
export import def #extern getdirentries(__fd: int, __buf: *char, __nbytes: ulong, __basep: *long) -> long
export import def #extern __errno_location() -> *int
export import def #extern backtrace(__array: **, __size: int) -> int
export import def #extern backtrace_symbols(__array: **, __size: int) -> **char
export import def #extern backtrace_symbols_fd(__array: **, __size: int, __fd: int)
export import var #extern __environ: **char
export import var #extern optarg: *char
export import var #extern optind: int
export import var #extern opterr: int
export import var #extern optopt: int
