export type s___crt_locale_data_public = struct { _locale_pctype: *ushort; _locale_mb_cur_max: int; _locale_lc_codepage: uint; }
export type s___crt_locale_data
export type s___crt_multibyte_data
export type s___crt_locale_pointers = struct { locinfo: *s___crt_locale_data; mbcinfo: *s___crt_multibyte_data; }
export type s__Mbstatet = struct { _Wchar: ulong; _Byte: ushort; _State: ushort; }
export type s__div_t = struct { quot: int; rem: int; }
export type s__ldiv_t = struct { quot: long; rem: long; }
export type s__lldiv_t = struct { quot: int64; rem: int64; }
export type s__LDOUBLE = struct { ld: [10; uint8]; }
export type s__CRT_DOUBLE = struct { x: double; }
export type s__CRT_FLOAT = struct { f: float; }
export type s__LONGDOUBLE = struct { x: float80; }
export type s__LDBL12 = struct { ld12: [12; uint8]; }
export type s__iobuf = struct { _Placeholder: *; }
export type u__double_val = struct #union { _Sh: [4; ushort]; _Val: double; }
export type u__float_val = struct #union { _Sh: [2; ushort]; _Val: float; }
export type u__ldouble_val = struct #union { _Sh: [4; ushort]; _Val: float80; }
export type u__float_const = struct #union { _Word: [4; ushort]; _Float: float; _Double: double; _Long_double: float80; }
export type s__SETJMP_FLOAT128 = struct { Part: [2; uint64]; }
export type s__JUMP_BUFFER = struct { Frame: uint64; Rbx: uint64; Rsp: uint64; Rbp: uint64; Rsi: uint64; Rdi: uint64; R12: uint64; R13: uint64; R14: uint64; R15: uint64; Rip: uint64; MxCsr: ulong; FpCsr: ushort; Spare: ushort; Xmm6: s__SETJMP_FLOAT128; Xmm7: s__SETJMP_FLOAT128; Xmm8: s__SETJMP_FLOAT128; Xmm9: s__SETJMP_FLOAT128; Xmm10: s__SETJMP_FLOAT128; Xmm11: s__SETJMP_FLOAT128; Xmm12: s__SETJMP_FLOAT128; Xmm13: s__SETJMP_FLOAT128; Xmm14: s__SETJMP_FLOAT128; Xmm15: s__SETJMP_FLOAT128; }
export type s_tm = struct { tm_sec: int; tm_min: int; tm_hour: int; tm_mday: int; tm_mon: int; tm_year: int; tm_wday: int; tm_yday: int; tm_isdst: int; }
export type s__timespec32 = struct { tv_sec: long; tv_nsec: long; }
export type s__timespec64 = struct { tv_sec: int64; tv_nsec: long; }
export type s_timespec = struct { tv_sec: int64; tv_nsec: long; }
export type s__exception = struct { type_: int; name: *char; arg1: double; arg2: double; retval: double; }
export type s__complex = struct { x: double; y: double; }
export type s_lconv = struct { decimal_point: *char; thousands_sep: *char; grouping: *char; int_curr_symbol: *char; currency_symbol: *char; mon_decimal_point: *char; mon_thousands_sep: *char; mon_grouping: *char; positive_sign: *char; negative_sign: *char; int_frac_digits: char; frac_digits: char; p_cs_precedes: char; p_sep_by_space: char; n_cs_precedes: char; n_sep_by_space: char; p_sign_posn: char; n_sign_posn: char; _W_decimal_point: *ushort; _W_thousands_sep: *ushort; _W_int_curr_symbol: *ushort; _W_currency_symbol: *ushort; _W_mon_decimal_point: *ushort; _W_mon_thousands_sep: *ushort; _W_positive_sign: *ushort; _W_negative_sign: *ushort; }
export type s__wfinddata32_t = struct { attrib: uint; time_create: long; time_access: long; time_write: long; size: ulong; name: [260; ushort]; }
export type s__wfinddata32i64_t = struct { attrib: uint; time_create: long; time_access: long; time_write: long; size: int64; name: [260; ushort]; }
export type s__wfinddata64i32_t = struct { attrib: uint; time_create: int64; time_access: int64; time_write: int64; size: ulong; name: [260; ushort]; }
export type s__wfinddata64_t = struct { attrib: uint; time_create: int64; time_access: int64; time_write: int64; size: int64; name: [260; ushort]; }
export type s__finddata32_t = struct { attrib: uint; time_create: long; time_access: long; time_write: long; size: ulong; name: [260; char]; }
export type s__finddata32i64_t = struct { attrib: uint; time_create: long; time_access: long; time_write: long; size: int64; name: [260; char]; }
export type s__finddata64i32_t = struct { attrib: uint; time_create: int64; time_access: int64; time_write: int64; size: ulong; name: [260; char]; }
export type s___finddata64_t = struct { attrib: uint; time_create: int64; time_access: int64; time_write: int64; size: int64; name: [260; char]; }
export const __llvm__: int = 1
export const __clang__: int = 1
export const __clang_major__: int = 16
export const __clang_minor__: int = 0
export const __clang_patchlevel__: int = 6
export const __clang_version__: [char] = "16.0.6 (https://github.com/llvm/llvm-project.git 7cbf1a2591520c2491aa35339f227775f4d3adf6)"
export const __ATOMIC_RELAXED: int = 0
export const __ATOMIC_CONSUME: int = 1
export const __ATOMIC_ACQUIRE: int = 2
export const __ATOMIC_RELEASE: int = 3
export const __ATOMIC_ACQ_REL: int = 4
export const __ATOMIC_SEQ_CST: int = 5
export const __OPENCL_MEMORY_SCOPE_WORK_ITEM: int = 0
export const __OPENCL_MEMORY_SCOPE_WORK_GROUP: int = 1
export const __OPENCL_MEMORY_SCOPE_DEVICE: int = 2
export const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: int = 3
export const __OPENCL_MEMORY_SCOPE_SUB_GROUP: int = 4
export const __PRAGMA_REDEFINE_EXTNAME: int = 1
export const __VERSION__: [char] = "Clang 16.0.6 (https://github.com/llvm/llvm-project.git 7cbf1a2591520c2491aa35339f227775f4d3adf6)"
export const __OBJC_BOOL_IS_BOOL: int = 0
export const __CONSTANT_CFSTRINGS__: int = 1
export const __clang_literal_encoding__: [char] = "UTF-8"
export const __clang_wide_literal_encoding__: [char] = "UTF-16"
export const __ORDER_LITTLE_ENDIAN__: int = 1234
export const __ORDER_BIG_ENDIAN__: int = 4321
export const __ORDER_PDP_ENDIAN__: int = 3412
export const __LITTLE_ENDIAN__: int = 1
export const __CHAR_BIT__: int = 8
export const __BOOL_WIDTH__: int = 8
export const __SHRT_WIDTH__: int = 16
export const __INT_WIDTH__: int = 32
export const __LONG_WIDTH__: int = 32
export const __LLONG_WIDTH__: int = 64
export const __BITINT_MAXWIDTH__: int = 8388608
export const __SCHAR_MAX__: int = 127
export const __SHRT_MAX__: int = 32767
export const __INT_MAX__: int = 2147483647
export const __WCHAR_MAX__: int = 65535
export const __WCHAR_WIDTH__: int = 16
export const __WINT_MAX__: int = 65535
export const __WINT_WIDTH__: int = 16
export const __INTMAX_WIDTH__: int = 64
export const __SIZE_WIDTH__: int = 64
export const __UINTMAX_WIDTH__: int = 64
export const __PTRDIFF_WIDTH__: int = 64
export const __INTPTR_WIDTH__: int = 64
export const __UINTPTR_WIDTH__: int = 64
export const __SIZEOF_DOUBLE__: int = 8
export const __SIZEOF_FLOAT__: int = 4
export const __SIZEOF_INT__: int = 4
export const __SIZEOF_LONG__: int = 4
export const __SIZEOF_LONG_DOUBLE__: int = 8
export const __SIZEOF_LONG_LONG__: int = 8
export const __SIZEOF_POINTER__: int = 8
export const __SIZEOF_SHORT__: int = 2
export const __SIZEOF_PTRDIFF_T__: int = 8
export const __SIZEOF_SIZE_T__: int = 8
export const __SIZEOF_WCHAR_T__: int = 2
export const __SIZEOF_WINT_T__: int = 2
export const __SIZEOF_INT128__: int = 16
export const __INTMAX_FMTd__: [char] = "lld"
export const __INTMAX_FMTi__: [char] = "lli"
export const __UINTMAX_FMTo__: [char] = "llo"
export const __UINTMAX_FMTu__: [char] = "llu"
export const __UINTMAX_FMTx__: [char] = "llx"
export const __UINTMAX_FMTX__: [char] = "llX"
export const __PTRDIFF_FMTd__: [char] = "lld"
export const __PTRDIFF_FMTi__: [char] = "lli"
export const __INTPTR_FMTd__: [char] = "lld"
export const __INTPTR_FMTi__: [char] = "lli"
export const __SIZE_FMTo__: [char] = "llo"
export const __SIZE_FMTu__: [char] = "llu"
export const __SIZE_FMTx__: [char] = "llx"
export const __SIZE_FMTX__: [char] = "llX"
export const __SIG_ATOMIC_MAX__: int = 2147483647
export const __SIG_ATOMIC_WIDTH__: int = 32
export const __UINTPTR_FMTo__: [char] = "llo"
export const __UINTPTR_FMTu__: [char] = "llu"
export const __UINTPTR_FMTx__: [char] = "llx"
export const __UINTPTR_FMTX__: [char] = "llX"
export const __FLT16_HAS_DENORM__: int = 1
export const __FLT16_DIG__: int = 3
export const __FLT16_DECIMAL_DIG__: int = 5
export const __FLT16_HAS_INFINITY__: int = 1
export const __FLT16_HAS_QUIET_NAN__: int = 1
export const __FLT16_MANT_DIG__: int = 11
export const __FLT16_MAX_10_EXP__: int = 4
export const __FLT16_MAX_EXP__: int = 16
export const __FLT_HAS_DENORM__: int = 1
export const __FLT_DIG__: int = 6
export const __FLT_DECIMAL_DIG__: int = 9
export const __FLT_HAS_INFINITY__: int = 1
export const __FLT_HAS_QUIET_NAN__: int = 1
export const __FLT_MANT_DIG__: int = 24
export const __FLT_MAX_10_EXP__: int = 38
export const __FLT_MAX_EXP__: int = 128
export const __DBL_DENORM_MIN__: double = 4.9406564584124654e-324
export const __DBL_HAS_DENORM__: int = 1
export const __DBL_DIG__: int = 15
export const __DBL_DECIMAL_DIG__: int = 17
export const __DBL_EPSILON__: double = 2.2204460492503131e-16
export const __DBL_HAS_INFINITY__: int = 1
export const __DBL_HAS_QUIET_NAN__: int = 1
export const __DBL_MANT_DIG__: int = 53
export const __DBL_MAX_10_EXP__: int = 308
export const __DBL_MAX_EXP__: int = 1024
export const __DBL_MAX__: double = 1.7976931348623157e+308
export const __DBL_MIN__: double = 2.2250738585072014e-308
export const __LDBL_HAS_DENORM__: int = 1
export const __LDBL_DIG__: int = 15
export const __LDBL_DECIMAL_DIG__: int = 17
export const __LDBL_HAS_INFINITY__: int = 1
export const __LDBL_HAS_QUIET_NAN__: int = 1
export const __LDBL_MANT_DIG__: int = 53
export const __LDBL_MAX_10_EXP__: int = 308
export const __LDBL_MAX_EXP__: int = 1024
export const __POINTER_WIDTH__: int = 64
export const __BIGGEST_ALIGNMENT__: int = 16
export const __WCHAR_UNSIGNED__: int = 1
export const __WINT_UNSIGNED__: int = 1
export const __INT8_FMTd__: [char] = "hhd"
export const __INT8_FMTi__: [char] = "hhi"
export const __INT16_FMTd__: [char] = "hd"
export const __INT16_FMTi__: [char] = "hi"
export const __INT32_FMTd__: [char] = "d"
export const __INT32_FMTi__: [char] = "i"
export const __INT64_FMTd__: [char] = "lld"
export const __INT64_FMTi__: [char] = "lli"
export const __UINT8_FMTo__: [char] = "hho"
export const __UINT8_FMTu__: [char] = "hhu"
export const __UINT8_FMTx__: [char] = "hhx"
export const __UINT8_FMTX__: [char] = "hhX"
export const __UINT8_MAX__: int = 255
export const __INT8_MAX__: int = 127
export const __UINT16_FMTo__: [char] = "ho"
export const __UINT16_FMTu__: [char] = "hu"
export const __UINT16_FMTx__: [char] = "hx"
export const __UINT16_FMTX__: [char] = "hX"
export const __UINT16_MAX__: int = 65535
export const __INT16_MAX__: int = 32767
export const __UINT32_FMTo__: [char] = "o"
export const __UINT32_FMTu__: [char] = "u"
export const __UINT32_FMTx__: [char] = "x"
export const __UINT32_FMTX__: [char] = "X"
export const __INT32_MAX__: int = 2147483647
export const __UINT64_FMTo__: [char] = "llo"
export const __UINT64_FMTu__: [char] = "llu"
export const __UINT64_FMTx__: [char] = "llx"
export const __UINT64_FMTX__: [char] = "llX"
export const __INT_LEAST8_MAX__: int = 127
export const __INT_LEAST8_WIDTH__: int = 8
export const __INT_LEAST8_FMTd__: [char] = "hhd"
export const __INT_LEAST8_FMTi__: [char] = "hhi"
export const __UINT_LEAST8_MAX__: int = 255
export const __UINT_LEAST8_FMTo__: [char] = "hho"
export const __UINT_LEAST8_FMTu__: [char] = "hhu"
export const __UINT_LEAST8_FMTx__: [char] = "hhx"
export const __UINT_LEAST8_FMTX__: [char] = "hhX"
export const __INT_LEAST16_MAX__: int = 32767
export const __INT_LEAST16_WIDTH__: int = 16
export const __INT_LEAST16_FMTd__: [char] = "hd"
export const __INT_LEAST16_FMTi__: [char] = "hi"
export const __UINT_LEAST16_MAX__: int = 65535
export const __UINT_LEAST16_FMTo__: [char] = "ho"
export const __UINT_LEAST16_FMTu__: [char] = "hu"
export const __UINT_LEAST16_FMTx__: [char] = "hx"
export const __UINT_LEAST16_FMTX__: [char] = "hX"
export const __INT_LEAST32_MAX__: int = 2147483647
export const __INT_LEAST32_WIDTH__: int = 32
export const __INT_LEAST32_FMTd__: [char] = "d"
export const __INT_LEAST32_FMTi__: [char] = "i"
export const __UINT_LEAST32_FMTo__: [char] = "o"
export const __UINT_LEAST32_FMTu__: [char] = "u"
export const __UINT_LEAST32_FMTx__: [char] = "x"
export const __UINT_LEAST32_FMTX__: [char] = "X"
export const __INT_LEAST64_WIDTH__: int = 64
export const __INT_LEAST64_FMTd__: [char] = "lld"
export const __INT_LEAST64_FMTi__: [char] = "lli"
export const __UINT_LEAST64_FMTo__: [char] = "llo"
export const __UINT_LEAST64_FMTu__: [char] = "llu"
export const __UINT_LEAST64_FMTx__: [char] = "llx"
export const __UINT_LEAST64_FMTX__: [char] = "llX"
export const __INT_FAST8_MAX__: int = 127
export const __INT_FAST8_WIDTH__: int = 8
export const __INT_FAST8_FMTd__: [char] = "hhd"
export const __INT_FAST8_FMTi__: [char] = "hhi"
export const __UINT_FAST8_MAX__: int = 255
export const __UINT_FAST8_FMTo__: [char] = "hho"
export const __UINT_FAST8_FMTu__: [char] = "hhu"
export const __UINT_FAST8_FMTx__: [char] = "hhx"
export const __UINT_FAST8_FMTX__: [char] = "hhX"
export const __INT_FAST16_MAX__: int = 32767
export const __INT_FAST16_WIDTH__: int = 16
export const __INT_FAST16_FMTd__: [char] = "hd"
export const __INT_FAST16_FMTi__: [char] = "hi"
export const __UINT_FAST16_MAX__: int = 65535
export const __UINT_FAST16_FMTo__: [char] = "ho"
export const __UINT_FAST16_FMTu__: [char] = "hu"
export const __UINT_FAST16_FMTx__: [char] = "hx"
export const __UINT_FAST16_FMTX__: [char] = "hX"
export const __INT_FAST32_MAX__: int = 2147483647
export const __INT_FAST32_WIDTH__: int = 32
export const __INT_FAST32_FMTd__: [char] = "d"
export const __INT_FAST32_FMTi__: [char] = "i"
export const __UINT_FAST32_FMTo__: [char] = "o"
export const __UINT_FAST32_FMTu__: [char] = "u"
export const __UINT_FAST32_FMTx__: [char] = "x"
export const __UINT_FAST32_FMTX__: [char] = "X"
export const __INT_FAST64_WIDTH__: int = 64
export const __INT_FAST64_FMTd__: [char] = "lld"
export const __INT_FAST64_FMTi__: [char] = "lli"
export const __UINT_FAST64_FMTo__: [char] = "llo"
export const __UINT_FAST64_FMTu__: [char] = "llu"
export const __UINT_FAST64_FMTx__: [char] = "llx"
export const __UINT_FAST64_FMTX__: [char] = "llX"
export const __FINITE_MATH_ONLY__: int = 0
export const __CLANG_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_INT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __NO_INLINE__: int = 1
export const __PIC__: int = 2
export const __pic__: int = 2
export const __FLT_RADIX__: int = 2
export const __GCC_ASM_FLAG_OUTPUTS__: int = 1
export const __code_model_small__: int = 1
export const __amd64__: int = 1
export const __amd64: int = 1
export const __x86_64: int = 1
export const __x86_64__: int = 1
export const __SEG_GS: int = 1
export const __SEG_FS: int = 1
export const __k8: int = 1
export const __k8__: int = 1
export const __tune_k8__: int = 1
export const __NO_MATH_INLINES: int = 1
export const __FXSR__: int = 1
export const __SSE2__: int = 1
export const __SSE2_MATH__: int = 1
export const __SSE__: int = 1
export const __SSE_MATH__: int = 1
export const __MMX__: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: int = 1
export const _WIN32: int = 1
export const _WIN64: int = 1
export const _M_FP_CONTRACT: int = 1
export const _M_FP_PRECISE: int = 1
export const _MSC_VER: int = 1936
export const _MSC_FULL_VER: int = 193632537
export const _MSC_BUILD: int = 1
export const _MSC_EXTENSIONS: int = 1
export const _ISO_VOLATILE: int = 1
export const _INTEGRAL_MAX_BITS: int = 64
export const __STDC_NO_THREADS__: int = 1
export const _MSVC_EXECUTION_CHARACTER_SET: int = 65001
export const _M_X64: int = 100
export const _M_AMD64: int = 100
export const __STDC_HOSTED__: int = 1
export const __STDC_UTF_16__: int = 1
export const __STDC_UTF_32__: int = 1
export const _VCRT_COMPILER_PREPROCESSOR: int = 1
export const _SAL_VERSION: int = 20
export const __SAL_H_VERSION: int = 180000000
export const _USE_DECLSPECS_FOR_SAL: int = 0
export const _USE_ATTRIBUTES_FOR_SAL: int = 0
export const _CRT_PACKING: int = 8
export const _HAS_EXCEPTIONS: int = 1
export const _HAS_CXX17: int = 0
export const _HAS_CXX20: int = 0
export const _HAS_CXX23: int = 0
export const _HAS_NODISCARD: int = 0
export const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: int = 1
export const _CRT_BUILD_DESKTOP_APP: int = 1
export const _ARGMAX: int = 100
export const _CRT_INT_MAX: int = 2147483647
export const _CRT_FUNCTIONS_REQUIRED: int = 1
export const _CRT_HAS_CXX17: int = 0
export const _CRT_HAS_C11: int = 1
export const _CRT_INTERNAL_NONSTDC_NAMES: int = 1
export const __STDC_WANT_SECURE_LIB__: int = 1
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: int = 1
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: int = 0
export const CHAR_BIT: int = 8
export const SCHAR_MAX: int = 127
export const MB_LEN_MAX: int = 5
export const SHRT_MAX: int = 32767
export const INT_MAX: int = 2147483647
export const EXIT_SUCCESS: int = 0
export const EXIT_FAILURE: int = 1
export const _OUT_TO_DEFAULT: int = 0
export const _OUT_TO_STDERR: int = 1
export const _OUT_TO_MSGBOX: int = 2
export const _REPORT_ERRMODE: int = 3
export const _MAX_PATH: int = 260
export const _MAX_DRIVE: int = 3
export const _MAX_DIR: int = 256
export const _MAX_FNAME: int = 256
export const _MAX_EXT: int = 256
export const _MAX_ENV: int = 32767
export const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: [char] = ""
export const BUFSIZ: int = 512
export const _NSTREAM_: int = 512
export const _IOB_ENTRIES: int = 3
export const L_tmpnam: int = 260
export const SEEK_CUR: int = 1
export const SEEK_END: int = 2
export const SEEK_SET: int = 0
export const FILENAME_MAX: int = 260
export const FOPEN_MAX: int = 20
export const _SYS_OPEN: int = 20
export const __bool_true_false_are_defined: int = 1
export const EPERM: int = 1
export const ENOENT: int = 2
export const ESRCH: int = 3
export const EINTR: int = 4
export const EIO: int = 5
export const ENXIO: int = 6
export const E2BIG: int = 7
export const ENOEXEC: int = 8
export const EBADF: int = 9
export const ECHILD: int = 10
export const EAGAIN: int = 11
export const ENOMEM: int = 12
export const EACCES: int = 13
export const EFAULT: int = 14
export const EBUSY: int = 16
export const EEXIST: int = 17
export const EXDEV: int = 18
export const ENODEV: int = 19
export const ENOTDIR: int = 20
export const EISDIR: int = 21
export const ENFILE: int = 23
export const EMFILE: int = 24
export const ENOTTY: int = 25
export const EFBIG: int = 27
export const ENOSPC: int = 28
export const ESPIPE: int = 29
export const EROFS: int = 30
export const EMLINK: int = 31
export const EPIPE: int = 32
export const EDOM: int = 33
export const EDEADLK: int = 36
export const ENAMETOOLONG: int = 38
export const ENOLCK: int = 39
export const ENOSYS: int = 40
export const ENOTEMPTY: int = 41
export const EINVAL: int = 22
export const ERANGE: int = 34
export const EILSEQ: int = 42
export const STRUNCATE: int = 80
export const EADDRINUSE: int = 100
export const EADDRNOTAVAIL: int = 101
export const EAFNOSUPPORT: int = 102
export const EALREADY: int = 103
export const EBADMSG: int = 104
export const ECANCELED: int = 105
export const ECONNABORTED: int = 106
export const ECONNREFUSED: int = 107
export const ECONNRESET: int = 108
export const EDESTADDRREQ: int = 109
export const EHOSTUNREACH: int = 110
export const EIDRM: int = 111
export const EINPROGRESS: int = 112
export const EISCONN: int = 113
export const ELOOP: int = 114
export const EMSGSIZE: int = 115
export const ENETDOWN: int = 116
export const ENETRESET: int = 117
export const ENETUNREACH: int = 118
export const ENOBUFS: int = 119
export const ENODATA: int = 120
export const ENOLINK: int = 121
export const ENOMSG: int = 122
export const ENOPROTOOPT: int = 123
export const ENOSR: int = 124
export const ENOSTR: int = 125
export const ENOTCONN: int = 126
export const ENOTRECOVERABLE: int = 127
export const ENOTSOCK: int = 128
export const ENOTSUP: int = 129
export const EOPNOTSUPP: int = 130
export const EOTHER: int = 131
export const EOVERFLOW: int = 132
export const EOWNERDEAD: int = 133
export const EPROTO: int = 134
export const EPROTONOSUPPORT: int = 135
export const EPROTOTYPE: int = 136
export const ETIME: int = 137
export const ETIMEDOUT: int = 138
export const ETXTBSY: int = 139
export const EWOULDBLOCK: int = 140
export const _CRT_USE_CONFORMING_ANNEX_K_TIME: int = 0
export const TIME_UTC: int = 1
export const _DOMAIN: int = 1
export const _SING: int = 2
export const _OVERFLOW: int = 3
export const _UNDERFLOW: int = 4
export const _TLOSS: int = 5
export const _PLOSS: int = 6
export const _HUGE_ENUF: double = 1e+300
export const _INFCODE: int = 1
export const _NANCODE: int = 2
export const FP_ZERO: int = 0
export const _C2: int = 1
export const MATH_ERRNO: int = 1
export const MATH_ERREXCEPT: int = 2
export const _D0_C: int = 3
export const _D1_C: int = 2
export const _D2_C: int = 1
export const _D3_C: int = 0
export const _DOFF: int = 4
export const _F0_C: int = 1
export const _F1_C: int = 0
export const _FOFF: int = 7
export const _FRND: int = 1
export const _L0_C: int = 3
export const _L1_C: int = 2
export const _L2_C: int = 1
export const _L3_C: int = 0
export const _LOFF: int = 4
export const _FP_LT: int = 1
export const _FP_EQ: int = 2
export const _FP_GT: int = 4
export const NSIG: int = 23
export const SIGINT: int = 2
export const SIGILL: int = 4
export const SIGFPE: int = 8
export const SIGSEGV: int = 11
export const SIGTERM: int = 15
export const SIGBREAK: int = 21
export const SIGABRT: int = 22
export const SIGABRT_COMPAT: int = 6
export const LC_ALL: int = 0
export const LC_COLLATE: int = 1
export const LC_CTYPE: int = 2
export const LC_MONETARY: int = 3
export const LC_NUMERIC: int = 4
export const LC_TIME: int = 5
export const _JBLEN: int = 16
export const FLT_EVAL_METHOD: int = 0
export const DBL_DECIMAL_DIG: int = 17
export const DBL_DIG: int = 15
export const DBL_EPSILON: double = 2.2204460492503131e-016
export const DBL_HAS_SUBNORM: int = 1
export const DBL_MANT_DIG: int = 53
export const DBL_MAX: double = 1.7976931348623158e+308
export const DBL_MAX_10_EXP: int = 308
export const DBL_MAX_EXP: int = 1024
export const DBL_MIN: double = 2.2250738585072014e-308
export const _DBL_RADIX: int = 2
export const DBL_TRUE_MIN: double = 4.9406564584124654e-324
export const FLT_DECIMAL_DIG: int = 9
export const FLT_DIG: int = 6
export const FLT_HAS_SUBNORM: int = 1
export const FLT_GUARD: int = 0
export const FLT_MANT_DIG: int = 24
export const FLT_MAX_10_EXP: int = 38
export const FLT_MAX_EXP: int = 128
export const FLT_NORMALIZE: int = 0
export const FLT_RADIX: int = 2
export import def #extern __security_init_cookie()
export import def #extern __security_check_cookie(_StackCookie: uint64)
export import def #extern __report_gsfailure(_StackCookie: uint64)
export import var #extern __security_cookie: uint64
export import def #extern _invalid_parameter_noinfo()
export import def #extern _invalid_parameter_noinfo_noreturn()
export import def #extern _invoke_watson(_Expression: *ushort, _FunctionName: *ushort, _FileName: *ushort, _LineNo: uint, _Reserved: uint64)
export import def #extern _calloc_base(_Count: uint64, _Size: uint64) -> *
export import def #extern calloc(_Count: uint64, _Size: uint64) -> *
export import def #extern _callnewh(_Size: uint64) -> int
export import def #extern _expand(_Block: *, _Size: uint64) -> *
export import def #extern _free_base(_Block: *)
export import def #extern free(_Block: *)
export import def #extern _malloc_base(_Size: uint64) -> *
export import def #extern malloc(_Size: uint64) -> *
export import def #extern _msize_base(_Block: *) -> uint64
export import def #extern _msize(_Block: *) -> uint64
export import def #extern _realloc_base(_Block: *, _Size: uint64) -> *
export import def #extern realloc(_Block: *, _Size: uint64) -> *
export import def #extern _recalloc_base(_Block: *, _Count: uint64, _Size: uint64) -> *
export import def #extern _recalloc(_Block: *, _Count: uint64, _Size: uint64) -> *
export import def #extern _aligned_free(_Block: *)
export import def #extern _aligned_malloc(_Size: uint64, _Alignment: uint64) -> *
export import def #extern _aligned_offset_malloc(_Size: uint64, _Alignment: uint64, _Offset: uint64) -> *
export import def #extern _aligned_msize(_Block: *, _Alignment: uint64, _Offset: uint64) -> uint64
export import def #extern _aligned_offset_realloc(_Block: *, _Size: uint64, _Alignment: uint64, _Offset: uint64) -> *
export import def #extern _aligned_offset_recalloc(_Block: *, _Count: uint64, _Size: uint64, _Alignment: uint64, _Offset: uint64) -> *
export import def #extern _aligned_realloc(_Block: *, _Size: uint64, _Alignment: uint64) -> *
export import def #extern _aligned_recalloc(_Block: *, _Count: uint64, _Size: uint64, _Alignment: uint64) -> *
export import def #extern _errno() -> *int
export import def #extern _set_errno(_Value: int) -> int
export import def #extern _get_errno(_Value: *int) -> int
export import def #extern bsearch_s(_Key: *, _Base: *, _NumOfElements: uint64, _SizeOfElements: uint64, _CompareFunction: def (*, *, *) -> (int), _Context: *) -> *
export import def #extern qsort_s(_Base: *, _NumOfElements: uint64, _SizeOfElements: uint64, _CompareFunction: def (*, *, *) -> (int), _Context: *)
export import def #extern bsearch(_Key: *, _Base: *, _NumOfElements: uint64, _SizeOfElements: uint64, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern qsort(_Base: *, _NumOfElements: uint64, _SizeOfElements: uint64, _CompareFunction: def (*, *) -> (int))
export import def #extern _lfind_s(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint64, _CompareFunction: def (*, *, *) -> (int), _Context: *) -> *
export import def #extern _lfind(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern _lsearch_s(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint64, _CompareFunction: def (*, *, *) -> (int), _Context: *) -> *
export import def #extern _lsearch(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern lfind(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern lsearch(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern _itow_s(_Value: int, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _itow(_Value: int, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern _ltow_s(_Value: long, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ltow(_Value: long, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern _ultow_s(_Value: ulong, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ultow(_Value: ulong, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern wcstod(_String: *ushort, _EndPtr: **ushort) -> double
export import def #extern _wcstod_l(_String: *ushort, _EndPtr: **ushort, _Locale: *s___crt_locale_pointers) -> double
export import def #extern wcstol(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> long
export import def #extern _wcstol_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> long
export import def #extern wcstoll(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> int64
export import def #extern _wcstoll_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern wcstoul(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> ulong
export import def #extern _wcstoul_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> ulong
export import def #extern wcstoull(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> uint64
export import def #extern _wcstoull_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern wcstold(_String: *ushort, _EndPtr: **ushort) -> float80
export import def #extern _wcstold_l(_String: *ushort, _EndPtr: **ushort, _Locale: *s___crt_locale_pointers) -> float80
export import def #extern wcstof(_String: *ushort, _EndPtr: **ushort) -> float
export import def #extern _wcstof_l(_String: *ushort, _EndPtr: **ushort, _Locale: *s___crt_locale_pointers) -> float
export import def #extern _wtof(_String: *ushort) -> double
export import def #extern _wtof_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> double
export import def #extern _wtoi(_String: *ushort) -> int
export import def #extern _wtoi_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wtol(_String: *ushort) -> long
export import def #extern _wtol_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> long
export import def #extern _wtoll(_String: *ushort) -> int64
export import def #extern _wtoll_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _i64tow_s(_Value: int64, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _i64tow(_Value: int64, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern _ui64tow_s(_Value: uint64, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ui64tow(_Value: uint64, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern _wtoi64(_String: *ushort) -> int64
export import def #extern _wtoi64_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _wcstoi64(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> int64
export import def #extern _wcstoi64_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _wcstoui64(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> uint64
export import def #extern _wcstoui64_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _wfullpath(_Buffer: *ushort, _Path: *ushort, _BufferCount: uint64) -> *ushort
export import def #extern _wmakepath_s(_Buffer: *ushort, _BufferCount: uint64, _Drive: *ushort, _Dir: *ushort, _Filename: *ushort, _Ext: *ushort) -> int
export import def #extern _wmakepath(_Buffer: *ushort, _Drive: *ushort, _Dir: *ushort, _Filename: *ushort, _Ext: *ushort)
export import def #extern _wperror(_ErrorMessage: *ushort)
export import def #extern _wsplitpath(_FullPath: *ushort, _Drive: *ushort, _Dir: *ushort, _Filename: *ushort, _Ext: *ushort)
export import def #extern _wsplitpath_s(_FullPath: *ushort, _Drive: *ushort, _DriveCount: uint64, _Dir: *ushort, _DirCount: uint64, _Filename: *ushort, _FilenameCount: uint64, _Ext: *ushort, _ExtCount: uint64) -> int
export import def #extern _wdupenv_s(_Buffer: **ushort, _BufferCount: *uint64, _VarName: *ushort) -> int
export import def #extern _wgetenv(_VarName: *ushort) -> *ushort
export import def #extern _wgetenv_s(_RequiredCount: *uint64, _Buffer: *ushort, _BufferCount: uint64, _VarName: *ushort) -> int
export import def #extern _wputenv(_EnvString: *ushort) -> int
export import def #extern _wputenv_s(_Name: *ushort, _Value: *ushort) -> int
export import def #extern _wsearchenv_s(_Filename: *ushort, _VarName: *ushort, _Buffer: *ushort, _BufferCount: uint64) -> int
export import def #extern _wsearchenv(_Filename: *ushort, _VarName: *ushort, _ResultPath: *ushort)
export import def #extern _wsystem(_Command: *ushort) -> int
export import def #extern _swab(_Buf1: *char, _Buf2: *char, _SizeInBytes: int)
export import def #extern exit(_Code: int)
export import def #extern _exit(_Code: int)
export import def #extern _Exit(_Code: int)
export import def #extern quick_exit(_Code: int)
export import def #extern abort()
export import def #extern _set_abort_behavior(_Flags: uint, _Mask: uint) -> uint
export import def #extern atexit(_0: def () -> ()) -> int
export import def #extern _onexit(_Func: def () -> (int)) -> def () -> (int)
export import def #extern at_quick_exit(_0: def () -> ()) -> int
export import def #extern _set_purecall_handler(_Handler: def () -> ()) -> def () -> ()
export import def #extern _get_purecall_handler() -> def () -> ()
export import def #extern _set_invalid_parameter_handler(_Handler: def (*ushort, *ushort, *ushort, uint, uint64) -> ()) -> def (*ushort, *ushort, *ushort, uint, uint64) -> ()
export import def #extern _get_invalid_parameter_handler() -> def (*ushort, *ushort, *ushort, uint, uint64) -> ()
export import def #extern _set_thread_local_invalid_parameter_handler(_Handler: def (*ushort, *ushort, *ushort, uint, uint64) -> ()) -> def (*ushort, *ushort, *ushort, uint, uint64) -> ()
export import def #extern _get_thread_local_invalid_parameter_handler() -> def (*ushort, *ushort, *ushort, uint, uint64) -> ()
export import def #extern _set_error_mode(_Mode: int) -> int
export import def #extern __doserrno() -> *ulong
export import def #extern _set_doserrno(_Value: ulong) -> int
export import def #extern _get_doserrno(_Value: *ulong) -> int
export import def #extern __sys_errlist() -> **char
export import def #extern __sys_nerr() -> *int
export import def #extern perror(_ErrorMessage: *char)
export import def #extern __p__pgmptr() -> **char
export import def #extern __p__wpgmptr() -> **ushort
export import def #extern __p__fmode() -> *int
export import def #extern _get_pgmptr(_Value: **char) -> int
export import def #extern _get_wpgmptr(_Value: **ushort) -> int
export import def #extern _set_fmode(_Mode: int) -> int
export import def #extern _get_fmode(_PMode: *int) -> int
export import def #extern abs(_X: int) -> int
export import def #extern labs(_X: long) -> long
export import def #extern llabs(_X: int64) -> int64
export import def #extern _abs64(_Number: int64) -> int64
export import def #extern _byteswap_ushort(_Number: ushort) -> ushort
export import def #extern _byteswap_ulong(_Number: ulong) -> ulong
export import def #extern _byteswap_uint64(_Number: uint64) -> uint64
export import def #extern div(_Numerator: int, _Denominator: int) -> s__div_t
export import def #extern ldiv(_Numerator: long, _Denominator: long) -> s__ldiv_t
export import def #extern lldiv(_Numerator: int64, _Denominator: int64) -> s__lldiv_t
export import def #extern _rotl(_Value: uint, _Shift: int) -> uint
export import def #extern _lrotl(_Value: ulong, _Shift: int) -> ulong
export import def #extern _rotl64(_Value: uint64, _Shift: int) -> uint64
export import def #extern _rotr(_Value: uint, _Shift: int) -> uint
export import def #extern _lrotr(_Value: ulong, _Shift: int) -> ulong
export import def #extern _rotr64(_Value: uint64, _Shift: int) -> uint64
export import def #extern srand(_Seed: uint)
export import def #extern rand() -> int
export import def #extern atof(_String: *char) -> double
export import def #extern atoi(_String: *char) -> int
export import def #extern atol(_String: *char) -> long
export import def #extern atoll(_String: *char) -> int64
export import def #extern _atoi64(_String: *char) -> int64
export import def #extern _atof_l(_String: *char, _Locale: *s___crt_locale_pointers) -> double
export import def #extern _atoi_l(_String: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _atol_l(_String: *char, _Locale: *s___crt_locale_pointers) -> long
export import def #extern _atoll_l(_String: *char, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _atoi64_l(_String: *char, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _atoflt(_Result: *s__CRT_FLOAT, _String: *char) -> int
export import def #extern _atodbl(_Result: *s__CRT_DOUBLE, _String: *char) -> int
export import def #extern _atoldbl(_Result: *s__LDOUBLE, _String: *char) -> int
export import def #extern _atoflt_l(_Result: *s__CRT_FLOAT, _String: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _atodbl_l(_Result: *s__CRT_DOUBLE, _String: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _atoldbl_l(_Result: *s__LDOUBLE, _String: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern strtof(_String: *char, _EndPtr: **char) -> float
export import def #extern _strtof_l(_String: *char, _EndPtr: **char, _Locale: *s___crt_locale_pointers) -> float
export import def #extern strtod(_String: *char, _EndPtr: **char) -> double
export import def #extern _strtod_l(_String: *char, _EndPtr: **char, _Locale: *s___crt_locale_pointers) -> double
export import def #extern strtold(_String: *char, _EndPtr: **char) -> float80
export import def #extern _strtold_l(_String: *char, _EndPtr: **char, _Locale: *s___crt_locale_pointers) -> float80
export import def #extern strtol(_String: *char, _EndPtr: **char, _Radix: int) -> long
export import def #extern _strtol_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> long
export import def #extern strtoll(_String: *char, _EndPtr: **char, _Radix: int) -> int64
export import def #extern _strtoll_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern strtoul(_String: *char, _EndPtr: **char, _Radix: int) -> ulong
export import def #extern _strtoul_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> ulong
export import def #extern strtoull(_String: *char, _EndPtr: **char, _Radix: int) -> uint64
export import def #extern _strtoull_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _strtoi64(_String: *char, _EndPtr: **char, _Radix: int) -> int64
export import def #extern _strtoi64_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _strtoui64(_String: *char, _EndPtr: **char, _Radix: int) -> uint64
export import def #extern _strtoui64_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _itoa_s(_Value: int, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _itoa(_Value: int, _Buffer: *char, _Radix: int) -> *char
export import def #extern _ltoa_s(_Value: long, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ltoa(_Value: long, _Buffer: *char, _Radix: int) -> *char
export import def #extern _ultoa_s(_Value: ulong, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ultoa(_Value: ulong, _Buffer: *char, _Radix: int) -> *char
export import def #extern _i64toa_s(_Value: int64, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _i64toa(_Value: int64, _Buffer: *char, _Radix: int) -> *char
export import def #extern _ui64toa_s(_Value: uint64, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ui64toa(_Value: uint64, _Buffer: *char, _Radix: int) -> *char
export import def #extern _ecvt_s(_Buffer: *char, _BufferCount: uint64, _Value: double, _DigitCount: int, _PtDec: *int, _PtSign: *int) -> int
export import def #extern _ecvt(_Value: double, _DigitCount: int, _PtDec: *int, _PtSign: *int) -> *char
export import def #extern _fcvt_s(_Buffer: *char, _BufferCount: uint64, _Value: double, _FractionalDigitCount: int, _PtDec: *int, _PtSign: *int) -> int
export import def #extern _fcvt(_Value: double, _FractionalDigitCount: int, _PtDec: *int, _PtSign: *int) -> *char
export import def #extern _gcvt_s(_Buffer: *char, _BufferCount: uint64, _Value: double, _DigitCount: int) -> int
export import def #extern _gcvt(_Value: double, _DigitCount: int, _Buffer: *char) -> *char
export import def #extern ___mb_cur_max_func() -> int
export import def #extern ___mb_cur_max_l_func(_Locale: *s___crt_locale_pointers) -> int
export import def #extern mblen(_Ch: *char, _MaxCount: uint64) -> int
export import def #extern _mblen_l(_Ch: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _mbstrlen(_String: *char) -> uint64
export import def #extern _mbstrlen_l(_String: *char, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _mbstrnlen(_String: *char, _MaxCount: uint64) -> uint64
export import def #extern _mbstrnlen_l(_String: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern mbtowc(_DstCh: *ushort, _SrcCh: *char, _SrcSizeInBytes: uint64) -> int
export import def #extern _mbtowc_l(_DstCh: *ushort, _SrcCh: *char, _SrcSizeInBytes: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern mbstowcs_s(_PtNumOfCharConverted: *uint64, _DstBuf: *ushort, _SizeInWords: uint64, _SrcBuf: *char, _MaxCount: uint64) -> int
export import def #extern mbstowcs(_Dest: *ushort, _Source: *char, _MaxCount: uint64) -> uint64
export import def #extern _mbstowcs_s_l(_PtNumOfCharConverted: *uint64, _DstBuf: *ushort, _SizeInWords: uint64, _SrcBuf: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _mbstowcs_l(_Dest: *ushort, _Source: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern wctomb(_MbCh: *char, _WCh: ushort) -> int
export import def #extern _wctomb_l(_MbCh: *char, _WCh: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern wctomb_s(_SizeConverted: *int, _MbCh: *char, _SizeInBytes: uint64, _WCh: ushort) -> int
export import def #extern _wctomb_s_l(_SizeConverted: *int, _MbCh: *char, _SizeInBytes: uint64, _WCh: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern wcstombs_s(_PtNumOfCharConverted: *uint64, _Dst: *char, _DstSizeInBytes: uint64, _Src: *ushort, _MaxCountInBytes: uint64) -> int
export import def #extern wcstombs(_Dest: *char, _Source: *ushort, _MaxCount: uint64) -> uint64
export import def #extern _wcstombs_s_l(_PtNumOfCharConverted: *uint64, _Dst: *char, _DstSizeInBytes: uint64, _Src: *ushort, _MaxCountInBytes: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcstombs_l(_Dest: *char, _Source: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _fullpath(_Buffer: *char, _Path: *char, _BufferCount: uint64) -> *char
export import def #extern _makepath_s(_Buffer: *char, _BufferCount: uint64, _Drive: *char, _Dir: *char, _Filename: *char, _Ext: *char) -> int
export import def #extern _makepath(_Buffer: *char, _Drive: *char, _Dir: *char, _Filename: *char, _Ext: *char)
export import def #extern _splitpath(_FullPath: *char, _Drive: *char, _Dir: *char, _Filename: *char, _Ext: *char)
export import def #extern _splitpath_s(_FullPath: *char, _Drive: *char, _DriveCount: uint64, _Dir: *char, _DirCount: uint64, _Filename: *char, _FilenameCount: uint64, _Ext: *char, _ExtCount: uint64) -> int
export import def #extern getenv_s(_RequiredCount: *uint64, _Buffer: *char, _BufferCount: uint64, _VarName: *char) -> int
export import def #extern __p___argc() -> *int
export import def #extern __p___argv() -> ***char
export import def #extern __p___wargv() -> ***ushort
export import def #extern __p__environ() -> ***char
export import def #extern __p__wenviron() -> ***ushort
export import def #extern getenv(_VarName: *char) -> *char
export import def #extern _dupenv_s(_Buffer: **char, _BufferCount: *uint64, _VarName: *char) -> int
export import def #extern system(_Command: *char) -> int
export import def #extern _putenv(_EnvString: *char) -> int
export import def #extern _putenv_s(_Name: *char, _Value: *char) -> int
export import def #extern _searchenv_s(_Filename: *char, _VarName: *char, _Buffer: *char, _BufferCount: uint64) -> int
export import def #extern _searchenv(_Filename: *char, _VarName: *char, _Buffer: *char)
export import def #extern _seterrormode(_Mode: int)
export import def #extern _beep(_Frequency: uint, _Duration: uint)
export import def #extern _sleep(_Duration: ulong)
export import def #extern ecvt(_Value: double, _DigitCount: int, _PtDec: *int, _PtSign: *int) -> *char
export import def #extern fcvt(_Value: double, _FractionalDigitCount: int, _PtDec: *int, _PtSign: *int) -> *char
export import def #extern gcvt(_Value: double, _DigitCount: int, _DstBuf: *char) -> *char
export import def #extern itoa(_Value: int, _Buffer: *char, _Radix: int) -> *char
export import def #extern ltoa(_Value: long, _Buffer: *char, _Radix: int) -> *char
export import def #extern swab(_Buf1: *char, _Buf2: *char, _SizeInBytes: int)
export import def #extern ultoa(_Value: ulong, _Buffer: *char, _Radix: int) -> *char
export import def #extern putenv(_EnvString: *char) -> int
export import def #extern onexit(_Func: def () -> (int)) -> def () -> (int)
export import def #extern __acrt_iob_func(_Ix: uint) -> *s__iobuf
export import def #extern fgetwc(_Stream: *s__iobuf) -> ushort
export import def #extern _fgetwchar() -> ushort
export import def #extern fputwc(_Character: ushort, _Stream: *s__iobuf) -> ushort
export import def #extern _fputwchar(_Character: ushort) -> ushort
export import def #extern getwc(_Stream: *s__iobuf) -> ushort
export import def #extern getwchar() -> ushort
export import def #extern fgetws(_Buffer: *ushort, _BufferCount: int, _Stream: *s__iobuf) -> *ushort
export import def #extern fputws(_Buffer: *ushort, _Stream: *s__iobuf) -> int
export import def #extern _getws_s(_Buffer: *ushort, _BufferCount: uint64) -> *ushort
export import def #extern putwc(_Character: ushort, _Stream: *s__iobuf) -> ushort
export import def #extern putwchar(_Character: ushort) -> ushort
export import def #extern _putws(_Buffer: *ushort) -> int
export import def #extern ungetwc(_Character: ushort, _Stream: *s__iobuf) -> ushort
export import def #extern _wfdopen(_FileHandle: int, _Mode: *ushort) -> *s__iobuf
export import def #extern _wfopen(_FileName: *ushort, _Mode: *ushort) -> *s__iobuf
export import def #extern _wfopen_s(_Stream: **s__iobuf, _FileName: *ushort, _Mode: *ushort) -> int
export import def #extern _wfreopen(_FileName: *ushort, _Mode: *ushort, _OldStream: *s__iobuf) -> *s__iobuf
export import def #extern _wfreopen_s(_Stream: **s__iobuf, _FileName: *ushort, _Mode: *ushort, _OldStream: *s__iobuf) -> int
export import def #extern _wfsopen(_FileName: *ushort, _Mode: *ushort, _ShFlag: int) -> *s__iobuf
export import def #extern _wpopen(_Command: *ushort, _Mode: *ushort) -> *s__iobuf
export import def #extern _wremove(_FileName: *ushort) -> int
export import def #extern _wtempnam(_Directory: *ushort, _FilePrefix: *ushort) -> *ushort
export import def #extern _wtmpnam_s(_Buffer: *ushort, _BufferCount: uint64) -> int
export import def #extern _wtmpnam(_Buffer: *ushort) -> *ushort
export import def #extern _fgetwc_nolock(_Stream: *s__iobuf) -> ushort
export import def #extern _fputwc_nolock(_Character: ushort, _Stream: *s__iobuf) -> ushort
export import def #extern _getwc_nolock(_Stream: *s__iobuf) -> ushort
export import def #extern _putwc_nolock(_Character: ushort, _Stream: *s__iobuf) -> ushort
export import def #extern _ungetwc_nolock(_Character: ushort, _Stream: *s__iobuf) -> ushort
export import def #extern __stdio_common_vfwprintf(_Options: uint64, _Stream: *s__iobuf, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vfwprintf_s(_Options: uint64, _Stream: *s__iobuf, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vfwprintf_p(_Options: uint64, _Stream: *s__iobuf, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vfwscanf(_Options: uint64, _Stream: *s__iobuf, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vswprintf(_Options: uint64, _Buffer: *ushort, _BufferCount: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vswprintf_s(_Options: uint64, _Buffer: *ushort, _BufferCount: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vsnwprintf_s(_Options: uint64, _Buffer: *ushort, _BufferCount: uint64, _MaxCount: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vswprintf_p(_Options: uint64, _Buffer: *ushort, _BufferCount: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vswscanf(_Options: uint64, _Buffer: *ushort, _BufferCount: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern _get_stream_buffer_pointers(_Stream: *s__iobuf, _Base: ***char, _Pointer: ***char, _Count: **int) -> int
export import def #extern clearerr_s(_Stream: *s__iobuf) -> int
export import def #extern fopen_s(_Stream: **s__iobuf, _FileName: *char, _Mode: *char) -> int
export import def #extern fread_s(_Buffer: *, _BufferSize: uint64, _ElementSize: uint64, _ElementCount: uint64, _Stream: *s__iobuf) -> uint64
export import def #extern freopen_s(_Stream: **s__iobuf, _FileName: *char, _Mode: *char, _OldStream: *s__iobuf) -> int
export import def #extern gets_s(_Buffer: *char, _Size: uint64) -> *char
export import def #extern tmpfile_s(_Stream: **s__iobuf) -> int
export import def #extern tmpnam_s(_Buffer: *char, _Size: uint64) -> int
export import def #extern clearerr(_Stream: *s__iobuf)
export import def #extern fclose(_Stream: *s__iobuf) -> int
export import def #extern _fcloseall() -> int
export import def #extern _fdopen(_FileHandle: int, _Mode: *char) -> *s__iobuf
export import def #extern feof(_Stream: *s__iobuf) -> int
export import def #extern ferror(_Stream: *s__iobuf) -> int
export import def #extern fflush(_Stream: *s__iobuf) -> int
export import def #extern fgetc(_Stream: *s__iobuf) -> int
export import def #extern _fgetchar() -> int
export import def #extern fgetpos(_Stream: *s__iobuf, _Position: *int64) -> int
export import def #extern fgets(_Buffer: *char, _MaxCount: int, _Stream: *s__iobuf) -> *char
export import def #extern _fileno(_Stream: *s__iobuf) -> int
export import def #extern _flushall() -> int
export import def #extern fopen(_FileName: *char, _Mode: *char) -> *s__iobuf
export import def #extern fputc(_Character: int, _Stream: *s__iobuf) -> int
export import def #extern _fputchar(_Character: int) -> int
export import def #extern fputs(_Buffer: *char, _Stream: *s__iobuf) -> int
export import def #extern fread(_Buffer: *, _ElementSize: uint64, _ElementCount: uint64, _Stream: *s__iobuf) -> uint64
export import def #extern freopen(_FileName: *char, _Mode: *char, _Stream: *s__iobuf) -> *s__iobuf
export import def #extern _fsopen(_FileName: *char, _Mode: *char, _ShFlag: int) -> *s__iobuf
export import def #extern fsetpos(_Stream: *s__iobuf, _Position: *int64) -> int
export import def #extern fseek(_Stream: *s__iobuf, _Offset: long, _Origin: int) -> int
export import def #extern _fseeki64(_Stream: *s__iobuf, _Offset: int64, _Origin: int) -> int
export import def #extern ftell(_Stream: *s__iobuf) -> long
export import def #extern _ftelli64(_Stream: *s__iobuf) -> int64
export import def #extern fwrite(_Buffer: *, _ElementSize: uint64, _ElementCount: uint64, _Stream: *s__iobuf) -> uint64
export import def #extern getc(_Stream: *s__iobuf) -> int
export import def #extern getchar() -> int
export import def #extern _getmaxstdio() -> int
export import def #extern _getw(_Stream: *s__iobuf) -> int
export import def #extern _pclose(_Stream: *s__iobuf) -> int
export import def #extern _popen(_Command: *char, _Mode: *char) -> *s__iobuf
export import def #extern putc(_Character: int, _Stream: *s__iobuf) -> int
export import def #extern putchar(_Character: int) -> int
export import def #extern puts(_Buffer: *char) -> int
export import def #extern _putw(_Word: int, _Stream: *s__iobuf) -> int
export import def #extern remove(_FileName: *char) -> int
export import def #extern rename(_OldFilename: *char, _NewFilename: *char) -> int
export import def #extern _unlink(_FileName: *char) -> int
export import def #extern unlink(_FileName: *char) -> int
export import def #extern rewind(_Stream: *s__iobuf)
export import def #extern _rmtmp() -> int
export import def #extern setbuf(_Stream: *s__iobuf, _Buffer: *char)
export import def #extern _setmaxstdio(_Maximum: int) -> int
export import def #extern setvbuf(_Stream: *s__iobuf, _Buffer: *char, _Mode: int, _Size: uint64) -> int
export import def #extern _tempnam(_DirectoryName: *char, _FilePrefix: *char) -> *char
export import def #extern tmpfile() -> *s__iobuf
export import def #extern ungetc(_Character: int, _Stream: *s__iobuf) -> int
export import def #extern _lock_file(_Stream: *s__iobuf)
export import def #extern _unlock_file(_Stream: *s__iobuf)
export import def #extern _fclose_nolock(_Stream: *s__iobuf) -> int
export import def #extern _fflush_nolock(_Stream: *s__iobuf) -> int
export import def #extern _fgetc_nolock(_Stream: *s__iobuf) -> int
export import def #extern _fputc_nolock(_Character: int, _Stream: *s__iobuf) -> int
export import def #extern _fread_nolock(_Buffer: *, _ElementSize: uint64, _ElementCount: uint64, _Stream: *s__iobuf) -> uint64
export import def #extern _fread_nolock_s(_Buffer: *, _BufferSize: uint64, _ElementSize: uint64, _ElementCount: uint64, _Stream: *s__iobuf) -> uint64
export import def #extern _fseek_nolock(_Stream: *s__iobuf, _Offset: long, _Origin: int) -> int
export import def #extern _fseeki64_nolock(_Stream: *s__iobuf, _Offset: int64, _Origin: int) -> int
export import def #extern _ftell_nolock(_Stream: *s__iobuf) -> long
export import def #extern _ftelli64_nolock(_Stream: *s__iobuf) -> int64
export import def #extern _fwrite_nolock(_Buffer: *, _ElementSize: uint64, _ElementCount: uint64, _Stream: *s__iobuf) -> uint64
export import def #extern _getc_nolock(_Stream: *s__iobuf) -> int
export import def #extern _putc_nolock(_Character: int, _Stream: *s__iobuf) -> int
export import def #extern _ungetc_nolock(_Character: int, _Stream: *s__iobuf) -> int
export import def #extern __p__commode() -> *int
export import def #extern __stdio_common_vfprintf(_Options: uint64, _Stream: *s__iobuf, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vfprintf_s(_Options: uint64, _Stream: *s__iobuf, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vfprintf_p(_Options: uint64, _Stream: *s__iobuf, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern vfprintf(_Stream: *s__iobuf, _Format: *char, _ArgList: *char) -> int
export import def #extern vprintf(_Format: *char, _ArgList: *char) -> int
export import def #extern fprintf(_Stream: *s__iobuf, _Format: *char, ...) -> int
export import def #extern _set_printf_count_output(_Value: int) -> int
export import def #extern _get_printf_count_output() -> int
export import def #extern printf(_Format: *char, ...) -> int
export import def #extern __stdio_common_vfscanf(_Options: uint64, _Stream: *s__iobuf, _Format: *char, _Locale: *s___crt_locale_pointers, _Arglist: *char) -> int
export import def #extern vfscanf(_Stream: *s__iobuf, _Format: *char, _ArgList: *char) -> int
export import def #extern vscanf(_Format: *char, _ArgList: *char) -> int
export import def #extern fscanf(_Stream: *s__iobuf, _Format: *char, ...) -> int
export import def #extern scanf(_Format: *char, ...) -> int
export import def #extern __stdio_common_vsprintf(_Options: uint64, _Buffer: *char, _BufferCount: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vsprintf_s(_Options: uint64, _Buffer: *char, _BufferCount: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vsnprintf_s(_Options: uint64, _Buffer: *char, _BufferCount: uint64, _MaxCount: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __stdio_common_vsprintf_p(_Options: uint64, _Buffer: *char, _BufferCount: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern _vsnprintf(_Buffer: *char, _BufferCount: uint64, _Format: *char, _Args: *char) -> int
export import def #extern vsnprintf(_Buffer: *char, _BufferCount: uint64, _Format: *char, _ArgList: *char) -> int
export import def #extern vsprintf(_Buffer: *char, _Format: *char, _Args: *char) -> int
export import def #extern sprintf(_Buffer: *char, _Format: *char, ...) -> int
export import def #extern snprintf(_Buffer: *char, _BufferCount: uint64, _Format: *char, ...) -> int
export import def #extern _snprintf(_Buffer: *char, _BufferCount: uint64, _Format: *char, ...) -> int
export import def #extern __stdio_common_vsscanf(_Options: uint64, _Buffer: *char, _BufferCount: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern vsscanf(_Buffer: *char, _Format: *char, _ArgList: *char) -> int
export import def #extern sscanf(_Buffer: *char, _Format: *char, ...) -> int
export import def #extern fcloseall() -> int
export import def #extern fdopen(_FileHandle: int, _Format: *char) -> *s__iobuf
export import def #extern fgetchar() -> int
export import def #extern fileno(_Stream: *s__iobuf) -> int
export import def #extern flushall() -> int
export import def #extern fputchar(_Ch: int) -> int
export import def #extern getw(_Stream: *s__iobuf) -> int
export import def #extern putw(_Ch: int, _Stream: *s__iobuf) -> int
export import def #extern rmtmp() -> int
export import def #extern memchr(_Buf: *, _Val: int, _MaxCount: uint64) -> *
export import def #extern memcmp(_Buf1: *, _Buf2: *, _Size: uint64) -> int
export import def #extern memcpy(_Dst: *, _Src: *, _Size: uint64) -> *
export import def #extern memmove(_Dst: *, _Src: *, _Size: uint64) -> *
export import def #extern memset(_Dst: *, _Val: int, _Size: uint64) -> *
export import def #extern strchr(_Str: *char, _Val: int) -> *char
export import def #extern strrchr(_Str: *char, _Ch: int) -> *char
export import def #extern strstr(_Str: *char, _SubStr: *char) -> *char
export import def #extern wcschr(_Str: *ushort, _Ch: ushort) -> *ushort
export import def #extern wcsrchr(_Str: *ushort, _Ch: ushort) -> *ushort
export import def #extern wcsstr(_Str: *ushort, _SubStr: *ushort) -> *ushort
export import def #extern memmove_s(_Destination: *, _DestinationSize: uint64, _Source: *, _SourceSize: uint64) -> int
export import def #extern _memicmp(_Buf1: *, _Buf2: *, _Size: uint64) -> int
export import def #extern _memicmp_l(_Buf1: *, _Buf2: *, _Size: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern memccpy(_Dst: *, _Src: *, _Val: int, _Size: uint64) -> *
export import def #extern memicmp(_Buf1: *, _Buf2: *, _Size: uint64) -> int
export import def #extern wcscat_s(_Destination: *ushort, _SizeInWords: uint64, _Source: *ushort) -> int
export import def #extern wcscpy_s(_Destination: *ushort, _SizeInWords: uint64, _Source: *ushort) -> int
export import def #extern wcsncat_s(_Destination: *ushort, _SizeInWords: uint64, _Source: *ushort, _MaxCount: uint64) -> int
export import def #extern wcsncpy_s(_Destination: *ushort, _SizeInWords: uint64, _Source: *ushort, _MaxCount: uint64) -> int
export import def #extern wcstok_s(_String: *ushort, _Delimiter: *ushort, _Context: **ushort) -> *ushort
export import def #extern _wcsdup(_String: *ushort) -> *ushort
export import def #extern wcscat(_Destination: *ushort, _Source: *ushort) -> *ushort
export import def #extern wcscmp(_String1: *ushort, _String2: *ushort) -> int
export import def #extern wcscpy(_Destination: *ushort, _Source: *ushort) -> *ushort
export import def #extern wcscspn(_String: *ushort, _Control: *ushort) -> uint64
export import def #extern wcslen(_String: *ushort) -> uint64
export import def #extern wcsnlen(_Source: *ushort, _MaxCount: uint64) -> uint64
export import def #extern wcsncat(_Destination: *ushort, _Source: *ushort, _Count: uint64) -> *ushort
export import def #extern wcsncmp(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern wcsncpy(_Destination: *ushort, _Source: *ushort, _Count: uint64) -> *ushort
export import def #extern wcspbrk(_String: *ushort, _Control: *ushort) -> *ushort
export import def #extern wcsspn(_String: *ushort, _Control: *ushort) -> uint64
export import def #extern wcstok(_String: *ushort, _Delimiter: *ushort, _Context: **ushort) -> *ushort
export import def #extern _wcserror(_ErrorNumber: int) -> *ushort
export import def #extern _wcserror_s(_Buffer: *ushort, _SizeInWords: uint64, _ErrorNumber: int) -> int
export import def #extern __wcserror(_String: *ushort) -> *ushort
export import def #extern __wcserror_s(_Buffer: *ushort, _SizeInWords: uint64, _ErrorMessage: *ushort) -> int
export import def #extern _wcsicmp(_String1: *ushort, _String2: *ushort) -> int
export import def #extern _wcsicmp_l(_String1: *ushort, _String2: *ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsnicmp(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern _wcsnicmp_l(_String1: *ushort, _String2: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsnset_s(_Destination: *ushort, _SizeInWords: uint64, _Value: ushort, _MaxCount: uint64) -> int
export import def #extern _wcsnset(_String: *ushort, _Value: ushort, _MaxCount: uint64) -> *ushort
export import def #extern _wcsrev(_String: *ushort) -> *ushort
export import def #extern _wcsset_s(_Destination: *ushort, _SizeInWords: uint64, _Value: ushort) -> int
export import def #extern _wcsset(_String: *ushort, _Value: ushort) -> *ushort
export import def #extern _wcslwr_s(_String: *ushort, _SizeInWords: uint64) -> int
export import def #extern _wcslwr(_String: *ushort) -> *ushort
export import def #extern _wcslwr_s_l(_String: *ushort, _SizeInWords: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcslwr_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> *ushort
export import def #extern _wcsupr_s(_String: *ushort, _Size: uint64) -> int
export import def #extern _wcsupr(_String: *ushort) -> *ushort
export import def #extern _wcsupr_s_l(_String: *ushort, _Size: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsupr_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> *ushort
export import def #extern wcsxfrm(_Destination: *ushort, _Source: *ushort, _MaxCount: uint64) -> uint64
export import def #extern _wcsxfrm_l(_Destination: *ushort, _Source: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern wcscoll(_String1: *ushort, _String2: *ushort) -> int
export import def #extern _wcscoll_l(_String1: *ushort, _String2: *ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsicoll(_String1: *ushort, _String2: *ushort) -> int
export import def #extern _wcsicoll_l(_String1: *ushort, _String2: *ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsncoll(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern _wcsncoll_l(_String1: *ushort, _String2: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsnicoll(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern _wcsnicoll_l(_String1: *ushort, _String2: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern wcsdup(_String: *ushort) -> *ushort
export import def #extern wcsicmp(_String1: *ushort, _String2: *ushort) -> int
export import def #extern wcsnicmp(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern wcsnset(_String: *ushort, _Value: ushort, _MaxCount: uint64) -> *ushort
export import def #extern wcsrev(_String: *ushort) -> *ushort
export import def #extern wcsset(_String: *ushort, _Value: ushort) -> *ushort
export import def #extern wcslwr(_String: *ushort) -> *ushort
export import def #extern wcsupr(_String: *ushort) -> *ushort
export import def #extern wcsicoll(_String1: *ushort, _String2: *ushort) -> int
export import def #extern strcpy_s(_Destination: *char, _SizeInBytes: uint64, _Source: *char) -> int
export import def #extern strcat_s(_Destination: *char, _SizeInBytes: uint64, _Source: *char) -> int
export import def #extern strerror_s(_Buffer: *char, _SizeInBytes: uint64, _ErrorNumber: int) -> int
export import def #extern strncat_s(_Destination: *char, _SizeInBytes: uint64, _Source: *char, _MaxCount: uint64) -> int
export import def #extern strncpy_s(_Destination: *char, _SizeInBytes: uint64, _Source: *char, _MaxCount: uint64) -> int
export import def #extern strtok_s(_String: *char, _Delimiter: *char, _Context: **char) -> *char
export import def #extern _memccpy(_Dst: *, _Src: *, _Val: int, _MaxCount: uint64) -> *
export import def #extern strcat(_Destination: *char, _Source: *char) -> *char
export import def #extern strcmp(_Str1: *char, _Str2: *char) -> int
export import def #extern _strcmpi(_String1: *char, _String2: *char) -> int
export import def #extern strcoll(_String1: *char, _String2: *char) -> int
export import def #extern _strcoll_l(_String1: *char, _String2: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern strcpy(_Destination: *char, _Source: *char) -> *char
export import def #extern strcspn(_Str: *char, _Control: *char) -> uint64
export import def #extern _strdup(_Source: *char) -> *char
export import def #extern _strerror(_ErrorMessage: *char) -> *char
export import def #extern _strerror_s(_Buffer: *char, _SizeInBytes: uint64, _ErrorMessage: *char) -> int
export import def #extern strerror(_ErrorMessage: int) -> *char
export import def #extern _stricmp(_String1: *char, _String2: *char) -> int
export import def #extern _stricoll(_String1: *char, _String2: *char) -> int
export import def #extern _stricoll_l(_String1: *char, _String2: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _stricmp_l(_String1: *char, _String2: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern strlen(_Str: *char) -> uint64
export import def #extern _strlwr_s(_String: *char, _Size: uint64) -> int
export import def #extern _strlwr(_String: *char) -> *char
export import def #extern _strlwr_s_l(_String: *char, _Size: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _strlwr_l(_String: *char, _Locale: *s___crt_locale_pointers) -> *char
export import def #extern strncat(_Destination: *char, _Source: *char, _Count: uint64) -> *char
export import def #extern strncmp(_Str1: *char, _Str2: *char, _MaxCount: uint64) -> int
export import def #extern _strnicmp(_String1: *char, _String2: *char, _MaxCount: uint64) -> int
export import def #extern _strnicmp_l(_String1: *char, _String2: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _strnicoll(_String1: *char, _String2: *char, _MaxCount: uint64) -> int
export import def #extern _strnicoll_l(_String1: *char, _String2: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _strncoll(_String1: *char, _String2: *char, _MaxCount: uint64) -> int
export import def #extern _strncoll_l(_String1: *char, _String2: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern __strncnt(_String: *char, _Count: uint64) -> uint64
export import def #extern strncpy(_Destination: *char, _Source: *char, _Count: uint64) -> *char
export import def #extern strnlen(_String: *char, _MaxCount: uint64) -> uint64
export import def #extern _strnset_s(_String: *char, _SizeInBytes: uint64, _Value: int, _MaxCount: uint64) -> int
export import def #extern _strnset(_Destination: *char, _Value: int, _Count: uint64) -> *char
export import def #extern strpbrk(_Str: *char, _Control: *char) -> *char
export import def #extern _strrev(_Str: *char) -> *char
export import def #extern _strset_s(_Destination: *char, _DestinationSize: uint64, _Value: int) -> int
export import def #extern _strset(_Destination: *char, _Value: int) -> *char
export import def #extern strspn(_Str: *char, _Control: *char) -> uint64
export import def #extern strtok(_String: *char, _Delimiter: *char) -> *char
export import def #extern _strupr_s(_String: *char, _Size: uint64) -> int
export import def #extern _strupr(_String: *char) -> *char
export import def #extern _strupr_s_l(_String: *char, _Size: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _strupr_l(_String: *char, _Locale: *s___crt_locale_pointers) -> *char
export import def #extern strxfrm(_Destination: *char, _Source: *char, _MaxCount: uint64) -> uint64
export import def #extern _strxfrm_l(_Destination: *char, _Source: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern strdup(_String: *char) -> *char
export import def #extern strcmpi(_String1: *char, _String2: *char) -> int
export import def #extern stricmp(_String1: *char, _String2: *char) -> int
export import def #extern strlwr(_String: *char) -> *char
export import def #extern strnicmp(_String1: *char, _String2: *char, _MaxCount: uint64) -> int
export import def #extern strnset(_String: *char, _Value: int, _MaxCount: uint64) -> *char
export import def #extern strrev(_String: *char) -> *char
export import def #extern strset(_String: *char, _Value: int) -> *char
export import def #extern strupr(_String: *char) -> *char
export import def #extern _wasctime(_Tm: *s_tm) -> *ushort
export import def #extern _wasctime_s(_Buffer: *ushort, _SizeInWords: uint64, _Tm: *s_tm) -> int
export import def #extern wcsftime(_Buffer: *ushort, _SizeInWords: uint64, _Format: *ushort, _Tm: *s_tm) -> uint64
export import def #extern _wcsftime_l(_Buffer: *ushort, _SizeInWords: uint64, _Format: *ushort, _Tm: *s_tm, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _wctime32(_Time: *long) -> *ushort
export import def #extern _wctime32_s(_Buffer: *ushort, _SizeInWords: uint64, _Time: *long) -> int
export import def #extern _wctime64(_Time: *int64) -> *ushort
export import def #extern _wctime64_s(_Buffer: *ushort, _SizeInWords: uint64, _Time: *int64) -> int
export import def #extern _wstrdate_s(_Buffer: *ushort, _SizeInWords: uint64) -> int
export import def #extern _wstrdate(_Buffer: *ushort) -> *ushort
export import def #extern _wstrtime_s(_Buffer: *ushort, _SizeInWords: uint64) -> int
export import def #extern _wstrtime(_Buffer: *ushort) -> *ushort
export import def #extern _wctime(_Time: *int64) -> *ushort
export import def #extern __daylight() -> *int
export import def #extern __dstbias() -> *long
export import def #extern __timezone() -> *long
export import def #extern __tzname() -> **char
export import def #extern _get_daylight(_Daylight: *int) -> int
export import def #extern _get_dstbias(_DaylightSavingsBias: *long) -> int
export import def #extern _get_timezone(_TimeZone: *long) -> int
export import def #extern _get_tzname(_ReturnValue: *uint64, _Buffer: *char, _SizeInBytes: uint64, _Index: int) -> int
export import def #extern asctime(_Tm: *s_tm) -> *char
export import def #extern asctime_s(_Buffer: *char, _SizeInBytes: uint64, _Tm: *s_tm) -> int
export import def #extern clock() -> long
export import def #extern _ctime32(_Time: *long) -> *char
export import def #extern _ctime32_s(_Buffer: *char, _SizeInBytes: uint64, _Time: *long) -> int
export import def #extern _ctime64(_Time: *int64) -> *char
export import def #extern _ctime64_s(_Buffer: *char, _SizeInBytes: uint64, _Time: *int64) -> int
export import def #extern _difftime32(_Time1: long, _Time2: long) -> double
export import def #extern _difftime64(_Time1: int64, _Time2: int64) -> double
export import def #extern _gmtime32(_Time: *long) -> *s_tm
export import def #extern _gmtime32_s(_Tm: *s_tm, _Time: *long) -> int
export import def #extern _gmtime64(_Time: *int64) -> *s_tm
export import def #extern _gmtime64_s(_Tm: *s_tm, _Time: *int64) -> int
export import def #extern _localtime32(_Time: *long) -> *s_tm
export import def #extern _localtime32_s(_Tm: *s_tm, _Time: *long) -> int
export import def #extern _localtime64(_Time: *int64) -> *s_tm
export import def #extern _localtime64_s(_Tm: *s_tm, _Time: *int64) -> int
export import def #extern _mkgmtime32(_Tm: *s_tm) -> long
export import def #extern _mkgmtime64(_Tm: *s_tm) -> int64
export import def #extern _mktime32(_Tm: *s_tm) -> long
export import def #extern _mktime64(_Tm: *s_tm) -> int64
export import def #extern strftime(_Buffer: *char, _SizeInBytes: uint64, _Format: *char, _Tm: *s_tm) -> uint64
export import def #extern _strftime_l(_Buffer: *char, _MaxSize: uint64, _Format: *char, _Tm: *s_tm, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _strdate_s(_Buffer: *char, _SizeInBytes: uint64) -> int
export import def #extern _strdate(_Buffer: *char) -> *char
export import def #extern _strtime_s(_Buffer: *char, _SizeInBytes: uint64) -> int
export import def #extern _strtime(_Buffer: *char) -> *char
export import def #extern _time32(_Time: *long) -> long
export import def #extern _time64(_Time: *int64) -> int64
export import def #extern _timespec32_get(_Ts: *s__timespec32, _Base: int) -> int
export import def #extern _timespec64_get(_Ts: *s__timespec64, _Base: int) -> int
export import def #extern _tzset()
export import def #extern _getsystime(_Tm: *s_tm) -> uint
export import def #extern _setsystime(_Tm: *s_tm, _Milliseconds: uint) -> uint
export import def #extern ctime(_Time: *int64) -> *char
export import def #extern difftime(_Time1: int64, _Time2: int64) -> double
export import def #extern gmtime(_Time: *int64) -> *s_tm
export import def #extern localtime(_Time: *int64) -> *s_tm
export import def #extern mktime(_Tm: *s_tm) -> int64
export import def #extern time(_Time: *int64) -> int64
export import def #extern timespec_get(_Ts: *s_timespec, _Base: int) -> int
export import def #extern tzset()
export import var #extern _HUGE: double
export import def #extern _fperrraise(_Except: int)
export import def #extern _dclass(_X: double) -> short
export import def #extern _ldclass(_X: float80) -> short
export import def #extern _fdclass(_X: float) -> short
export import def #extern _dsign(_X: double) -> int
export import def #extern _ldsign(_X: float80) -> int
export import def #extern _fdsign(_X: float) -> int
export import def #extern _dpcomp(_X: double, _Y: double) -> int
export import def #extern _ldpcomp(_X: float80, _Y: float80) -> int
export import def #extern _fdpcomp(_X: float, _Y: float) -> int
export import def #extern _dtest(_Px: *double) -> short
export import def #extern _ldtest(_Px: *float80) -> short
export import def #extern _fdtest(_Px: *float) -> short
export import def #extern _d_int(_Px: *double, _Xexp: short) -> short
export import def #extern _ld_int(_Px: *float80, _Xexp: short) -> short
export import def #extern _fd_int(_Px: *float, _Xexp: short) -> short
export import def #extern _dscale(_Px: *double, _Lexp: long) -> short
export import def #extern _ldscale(_Px: *float80, _Lexp: long) -> short
export import def #extern _fdscale(_Px: *float, _Lexp: long) -> short
export import def #extern _dunscale(_Pex: *short, _Px: *double) -> short
export import def #extern _ldunscale(_Pex: *short, _Px: *float80) -> short
export import def #extern _fdunscale(_Pex: *short, _Px: *float) -> short
export import def #extern _dexp(_Px: *double, _Y: double, _Eoff: long) -> short
export import def #extern _ldexp(_Px: *float80, _Y: float80, _Eoff: long) -> short
export import def #extern _fdexp(_Px: *float, _Y: float, _Eoff: long) -> short
export import def #extern _dnorm(_Ps: *ushort) -> short
export import def #extern _fdnorm(_Ps: *ushort) -> short
export import def #extern _dpoly(_X: double, _Tab: *double, _N: int) -> double
export import def #extern _ldpoly(_X: float80, _Tab: *float80, _N: int) -> float80
export import def #extern _fdpoly(_X: float, _Tab: *float, _N: int) -> float
export import def #extern _dlog(_X: double, _Baseflag: int) -> double
export import def #extern _ldlog(_X: float80, _Baseflag: int) -> float80
export import def #extern _fdlog(_X: float, _Baseflag: int) -> float
export import def #extern _dsin(_X: double, _Qoff: uint) -> double
export import def #extern _ldsin(_X: float80, _Qoff: uint) -> float80
export import def #extern _fdsin(_X: float, _Qoff: uint) -> float
export import var #extern _Denorm_C: u__float_const
export import var #extern _Inf_C: u__float_const
export import var #extern _Nan_C: u__float_const
export import var #extern _Snan_C: u__float_const
export import var #extern _Hugeval_C: u__float_const
export import var #extern _FDenorm_C: u__float_const
export import var #extern _FInf_C: u__float_const
export import var #extern _FNan_C: u__float_const
export import var #extern _FSnan_C: u__float_const
export import var #extern _LDenorm_C: u__float_const
export import var #extern _LInf_C: u__float_const
export import var #extern _LNan_C: u__float_const
export import var #extern _LSnan_C: u__float_const
export import var #extern _Eps_C: u__float_const
export import var #extern _Rteps_C: u__float_const
export import var #extern _FEps_C: u__float_const
export import var #extern _FRteps_C: u__float_const
export import var #extern _LEps_C: u__float_const
export import var #extern _LRteps_C: u__float_const
export import var #extern _Zero_C: double
export import var #extern _Xbig_C: double
export import var #extern _FZero_C: float
export import var #extern _FXbig_C: float
export import var #extern _LZero_C: float80
export import var #extern _LXbig_C: float80
export import def #extern acos(_X: double) -> double
export import def #extern asin(_X: double) -> double
export import def #extern atan(_X: double) -> double
export import def #extern atan2(_Y: double, _X: double) -> double
export import def #extern cos(_X: double) -> double
export import def #extern cosh(_X: double) -> double
export import def #extern exp(_X: double) -> double
export import def #extern fabs(_X: double) -> double
export import def #extern fmod(_X: double, _Y: double) -> double
export import def #extern log(_X: double) -> double
export import def #extern log10(_X: double) -> double
export import def #extern pow(_X: double, _Y: double) -> double
export import def #extern sin(_X: double) -> double
export import def #extern sinh(_X: double) -> double
export import def #extern sqrt(_X: double) -> double
export import def #extern tan(_X: double) -> double
export import def #extern tanh(_X: double) -> double
export import def #extern acosh(_X: double) -> double
export import def #extern asinh(_X: double) -> double
export import def #extern atanh(_X: double) -> double
export import def #extern _cabs(_Complex_value: s__complex) -> double
export import def #extern cbrt(_X: double) -> double
export import def #extern ceil(_X: double) -> double
export import def #extern _chgsign(_X: double) -> double
export import def #extern copysign(_Number: double, _Sign: double) -> double
export import def #extern _copysign(_Number: double, _Sign: double) -> double
export import def #extern erf(_X: double) -> double
export import def #extern erfc(_X: double) -> double
export import def #extern exp2(_X: double) -> double
export import def #extern expm1(_X: double) -> double
export import def #extern fdim(_X: double, _Y: double) -> double
export import def #extern floor(_X: double) -> double
export import def #extern fma(_X: double, _Y: double, _Z: double) -> double
export import def #extern fmax(_X: double, _Y: double) -> double
export import def #extern fmin(_X: double, _Y: double) -> double
export import def #extern frexp(_X: double, _Y: *int) -> double
export import def #extern hypot(_X: double, _Y: double) -> double
export import def #extern _hypot(_X: double, _Y: double) -> double
export import def #extern ilogb(_X: double) -> int
export import def #extern ldexp(_X: double, _Y: int) -> double
export import def #extern lgamma(_X: double) -> double
export import def #extern llrint(_X: double) -> int64
export import def #extern llround(_X: double) -> int64
export import def #extern log1p(_X: double) -> double
export import def #extern log2(_X: double) -> double
export import def #extern logb(_X: double) -> double
export import def #extern lrint(_X: double) -> long
export import def #extern lround(_X: double) -> long
export import def #extern _matherr(_Except: *s__exception) -> int
export import def #extern modf(_X: double, _Y: *double) -> double
export import def #extern nan(_X: *char) -> double
export import def #extern nearbyint(_X: double) -> double
export import def #extern nextafter(_X: double, _Y: double) -> double
export import def #extern nexttoward(_X: double, _Y: float80) -> double
export import def #extern remainder(_X: double, _Y: double) -> double
export import def #extern remquo(_X: double, _Y: double, _Z: *int) -> double
export import def #extern rint(_X: double) -> double
export import def #extern round(_X: double) -> double
export import def #extern scalbln(_X: double, _Y: long) -> double
export import def #extern scalbn(_X: double, _Y: int) -> double
export import def #extern tgamma(_X: double) -> double
export import def #extern trunc(_X: double) -> double
export import def #extern _j0(_X: double) -> double
export import def #extern _j1(_X: double) -> double
export import def #extern _jn(_X: int, _Y: double) -> double
export import def #extern _y0(_X: double) -> double
export import def #extern _y1(_X: double) -> double
export import def #extern _yn(_X: int, _Y: double) -> double
export import def #extern acoshf(_X: float) -> float
export import def #extern asinhf(_X: float) -> float
export import def #extern atanhf(_X: float) -> float
export import def #extern cbrtf(_X: float) -> float
export import def #extern _chgsignf(_X: float) -> float
export import def #extern copysignf(_Number: float, _Sign: float) -> float
export import def #extern _copysignf(_Number: float, _Sign: float) -> float
export import def #extern erff(_X: float) -> float
export import def #extern erfcf(_X: float) -> float
export import def #extern expm1f(_X: float) -> float
export import def #extern exp2f(_X: float) -> float
export import def #extern fdimf(_X: float, _Y: float) -> float
export import def #extern fmaf(_X: float, _Y: float, _Z: float) -> float
export import def #extern fmaxf(_X: float, _Y: float) -> float
export import def #extern fminf(_X: float, _Y: float) -> float
export import def #extern _hypotf(_X: float, _Y: float) -> float
export import def #extern ilogbf(_X: float) -> int
export import def #extern lgammaf(_X: float) -> float
export import def #extern llrintf(_X: float) -> int64
export import def #extern llroundf(_X: float) -> int64
export import def #extern log1pf(_X: float) -> float
export import def #extern log2f(_X: float) -> float
export import def #extern logbf(_X: float) -> float
export import def #extern lrintf(_X: float) -> long
export import def #extern lroundf(_X: float) -> long
export import def #extern nanf(_X: *char) -> float
export import def #extern nearbyintf(_X: float) -> float
export import def #extern nextafterf(_X: float, _Y: float) -> float
export import def #extern nexttowardf(_X: float, _Y: float80) -> float
export import def #extern remainderf(_X: float, _Y: float) -> float
export import def #extern remquof(_X: float, _Y: float, _Z: *int) -> float
export import def #extern rintf(_X: float) -> float
export import def #extern roundf(_X: float) -> float
export import def #extern scalblnf(_X: float, _Y: long) -> float
export import def #extern scalbnf(_X: float, _Y: int) -> float
export import def #extern tgammaf(_X: float) -> float
export import def #extern truncf(_X: float) -> float
export import def #extern _logbf(_X: float) -> float
export import def #extern _nextafterf(_X: float, _Y: float) -> float
export import def #extern _finitef(_X: float) -> int
export import def #extern _isnanf(_X: float) -> int
export import def #extern _fpclassf(_X: float) -> int
export import def #extern _set_FMA3_enable(_Flag: int) -> int
export import def #extern _get_FMA3_enable() -> int
export import def #extern acosf(_X: float) -> float
export import def #extern asinf(_X: float) -> float
export import def #extern atan2f(_Y: float, _X: float) -> float
export import def #extern atanf(_X: float) -> float
export import def #extern ceilf(_X: float) -> float
export import def #extern cosf(_X: float) -> float
export import def #extern coshf(_X: float) -> float
export import def #extern expf(_X: float) -> float
export import def #extern fabsf(_X: float) -> float
export import def #extern floorf(_X: float) -> float
export import def #extern fmodf(_X: float, _Y: float) -> float
export import def #extern frexpf(_X: float, _Y: *int) -> float
export import def #extern hypotf(_X: float, _Y: float) -> float
export import def #extern ldexpf(_X: float, _Y: int) -> float
export import def #extern log10f(_X: float) -> float
export import def #extern logf(_X: float) -> float
export import def #extern modff(_X: float, _Y: *float) -> float
export import def #extern powf(_X: float, _Y: float) -> float
export import def #extern sinf(_X: float) -> float
export import def #extern sinhf(_X: float) -> float
export import def #extern sqrtf(_X: float) -> float
export import def #extern tanf(_X: float) -> float
export import def #extern tanhf(_X: float) -> float
export import def #extern acoshl(_X: float80) -> float80
export import def #extern acosl(_X: float80) -> float80
export import def #extern asinhl(_X: float80) -> float80
export import def #extern asinl(_X: float80) -> float80
export import def #extern atan2l(_Y: float80, _X: float80) -> float80
export import def #extern atanhl(_X: float80) -> float80
export import def #extern atanl(_X: float80) -> float80
export import def #extern cbrtl(_X: float80) -> float80
export import def #extern ceill(_X: float80) -> float80
export import def #extern copysignl(_Number: float80, _Sign: float80) -> float80
export import def #extern coshl(_X: float80) -> float80
export import def #extern cosl(_X: float80) -> float80
export import def #extern erfl(_X: float80) -> float80
export import def #extern erfcl(_X: float80) -> float80
export import def #extern expl(_X: float80) -> float80
export import def #extern exp2l(_X: float80) -> float80
export import def #extern expm1l(_X: float80) -> float80
export import def #extern fabsl(_X: float80) -> float80
export import def #extern fdiml(_X: float80, _Y: float80) -> float80
export import def #extern floorl(_X: float80) -> float80
export import def #extern fmal(_X: float80, _Y: float80, _Z: float80) -> float80
export import def #extern fmaxl(_X: float80, _Y: float80) -> float80
export import def #extern fminl(_X: float80, _Y: float80) -> float80
export import def #extern fmodl(_X: float80, _Y: float80) -> float80
export import def #extern frexpl(_X: float80, _Y: *int) -> float80
export import def #extern ilogbl(_X: float80) -> int
export import def #extern hypotl(_X: float80, _Y: float80) -> float80
export import def #extern ldexpl(_X: float80, _Y: int) -> float80
export import def #extern lgammal(_X: float80) -> float80
export import def #extern llrintl(_X: float80) -> int64
export import def #extern llroundl(_X: float80) -> int64
export import def #extern logl(_X: float80) -> float80
export import def #extern log10l(_X: float80) -> float80
export import def #extern log1pl(_X: float80) -> float80
export import def #extern log2l(_X: float80) -> float80
export import def #extern logbl(_X: float80) -> float80
export import def #extern lrintl(_X: float80) -> long
export import def #extern lroundl(_X: float80) -> long
export import def #extern modfl(_X: float80, _Y: *float80) -> float80
export import def #extern nanl(_X: *char) -> float80
export import def #extern nearbyintl(_X: float80) -> float80
export import def #extern nextafterl(_X: float80, _Y: float80) -> float80
export import def #extern nexttowardl(_X: float80, _Y: float80) -> float80
export import def #extern powl(_X: float80, _Y: float80) -> float80
export import def #extern remainderl(_X: float80, _Y: float80) -> float80
export import def #extern remquol(_X: float80, _Y: float80, _Z: *int) -> float80
export import def #extern rintl(_X: float80) -> float80
export import def #extern roundl(_X: float80) -> float80
export import def #extern scalblnl(_X: float80, _Y: long) -> float80
export import def #extern scalbnl(_X: float80, _Y: int) -> float80
export import def #extern sinhl(_X: float80) -> float80
export import def #extern sinl(_X: float80) -> float80
export import def #extern sqrtl(_X: float80) -> float80
export import def #extern tanhl(_X: float80) -> float80
export import def #extern tanl(_X: float80) -> float80
export import def #extern tgammal(_X: float80) -> float80
export import def #extern truncl(_X: float80) -> float80
export import var #extern HUGE: double
export import def #extern j0(_X: double) -> double
export import def #extern j1(_X: double) -> double
export import def #extern jn(_X: int, _Y: double) -> double
export import def #extern y0(_X: double) -> double
export import def #extern y1(_X: double) -> double
export import def #extern yn(_X: int, _Y: double) -> double
export import def #extern _wassert(_Message: *ushort, _File: *ushort, _Line: uint)
export import def #extern __pxcptinfoptrs() -> **
export import def #extern signal(_Signal: int, _Function: def (int) -> ()) -> def (int) -> ()
export import def #extern raise(_Signal: int) -> int
export import def #extern __pctype_func() -> *ushort
export import def #extern __pwctype_func() -> *ushort
export import def #extern iswalnum(_C: ushort) -> int
export import def #extern iswalpha(_C: ushort) -> int
export import def #extern iswascii(_C: ushort) -> int
export import def #extern iswblank(_C: ushort) -> int
export import def #extern iswcntrl(_C: ushort) -> int
export import def #extern iswdigit(_C: ushort) -> int
export import def #extern iswgraph(_C: ushort) -> int
export import def #extern iswlower(_C: ushort) -> int
export import def #extern iswprint(_C: ushort) -> int
export import def #extern iswpunct(_C: ushort) -> int
export import def #extern iswspace(_C: ushort) -> int
export import def #extern iswupper(_C: ushort) -> int
export import def #extern iswxdigit(_C: ushort) -> int
export import def #extern __iswcsymf(_C: ushort) -> int
export import def #extern __iswcsym(_C: ushort) -> int
export import def #extern _iswalnum_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswalpha_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswblank_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswcntrl_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswdigit_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswgraph_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswlower_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswprint_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswpunct_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswspace_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswupper_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswxdigit_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswcsymf_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswcsym_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern towupper(_C: ushort) -> ushort
export import def #extern towlower(_C: ushort) -> ushort
export import def #extern iswctype(_C: ushort, _Type: ushort) -> int
export import def #extern _towupper_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> ushort
export import def #extern _towlower_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> ushort
export import def #extern _iswctype_l(_C: ushort, _Type: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isleadbyte(_C: int) -> int
export import def #extern _isleadbyte_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern is_wctype(_C: ushort, _Type: ushort) -> int
export import def #extern _isctype(_C: int, _Type: int) -> int
export import def #extern _isctype_l(_C: int, _Type: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isalpha(_C: int) -> int
export import def #extern _isalpha_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isupper(_C: int) -> int
export import def #extern _isupper_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern islower(_C: int) -> int
export import def #extern _islower_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isdigit(_C: int) -> int
export import def #extern _isdigit_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isxdigit(_C: int) -> int
export import def #extern _isxdigit_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isspace(_C: int) -> int
export import def #extern _isspace_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern ispunct(_C: int) -> int
export import def #extern _ispunct_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isblank(_C: int) -> int
export import def #extern _isblank_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isalnum(_C: int) -> int
export import def #extern _isalnum_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isprint(_C: int) -> int
export import def #extern _isprint_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isgraph(_C: int) -> int
export import def #extern _isgraph_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern iscntrl(_C: int) -> int
export import def #extern _iscntrl_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern toupper(_C: int) -> int
export import def #extern tolower(_C: int) -> int
export import def #extern _tolower(_C: int) -> int
export import def #extern _tolower_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _toupper(_C: int) -> int
export import def #extern _toupper_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern __isascii(_C: int) -> int
export import def #extern __toascii(_C: int) -> int
export import def #extern __iscsymf(_C: int) -> int
export import def #extern __iscsym(_C: int) -> int
export import def #extern _lock_locales()
export import def #extern _unlock_locales()
export import def #extern _configthreadlocale(_Flag: int) -> int
export import def #extern setlocale(_Category: int, _Locale: *char) -> *char
export import def #extern localeconv() -> *s_lconv
export import def #extern _get_current_locale() -> *s___crt_locale_pointers
export import def #extern _create_locale(_Category: int, _Locale: *char) -> *s___crt_locale_pointers
export import def #extern _free_locale(_Locale: *s___crt_locale_pointers)
export import def #extern _wsetlocale(_Category: int, _Locale: *ushort) -> *ushort
export import def #extern _wcreate_locale(_Category: int, _Locale: *ushort) -> *s___crt_locale_pointers
export import def #extern ___lc_locale_name_func() -> **ushort
export import def #extern ___lc_codepage_func() -> uint
export import def #extern ___lc_collate_cp_func() -> uint
export import def #extern _Getdays() -> *char
export import def #extern _Getmonths() -> *char
export import def #extern _Gettnames() -> *
export import def #extern _W_Getdays() -> *ushort
export import def #extern _W_Getmonths() -> *ushort
export import def #extern _W_Gettnames() -> *
export import def #extern _Strftime(_Buffer: *char, _Max_size: uint64, _Format: *char, _Timeptr: *s_tm, _Lc_time_arg: *) -> uint64
export import def #extern _Wcsftime(_Buffer: *ushort, _Max_size: uint64, _Format: *ushort, _Timeptr: *s_tm, _Lc_time_arg: *) -> uint64
export import def #extern _setjmp(_Buf: *s__SETJMP_FLOAT128) -> int
export import def #extern longjmp(_Buf: *s__SETJMP_FLOAT128, _Value: int)
export import def #extern _clearfp() -> uint
export import def #extern _controlfp(_NewValue: uint, _Mask: uint) -> uint
export import def #extern _set_controlfp(_NewValue: uint, _Mask: uint)
export import def #extern _controlfp_s(_CurrentState: *uint, _NewValue: uint, _Mask: uint) -> int
export import def #extern _statusfp() -> uint
export import def #extern _fpreset()
export import def #extern _control87(_NewValue: uint, _Mask: uint) -> uint
export import def #extern __fpecode() -> *int
export import def #extern __fpe_flt_rounds() -> int
export import def #extern _scalb(_X: double, _Y: long) -> double
export import def #extern _logb(_X: double) -> double
export import def #extern _nextafter(_X: double, _Y: double) -> double
export import def #extern _finite(_X: double) -> int
export import def #extern _isnan(_X: double) -> int
export import def #extern _fpclass(_X: double) -> int
export import def #extern _scalbf(_X: float, _Y: long) -> float
export import def #extern fpreset()
export import def #extern _cgetws_s(_Buffer: *ushort, _BufferCount: uint64, _SizeRead: *uint64) -> int
export import def #extern _cputws(_Buffer: *ushort) -> int
export import def #extern _getwch() -> ushort
export import def #extern _getwche() -> ushort
export import def #extern _putwch(_Character: ushort) -> ushort
export import def #extern _ungetwch(_Character: ushort) -> ushort
export import def #extern _getwch_nolock() -> ushort
export import def #extern _getwche_nolock() -> ushort
export import def #extern _putwch_nolock(_Character: ushort) -> ushort
export import def #extern _ungetwch_nolock(_Character: ushort) -> ushort
export import def #extern __conio_common_vcwprintf(_Options: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __conio_common_vcwprintf_s(_Options: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __conio_common_vcwprintf_p(_Options: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __conio_common_vcwscanf(_Options: uint64, _Format: *ushort, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern _cgets_s(_Buffer: *char, _BufferCount: uint64, _SizeRead: *uint64) -> int
export import def #extern _cputs(_Buffer: *char) -> int
export import def #extern __conio_common_vcprintf(_Options: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __conio_common_vcprintf_s(_Options: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __conio_common_vcprintf_p(_Options: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern __conio_common_vcscanf(_Options: uint64, _Format: *char, _Locale: *s___crt_locale_pointers, _ArgList: *char) -> int
export import def #extern _kbhit() -> int
export import def #extern _getch() -> int
export import def #extern _getche() -> int
export import def #extern _putch(_Ch: int) -> int
export import def #extern _ungetch(_Ch: int) -> int
export import def #extern _getch_nolock() -> int
export import def #extern _getche_nolock() -> int
export import def #extern _putch_nolock(_Ch: int) -> int
export import def #extern _ungetch_nolock(_Ch: int) -> int
export import def #extern cgets(_Buffer: *char) -> *char
export import def #extern cputs(_String: *char) -> int
export import def #extern getch() -> int
export import def #extern getche() -> int
export import def #extern kbhit() -> int
export import def #extern putch(_Ch: int) -> int
export import def #extern ungetch(_Ch: int) -> int
export import def #extern _waccess(_FileName: *ushort, _AccessMode: int) -> int
export import def #extern _waccess_s(_FileName: *ushort, _AccessMode: int) -> int
export import def #extern _wchmod(_FileName: *ushort, _Mode: int) -> int
export import def #extern _wcreat(_FileName: *ushort, _PermissionMode: int) -> int
export import def #extern _wfindfirst32(_FileName: *ushort, _FindData: *s__wfinddata32_t) -> int64
export import def #extern _wfindnext32(_FindHandle: int64, _FindData: *s__wfinddata32_t) -> int
export import def #extern _wunlink(_FileName: *ushort) -> int
export import def #extern _wrename(_OldFileName: *ushort, _NewFileName: *ushort) -> int
export import def #extern _wmktemp_s(_TemplateName: *ushort, _SizeInWords: uint64) -> int
export import def #extern _wmktemp(_TemplateName: *ushort) -> *ushort
export import def #extern _wfindfirst32i64(_FileName: *ushort, _FindData: *s__wfinddata32i64_t) -> int64
export import def #extern _wfindfirst64i32(_FileName: *ushort, _FindData: *s__wfinddata64i32_t) -> int64
export import def #extern _wfindfirst64(_FileName: *ushort, _FindData: *s__wfinddata64_t) -> int64
export import def #extern _wfindnext32i64(_FindHandle: int64, _FindData: *s__wfinddata32i64_t) -> int
export import def #extern _wfindnext64i32(_FindHandle: int64, _FindData: *s__wfinddata64i32_t) -> int
export import def #extern _wfindnext64(_FindHandle: int64, _FindData: *s__wfinddata64_t) -> int
export import def #extern _wsopen_s(_FileHandle: *int, _FileName: *ushort, _OpenFlag: int, _ShareFlag: int, _PermissionFlag: int) -> int
export import def #extern _wsopen_dispatch(_FileName: *ushort, _OFlag: int, _ShFlag: int, _PMode: int, _PFileHandle: *int, _BSecure: int) -> int
export import def #extern _wopen(_FileName: *ushort, _OpenFlag: int, ...) -> int
export import def #extern _wsopen(_FileName: *ushort, _OpenFlag: int, _ShareFlag: int, ...) -> int
export import def #extern _access(_FileName: *char, _AccessMode: int) -> int
export import def #extern _access_s(_FileName: *char, _AccessMode: int) -> int
export import def #extern _chmod(_FileName: *char, _Mode: int) -> int
export import def #extern _chsize(_FileHandle: int, _Size: long) -> int
export import def #extern _chsize_s(_FileHandle: int, _Size: int64) -> int
export import def #extern _close(_FileHandle: int) -> int
export import def #extern _commit(_FileHandle: int) -> int
export import def #extern _creat(_FileName: *char, _PermissionMode: int) -> int
export import def #extern _dup(_FileHandle: int) -> int
export import def #extern _dup2(_FileHandleSrc: int, _FileHandleDst: int) -> int
export import def #extern _eof(_FileHandle: int) -> int
export import def #extern _filelength(_FileHandle: int) -> long
export import def #extern _findfirst32(_FileName: *char, _FindData: *s__finddata32_t) -> int64
export import def #extern _findnext32(_FindHandle: int64, _FindData: *s__finddata32_t) -> int
export import def #extern _findclose(_FindHandle: int64) -> int
export import def #extern _get_osfhandle(_FileHandle: int) -> int64
export import def #extern _isatty(_FileHandle: int) -> int
export import def #extern _locking(_FileHandle: int, _LockMode: int, _NumOfBytes: long) -> int
export import def #extern _lseek(_FileHandle: int, _Offset: long, _Origin: int) -> long
export import def #extern _mktemp_s(_TemplateName: *char, _Size: uint64) -> int
export import def #extern _mktemp(_TemplateName: *char) -> *char
export import def #extern _open_osfhandle(_OSFileHandle: int64, _Flags: int) -> int
export import def #extern _pipe(_PtHandles: *int, _PipeSize: uint, _TextMode: int) -> int
export import def #extern _read(_FileHandle: int, _DstBuf: *, _MaxCharCount: uint) -> int
export import def #extern _setmode(_FileHandle: int, _Mode: int) -> int
export import def #extern _tell(_FileHandle: int) -> long
export import def #extern _umask(_Mode: int) -> int
export import def #extern _umask_s(_NewMode: int, _OldMode: *int) -> int
export import def #extern _write(_FileHandle: int, _Buf: *, _MaxCharCount: uint) -> int
export import def #extern _filelengthi64(_FileHandle: int) -> int64
export import def #extern _findfirst32i64(_FileName: *char, _FindData: *s__finddata32i64_t) -> int64
export import def #extern _findfirst64i32(_FileName: *char, _FindData: *s__finddata64i32_t) -> int64
export import def #extern _findfirst64(_FileName: *char, _FindData: *s___finddata64_t) -> int64
export import def #extern _findnext32i64(_FindHandle: int64, _FindData: *s__finddata32i64_t) -> int
export import def #extern _findnext64i32(_FindHandle: int64, _FindData: *s__finddata64i32_t) -> int
export import def #extern _findnext64(_FindHandle: int64, _FindData: *s___finddata64_t) -> int
export import def #extern _lseeki64(_FileHandle: int, _Offset: int64, _Origin: int) -> int64
export import def #extern _telli64(_FileHandle: int) -> int64
export import def #extern _sopen_s(_FileHandle: *int, _FileName: *char, _OpenFlag: int, _ShareFlag: int, _PermissionMode: int) -> int
export import def #extern _sopen_dispatch(_FileName: *char, _OFlag: int, _ShFlag: int, _PMode: int, _PFileHandle: *int, _BSecure: int) -> int
export import def #extern _open(_FileName: *char, _OpenFlag: int, ...) -> int
export import def #extern _sopen(_FileName: *char, _OpenFlag: int, _ShareFlag: int, ...) -> int
export import def #extern access(_FileName: *char, _AccessMode: int) -> int
export import def #extern chmod(_FileName: *char, _AccessMode: int) -> int
export import def #extern chsize(_FileHandle: int, _Size: long) -> int
export import def #extern close(_FileHandle: int) -> int
export import def #extern creat(_FileName: *char, _PermissionMode: int) -> int
export import def #extern dup(_FileHandle: int) -> int
export import def #extern dup2(_FileHandleSrc: int, _FileHandleDst: int) -> int
export import def #extern eof(_FileHandle: int) -> int
export import def #extern filelength(_FileHandle: int) -> long
export import def #extern isatty(_FileHandle: int) -> int
export import def #extern locking(_FileHandle: int, _LockMode: int, _NumOfBytes: long) -> int
export import def #extern lseek(_FileHandle: int, _Offset: long, _Origin: int) -> long
export import def #extern open(_FileName: *char, _OpenFlag: int, ...) -> int
export import def #extern read(_FileHandle: int, _DstBuf: *, _MaxCharCount: uint) -> int
export import def #extern setmode(_FileHandle: int, _Mode: int) -> int
export import def #extern sopen(_FileName: *char, _OpenFlag: int, _ShareFlag: int, ...) -> int
export import def #extern tell(_FileHandle: int) -> long
export import def #extern umask(_Mode: int) -> int
export import def #extern write(_FileHandle: int, _Buf: *, _MaxCharCount: uint) -> int
