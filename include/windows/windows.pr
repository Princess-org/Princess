export type e__EXCEPTION_DISPOSITION = enum { ExceptionContinueExecution; ExceptionContinueSearch = 1; ExceptionNestedException = 2; ExceptionCollidedUnwind = 3; }
export type s___crt_locale_data_public = struct { _locale_pctype: *ushort; _locale_mb_cur_max: int; _locale_lc_codepage: uint; }
export type s___crt_locale_data
export type s___crt_multibyte_data
export type s___crt_locale_pointers = struct { locinfo: *s___crt_locale_data; mbcinfo: *s___crt_multibyte_data; }
export type s__Mbstatet = struct { _Wchar: ulong; _Byte: ushort; _State: ushort; }
export type s__PROCESSOR_NUMBER = struct { Group: ushort; Number: uint8; Reserved: uint8; }
export type s__GROUP_AFFINITY = struct { Mask: uint64; Group: ushort; Reserved: [3; ushort]; }
export type e_COMPARTMENT_ID = enum { UNSPECIFIED_COMPARTMENT_ID; DEFAULT_COMPARTMENT_ID = 1; }
export type s__FLOAT128 = struct { LowPart: int64; HighPart: int64; }
export type u__LARGE_INTEGER = struct #union { struct { LowPart: ulong; HighPart: long; }; u: struct { LowPart: ulong; HighPart: long; }; QuadPart: int64; }
export type u__ULARGE_INTEGER = struct #union { struct { LowPart: ulong; HighPart: ulong; }; u: struct { LowPart: ulong; HighPart: ulong; }; QuadPart: uint64; }
export type s__LUID = struct { LowPart: ulong; HighPart: long; }
export type s__LIST_ENTRY
export type s__LIST_ENTRY = struct { Flink: *s__LIST_ENTRY; Blink: *s__LIST_ENTRY; }
export type s__SINGLE_LIST_ENTRY
export type s__SINGLE_LIST_ENTRY = struct { Next: *s__SINGLE_LIST_ENTRY; }
export type s_LIST_ENTRY32 = struct { Flink: ulong; Blink: ulong; }
export type s_LIST_ENTRY64 = struct { Flink: uint64; Blink: uint64; }
export type s__GUID = struct { Data1: ulong; Data2: ushort; Data3: ushort; Data4: [8; uint8]; }
export type s__OBJECTID = struct { Lineage: s__GUID; Uniquifier: ulong; }
export type s__EXCEPTION_RECORD
export type s__CONTEXT
export type s__M128A = struct { Low: uint64; High: int64; }
export type s__XSAVE_FORMAT = struct { ControlWord: ushort; StatusWord: ushort; TagWord: uint8; Reserved1: uint8; ErrorOpcode: ushort; ErrorOffset: ulong; ErrorSelector: ushort; Reserved2: ushort; DataOffset: ulong; DataSelector: ushort; Reserved3: ushort; MxCsr: ulong; MxCsr_Mask: ulong; FloatRegisters: [8; s__M128A]; XmmRegisters: [16; s__M128A]; Reserved4: [96; uint8]; }
export type s__XSAVE_CET_U_FORMAT = struct { Ia32CetUMsr: uint64; Ia32Pl3SspMsr: uint64; }
export type s__XSAVE_AREA_HEADER = struct { Mask: uint64; CompactionMask: uint64; Reserved2: [6; uint64]; }
export type s__XSAVE_AREA = struct { LegacyState: s__XSAVE_FORMAT; Header: s__XSAVE_AREA_HEADER; }
export type s__XSTATE_CONTEXT = struct { Mask: uint64; Length: ulong; Reserved1: ulong; Area: *s__XSAVE_AREA; Buffer: *; }
export type s__KERNEL_CET_CONTEXT = struct { Ssp: uint64; Rip: uint64; SegCs: ushort; struct #union { AllFlags: ushort; struct { #bits(1) UseWrss: ushort; #bits(1) PopShadowStackOne: ushort; #bits(14) Unused: ushort; }; }; Fill: [2; ushort]; }
export type s__SCOPE_TABLE_AMD64 = struct { Count: ulong; struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }; ScopeRecord: [1; struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }]; }
export type s__CONTEXT = struct { P1Home: uint64; P2Home: uint64; P3Home: uint64; P4Home: uint64; P5Home: uint64; P6Home: uint64; ContextFlags: ulong; MxCsr: ulong; SegCs: ushort; SegDs: ushort; SegEs: ushort; SegFs: ushort; SegGs: ushort; SegSs: ushort; EFlags: ulong; Dr0: uint64; Dr1: uint64; Dr2: uint64; Dr3: uint64; Dr6: uint64; Dr7: uint64; Rax: uint64; Rcx: uint64; Rdx: uint64; Rbx: uint64; Rsp: uint64; Rbp: uint64; Rsi: uint64; Rdi: uint64; R8: uint64; R9: uint64; R10: uint64; R11: uint64; R12: uint64; R13: uint64; R14: uint64; R15: uint64; Rip: uint64; struct #union { FltSave: s__XSAVE_FORMAT; struct { Header: [2; s__M128A]; Legacy: [8; s__M128A]; Xmm0: s__M128A; Xmm1: s__M128A; Xmm2: s__M128A; Xmm3: s__M128A; Xmm4: s__M128A; Xmm5: s__M128A; Xmm6: s__M128A; Xmm7: s__M128A; Xmm8: s__M128A; Xmm9: s__M128A; Xmm10: s__M128A; Xmm11: s__M128A; Xmm12: s__M128A; Xmm13: s__M128A; Xmm14: s__M128A; Xmm15: s__M128A; }; }; VectorRegister: [26; s__M128A]; VectorControl: uint64; DebugControl: uint64; LastBranchToRip: uint64; LastBranchFromRip: uint64; LastExceptionToRip: uint64; LastExceptionFromRip: uint64; }
export type s__IMAGE_RUNTIME_FUNCTION_ENTRY
export type s__UNWIND_HISTORY_TABLE
export type s__DISPATCHER_CONTEXT = struct { ControlPc: uint64; ImageBase: uint64; FunctionEntry: *s__IMAGE_RUNTIME_FUNCTION_ENTRY; EstablisherFrame: uint64; TargetIp: uint64; ContextRecord: *s__CONTEXT; LanguageHandler: def (*s__EXCEPTION_RECORD, *, *s__CONTEXT, *) -> (e__EXCEPTION_DISPOSITION); HandlerData: *; HistoryTable: *s__UNWIND_HISTORY_TABLE; ScopeIndex: ulong; Fill0: ulong; }
export type s__EXCEPTION_POINTERS
export type s__KNONVOLATILE_CONTEXT_POINTERS = struct { struct #union { FloatingContext: [16; *s__M128A]; struct { Xmm0: *s__M128A; Xmm1: *s__M128A; Xmm2: *s__M128A; Xmm3: *s__M128A; Xmm4: *s__M128A; Xmm5: *s__M128A; Xmm6: *s__M128A; Xmm7: *s__M128A; Xmm8: *s__M128A; Xmm9: *s__M128A; Xmm10: *s__M128A; Xmm11: *s__M128A; Xmm12: *s__M128A; Xmm13: *s__M128A; Xmm14: *s__M128A; Xmm15: *s__M128A; }; }; struct #union { IntegerContext: [16; *uint64]; struct { Rax: *uint64; Rcx: *uint64; Rdx: *uint64; Rbx: *uint64; Rsp: *uint64; Rbp: *uint64; Rsi: *uint64; Rdi: *uint64; R8: *uint64; R9: *uint64; R10: *uint64; R11: *uint64; R12: *uint64; R13: *uint64; R14: *uint64; R15: *uint64; }; }; }
export type s__SCOPE_TABLE_ARM = struct { Count: ulong; struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }; ScopeRecord: [1; struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }]; }
export type s__SCOPE_TABLE_ARM64 = struct { Count: ulong; struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }; ScopeRecord: [1; struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }]; }
export type u__ARM64_NT_NEON128 = struct #union { struct { Low: uint64; High: int64; }; D: [2; double]; S: [4; float]; H: [8; ushort]; B: [16; uint8]; }
export type s__ARM64_NT_CONTEXT = struct { ContextFlags: ulong; Cpsr: ulong; struct #union { struct { X0: uint64; X1: uint64; X2: uint64; X3: uint64; X4: uint64; X5: uint64; X6: uint64; X7: uint64; X8: uint64; X9: uint64; X10: uint64; X11: uint64; X12: uint64; X13: uint64; X14: uint64; X15: uint64; X16: uint64; X17: uint64; X18: uint64; X19: uint64; X20: uint64; X21: uint64; X22: uint64; X23: uint64; X24: uint64; X25: uint64; X26: uint64; X27: uint64; X28: uint64; Fp: uint64; Lr: uint64; }; X: [31; uint64]; }; Sp: uint64; Pc: uint64; V: [32; u__ARM64_NT_NEON128]; Fpcr: ulong; Fpsr: ulong; Bcr: [8; ulong]; Bvr: [8; uint64]; Wcr: [2; ulong]; Wvr: [2; uint64]; }
export type s__ARM64EC_NT_CONTEXT = struct { struct #union { struct { AMD64_P1Home: uint64; AMD64_P2Home: uint64; AMD64_P3Home: uint64; AMD64_P4Home: uint64; AMD64_P5Home: uint64; AMD64_P6Home: uint64; ContextFlags: ulong; AMD64_MxCsr_copy: ulong; AMD64_SegCs: ushort; AMD64_SegDs: ushort; AMD64_SegEs: ushort; AMD64_SegFs: ushort; AMD64_SegGs: ushort; AMD64_SegSs: ushort; AMD64_EFlags: ulong; AMD64_Dr0: uint64; AMD64_Dr1: uint64; AMD64_Dr2: uint64; AMD64_Dr3: uint64; AMD64_Dr6: uint64; AMD64_Dr7: uint64; X8: uint64; X0: uint64; X1: uint64; X27: uint64; Sp: uint64; Fp: uint64; X25: uint64; X26: uint64; X2: uint64; X3: uint64; X4: uint64; X5: uint64; X19: uint64; X20: uint64; X21: uint64; X22: uint64; Pc: uint64; struct { AMD64_ControlWord: ushort; AMD64_StatusWord: ushort; AMD64_TagWord: uint8; AMD64_Reserved1: uint8; AMD64_ErrorOpcode: ushort; AMD64_ErrorOffset: ulong; AMD64_ErrorSelector: ushort; AMD64_Reserved2: ushort; AMD64_DataOffset: ulong; AMD64_DataSelector: ushort; AMD64_Reserved3: ushort; AMD64_MxCsr: ulong; AMD64_MxCsr_Mask: ulong; Lr: uint64; X16_0: ushort; AMD64_St0_Reserved1: ushort; AMD64_St0_Reserved2: ulong; X6: uint64; X16_1: ushort; AMD64_St1_Reserved1: ushort; AMD64_St1_Reserved2: ulong; X7: uint64; X16_2: ushort; AMD64_St2_Reserved1: ushort; AMD64_St2_Reserved2: ulong; X9: uint64; X16_3: ushort; AMD64_St3_Reserved1: ushort; AMD64_St3_Reserved2: ulong; X10: uint64; X17_0: ushort; AMD64_St4_Reserved1: ushort; AMD64_St4_Reserved2: ulong; X11: uint64; X17_1: ushort; AMD64_St5_Reserved1: ushort; AMD64_St5_Reserved2: ulong; X12: uint64; X17_2: ushort; AMD64_St6_Reserved1: ushort; AMD64_St6_Reserved2: ulong; X15: uint64; X17_3: ushort; AMD64_St7_Reserved1: ushort; AMD64_St7_Reserved2: ulong; V: [16; u__ARM64_NT_NEON128]; AMD64_XSAVE_FORMAT_Reserved4: [96; uint8]; }; AMD64_VectorRegister: [26; u__ARM64_NT_NEON128]; AMD64_VectorControl: uint64; AMD64_DebugControl: uint64; AMD64_LastBranchToRip: uint64; AMD64_LastBranchFromRip: uint64; AMD64_LastExceptionToRip: uint64; AMD64_LastExceptionFromRip: uint64; }; }; }
export type s__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
export type u__DISPATCHER_CONTEXT_NONVOLREG_ARM64 = struct #union { Buffer: [152; uint8]; struct { GpNvRegs: [11; uint64]; FpNvRegs: [8; double]; }; }
export type s__DISPATCHER_CONTEXT_ARM64 = struct { ControlPc: uint64; ImageBase: uint64; FunctionEntry: *s__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY; EstablisherFrame: uint64; TargetPc: uint64; ContextRecord: *s__ARM64_NT_CONTEXT; LanguageHandler: def (*s__EXCEPTION_RECORD, *, *s__CONTEXT, *) -> (e__EXCEPTION_DISPOSITION); HandlerData: *; HistoryTable: *s__UNWIND_HISTORY_TABLE; ScopeIndex: ulong; ControlPcIsUnwound: uint8; NonVolatileRegisters: *uint8; }
export type s__KNONVOLATILE_CONTEXT_POINTERS_ARM64 = struct { X19: *uint64; X20: *uint64; X21: *uint64; X22: *uint64; X23: *uint64; X24: *uint64; X25: *uint64; X26: *uint64; X27: *uint64; X28: *uint64; Fp: *uint64; Lr: *uint64; D8: *uint64; D9: *uint64; D10: *uint64; D11: *uint64; D12: *uint64; D13: *uint64; D14: *uint64; D15: *uint64; }
export type s__LDT_ENTRY = struct { LimitLow: ushort; BaseLow: ushort; HighWord: struct #union { Bytes: struct { BaseMid: uint8; Flags1: uint8; Flags2: uint8; BaseHi: uint8; }; Bits: struct { #bits(8) BaseMid: ulong; #bits(5) Type: ulong; #bits(2) Dpl: ulong; #bits(1) Pres: ulong; #bits(4) LimitHi: ulong; #bits(1) Sys: ulong; #bits(1) Reserved_0: ulong; #bits(1) Default_Big: ulong; #bits(1) Granularity: ulong; #bits(8) BaseHi: ulong; }; }; }
export type s__WOW64_FLOATING_SAVE_AREA = struct { ControlWord: ulong; StatusWord: ulong; TagWord: ulong; ErrorOffset: ulong; ErrorSelector: ulong; DataOffset: ulong; DataSelector: ulong; RegisterArea: [80; uint8]; Cr0NpxState: ulong; }
export type s__WOW64_CONTEXT = struct { ContextFlags: ulong; Dr0: ulong; Dr1: ulong; Dr2: ulong; Dr3: ulong; Dr6: ulong; Dr7: ulong; FloatSave: s__WOW64_FLOATING_SAVE_AREA; SegGs: ulong; SegFs: ulong; SegEs: ulong; SegDs: ulong; Edi: ulong; Esi: ulong; Ebx: ulong; Edx: ulong; Ecx: ulong; Eax: ulong; Ebp: ulong; Eip: ulong; SegCs: ulong; EFlags: ulong; Esp: ulong; SegSs: ulong; ExtendedRegisters: [512; uint8]; }
export type s__WOW64_LDT_ENTRY = struct { LimitLow: ushort; BaseLow: ushort; HighWord: struct #union { Bytes: struct { BaseMid: uint8; Flags1: uint8; Flags2: uint8; BaseHi: uint8; }; Bits: struct { #bits(8) BaseMid: ulong; #bits(5) Type: ulong; #bits(2) Dpl: ulong; #bits(1) Pres: ulong; #bits(4) LimitHi: ulong; #bits(1) Sys: ulong; #bits(1) Reserved_0: ulong; #bits(1) Default_Big: ulong; #bits(1) Granularity: ulong; #bits(8) BaseHi: ulong; }; }; }
export type s__WOW64_DESCRIPTOR_TABLE_ENTRY = struct { Selector: ulong; Descriptor: s__WOW64_LDT_ENTRY; }
export type s__EXCEPTION_RECORD = struct { ExceptionCode: ulong; ExceptionFlags: ulong; ExceptionRecord: *s__EXCEPTION_RECORD; ExceptionAddress: *; NumberParameters: ulong; ExceptionInformation: [15; uint64]; }
export type s__EXCEPTION_RECORD32 = struct { ExceptionCode: ulong; ExceptionFlags: ulong; ExceptionRecord: ulong; ExceptionAddress: ulong; NumberParameters: ulong; ExceptionInformation: [15; ulong]; }
export type s__EXCEPTION_RECORD64 = struct { ExceptionCode: ulong; ExceptionFlags: ulong; ExceptionRecord: uint64; ExceptionAddress: uint64; NumberParameters: ulong; __unusedAlignment: ulong; ExceptionInformation: [15; uint64]; }
export type s__EXCEPTION_POINTERS = struct { ExceptionRecord: *s__EXCEPTION_RECORD; ContextRecord: *s__CONTEXT; }
export type s__GENERIC_MAPPING = struct { GenericRead: ulong; GenericWrite: ulong; GenericExecute: ulong; GenericAll: ulong; }
export type s__LUID_AND_ATTRIBUTES = struct { Luid: s__LUID; Attributes: ulong; }
export type s__SID_IDENTIFIER_AUTHORITY = struct { Value: [6; uint8]; }
export type s__SID = struct { Revision: uint8; SubAuthorityCount: uint8; IdentifierAuthority: s__SID_IDENTIFIER_AUTHORITY; SubAuthority: [1; ulong]; }
export type u__SE_SID = struct #union { Sid: s__SID; Buffer: [68; uint8]; }
export type e__SID_NAME_USE = enum { SidTypeUser = 1; SidTypeGroup = 2; SidTypeDomain = 3; SidTypeAlias = 4; SidTypeWellKnownGroup = 5; SidTypeDeletedAccount = 6; SidTypeInvalid = 7; SidTypeUnknown = 8; SidTypeComputer = 9; SidTypeLabel = 10; SidTypeLogonSession = 11; }
export type s__SID_AND_ATTRIBUTES = struct { Sid: *; Attributes: ulong; }
export type s__SID_AND_ATTRIBUTES_HASH = struct { SidCount: ulong; SidAttr: *s__SID_AND_ATTRIBUTES; Hash: [32; uint64]; }
export type e_WELL_KNOWN_SID_TYPE = enum { WinNullSid; WinWorldSid = 1; WinLocalSid = 2; WinCreatorOwnerSid = 3; WinCreatorGroupSid = 4; WinCreatorOwnerServerSid = 5; WinCreatorGroupServerSid = 6; WinNtAuthoritySid = 7; WinDialupSid = 8; WinNetworkSid = 9; WinBatchSid = 10; WinInteractiveSid = 11; WinServiceSid = 12; WinAnonymousSid = 13; WinProxySid = 14; WinEnterpriseControllersSid = 15; WinSelfSid = 16; WinAuthenticatedUserSid = 17; WinRestrictedCodeSid = 18; WinTerminalServerSid = 19; WinRemoteLogonIdSid = 20; WinLogonIdsSid = 21; WinLocalSystemSid = 22; WinLocalServiceSid = 23; WinNetworkServiceSid = 24; WinBuiltinDomainSid = 25; WinBuiltinAdministratorsSid = 26; WinBuiltinUsersSid = 27; WinBuiltinGuestsSid = 28; WinBuiltinPowerUsersSid = 29; WinBuiltinAccountOperatorsSid = 30; WinBuiltinSystemOperatorsSid = 31; WinBuiltinPrintOperatorsSid = 32; WinBuiltinBackupOperatorsSid = 33; WinBuiltinReplicatorSid = 34; WinBuiltinPreWindows2000CompatibleAccessSid = 35; WinBuiltinRemoteDesktopUsersSid = 36; WinBuiltinNetworkConfigurationOperatorsSid = 37; WinAccountAdministratorSid = 38; WinAccountGuestSid = 39; WinAccountKrbtgtSid = 40; WinAccountDomainAdminsSid = 41; WinAccountDomainUsersSid = 42; WinAccountDomainGuestsSid = 43; WinAccountComputersSid = 44; WinAccountControllersSid = 45; WinAccountCertAdminsSid = 46; WinAccountSchemaAdminsSid = 47; WinAccountEnterpriseAdminsSid = 48; WinAccountPolicyAdminsSid = 49; WinAccountRasAndIasServersSid = 50; WinNTLMAuthenticationSid = 51; WinDigestAuthenticationSid = 52; WinSChannelAuthenticationSid = 53; WinThisOrganizationSid = 54; WinOtherOrganizationSid = 55; WinBuiltinIncomingForestTrustBuildersSid = 56; WinBuiltinPerfMonitoringUsersSid = 57; WinBuiltinPerfLoggingUsersSid = 58; WinBuiltinAuthorizationAccessSid = 59; WinBuiltinTerminalServerLicenseServersSid = 60; WinBuiltinDCOMUsersSid = 61; WinBuiltinIUsersSid = 62; WinIUserSid = 63; WinBuiltinCryptoOperatorsSid = 64; WinUntrustedLabelSid = 65; WinLowLabelSid = 66; WinMediumLabelSid = 67; WinHighLabelSid = 68; WinSystemLabelSid = 69; WinWriteRestrictedCodeSid = 70; WinCreatorOwnerRightsSid = 71; WinCacheablePrincipalsGroupSid = 72; WinNonCacheablePrincipalsGroupSid = 73; WinEnterpriseReadonlyControllersSid = 74; WinAccountReadonlyControllersSid = 75; WinBuiltinEventLogReadersGroup = 76; WinNewEnterpriseReadonlyControllersSid = 77; WinBuiltinCertSvcDComAccessGroup = 78; WinMediumPlusLabelSid = 79; WinLocalLogonSid = 80; WinConsoleLogonSid = 81; WinThisOrganizationCertificateSid = 82; WinApplicationPackageAuthoritySid = 83; WinBuiltinAnyPackageSid = 84; WinCapabilityInternetClientSid = 85; WinCapabilityInternetClientServerSid = 86; WinCapabilityPrivateNetworkClientServerSid = 87; WinCapabilityPicturesLibrarySid = 88; WinCapabilityVideosLibrarySid = 89; WinCapabilityMusicLibrarySid = 90; WinCapabilityDocumentsLibrarySid = 91; WinCapabilitySharedUserCertificatesSid = 92; WinCapabilityEnterpriseAuthenticationSid = 93; WinCapabilityRemovableStorageSid = 94; WinBuiltinRDSRemoteAccessServersSid = 95; WinBuiltinRDSEndpointServersSid = 96; WinBuiltinRDSManagementServersSid = 97; WinUserModeDriversSid = 98; WinBuiltinHyperVAdminsSid = 99; WinAccountCloneableControllersSid = 100; WinBuiltinAccessControlAssistanceOperatorsSid = 101; WinBuiltinRemoteManagementUsersSid = 102; WinAuthenticationAuthorityAssertedSid = 103; WinAuthenticationServiceAssertedSid = 104; WinLocalAccountSid = 105; WinLocalAccountAndAdministratorSid = 106; WinAccountProtectedUsersSid = 107; WinCapabilityAppointmentsSid = 108; WinCapabilityContactsSid = 109; WinAccountDefaultSystemManagedSid = 110; WinBuiltinDefaultSystemManagedGroupSid = 111; WinBuiltinStorageReplicaAdminsSid = 112; WinAccountKeyAdminsSid = 113; WinAccountEnterpriseKeyAdminsSid = 114; WinAuthenticationKeyTrustSid = 115; WinAuthenticationKeyPropertyMFASid = 116; WinAuthenticationKeyPropertyAttestationSid = 117; WinAuthenticationFreshKeyAuthSid = 118; WinBuiltinDeviceOwnersSid = 119; }
export type s__ACL = struct { AclRevision: uint8; Sbz1: uint8; AclSize: ushort; AceCount: ushort; Sbz2: ushort; }
export type s__ACE_HEADER = struct { AceType: uint8; AceFlags: uint8; AceSize: ushort; }
export type s__ACCESS_ALLOWED_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__ACCESS_DENIED_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_AUDIT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_ALARM_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_RESOURCE_ATTRIBUTE_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_SCOPED_POLICY_ID_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_MANDATORY_LABEL_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_PROCESS_TRUST_LABEL_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_ACCESS_FILTER_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__ACCESS_ALLOWED_OBJECT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: s__GUID; InheritedObjectType: s__GUID; SidStart: ulong; }
export type s__ACCESS_DENIED_OBJECT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: s__GUID; InheritedObjectType: s__GUID; SidStart: ulong; }
export type s__SYSTEM_AUDIT_OBJECT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: s__GUID; InheritedObjectType: s__GUID; SidStart: ulong; }
export type s__SYSTEM_ALARM_OBJECT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: s__GUID; InheritedObjectType: s__GUID; SidStart: ulong; }
export type s__ACCESS_ALLOWED_CALLBACK_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__ACCESS_DENIED_CALLBACK_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_AUDIT_CALLBACK_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__SYSTEM_ALARM_CALLBACK_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type s__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: s__GUID; InheritedObjectType: s__GUID; SidStart: ulong; }
export type s__ACCESS_DENIED_CALLBACK_OBJECT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: s__GUID; InheritedObjectType: s__GUID; SidStart: ulong; }
export type s__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: s__GUID; InheritedObjectType: s__GUID; SidStart: ulong; }
export type s__SYSTEM_ALARM_CALLBACK_OBJECT_ACE = struct { Header: s__ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: s__GUID; InheritedObjectType: s__GUID; SidStart: ulong; }
export type e__ACL_INFORMATION_CLASS = enum { AclRevisionInformation = 1; AclSizeInformation = 2; }
export type s__ACL_REVISION_INFORMATION = struct { AclRevision: ulong; }
export type s__ACL_SIZE_INFORMATION = struct { AceCount: ulong; AclBytesInUse: ulong; AclBytesFree: ulong; }
export type s__SECURITY_DESCRIPTOR_RELATIVE = struct { Revision: uint8; Sbz1: uint8; Control: ushort; Owner: ulong; Group: ulong; Sacl: ulong; Dacl: ulong; }
export type s__SECURITY_DESCRIPTOR = struct { Revision: uint8; Sbz1: uint8; Control: ushort; Owner: *; Group: *; Sacl: *s__ACL; Dacl: *s__ACL; }
export type s__SECURITY_OBJECT_AI_PARAMS = struct { Size: ulong; ConstraintMask: ulong; }
export type s__OBJECT_TYPE_LIST = struct { Level: ushort; Sbz: ushort; ObjectType: *s__GUID; }
export type e__AUDIT_EVENT_TYPE = enum { AuditEventObjectAccess; AuditEventDirectoryServiceAccess = 1; }
export type s__PRIVILEGE_SET = struct { PrivilegeCount: ulong; Control: ulong; Privilege: [1; s__LUID_AND_ATTRIBUTES]; }
export type e__ACCESS_REASON_TYPE = enum { AccessReasonNone; AccessReasonAllowedAce = 65536; AccessReasonDeniedAce = 131072; AccessReasonAllowedParentAce = 196608; AccessReasonDeniedParentAce = 262144; AccessReasonNotGrantedByCape = 327680; AccessReasonNotGrantedByParentCape = 393216; AccessReasonNotGrantedToAppContainer = 458752; AccessReasonMissingPrivilege = 1048576; AccessReasonFromPrivilege = 2097152; AccessReasonIntegrityLevel = 3145728; AccessReasonOwnership = 4194304; AccessReasonNullDacl = 5242880; AccessReasonEmptyDacl = 6291456; AccessReasonNoSD = 7340032; AccessReasonNoGrant = 8388608; AccessReasonTrustLabel = 9437184; AccessReasonFilterAce = 10485760; }
export type s__ACCESS_REASONS = struct { Data: [32; ulong]; }
export type s__SE_SECURITY_DESCRIPTOR = struct { Size: ulong; Flags: ulong; SecurityDescriptor: *; }
export type s__SE_ACCESS_REQUEST = struct { Size: ulong; SeSecurityDescriptor: *s__SE_SECURITY_DESCRIPTOR; DesiredAccess: ulong; PreviouslyGrantedAccess: ulong; PrincipalSelfSid: *; GenericMapping: *s__GENERIC_MAPPING; ObjectTypeListCount: ulong; ObjectTypeList: *s__OBJECT_TYPE_LIST; }
export type s__SE_ACCESS_REPLY = struct { Size: ulong; ResultListCount: ulong; GrantedAccess: *ulong; AccessStatus: *ulong; AccessReason: *s__ACCESS_REASONS; Privileges: **s__PRIVILEGE_SET; }
export type e__SECURITY_IMPERSONATION_LEVEL = enum { SecurityAnonymous; SecurityIdentification = 1; SecurityImpersonation = 2; SecurityDelegation = 3; }
export type e__TOKEN_TYPE = enum { TokenPrimary = 1; TokenImpersonation = 2; }
export type e__TOKEN_ELEVATION_TYPE = enum { TokenElevationTypeDefault = 1; TokenElevationTypeFull = 2; TokenElevationTypeLimited = 3; }
export type e__TOKEN_INFORMATION_CLASS = enum { TokenUser = 1; TokenGroups = 2; TokenPrivileges = 3; TokenOwner = 4; TokenPrimaryGroup = 5; TokenDefaultDacl = 6; TokenSource = 7; TokenType = 8; TokenImpersonationLevel = 9; TokenStatistics = 10; TokenRestrictedSids = 11; TokenSessionId = 12; TokenGroupsAndPrivileges = 13; TokenSessionReference = 14; TokenSandBoxInert = 15; TokenAuditPolicy = 16; TokenOrigin = 17; TokenElevationType = 18; TokenLinkedToken = 19; TokenElevation = 20; TokenHasRestrictions = 21; TokenAccessInformation = 22; TokenVirtualizationAllowed = 23; TokenVirtualizationEnabled = 24; TokenIntegrityLevel = 25; TokenUIAccess = 26; TokenMandatoryPolicy = 27; TokenLogonSid = 28; TokenIsAppContainer = 29; TokenCapabilities = 30; TokenAppContainerSid = 31; TokenAppContainerNumber = 32; TokenUserClaimAttributes = 33; TokenDeviceClaimAttributes = 34; TokenRestrictedUserClaimAttributes = 35; TokenRestrictedDeviceClaimAttributes = 36; TokenDeviceGroups = 37; TokenRestrictedDeviceGroups = 38; TokenSecurityAttributes = 39; TokenIsRestricted = 40; TokenProcessTrustLevel = 41; TokenPrivateNameSpace = 42; TokenSingletonAttributes = 43; TokenBnoIsolation = 44; TokenChildProcessFlags = 45; TokenIsLessPrivilegedAppContainer = 46; TokenIsSandboxed = 47; TokenIsAppSilo = 48; MaxTokenInfoClass = 49; }
export type s__TOKEN_USER = struct { User: s__SID_AND_ATTRIBUTES; }
export type s__SE_TOKEN_USER = struct { struct #union { TokenUser: s__TOKEN_USER; User: s__SID_AND_ATTRIBUTES; }; struct #union { Sid: s__SID; Buffer: [68; uint8]; }; }
export type s__TOKEN_GROUPS = struct { GroupCount: ulong; Groups: [1; s__SID_AND_ATTRIBUTES]; }
export type s__TOKEN_PRIVILEGES = struct { PrivilegeCount: ulong; Privileges: [1; s__LUID_AND_ATTRIBUTES]; }
export type s__TOKEN_OWNER = struct { Owner: *; }
export type s__TOKEN_PRIMARY_GROUP = struct { PrimaryGroup: *; }
export type s__TOKEN_DEFAULT_DACL = struct { DefaultDacl: *s__ACL; }
export type s__TOKEN_USER_CLAIMS = struct { UserClaims: *; }
export type s__TOKEN_DEVICE_CLAIMS = struct { DeviceClaims: *; }
export type s__TOKEN_GROUPS_AND_PRIVILEGES = struct { SidCount: ulong; SidLength: ulong; Sids: *s__SID_AND_ATTRIBUTES; RestrictedSidCount: ulong; RestrictedSidLength: ulong; RestrictedSids: *s__SID_AND_ATTRIBUTES; PrivilegeCount: ulong; PrivilegeLength: ulong; Privileges: *s__LUID_AND_ATTRIBUTES; AuthenticationId: s__LUID; }
export type s__TOKEN_LINKED_TOKEN = struct { LinkedToken: *; }
export type s__TOKEN_ELEVATION = struct { TokenIsElevated: ulong; }
export type s__TOKEN_MANDATORY_LABEL = struct { Label: s__SID_AND_ATTRIBUTES; }
export type s__TOKEN_MANDATORY_POLICY = struct { Policy: ulong; }
export type s__TOKEN_ACCESS_INFORMATION = struct { SidHash: *s__SID_AND_ATTRIBUTES_HASH; RestrictedSidHash: *s__SID_AND_ATTRIBUTES_HASH; Privileges: *s__TOKEN_PRIVILEGES; AuthenticationId: s__LUID; TokenType: e__TOKEN_TYPE; ImpersonationLevel: e__SECURITY_IMPERSONATION_LEVEL; MandatoryPolicy: s__TOKEN_MANDATORY_POLICY; Flags: ulong; AppContainerNumber: ulong; PackageSid: *; CapabilitiesHash: *s__SID_AND_ATTRIBUTES_HASH; TrustLevelSid: *; SecurityAttributes: *; }
export type s__TOKEN_AUDIT_POLICY = struct { PerUserPolicy: [30; uint8]; }
export type s__TOKEN_SOURCE = struct { SourceName: [8; char]; SourceIdentifier: s__LUID; }
export type s__TOKEN_STATISTICS = struct { TokenId: s__LUID; AuthenticationId: s__LUID; ExpirationTime: u__LARGE_INTEGER; TokenType: e__TOKEN_TYPE; ImpersonationLevel: e__SECURITY_IMPERSONATION_LEVEL; DynamicCharged: ulong; DynamicAvailable: ulong; GroupCount: ulong; PrivilegeCount: ulong; ModifiedId: s__LUID; }
export type s__TOKEN_CONTROL = struct { TokenId: s__LUID; AuthenticationId: s__LUID; ModifiedId: s__LUID; TokenSource: s__TOKEN_SOURCE; }
export type s__TOKEN_ORIGIN = struct { OriginatingLogonSession: s__LUID; }
export type e__MANDATORY_LEVEL = enum { MandatoryLevelUntrusted; MandatoryLevelLow = 1; MandatoryLevelMedium = 2; MandatoryLevelHigh = 3; MandatoryLevelSystem = 4; MandatoryLevelSecureProcess = 5; MandatoryLevelCount = 6; }
export type s__TOKEN_APPCONTAINER_INFORMATION = struct { TokenAppContainer: *; }
export type s__TOKEN_SID_INFORMATION = struct { Sid: *; }
export type s__TOKEN_BNO_ISOLATION_INFORMATION = struct { IsolationPrefix: *ushort; IsolationEnabled: uint8; }
export type s__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = struct { Version: uint64; Name: *ushort; }
export type s__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = struct { pValue: *; ValueLength: ulong; }
export type s__CLAIM_SECURITY_ATTRIBUTE_V1 = struct { Name: *ushort; ValueType: ushort; Reserved: ushort; Flags: ulong; ValueCount: ulong; Values: struct #union { pInt64: *int64; pUint64: *uint64; ppString: **ushort; pFqbn: *s__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE; pOctetString: *s__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE; }; }
export type s__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = struct { Name: ulong; ValueType: ushort; Reserved: ushort; Flags: ulong; ValueCount: ulong; Values: struct #union { pInt64: [1; ulong]; pUint64: [1; ulong]; ppString: [1; ulong]; pFqbn: [1; ulong]; pOctetString: [1; ulong]; }; }
export type s__CLAIM_SECURITY_ATTRIBUTES_INFORMATION = struct { Version: ushort; Reserved: ushort; AttributeCount: ulong; Attribute: struct #union { pAttributeV1: *s__CLAIM_SECURITY_ATTRIBUTE_V1; }; }
export type s__SECURITY_QUALITY_OF_SERVICE = struct { Length: ulong; ImpersonationLevel: e__SECURITY_IMPERSONATION_LEVEL; ContextTrackingMode: uint8; EffectiveOnly: uint8; }
export type s__SE_IMPERSONATION_STATE = struct { Token: *; CopyOnOpen: uint8; EffectiveOnly: uint8; Level: e__SECURITY_IMPERSONATION_LEVEL; }
export type e__SE_IMAGE_SIGNATURE_TYPE = enum { SeImageSignatureNone; SeImageSignatureEmbedded = 1; SeImageSignatureCache = 2; SeImageSignatureCatalogCached = 3; SeImageSignatureCatalogNotCached = 4; SeImageSignatureCatalogHint = 5; SeImageSignaturePackageCatalog = 6; SeImageSignaturePplMitigated = 7; }
export type s__SECURITY_CAPABILITIES = struct { AppContainerSid: *; Capabilities: *s__SID_AND_ATTRIBUTES; CapabilityCount: ulong; Reserved: ulong; }
export type s__JOB_SET_ARRAY = struct { JobHandle: *; MemberLevel: ulong; Flags: ulong; }
export type s__EXCEPTION_REGISTRATION_RECORD
export type s__EXCEPTION_REGISTRATION_RECORD = struct { Next: *s__EXCEPTION_REGISTRATION_RECORD; Handler: def (*s__EXCEPTION_RECORD, *, *s__CONTEXT, *) -> (e__EXCEPTION_DISPOSITION); }
export type s__NT_TIB
export type s__NT_TIB = struct { ExceptionList: *s__EXCEPTION_REGISTRATION_RECORD; StackBase: *; StackLimit: *; SubSystemTib: *; struct #union { FiberData: *; Version: ulong; }; ArbitraryUserPointer: *; Self: *s__NT_TIB; }
export type s__NT_TIB32 = struct { ExceptionList: ulong; StackBase: ulong; StackLimit: ulong; SubSystemTib: ulong; struct #union { FiberData: ulong; Version: ulong; }; ArbitraryUserPointer: ulong; Self: ulong; }
export type s__NT_TIB64 = struct { ExceptionList: uint64; StackBase: uint64; StackLimit: uint64; SubSystemTib: uint64; struct #union { FiberData: uint64; Version: ulong; }; ArbitraryUserPointer: uint64; Self: uint64; }
export type s__UMS_CREATE_THREAD_ATTRIBUTES = struct { UmsVersion: ulong; UmsContext: *; UmsCompletionList: *; }
export type s__COMPONENT_FILTER = struct { ComponentFlags: ulong; }
export type s__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET = struct { TargetAddress: uint64; Flags: uint64; }
export type s__PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = struct { NumberOfTargets: ushort; Reserved: ushort; Reserved2: ulong; Targets: *s__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET; }
export type s__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = struct { BaseAddress: uint64; Size: uint64; Flags: ulong; }
export type s__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = struct { NumberOfRanges: ushort; Reserved: ushort; Reserved2: ulong; Ranges: *s__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE; }
export type s__QUOTA_LIMITS = struct { PagedPoolLimit: uint64; NonPagedPoolLimit: uint64; MinimumWorkingSetSize: uint64; MaximumWorkingSetSize: uint64; PagefileLimit: uint64; TimeLimit: u__LARGE_INTEGER; }
export type u__RATE_QUOTA_LIMIT = struct #union { RateData: ulong; struct { #bits(7) RatePercent: ulong; #bits(25) Reserved0: ulong; }; }
export type s__QUOTA_LIMITS_EX = struct { PagedPoolLimit: uint64; NonPagedPoolLimit: uint64; MinimumWorkingSetSize: uint64; MaximumWorkingSetSize: uint64; PagefileLimit: uint64; TimeLimit: u__LARGE_INTEGER; WorkingSetLimit: uint64; Reserved2: uint64; Reserved3: uint64; Reserved4: uint64; Flags: ulong; CpuRateLimit: u__RATE_QUOTA_LIMIT; }
export type s__IO_COUNTERS = struct { ReadOperationCount: uint64; WriteOperationCount: uint64; OtherOperationCount: uint64; ReadTransferCount: uint64; WriteTransferCount: uint64; OtherTransferCount: uint64; }
export type e__HARDWARE_COUNTER_TYPE = enum { PMCCounter; MaxHardwareCounterType = 1; }
export type e__PROCESS_MITIGATION_POLICY = enum { ProcessDEPPolicy; ProcessASLRPolicy = 1; ProcessDynamicCodePolicy = 2; ProcessStrictHandleCheckPolicy = 3; ProcessSystemCallDisablePolicy = 4; ProcessMitigationOptionsMask = 5; ProcessExtensionPointDisablePolicy = 6; ProcessControlFlowGuardPolicy = 7; ProcessSignaturePolicy = 8; ProcessFontDisablePolicy = 9; ProcessImageLoadPolicy = 10; ProcessSystemCallFilterPolicy = 11; ProcessPayloadRestrictionPolicy = 12; ProcessChildProcessPolicy = 13; ProcessSideChannelIsolationPolicy = 14; ProcessUserShadowStackPolicy = 15; ProcessRedirectionTrustPolicy = 16; ProcessUserPointerAuthPolicy = 17; ProcessSEHOPPolicy = 18; MaxProcessMitigationPolicy = 19; }
export type s__PROCESS_MITIGATION_ASLR_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) EnableBottomUpRandomization: ulong; #bits(1) EnableForceRelocateImages: ulong; #bits(1) EnableHighEntropy: ulong; #bits(1) DisallowStrippedImages: ulong; #bits(28) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_DEP_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) Enable: ulong; #bits(1) DisableAtlThunkEmulation: ulong; #bits(30) ReservedFlags: ulong; }; }; Permanent: uint8; }
export type s__PROCESS_MITIGATION_SEHOP_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) EnableSehop: ulong; #bits(31) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) RaiseExceptionOnInvalidHandleReference: ulong; #bits(1) HandleExceptionsPermanentlyEnabled: ulong; #bits(30) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) DisallowWin32kSystemCalls: ulong; #bits(1) AuditDisallowWin32kSystemCalls: ulong; #bits(30) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) DisableExtensionPoints: ulong; #bits(31) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) ProhibitDynamicCode: ulong; #bits(1) AllowThreadOptOut: ulong; #bits(1) AllowRemoteDowngrade: ulong; #bits(1) AuditProhibitDynamicCode: ulong; #bits(28) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) EnableControlFlowGuard: ulong; #bits(1) EnableExportSuppression: ulong; #bits(1) StrictMode: ulong; #bits(1) EnableXfg: ulong; #bits(1) EnableXfgAuditMode: ulong; #bits(27) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) MicrosoftSignedOnly: ulong; #bits(1) StoreSignedOnly: ulong; #bits(1) MitigationOptIn: ulong; #bits(1) AuditMicrosoftSignedOnly: ulong; #bits(1) AuditStoreSignedOnly: ulong; #bits(27) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_FONT_DISABLE_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) DisableNonSystemFonts: ulong; #bits(1) AuditNonSystemFontLoading: ulong; #bits(30) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_IMAGE_LOAD_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) NoRemoteImages: ulong; #bits(1) NoLowMandatoryLabelImages: ulong; #bits(1) PreferSystem32Images: ulong; #bits(1) AuditNoRemoteImages: ulong; #bits(1) AuditNoLowMandatoryLabelImages: ulong; #bits(27) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = struct { struct #union { Flags: ulong; struct { #bits(4) FilterId: ulong; #bits(28) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) EnableExportAddressFilter: ulong; #bits(1) AuditExportAddressFilter: ulong; #bits(1) EnableExportAddressFilterPlus: ulong; #bits(1) AuditExportAddressFilterPlus: ulong; #bits(1) EnableImportAddressFilter: ulong; #bits(1) AuditImportAddressFilter: ulong; #bits(1) EnableRopStackPivot: ulong; #bits(1) AuditRopStackPivot: ulong; #bits(1) EnableRopCallerCheck: ulong; #bits(1) AuditRopCallerCheck: ulong; #bits(1) EnableRopSimExec: ulong; #bits(1) AuditRopSimExec: ulong; #bits(20) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_CHILD_PROCESS_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) NoChildProcessCreation: ulong; #bits(1) AuditNoChildProcessCreation: ulong; #bits(1) AllowSecureProcessCreation: ulong; #bits(29) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) SmtBranchTargetIsolation: ulong; #bits(1) IsolateSecurityDomain: ulong; #bits(1) DisablePageCombine: ulong; #bits(1) SpeculativeStoreBypassDisable: ulong; #bits(1) RestrictCoreSharing: ulong; #bits(27) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) EnableUserShadowStack: ulong; #bits(1) AuditUserShadowStack: ulong; #bits(1) SetContextIpValidation: ulong; #bits(1) AuditSetContextIpValidation: ulong; #bits(1) EnableUserShadowStackStrictMode: ulong; #bits(1) BlockNonCetBinaries: ulong; #bits(1) BlockNonCetBinariesNonEhcont: ulong; #bits(1) AuditBlockNonCetBinaries: ulong; #bits(1) CetDynamicApisOutOfProcOnly: ulong; #bits(1) SetContextIpValidationRelaxedMode: ulong; #bits(22) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) EnablePointerAuthUserIp: ulong; #bits(31) ReservedFlags: ulong; }; }; }
export type s__PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY = struct { struct #union { Flags: ulong; struct { #bits(1) EnforceRedirectionTrust: ulong; #bits(1) AuditRedirectionTrust: ulong; #bits(30) ReservedFlags: ulong; }; }; }
export type s__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = struct { TotalUserTime: u__LARGE_INTEGER; TotalKernelTime: u__LARGE_INTEGER; ThisPeriodTotalUserTime: u__LARGE_INTEGER; ThisPeriodTotalKernelTime: u__LARGE_INTEGER; TotalPageFaultCount: ulong; TotalProcesses: ulong; ActiveProcesses: ulong; TotalTerminatedProcesses: ulong; }
export type s__JOBOBJECT_BASIC_LIMIT_INFORMATION = struct { PerProcessUserTimeLimit: u__LARGE_INTEGER; PerJobUserTimeLimit: u__LARGE_INTEGER; LimitFlags: ulong; MinimumWorkingSetSize: uint64; MaximumWorkingSetSize: uint64; ActiveProcessLimit: ulong; Affinity: uint64; PriorityClass: ulong; SchedulingClass: ulong; }
export type s__JOBOBJECT_EXTENDED_LIMIT_INFORMATION = struct { BasicLimitInformation: s__JOBOBJECT_BASIC_LIMIT_INFORMATION; IoInfo: s__IO_COUNTERS; ProcessMemoryLimit: uint64; JobMemoryLimit: uint64; PeakProcessMemoryUsed: uint64; PeakJobMemoryUsed: uint64; }
export type s__JOBOBJECT_BASIC_PROCESS_ID_LIST = struct { NumberOfAssignedProcesses: ulong; NumberOfProcessIdsInList: ulong; ProcessIdList: [1; uint64]; }
export type s__JOBOBJECT_BASIC_UI_RESTRICTIONS = struct { UIRestrictionsClass: ulong; }
export type s__JOBOBJECT_SECURITY_LIMIT_INFORMATION = struct { SecurityLimitFlags: ulong; JobToken: *; SidsToDisable: *s__TOKEN_GROUPS; PrivilegesToDelete: *s__TOKEN_PRIVILEGES; RestrictedSids: *s__TOKEN_GROUPS; }
export type s__JOBOBJECT_END_OF_JOB_TIME_INFORMATION = struct { EndOfJobTimeAction: ulong; }
export type s__JOBOBJECT_ASSOCIATE_COMPLETION_PORT = struct { CompletionKey: *; CompletionPort: *; }
export type s__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = struct { BasicInfo: s__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION; IoInfo: s__IO_COUNTERS; }
export type s__JOBOBJECT_JOBSET_INFORMATION = struct { MemberLevel: ulong; }
export type e__JOBOBJECT_RATE_CONTROL_TOLERANCE = enum { ToleranceLow = 1; ToleranceMedium = 2; ToleranceHigh = 3; }
export type e__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = enum { ToleranceIntervalShort = 1; ToleranceIntervalMedium = 2; ToleranceIntervalLong = 3; }
export type s__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = struct { IoReadBytesLimit: uint64; IoWriteBytesLimit: uint64; PerJobUserTimeLimit: u__LARGE_INTEGER; JobMemoryLimit: uint64; RateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; RateControlToleranceInterval: e__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; LimitFlags: ulong; }
export type s_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 = struct { IoReadBytesLimit: uint64; IoWriteBytesLimit: uint64; PerJobUserTimeLimit: u__LARGE_INTEGER; struct #union { JobHighMemoryLimit: uint64; JobMemoryLimit: uint64; }; struct #union { RateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; CpuRateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; }; struct #union { RateControlToleranceInterval: e__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; CpuRateControlToleranceInterval: e__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; }; LimitFlags: ulong; IoRateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; JobLowMemoryLimit: uint64; IoRateControlToleranceInterval: e__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; NetRateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; NetRateControlToleranceInterval: e__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; }
export type s__JOBOBJECT_LIMIT_VIOLATION_INFORMATION = struct { LimitFlags: ulong; ViolationLimitFlags: ulong; IoReadBytes: uint64; IoReadBytesLimit: uint64; IoWriteBytes: uint64; IoWriteBytesLimit: uint64; PerJobUserTime: u__LARGE_INTEGER; PerJobUserTimeLimit: u__LARGE_INTEGER; JobMemory: uint64; JobMemoryLimit: uint64; RateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; RateControlToleranceLimit: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; }
export type s_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 = struct { LimitFlags: ulong; ViolationLimitFlags: ulong; IoReadBytes: uint64; IoReadBytesLimit: uint64; IoWriteBytes: uint64; IoWriteBytesLimit: uint64; PerJobUserTime: u__LARGE_INTEGER; PerJobUserTimeLimit: u__LARGE_INTEGER; JobMemory: uint64; struct #union { JobHighMemoryLimit: uint64; JobMemoryLimit: uint64; }; struct #union { RateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; CpuRateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; }; struct #union { RateControlToleranceLimit: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; CpuRateControlToleranceLimit: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; }; JobLowMemoryLimit: uint64; IoRateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; IoRateControlToleranceLimit: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; NetRateControlTolerance: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; NetRateControlToleranceLimit: e__JOBOBJECT_RATE_CONTROL_TOLERANCE; }
export type s__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = struct { ControlFlags: ulong; struct #union { CpuRate: ulong; Weight: ulong; struct { MinRate: ushort; MaxRate: ushort; }; }; }
export type e_JOB_OBJECT_NET_RATE_CONTROL_FLAGS = enum { JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1; JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2; JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4; JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7; }
export type s_JOBOBJECT_NET_RATE_CONTROL_INFORMATION = struct { MaxBandwidth: uint64; ControlFlags: e_JOB_OBJECT_NET_RATE_CONTROL_FLAGS; DscpTag: uint8; }
export type e_JOB_OBJECT_IO_RATE_CONTROL_FLAGS = enum { JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1; JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2; JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4; JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8; JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15; }
export type s_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE = struct { MaxIops: int64; MaxBandwidth: int64; ReservationIops: int64; VolumeName: *ushort; BaseIoSize: ulong; ControlFlags: e_JOB_OBJECT_IO_RATE_CONTROL_FLAGS; VolumeNameLength: ushort; }
export type s_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 = struct { MaxIops: int64; MaxBandwidth: int64; ReservationIops: int64; VolumeName: *ushort; BaseIoSize: ulong; ControlFlags: e_JOB_OBJECT_IO_RATE_CONTROL_FLAGS; VolumeNameLength: ushort; CriticalReservationIops: int64; ReservationBandwidth: int64; CriticalReservationBandwidth: int64; MaxTimePercent: int64; ReservationTimePercent: int64; CriticalReservationTimePercent: int64; }
export type s_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 = struct { MaxIops: int64; MaxBandwidth: int64; ReservationIops: int64; VolumeName: *ushort; BaseIoSize: ulong; ControlFlags: e_JOB_OBJECT_IO_RATE_CONTROL_FLAGS; VolumeNameLength: ushort; CriticalReservationIops: int64; ReservationBandwidth: int64; CriticalReservationBandwidth: int64; MaxTimePercent: int64; ReservationTimePercent: int64; CriticalReservationTimePercent: int64; SoftMaxIops: int64; SoftMaxBandwidth: int64; SoftMaxTimePercent: int64; LimitExcessNotifyIops: int64; LimitExcessNotifyBandwidth: int64; LimitExcessNotifyTimePercent: int64; }
export type e_JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = enum { JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1; JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2; JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3; }
export type s__JOBOBJECT_IO_ATTRIBUTION_STATS = struct { IoCount: uint64; TotalNonOverlappedQueueTime: uint64; TotalNonOverlappedServiceTime: uint64; TotalSize: uint64; }
export type s__JOBOBJECT_IO_ATTRIBUTION_INFORMATION = struct { ControlFlags: ulong; ReadStats: s__JOBOBJECT_IO_ATTRIBUTION_STATS; WriteStats: s__JOBOBJECT_IO_ATTRIBUTION_STATS; }
export type e__JOBOBJECTINFOCLASS = enum { JobObjectBasicAccountingInformation = 1; JobObjectBasicLimitInformation = 2; JobObjectBasicProcessIdList = 3; JobObjectBasicUIRestrictions = 4; JobObjectSecurityLimitInformation = 5; JobObjectEndOfJobTimeInformation = 6; JobObjectAssociateCompletionPortInformation = 7; JobObjectBasicAndIoAccountingInformation = 8; JobObjectExtendedLimitInformation = 9; JobObjectJobSetInformation = 10; JobObjectGroupInformation = 11; JobObjectNotificationLimitInformation = 12; JobObjectLimitViolationInformation = 13; JobObjectGroupInformationEx = 14; JobObjectCpuRateControlInformation = 15; JobObjectCompletionFilter = 16; JobObjectCompletionCounter = 17; JobObjectReserved1Information = 18; JobObjectReserved2Information = 19; JobObjectReserved3Information = 20; JobObjectReserved4Information = 21; JobObjectReserved5Information = 22; JobObjectReserved6Information = 23; JobObjectReserved7Information = 24; JobObjectReserved8Information = 25; JobObjectReserved9Information = 26; JobObjectReserved10Information = 27; JobObjectReserved11Information = 28; JobObjectReserved12Information = 29; JobObjectReserved13Information = 30; JobObjectReserved14Information = 31; JobObjectNetRateControlInformation = 32; JobObjectNotificationLimitInformation2 = 33; JobObjectLimitViolationInformation2 = 34; JobObjectCreateSilo = 35; JobObjectSiloBasicInformation = 36; JobObjectReserved15Information = 37; JobObjectReserved16Information = 38; JobObjectReserved17Information = 39; JobObjectReserved18Information = 40; JobObjectReserved19Information = 41; JobObjectReserved20Information = 42; JobObjectReserved21Information = 43; JobObjectReserved22Information = 44; JobObjectReserved23Information = 45; JobObjectReserved24Information = 46; JobObjectReserved25Information = 47; JobObjectReserved26Information = 48; JobObjectReserved27Information = 49; MaxJobObjectInfoClass = 50; }
export type s__SILOOBJECT_BASIC_INFORMATION = struct { SiloId: ulong; SiloParentId: ulong; NumberOfProcesses: ulong; IsInServerSilo: uint8; Reserved: [3; uint8]; }
export type e__SERVERSILO_STATE = enum { SERVERSILO_INITING; SERVERSILO_STARTED = 1; SERVERSILO_SHUTTING_DOWN = 2; SERVERSILO_TERMINATING = 3; SERVERSILO_TERMINATED = 4; }
export type s__SERVERSILO_BASIC_INFORMATION = struct { ServiceSessionId: ulong; State: e__SERVERSILO_STATE; ExitStatus: ulong; IsDownlevelContainer: uint8; ApiSetSchema: *; HostApiSetSchema: *; }
export type e__FIRMWARE_TYPE = enum { FirmwareTypeUnknown; FirmwareTypeBios = 1; FirmwareTypeUefi = 2; FirmwareTypeMax = 3; }
export type e__LOGICAL_PROCESSOR_RELATIONSHIP = enum { RelationProcessorCore; RelationNumaNode = 1; RelationCache = 2; RelationProcessorPackage = 3; RelationGroup = 4; RelationProcessorDie = 5; RelationNumaNodeEx = 6; RelationProcessorModule = 7; RelationAll = 65535; }
export type e__PROCESSOR_CACHE_TYPE = enum { CacheUnified; CacheInstruction = 1; CacheData = 2; CacheTrace = 3; }
export type s__CACHE_DESCRIPTOR = struct { Level: uint8; Associativity: uint8; LineSize: ushort; Size: ulong; Type: e__PROCESSOR_CACHE_TYPE; }
export type s__SYSTEM_LOGICAL_PROCESSOR_INFORMATION = struct { ProcessorMask: uint64; Relationship: e__LOGICAL_PROCESSOR_RELATIONSHIP; struct #union { ProcessorCore: struct { Flags: uint8; }; NumaNode: struct { NodeNumber: ulong; }; Cache: s__CACHE_DESCRIPTOR; Reserved: [2; uint64]; }; }
export type s__PROCESSOR_RELATIONSHIP = struct { Flags: uint8; EfficiencyClass: uint8; Reserved: [20; uint8]; GroupCount: ushort; GroupMask: [1; s__GROUP_AFFINITY]; }
export type s__NUMA_NODE_RELATIONSHIP = struct { NodeNumber: ulong; Reserved: [18; uint8]; GroupCount: ushort; struct #union { GroupMask: s__GROUP_AFFINITY; GroupMasks: [1; s__GROUP_AFFINITY]; }; }
export type s__CACHE_RELATIONSHIP = struct { Level: uint8; Associativity: uint8; LineSize: ushort; CacheSize: ulong; Type: e__PROCESSOR_CACHE_TYPE; Reserved: [18; uint8]; GroupCount: ushort; struct #union { GroupMask: s__GROUP_AFFINITY; GroupMasks: [1; s__GROUP_AFFINITY]; }; }
export type s__PROCESSOR_GROUP_INFO = struct { MaximumProcessorCount: uint8; ActiveProcessorCount: uint8; Reserved: [38; uint8]; ActiveProcessorMask: uint64; }
export type s__GROUP_RELATIONSHIP = struct { MaximumGroupCount: ushort; ActiveGroupCount: ushort; Reserved: [20; uint8]; GroupInfo: [1; s__PROCESSOR_GROUP_INFO]; }
export type s__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
export type e__CPU_SET_INFORMATION_TYPE = enum { CpuSetInformation; }
export type s__SYSTEM_CPU_SET_INFORMATION
export type s__SYSTEM_POOL_ZEROING_INFORMATION = struct { PoolZeroingSupportPresent: uint8; }
export type s__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = struct { CycleTime: uint64; }
export type s__SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION = struct { #bits(16) Machine: ulong; #bits(1) KernelMode: ulong; #bits(1) UserMode: ulong; #bits(1) Native: ulong; #bits(1) Process: ulong; #bits(1) WoW64Container: ulong; #bits(11) ReservedZero0: ulong; }
export type s__XSTATE_FEATURE = struct { Offset: ulong; Size: ulong; }
export type s__XSTATE_CONFIGURATION = struct { EnabledFeatures: uint64; EnabledVolatileFeatures: uint64; Size: ulong; struct #union { ControlFlags: ulong; struct { #bits(1) OptimizedSave: ulong; #bits(1) CompactionEnabled: ulong; #bits(1) ExtendedFeatureDisable: ulong; }; }; Features: [64; s__XSTATE_FEATURE]; EnabledSupervisorFeatures: uint64; AlignedFeatures: uint64; AllFeatureSize: ulong; AllFeatures: [64; ulong]; EnabledUserVisibleSupervisorFeatures: uint64; ExtendedFeatureDisableFeatures: uint64; AllNonLargeFeatureSize: ulong; Spare: ulong; }
export type s__MEMORY_BASIC_INFORMATION = struct { BaseAddress: *; AllocationBase: *; AllocationProtect: ulong; PartitionId: ushort; RegionSize: uint64; State: ulong; Protect: ulong; Type: ulong; }
export type s__MEMORY_BASIC_INFORMATION32 = struct { BaseAddress: ulong; AllocationBase: ulong; AllocationProtect: ulong; RegionSize: ulong; State: ulong; Protect: ulong; Type: ulong; }
export type s__MEMORY_BASIC_INFORMATION64 = struct { BaseAddress: uint64; AllocationBase: uint64; AllocationProtect: ulong; __alignment1: ulong; RegionSize: uint64; State: ulong; Protect: ulong; Type: ulong; __alignment2: ulong; }
export type s__CFG_CALL_TARGET_INFO = struct { Offset: uint64; Flags: uint64; }
export type s__MEM_ADDRESS_REQUIREMENTS = struct { LowestStartingAddress: *; HighestEndingAddress: *; Alignment: uint64; }
export type e_MEM_EXTENDED_PARAMETER_TYPE = enum { MemExtendedParameterInvalidType; MemExtendedParameterAddressRequirements = 1; MemExtendedParameterNumaNode = 2; MemExtendedParameterPartitionHandle = 3; MemExtendedParameterUserPhysicalHandle = 4; MemExtendedParameterAttributeFlags = 5; MemExtendedParameterImageMachine = 6; MemExtendedParameterMax = 7; }
export type s_MEM_EXTENDED_PARAMETER = struct { struct { #bits(8) Type: uint64; #bits(56) Reserved: uint64; }; struct #union { ULong64: uint64; Pointer: *; Size: uint64; Handle: *; ULong: ulong; }; }
export type e__MEM_DEDICATED_ATTRIBUTE_TYPE = enum { MemDedicatedAttributeReadBandwidth; MemDedicatedAttributeReadLatency = 1; MemDedicatedAttributeWriteBandwidth = 2; MemDedicatedAttributeWriteLatency = 3; MemDedicatedAttributeMax = 4; }
export type e_MEM_SECTION_EXTENDED_PARAMETER_TYPE = enum { MemSectionExtendedParameterInvalidType; MemSectionExtendedParameterUserPhysicalFlags = 1; MemSectionExtendedParameterNumaNode = 2; MemSectionExtendedParameterSigningLevel = 3; MemSectionExtendedParameterMax = 4; }
export type s__ENCLAVE_CREATE_INFO_SGX = struct { Secs: [4096; uint8]; }
export type s__ENCLAVE_INIT_INFO_SGX = struct { SigStruct: [1808; uint8]; Reserved1: [240; uint8]; EInitToken: [304; uint8]; Reserved2: [1744; uint8]; }
export type s__ENCLAVE_CREATE_INFO_VBS = struct { Flags: ulong; OwnerID: [32; uint8]; }
export type s__ENCLAVE_CREATE_INFO_VBS_BASIC = struct { Flags: ulong; OwnerID: [32; uint8]; }
export type s__ENCLAVE_LOAD_DATA_VBS_BASIC = struct { PageType: ulong; }
export type s__ENCLAVE_INIT_INFO_VBS_BASIC = struct { FamilyId: [16; uint8]; ImageId: [16; uint8]; EnclaveSize: uint64; EnclaveSvn: ulong; Reserved: ulong; struct #union { SignatureInfoHandle: *; Unused: uint64; }; }
export type s__ENCLAVE_INIT_INFO_VBS = struct { Length: ulong; ThreadCount: ulong; }
export type s__MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE = struct { Type: e__MEM_DEDICATED_ATTRIBUTE_TYPE; Reserved: ulong; Value: uint64; }
export type s__MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION = struct { NextEntryOffset: ulong; SizeOfInformation: ulong; Flags: ulong; AttributesOffset: ulong; AttributeCount: ulong; Reserved: ulong; TypeId: uint64; }
export type s__FILE_ID_128 = struct { Identifier: [16; uint8]; }
export type s__FILE_NOTIFY_INFORMATION = struct { NextEntryOffset: ulong; Action: ulong; FileNameLength: ulong; FileName: [1; ushort]; }
export type s__FILE_NOTIFY_EXTENDED_INFORMATION = struct { NextEntryOffset: ulong; Action: ulong; CreationTime: u__LARGE_INTEGER; LastModificationTime: u__LARGE_INTEGER; LastChangeTime: u__LARGE_INTEGER; LastAccessTime: u__LARGE_INTEGER; AllocatedLength: u__LARGE_INTEGER; FileSize: u__LARGE_INTEGER; FileAttributes: ulong; struct #union { ReparsePointTag: ulong; EaSize: ulong; }; FileId: u__LARGE_INTEGER; ParentFileId: u__LARGE_INTEGER; FileNameLength: ulong; FileName: [1; ushort]; }
export type s__FILE_NOTIFY_FULL_INFORMATION = struct { NextEntryOffset: ulong; Action: ulong; CreationTime: u__LARGE_INTEGER; LastModificationTime: u__LARGE_INTEGER; LastChangeTime: u__LARGE_INTEGER; LastAccessTime: u__LARGE_INTEGER; AllocatedLength: u__LARGE_INTEGER; FileSize: u__LARGE_INTEGER; FileAttributes: ulong; struct #union { ReparsePointTag: ulong; EaSize: ulong; }; FileId: u__LARGE_INTEGER; ParentFileId: u__LARGE_INTEGER; FileNameLength: ushort; FileNameFlags: uint8; Reserved: uint8; FileName: [1; ushort]; }
export type u__FILE_SEGMENT_ELEMENT = struct #union { Buffer: *; Alignment: uint64; }
export type s__REPARSE_GUID_DATA_BUFFER = struct { ReparseTag: ulong; ReparseDataLength: ushort; Reserved: ushort; ReparseGuid: s__GUID; GenericReparseBuffer: struct { DataBuffer: [1; uint8]; }; }
export type s__SCRUB_DATA_INPUT = struct { Size: ulong; Flags: ulong; MaximumIos: ulong; ObjectId: [4; ulong]; Reserved: [41; ulong]; ResumeContext: [1040; uint8]; }
export type s__SCRUB_PARITY_EXTENT = struct { Offset: int64; Length: uint64; }
export type s__SCRUB_PARITY_EXTENT_DATA = struct { Size: ushort; Flags: ushort; NumberOfParityExtents: ushort; MaximumNumberOfParityExtents: ushort; ParityExtents: [1; s__SCRUB_PARITY_EXTENT]; }
export type s__SCRUB_DATA_OUTPUT = struct { Size: ulong; Flags: ulong; Status: ulong; ErrorFileOffset: uint64; ErrorLength: uint64; NumberOfBytesRepaired: uint64; NumberOfBytesFailed: uint64; InternalFileReference: uint64; ResumeContextLength: ushort; ParityExtentDataOffset: ushort; Reserved: [9; ulong]; NumberOfMetadataBytesProcessed: uint64; NumberOfDataBytesProcessed: uint64; TotalNumberOfMetadataBytesInUse: uint64; TotalNumberOfDataBytesInUse: uint64; DataBytesSkippedDueToNoAllocation: uint64; DataBytesSkippedDueToInvalidRun: uint64; DataBytesSkippedDueToIntegrityStream: uint64; DataBytesSkippedDueToRegionBeingClean: uint64; DataBytesSkippedDueToLockConflict: uint64; DataBytesSkippedDueToNoScrubDataFlag: uint64; DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag: uint64; DataBytesScrubbed: uint64; ResumeContext: [1040; uint8]; }
export type e__SharedVirtualDiskSupportType = enum { SharedVirtualDisksUnsupported; SharedVirtualDisksSupported = 1; SharedVirtualDiskSnapshotsSupported = 3; SharedVirtualDiskCDPSnapshotsSupported = 7; }
export type e__SharedVirtualDiskHandleState = enum { SharedVirtualDiskHandleStateNone; SharedVirtualDiskHandleStateFileShared = 1; SharedVirtualDiskHandleStateHandleShared = 3; }
export type s__SHARED_VIRTUAL_DISK_SUPPORT = struct { SharedVirtualDiskSupport: e__SharedVirtualDiskSupportType; HandleState: e__SharedVirtualDiskHandleState; }
export type s__REARRANGE_FILE_DATA = struct { SourceStartingOffset: uint64; TargetOffset: uint64; SourceFileHandle: *; Length: ulong; Flags: ulong; }
export type s__REARRANGE_FILE_DATA32 = struct { SourceStartingOffset: uint64; TargetOffset: uint64; SourceFileHandle: uint; Length: ulong; Flags: ulong; }
export type s__SHUFFLE_FILE_DATA = struct { StartingOffset: int64; Length: int64; Flags: ulong; }
export type s__NETWORK_APP_INSTANCE_EA = struct { AppInstanceID: s__GUID; CsvFlags: ulong; }
export type e__SYSTEM_POWER_STATE = enum { PowerSystemUnspecified; PowerSystemWorking = 1; PowerSystemSleeping1 = 2; PowerSystemSleeping2 = 3; PowerSystemSleeping3 = 4; PowerSystemHibernate = 5; PowerSystemShutdown = 6; PowerSystemMaximum = 7; }
export type e_POWER_ACTION = enum { PowerActionNone; PowerActionReserved = 1; PowerActionSleep = 2; PowerActionHibernate = 3; PowerActionShutdown = 4; PowerActionShutdownReset = 5; PowerActionShutdownOff = 6; PowerActionWarmEject = 7; PowerActionDisplayOff = 8; }
export type e__DEVICE_POWER_STATE = enum { PowerDeviceUnspecified; PowerDeviceD0 = 1; PowerDeviceD1 = 2; PowerDeviceD2 = 3; PowerDeviceD3 = 4; PowerDeviceMaximum = 5; }
export type e__MONITOR_DISPLAY_STATE = enum { PowerMonitorOff; PowerMonitorOn = 1; PowerMonitorDim = 2; }
export type e__USER_ACTIVITY_PRESENCE = enum { PowerUserPresent; PowerUserNotPresent = 1; PowerUserInactive = 2; PowerUserMaximum = 3; PowerUserInvalid = 3; }
export type e_LATENCY_TIME = enum { LT_DONT_CARE; LT_LOWEST_LATENCY = 1; }
export type e__POWER_REQUEST_TYPE = enum { PowerRequestDisplayRequired; PowerRequestSystemRequired = 1; PowerRequestAwayModeRequired = 2; PowerRequestExecutionRequired = 3; }
export type s_CM_Power_Data_s = struct { PD_Size: ulong; PD_MostRecentPowerState: e__DEVICE_POWER_STATE; PD_Capabilities: ulong; PD_D1Latency: ulong; PD_D2Latency: ulong; PD_D3Latency: ulong; PD_PowerStateMapping: [7; e__DEVICE_POWER_STATE]; PD_DeepestSystemWake: e__SYSTEM_POWER_STATE; }
export type e_POWER_INFORMATION_LEVEL = enum { SystemPowerPolicyAc; SystemPowerPolicyDc = 1; VerifySystemPolicyAc = 2; VerifySystemPolicyDc = 3; SystemPowerCapabilities = 4; SystemBatteryState = 5; SystemPowerStateHandler = 6; ProcessorStateHandler = 7; SystemPowerPolicyCurrent = 8; AdministratorPowerPolicy = 9; SystemReserveHiberFile = 10; ProcessorInformation = 11; SystemPowerInformation = 12; ProcessorStateHandler2 = 13; LastWakeTime = 14; LastSleepTime = 15; SystemExecutionState = 16; SystemPowerStateNotifyHandler = 17; ProcessorPowerPolicyAc = 18; ProcessorPowerPolicyDc = 19; VerifyProcessorPowerPolicyAc = 20; VerifyProcessorPowerPolicyDc = 21; ProcessorPowerPolicyCurrent = 22; SystemPowerStateLogging = 23; SystemPowerLoggingEntry = 24; SetPowerSettingValue = 25; NotifyUserPowerSetting = 26; PowerInformationLevelUnused0 = 27; SystemMonitorHiberBootPowerOff = 28; SystemVideoState = 29; TraceApplicationPowerMessage = 30; TraceApplicationPowerMessageEnd = 31; ProcessorPerfStates = 32; ProcessorIdleStates = 33; ProcessorCap = 34; SystemWakeSource = 35; SystemHiberFileInformation = 36; TraceServicePowerMessage = 37; ProcessorLoad = 38; PowerShutdownNotification = 39; MonitorCapabilities = 40; SessionPowerInit = 41; SessionDisplayState = 42; PowerRequestCreate = 43; PowerRequestAction = 44; GetPowerRequestList = 45; ProcessorInformationEx = 46; NotifyUserModeLegacyPowerEvent = 47; GroupPark = 48; ProcessorIdleDomains = 49; WakeTimerList = 50; SystemHiberFileSize = 51; ProcessorIdleStatesHv = 52; ProcessorPerfStatesHv = 53; ProcessorPerfCapHv = 54; ProcessorSetIdle = 55; LogicalProcessorIdling = 56; UserPresence = 57; PowerSettingNotificationName = 58; GetPowerSettingValue = 59; IdleResiliency = 60; SessionRITState = 61; SessionConnectNotification = 62; SessionPowerCleanup = 63; SessionLockState = 64; SystemHiberbootState = 65; PlatformInformation = 66; PdcInvocation = 67; MonitorInvocation = 68; FirmwareTableInformationRegistered = 69; SetShutdownSelectedTime = 70; SuspendResumeInvocation = 71; PlmPowerRequestCreate = 72; ScreenOff = 73; CsDeviceNotification = 74; PlatformRole = 75; LastResumePerformance = 76; DisplayBurst = 77; ExitLatencySamplingPercentage = 78; RegisterSpmPowerSettings = 79; PlatformIdleStates = 80; ProcessorIdleVeto = 81; PlatformIdleVeto = 82; SystemBatteryStatePrecise = 83; ThermalEvent = 84; PowerRequestActionInternal = 85; BatteryDeviceState = 86; PowerInformationInternal = 87; ThermalStandby = 88; SystemHiberFileType = 89; PhysicalPowerButtonPress = 90; QueryPotentialDripsConstraint = 91; EnergyTrackerCreate = 92; EnergyTrackerQuery = 93; UpdateBlackBoxRecorder = 94; SessionAllowExternalDmaDevices = 95; SendSuspendResumeNotification = 96; BlackBoxRecorderDirectAccessBuffer = 97; PowerInformationLevelMaximum = 98; }
export type e_POWER_USER_PRESENCE_TYPE = enum { UserNotPresent; UserPresent = 1; UserUnknown = 255; }
export type s__POWER_USER_PRESENCE = struct { UserPresence: e_POWER_USER_PRESENCE_TYPE; }
export type s__POWER_SESSION_CONNECT = struct { Connected: uint8; Console: uint8; }
export type s__POWER_SESSION_TIMEOUTS = struct { InputTimeout: ulong; DisplayTimeout: ulong; }
export type s__POWER_SESSION_RIT_STATE = struct { Active: uint8; LastInputTime: uint64; }
export type s__POWER_SESSION_WINLOGON = struct { SessionId: ulong; Console: uint8; Locked: uint8; }
export type s__POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = struct { IsAllowed: uint8; }
export type s__POWER_IDLE_RESILIENCY = struct { CoalescingTimeout: ulong; IdleResiliencyPeriod: ulong; }
export type e_POWER_MONITOR_REQUEST_REASON = enum { MonitorRequestReasonUnknown; MonitorRequestReasonPowerButton = 1; MonitorRequestReasonRemoteConnection = 2; MonitorRequestReasonScMonitorpower = 3; MonitorRequestReasonUserInput = 4; MonitorRequestReasonAcDcDisplayBurst = 5; MonitorRequestReasonUserDisplayBurst = 6; MonitorRequestReasonPoSetSystemState = 7; MonitorRequestReasonSetThreadExecutionState = 8; MonitorRequestReasonFullWake = 9; MonitorRequestReasonSessionUnlock = 10; MonitorRequestReasonScreenOffRequest = 11; MonitorRequestReasonIdleTimeout = 12; MonitorRequestReasonPolicyChange = 13; MonitorRequestReasonSleepButton = 14; MonitorRequestReasonLid = 15; MonitorRequestReasonBatteryCountChange = 16; MonitorRequestReasonGracePeriod = 17; MonitorRequestReasonPnP = 18; MonitorRequestReasonDP = 19; MonitorRequestReasonSxTransition = 20; MonitorRequestReasonSystemIdle = 21; MonitorRequestReasonNearProximity = 22; MonitorRequestReasonThermalStandby = 23; MonitorRequestReasonResumePdc = 24; MonitorRequestReasonResumeS4 = 25; MonitorRequestReasonTerminal = 26; MonitorRequestReasonPdcSignal = 27; MonitorRequestReasonAcDcDisplayBurstSuppressed = 28; MonitorRequestReasonSystemStateEntered = 29; MonitorRequestReasonWinrt = 30; MonitorRequestReasonUserInputKeyboard = 31; MonitorRequestReasonUserInputMouse = 32; MonitorRequestReasonUserInputTouchpad = 33; MonitorRequestReasonUserInputPen = 34; MonitorRequestReasonUserInputAccelerometer = 35; MonitorRequestReasonUserInputHid = 36; MonitorRequestReasonUserInputPoUserPresent = 37; MonitorRequestReasonUserInputSessionSwitch = 38; MonitorRequestReasonUserInputInitialization = 39; MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40; MonitorRequestReasonPdcSignalWindowsMobileShell = 41; MonitorRequestReasonPdcSignalHeyCortana = 42; MonitorRequestReasonPdcSignalHolographicShell = 43; MonitorRequestReasonPdcSignalFingerprint = 44; MonitorRequestReasonDirectedDrips = 45; MonitorRequestReasonDim = 46; MonitorRequestReasonBuiltinPanel = 47; MonitorRequestReasonDisplayRequiredUnDim = 48; MonitorRequestReasonBatteryCountChangeSuppressed = 49; MonitorRequestReasonResumeModernStandby = 50; MonitorRequestReasonTerminalInit = 51; MonitorRequestReasonPdcSignalSensorsHumanPresence = 52; MonitorRequestReasonBatteryPreCritical = 53; MonitorRequestReasonUserInputTouch = 54; MonitorRequestReasonMax = 55; }
export type e__POWER_MONITOR_REQUEST_TYPE = enum { MonitorRequestTypeOff; MonitorRequestTypeOnAndPresent = 1; MonitorRequestTypeToggleOn = 2; }
export type s__POWER_MONITOR_INVOCATION = struct { Console: uint8; RequestReason: e_POWER_MONITOR_REQUEST_REASON; }
export type s__RESUME_PERFORMANCE = struct { PostTimeMs: ulong; TotalResumeTimeMs: uint64; ResumeCompleteTimestamp: uint64; }
export type e_SYSTEM_POWER_CONDITION = enum { PoAc; PoDc = 1; PoHot = 2; PoConditionMaximum = 3; }
export type s_SET_POWER_SETTING_VALUE = struct { Version: ulong; Guid: s__GUID; PowerCondition: e_SYSTEM_POWER_CONDITION; DataLength: ulong; Data: [1; uint8]; }
export type SET_POWER_SETTING_VALUE
export type s_NOTIFY_USER_POWER_SETTING = struct { Guid: s__GUID; }
export type NOTIFY_USER_POWER_SETTING
export type s__APPLICATIONLAUNCH_SETTING_VALUE = struct { ActivationTime: u__LARGE_INTEGER; Flags: ulong; ButtonInstanceID: ulong; }
export type e__POWER_PLATFORM_ROLE = enum { PlatformRoleUnspecified; PlatformRoleDesktop = 1; PlatformRoleMobile = 2; PlatformRoleWorkstation = 3; PlatformRoleEnterpriseServer = 4; PlatformRoleSOHOServer = 5; PlatformRoleAppliancePC = 6; PlatformRolePerformanceServer = 7; PlatformRoleSlate = 8; PlatformRoleMaximum = 9; }
export type s__POWER_PLATFORM_INFORMATION = struct { AoAc: uint8; }
export type e_POWER_SETTING_ALTITUDE = enum { ALTITUDE_GROUP_POLICY; ALTITUDE_USER = 1; ALTITUDE_RUNTIME_OVERRIDE = 2; ALTITUDE_PROVISIONING = 3; ALTITUDE_OEM_CUSTOMIZATION = 4; ALTITUDE_INTERNAL_OVERRIDE = 5; ALTITUDE_OS_DEFAULT = 6; }
export type s_BATTERY_REPORTING_SCALE = struct { Granularity: ulong; Capacity: ulong; }
export type BATTERY_REPORTING_SCALE
export type s_PPM_WMI_LEGACY_PERFSTATE = struct { Frequency: ulong; Flags: ulong; PercentFrequency: ulong; }
export type PPM_WMI_LEGACY_PERFSTATE
export type s_PPM_WMI_IDLE_STATE = struct { Latency: ulong; Power: ulong; TimeCheck: ulong; PromotePercent: uint8; DemotePercent: uint8; StateType: uint8; Reserved: uint8; StateFlags: ulong; Context: ulong; IdleHandler: ulong; Reserved1: ulong; }
export type PPM_WMI_IDLE_STATE
export type s_PPM_WMI_IDLE_STATES = struct { Type: ulong; Count: ulong; TargetState: ulong; OldState: ulong; TargetProcessors: uint64; State: [1; s_PPM_WMI_IDLE_STATE]; }
export type PPM_WMI_IDLE_STATES
export type s_PPM_WMI_IDLE_STATES_EX = struct { Type: ulong; Count: ulong; TargetState: ulong; OldState: ulong; TargetProcessors: *; State: [1; s_PPM_WMI_IDLE_STATE]; }
export type PPM_WMI_IDLE_STATES_EX
export type s_PPM_WMI_PERF_STATE = struct { Frequency: ulong; Power: ulong; PercentFrequency: uint8; IncreaseLevel: uint8; DecreaseLevel: uint8; Type: uint8; IncreaseTime: ulong; DecreaseTime: ulong; Control: uint64; Status: uint64; HitCount: ulong; Reserved1: ulong; Reserved2: uint64; Reserved3: uint64; }
export type PPM_WMI_PERF_STATE
export type s_PPM_WMI_PERF_STATES = struct { Count: ulong; MaxFrequency: ulong; CurrentState: ulong; MaxPerfState: ulong; MinPerfState: ulong; LowestPerfState: ulong; ThermalConstraint: ulong; BusyAdjThreshold: uint8; PolicyType: uint8; Type: uint8; Reserved: uint8; TimerInterval: ulong; TargetProcessors: uint64; PStateHandler: ulong; PStateContext: ulong; TStateHandler: ulong; TStateContext: ulong; FeedbackHandler: ulong; Reserved1: ulong; Reserved2: uint64; State: [1; s_PPM_WMI_PERF_STATE]; }
export type PPM_WMI_PERF_STATES
export type s_PPM_WMI_PERF_STATES_EX = struct { Count: ulong; MaxFrequency: ulong; CurrentState: ulong; MaxPerfState: ulong; MinPerfState: ulong; LowestPerfState: ulong; ThermalConstraint: ulong; BusyAdjThreshold: uint8; PolicyType: uint8; Type: uint8; Reserved: uint8; TimerInterval: ulong; TargetProcessors: *; PStateHandler: ulong; PStateContext: ulong; TStateHandler: ulong; TStateContext: ulong; FeedbackHandler: ulong; Reserved1: ulong; Reserved2: uint64; State: [1; s_PPM_WMI_PERF_STATE]; }
export type PPM_WMI_PERF_STATES_EX
export type s_PPM_IDLE_STATE_ACCOUNTING = struct { IdleTransitions: ulong; FailedTransitions: ulong; InvalidBucketIndex: ulong; TotalTime: uint64; IdleTimeBuckets: [6; ulong]; }
export type PPM_IDLE_STATE_ACCOUNTING
export type s_PPM_IDLE_ACCOUNTING = struct { StateCount: ulong; TotalTransitions: ulong; ResetCount: ulong; StartTime: uint64; State: [1; s_PPM_IDLE_STATE_ACCOUNTING]; }
export type PPM_IDLE_ACCOUNTING
export type s_PPM_IDLE_STATE_BUCKET_EX = struct { TotalTimeUs: uint64; MinTimeUs: ulong; MaxTimeUs: ulong; Count: ulong; }
export type PPM_IDLE_STATE_BUCKET_EX
export type s_PPM_IDLE_STATE_ACCOUNTING_EX = struct { TotalTime: uint64; IdleTransitions: ulong; FailedTransitions: ulong; InvalidBucketIndex: ulong; MinTimeUs: ulong; MaxTimeUs: ulong; CancelledTransitions: ulong; IdleTimeBuckets: [16; s_PPM_IDLE_STATE_BUCKET_EX]; }
export type PPM_IDLE_STATE_ACCOUNTING_EX
export type s_PPM_IDLE_ACCOUNTING_EX = struct { StateCount: ulong; TotalTransitions: ulong; ResetCount: ulong; AbortCount: ulong; StartTime: uint64; State: [1; s_PPM_IDLE_STATE_ACCOUNTING_EX]; }
export type PPM_IDLE_ACCOUNTING_EX
export type s_PPM_PERFSTATE_EVENT = struct { State: ulong; Status: ulong; Latency: ulong; Speed: ulong; Processor: ulong; }
export type PPM_PERFSTATE_EVENT
export type s_PPM_PERFSTATE_DOMAIN_EVENT = struct { State: ulong; Latency: ulong; Speed: ulong; Processors: uint64; }
export type PPM_PERFSTATE_DOMAIN_EVENT
export type s_PPM_IDLESTATE_EVENT = struct { NewState: ulong; OldState: ulong; Processors: uint64; }
export type PPM_IDLESTATE_EVENT
export type s_PPM_THERMALCHANGE_EVENT = struct { ThermalConstraint: ulong; Processors: uint64; }
export type PPM_THERMALCHANGE_EVENT
export type s_PPM_THERMAL_POLICY_EVENT = struct { Mode: uint8; Processors: uint64; }
export type PPM_THERMAL_POLICY_EVENT
export type s_POWER_ACTION_POLICY = struct { Action: e_POWER_ACTION; Flags: ulong; EventCode: ulong; }
export type POWER_ACTION_POLICY
export type s_SYSTEM_POWER_LEVEL = struct { Enable: uint8; Spare: [3; uint8]; BatteryLevel: ulong; PowerPolicy: s_POWER_ACTION_POLICY; MinSystemState: e__SYSTEM_POWER_STATE; }
export type SYSTEM_POWER_LEVEL
export type s__SYSTEM_POWER_POLICY = struct { Revision: ulong; PowerButton: s_POWER_ACTION_POLICY; SleepButton: s_POWER_ACTION_POLICY; LidClose: s_POWER_ACTION_POLICY; LidOpenWake: e__SYSTEM_POWER_STATE; Reserved: ulong; Idle: s_POWER_ACTION_POLICY; IdleTimeout: ulong; IdleSensitivity: uint8; DynamicThrottle: uint8; Spare2: [2; uint8]; MinSleep: e__SYSTEM_POWER_STATE; MaxSleep: e__SYSTEM_POWER_STATE; ReducedLatencySleep: e__SYSTEM_POWER_STATE; WinLogonFlags: ulong; Spare3: ulong; DozeS4Timeout: ulong; BroadcastCapacityResolution: ulong; DischargePolicy: [4; s_SYSTEM_POWER_LEVEL]; VideoTimeout: ulong; VideoDimDisplay: uint8; VideoReserved: [3; ulong]; SpindownTimeout: ulong; OptimizeForPower: uint8; FanThrottleTolerance: uint8; ForcedThrottle: uint8; MinThrottle: uint8; OverThrottled: s_POWER_ACTION_POLICY; }
export type s_PROCESSOR_IDLESTATE_INFO = struct { TimeCheck: ulong; DemotePercent: uint8; PromotePercent: uint8; Spare: [2; uint8]; }
export type PROCESSOR_IDLESTATE_INFO
export type s_PROCESSOR_IDLESTATE_POLICY = struct { Revision: ushort; Flags: struct #union { AsWORD: ushort; struct { #bits(1) AllowScaling: ushort; #bits(1) Disabled: ushort; #bits(14) Reserved: ushort; }; }; PolicyCount: ulong; Policy: [3; s_PROCESSOR_IDLESTATE_INFO]; }
export type PROCESSOR_IDLESTATE_POLICY
export type s__PROCESSOR_POWER_POLICY_INFO = struct { TimeCheck: ulong; DemoteLimit: ulong; PromoteLimit: ulong; DemotePercent: uint8; PromotePercent: uint8; Spare: [2; uint8]; #bits(1) AllowDemotion: ulong; #bits(1) AllowPromotion: ulong; #bits(30) Reserved: ulong; }
export type s__PROCESSOR_POWER_POLICY = struct { Revision: ulong; DynamicThrottle: uint8; Spare: [3; uint8]; #bits(1) DisableCStates: ulong; #bits(31) Reserved: ulong; PolicyCount: ulong; Policy: [3; s__PROCESSOR_POWER_POLICY_INFO]; }
export type s_PROCESSOR_PERFSTATE_POLICY = struct { Revision: ulong; MaxThrottle: uint8; MinThrottle: uint8; BusyAdjThreshold: uint8; struct #union { Spare: uint8; Flags: struct #union { AsBYTE: uint8; struct { #bits(1) NoDomainAccounting: uint8; #bits(2) IncreasePolicy: uint8; #bits(2) DecreasePolicy: uint8; #bits(3) Reserved: uint8; }; }; }; TimeCheck: ulong; IncreaseTime: ulong; DecreaseTime: ulong; IncreasePercent: ulong; DecreasePercent: ulong; }
export type PROCESSOR_PERFSTATE_POLICY
export type s__ADMINISTRATOR_POWER_POLICY = struct { MinSleep: e__SYSTEM_POWER_STATE; MaxSleep: e__SYSTEM_POWER_STATE; MinVideoTimeout: ulong; MaxVideoTimeout: ulong; MinSpindownTimeout: ulong; MaxSpindownTimeout: ulong; }
export type e__HIBERFILE_BUCKET_SIZE = enum { HiberFileBucket1GB; HiberFileBucket2GB = 1; HiberFileBucket4GB = 2; HiberFileBucket8GB = 3; HiberFileBucket16GB = 4; HiberFileBucket32GB = 5; HiberFileBucketUnlimited = 6; HiberFileBucketMax = 7; }
export type s__HIBERFILE_BUCKET = struct { MaxPhysicalMemory: uint64; PhysicalMemoryPercent: [3; ulong]; }
export type s_SYSTEM_POWER_CAPABILITIES = struct { PowerButtonPresent: uint8; SleepButtonPresent: uint8; LidPresent: uint8; SystemS1: uint8; SystemS2: uint8; SystemS3: uint8; SystemS4: uint8; SystemS5: uint8; HiberFilePresent: uint8; FullWake: uint8; VideoDimPresent: uint8; ApmPresent: uint8; UpsPresent: uint8; ThermalControl: uint8; ProcessorThrottle: uint8; ProcessorMinThrottle: uint8; ProcessorMaxThrottle: uint8; FastSystemS4: uint8; Hiberboot: uint8; WakeAlarmPresent: uint8; AoAc: uint8; DiskSpinDown: uint8; HiberFileType: uint8; AoAcConnectivitySupported: uint8; spare3: [6; uint8]; SystemBatteriesPresent: uint8; BatteriesAreShortTerm: uint8; BatteryScale: [3; s_BATTERY_REPORTING_SCALE]; AcOnLineWake: e__SYSTEM_POWER_STATE; SoftLidWake: e__SYSTEM_POWER_STATE; RtcWake: e__SYSTEM_POWER_STATE; MinDeviceWakeState: e__SYSTEM_POWER_STATE; DefaultLowLatencyWake: e__SYSTEM_POWER_STATE; }
export type SYSTEM_POWER_CAPABILITIES
export type s_SYSTEM_BATTERY_STATE = struct { AcOnLine: uint8; BatteryPresent: uint8; Charging: uint8; Discharging: uint8; Spare1: [3; uint8]; Tag: uint8; MaxCapacity: ulong; RemainingCapacity: ulong; Rate: ulong; EstimatedTime: ulong; DefaultAlert1: ulong; DefaultAlert2: ulong; }
export type SYSTEM_BATTERY_STATE
export type s__IMAGE_DOS_HEADER = struct { e_magic: ushort; e_cblp: ushort; e_cp: ushort; e_crlc: ushort; e_cparhdr: ushort; e_minalloc: ushort; e_maxalloc: ushort; e_ss: ushort; e_sp: ushort; e_csum: ushort; e_ip: ushort; e_cs: ushort; e_lfarlc: ushort; e_ovno: ushort; e_res: [4; ushort]; e_oemid: ushort; e_oeminfo: ushort; e_res2: [10; ushort]; e_lfanew: long; }
export type s__IMAGE_OS2_HEADER = struct { ne_magic: ushort; ne_ver: char; ne_rev: char; ne_enttab: ushort; ne_cbenttab: ushort; ne_crc: long; ne_flags: ushort; ne_autodata: ushort; ne_heap: ushort; ne_stack: ushort; ne_csip: long; ne_sssp: long; ne_cseg: ushort; ne_cmod: ushort; ne_cbnrestab: ushort; ne_segtab: ushort; ne_rsrctab: ushort; ne_restab: ushort; ne_modtab: ushort; ne_imptab: ushort; ne_nrestab: long; ne_cmovent: ushort; ne_align: ushort; ne_cres: ushort; ne_exetyp: uint8; ne_flagsothers: uint8; ne_pretthunks: ushort; ne_psegrefbytes: ushort; ne_swaparea: ushort; ne_expver: ushort; }
export type s__IMAGE_VXD_HEADER = struct { e32_magic: ushort; e32_border: uint8; e32_worder: uint8; e32_level: ulong; e32_cpu: ushort; e32_os: ushort; e32_ver: ulong; e32_mflags: ulong; e32_mpages: ulong; e32_startobj: ulong; e32_eip: ulong; e32_stackobj: ulong; e32_esp: ulong; e32_pagesize: ulong; e32_lastpagesize: ulong; e32_fixupsize: ulong; e32_fixupsum: ulong; e32_ldrsize: ulong; e32_ldrsum: ulong; e32_objtab: ulong; e32_objcnt: ulong; e32_objmap: ulong; e32_itermap: ulong; e32_rsrctab: ulong; e32_rsrccnt: ulong; e32_restab: ulong; e32_enttab: ulong; e32_dirtab: ulong; e32_dircnt: ulong; e32_fpagetab: ulong; e32_frectab: ulong; e32_impmod: ulong; e32_impmodcnt: ulong; e32_impproc: ulong; e32_pagesum: ulong; e32_datapage: ulong; e32_preload: ulong; e32_nrestab: ulong; e32_cbnrestab: ulong; e32_nressum: ulong; e32_autodata: ulong; e32_debuginfo: ulong; e32_debuglen: ulong; e32_instpreload: ulong; e32_instdemand: ulong; e32_heapsize: ulong; e32_res3: [12; uint8]; e32_winresoff: ulong; e32_winreslen: ulong; e32_devid: ushort; e32_ddkver: ushort; }
export type s__IMAGE_FILE_HEADER = struct { Machine: ushort; NumberOfSections: ushort; TimeDateStamp: ulong; PointerToSymbolTable: ulong; NumberOfSymbols: ulong; SizeOfOptionalHeader: ushort; Characteristics: ushort; }
export type s__IMAGE_DATA_DIRECTORY = struct { VirtualAddress: ulong; Size: ulong; }
export type s__IMAGE_OPTIONAL_HEADER = struct { Magic: ushort; MajorLinkerVersion: uint8; MinorLinkerVersion: uint8; SizeOfCode: ulong; SizeOfInitializedData: ulong; SizeOfUninitializedData: ulong; AddressOfEntryPoint: ulong; BaseOfCode: ulong; BaseOfData: ulong; ImageBase: ulong; SectionAlignment: ulong; FileAlignment: ulong; MajorOperatingSystemVersion: ushort; MinorOperatingSystemVersion: ushort; MajorImageVersion: ushort; MinorImageVersion: ushort; MajorSubsystemVersion: ushort; MinorSubsystemVersion: ushort; Win32VersionValue: ulong; SizeOfImage: ulong; SizeOfHeaders: ulong; CheckSum: ulong; Subsystem: ushort; DllCharacteristics: ushort; SizeOfStackReserve: ulong; SizeOfStackCommit: ulong; SizeOfHeapReserve: ulong; SizeOfHeapCommit: ulong; LoaderFlags: ulong; NumberOfRvaAndSizes: ulong; DataDirectory: [16; s__IMAGE_DATA_DIRECTORY]; }
export type s__IMAGE_ROM_OPTIONAL_HEADER = struct { Magic: ushort; MajorLinkerVersion: uint8; MinorLinkerVersion: uint8; SizeOfCode: ulong; SizeOfInitializedData: ulong; SizeOfUninitializedData: ulong; AddressOfEntryPoint: ulong; BaseOfCode: ulong; BaseOfData: ulong; BaseOfBss: ulong; GprMask: ulong; CprMask: [4; ulong]; GpValue: ulong; }
export type s__IMAGE_OPTIONAL_HEADER64 = struct { Magic: ushort; MajorLinkerVersion: uint8; MinorLinkerVersion: uint8; SizeOfCode: ulong; SizeOfInitializedData: ulong; SizeOfUninitializedData: ulong; AddressOfEntryPoint: ulong; BaseOfCode: ulong; ImageBase: uint64; SectionAlignment: ulong; FileAlignment: ulong; MajorOperatingSystemVersion: ushort; MinorOperatingSystemVersion: ushort; MajorImageVersion: ushort; MinorImageVersion: ushort; MajorSubsystemVersion: ushort; MinorSubsystemVersion: ushort; Win32VersionValue: ulong; SizeOfImage: ulong; SizeOfHeaders: ulong; CheckSum: ulong; Subsystem: ushort; DllCharacteristics: ushort; SizeOfStackReserve: uint64; SizeOfStackCommit: uint64; SizeOfHeapReserve: uint64; SizeOfHeapCommit: uint64; LoaderFlags: ulong; NumberOfRvaAndSizes: ulong; DataDirectory: [16; s__IMAGE_DATA_DIRECTORY]; }
export type s__IMAGE_NT_HEADERS64 = struct { Signature: ulong; FileHeader: s__IMAGE_FILE_HEADER; OptionalHeader: s__IMAGE_OPTIONAL_HEADER64; }
export type s__IMAGE_NT_HEADERS = struct { Signature: ulong; FileHeader: s__IMAGE_FILE_HEADER; OptionalHeader: s__IMAGE_OPTIONAL_HEADER; }
export type s__IMAGE_ROM_HEADERS = struct { FileHeader: s__IMAGE_FILE_HEADER; OptionalHeader: s__IMAGE_ROM_OPTIONAL_HEADER; }
export type s_ANON_OBJECT_HEADER = struct { Sig1: ushort; Sig2: ushort; Version: ushort; Machine: ushort; TimeDateStamp: ulong; ClassID: s__GUID; SizeOfData: ulong; }
export type s_ANON_OBJECT_HEADER_V2 = struct { Sig1: ushort; Sig2: ushort; Version: ushort; Machine: ushort; TimeDateStamp: ulong; ClassID: s__GUID; SizeOfData: ulong; Flags: ulong; MetaDataSize: ulong; MetaDataOffset: ulong; }
export type s_ANON_OBJECT_HEADER_BIGOBJ = struct { Sig1: ushort; Sig2: ushort; Version: ushort; Machine: ushort; TimeDateStamp: ulong; ClassID: s__GUID; SizeOfData: ulong; Flags: ulong; MetaDataSize: ulong; MetaDataOffset: ulong; NumberOfSections: ulong; PointerToSymbolTable: ulong; NumberOfSymbols: ulong; }
export type s__IMAGE_SECTION_HEADER = struct { Name: [8; uint8]; Misc: struct #union { PhysicalAddress: ulong; VirtualSize: ulong; }; VirtualAddress: ulong; SizeOfRawData: ulong; PointerToRawData: ulong; PointerToRelocations: ulong; PointerToLinenumbers: ulong; NumberOfRelocations: ushort; NumberOfLinenumbers: ushort; Characteristics: ulong; }
export type s__IMAGE_SYMBOL = struct { N: struct #union { ShortName: [8; uint8]; Name: struct { Short: ulong; Long: ulong; }; LongName: [2; ulong]; }; Value: ulong; SectionNumber: short; Type: ushort; StorageClass: uint8; NumberOfAuxSymbols: uint8; }
export type s__IMAGE_SYMBOL_EX = struct { N: struct #union { ShortName: [8; uint8]; Name: struct { Short: ulong; Long: ulong; }; LongName: [2; ulong]; }; Value: ulong; SectionNumber: long; Type: ushort; StorageClass: uint8; NumberOfAuxSymbols: uint8; }
export type s_IMAGE_AUX_SYMBOL_TOKEN_DEF = struct { bAuxType: uint8; bReserved: uint8; SymbolTableIndex: ulong; rgbReserved: [12; uint8]; }
export type u__IMAGE_AUX_SYMBOL = struct #union { Sym: struct { TagIndex: ulong; Misc: struct #union { LnSz: struct { Linenumber: ushort; Size: ushort; }; TotalSize: ulong; }; FcnAry: struct #union { Function: struct { PointerToLinenumber: ulong; PointerToNextFunction: ulong; }; Array: struct { Dimension: [4; ushort]; }; }; TvIndex: ushort; }; File: struct { Name: [18; uint8]; }; Section: struct { Length: ulong; NumberOfRelocations: ushort; NumberOfLinenumbers: ushort; CheckSum: ulong; Number: short; Selection: uint8; bReserved: uint8; HighNumber: short; }; TokenDef: s_IMAGE_AUX_SYMBOL_TOKEN_DEF; CRC: struct { crc: ulong; rgbReserved: [14; uint8]; }; }
export type u__IMAGE_AUX_SYMBOL_EX = struct #union { Sym: struct { WeakDefaultSymIndex: ulong; WeakSearchType: ulong; rgbReserved: [12; uint8]; }; File: struct { Name: [20; uint8]; }; Section: struct { Length: ulong; NumberOfRelocations: ushort; NumberOfLinenumbers: ushort; CheckSum: ulong; Number: short; Selection: uint8; bReserved: uint8; HighNumber: short; rgbReserved: [2; uint8]; }; struct { TokenDef: s_IMAGE_AUX_SYMBOL_TOKEN_DEF; rgbReserved: [2; uint8]; }; CRC: struct { crc: ulong; rgbReserved: [16; uint8]; }; }
export type e_IMAGE_AUX_SYMBOL_TYPE = enum { IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1; }
export type s__IMAGE_RELOCATION = struct { struct #union { VirtualAddress: ulong; RelocCount: ulong; }; SymbolTableIndex: ulong; Type: ushort; }
export type s__IMAGE_LINENUMBER = struct { Type: struct #union { SymbolTableIndex: ulong; VirtualAddress: ulong; }; Linenumber: ushort; }
export type s__IMAGE_BASE_RELOCATION = struct { VirtualAddress: ulong; SizeOfBlock: ulong; }
export type s__IMAGE_ARCHIVE_MEMBER_HEADER = struct { Name: [16; uint8]; Date: [12; uint8]; UserID: [6; uint8]; GroupID: [6; uint8]; Mode: [8; uint8]; Size: [10; uint8]; EndHeader: [2; uint8]; }
export type s__IMAGE_EXPORT_DIRECTORY = struct { Characteristics: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; Name: ulong; Base: ulong; NumberOfFunctions: ulong; NumberOfNames: ulong; AddressOfFunctions: ulong; AddressOfNames: ulong; AddressOfNameOrdinals: ulong; }
export type s__IMAGE_IMPORT_BY_NAME = struct { Hint: ushort; Name: [1; char]; }
export type s__IMAGE_THUNK_DATA64 = struct { u1: struct #union { ForwarderString: uint64; Function: uint64; Ordinal: uint64; AddressOfData: uint64; }; }
export type s__IMAGE_THUNK_DATA32 = struct { u1: struct #union { ForwarderString: ulong; Function: ulong; Ordinal: ulong; AddressOfData: ulong; }; }
export type s__IMAGE_TLS_DIRECTORY64 = struct { StartAddressOfRawData: uint64; EndAddressOfRawData: uint64; AddressOfIndex: uint64; AddressOfCallBacks: uint64; SizeOfZeroFill: ulong; struct #union { Characteristics: ulong; struct { #bits(20) Reserved0: ulong; #bits(4) Alignment: ulong; #bits(8) Reserved1: ulong; }; }; }
export type s__IMAGE_TLS_DIRECTORY32 = struct { StartAddressOfRawData: ulong; EndAddressOfRawData: ulong; AddressOfIndex: ulong; AddressOfCallBacks: ulong; SizeOfZeroFill: ulong; struct #union { Characteristics: ulong; struct { #bits(20) Reserved0: ulong; #bits(4) Alignment: ulong; #bits(8) Reserved1: ulong; }; }; }
export type s__IMAGE_IMPORT_DESCRIPTOR = struct { struct #union { Characteristics: ulong; OriginalFirstThunk: ulong; }; TimeDateStamp: ulong; ForwarderChain: ulong; Name: ulong; FirstThunk: ulong; }
export type s__IMAGE_BOUND_IMPORT_DESCRIPTOR = struct { TimeDateStamp: ulong; OffsetModuleName: ushort; NumberOfModuleForwarderRefs: ushort; }
export type s__IMAGE_BOUND_FORWARDER_REF = struct { TimeDateStamp: ulong; OffsetModuleName: ushort; Reserved: ushort; }
export type s__IMAGE_DELAYLOAD_DESCRIPTOR = struct { Attributes: struct #union { AllAttributes: ulong; struct { #bits(1) RvaBased: ulong; #bits(31) ReservedAttributes: ulong; }; }; DllNameRVA: ulong; ModuleHandleRVA: ulong; ImportAddressTableRVA: ulong; ImportNameTableRVA: ulong; BoundImportAddressTableRVA: ulong; UnloadInformationTableRVA: ulong; TimeDateStamp: ulong; }
export type s__IMAGE_RESOURCE_DIRECTORY = struct { Characteristics: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; NumberOfNamedEntries: ushort; NumberOfIdEntries: ushort; }
export type s__IMAGE_RESOURCE_DIRECTORY_ENTRY = struct { struct #union { struct { #bits(31) NameOffset: ulong; #bits(1) NameIsString: ulong; }; Name: ulong; Id: ushort; }; struct #union { OffsetToData: ulong; struct { #bits(31) OffsetToDirectory: ulong; #bits(1) DataIsDirectory: ulong; }; }; }
export type s__IMAGE_RESOURCE_DIRECTORY_STRING = struct { Length: ushort; NameString: [1; char]; }
export type s__IMAGE_RESOURCE_DIR_STRING_U = struct { Length: ushort; NameString: [1; ushort]; }
export type s__IMAGE_RESOURCE_DATA_ENTRY = struct { OffsetToData: ulong; Size: ulong; CodePage: ulong; Reserved: ulong; }
export type s__IMAGE_LOAD_CONFIG_CODE_INTEGRITY = struct { Flags: ushort; Catalog: ushort; CatalogOffset: ulong; Reserved: ulong; }
export type s__IMAGE_DYNAMIC_RELOCATION_TABLE = struct { Version: ulong; Size: ulong; }
export type s__IMAGE_DYNAMIC_RELOCATION32 = struct { Symbol: ulong; BaseRelocSize: ulong; }
export type s__IMAGE_DYNAMIC_RELOCATION64 = struct { Symbol: uint64; BaseRelocSize: ulong; }
export type s__IMAGE_DYNAMIC_RELOCATION32_V2 = struct { HeaderSize: ulong; FixupInfoSize: ulong; Symbol: ulong; SymbolGroup: ulong; Flags: ulong; }
export type s__IMAGE_DYNAMIC_RELOCATION64_V2 = struct { HeaderSize: ulong; FixupInfoSize: ulong; Symbol: uint64; SymbolGroup: ulong; Flags: ulong; }
export type s__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = struct { PrologueByteCount: uint8; }
export type s__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = struct { EpilogueCount: ulong; EpilogueByteCount: uint8; BranchDescriptorElementSize: uint8; BranchDescriptorCount: ushort; }
export type s__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct { #bits(12) PageRelativeOffset: ulong; #bits(1) IndirectCall: ulong; #bits(19) IATIndex: ulong; }
export type s__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct { #bits(12) PageRelativeOffset: ushort; #bits(1) IndirectCall: ushort; #bits(1) RexWPrefix: ushort; #bits(1) CfgCheck: ushort; #bits(1) Reserved: ushort; }
export type s__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = struct { #bits(12) PageRelativeOffset: ushort; #bits(4) RegisterNumber: ushort; }
export type s__IMAGE_FUNCTION_OVERRIDE_HEADER = struct { FuncOverrideSize: ulong; }
export type s__IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION = struct { OriginalRva: ulong; BDDOffset: ulong; RvaSize: ulong; BaseRelocSize: ulong; }
export type s__IMAGE_BDD_INFO = struct { Version: ulong; BDDSize: ulong; }
export type s__IMAGE_BDD_DYNAMIC_RELOCATION = struct { Left: ushort; Right: ushort; Value: ulong; }
export type s__IMAGE_LOAD_CONFIG_DIRECTORY32 = struct { Size: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; GlobalFlagsClear: ulong; GlobalFlagsSet: ulong; CriticalSectionDefaultTimeout: ulong; DeCommitFreeBlockThreshold: ulong; DeCommitTotalFreeThreshold: ulong; LockPrefixTable: ulong; MaximumAllocationSize: ulong; VirtualMemoryThreshold: ulong; ProcessHeapFlags: ulong; ProcessAffinityMask: ulong; CSDVersion: ushort; DependentLoadFlags: ushort; EditList: ulong; SecurityCookie: ulong; SEHandlerTable: ulong; SEHandlerCount: ulong; GuardCFCheckFunctionPointer: ulong; GuardCFDispatchFunctionPointer: ulong; GuardCFFunctionTable: ulong; GuardCFFunctionCount: ulong; GuardFlags: ulong; CodeIntegrity: s__IMAGE_LOAD_CONFIG_CODE_INTEGRITY; GuardAddressTakenIatEntryTable: ulong; GuardAddressTakenIatEntryCount: ulong; GuardLongJumpTargetTable: ulong; GuardLongJumpTargetCount: ulong; DynamicValueRelocTable: ulong; CHPEMetadataPointer: ulong; GuardRFFailureRoutine: ulong; GuardRFFailureRoutineFunctionPointer: ulong; DynamicValueRelocTableOffset: ulong; DynamicValueRelocTableSection: ushort; Reserved2: ushort; GuardRFVerifyStackPointerFunctionPointer: ulong; HotPatchTableOffset: ulong; Reserved3: ulong; EnclaveConfigurationPointer: ulong; VolatileMetadataPointer: ulong; GuardEHContinuationTable: ulong; GuardEHContinuationCount: ulong; GuardXFGCheckFunctionPointer: ulong; GuardXFGDispatchFunctionPointer: ulong; GuardXFGTableDispatchFunctionPointer: ulong; CastGuardOsDeterminedFailureMode: ulong; GuardMemcpyFunctionPointer: ulong; }
export type s__IMAGE_LOAD_CONFIG_DIRECTORY64 = struct { Size: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; GlobalFlagsClear: ulong; GlobalFlagsSet: ulong; CriticalSectionDefaultTimeout: ulong; DeCommitFreeBlockThreshold: uint64; DeCommitTotalFreeThreshold: uint64; LockPrefixTable: uint64; MaximumAllocationSize: uint64; VirtualMemoryThreshold: uint64; ProcessAffinityMask: uint64; ProcessHeapFlags: ulong; CSDVersion: ushort; DependentLoadFlags: ushort; EditList: uint64; SecurityCookie: uint64; SEHandlerTable: uint64; SEHandlerCount: uint64; GuardCFCheckFunctionPointer: uint64; GuardCFDispatchFunctionPointer: uint64; GuardCFFunctionTable: uint64; GuardCFFunctionCount: uint64; GuardFlags: ulong; CodeIntegrity: s__IMAGE_LOAD_CONFIG_CODE_INTEGRITY; GuardAddressTakenIatEntryTable: uint64; GuardAddressTakenIatEntryCount: uint64; GuardLongJumpTargetTable: uint64; GuardLongJumpTargetCount: uint64; DynamicValueRelocTable: uint64; CHPEMetadataPointer: uint64; GuardRFFailureRoutine: uint64; GuardRFFailureRoutineFunctionPointer: uint64; DynamicValueRelocTableOffset: ulong; DynamicValueRelocTableSection: ushort; Reserved2: ushort; GuardRFVerifyStackPointerFunctionPointer: uint64; HotPatchTableOffset: ulong; Reserved3: ulong; EnclaveConfigurationPointer: uint64; VolatileMetadataPointer: uint64; GuardEHContinuationTable: uint64; GuardEHContinuationCount: uint64; GuardXFGCheckFunctionPointer: uint64; GuardXFGDispatchFunctionPointer: uint64; GuardXFGTableDispatchFunctionPointer: uint64; CastGuardOsDeterminedFailureMode: uint64; GuardMemcpyFunctionPointer: uint64; }
export type s__IMAGE_HOT_PATCH_INFO = struct { Version: ulong; Size: ulong; SequenceNumber: ulong; BaseImageList: ulong; BaseImageCount: ulong; BufferOffset: ulong; ExtraPatchSize: ulong; }
export type s__IMAGE_HOT_PATCH_BASE = struct { SequenceNumber: ulong; Flags: ulong; OriginalTimeDateStamp: ulong; OriginalCheckSum: ulong; CodeIntegrityInfo: ulong; CodeIntegritySize: ulong; PatchTable: ulong; BufferOffset: ulong; }
export type s__IMAGE_HOT_PATCH_HASHES = struct { SHA256: [32; uint8]; SHA1: [20; uint8]; }
export type s__IMAGE_CE_RUNTIME_FUNCTION_ENTRY = struct { FuncStart: ulong; #bits(8) PrologLen: ulong; #bits(22) FuncLen: ulong; #bits(1) ThirtyTwoBit: ulong; #bits(1) ExceptionFlag: ulong; }
export type s__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: ulong; struct #union { UnwindData: ulong; struct { #bits(2) Flag: ulong; #bits(11) FunctionLength: ulong; #bits(2) Ret: ulong; #bits(1) H: ulong; #bits(3) Reg: ulong; #bits(1) R: ulong; #bits(1) L: ulong; #bits(1) C: ulong; #bits(10) StackAdjust: ulong; }; }; }
export type e_ARM64_FNPDATA_FLAGS = enum { PdataRefToFullXdata; PdataPackedUnwindFunction = 1; PdataPackedUnwindFragment = 2; }
export type e_ARM64_FNPDATA_CR = enum { PdataCrUnchained; PdataCrUnchainedSavedLr = 1; PdataCrChainedWithPac = 2; PdataCrChained = 3; }
export type s__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: ulong; struct #union { UnwindData: ulong; struct { #bits(2) Flag: ulong; #bits(11) FunctionLength: ulong; #bits(3) RegF: ulong; #bits(4) RegI: ulong; #bits(1) H: ulong; #bits(2) CR: ulong; #bits(9) FrameSize: ulong; }; }; }
export type u_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA = struct #union { HeaderData: ulong; struct { #bits(18) FunctionLength: ulong; #bits(2) Version: ulong; #bits(1) ExceptionDataPresent: ulong; #bits(1) EpilogInHeader: ulong; #bits(5) EpilogCount: ulong; #bits(5) CodeWords: ulong; }; }
export type s__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: uint64; EndAddress: uint64; ExceptionHandler: uint64; HandlerData: uint64; PrologEndAddress: uint64; }
export type s__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: ulong; EndAddress: ulong; ExceptionHandler: ulong; HandlerData: ulong; PrologEndAddress: ulong; }
export type s__IMAGE_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: ulong; EndAddress: ulong; struct #union { UnwindInfoAddress: ulong; UnwindData: ulong; }; }
export type s__IMAGE_ENCLAVE_CONFIG32 = struct { Size: ulong; MinimumRequiredConfigSize: ulong; PolicyFlags: ulong; NumberOfImports: ulong; ImportList: ulong; ImportEntrySize: ulong; FamilyID: [16; uint8]; ImageID: [16; uint8]; ImageVersion: ulong; SecurityVersion: ulong; EnclaveSize: ulong; NumberOfThreads: ulong; EnclaveFlags: ulong; }
export type s__IMAGE_ENCLAVE_CONFIG64 = struct { Size: ulong; MinimumRequiredConfigSize: ulong; PolicyFlags: ulong; NumberOfImports: ulong; ImportList: ulong; ImportEntrySize: ulong; FamilyID: [16; uint8]; ImageID: [16; uint8]; ImageVersion: ulong; SecurityVersion: ulong; EnclaveSize: uint64; NumberOfThreads: ulong; EnclaveFlags: ulong; }
export type s__IMAGE_ENCLAVE_IMPORT = struct { MatchType: ulong; MinimumSecurityVersion: ulong; UniqueOrAuthorID: [32; uint8]; FamilyID: [16; uint8]; ImageID: [16; uint8]; ImportName: ulong; Reserved: ulong; }
export type s__IMAGE_DEBUG_DIRECTORY = struct { Characteristics: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; Type: ulong; SizeOfData: ulong; AddressOfRawData: ulong; PointerToRawData: ulong; }
export type s__IMAGE_COFF_SYMBOLS_HEADER = struct { NumberOfSymbols: ulong; LvaToFirstSymbol: ulong; NumberOfLinenumbers: ulong; LvaToFirstLinenumber: ulong; RvaToFirstByteOfCode: ulong; RvaToLastByteOfCode: ulong; RvaToFirstByteOfData: ulong; RvaToLastByteOfData: ulong; }
export type s__FPO_DATA = struct { ulOffStart: ulong; cbProcSize: ulong; cdwLocals: ulong; cdwParams: ushort; #bits(8) cbProlog: ushort; #bits(3) cbRegs: ushort; #bits(1) fHasSEH: ushort; #bits(1) fUseBP: ushort; #bits(1) reserved: ushort; #bits(2) cbFrame: ushort; }
export type s__IMAGE_DEBUG_MISC = struct { DataType: ulong; Length: ulong; Unicode: uint8; Reserved: [3; uint8]; Data: [1; uint8]; }
export type s__IMAGE_FUNCTION_ENTRY = struct { StartingAddress: ulong; EndingAddress: ulong; EndOfPrologue: ulong; }
export type s__IMAGE_FUNCTION_ENTRY64 = struct { StartingAddress: uint64; EndingAddress: uint64; struct #union { EndOfPrologue: uint64; UnwindInfoAddress: uint64; }; }
export type s__IMAGE_SEPARATE_DEBUG_HEADER = struct { Signature: ushort; Flags: ushort; Machine: ushort; Characteristics: ushort; TimeDateStamp: ulong; CheckSum: ulong; ImageBase: ulong; SizeOfImage: ulong; NumberOfSections: ulong; ExportedNamesSize: ulong; DebugDirectorySize: ulong; SectionAlignment: ulong; Reserved: [2; ulong]; }
export type s__NON_PAGED_DEBUG_INFO = struct { Signature: ushort; Flags: ushort; Size: ulong; Machine: ushort; Characteristics: ushort; TimeDateStamp: ulong; CheckSum: ulong; SizeOfImage: ulong; ImageBase: uint64; }
export type s__ImageArchitectureHeader = struct { #bits(1) AmaskValue: uint; #bits(7) _1: int; #bits(8) AmaskShift: uint; #bits(16) _3: int; FirstEntryRVA: ulong; }
export type s__ImageArchitectureEntry = struct { FixupInstRVA: ulong; NewInst: ulong; }
export type s_IMPORT_OBJECT_HEADER = struct { Sig1: ushort; Sig2: ushort; Version: ushort; Machine: ushort; TimeDateStamp: ulong; SizeOfData: ulong; struct #union { Ordinal: ushort; Hint: ushort; }; #bits(2) Type: ushort; #bits(3) NameType: ushort; #bits(11) Reserved: ushort; }
export type e_IMPORT_OBJECT_TYPE = enum { IMPORT_OBJECT_CODE; IMPORT_OBJECT_DATA = 1; IMPORT_OBJECT_CONST = 2; }
export type e_IMPORT_OBJECT_NAME_TYPE = enum { IMPORT_OBJECT_ORDINAL; IMPORT_OBJECT_NAME = 1; IMPORT_OBJECT_NAME_NO_PREFIX = 2; IMPORT_OBJECT_NAME_UNDECORATE = 3; IMPORT_OBJECT_NAME_EXPORTAS = 4; }
export type e_ReplacesCorHdrNumericDefines = enum { COMIMAGE_FLAGS_ILONLY = 1; COMIMAGE_FLAGS_32BITREQUIRED = 2; COMIMAGE_FLAGS_IL_LIBRARY = 4; COMIMAGE_FLAGS_STRONGNAMESIGNED = 8; COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16; COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536; COMIMAGE_FLAGS_32BITPREFERRED = 131072; COR_VERSION_MAJOR_V2 = 2; COR_VERSION_MAJOR = 2; COR_VERSION_MINOR = 5; COR_DELETED_NAME_LENGTH = 8; COR_VTABLEGAP_NAME_LENGTH = 8; NATIVE_TYPE_MAX_CB = 1; COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255; IMAGE_COR_MIH_METHODRVA = 1; IMAGE_COR_MIH_EHRVA = 2; IMAGE_COR_MIH_BASICBLOCK = 8; COR_VTABLE_32BIT = 1; COR_VTABLE_64BIT = 2; COR_VTABLE_FROM_UNMANAGED = 4; COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8; COR_VTABLE_CALL_MOST_DERIVED = 16; IMAGE_COR_EATJ_THUNK_SIZE = 32; MAX_CLASS_NAME = 1024; MAX_PACKAGE_NAME = 1024; }
export type s_IMAGE_COR20_HEADER = struct { cb: ulong; MajorRuntimeVersion: ushort; MinorRuntimeVersion: ushort; MetaData: s__IMAGE_DATA_DIRECTORY; Flags: ulong; struct #union { EntryPointToken: ulong; EntryPointRVA: ulong; }; Resources: s__IMAGE_DATA_DIRECTORY; StrongNameSignature: s__IMAGE_DATA_DIRECTORY; CodeManagerTable: s__IMAGE_DATA_DIRECTORY; VTableFixups: s__IMAGE_DATA_DIRECTORY; ExportAddressTableJumps: s__IMAGE_DATA_DIRECTORY; ManagedNativeHeader: s__IMAGE_DATA_DIRECTORY; }
export type s__UNWIND_HISTORY_TABLE_ENTRY = struct { ImageBase: uint64; FunctionEntry: *s__IMAGE_RUNTIME_FUNCTION_ENTRY; }
export type s__UNWIND_HISTORY_TABLE = struct { Count: ulong; LocalHint: uint8; GlobalHint: uint8; Search: uint8; Once: uint8; LowAddress: uint64; HighAddress: uint64; Entry: [12; s__UNWIND_HISTORY_TABLE_ENTRY]; }
export type s__SLIST_ENTRY
export type s__SLIST_ENTRY = struct { Next: *s__SLIST_ENTRY; }
export type u__SLIST_HEADER = struct #union { struct { Alignment: uint64; Region: uint64; }; HeaderX64: struct { #bits(16) Depth: uint64; #bits(48) Sequence: uint64; #bits(4) Reserved: uint64; #bits(60) NextEntry: uint64; }; }
export type u__RTL_RUN_ONCE = struct #union { Ptr: *; }
export type s__RTL_BARRIER = struct { Reserved1: ulong; Reserved2: ulong; Reserved3: [2; uint64]; Reserved4: ulong; Reserved5: ulong; }
export type s__MESSAGE_RESOURCE_ENTRY = struct { Length: ushort; Flags: ushort; Text: [1; uint8]; }
export type s__MESSAGE_RESOURCE_BLOCK = struct { LowId: ulong; HighId: ulong; OffsetToEntries: ulong; }
export type s__MESSAGE_RESOURCE_DATA = struct { NumberOfBlocks: ulong; Blocks: [1; s__MESSAGE_RESOURCE_BLOCK]; }
export type s__OSVERSIONINFOA = struct { dwOSVersionInfoSize: ulong; dwMajorVersion: ulong; dwMinorVersion: ulong; dwBuildNumber: ulong; dwPlatformId: ulong; szCSDVersion: [128; char]; }
export type s__OSVERSIONINFOW = struct { dwOSVersionInfoSize: ulong; dwMajorVersion: ulong; dwMinorVersion: ulong; dwBuildNumber: ulong; dwPlatformId: ulong; szCSDVersion: [128; ushort]; }
export type s__OSVERSIONINFOEXA = struct { dwOSVersionInfoSize: ulong; dwMajorVersion: ulong; dwMinorVersion: ulong; dwBuildNumber: ulong; dwPlatformId: ulong; szCSDVersion: [128; char]; wServicePackMajor: ushort; wServicePackMinor: ushort; wSuiteMask: ushort; wProductType: uint8; wReserved: uint8; }
export type s__OSVERSIONINFOEXW = struct { dwOSVersionInfoSize: ulong; dwMajorVersion: ulong; dwMinorVersion: ulong; dwBuildNumber: ulong; dwPlatformId: ulong; szCSDVersion: [128; ushort]; wServicePackMajor: ushort; wServicePackMinor: ushort; wSuiteMask: ushort; wProductType: uint8; wReserved: uint8; }
export type e__RTL_UMS_THREAD_INFO_CLASS = enum { UmsThreadInvalidInfoClass; UmsThreadUserContext = 1; UmsThreadPriority = 2; UmsThreadAffinity = 3; UmsThreadTeb = 4; UmsThreadIsSuspended = 5; UmsThreadIsTerminated = 6; UmsThreadMaxInfoClass = 7; }
export type e__RTL_UMS_SCHEDULER_REASON = enum { UmsSchedulerStartup; UmsSchedulerThreadBlocked = 1; UmsSchedulerThreadYield = 2; }
export type e__OS_DEPLOYEMENT_STATE_VALUES = enum { OS_DEPLOYMENT_STANDARD = 1; OS_DEPLOYMENT_COMPACT = 2; }
export type s__NV_MEMORY_RANGE = struct { BaseAddress: *; Length: uint64; }
export type s_CORRELATION_VECTOR = struct { Version: char; Vector: [129; char]; }
export type s__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = struct { Size: ulong; TriggerId: *ushort; }
export type e__IMAGE_POLICY_ENTRY_TYPE = enum { ImagePolicyEntryTypeNone; ImagePolicyEntryTypeBool = 1; ImagePolicyEntryTypeInt8 = 2; ImagePolicyEntryTypeUInt8 = 3; ImagePolicyEntryTypeInt16 = 4; ImagePolicyEntryTypeUInt16 = 5; ImagePolicyEntryTypeInt32 = 6; ImagePolicyEntryTypeUInt32 = 7; ImagePolicyEntryTypeInt64 = 8; ImagePolicyEntryTypeUInt64 = 9; ImagePolicyEntryTypeAnsiString = 10; ImagePolicyEntryTypeUnicodeString = 11; ImagePolicyEntryTypeOverride = 12; ImagePolicyEntryTypeMaximum = 13; }
export type e__IMAGE_POLICY_ID = enum { ImagePolicyIdNone; ImagePolicyIdEtw = 1; ImagePolicyIdDebug = 2; ImagePolicyIdCrashDump = 3; ImagePolicyIdCrashDumpKey = 4; ImagePolicyIdCrashDumpKeyGuid = 5; ImagePolicyIdParentSd = 6; ImagePolicyIdParentSdRev = 7; ImagePolicyIdSvn = 8; ImagePolicyIdDeviceId = 9; ImagePolicyIdCapability = 10; ImagePolicyIdScenarioId = 11; ImagePolicyIdMaximum = 12; }
export type s__IMAGE_POLICY_ENTRY = struct { Type: e__IMAGE_POLICY_ENTRY_TYPE; PolicyId: e__IMAGE_POLICY_ID; u: struct #union { None: *; BoolValue: uint8; Int8Value: char; UInt8Value: uint8; Int16Value: short; UInt16Value: ushort; Int32Value: int; UInt32Value: uint; Int64Value: int64; UInt64Value: uint64; AnsiStringValue: *char; UnicodeStringValue: *ushort; }; }
export type s__IMAGE_POLICY_METADATA = struct { Version: uint8; Reserved0: [7; uint8]; ApplicationId: uint64; Policies: *s__IMAGE_POLICY_ENTRY; }
export type e__RTL_SYSTEM_GLOBAL_DATA_ID = enum { GlobalDataIdUnknown; GlobalDataIdRngSeedVersion = 1; GlobalDataIdInterruptTime = 2; GlobalDataIdTimeZoneBias = 3; GlobalDataIdImageNumberLow = 4; GlobalDataIdImageNumberHigh = 5; GlobalDataIdTimeZoneId = 6; GlobalDataIdNtMajorVersion = 7; GlobalDataIdNtMinorVersion = 8; GlobalDataIdSystemExpirationDate = 9; GlobalDataIdKdDebuggerEnabled = 10; GlobalDataIdCyclesPerYield = 11; GlobalDataIdSafeBootMode = 12; GlobalDataIdLastSystemRITEventTickCount = 13; GlobalDataIdConsoleSharedDataFlags = 14; GlobalDataIdNtSystemRootDrive = 15; GlobalDataIdQpcShift = 16; GlobalDataIdQpcBypassEnabled = 17; GlobalDataIdQpcData = 18; GlobalDataIdQpcBias = 19; }
export type s__RTL_CRITICAL_SECTION
export type s__RTL_CRITICAL_SECTION_DEBUG = struct { Type: ushort; CreatorBackTraceIndex: ushort; CriticalSection: *s__RTL_CRITICAL_SECTION; ProcessLocksList: s__LIST_ENTRY; EntryCount: ulong; ContentionCount: ulong; Flags: ulong; CreatorBackTraceIndexHigh: ushort; Identifier: ushort; }
export type s__RTL_CRITICAL_SECTION = struct { DebugInfo: *s__RTL_CRITICAL_SECTION_DEBUG; LockCount: long; RecursionCount: long; OwningThread: *; LockSemaphore: *; SpinCount: uint64; }
export type s__RTL_SRWLOCK = struct { Ptr: *; }
export type s__RTL_CONDITION_VARIABLE = struct { Ptr: *; }
export type e__HEAP_INFORMATION_CLASS = enum { HeapCompatibilityInformation; HeapEnableTerminationOnCorruption = 1; HeapOptimizeResources = 3; HeapTag = 7; }
export type s__HEAP_OPTIMIZE_RESOURCES_INFORMATION = struct { Version: ulong; Flags: ulong; }
export type e__ACTIVATION_CONTEXT_INFO_CLASS = enum { ActivationContextBasicInformation = 1; ActivationContextDetailedInformation = 2; AssemblyDetailedInformationInActivationContext = 3; FileInformationInAssemblyOfAssemblyInActivationContext = 4; RunlevelInformationInActivationContext = 5; CompatibilityInformationInActivationContext = 6; ActivationContextManifestResourceName = 7; MaxActivationContextInfoClass = 8; AssemblyDetailedInformationInActivationContxt = 3; FileInformationInAssemblyOfAssemblyInActivationContxt = 4; }
export type s__ACTIVATION_CONTEXT_QUERY_INDEX = struct { ulAssemblyIndex: ulong; ulFileIndexInAssembly: ulong; }
export type s__ASSEMBLY_FILE_DETAILED_INFORMATION = struct { ulFlags: ulong; ulFilenameLength: ulong; ulPathLength: ulong; lpFileName: *ushort; lpFilePath: *ushort; }
export type s__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = struct { ulFlags: ulong; ulEncodedAssemblyIdentityLength: ulong; ulManifestPathType: ulong; ulManifestPathLength: ulong; liManifestLastWriteTime: u__LARGE_INTEGER; ulPolicyPathType: ulong; ulPolicyPathLength: ulong; liPolicyLastWriteTime: u__LARGE_INTEGER; ulMetadataSatelliteRosterIndex: ulong; ulManifestVersionMajor: ulong; ulManifestVersionMinor: ulong; ulPolicyVersionMajor: ulong; ulPolicyVersionMinor: ulong; ulAssemblyDirectoryNameLength: ulong; lpAssemblyEncodedAssemblyIdentity: *ushort; lpAssemblyManifestPath: *ushort; lpAssemblyPolicyPath: *ushort; lpAssemblyDirectoryName: *ushort; ulFileCount: ulong; }
export type e_ACTCTX_REQUESTED_RUN_LEVEL = enum { ACTCTX_RUN_LEVEL_UNSPECIFIED; ACTCTX_RUN_LEVEL_AS_INVOKER = 1; ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2; ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3; ACTCTX_RUN_LEVEL_NUMBERS = 4; }
export type s__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = struct { ulFlags: ulong; RunLevel: e_ACTCTX_REQUESTED_RUN_LEVEL; UiAccess: ulong; }
export type e_ACTCTX_COMPATIBILITY_ELEMENT_TYPE = enum { ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN; ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1; ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2; ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3; }
export type s__COMPATIBILITY_CONTEXT_ELEMENT = struct { Id: s__GUID; Type: e_ACTCTX_COMPATIBILITY_ELEMENT_TYPE; MaxVersionTested: uint64; }
export type s__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = struct { ElementCount: ulong; Elements: *s__COMPATIBILITY_CONTEXT_ELEMENT; }
export type s__SUPPORTED_OS_INFO = struct { MajorVersion: ushort; MinorVersion: ushort; }
export type s__MAXVERSIONTESTED_INFO = struct { MaxVersionTested: uint64; }
export type s__ACTIVATION_CONTEXT_DETAILED_INFORMATION = struct { dwFlags: ulong; ulFormatVersion: ulong; ulAssemblyCount: ulong; ulRootManifestPathType: ulong; ulRootManifestPathChars: ulong; ulRootConfigurationPathType: ulong; ulRootConfigurationPathChars: ulong; ulAppDirPathType: ulong; ulAppDirPathChars: ulong; lpRootManifestPath: *ushort; lpRootConfigurationPath: *ushort; lpAppDirPath: *ushort; }
export type s__HARDWARE_COUNTER_DATA = struct { Type: e__HARDWARE_COUNTER_TYPE; Reserved: ulong; Value: uint64; }
export type s__PERFORMANCE_DATA = struct { Size: ushort; Version: uint8; HwCountersCount: uint8; ContextSwitchCount: ulong; WaitReasonBitMap: uint64; CycleTime: uint64; RetryCount: ulong; Reserved: ulong; HwCounters: [16; s__HARDWARE_COUNTER_DATA]; }
export type s__EVENTLOGRECORD = struct { Length: ulong; Reserved: ulong; RecordNumber: ulong; TimeGenerated: ulong; TimeWritten: ulong; EventID: ulong; EventType: ushort; NumStrings: ushort; EventCategory: ushort; ReservedFlags: ushort; ClosingRecordNumber: ulong; StringOffset: ulong; UserSidLength: ulong; UserSidOffset: ulong; DataLength: ulong; DataOffset: ulong; }
export type s__EVENTSFORLOGFILE
export type s__PACKEDEVENTINFO
export type e__CM_SERVICE_NODE_TYPE = enum { DriverType = 1; FileSystemType = 2; Win32ServiceOwnProcess = 16; Win32ServiceShareProcess = 32; AdapterType = 4; RecognizerType = 8; }
export type e__CM_SERVICE_LOAD_TYPE = enum { BootLoad; SystemLoad = 1; AutoLoad = 2; DemandLoad = 3; DisableLoad = 4; }
export type e__CM_ERROR_CONTROL_TYPE = enum { IgnoreError; NormalError = 1; SevereError = 2; CriticalError = 3; }
export type s__TAPE_ERASE = struct { Type: ulong; Immediate: uint8; }
export type s__TAPE_PREPARE = struct { Operation: ulong; Immediate: uint8; }
export type s__TAPE_WRITE_MARKS = struct { Type: ulong; Count: ulong; Immediate: uint8; }
export type s__TAPE_GET_POSITION = struct { Type: ulong; Partition: ulong; Offset: u__LARGE_INTEGER; }
export type s__TAPE_SET_POSITION = struct { Method: ulong; Partition: ulong; Offset: u__LARGE_INTEGER; Immediate: uint8; }
export type s__TAPE_GET_DRIVE_PARAMETERS = struct { ECC: uint8; Compression: uint8; DataPadding: uint8; ReportSetmarks: uint8; DefaultBlockSize: ulong; MaximumBlockSize: ulong; MinimumBlockSize: ulong; MaximumPartitionCount: ulong; FeaturesLow: ulong; FeaturesHigh: ulong; EOTWarningZoneSize: ulong; }
export type s__TAPE_SET_DRIVE_PARAMETERS = struct { ECC: uint8; Compression: uint8; DataPadding: uint8; ReportSetmarks: uint8; EOTWarningZoneSize: ulong; }
export type s__TAPE_GET_MEDIA_PARAMETERS = struct { Capacity: u__LARGE_INTEGER; Remaining: u__LARGE_INTEGER; BlockSize: ulong; PartitionCount: ulong; WriteProtected: uint8; }
export type s__TAPE_SET_MEDIA_PARAMETERS = struct { BlockSize: ulong; }
export type s__TAPE_CREATE_PARTITION = struct { Method: ulong; Count: ulong; Size: ulong; }
export type s__TAPE_WMI_OPERATIONS = struct { Method: ulong; DataBufferSize: ulong; DataBuffer: *; }
export type e__TAPE_DRIVE_PROBLEM_TYPE = enum { TapeDriveProblemNone; TapeDriveReadWriteWarning = 1; TapeDriveReadWriteError = 2; TapeDriveReadWarning = 3; TapeDriveWriteWarning = 4; TapeDriveReadError = 5; TapeDriveWriteError = 6; TapeDriveHardwareError = 7; TapeDriveUnsupportedMedia = 8; TapeDriveScsiConnectionError = 9; TapeDriveTimetoClean = 10; TapeDriveCleanDriveNow = 11; TapeDriveMediaLifeExpired = 12; TapeDriveSnappedTape = 13; }
export type s__TRANSACTION_NOTIFICATION = struct { TransactionKey: *; TransactionNotification: ulong; TmVirtualClock: u__LARGE_INTEGER; ArgumentLength: ulong; }
export type s__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = struct { EnlistmentId: s__GUID; UOW: s__GUID; }
export type s__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = struct { TmIdentity: s__GUID; Flags: ulong; }
export type s__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = struct { SavepointId: ulong; }
export type s__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = struct { PropagationCookie: ulong; UOW: s__GUID; TmIdentity: s__GUID; BufferLength: ulong; }
export type s__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = struct { MarshalCookie: ulong; UOW: s__GUID; }
export type s__KCRM_MARSHAL_HEADER = struct { VersionMajor: ulong; VersionMinor: ulong; NumProtocols: ulong; Unused: ulong; }
export type s__KCRM_TRANSACTION_BLOB = struct { UOW: s__GUID; TmIdentity: s__GUID; IsolationLevel: ulong; IsolationFlags: ulong; Timeout: ulong; Description: [64; ushort]; }
export type s__KCRM_PROTOCOL_BLOB = struct { ProtocolId: s__GUID; StaticInfoLength: ulong; TransactionIdInfoLength: ulong; Unused1: ulong; Unused2: ulong; }
export type e__TRANSACTION_OUTCOME = enum { TransactionOutcomeUndetermined = 1; TransactionOutcomeCommitted = 2; TransactionOutcomeAborted = 3; }
export type e__TRANSACTION_STATE = enum { TransactionStateNormal = 1; TransactionStateIndoubt = 2; TransactionStateCommittedNotify = 3; }
export type s__TRANSACTION_BASIC_INFORMATION = struct { TransactionId: s__GUID; State: ulong; Outcome: ulong; }
export type s__TRANSACTIONMANAGER_BASIC_INFORMATION = struct { TmIdentity: s__GUID; VirtualClock: u__LARGE_INTEGER; }
export type s__TRANSACTIONMANAGER_LOG_INFORMATION = struct { LogIdentity: s__GUID; }
export type s__TRANSACTIONMANAGER_LOGPATH_INFORMATION = struct { LogPathLength: ulong; LogPath: [1; ushort]; }
export type s__TRANSACTIONMANAGER_RECOVERY_INFORMATION = struct { LastRecoveredLsn: uint64; }
export type s__TRANSACTIONMANAGER_OLDEST_INFORMATION = struct { OldestTransactionGuid: s__GUID; }
export type s__TRANSACTION_PROPERTIES_INFORMATION = struct { IsolationLevel: ulong; IsolationFlags: ulong; Timeout: u__LARGE_INTEGER; Outcome: ulong; DescriptionLength: ulong; Description: [1; ushort]; }
export type s__TRANSACTION_BIND_INFORMATION = struct { TmHandle: *; }
export type s__TRANSACTION_ENLISTMENT_PAIR = struct { EnlistmentId: s__GUID; ResourceManagerId: s__GUID; }
export type s__TRANSACTION_ENLISTMENTS_INFORMATION = struct { NumberOfEnlistments: ulong; EnlistmentPair: [1; s__TRANSACTION_ENLISTMENT_PAIR]; }
export type s__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = struct { SuperiorEnlistmentPair: s__TRANSACTION_ENLISTMENT_PAIR; }
export type s__RESOURCEMANAGER_BASIC_INFORMATION = struct { ResourceManagerId: s__GUID; DescriptionLength: ulong; Description: [1; ushort]; }
export type s__RESOURCEMANAGER_COMPLETION_INFORMATION = struct { IoCompletionPortHandle: *; CompletionKey: uint64; }
export type e__TRANSACTION_INFORMATION_CLASS = enum { TransactionBasicInformation; TransactionPropertiesInformation = 1; TransactionEnlistmentInformation = 2; TransactionSuperiorEnlistmentInformation = 3; TransactionBindInformation = 4; TransactionDTCPrivateInformation = 5; }
export type e__TRANSACTIONMANAGER_INFORMATION_CLASS = enum { TransactionManagerBasicInformation; TransactionManagerLogInformation = 1; TransactionManagerLogPathInformation = 2; TransactionManagerRecoveryInformation = 4; TransactionManagerOnlineProbeInformation = 3; TransactionManagerOldestTransactionInformation = 5; }
export type e__RESOURCEMANAGER_INFORMATION_CLASS = enum { ResourceManagerBasicInformation; ResourceManagerCompletionInformation = 1; }
export type s__ENLISTMENT_BASIC_INFORMATION = struct { EnlistmentId: s__GUID; TransactionId: s__GUID; ResourceManagerId: s__GUID; }
export type s__ENLISTMENT_CRM_INFORMATION = struct { CrmTransactionManagerId: s__GUID; CrmResourceManagerId: s__GUID; CrmEnlistmentId: s__GUID; }
export type e__ENLISTMENT_INFORMATION_CLASS = enum { EnlistmentBasicInformation; EnlistmentRecoveryInformation = 1; EnlistmentCrmInformation = 2; }
export type s__TRANSACTION_LIST_ENTRY = struct { UOW: s__GUID; }
export type s__TRANSACTION_LIST_INFORMATION = struct { NumberOfTransactions: ulong; TransactionInformation: [1; s__TRANSACTION_LIST_ENTRY]; }
export type e__KTMOBJECT_TYPE = enum { KTMOBJECT_TRANSACTION; KTMOBJECT_TRANSACTION_MANAGER = 1; KTMOBJECT_RESOURCE_MANAGER = 2; KTMOBJECT_ENLISTMENT = 3; KTMOBJECT_INVALID = 4; }
export type s__KTMOBJECT_CURSOR = struct { LastQuery: s__GUID; ObjectIdCount: ulong; ObjectIds: [1; s__GUID]; }
export type s__TP_CALLBACK_INSTANCE
export type s__TP_POOL
export type e__TP_CALLBACK_PRIORITY = enum { TP_CALLBACK_PRIORITY_HIGH; TP_CALLBACK_PRIORITY_NORMAL = 1; TP_CALLBACK_PRIORITY_LOW = 2; TP_CALLBACK_PRIORITY_INVALID = 3; TP_CALLBACK_PRIORITY_COUNT = 3; }
export type s__TP_POOL_STACK_INFORMATION = struct { StackReserve: uint64; StackCommit: uint64; }
export type s__TP_CLEANUP_GROUP
export type s__ACTIVATION_CONTEXT
export type s__TP_CALLBACK_ENVIRON_V3 = struct { Version: ulong; Pool: *s__TP_POOL; CleanupGroup: *s__TP_CLEANUP_GROUP; CleanupGroupCancelCallback: def (*, *) -> (); RaceDll: *; ActivationContext: *s__ACTIVATION_CONTEXT; FinalizationCallback: def (*s__TP_CALLBACK_INSTANCE, *) -> (); u: struct #union { Flags: ulong; s: struct { #bits(1) LongFunction: ulong; #bits(1) Persistent: ulong; #bits(30) Private: ulong; }; }; CallbackPriority: e__TP_CALLBACK_PRIORITY; Size: ulong; }
export type s__TP_WORK
export type s__TP_TIMER
export type s__TP_WAIT
export type s__TP_IO
export type s_HKEY__
export type s_HMETAFILE__
export type s_HINSTANCE__
export type s_HRGN__
export type s_HRSRC__
export type s_HSPRITE__
export type s_HLSURF__
export type s_HSTR__
export type s_HTASK__
export type s_HWINSTA__
export type s_HKL__
export type s__FILETIME = struct { dwLowDateTime: ulong; dwHighDateTime: ulong; }
export type s_HWND__
export type s_HHOOK__
export type s_HACCEL__
export type s_HBITMAP__
export type s_HBRUSH__
export type s_HCOLORSPACE__
export type s_HDC__
export type s_HGLRC__
export type s_HDESK__
export type s_HENHMETAFILE__
export type s_HFONT__
export type s_HICON__
export type s_HMENU__
export type s_HPALETTE__
export type s_HPEN__
export type s_HWINEVENTHOOK__
export type s_HMONITOR__
export type s_HUMPD__
export type s_tagRECT = struct { left: long; top: long; right: long; bottom: long; }
export type s__RECTL = struct { left: long; top: long; right: long; bottom: long; }
export type s_tagPOINT = struct { x: long; y: long; }
export type s__POINTL = struct { x: long; y: long; }
export type s_tagSIZE = struct { cx: long; cy: long; }
export type s_tagPOINTS = struct { x: short; y: short; }
export type s_APP_LOCAL_DEVICE_ID = struct { value: [32; uint8]; }
export type s_DPI_AWARENESS_CONTEXT__
export type e_DPI_AWARENESS = enum { DPI_AWARENESS_INVALID = -1; DPI_AWARENESS_UNAWARE; DPI_AWARENESS_SYSTEM_AWARE = 1; DPI_AWARENESS_PER_MONITOR_AWARE = 2; }
export type e_DPI_HOSTING_BEHAVIOR = enum { DPI_HOSTING_BEHAVIOR_INVALID = -1; DPI_HOSTING_BEHAVIOR_DEFAULT; DPI_HOSTING_BEHAVIOR_MIXED = 1; }
export type s__SECURITY_ATTRIBUTES = struct { nLength: ulong; lpSecurityDescriptor: *; bInheritHandle: int; }
export type s__OVERLAPPED = struct { Internal: uint64; InternalHigh: uint64; struct #union { struct { Offset: ulong; OffsetHigh: ulong; }; Pointer: *; }; hEvent: *; }
export type s__OVERLAPPED_ENTRY = struct { lpCompletionKey: uint64; lpOverlapped: *s__OVERLAPPED; Internal: uint64; dwNumberOfBytesTransferred: ulong; }
export type s__SYSTEMTIME = struct { wYear: ushort; wMonth: ushort; wDayOfWeek: ushort; wDay: ushort; wHour: ushort; wMinute: ushort; wSecond: ushort; wMilliseconds: ushort; }
export type s__WIN32_FIND_DATAA = struct { dwFileAttributes: ulong; ftCreationTime: s__FILETIME; ftLastAccessTime: s__FILETIME; ftLastWriteTime: s__FILETIME; nFileSizeHigh: ulong; nFileSizeLow: ulong; dwReserved0: ulong; dwReserved1: ulong; cFileName: [260; char]; cAlternateFileName: [14; char]; }
export type s__WIN32_FIND_DATAW = struct { dwFileAttributes: ulong; ftCreationTime: s__FILETIME; ftLastAccessTime: s__FILETIME; ftLastWriteTime: s__FILETIME; nFileSizeHigh: ulong; nFileSizeLow: ulong; dwReserved0: ulong; dwReserved1: ulong; cFileName: [260; ushort]; cAlternateFileName: [14; ushort]; }
export type e__FINDEX_INFO_LEVELS = enum { FindExInfoStandard; FindExInfoBasic = 1; FindExInfoMaxInfoLevel = 2; }
export type e__FINDEX_SEARCH_OPS = enum { FindExSearchNameMatch; FindExSearchLimitToDirectories = 1; FindExSearchLimitToDevices = 2; FindExSearchMaxSearchOp = 3; }
export type e__READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = enum { ReadDirectoryNotifyInformation = 1; ReadDirectoryNotifyExtendedInformation = 2; ReadDirectoryNotifyFullInformation = 3; ReadDirectoryNotifyMaximumInformation = 4; }
export type e__GET_FILEEX_INFO_LEVELS = enum { GetFileExInfoStandard; GetFileExMaxInfoLevel = 1; }
export type e__FILE_INFO_BY_HANDLE_CLASS = enum { FileBasicInfo; FileStandardInfo = 1; FileNameInfo = 2; FileRenameInfo = 3; FileDispositionInfo = 4; FileAllocationInfo = 5; FileEndOfFileInfo = 6; FileStreamInfo = 7; FileCompressionInfo = 8; FileAttributeTagInfo = 9; FileIdBothDirectoryInfo = 10; FileIdBothDirectoryRestartInfo = 11; FileIoPriorityHintInfo = 12; FileRemoteProtocolInfo = 13; FileFullDirectoryInfo = 14; FileFullDirectoryRestartInfo = 15; FileStorageInfo = 16; FileAlignmentInfo = 17; FileIdInfo = 18; FileIdExtdDirectoryInfo = 19; FileIdExtdDirectoryRestartInfo = 20; FileDispositionInfoEx = 21; FileRenameInfoEx = 22; FileCaseSensitiveInfo = 23; FileNormalizedNameInfo = 24; MaximumFileInfoByHandleClass = 25; }
export type s__PROCESS_HEAP_ENTRY = struct { lpData: *; cbData: ulong; cbOverhead: uint8; iRegionIndex: uint8; wFlags: ushort; struct #union { Block: struct { hMem: *; dwReserved: [3; ulong]; }; Region: struct { dwCommittedSize: ulong; dwUnCommittedSize: ulong; lpFirstBlock: *; lpLastBlock: *; }; }; }
export type s__REASON_CONTEXT = struct { Version: ulong; Flags: ulong; Reason: struct #union { Detailed: struct { LocalizedReasonModule: *s_HINSTANCE__; LocalizedReasonId: ulong; ReasonStringCount: ulong; ReasonStrings: **ushort; }; SimpleReasonString: *ushort; }; }
export type s__EXCEPTION_DEBUG_INFO = struct { ExceptionRecord: s__EXCEPTION_RECORD; dwFirstChance: ulong; }
export type s__CREATE_THREAD_DEBUG_INFO = struct { hThread: *; lpThreadLocalBase: *; lpStartAddress: def (*) -> (ulong); }
export type s__CREATE_PROCESS_DEBUG_INFO = struct { hFile: *; hProcess: *; hThread: *; lpBaseOfImage: *; dwDebugInfoFileOffset: ulong; nDebugInfoSize: ulong; lpThreadLocalBase: *; lpStartAddress: def (*) -> (ulong); lpImageName: *; fUnicode: ushort; }
export type s__EXIT_THREAD_DEBUG_INFO = struct { dwExitCode: ulong; }
export type s__EXIT_PROCESS_DEBUG_INFO = struct { dwExitCode: ulong; }
export type s__LOAD_DLL_DEBUG_INFO = struct { hFile: *; lpBaseOfDll: *; dwDebugInfoFileOffset: ulong; nDebugInfoSize: ulong; lpImageName: *; fUnicode: ushort; }
export type s__UNLOAD_DLL_DEBUG_INFO = struct { lpBaseOfDll: *; }
export type s__OUTPUT_DEBUG_STRING_INFO = struct { lpDebugStringData: *char; fUnicode: ushort; nDebugStringLength: ushort; }
export type s__RIP_INFO = struct { dwError: ulong; dwType: ulong; }
export type s__DEBUG_EVENT = struct { dwDebugEventCode: ulong; dwProcessId: ulong; dwThreadId: ulong; u: struct #union { Exception: s__EXCEPTION_DEBUG_INFO; CreateThread: s__CREATE_THREAD_DEBUG_INFO; CreateProcessInfo: s__CREATE_PROCESS_DEBUG_INFO; ExitThread: s__EXIT_THREAD_DEBUG_INFO; ExitProcess: s__EXIT_PROCESS_DEBUG_INFO; LoadDll: s__LOAD_DLL_DEBUG_INFO; UnloadDll: s__UNLOAD_DLL_DEBUG_INFO; DebugString: s__OUTPUT_DEBUG_STRING_INFO; RipInfo: s__RIP_INFO; }; }
export type s_DISK_SPACE_INFORMATION = struct { ActualTotalAllocationUnits: uint64; ActualAvailableAllocationUnits: uint64; ActualPoolUnavailableAllocationUnits: uint64; CallerTotalAllocationUnits: uint64; CallerAvailableAllocationUnits: uint64; CallerPoolUnavailableAllocationUnits: uint64; UsedAllocationUnits: uint64; TotalReservedAllocationUnits: uint64; VolumeStorageReserveAllocationUnits: uint64; AvailableCommittedAllocationUnits: uint64; PoolAvailableAllocationUnits: uint64; SectorsPerAllocationUnit: ulong; BytesPerSector: ulong; }
export type s__WIN32_FILE_ATTRIBUTE_DATA = struct { dwFileAttributes: ulong; ftCreationTime: s__FILETIME; ftLastAccessTime: s__FILETIME; ftLastWriteTime: s__FILETIME; nFileSizeHigh: ulong; nFileSizeLow: ulong; }
export type s__BY_HANDLE_FILE_INFORMATION = struct { dwFileAttributes: ulong; ftCreationTime: s__FILETIME; ftLastAccessTime: s__FILETIME; ftLastWriteTime: s__FILETIME; dwVolumeSerialNumber: ulong; nFileSizeHigh: ulong; nFileSizeLow: ulong; nNumberOfLinks: ulong; nFileIndexHigh: ulong; nFileIndexLow: ulong; }
export type s__CREATEFILE2_EXTENDED_PARAMETERS = struct { dwSize: ulong; dwFileAttributes: ulong; dwFileFlags: ulong; dwSecurityQosFlags: ulong; lpSecurityAttributes: *s__SECURITY_ATTRIBUTES; hTemplateFile: *; }
export type e__STREAM_INFO_LEVELS = enum { FindStreamInfoStandard; FindStreamInfoMaxInfoLevel = 1; }
export type s__WIN32_FIND_STREAM_DATA = struct { StreamSize: u__LARGE_INTEGER; cStreamName: [296; ushort]; }
export type s__HEAP_SUMMARY = struct { cb: ulong; cbAllocated: uint64; cbCommitted: uint64; cbReserved: uint64; cbMaxReserve: uint64; }
export type s__PROCESS_INFORMATION = struct { hProcess: *; hThread: *; dwProcessId: ulong; dwThreadId: ulong; }
export type s__STARTUPINFOA = struct { cb: ulong; lpReserved: *char; lpDesktop: *char; lpTitle: *char; dwX: ulong; dwY: ulong; dwXSize: ulong; dwYSize: ulong; dwXCountChars: ulong; dwYCountChars: ulong; dwFillAttribute: ulong; dwFlags: ulong; wShowWindow: ushort; cbReserved2: ushort; lpReserved2: *uint8; hStdInput: *; hStdOutput: *; hStdError: *; }
export type s__STARTUPINFOW = struct { cb: ulong; lpReserved: *ushort; lpDesktop: *ushort; lpTitle: *ushort; dwX: ulong; dwY: ulong; dwXSize: ulong; dwYSize: ulong; dwXCountChars: ulong; dwYCountChars: ulong; dwFillAttribute: ulong; dwFlags: ulong; wShowWindow: ushort; cbReserved2: ushort; lpReserved2: *uint8; hStdInput: *; hStdOutput: *; hStdError: *; }
export type e__QUEUE_USER_APC_FLAGS = enum { QUEUE_USER_APC_FLAGS_NONE; QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC = 1; QUEUE_USER_APC_CALLBACK_DATA_CONTEXT = 65536; }
export type s__APC_CALLBACK_DATA = struct { Parameter: uint64; ContextRecord: *s__CONTEXT; Reserved0: uint64; Reserved1: uint64; }
export type s__PROC_THREAD_ATTRIBUTE_LIST
export type e__THREAD_INFORMATION_CLASS = enum { ThreadMemoryPriority; ThreadAbsoluteCpuPriority = 1; ThreadDynamicCodePolicy = 2; ThreadPowerThrottling = 3; ThreadInformationClassMax = 4; }
export type s__MEMORY_PRIORITY_INFORMATION = struct { MemoryPriority: ulong; }
export type s__THREAD_POWER_THROTTLING_STATE = struct { Version: ulong; ControlMask: ulong; StateMask: ulong; }
export type e__PROCESS_INFORMATION_CLASS = enum { ProcessMemoryPriority; ProcessMemoryExhaustionInfo = 1; ProcessAppMemoryInfo = 2; ProcessInPrivateInfo = 3; ProcessPowerThrottling = 4; ProcessReservedValue1 = 5; ProcessTelemetryCoverageInfo = 6; ProcessProtectionLevelInfo = 7; ProcessLeapSecondInfo = 8; ProcessMachineTypeInfo = 9; ProcessInformationClassMax = 10; }
export type s__APP_MEMORY_INFORMATION = struct { AvailableCommit: uint64; PrivateCommitUsage: uint64; PeakPrivateCommitUsage: uint64; TotalCommitUsage: uint64; }
export type e__MACHINE_ATTRIBUTES = enum { UserEnabled = 1; KernelEnabled = 2; Wow64Container = 4; }
export type s__PROCESS_MACHINE_INFORMATION = struct { ProcessMachine: ushort; Res0: ushort; MachineAttributes: e__MACHINE_ATTRIBUTES; }
export type e__PROCESS_MEMORY_EXHAUSTION_TYPE = enum { PMETypeFailFastOnCommitFailure; PMETypeMax = 1; }
export type s__PROCESS_MEMORY_EXHAUSTION_INFO = struct { Version: ushort; Reserved: ushort; Type: e__PROCESS_MEMORY_EXHAUSTION_TYPE; Value: uint64; }
export type s__PROCESS_POWER_THROTTLING_STATE = struct { Version: ulong; ControlMask: ulong; StateMask: ulong; }
export type s_PROCESS_PROTECTION_LEVEL_INFORMATION = struct { ProtectionLevel: ulong; }
export type s__PROCESS_LEAP_SECOND_INFO = struct { Flags: ulong; Reserved: ulong; }
export type s__SYSTEM_INFO = struct { struct #union { dwOemId: ulong; struct { wProcessorArchitecture: ushort; wReserved: ushort; }; }; dwPageSize: ulong; lpMinimumApplicationAddress: *; lpMaximumApplicationAddress: *; dwActiveProcessorMask: uint64; dwNumberOfProcessors: ulong; dwProcessorType: ulong; dwAllocationGranularity: ulong; wProcessorLevel: ushort; wProcessorRevision: ushort; }
export type s__MEMORYSTATUSEX = struct { dwLength: ulong; dwMemoryLoad: ulong; ullTotalPhys: uint64; ullAvailPhys: uint64; ullTotalPageFile: uint64; ullAvailPageFile: uint64; ullTotalVirtual: uint64; ullAvailVirtual: uint64; ullAvailExtendedVirtual: uint64; }
export type e__COMPUTER_NAME_FORMAT = enum { ComputerNameNetBIOS; ComputerNameDnsHostname = 1; ComputerNameDnsDomain = 2; ComputerNameDnsFullyQualified = 3; ComputerNamePhysicalNetBIOS = 4; ComputerNamePhysicalDnsHostname = 5; ComputerNamePhysicalDnsDomain = 6; ComputerNamePhysicalDnsFullyQualified = 7; ComputerNameMax = 8; }
export type e__MEMORY_RESOURCE_NOTIFICATION_TYPE = enum { LowMemoryResourceNotification; HighMemoryResourceNotification = 1; }
export type s__WIN32_MEMORY_RANGE_ENTRY = struct { VirtualAddress: *; NumberOfBytes: uint64; }
export type e_OFFER_PRIORITY = enum { VmOfferPriorityVeryLow = 1; VmOfferPriorityLow = 2; VmOfferPriorityBelowNormal = 3; VmOfferPriorityNormal = 4; }
export type e_WIN32_MEMORY_INFORMATION_CLASS = enum { MemoryRegionInfo; }
export type s_WIN32_MEMORY_REGION_INFORMATION = struct { AllocationBase: *; AllocationProtect: ulong; struct #union { Flags: ulong; struct { #bits(1) Private: ulong; #bits(1) MappedDataFile: ulong; #bits(1) MappedImage: ulong; #bits(1) MappedPageFile: ulong; #bits(1) MappedPhysical: ulong; #bits(1) DirectMapped: ulong; #bits(26) Reserved: ulong; }; }; RegionSize: uint64; CommitSize: uint64; }
export type e_WIN32_MEMORY_PARTITION_INFORMATION_CLASS = enum { MemoryPartitionInfo; MemoryPartitionDedicatedMemoryInfo = 1; }
export type s_WIN32_MEMORY_PARTITION_INFORMATION = struct { Flags: ulong; NumaNode: ulong; Channel: ulong; NumberOfNumaNodes: ulong; ResidentAvailablePages: uint64; CommittedPages: uint64; CommitLimit: uint64; PeakCommitment: uint64; TotalNumberOfPages: uint64; AvailablePages: uint64; ZeroPages: uint64; FreePages: uint64; StandbyPages: uint64; Reserved: [16; uint64]; MaximumCommitLimit: uint64; Reserved2: uint64; PartitionId: ulong; }
export type s_JOBOBJECT_IO_RATE_CONTROL_INFORMATION = struct { MaxIops: int64; MaxBandwidth: int64; ReservationIops: int64; VolumeName: *ushort; BaseIoSize: ulong; ControlFlags: ulong; }
export type s_tagENUMUILANG = struct { NumOfEnumUILang: ulong; SizeOfEnumUIBuffer: ulong; pEnumUIBuffer: *ushort; }
export type s__REDIRECTION_FUNCTION_DESCRIPTOR = struct { DllName: *char; FunctionName: *char; RedirectionTarget: *; }
export type s__REDIRECTION_DESCRIPTOR = struct { Version: ulong; FunctionCount: ulong; Redirections: *s__REDIRECTION_FUNCTION_DESCRIPTOR; }
export type e_FILE_WRITE_FLAGS = enum { FILE_WRITE_FLAGS_NONE; FILE_WRITE_FLAGS_WRITE_THROUGH = 1; }
export type e_FILE_FLUSH_MODE = enum { FILE_FLUSH_DEFAULT; FILE_FLUSH_DATA = 1; FILE_FLUSH_MIN_METADATA = 2; FILE_FLUSH_NO_SYNC = 3; }
export type s__COMMPROP = struct { wPacketLength: ushort; wPacketVersion: ushort; dwServiceMask: ulong; dwReserved1: ulong; dwMaxTxQueue: ulong; dwMaxRxQueue: ulong; dwMaxBaud: ulong; dwProvSubType: ulong; dwProvCapabilities: ulong; dwSettableParams: ulong; dwSettableBaud: ulong; wSettableData: ushort; wSettableStopParity: ushort; dwCurrentTxQueue: ulong; dwCurrentRxQueue: ulong; dwProvSpec1: ulong; dwProvSpec2: ulong; wcProvChar: [1; ushort]; }
export type s__COMSTAT = struct { #bits(1) fCtsHold: ulong; #bits(1) fDsrHold: ulong; #bits(1) fRlsdHold: ulong; #bits(1) fXoffHold: ulong; #bits(1) fXoffSent: ulong; #bits(1) fEof: ulong; #bits(1) fTxim: ulong; #bits(25) fReserved: ulong; cbInQue: ulong; cbOutQue: ulong; }
export type s__DCB = struct { DCBlength: ulong; BaudRate: ulong; #bits(1) fBinary: ulong; #bits(1) fParity: ulong; #bits(1) fOutxCtsFlow: ulong; #bits(1) fOutxDsrFlow: ulong; #bits(2) fDtrControl: ulong; #bits(1) fDsrSensitivity: ulong; #bits(1) fTXContinueOnXoff: ulong; #bits(1) fOutX: ulong; #bits(1) fInX: ulong; #bits(1) fErrorChar: ulong; #bits(1) fNull: ulong; #bits(2) fRtsControl: ulong; #bits(1) fAbortOnError: ulong; #bits(17) fDummy2: ulong; wReserved: ushort; XonLim: ushort; XoffLim: ushort; ByteSize: uint8; Parity: uint8; StopBits: uint8; XonChar: char; XoffChar: char; ErrorChar: char; EofChar: char; EvtChar: char; wReserved1: ushort; }
export type s__COMMTIMEOUTS = struct { ReadIntervalTimeout: ulong; ReadTotalTimeoutMultiplier: ulong; ReadTotalTimeoutConstant: ulong; WriteTotalTimeoutMultiplier: ulong; WriteTotalTimeoutConstant: ulong; }
export type s__COMMCONFIG = struct { dwSize: ulong; wVersion: ushort; wReserved: ushort; dcb: s__DCB; dwProviderSubType: ulong; dwProviderOffset: ulong; dwProviderSize: ulong; wcProviderData: [1; ushort]; }
export type s__MEMORYSTATUS = struct { dwLength: ulong; dwMemoryLoad: ulong; dwTotalPhys: uint64; dwAvailPhys: uint64; dwTotalPageFile: uint64; dwAvailPageFile: uint64; dwTotalVirtual: uint64; dwAvailVirtual: uint64; }
export type s__JIT_DEBUG_INFO = struct { dwSize: ulong; dwProcessorArchitecture: ulong; dwThreadID: ulong; dwReserved0: ulong; lpExceptionAddress: uint64; lpExceptionRecord: uint64; lpContextRecord: uint64; }
export type s__OFSTRUCT = struct { cBytes: uint8; fFixedDisk: uint8; nErrCode: ushort; Reserved1: ushort; Reserved2: ushort; szPathName: [128; char]; }
export type s__UMS_SCHEDULER_STARTUP_INFO = struct { UmsVersion: ulong; CompletionList: *; SchedulerProc: def (e__RTL_UMS_SCHEDULER_REASON, uint64, *) -> (); SchedulerParam: *; }
export type s__UMS_SYSTEM_THREAD_INFORMATION = struct { UmsVersion: ulong; struct #union { struct { #bits(1) IsUmsSchedulerThread: ulong; #bits(1) IsUmsWorkerThread: ulong; }; ThreadUmsFlags: ulong; }; }
export type e__DEP_SYSTEM_POLICY_TYPE = enum { DEPPolicyAlwaysOff; DEPPolicyAlwaysOn = 1; DEPPolicyOptIn = 2; DEPPolicyOptOut = 3; DEPTotalPolicyCount = 4; }
export type s__WIN32_STREAM_ID = struct { dwStreamId: ulong; dwStreamAttributes: ulong; Size: u__LARGE_INTEGER; dwStreamNameSize: ulong; cStreamName: [1; ushort]; }
export type s__STARTUPINFOEXA = struct { StartupInfo: s__STARTUPINFOA; lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST; }
export type s__STARTUPINFOEXW = struct { StartupInfo: s__STARTUPINFOW; lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST; }
export type e__PROC_THREAD_ATTRIBUTE_NUM = enum { ProcThreadAttributeParentProcess; ProcThreadAttributeHandleList = 2; ProcThreadAttributeGroupAffinity = 3; ProcThreadAttributePreferredNode = 4; ProcThreadAttributeIdealProcessor = 5; ProcThreadAttributeUmsThread = 6; ProcThreadAttributeMitigationPolicy = 7; ProcThreadAttributeSecurityCapabilities = 9; ProcThreadAttributeProtectionLevel = 11; ProcThreadAttributeJobList = 13; ProcThreadAttributeChildProcessPolicy = 14; ProcThreadAttributeAllApplicationPackagesPolicy = 15; ProcThreadAttributeWin32kFilter = 16; ProcThreadAttributeSafeOpenPromptOriginClaim = 17; ProcThreadAttributeDesktopAppPolicy = 18; ProcThreadAttributePseudoConsole = 22; ProcThreadAttributeMitigationAuditPolicy = 24; ProcThreadAttributeMachineType = 25; ProcThreadAttributeComponentFilter = 26; ProcThreadAttributeEnableOptionalXStateFeatures = 27; ProcThreadAttributeTrustedApp = 29; }
export type e__COPYFILE2_MESSAGE_TYPE = enum { COPYFILE2_CALLBACK_NONE; COPYFILE2_CALLBACK_CHUNK_STARTED = 1; COPYFILE2_CALLBACK_CHUNK_FINISHED = 2; COPYFILE2_CALLBACK_STREAM_STARTED = 3; COPYFILE2_CALLBACK_STREAM_FINISHED = 4; COPYFILE2_CALLBACK_POLL_CONTINUE = 5; COPYFILE2_CALLBACK_ERROR = 6; COPYFILE2_CALLBACK_MAX = 7; }
export type e__COPYFILE2_MESSAGE_ACTION = enum { COPYFILE2_PROGRESS_CONTINUE; COPYFILE2_PROGRESS_CANCEL = 1; COPYFILE2_PROGRESS_STOP = 2; COPYFILE2_PROGRESS_QUIET = 3; COPYFILE2_PROGRESS_PAUSE = 4; }
export type e__COPYFILE2_COPY_PHASE = enum { COPYFILE2_PHASE_NONE; COPYFILE2_PHASE_PREPARE_SOURCE = 1; COPYFILE2_PHASE_PREPARE_DEST = 2; COPYFILE2_PHASE_READ_SOURCE = 3; COPYFILE2_PHASE_WRITE_DESTINATION = 4; COPYFILE2_PHASE_SERVER_COPY = 5; COPYFILE2_PHASE_NAMEGRAFT_COPY = 6; COPYFILE2_PHASE_MAX = 7; }
export type s_COPYFILE2_MESSAGE = struct { Type: e__COPYFILE2_MESSAGE_TYPE; dwPadding: ulong; Info: struct #union { ChunkStarted: struct { dwStreamNumber: ulong; dwReserved: ulong; hSourceFile: *; hDestinationFile: *; uliChunkNumber: u__ULARGE_INTEGER; uliChunkSize: u__ULARGE_INTEGER; uliStreamSize: u__ULARGE_INTEGER; uliTotalFileSize: u__ULARGE_INTEGER; }; ChunkFinished: struct { dwStreamNumber: ulong; dwFlags: ulong; hSourceFile: *; hDestinationFile: *; uliChunkNumber: u__ULARGE_INTEGER; uliChunkSize: u__ULARGE_INTEGER; uliStreamSize: u__ULARGE_INTEGER; uliStreamBytesTransferred: u__ULARGE_INTEGER; uliTotalFileSize: u__ULARGE_INTEGER; uliTotalBytesTransferred: u__ULARGE_INTEGER; }; StreamStarted: struct { dwStreamNumber: ulong; dwReserved: ulong; hSourceFile: *; hDestinationFile: *; uliStreamSize: u__ULARGE_INTEGER; uliTotalFileSize: u__ULARGE_INTEGER; }; StreamFinished: struct { dwStreamNumber: ulong; dwReserved: ulong; hSourceFile: *; hDestinationFile: *; uliStreamSize: u__ULARGE_INTEGER; uliStreamBytesTransferred: u__ULARGE_INTEGER; uliTotalFileSize: u__ULARGE_INTEGER; uliTotalBytesTransferred: u__ULARGE_INTEGER; }; PollContinue: struct { dwReserved: ulong; }; Error: struct { CopyPhase: e__COPYFILE2_COPY_PHASE; dwStreamNumber: ulong; hrFailure: long; dwReserved: ulong; uliChunkNumber: u__ULARGE_INTEGER; uliStreamSize: u__ULARGE_INTEGER; uliStreamBytesTransferred: u__ULARGE_INTEGER; uliTotalFileSize: u__ULARGE_INTEGER; uliTotalBytesTransferred: u__ULARGE_INTEGER; }; }; }
export type s_COPYFILE2_EXTENDED_PARAMETERS = struct { dwSize: ulong; dwCopyFlags: ulong; pfCancel: *int; pProgressRoutine: def (*s_COPYFILE2_MESSAGE, *) -> (e__COPYFILE2_MESSAGE_ACTION); pvCallbackContext: *; }
export type s_COPYFILE2_EXTENDED_PARAMETERS_V2 = struct { dwSize: ulong; dwCopyFlags: ulong; pfCancel: *int; pProgressRoutine: def (*s_COPYFILE2_MESSAGE, *) -> (e__COPYFILE2_MESSAGE_ACTION); pvCallbackContext: *; dwCopyFlagsV2: ulong; ioDesiredSize: ulong; ioDesiredRate: ulong; reserved: [8; *]; }
export type s__EVENTLOG_FULL_INFORMATION = struct { dwFull: ulong; }
export type s__OPERATION_START_PARAMETERS = struct { Version: ulong; OperationId: ulong; Flags: ulong; }
export type s__OPERATION_END_PARAMETERS = struct { Version: ulong; OperationId: ulong; Flags: ulong; }
export type s_tagHW_PROFILE_INFOA = struct { dwDockInfo: ulong; szHwProfileGuid: [39; char]; szHwProfileName: [80; char]; }
export type s_tagHW_PROFILE_INFOW = struct { dwDockInfo: ulong; szHwProfileGuid: [39; ushort]; szHwProfileName: [80; ushort]; }
export type s__TIME_ZONE_INFORMATION = struct { Bias: long; StandardName: [32; ushort]; StandardDate: s__SYSTEMTIME; StandardBias: long; DaylightName: [32; ushort]; DaylightDate: s__SYSTEMTIME; DaylightBias: long; }
export type s__TIME_DYNAMIC_ZONE_INFORMATION = struct { Bias: long; StandardName: [32; ushort]; StandardDate: s__SYSTEMTIME; StandardBias: long; DaylightName: [32; ushort]; DaylightDate: s__SYSTEMTIME; DaylightBias: long; TimeZoneKeyName: [128; ushort]; DynamicDaylightTimeDisabled: uint8; }
export type s__SYSTEM_POWER_STATUS = struct { ACLineStatus: uint8; BatteryFlag: uint8; BatteryLifePercent: uint8; SystemStatusFlag: uint8; BatteryLifeTime: ulong; BatteryFullLifeTime: ulong; }
export type s_tagACTCTXA = struct { cbSize: ulong; dwFlags: ulong; lpSource: *char; wProcessorArchitecture: ushort; wLangId: ushort; lpAssemblyDirectory: *char; lpResourceName: *char; lpApplicationName: *char; hModule: *s_HINSTANCE__; }
export type s_tagACTCTXW = struct { cbSize: ulong; dwFlags: ulong; lpSource: *ushort; wProcessorArchitecture: ushort; wLangId: ushort; lpAssemblyDirectory: *ushort; lpResourceName: *ushort; lpApplicationName: *ushort; hModule: *s_HINSTANCE__; }
export type s_tagACTCTX_SECTION_KEYED_DATA_2600 = struct { cbSize: ulong; ulDataFormatVersion: ulong; lpData: *; ulLength: ulong; lpSectionGlobalData: *; ulSectionGlobalDataLength: ulong; lpSectionBase: *; ulSectionTotalLength: ulong; hActCtx: *; ulAssemblyRosterIndex: ulong; }
export type s_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = struct { lpInformation: *; lpSectionBase: *; ulSectionLength: ulong; lpSectionGlobalDataBase: *; ulSectionGlobalDataLength: ulong; }
export type s_tagACTCTX_SECTION_KEYED_DATA = struct { cbSize: ulong; ulDataFormatVersion: ulong; lpData: *; ulLength: ulong; lpSectionGlobalData: *; ulSectionGlobalDataLength: ulong; lpSectionBase: *; ulSectionTotalLength: ulong; hActCtx: *; ulAssemblyRosterIndex: ulong; ulFlags: ulong; AssemblyMetadata: s_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; }
export type s__ACTIVATION_CONTEXT_BASIC_INFORMATION = struct { hActCtx: *; dwFlags: ulong; }
export type s__FILE_BASIC_INFO = struct { CreationTime: u__LARGE_INTEGER; LastAccessTime: u__LARGE_INTEGER; LastWriteTime: u__LARGE_INTEGER; ChangeTime: u__LARGE_INTEGER; FileAttributes: ulong; }
export type s__FILE_STANDARD_INFO = struct { AllocationSize: u__LARGE_INTEGER; EndOfFile: u__LARGE_INTEGER; NumberOfLinks: ulong; DeletePending: uint8; Directory: uint8; }
export type s__FILE_NAME_INFO = struct { FileNameLength: ulong; FileName: [1; ushort]; }
export type s__FILE_CASE_SENSITIVE_INFO = struct { Flags: ulong; }
export type s__FILE_RENAME_INFO = struct { struct #union { ReplaceIfExists: uint8; Flags: ulong; }; RootDirectory: *; FileNameLength: ulong; FileName: [1; ushort]; }
export type s__FILE_ALLOCATION_INFO = struct { AllocationSize: u__LARGE_INTEGER; }
export type s__FILE_END_OF_FILE_INFO = struct { EndOfFile: u__LARGE_INTEGER; }
export type s__FILE_STREAM_INFO = struct { NextEntryOffset: ulong; StreamNameLength: ulong; StreamSize: u__LARGE_INTEGER; StreamAllocationSize: u__LARGE_INTEGER; StreamName: [1; ushort]; }
export type s__FILE_COMPRESSION_INFO = struct { CompressedFileSize: u__LARGE_INTEGER; CompressionFormat: ushort; CompressionUnitShift: uint8; ChunkShift: uint8; ClusterShift: uint8; Reserved: [3; uint8]; }
export type s__FILE_ATTRIBUTE_TAG_INFO = struct { FileAttributes: ulong; ReparseTag: ulong; }
export type s__FILE_DISPOSITION_INFO = struct { DeleteFileA: uint8; }
export type s__FILE_DISPOSITION_INFO_EX = struct { Flags: ulong; }
export type s__FILE_ID_BOTH_DIR_INFO = struct { NextEntryOffset: ulong; FileIndex: ulong; CreationTime: u__LARGE_INTEGER; LastAccessTime: u__LARGE_INTEGER; LastWriteTime: u__LARGE_INTEGER; ChangeTime: u__LARGE_INTEGER; EndOfFile: u__LARGE_INTEGER; AllocationSize: u__LARGE_INTEGER; FileAttributes: ulong; FileNameLength: ulong; EaSize: ulong; ShortNameLength: char; ShortName: [12; ushort]; FileId: u__LARGE_INTEGER; FileName: [1; ushort]; }
export type s__FILE_FULL_DIR_INFO = struct { NextEntryOffset: ulong; FileIndex: ulong; CreationTime: u__LARGE_INTEGER; LastAccessTime: u__LARGE_INTEGER; LastWriteTime: u__LARGE_INTEGER; ChangeTime: u__LARGE_INTEGER; EndOfFile: u__LARGE_INTEGER; AllocationSize: u__LARGE_INTEGER; FileAttributes: ulong; FileNameLength: ulong; EaSize: ulong; FileName: [1; ushort]; }
export type e__PRIORITY_HINT = enum { IoPriorityHintVeryLow; IoPriorityHintLow = 1; IoPriorityHintNormal = 2; MaximumIoPriorityHintType = 3; }
export type s__FILE_IO_PRIORITY_HINT_INFO = struct { PriorityHint: e__PRIORITY_HINT; }
export type s__FILE_ALIGNMENT_INFO = struct { AlignmentRequirement: ulong; }
export type s__FILE_STORAGE_INFO = struct { LogicalBytesPerSector: ulong; PhysicalBytesPerSectorForAtomicity: ulong; PhysicalBytesPerSectorForPerformance: ulong; FileSystemEffectivePhysicalBytesPerSectorForAtomicity: ulong; Flags: ulong; ByteOffsetForSectorAlignment: ulong; ByteOffsetForPartitionAlignment: ulong; }
export type s__FILE_ID_INFO = struct { VolumeSerialNumber: uint64; FileId: s__FILE_ID_128; }
export type s__FILE_ID_EXTD_DIR_INFO = struct { NextEntryOffset: ulong; FileIndex: ulong; CreationTime: u__LARGE_INTEGER; LastAccessTime: u__LARGE_INTEGER; LastWriteTime: u__LARGE_INTEGER; ChangeTime: u__LARGE_INTEGER; EndOfFile: u__LARGE_INTEGER; AllocationSize: u__LARGE_INTEGER; FileAttributes: ulong; FileNameLength: ulong; EaSize: ulong; ReparsePointTag: ulong; FileId: s__FILE_ID_128; FileName: [1; ushort]; }
export type s__FILE_REMOTE_PROTOCOL_INFO = struct { StructureVersion: ushort; StructureSize: ushort; Protocol: ulong; ProtocolMajorVersion: ushort; ProtocolMinorVersion: ushort; ProtocolRevision: ushort; Reserved: ushort; Flags: ulong; GenericReserved: struct { Reserved: [8; ulong]; }; ProtocolSpecific: struct #union { Smb2: struct { Server: struct { Capabilities: ulong; }; Share: struct { Capabilities: ulong; ShareFlags: ulong; }; }; Reserved: [16; ulong]; }; }
export type e__FILE_ID_TYPE = enum { FileIdType; ObjectIdType = 1; ExtendedFileIdType = 2; MaximumFileIdType = 3; }
export type s_FILE_ID_DESCRIPTOR = struct { dwSize: ulong; Type: e__FILE_ID_TYPE; struct #union { FileId: u__LARGE_INTEGER; ObjectId: s__GUID; ExtendedFileId: s__FILE_ID_128; }; }
export type s__DRAWPATRECT = struct { ptPosition: s_tagPOINT; ptSize: s_tagPOINT; wStyle: ushort; wPattern: ushort; }
export type s__PSINJECTDATA = struct { DataBytes: ulong; InjectionPoint: ushort; PageNumber: ushort; }
export type s__PSFEATURE_OUTPUT = struct { bPageIndependent: int; bSetPageDevice: int; }
export type s__PSFEATURE_CUSTPAPER = struct { lOrientation: long; lWidth: long; lHeight: long; lWidthOffset: long; lHeightOffset: long; }
export type s_tagXFORM = struct { eM11: float; eM12: float; eM21: float; eM22: float; eDx: float; eDy: float; }
export type s_tagBITMAP = struct { bmType: long; bmWidth: long; bmHeight: long; bmWidthBytes: long; bmPlanes: ushort; bmBitsPixel: ushort; bmBits: *; }
export type s_tagRGBTRIPLE = struct { rgbtBlue: uint8; rgbtGreen: uint8; rgbtRed: uint8; }
export type s_tagRGBQUAD = struct { rgbBlue: uint8; rgbGreen: uint8; rgbRed: uint8; rgbReserved: uint8; }
export type s_tagCIEXYZ = struct { ciexyzX: long; ciexyzY: long; ciexyzZ: long; }
export type s_tagICEXYZTRIPLE = struct { ciexyzRed: s_tagCIEXYZ; ciexyzGreen: s_tagCIEXYZ; ciexyzBlue: s_tagCIEXYZ; }
export type s_tagLOGCOLORSPACEA = struct { lcsSignature: ulong; lcsVersion: ulong; lcsSize: ulong; lcsCSType: long; lcsIntent: long; lcsEndpoints: s_tagICEXYZTRIPLE; lcsGammaRed: ulong; lcsGammaGreen: ulong; lcsGammaBlue: ulong; lcsFilename: [260; char]; }
export type s_tagLOGCOLORSPACEW = struct { lcsSignature: ulong; lcsVersion: ulong; lcsSize: ulong; lcsCSType: long; lcsIntent: long; lcsEndpoints: s_tagICEXYZTRIPLE; lcsGammaRed: ulong; lcsGammaGreen: ulong; lcsGammaBlue: ulong; lcsFilename: [260; ushort]; }
export type s_tagBITMAPCOREHEADER = struct { bcSize: ulong; bcWidth: ushort; bcHeight: ushort; bcPlanes: ushort; bcBitCount: ushort; }
export type s_tagBITMAPINFOHEADER = struct { biSize: ulong; biWidth: long; biHeight: long; biPlanes: ushort; biBitCount: ushort; biCompression: ulong; biSizeImage: ulong; biXPelsPerMeter: long; biYPelsPerMeter: long; biClrUsed: ulong; biClrImportant: ulong; }
export type s_BITMAPV4HEADER = struct { bV4Size: ulong; bV4Width: long; bV4Height: long; bV4Planes: ushort; bV4BitCount: ushort; bV4V4Compression: ulong; bV4SizeImage: ulong; bV4XPelsPerMeter: long; bV4YPelsPerMeter: long; bV4ClrUsed: ulong; bV4ClrImportant: ulong; bV4RedMask: ulong; bV4GreenMask: ulong; bV4BlueMask: ulong; bV4AlphaMask: ulong; bV4CSType: ulong; bV4Endpoints: s_tagICEXYZTRIPLE; bV4GammaRed: ulong; bV4GammaGreen: ulong; bV4GammaBlue: ulong; }
export type BITMAPV4HEADER
export type s_BITMAPV5HEADER = struct { bV5Size: ulong; bV5Width: long; bV5Height: long; bV5Planes: ushort; bV5BitCount: ushort; bV5Compression: ulong; bV5SizeImage: ulong; bV5XPelsPerMeter: long; bV5YPelsPerMeter: long; bV5ClrUsed: ulong; bV5ClrImportant: ulong; bV5RedMask: ulong; bV5GreenMask: ulong; bV5BlueMask: ulong; bV5AlphaMask: ulong; bV5CSType: ulong; bV5Endpoints: s_tagICEXYZTRIPLE; bV5GammaRed: ulong; bV5GammaGreen: ulong; bV5GammaBlue: ulong; bV5Intent: ulong; bV5ProfileData: ulong; bV5ProfileSize: ulong; bV5Reserved: ulong; }
export type BITMAPV5HEADER
export type s_tagBITMAPINFO = struct { bmiHeader: s_tagBITMAPINFOHEADER; bmiColors: [1; s_tagRGBQUAD]; }
export type s_tagBITMAPCOREINFO = struct { bmciHeader: s_tagBITMAPCOREHEADER; bmciColors: [1; s_tagRGBTRIPLE]; }
export type s_tagBITMAPFILEHEADER = struct { bfType: ushort; bfSize: ulong; bfReserved1: ushort; bfReserved2: ushort; bfOffBits: ulong; }
export type s_tagFONTSIGNATURE = struct { fsUsb: [4; ulong]; fsCsb: [2; ulong]; }
export type s_tagCHARSETINFO = struct { ciCharset: uint; ciACP: uint; fs: s_tagFONTSIGNATURE; }
export type s_tagLOCALESIGNATURE = struct { lsUsb: [4; ulong]; lsCsbDefault: [2; ulong]; lsCsbSupported: [2; ulong]; }
export type s_tagHANDLETABLE = struct { objectHandle: [1; *]; }
export type s_tagMETARECORD = struct { rdSize: ulong; rdFunction: ushort; rdParm: [1; ushort]; }
export type s_tagMETAFILEPICT = struct { mm: long; xExt: long; yExt: long; hMF: *s_HMETAFILE__; }
export type s_tagMETAHEADER = struct { mtType: ushort; mtHeaderSize: ushort; mtVersion: ushort; mtSize: ulong; mtNoObjects: ushort; mtMaxRecord: ulong; mtNoParameters: ushort; }
export type s_tagENHMETARECORD = struct { iType: ulong; nSize: ulong; dParm: [1; ulong]; }
export type s_tagENHMETAHEADER = struct { iType: ulong; nSize: ulong; rclBounds: s__RECTL; rclFrame: s__RECTL; dSignature: ulong; nVersion: ulong; nBytes: ulong; nRecords: ulong; nHandles: ushort; sReserved: ushort; nDescription: ulong; offDescription: ulong; nPalEntries: ulong; szlDevice: s_tagSIZE; szlMillimeters: s_tagSIZE; cbPixelFormat: ulong; offPixelFormat: ulong; bOpenGL: ulong; szlMicrometers: s_tagSIZE; }
export type s_tagTEXTMETRICA = struct { tmHeight: long; tmAscent: long; tmDescent: long; tmInternalLeading: long; tmExternalLeading: long; tmAveCharWidth: long; tmMaxCharWidth: long; tmWeight: long; tmOverhang: long; tmDigitizedAspectX: long; tmDigitizedAspectY: long; tmFirstChar: uint8; tmLastChar: uint8; tmDefaultChar: uint8; tmBreakChar: uint8; tmItalic: uint8; tmUnderlined: uint8; tmStruckOut: uint8; tmPitchAndFamily: uint8; tmCharSet: uint8; }
export type s_tagTEXTMETRICW = struct { tmHeight: long; tmAscent: long; tmDescent: long; tmInternalLeading: long; tmExternalLeading: long; tmAveCharWidth: long; tmMaxCharWidth: long; tmWeight: long; tmOverhang: long; tmDigitizedAspectX: long; tmDigitizedAspectY: long; tmFirstChar: ushort; tmLastChar: ushort; tmDefaultChar: ushort; tmBreakChar: ushort; tmItalic: uint8; tmUnderlined: uint8; tmStruckOut: uint8; tmPitchAndFamily: uint8; tmCharSet: uint8; }
export type s_tagNEWTEXTMETRICA = struct { tmHeight: long; tmAscent: long; tmDescent: long; tmInternalLeading: long; tmExternalLeading: long; tmAveCharWidth: long; tmMaxCharWidth: long; tmWeight: long; tmOverhang: long; tmDigitizedAspectX: long; tmDigitizedAspectY: long; tmFirstChar: uint8; tmLastChar: uint8; tmDefaultChar: uint8; tmBreakChar: uint8; tmItalic: uint8; tmUnderlined: uint8; tmStruckOut: uint8; tmPitchAndFamily: uint8; tmCharSet: uint8; ntmFlags: ulong; ntmSizeEM: uint; ntmCellHeight: uint; ntmAvgWidth: uint; }
export type s_tagNEWTEXTMETRICW = struct { tmHeight: long; tmAscent: long; tmDescent: long; tmInternalLeading: long; tmExternalLeading: long; tmAveCharWidth: long; tmMaxCharWidth: long; tmWeight: long; tmOverhang: long; tmDigitizedAspectX: long; tmDigitizedAspectY: long; tmFirstChar: ushort; tmLastChar: ushort; tmDefaultChar: ushort; tmBreakChar: ushort; tmItalic: uint8; tmUnderlined: uint8; tmStruckOut: uint8; tmPitchAndFamily: uint8; tmCharSet: uint8; ntmFlags: ulong; ntmSizeEM: uint; ntmCellHeight: uint; ntmAvgWidth: uint; }
export type s_tagNEWTEXTMETRICEXA = struct { ntmTm: s_tagNEWTEXTMETRICA; ntmFontSig: s_tagFONTSIGNATURE; }
export type s_tagNEWTEXTMETRICEXW = struct { ntmTm: s_tagNEWTEXTMETRICW; ntmFontSig: s_tagFONTSIGNATURE; }
export type s_tagPELARRAY = struct { paXCount: long; paYCount: long; paXExt: long; paYExt: long; paRGBs: uint8; }
export type s_tagLOGBRUSH = struct { lbStyle: uint; lbColor: ulong; lbHatch: uint64; }
export type s_tagLOGBRUSH32 = struct { lbStyle: uint; lbColor: ulong; lbHatch: ulong; }
export type s_tagLOGPEN = struct { lopnStyle: uint; lopnWidth: s_tagPOINT; lopnColor: ulong; }
export type s_tagEXTLOGPEN = struct { elpPenStyle: ulong; elpWidth: ulong; elpBrushStyle: uint; elpColor: ulong; elpHatch: uint64; elpNumEntries: ulong; elpStyleEntry: [1; ulong]; }
export type s_tagEXTLOGPEN32 = struct { elpPenStyle: ulong; elpWidth: ulong; elpBrushStyle: uint; elpColor: ulong; elpHatch: ulong; elpNumEntries: ulong; elpStyleEntry: [1; ulong]; }
export type s_tagPALETTEENTRY = struct { peRed: uint8; peGreen: uint8; peBlue: uint8; peFlags: uint8; }
export type s_tagLOGPALETTE = struct { palVersion: ushort; palNumEntries: ushort; palPalEntry: [1; s_tagPALETTEENTRY]; }
export type s_tagLOGFONTA = struct { lfHeight: long; lfWidth: long; lfEscapement: long; lfOrientation: long; lfWeight: long; lfItalic: uint8; lfUnderline: uint8; lfStrikeOut: uint8; lfCharSet: uint8; lfOutPrecision: uint8; lfClipPrecision: uint8; lfQuality: uint8; lfPitchAndFamily: uint8; lfFaceName: [32; char]; }
export type s_tagLOGFONTW = struct { lfHeight: long; lfWidth: long; lfEscapement: long; lfOrientation: long; lfWeight: long; lfItalic: uint8; lfUnderline: uint8; lfStrikeOut: uint8; lfCharSet: uint8; lfOutPrecision: uint8; lfClipPrecision: uint8; lfQuality: uint8; lfPitchAndFamily: uint8; lfFaceName: [32; ushort]; }
export type s_tagENUMLOGFONTA = struct { elfLogFont: s_tagLOGFONTA; elfFullName: [64; uint8]; elfStyle: [32; uint8]; }
export type s_tagENUMLOGFONTW = struct { elfLogFont: s_tagLOGFONTW; elfFullName: [64; ushort]; elfStyle: [32; ushort]; }
export type s_tagENUMLOGFONTEXA = struct { elfLogFont: s_tagLOGFONTA; elfFullName: [64; uint8]; elfStyle: [32; uint8]; elfScript: [32; uint8]; }
export type s_tagENUMLOGFONTEXW = struct { elfLogFont: s_tagLOGFONTW; elfFullName: [64; ushort]; elfStyle: [32; ushort]; elfScript: [32; ushort]; }
export type s_tagPANOSE = struct { bFamilyType: uint8; bSerifStyle: uint8; bWeight: uint8; bProportion: uint8; bContrast: uint8; bStrokeVariation: uint8; bArmStyle: uint8; bLetterform: uint8; bMidline: uint8; bXHeight: uint8; }
export type s_tagEXTLOGFONTA = struct { elfLogFont: s_tagLOGFONTA; elfFullName: [64; uint8]; elfStyle: [32; uint8]; elfVersion: ulong; elfStyleSize: ulong; elfMatch: ulong; elfReserved: ulong; elfVendorId: [4; uint8]; elfCulture: ulong; elfPanose: s_tagPANOSE; }
export type s_tagEXTLOGFONTW = struct { elfLogFont: s_tagLOGFONTW; elfFullName: [64; ushort]; elfStyle: [32; ushort]; elfVersion: ulong; elfStyleSize: ulong; elfMatch: ulong; elfReserved: ulong; elfVendorId: [4; uint8]; elfCulture: ulong; elfPanose: s_tagPANOSE; }
export type s__devicemodeA = struct { dmDeviceName: [32; uint8]; dmSpecVersion: ushort; dmDriverVersion: ushort; dmSize: ushort; dmDriverExtra: ushort; dmFields: ulong; struct #union { struct { dmOrientation: short; dmPaperSize: short; dmPaperLength: short; dmPaperWidth: short; dmScale: short; dmCopies: short; dmDefaultSource: short; dmPrintQuality: short; }; struct { dmPosition: s__POINTL; dmDisplayOrientation: ulong; dmDisplayFixedOutput: ulong; }; }; dmColor: short; dmDuplex: short; dmYResolution: short; dmTTOption: short; dmCollate: short; dmFormName: [32; uint8]; dmLogPixels: ushort; dmBitsPerPel: ulong; dmPelsWidth: ulong; dmPelsHeight: ulong; struct #union { dmDisplayFlags: ulong; dmNup: ulong; }; dmDisplayFrequency: ulong; dmICMMethod: ulong; dmICMIntent: ulong; dmMediaType: ulong; dmDitherType: ulong; dmReserved1: ulong; dmReserved2: ulong; dmPanningWidth: ulong; dmPanningHeight: ulong; }
export type s__devicemodeW = struct { dmDeviceName: [32; ushort]; dmSpecVersion: ushort; dmDriverVersion: ushort; dmSize: ushort; dmDriverExtra: ushort; dmFields: ulong; struct #union { struct { dmOrientation: short; dmPaperSize: short; dmPaperLength: short; dmPaperWidth: short; dmScale: short; dmCopies: short; dmDefaultSource: short; dmPrintQuality: short; }; struct { dmPosition: s__POINTL; dmDisplayOrientation: ulong; dmDisplayFixedOutput: ulong; }; }; dmColor: short; dmDuplex: short; dmYResolution: short; dmTTOption: short; dmCollate: short; dmFormName: [32; ushort]; dmLogPixels: ushort; dmBitsPerPel: ulong; dmPelsWidth: ulong; dmPelsHeight: ulong; struct #union { dmDisplayFlags: ulong; dmNup: ulong; }; dmDisplayFrequency: ulong; dmICMMethod: ulong; dmICMIntent: ulong; dmMediaType: ulong; dmDitherType: ulong; dmReserved1: ulong; dmReserved2: ulong; dmPanningWidth: ulong; dmPanningHeight: ulong; }
export type s__DISPLAY_DEVICEA = struct { cb: ulong; DeviceName: [32; char]; DeviceString: [128; char]; StateFlags: ulong; DeviceID: [128; char]; DeviceKey: [128; char]; }
export type s__DISPLAY_DEVICEW = struct { cb: ulong; DeviceName: [32; ushort]; DeviceString: [128; ushort]; StateFlags: ulong; DeviceID: [128; ushort]; DeviceKey: [128; ushort]; }
export type s_DISPLAYCONFIG_RATIONAL = struct { Numerator: uint; Denominator: uint; }
export type e_DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = enum { DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL = 18; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1; }
export type e_DISPLAYCONFIG_SCANLINE_ORDERING = enum { DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED; DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1; DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2; DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2; DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3; DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1; }
export type s_DISPLAYCONFIG_2DREGION = struct { cx: uint; cy: uint; }
export type s_DISPLAYCONFIG_VIDEO_SIGNAL_INFO = struct { pixelRate: uint64; hSyncFreq: s_DISPLAYCONFIG_RATIONAL; vSyncFreq: s_DISPLAYCONFIG_RATIONAL; activeSize: s_DISPLAYCONFIG_2DREGION; totalSize: s_DISPLAYCONFIG_2DREGION; struct #union { AdditionalSignalInfo: struct { #bits(16) videoStandard: uint; #bits(6) vSyncFreqDivider: uint; #bits(10) reserved: uint; }; videoStandard: uint; }; scanLineOrdering: e_DISPLAYCONFIG_SCANLINE_ORDERING; }
export type e_DISPLAYCONFIG_SCALING = enum { DISPLAYCONFIG_SCALING_IDENTITY = 1; DISPLAYCONFIG_SCALING_CENTERED = 2; DISPLAYCONFIG_SCALING_STRETCHED = 3; DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4; DISPLAYCONFIG_SCALING_CUSTOM = 5; DISPLAYCONFIG_SCALING_PREFERRED = 128; DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1; }
export type e_DISPLAYCONFIG_ROTATION = enum { DISPLAYCONFIG_ROTATION_IDENTITY = 1; DISPLAYCONFIG_ROTATION_ROTATE90 = 2; DISPLAYCONFIG_ROTATION_ROTATE180 = 3; DISPLAYCONFIG_ROTATION_ROTATE270 = 4; DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1; }
export type e_DISPLAYCONFIG_MODE_INFO_TYPE = enum { DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1; DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2; DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3; DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1; }
export type e_DISPLAYCONFIG_PIXELFORMAT = enum { DISPLAYCONFIG_PIXELFORMAT_8BPP = 1; DISPLAYCONFIG_PIXELFORMAT_16BPP = 2; DISPLAYCONFIG_PIXELFORMAT_24BPP = 3; DISPLAYCONFIG_PIXELFORMAT_32BPP = 4; DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5; DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1; }
export type s_DISPLAYCONFIG_SOURCE_MODE = struct { width: uint; height: uint; pixelFormat: e_DISPLAYCONFIG_PIXELFORMAT; position: s__POINTL; }
export type s_DISPLAYCONFIG_TARGET_MODE = struct { targetVideoSignalInfo: s_DISPLAYCONFIG_VIDEO_SIGNAL_INFO; }
export type s_DISPLAYCONFIG_DESKTOP_IMAGE_INFO = struct { PathSourceSize: s__POINTL; DesktopImageRegion: s__RECTL; DesktopImageClip: s__RECTL; }
export type s_DISPLAYCONFIG_MODE_INFO = struct { infoType: e_DISPLAYCONFIG_MODE_INFO_TYPE; id: uint; adapterId: s__LUID; struct #union { targetMode: s_DISPLAYCONFIG_TARGET_MODE; sourceMode: s_DISPLAYCONFIG_SOURCE_MODE; desktopImageInfo: s_DISPLAYCONFIG_DESKTOP_IMAGE_INFO; }; }
export type s_DISPLAYCONFIG_PATH_SOURCE_INFO = struct { adapterId: s__LUID; id: uint; struct #union { modeInfoIdx: uint; struct { #bits(16) cloneGroupId: uint; #bits(16) sourceModeInfoIdx: uint; }; }; statusFlags: uint; }
export type s_DISPLAYCONFIG_PATH_TARGET_INFO = struct { adapterId: s__LUID; id: uint; struct #union { modeInfoIdx: uint; struct { #bits(16) desktopModeInfoIdx: uint; #bits(16) targetModeInfoIdx: uint; }; }; outputTechnology: e_DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY; rotation: e_DISPLAYCONFIG_ROTATION; scaling: e_DISPLAYCONFIG_SCALING; refreshRate: s_DISPLAYCONFIG_RATIONAL; scanLineOrdering: e_DISPLAYCONFIG_SCANLINE_ORDERING; targetAvailable: int; statusFlags: uint; }
export type s_DISPLAYCONFIG_PATH_INFO = struct { sourceInfo: s_DISPLAYCONFIG_PATH_SOURCE_INFO; targetInfo: s_DISPLAYCONFIG_PATH_TARGET_INFO; flags: uint; }
export type e_DISPLAYCONFIG_TOPOLOGY_ID = enum { DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1; DISPLAYCONFIG_TOPOLOGY_CLONE = 2; DISPLAYCONFIG_TOPOLOGY_EXTEND = 4; DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8; DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = -1; }
export type e_DISPLAYCONFIG_DEVICE_INFO_TYPE = enum { DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1; DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2; DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3; DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4; DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5; DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6; DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7; DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8; DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9; DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10; DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11; DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION = 12; DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION = 13; DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1; }
export type s_DISPLAYCONFIG_DEVICE_INFO_HEADER = struct { type_: e_DISPLAYCONFIG_DEVICE_INFO_TYPE; size: uint; adapterId: s__LUID; id: uint; }
export type s_DISPLAYCONFIG_SOURCE_DEVICE_NAME = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; viewGdiDeviceName: [32; ushort]; }
export type s_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS = struct { struct #union { struct { #bits(1) friendlyNameFromEdid: uint; #bits(1) friendlyNameForced: uint; #bits(1) edidIdsValid: uint; #bits(29) reserved: uint; }; value: uint; }; }
export type s_DISPLAYCONFIG_TARGET_DEVICE_NAME = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; flags: s_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS; outputTechnology: e_DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY; edidManufactureId: ushort; edidProductCodeId: ushort; connectorInstance: uint; monitorFriendlyDeviceName: [64; ushort]; monitorDevicePath: [128; ushort]; }
export type s_DISPLAYCONFIG_TARGET_PREFERRED_MODE = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; width: uint; height: uint; targetMode: s_DISPLAYCONFIG_TARGET_MODE; }
export type s_DISPLAYCONFIG_ADAPTER_NAME = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; adapterDevicePath: [128; ushort]; }
export type s_DISPLAYCONFIG_TARGET_BASE_TYPE = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; baseOutputTechnology: e_DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY; }
export type s_DISPLAYCONFIG_SET_TARGET_PERSISTENCE = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; struct #union { struct { #bits(1) bootPersistenceOn: uint; #bits(31) reserved: uint; }; value: uint; }; }
export type s_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; struct #union { struct { #bits(1) disableMonitorVirtualResolution: uint; #bits(31) reserved: uint; }; value: uint; }; }
export type e__DISPLAYCONFIG_COLOR_ENCODING = enum { DISPLAYCONFIG_COLOR_ENCODING_RGB; DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1; DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2; DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3; DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4; DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = -1; }
export type s__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; struct #union { struct { #bits(1) advancedColorSupported: uint; #bits(1) advancedColorEnabled: uint; #bits(1) wideColorEnforced: uint; #bits(1) advancedColorForceDisabled: uint; #bits(28) reserved: uint; }; value: uint; }; colorEncoding: e__DISPLAYCONFIG_COLOR_ENCODING; bitsPerColorChannel: uint; }
export type s__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; struct #union { struct { #bits(1) enableAdvancedColor: uint; #bits(31) reserved: uint; }; value: uint; }; }
export type s__DISPLAYCONFIG_SDR_WHITE_LEVEL = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; SDRWhiteLevel: ulong; }
export type s__DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; struct #union { struct { #bits(1) isSpecializationEnabled: uint; #bits(1) isSpecializationAvailableForMonitor: uint; #bits(1) isSpecializationAvailableForSystem: uint; #bits(29) reserved: uint; }; value: uint; }; }
export type s__DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION = struct { header: s_DISPLAYCONFIG_DEVICE_INFO_HEADER; struct #union { struct { #bits(1) isSpecializationEnabled: uint; #bits(31) reserved: uint; }; value: uint; }; specializationType: s__GUID; specializationSubType: s__GUID; specializationApplicationName: [128; ushort]; }
export type s__RGNDATAHEADER = struct { dwSize: ulong; iType: ulong; nCount: ulong; nRgnSize: ulong; rcBound: s_tagRECT; }
export type s__RGNDATA = struct { rdh: s__RGNDATAHEADER; Buffer: [1; char]; }
export type s__ABC = struct { abcA: int; abcB: uint; abcC: int; }
export type s__ABCFLOAT = struct { abcfA: float; abcfB: float; abcfC: float; }
export type s__OUTLINETEXTMETRICA = struct { otmSize: uint; otmTextMetrics: s_tagTEXTMETRICA; otmFiller: uint8; otmPanoseNumber: s_tagPANOSE; otmfsSelection: uint; otmfsType: uint; otmsCharSlopeRise: int; otmsCharSlopeRun: int; otmItalicAngle: int; otmEMSquare: uint; otmAscent: int; otmDescent: int; otmLineGap: uint; otmsCapEmHeight: uint; otmsXHeight: uint; otmrcFontBox: s_tagRECT; otmMacAscent: int; otmMacDescent: int; otmMacLineGap: uint; otmusMinimumPPEM: uint; otmptSubscriptSize: s_tagPOINT; otmptSubscriptOffset: s_tagPOINT; otmptSuperscriptSize: s_tagPOINT; otmptSuperscriptOffset: s_tagPOINT; otmsStrikeoutSize: uint; otmsStrikeoutPosition: int; otmsUnderscoreSize: int; otmsUnderscorePosition: int; otmpFamilyName: *char; otmpFaceName: *char; otmpStyleName: *char; otmpFullName: *char; }
export type s__OUTLINETEXTMETRICW = struct { otmSize: uint; otmTextMetrics: s_tagTEXTMETRICW; otmFiller: uint8; otmPanoseNumber: s_tagPANOSE; otmfsSelection: uint; otmfsType: uint; otmsCharSlopeRise: int; otmsCharSlopeRun: int; otmItalicAngle: int; otmEMSquare: uint; otmAscent: int; otmDescent: int; otmLineGap: uint; otmsCapEmHeight: uint; otmsXHeight: uint; otmrcFontBox: s_tagRECT; otmMacAscent: int; otmMacDescent: int; otmMacLineGap: uint; otmusMinimumPPEM: uint; otmptSubscriptSize: s_tagPOINT; otmptSubscriptOffset: s_tagPOINT; otmptSuperscriptSize: s_tagPOINT; otmptSuperscriptOffset: s_tagPOINT; otmsStrikeoutSize: uint; otmsStrikeoutPosition: int; otmsUnderscoreSize: int; otmsUnderscorePosition: int; otmpFamilyName: *char; otmpFaceName: *char; otmpStyleName: *char; otmpFullName: *char; }
export type s_tagPOLYTEXTA = struct { x: int; y: int; n: uint; lpstr: *char; uiFlags: uint; rcl: s_tagRECT; pdx: *int; }
export type s_tagPOLYTEXTW = struct { x: int; y: int; n: uint; lpstr: *ushort; uiFlags: uint; rcl: s_tagRECT; pdx: *int; }
export type s__FIXED = struct { fract: ushort; value: short; }
export type s__MAT2 = struct { eM11: s__FIXED; eM12: s__FIXED; eM21: s__FIXED; eM22: s__FIXED; }
export type s__GLYPHMETRICS = struct { gmBlackBoxX: uint; gmBlackBoxY: uint; gmptGlyphOrigin: s_tagPOINT; gmCellIncX: short; gmCellIncY: short; }
export type s_tagPOINTFX = struct { x: s__FIXED; y: s__FIXED; }
export type s_tagTTPOLYCURVE = struct { wType: ushort; cpfx: ushort; apfx: [1; s_tagPOINTFX]; }
export type s_tagTTPOLYGONHEADER = struct { cb: ulong; dwType: ulong; pfxStart: s_tagPOINTFX; }
export type s_tagGCP_RESULTSA = struct { lStructSize: ulong; lpOutString: *char; lpOrder: *uint; lpDx: *int; lpCaretPos: *int; lpClass: *char; lpGlyphs: *ushort; nGlyphs: uint; nMaxFit: int; }
export type s_tagGCP_RESULTSW = struct { lStructSize: ulong; lpOutString: *ushort; lpOrder: *uint; lpDx: *int; lpCaretPos: *int; lpClass: *char; lpGlyphs: *ushort; nGlyphs: uint; nMaxFit: int; }
export type s__RASTERIZER_STATUS = struct { nSize: short; wFlags: short; nLanguageID: short; }
export type s_tagPIXELFORMATDESCRIPTOR = struct { nSize: ushort; nVersion: ushort; dwFlags: ulong; iPixelType: uint8; cColorBits: uint8; cRedBits: uint8; cRedShift: uint8; cGreenBits: uint8; cGreenShift: uint8; cBlueBits: uint8; cBlueShift: uint8; cAlphaBits: uint8; cAlphaShift: uint8; cAccumBits: uint8; cAccumRedBits: uint8; cAccumGreenBits: uint8; cAccumBlueBits: uint8; cAccumAlphaBits: uint8; cDepthBits: uint8; cStencilBits: uint8; cAuxBuffers: uint8; iLayerType: uint8; bReserved: uint8; dwLayerMask: ulong; dwVisibleMask: ulong; dwDamageMask: ulong; }
export type s_tagWCRANGE = struct { wcLow: ushort; cGlyphs: ushort; }
export type s_tagGLYPHSET = struct { cbThis: ulong; flAccel: ulong; cGlyphsSupported: ulong; cRanges: ulong; ranges: [1; s_tagWCRANGE]; }
export type s_tagDESIGNVECTOR = struct { dvReserved: ulong; dvNumAxes: ulong; dvValues: [16; long]; }
export type s_tagAXISINFOA = struct { axMinValue: long; axMaxValue: long; axAxisName: [16; uint8]; }
export type s_tagAXISINFOW = struct { axMinValue: long; axMaxValue: long; axAxisName: [16; ushort]; }
export type s_tagAXESLISTA = struct { axlReserved: ulong; axlNumAxes: ulong; axlAxisInfo: [16; s_tagAXISINFOA]; }
export type s_tagAXESLISTW = struct { axlReserved: ulong; axlNumAxes: ulong; axlAxisInfo: [16; s_tagAXISINFOW]; }
export type s_tagENUMLOGFONTEXDVA = struct { elfEnumLogfontEx: s_tagENUMLOGFONTEXA; elfDesignVector: s_tagDESIGNVECTOR; }
export type s_tagENUMLOGFONTEXDVW = struct { elfEnumLogfontEx: s_tagENUMLOGFONTEXW; elfDesignVector: s_tagDESIGNVECTOR; }
export type s_tagENUMTEXTMETRICA = struct { etmNewTextMetricEx: s_tagNEWTEXTMETRICEXA; etmAxesList: s_tagAXESLISTA; }
export type s_tagENUMTEXTMETRICW = struct { etmNewTextMetricEx: s_tagNEWTEXTMETRICEXW; etmAxesList: s_tagAXESLISTW; }
export type s__TRIVERTEX = struct { x: long; y: long; Red: ushort; Green: ushort; Blue: ushort; Alpha: ushort; }
export type s__GRADIENT_TRIANGLE = struct { Vertex1: ulong; Vertex2: ulong; Vertex3: ulong; }
export type s__GRADIENT_RECT = struct { UpperLeft: ulong; LowerRight: ulong; }
export type s__BLENDFUNCTION = struct { BlendOp: uint8; BlendFlags: uint8; SourceConstantAlpha: uint8; AlphaFormat: uint8; }
export type s_tagDIBSECTION = struct { dsBm: s_tagBITMAP; dsBmih: s_tagBITMAPINFOHEADER; dsBitfields: [3; ulong]; dshSection: *; dsOffset: ulong; }
export type s_tagCOLORADJUSTMENT = struct { caSize: ushort; caFlags: ushort; caIlluminantIndex: ushort; caRedGamma: ushort; caGreenGamma: ushort; caBlueGamma: ushort; caReferenceBlack: ushort; caReferenceWhite: ushort; caContrast: short; caBrightness: short; caColorfulness: short; caRedGreenTint: short; }
export type s__DOCINFOA = struct { cbSize: int; lpszDocName: *char; lpszOutput: *char; lpszDatatype: *char; fwType: ulong; }
export type s__DOCINFOW = struct { cbSize: int; lpszDocName: *ushort; lpszOutput: *ushort; lpszDatatype: *ushort; fwType: ulong; }
export type s_tagKERNINGPAIR = struct { wFirst: ushort; wSecond: ushort; iKernAmount: int; }
export type s_tagEMR = struct { iType: ulong; nSize: ulong; }
export type s_tagEMRTEXT = struct { ptlReference: s__POINTL; nChars: ulong; offString: ulong; fOptions: ulong; rcl: s__RECTL; offDx: ulong; }
export type s_tagABORTPATH = struct { emr: s_tagEMR; }
export type s_tagEMRSELECTCLIPPATH = struct { emr: s_tagEMR; iMode: ulong; }
export type s_tagEMRSETMITERLIMIT = struct { emr: s_tagEMR; eMiterLimit: float; }
export type s_tagEMRRESTOREDC = struct { emr: s_tagEMR; iRelative: long; }
export type s_tagEMRSETARCDIRECTION = struct { emr: s_tagEMR; iArcDirection: ulong; }
export type s_tagEMRSETMAPPERFLAGS = struct { emr: s_tagEMR; dwFlags: ulong; }
export type s_tagEMRSETTEXTCOLOR = struct { emr: s_tagEMR; crColor: ulong; }
export type s_tagEMRSELECTOBJECT = struct { emr: s_tagEMR; ihObject: ulong; }
export type s_tagEMRSELECTPALETTE = struct { emr: s_tagEMR; ihPal: ulong; }
export type s_tagEMRRESIZEPALETTE = struct { emr: s_tagEMR; ihPal: ulong; cEntries: ulong; }
export type s_tagEMRSETPALETTEENTRIES = struct { emr: s_tagEMR; ihPal: ulong; iStart: ulong; cEntries: ulong; aPalEntries: [1; s_tagPALETTEENTRY]; }
export type s_tagEMRSETCOLORADJUSTMENT = struct { emr: s_tagEMR; ColorAdjustment: s_tagCOLORADJUSTMENT; }
export type s_tagEMRGDICOMMENT = struct { emr: s_tagEMR; cbData: ulong; Data: [1; uint8]; }
export type s_tagEMREOF = struct { emr: s_tagEMR; nPalEntries: ulong; offPalEntries: ulong; nSizeLast: ulong; }
export type s_tagEMRLINETO = struct { emr: s_tagEMR; ptl: s__POINTL; }
export type s_tagEMROFFSETCLIPRGN = struct { emr: s_tagEMR; ptlOffset: s__POINTL; }
export type s_tagEMRFILLPATH = struct { emr: s_tagEMR; rclBounds: s__RECTL; }
export type s_tagEMREXCLUDECLIPRECT = struct { emr: s_tagEMR; rclClip: s__RECTL; }
export type s_tagEMRSETVIEWPORTORGEX = struct { emr: s_tagEMR; ptlOrigin: s__POINTL; }
export type s_tagEMRSETVIEWPORTEXTEX = struct { emr: s_tagEMR; szlExtent: s_tagSIZE; }
export type s_tagEMRSCALEVIEWPORTEXTEX = struct { emr: s_tagEMR; xNum: long; xDenom: long; yNum: long; yDenom: long; }
export type s_tagEMRSETWORLDTRANSFORM = struct { emr: s_tagEMR; xform: s_tagXFORM; }
export type s_tagEMRMODIFYWORLDTRANSFORM = struct { emr: s_tagEMR; xform: s_tagXFORM; iMode: ulong; }
export type s_tagEMRSETPIXELV = struct { emr: s_tagEMR; ptlPixel: s__POINTL; crColor: ulong; }
export type s_tagEMREXTFLOODFILL = struct { emr: s_tagEMR; ptlStart: s__POINTL; crColor: ulong; iMode: ulong; }
export type s_tagEMRELLIPSE = struct { emr: s_tagEMR; rclBox: s__RECTL; }
export type s_tagEMRROUNDRECT = struct { emr: s_tagEMR; rclBox: s__RECTL; szlCorner: s_tagSIZE; }
export type s_tagEMRARC = struct { emr: s_tagEMR; rclBox: s__RECTL; ptlStart: s__POINTL; ptlEnd: s__POINTL; }
export type s_tagEMRANGLEARC = struct { emr: s_tagEMR; ptlCenter: s__POINTL; nRadius: ulong; eStartAngle: float; eSweepAngle: float; }
export type s_tagEMRPOLYLINE = struct { emr: s_tagEMR; rclBounds: s__RECTL; cptl: ulong; aptl: [1; s__POINTL]; }
export type s_tagEMRPOLYLINE16 = struct { emr: s_tagEMR; rclBounds: s__RECTL; cpts: ulong; apts: [1; s_tagPOINTS]; }
export type s_tagEMRPOLYDRAW = struct { emr: s_tagEMR; rclBounds: s__RECTL; cptl: ulong; aptl: [1; s__POINTL]; abTypes: [1; uint8]; }
export type s_tagEMRPOLYDRAW16 = struct { emr: s_tagEMR; rclBounds: s__RECTL; cpts: ulong; apts: [1; s_tagPOINTS]; abTypes: [1; uint8]; }
export type s_tagEMRPOLYPOLYLINE = struct { emr: s_tagEMR; rclBounds: s__RECTL; nPolys: ulong; cptl: ulong; aPolyCounts: [1; ulong]; aptl: [1; s__POINTL]; }
export type s_tagEMRPOLYPOLYLINE16 = struct { emr: s_tagEMR; rclBounds: s__RECTL; nPolys: ulong; cpts: ulong; aPolyCounts: [1; ulong]; apts: [1; s_tagPOINTS]; }
export type s_tagEMRINVERTRGN = struct { emr: s_tagEMR; rclBounds: s__RECTL; cbRgnData: ulong; RgnData: [1; uint8]; }
export type s_tagEMRFILLRGN = struct { emr: s_tagEMR; rclBounds: s__RECTL; cbRgnData: ulong; ihBrush: ulong; RgnData: [1; uint8]; }
export type s_tagEMRFRAMERGN = struct { emr: s_tagEMR; rclBounds: s__RECTL; cbRgnData: ulong; ihBrush: ulong; szlStroke: s_tagSIZE; RgnData: [1; uint8]; }
export type s_tagEMREXTSELECTCLIPRGN = struct { emr: s_tagEMR; cbRgnData: ulong; iMode: ulong; RgnData: [1; uint8]; }
export type s_tagEMREXTTEXTOUTA = struct { emr: s_tagEMR; rclBounds: s__RECTL; iGraphicsMode: ulong; exScale: float; eyScale: float; emrtext: s_tagEMRTEXT; }
export type s_tagEMRPOLYTEXTOUTA = struct { emr: s_tagEMR; rclBounds: s__RECTL; iGraphicsMode: ulong; exScale: float; eyScale: float; cStrings: long; aemrtext: [1; s_tagEMRTEXT]; }
export type s_tagEMRBITBLT = struct { emr: s_tagEMR; rclBounds: s__RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: s_tagXFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; }
export type s_tagEMRSTRETCHBLT = struct { emr: s_tagEMR; rclBounds: s__RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: s_tagXFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; cxSrc: long; cySrc: long; }
export type s_tagEMRMASKBLT = struct { emr: s_tagEMR; rclBounds: s__RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: s_tagXFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; xMask: long; yMask: long; iUsageMask: ulong; offBmiMask: ulong; cbBmiMask: ulong; offBitsMask: ulong; cbBitsMask: ulong; }
export type s_tagEMRPLGBLT = struct { emr: s_tagEMR; rclBounds: s__RECTL; aptlDest: [3; s__POINTL]; xSrc: long; ySrc: long; cxSrc: long; cySrc: long; xformSrc: s_tagXFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; xMask: long; yMask: long; iUsageMask: ulong; offBmiMask: ulong; cbBmiMask: ulong; offBitsMask: ulong; cbBitsMask: ulong; }
export type s_tagEMRSETDIBITSTODEVICE = struct { emr: s_tagEMR; rclBounds: s__RECTL; xDest: long; yDest: long; xSrc: long; ySrc: long; cxSrc: long; cySrc: long; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; iUsageSrc: ulong; iStartScan: ulong; cScans: ulong; }
export type s_tagEMRSTRETCHDIBITS = struct { emr: s_tagEMR; rclBounds: s__RECTL; xDest: long; yDest: long; xSrc: long; ySrc: long; cxSrc: long; cySrc: long; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; iUsageSrc: ulong; dwRop: ulong; cxDest: long; cyDest: long; }
export type s_tagEMREXTCREATEFONTINDIRECTW = struct { emr: s_tagEMR; ihFont: ulong; elfw: s_tagEXTLOGFONTW; }
export type s_tagEMRCREATEPALETTE = struct { emr: s_tagEMR; ihPal: ulong; lgpl: s_tagLOGPALETTE; }
export type s_tagEMRCREATEPEN = struct { emr: s_tagEMR; ihPen: ulong; lopn: s_tagLOGPEN; }
export type s_tagEMREXTCREATEPEN = struct { emr: s_tagEMR; ihPen: ulong; offBmi: ulong; cbBmi: ulong; offBits: ulong; cbBits: ulong; elp: s_tagEXTLOGPEN32; }
export type s_tagEMRCREATEBRUSHINDIRECT = struct { emr: s_tagEMR; ihBrush: ulong; lb: s_tagLOGBRUSH32; }
export type s_tagEMRCREATEMONOBRUSH = struct { emr: s_tagEMR; ihBrush: ulong; iUsage: ulong; offBmi: ulong; cbBmi: ulong; offBits: ulong; cbBits: ulong; }
export type s_tagEMRCREATEDIBPATTERNBRUSHPT = struct { emr: s_tagEMR; ihBrush: ulong; iUsage: ulong; offBmi: ulong; cbBmi: ulong; offBits: ulong; cbBits: ulong; }
export type s_tagEMRFORMAT = struct { dSignature: ulong; nVersion: ulong; cbData: ulong; offData: ulong; }
export type s_tagEMRGLSRECORD = struct { emr: s_tagEMR; cbData: ulong; Data: [1; uint8]; }
export type s_tagEMRGLSBOUNDEDRECORD = struct { emr: s_tagEMR; rclBounds: s__RECTL; cbData: ulong; Data: [1; uint8]; }
export type s_tagEMRPIXELFORMAT = struct { emr: s_tagEMR; pfd: s_tagPIXELFORMATDESCRIPTOR; }
export type s_tagEMRCREATECOLORSPACE = struct { emr: s_tagEMR; ihCS: ulong; lcs: s_tagLOGCOLORSPACEA; }
export type s_tagEMRSETCOLORSPACE = struct { emr: s_tagEMR; ihCS: ulong; }
export type s_tagEMREXTESCAPE = struct { emr: s_tagEMR; iEscape: int; cbEscData: int; EscData: [1; uint8]; }
export type s_tagEMRNAMEDESCAPE = struct { emr: s_tagEMR; iEscape: int; cbDriver: int; cbEscData: int; EscData: [1; uint8]; }
export type s_tagEMRSETICMPROFILE = struct { emr: s_tagEMR; dwFlags: ulong; cbName: ulong; cbData: ulong; Data: [1; uint8]; }
export type s_tagEMRCREATECOLORSPACEW = struct { emr: s_tagEMR; ihCS: ulong; lcs: s_tagLOGCOLORSPACEW; dwFlags: ulong; cbData: ulong; Data: [1; uint8]; }
export type s_tagCOLORMATCHTOTARGET = struct { emr: s_tagEMR; dwAction: ulong; dwFlags: ulong; cbName: ulong; cbData: ulong; Data: [1; uint8]; }
export type s_tagCOLORCORRECTPALETTE = struct { emr: s_tagEMR; ihPalette: ulong; nFirstEntry: ulong; nPalEntries: ulong; nReserved: ulong; }
export type s_tagEMRALPHABLEND = struct { emr: s_tagEMR; rclBounds: s__RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: s_tagXFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; cxSrc: long; cySrc: long; }
export type s_tagEMRGRADIENTFILL = struct { emr: s_tagEMR; rclBounds: s__RECTL; nVer: ulong; nTri: ulong; ulMode: ulong; Ver: [1; s__TRIVERTEX]; }
export type s_tagEMRTRANSPARENTBLT = struct { emr: s_tagEMR; rclBounds: s__RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: s_tagXFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; cxSrc: long; cySrc: long; }
export type s__POINTFLOAT = struct { x: float; y: float; }
export type s__GLYPHMETRICSFLOAT = struct { gmfBlackBoxX: float; gmfBlackBoxY: float; gmfptGlyphOrigin: s__POINTFLOAT; gmfCellIncX: float; gmfCellIncY: float; }
export type s_tagLAYERPLANEDESCRIPTOR = struct { nSize: ushort; nVersion: ushort; dwFlags: ulong; iPixelType: uint8; cColorBits: uint8; cRedBits: uint8; cRedShift: uint8; cGreenBits: uint8; cGreenShift: uint8; cBlueBits: uint8; cBlueShift: uint8; cAlphaBits: uint8; cAlphaShift: uint8; cAccumBits: uint8; cAccumRedBits: uint8; cAccumGreenBits: uint8; cAccumBlueBits: uint8; cAccumAlphaBits: uint8; cDepthBits: uint8; cStencilBits: uint8; cAuxBuffers: uint8; iLayerPlane: uint8; bReserved: uint8; crTransparent: ulong; }
export type s__WGLSWAP = struct { hdc: *s_HDC__; uiFlags: uint; }
export type s_tagCREATESTRUCTA
export type s_tagCBT_CREATEWNDA = struct { lpcs: *s_tagCREATESTRUCTA; hwndInsertAfter: *s_HWND__; }
export type s_tagCREATESTRUCTW
export type s_tagCBT_CREATEWNDW = struct { lpcs: *s_tagCREATESTRUCTW; hwndInsertAfter: *s_HWND__; }
export type s_tagCBTACTIVATESTRUCT = struct { fMouse: int; hWndActive: *s_HWND__; }
export type s_tagWTSSESSION_NOTIFICATION = struct { cbSize: ulong; dwSessionId: ulong; }
export type s_SHELLHOOKINFO = struct { hwnd: *s_HWND__; rc: s_tagRECT; }
export type SHELLHOOKINFO
export type s_tagEVENTMSG = struct { message: uint; paramL: uint; paramH: uint; time: ulong; hwnd: *s_HWND__; }
export type s_tagCWPSTRUCT = struct { lParam: int64; wParam: uint64; message: uint; hwnd: *s_HWND__; }
export type s_tagCWPRETSTRUCT = struct { lResult: int64; lParam: int64; wParam: uint64; message: uint; hwnd: *s_HWND__; }
export type s_tagKBDLLHOOKSTRUCT = struct { vkCode: ulong; scanCode: ulong; flags: ulong; time: ulong; dwExtraInfo: uint64; }
export type s_tagMSLLHOOKSTRUCT = struct { pt: s_tagPOINT; mouseData: ulong; flags: ulong; time: ulong; dwExtraInfo: uint64; }
export type s_tagDEBUGHOOKINFO = struct { idThread: ulong; idThreadInstaller: ulong; lParam: int64; wParam: uint64; code: int; }
export type s_tagMOUSEHOOKSTRUCT = struct { pt: s_tagPOINT; hwnd: *s_HWND__; wHitTestCode: uint; dwExtraInfo: uint64; }
export type s_tagMOUSEHOOKSTRUCTEX = struct { mouseData: ulong; }
export type s_tagHARDWAREHOOKSTRUCT = struct { hwnd: *s_HWND__; message: uint; wParam: uint64; lParam: int64; }
export type s_tagMOUSEMOVEPOINT = struct { x: int; y: int; time: ulong; dwExtraInfo: uint64; }
export type s_tagUSEROBJECTFLAGS = struct { fInherit: int; fReserved: int; dwFlags: ulong; }
export type s_tagWNDCLASSEXA = struct { cbSize: uint; style: uint; lpfnWndProc: def (*s_HWND__, uint, uint64, int64) -> (int64); cbClsExtra: int; cbWndExtra: int; hInstance: *s_HINSTANCE__; hIcon: *s_HICON__; hCursor: *s_HICON__; hbrBackground: *s_HBRUSH__; lpszMenuName: *char; lpszClassName: *char; hIconSm: *s_HICON__; }
export type s_tagWNDCLASSEXW = struct { cbSize: uint; style: uint; lpfnWndProc: def (*s_HWND__, uint, uint64, int64) -> (int64); cbClsExtra: int; cbWndExtra: int; hInstance: *s_HINSTANCE__; hIcon: *s_HICON__; hCursor: *s_HICON__; hbrBackground: *s_HBRUSH__; lpszMenuName: *ushort; lpszClassName: *ushort; hIconSm: *s_HICON__; }
export type s_tagWNDCLASSA = struct { style: uint; lpfnWndProc: def (*s_HWND__, uint, uint64, int64) -> (int64); cbClsExtra: int; cbWndExtra: int; hInstance: *s_HINSTANCE__; hIcon: *s_HICON__; hCursor: *s_HICON__; hbrBackground: *s_HBRUSH__; lpszMenuName: *char; lpszClassName: *char; }
export type s_tagWNDCLASSW = struct { style: uint; lpfnWndProc: def (*s_HWND__, uint, uint64, int64) -> (int64); cbClsExtra: int; cbWndExtra: int; hInstance: *s_HINSTANCE__; hIcon: *s_HICON__; hCursor: *s_HICON__; hbrBackground: *s_HBRUSH__; lpszMenuName: *ushort; lpszClassName: *ushort; }
export type s_tagMSG = struct { hwnd: *s_HWND__; message: uint; wParam: uint64; lParam: int64; time: ulong; pt: s_tagPOINT; }
export type s_tagMINMAXINFO = struct { ptReserved: s_tagPOINT; ptMaxSize: s_tagPOINT; ptMaxPosition: s_tagPOINT; ptMinTrackSize: s_tagPOINT; ptMaxTrackSize: s_tagPOINT; }
export type s_tagCOPYDATASTRUCT = struct { dwData: uint64; cbData: ulong; lpData: *; }
export type s_tagMDINEXTMENU = struct { hmenuIn: *s_HMENU__; hmenuNext: *s_HMENU__; hwndNext: *s_HWND__; }
export type s_POWERBROADCAST_SETTING = struct { PowerSetting: s__GUID; DataLength: ulong; Data: [1; uint8]; }
export type POWERBROADCAST_SETTING
export type s_tagWINDOWPOS = struct { hwnd: *s_HWND__; hwndInsertAfter: *s_HWND__; x: int; y: int; cx: int; cy: int; flags: uint; }
export type s_tagNCCALCSIZE_PARAMS = struct { rgrc: [3; s_tagRECT]; lppos: *s_tagWINDOWPOS; }
export type s_tagTRACKMOUSEEVENT = struct { cbSize: ulong; dwFlags: ulong; hwndTrack: *s_HWND__; dwHoverTime: ulong; }
export type s_tagACCEL = struct { fVirt: uint8; key: ushort; cmd: ushort; }
export type s_tagPAINTSTRUCT = struct { hdc: *s_HDC__; fErase: int; rcPaint: s_tagRECT; fRestore: int; fIncUpdate: int; rgbReserved: [32; uint8]; }
export type s_tagCREATESTRUCTA = struct { lpCreateParams: *; hInstance: *s_HINSTANCE__; hMenu: *s_HMENU__; hwndParent: *s_HWND__; cy: int; cx: int; y: int; x: int; style: long; lpszName: *char; lpszClass: *char; dwExStyle: ulong; }
export type s_tagCREATESTRUCTW = struct { lpCreateParams: *; hInstance: *s_HINSTANCE__; hMenu: *s_HMENU__; hwndParent: *s_HWND__; cy: int; cx: int; y: int; x: int; style: long; lpszName: *ushort; lpszClass: *ushort; dwExStyle: ulong; }
export type s_tagWINDOWPLACEMENT = struct { length: uint; flags: uint; showCmd: uint; ptMinPosition: s_tagPOINT; ptMaxPosition: s_tagPOINT; rcNormalPosition: s_tagRECT; }
export type s_tagNMHDR = struct { hwndFrom: *s_HWND__; idFrom: uint64; code: uint; }
export type s_tagSTYLESTRUCT = struct { styleOld: ulong; styleNew: ulong; }
export type s_tagMEASUREITEMSTRUCT = struct { CtlType: uint; CtlID: uint; itemID: uint; itemWidth: uint; itemHeight: uint; itemData: uint64; }
export type s_tagDRAWITEMSTRUCT = struct { CtlType: uint; CtlID: uint; itemID: uint; itemAction: uint; itemState: uint; hwndItem: *s_HWND__; hDC: *s_HDC__; rcItem: s_tagRECT; itemData: uint64; }
export type s_tagDELETEITEMSTRUCT = struct { CtlType: uint; CtlID: uint; itemID: uint; hwndItem: *s_HWND__; itemData: uint64; }
export type s_tagCOMPAREITEMSTRUCT = struct { CtlType: uint; CtlID: uint; hwndItem: *s_HWND__; itemID1: uint; itemData1: uint64; itemID2: uint; itemData2: uint64; dwLocaleId: ulong; }
export type s_BSMINFO = struct { cbSize: uint; hdesk: *s_HDESK__; hwnd: *s_HWND__; luid: s__LUID; }
export type BSMINFO
export type s_tagUPDATELAYEREDWINDOWINFO = struct { cbSize: ulong; hdcDst: *s_HDC__; pptDst: *s_tagPOINT; psize: *s_tagSIZE; hdcSrc: *s_HDC__; pptSrc: *s_tagPOINT; crKey: ulong; pblend: *s__BLENDFUNCTION; dwFlags: ulong; prcDirty: *s_tagRECT; }
export type s_FLASHWINFO = struct { cbSize: uint; hwnd: *s_HWND__; dwFlags: ulong; uCount: uint; dwTimeout: ulong; }
export type FLASHWINFO
export type s_DLGTEMPLATE = struct { style: ulong; dwExtendedStyle: ulong; cdit: ushort; x: short; y: short; cx: short; cy: short; }
export type s_DLGITEMTEMPLATE = struct { style: ulong; dwExtendedStyle: ulong; x: short; y: short; cx: short; cy: short; id: ushort; }
export type e_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = enum { DCDC_DEFAULT; DCDC_DISABLE_FONT_UPDATE = 1; DCDC_DISABLE_RELAYOUT = 2; }
export type e_DIALOG_DPI_CHANGE_BEHAVIORS = enum { DDC_DEFAULT; DDC_DISABLE_ALL = 1; DDC_DISABLE_RESIZE = 2; DDC_DISABLE_CONTROL_RELAYOUT = 4; }
export type s_tagGETCLIPBMETADATA = struct { Version: uint; IsDelayRendered: int; IsSynthetic: int; }
export type s_tagMOUSEINPUT = struct { dx: long; dy: long; mouseData: ulong; dwFlags: ulong; time: ulong; dwExtraInfo: uint64; }
export type s_tagKEYBDINPUT = struct { wVk: ushort; wScan: ushort; dwFlags: ulong; time: ulong; dwExtraInfo: uint64; }
export type s_tagHARDWAREINPUT = struct { uMsg: ulong; wParamL: ushort; wParamH: ushort; }
export type s_tagINPUT = struct { type_: ulong; struct #union { mi: s_tagMOUSEINPUT; ki: s_tagKEYBDINPUT; hi: s_tagHARDWAREINPUT; }; }
export type s_HTOUCHINPUT__
export type s_tagTOUCHINPUT = struct { x: long; y: long; hSource: *; dwID: ulong; dwFlags: ulong; dwMask: ulong; dwTime: ulong; dwExtraInfo: uint64; cxContact: ulong; cyContact: ulong; }
export type e_tagPOINTER_BUTTON_CHANGE_TYPE = enum { POINTER_CHANGE_NONE; POINTER_CHANGE_FIRSTBUTTON_DOWN = 1; POINTER_CHANGE_FIRSTBUTTON_UP = 2; POINTER_CHANGE_SECONDBUTTON_DOWN = 3; POINTER_CHANGE_SECONDBUTTON_UP = 4; POINTER_CHANGE_THIRDBUTTON_DOWN = 5; POINTER_CHANGE_THIRDBUTTON_UP = 6; POINTER_CHANGE_FOURTHBUTTON_DOWN = 7; POINTER_CHANGE_FOURTHBUTTON_UP = 8; POINTER_CHANGE_FIFTHBUTTON_DOWN = 9; POINTER_CHANGE_FIFTHBUTTON_UP = 10; }
export type s_tagPOINTER_INFO = struct { pointerType: ulong; pointerId: uint; frameId: uint; pointerFlags: uint; sourceDevice: *; hwndTarget: *s_HWND__; ptPixelLocation: s_tagPOINT; ptHimetricLocation: s_tagPOINT; ptPixelLocationRaw: s_tagPOINT; ptHimetricLocationRaw: s_tagPOINT; dwTime: ulong; historyCount: uint; InputData: int; dwKeyStates: ulong; PerformanceCount: uint64; ButtonChangeType: e_tagPOINTER_BUTTON_CHANGE_TYPE; }
export type s_tagPOINTER_TOUCH_INFO = struct { pointerInfo: s_tagPOINTER_INFO; touchFlags: uint; touchMask: uint; rcContact: s_tagRECT; rcContactRaw: s_tagRECT; orientation: uint; pressure: uint; }
export type s_tagPOINTER_PEN_INFO = struct { pointerInfo: s_tagPOINTER_INFO; penFlags: uint; penMask: uint; pressure: uint; rotation: uint; tiltX: int; tiltY: int; }
export type e_POINTER_FEEDBACK_MODE = enum { POINTER_FEEDBACK_DEFAULT = 1; POINTER_FEEDBACK_INDIRECT = 2; POINTER_FEEDBACK_NONE = 3; }
export type s_tagUSAGE_PROPERTIES = struct { level: ushort; page: ushort; usage: ushort; logicalMinimum: int; logicalMaximum: int; unit: ushort; exponent: ushort; count: uint8; physicalMinimum: int; physicalMaximum: int; }
export type s_tagPOINTER_TYPE_INFO = struct { type_: ulong; struct #union { touchInfo: s_tagPOINTER_TOUCH_INFO; penInfo: s_tagPOINTER_PEN_INFO; }; }
export type s_tagINPUT_INJECTION_VALUE = struct { page: ushort; usage: ushort; value: int; index: ushort; }
export type s_HSYNTHETICPOINTERDEVICE__
export type s_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = struct { score: ushort; adjustedPoint: s_tagPOINT; }
export type s_tagTOUCH_HIT_TESTING_INPUT = struct { pointerId: uint; point: s_tagPOINT; boundingBox: s_tagRECT; nonOccludedBoundingBox: s_tagRECT; orientation: uint; }
export type e_tagFEEDBACK_TYPE = enum { FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1; FEEDBACK_PEN_BARRELVISUALIZATION = 2; FEEDBACK_PEN_TAP = 3; FEEDBACK_PEN_DOUBLETAP = 4; FEEDBACK_PEN_PRESSANDHOLD = 5; FEEDBACK_PEN_RIGHTTAP = 6; FEEDBACK_TOUCH_TAP = 7; FEEDBACK_TOUCH_DOUBLETAP = 8; FEEDBACK_TOUCH_PRESSANDHOLD = 9; FEEDBACK_TOUCH_RIGHTTAP = 10; FEEDBACK_GESTURE_PRESSANDTAP = 11; FEEDBACK_MAX = -1; }
export type s_tagINPUT_TRANSFORM = struct { struct #union { struct { _11: float; _12: float; _13: float; _14: float; _21: float; _22: float; _23: float; _24: float; _31: float; _32: float; _33: float; _34: float; _41: float; _42: float; _43: float; _44: float; }; m: [4; [4; float]]; }; }
export type s_tagLASTINPUTINFO = struct { cbSize: uint; dwTime: ulong; }
export type s_tagTPMPARAMS = struct { cbSize: uint; rcExclude: s_tagRECT; }
export type s_tagMENUINFO = struct { cbSize: ulong; fMask: ulong; dwStyle: ulong; cyMax: uint; hbrBack: *s_HBRUSH__; dwContextHelpID: ulong; dwMenuData: uint64; }
export type s_tagMENUGETOBJECTINFO = struct { dwFlags: ulong; uPos: uint; hmenu: *s_HMENU__; riid: *; pvObj: *; }
export type s_tagMENUITEMINFOA = struct { cbSize: uint; fMask: uint; fType: uint; fState: uint; wID: uint; hSubMenu: *s_HMENU__; hbmpChecked: *s_HBITMAP__; hbmpUnchecked: *s_HBITMAP__; dwItemData: uint64; dwTypeData: *char; cch: uint; hbmpItem: *s_HBITMAP__; }
export type s_tagMENUITEMINFOW = struct { cbSize: uint; fMask: uint; fType: uint; fState: uint; wID: uint; hSubMenu: *s_HMENU__; hbmpChecked: *s_HBITMAP__; hbmpUnchecked: *s_HBITMAP__; dwItemData: uint64; dwTypeData: *ushort; cch: uint; hbmpItem: *s_HBITMAP__; }
export type s_tagDROPSTRUCT = struct { hwndSource: *s_HWND__; hwndSink: *s_HWND__; wFmt: ulong; dwData: uint64; ptDrop: s_tagPOINT; dwControlData: ulong; }
export type s_tagDRAWTEXTPARAMS = struct { cbSize: uint; iTabLength: int; iLeftMargin: int; iRightMargin: int; uiLengthDrawn: uint; }
export type s_tagHELPINFO = struct { cbSize: uint; iContextType: int; iCtrlId: int; hItemHandle: *; dwContextId: uint64; MousePos: s_tagPOINT; }
export type s_tagMSGBOXPARAMSA = struct { cbSize: uint; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpszText: *char; lpszCaption: *char; dwStyle: ulong; lpszIcon: *char; dwContextHelpId: uint64; lpfnMsgBoxCallback: def (*s_tagHELPINFO) -> (); dwLanguageId: ulong; }
export type s_tagMSGBOXPARAMSW = struct { cbSize: uint; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpszText: *ushort; lpszCaption: *ushort; dwStyle: ulong; lpszIcon: *ushort; dwContextHelpId: uint64; lpfnMsgBoxCallback: def (*s_tagHELPINFO) -> (); dwLanguageId: ulong; }
export type s_MENUITEMTEMPLATEHEADER = struct { versionNumber: ushort; offset: ushort; }
export type MENUITEMTEMPLATEHEADER
export type s_MENUITEMTEMPLATE = struct { mtOption: ushort; mtID: ushort; mtString: [1; ushort]; }
export type MENUITEMTEMPLATE
export type s__ICONINFO = struct { fIcon: int; xHotspot: ulong; yHotspot: ulong; hbmMask: *s_HBITMAP__; hbmColor: *s_HBITMAP__; }
export type s_tagCURSORSHAPE = struct { xHotSpot: int; yHotSpot: int; cx: int; cy: int; cbWidth: int; Planes: uint8; BitsPixel: uint8; }
export type s__ICONINFOEXA = struct { cbSize: ulong; fIcon: int; xHotspot: ulong; yHotspot: ulong; hbmMask: *s_HBITMAP__; hbmColor: *s_HBITMAP__; wResID: ushort; szModName: [260; char]; szResName: [260; char]; }
export type s__ICONINFOEXW = struct { cbSize: ulong; fIcon: int; xHotspot: ulong; yHotspot: ulong; hbmMask: *s_HBITMAP__; hbmColor: *s_HBITMAP__; wResID: ushort; szModName: [260; ushort]; szResName: [260; ushort]; }
export type e_EDIT_CONTROL_FEATURE = enum { EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT; EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1; }
export type s_tagSCROLLINFO = struct { cbSize: uint; fMask: uint; nMin: int; nMax: int; nPage: uint; nPos: int; nTrackPos: int; }
export type s_tagMDICREATESTRUCTA = struct { szClass: *char; szTitle: *char; hOwner: *; x: int; y: int; cx: int; cy: int; style: ulong; lParam: int64; }
export type s_tagMDICREATESTRUCTW = struct { szClass: *ushort; szTitle: *ushort; hOwner: *; x: int; y: int; cx: int; cy: int; style: ulong; lParam: int64; }
export type s_tagCLIENTCREATESTRUCT = struct { hWindowMenu: *; idFirstChild: uint; }
export type s_tagMULTIKEYHELPA = struct { mkSize: ulong; mkKeylist: char; szKeyphrase: [1; char]; }
export type s_tagMULTIKEYHELPW = struct { mkSize: ulong; mkKeylist: ushort; szKeyphrase: [1; ushort]; }
export type s_tagHELPWININFOA = struct { wStructSize: int; x: int; y: int; dx: int; dy: int; wMax: int; rgchMember: [2; char]; }
export type s_tagHELPWININFOW = struct { wStructSize: int; x: int; y: int; dx: int; dy: int; wMax: int; rgchMember: [2; ushort]; }
export type s_tagTouchPredictionParameters = struct { cbSize: uint; dwLatency: uint; dwSampleTime: uint; bUseHWTimeStamp: uint; }
export type e_tagHANDEDNESS = enum { HANDEDNESS_LEFT; HANDEDNESS_RIGHT = 1; }
export type s_tagNONCLIENTMETRICSA = struct { cbSize: uint; iBorderWidth: int; iScrollWidth: int; iScrollHeight: int; iCaptionWidth: int; iCaptionHeight: int; lfCaptionFont: s_tagLOGFONTA; iSmCaptionWidth: int; iSmCaptionHeight: int; lfSmCaptionFont: s_tagLOGFONTA; iMenuWidth: int; iMenuHeight: int; lfMenuFont: s_tagLOGFONTA; lfStatusFont: s_tagLOGFONTA; lfMessageFont: s_tagLOGFONTA; iPaddedBorderWidth: int; }
export type s_tagNONCLIENTMETRICSW = struct { cbSize: uint; iBorderWidth: int; iScrollWidth: int; iScrollHeight: int; iCaptionWidth: int; iCaptionHeight: int; lfCaptionFont: s_tagLOGFONTW; iSmCaptionWidth: int; iSmCaptionHeight: int; lfSmCaptionFont: s_tagLOGFONTW; iMenuWidth: int; iMenuHeight: int; lfMenuFont: s_tagLOGFONTW; lfStatusFont: s_tagLOGFONTW; lfMessageFont: s_tagLOGFONTW; iPaddedBorderWidth: int; }
export type s_tagMINIMIZEDMETRICS = struct { cbSize: uint; iWidth: int; iHorzGap: int; iVertGap: int; iArrange: int; }
export type s_tagICONMETRICSA = struct { cbSize: uint; iHorzSpacing: int; iVertSpacing: int; iTitleWrap: int; lfFont: s_tagLOGFONTA; }
export type s_tagICONMETRICSW = struct { cbSize: uint; iHorzSpacing: int; iVertSpacing: int; iTitleWrap: int; lfFont: s_tagLOGFONTW; }
export type s_tagANIMATIONINFO = struct { cbSize: uint; iMinAnimate: int; }
export type s_tagSERIALKEYSA = struct { cbSize: uint; dwFlags: ulong; lpszActivePort: *char; lpszPort: *char; iBaudRate: uint; iPortState: uint; iActive: uint; }
export type s_tagSERIALKEYSW = struct { cbSize: uint; dwFlags: ulong; lpszActivePort: *ushort; lpszPort: *ushort; iBaudRate: uint; iPortState: uint; iActive: uint; }
export type s_tagHIGHCONTRASTA = struct { cbSize: uint; dwFlags: ulong; lpszDefaultScheme: *char; }
export type s_tagHIGHCONTRASTW = struct { cbSize: uint; dwFlags: ulong; lpszDefaultScheme: *ushort; }
export type s__VIDEOPARAMETERS = struct { Guid: s__GUID; dwOffset: ulong; dwCommand: ulong; dwFlags: ulong; dwMode: ulong; dwTVStandard: ulong; dwAvailableModes: ulong; dwAvailableTVStandard: ulong; dwFlickerFilter: ulong; dwOverScanX: ulong; dwOverScanY: ulong; dwMaxUnscaledX: ulong; dwMaxUnscaledY: ulong; dwPositionX: ulong; dwPositionY: ulong; dwBrightness: ulong; dwContrast: ulong; dwCPType: ulong; dwCPCommand: ulong; dwCPStandard: ulong; dwCPKey: ulong; bCP_APSTriggerBits: ulong; bOEMCopyProtection: [256; uint8]; }
export type s_tagFILTERKEYS = struct { cbSize: uint; dwFlags: ulong; iWaitMSec: ulong; iDelayMSec: ulong; iRepeatMSec: ulong; iBounceMSec: ulong; }
export type s_tagSTICKYKEYS = struct { cbSize: uint; dwFlags: ulong; }
export type s_tagMOUSEKEYS = struct { cbSize: uint; dwFlags: ulong; iMaxSpeed: ulong; iTimeToMaxSpeed: ulong; iCtrlSpeed: ulong; dwReserved1: ulong; dwReserved2: ulong; }
export type s_tagACCESSTIMEOUT = struct { cbSize: uint; dwFlags: ulong; iTimeOutMSec: ulong; }
export type s_tagSOUNDSENTRYA = struct { cbSize: uint; dwFlags: ulong; iFSTextEffect: ulong; iFSTextEffectMSec: ulong; iFSTextEffectColorBits: ulong; iFSGrafEffect: ulong; iFSGrafEffectMSec: ulong; iFSGrafEffectColor: ulong; iWindowsEffect: ulong; iWindowsEffectMSec: ulong; lpszWindowsEffectDLL: *char; iWindowsEffectOrdinal: ulong; }
export type s_tagSOUNDSENTRYW = struct { cbSize: uint; dwFlags: ulong; iFSTextEffect: ulong; iFSTextEffectMSec: ulong; iFSTextEffectColorBits: ulong; iFSGrafEffect: ulong; iFSGrafEffectMSec: ulong; iFSGrafEffectColor: ulong; iWindowsEffect: ulong; iWindowsEffectMSec: ulong; lpszWindowsEffectDLL: *ushort; iWindowsEffectOrdinal: ulong; }
export type s_tagTOGGLEKEYS = struct { cbSize: uint; dwFlags: ulong; }
export type s_tagAUDIODESCRIPTION = struct { cbSize: uint; Enabled: int; Locale: ulong; }
export type s_tagMONITORINFO = struct { cbSize: ulong; rcMonitor: s_tagRECT; rcWork: s_tagRECT; dwFlags: ulong; }
export type s_tagMONITORINFOEXA = struct { szDevice: [32; char]; }
export type s_tagMONITORINFOEXW = struct { szDevice: [32; ushort]; }
export type s_tagGUITHREADINFO = struct { cbSize: ulong; flags: ulong; hwndActive: *s_HWND__; hwndFocus: *s_HWND__; hwndCapture: *s_HWND__; hwndMenuOwner: *s_HWND__; hwndMoveSize: *s_HWND__; hwndCaret: *s_HWND__; rcCaret: s_tagRECT; }
export type s_tagCURSORINFO = struct { cbSize: ulong; flags: ulong; hCursor: *s_HICON__; ptScreenPos: s_tagPOINT; }
export type s_tagWINDOWINFO = struct { cbSize: ulong; rcWindow: s_tagRECT; rcClient: s_tagRECT; dwStyle: ulong; dwExStyle: ulong; dwWindowStatus: ulong; cxWindowBorders: uint; cyWindowBorders: uint; atomWindowType: ushort; wCreatorVersion: ushort; }
export type s_tagTITLEBARINFO = struct { cbSize: ulong; rcTitleBar: s_tagRECT; rgstate: [6; ulong]; }
export type s_tagTITLEBARINFOEX = struct { cbSize: ulong; rcTitleBar: s_tagRECT; rgstate: [6; ulong]; rgrect: [6; s_tagRECT]; }
export type s_tagMENUBARINFO = struct { cbSize: ulong; rcBar: s_tagRECT; hMenu: *s_HMENU__; hwndMenu: *s_HWND__; #bits(1) fBarFocused: int; #bits(1) fFocused: int; #bits(30) fUnused: int; }
export type s_tagSCROLLBARINFO = struct { cbSize: ulong; rcScrollBar: s_tagRECT; dxyLineButton: int; xyThumbTop: int; xyThumbBottom: int; reserved: int; rgstate: [6; ulong]; }
export type s_tagCOMBOBOXINFO = struct { cbSize: ulong; rcItem: s_tagRECT; rcButton: s_tagRECT; stateButton: ulong; hwndCombo: *s_HWND__; hwndItem: *s_HWND__; hwndList: *s_HWND__; }
export type s_tagALTTABINFO = struct { cbSize: ulong; cItems: int; cColumns: int; cRows: int; iColFocus: int; iRowFocus: int; cxItem: int; cyItem: int; ptStart: s_tagPOINT; }
export type s_HRAWINPUT__
export type s_tagRAWINPUTHEADER = struct { dwType: ulong; dwSize: ulong; hDevice: *; wParam: uint64; }
export type s_tagRAWMOUSE = struct { usFlags: ushort; struct #union { ulButtons: ulong; struct { usButtonFlags: ushort; usButtonData: ushort; }; }; ulRawButtons: ulong; lLastX: long; lLastY: long; ulExtraInformation: ulong; }
export type s_tagRAWKEYBOARD = struct { MakeCode: ushort; Flags: ushort; Reserved: ushort; VKey: ushort; Message: uint; ExtraInformation: ulong; }
export type s_tagRAWHID = struct { dwSizeHid: ulong; dwCount: ulong; bRawData: [1; uint8]; }
export type s_tagRAWINPUT = struct { header: s_tagRAWINPUTHEADER; data: struct #union { mouse: s_tagRAWMOUSE; keyboard: s_tagRAWKEYBOARD; hid: s_tagRAWHID; }; }
export type s_tagRID_DEVICE_INFO_MOUSE = struct { dwId: ulong; dwNumberOfButtons: ulong; dwSampleRate: ulong; fHasHorizontalWheel: int; }
export type s_tagRID_DEVICE_INFO_KEYBOARD = struct { dwType: ulong; dwSubType: ulong; dwKeyboardMode: ulong; dwNumberOfFunctionKeys: ulong; dwNumberOfIndicators: ulong; dwNumberOfKeysTotal: ulong; }
export type s_tagRID_DEVICE_INFO_HID = struct { dwVendorId: ulong; dwProductId: ulong; dwVersionNumber: ulong; usUsagePage: ushort; usUsage: ushort; }
export type s_tagRID_DEVICE_INFO = struct { cbSize: ulong; dwType: ulong; struct #union { mouse: s_tagRID_DEVICE_INFO_MOUSE; keyboard: s_tagRID_DEVICE_INFO_KEYBOARD; hid: s_tagRID_DEVICE_INFO_HID; }; }
export type s_tagRAWINPUTDEVICE = struct { usUsagePage: ushort; usUsage: ushort; dwFlags: ulong; hwndTarget: *s_HWND__; }
export type s_tagRAWINPUTDEVICELIST = struct { hDevice: *; dwType: ulong; }
export type e_tagPOINTER_DEVICE_TYPE = enum { POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1; POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2; POINTER_DEVICE_TYPE_TOUCH = 3; POINTER_DEVICE_TYPE_TOUCH_PAD = 4; POINTER_DEVICE_TYPE_MAX = -1; }
export type s_tagPOINTER_DEVICE_INFO = struct { displayOrientation: ulong; device: *; pointerDeviceType: e_tagPOINTER_DEVICE_TYPE; monitor: *s_HMONITOR__; startingCursorId: ulong; maxActiveContacts: ushort; productString: [520; ushort]; }
export type s_tagPOINTER_DEVICE_PROPERTY = struct { logicalMin: int; logicalMax: int; physicalMin: int; physicalMax: int; unit: uint; unitExponent: uint; usagePageId: ushort; usageId: ushort; }
export type e_tagPOINTER_DEVICE_CURSOR_TYPE = enum { POINTER_DEVICE_CURSOR_TYPE_UNKNOWN; POINTER_DEVICE_CURSOR_TYPE_TIP = 1; POINTER_DEVICE_CURSOR_TYPE_ERASER = 2; POINTER_DEVICE_CURSOR_TYPE_MAX = -1; }
export type s_tagPOINTER_DEVICE_CURSOR_INFO = struct { cursorId: uint; cursor: e_tagPOINTER_DEVICE_CURSOR_TYPE; }
export type s_tagCHANGEFILTERSTRUCT = struct { cbSize: ulong; ExtStatus: ulong; }
export type s_HGESTUREINFO__
export type s_tagGESTUREINFO = struct { cbSize: uint; dwFlags: ulong; dwID: ulong; hwndTarget: *s_HWND__; ptsLocation: s_tagPOINTS; dwInstanceID: ulong; dwSequenceID: ulong; ullArguments: uint64; cbExtraArgs: uint; }
export type s_tagGESTURENOTIFYSTRUCT = struct { cbSize: uint; dwFlags: ulong; hwndTarget: *s_HWND__; ptsLocation: s_tagPOINTS; dwInstanceID: ulong; }
export type s_tagGESTURECONFIG = struct { dwID: ulong; dwWant: ulong; dwBlock: ulong; }
export type e_tagINPUT_MESSAGE_DEVICE_TYPE = enum { IMDT_UNAVAILABLE; IMDT_KEYBOARD = 1; IMDT_MOUSE = 2; IMDT_TOUCH = 4; IMDT_PEN = 8; IMDT_TOUCHPAD = 16; }
export type e_tagINPUT_MESSAGE_ORIGIN_ID = enum { IMO_UNAVAILABLE; IMO_HARDWARE = 1; IMO_INJECTED = 2; IMO_SYSTEM = 4; }
export type s_tagINPUT_MESSAGE_SOURCE = struct { deviceType: e_tagINPUT_MESSAGE_DEVICE_TYPE; originId: e_tagINPUT_MESSAGE_ORIGIN_ID; }
export type e_tagAR_STATE = enum { AR_ENABLED; AR_DISABLED = 1; AR_SUPPRESSED = 2; AR_REMOTESESSION = 4; AR_MULTIMON = 8; AR_NOSENSOR = 16; AR_NOT_SUPPORTED = 32; AR_DOCKED = 64; AR_LAPTOP = 128; }
export type e_ORIENTATION_PREFERENCE = enum { ORIENTATION_PREFERENCE_NONE; ORIENTATION_PREFERENCE_LANDSCAPE = 1; ORIENTATION_PREFERENCE_PORTRAIT = 2; ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4; ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8; }
export type e_TOOLTIP_DISMISS_FLAGS = enum { TDF_REGISTER = 1; TDF_UNREGISTER = 2; }
export type s__cpinfo = struct { MaxCharSize: uint; DefaultChar: [2; uint8]; LeadByte: [12; uint8]; }
export type s__cpinfoexA = struct { MaxCharSize: uint; DefaultChar: [2; uint8]; LeadByte: [12; uint8]; UnicodeDefaultChar: ushort; CodePage: uint; CodePageName: [260; char]; }
export type s__cpinfoexW = struct { MaxCharSize: uint; DefaultChar: [2; uint8]; LeadByte: [12; uint8]; UnicodeDefaultChar: ushort; CodePage: uint; CodePageName: [260; ushort]; }
export type s__numberfmtA = struct { NumDigits: uint; LeadingZero: uint; Grouping: uint; lpDecimalSep: *char; lpThousandSep: *char; NegativeOrder: uint; }
export type s__numberfmtW = struct { NumDigits: uint; LeadingZero: uint; Grouping: uint; lpDecimalSep: *ushort; lpThousandSep: *ushort; NegativeOrder: uint; }
export type s__currencyfmtA = struct { NumDigits: uint; LeadingZero: uint; Grouping: uint; lpDecimalSep: *char; lpThousandSep: *char; NegativeOrder: uint; PositiveOrder: uint; lpCurrencySymbol: *char; }
export type s__currencyfmtW = struct { NumDigits: uint; LeadingZero: uint; Grouping: uint; lpDecimalSep: *ushort; lpThousandSep: *ushort; NegativeOrder: uint; PositiveOrder: uint; lpCurrencySymbol: *ushort; }
export type s__nlsversioninfo = struct { dwNLSVersionInfoSize: ulong; dwNLSVersion: ulong; dwDefinedVersion: ulong; dwEffectiveId: ulong; guidCustomVersion: s__GUID; }
export type s__nlsversioninfoex = struct { dwNLSVersionInfoSize: ulong; dwNLSVersion: ulong; dwDefinedVersion: ulong; dwEffectiveId: ulong; guidCustomVersion: s__GUID; }
export type e__NORM_FORM = enum { NormalizationOther; NormalizationC = 1; NormalizationD = 2; NormalizationKC = 5; NormalizationKD = 6; }
export type s__FILEMUIINFO = struct { dwSize: ulong; dwVersion: ulong; dwFileType: ulong; pChecksum: [16; uint8]; pServiceChecksum: [16; uint8]; dwLanguageNameOffset: ulong; dwTypeIDMainSize: ulong; dwTypeIDMainOffset: ulong; dwTypeNameMainOffset: ulong; dwTypeIDMUISize: ulong; dwTypeIDMUIOffset: ulong; dwTypeNameMUIOffset: ulong; abBuffer: [8; uint8]; }
export type s_HSAVEDUILANGUAGES__
export type s__COORD = struct { X: short; Y: short; }
export type s__SMALL_RECT = struct { Left: short; Top: short; Right: short; Bottom: short; }
export type s__KEY_EVENT_RECORD = struct { bKeyDown: int; wRepeatCount: ushort; wVirtualKeyCode: ushort; wVirtualScanCode: ushort; uChar: struct #union { UnicodeChar: ushort; AsciiChar: char; }; dwControlKeyState: ulong; }
export type s__MOUSE_EVENT_RECORD = struct { dwMousePosition: s__COORD; dwButtonState: ulong; dwControlKeyState: ulong; dwEventFlags: ulong; }
export type s__WINDOW_BUFFER_SIZE_RECORD = struct { dwSize: s__COORD; }
export type s__MENU_EVENT_RECORD = struct { dwCommandId: uint; }
export type s__FOCUS_EVENT_RECORD = struct { bSetFocus: int; }
export type s__INPUT_RECORD = struct { EventType: ushort; Event: struct #union { KeyEvent: s__KEY_EVENT_RECORD; MouseEvent: s__MOUSE_EVENT_RECORD; WindowBufferSizeEvent: s__WINDOW_BUFFER_SIZE_RECORD; MenuEvent: s__MENU_EVENT_RECORD; FocusEvent: s__FOCUS_EVENT_RECORD; }; }
export type s__CHAR_INFO = struct { Char: struct #union { UnicodeChar: ushort; AsciiChar: char; }; Attributes: ushort; }
export type s__CONSOLE_FONT_INFO = struct { nFont: ulong; dwFontSize: s__COORD; }
export type s__CONSOLE_READCONSOLE_CONTROL = struct { nLength: ulong; nInitialChars: ulong; dwCtrlWakeupMask: ulong; dwControlKeyState: ulong; }
export type s__CONSOLE_CURSOR_INFO = struct { dwSize: ulong; bVisible: int; }
export type s__CONSOLE_SCREEN_BUFFER_INFO = struct { dwSize: s__COORD; dwCursorPosition: s__COORD; wAttributes: ushort; srWindow: s__SMALL_RECT; dwMaximumWindowSize: s__COORD; }
export type s__CONSOLE_SCREEN_BUFFER_INFOEX = struct { cbSize: ulong; dwSize: s__COORD; dwCursorPosition: s__COORD; wAttributes: ushort; srWindow: s__SMALL_RECT; dwMaximumWindowSize: s__COORD; wPopupAttributes: ushort; bFullscreenSupported: int; ColorTable: [16; ulong]; }
export type s__CONSOLE_FONT_INFOEX = struct { cbSize: ulong; nFont: ulong; dwFontSize: s__COORD; FontFamily: uint; FontWeight: uint; FaceName: [32; ushort]; }
export type s__CONSOLE_SELECTION_INFO = struct { dwFlags: ulong; dwSelectionAnchor: s__COORD; srSelection: s__SMALL_RECT; }
export type s__CONSOLE_HISTORY_INFO = struct { cbSize: uint; HistoryBufferSize: uint; NumberOfHistoryBuffers: uint; dwFlags: ulong; }
export type s_tagVS_FIXEDFILEINFO = struct { dwSignature: ulong; dwStrucVersion: ulong; dwFileVersionMS: ulong; dwFileVersionLS: ulong; dwProductVersionMS: ulong; dwProductVersionLS: ulong; dwFileFlagsMask: ulong; dwFileFlags: ulong; dwFileOS: ulong; dwFileType: ulong; dwFileSubtype: ulong; dwFileDateMS: ulong; dwFileDateLS: ulong; }
export type s_val_context
export type s_pvalueA = struct { pv_valuename: *char; pv_valuelen: int; pv_value_context: *; pv_type: ulong; }
export type s_pvalueW = struct { pv_valuename: *ushort; pv_valuelen: int; pv_value_context: *; pv_type: ulong; }
export type s_provider_info = struct { pi_R0_1val: def (*, *s_val_context, ulong, *, *ulong, ulong) -> (ulong); pi_R0_allvals: def (*, *s_val_context, ulong, *, *ulong, ulong) -> (ulong); pi_R3_1val: def (*, *s_val_context, ulong, *, *ulong, ulong) -> (ulong); pi_R3_allvals: def (*, *s_val_context, ulong, *, *ulong, ulong) -> (ulong); pi_flags: ulong; pi_key_context: *; }
export type s_value_entA = struct { ve_valuename: *char; ve_valuelen: ulong; ve_valueptr: uint64; ve_type: ulong; }
export type s_value_entW = struct { ve_valuename: *ushort; ve_valuelen: ulong; ve_valueptr: uint64; ve_type: ulong; }
export type s__NETRESOURCEA = struct { dwScope: ulong; dwType: ulong; dwDisplayType: ulong; dwUsage: ulong; lpLocalName: *char; lpRemoteName: *char; lpComment: *char; lpProvider: *char; }
export type s__NETRESOURCEW = struct { dwScope: ulong; dwType: ulong; dwDisplayType: ulong; dwUsage: ulong; lpLocalName: *ushort; lpRemoteName: *ushort; lpComment: *ushort; lpProvider: *ushort; }
export type s__CONNECTDLGSTRUCTA = struct { cbStructure: ulong; hwndOwner: *s_HWND__; lpConnRes: *s__NETRESOURCEA; dwFlags: ulong; dwDevNum: ulong; }
export type s__CONNECTDLGSTRUCTW = struct { cbStructure: ulong; hwndOwner: *s_HWND__; lpConnRes: *s__NETRESOURCEW; dwFlags: ulong; dwDevNum: ulong; }
export type s__DISCDLGSTRUCTA = struct { cbStructure: ulong; hwndOwner: *s_HWND__; lpLocalName: *char; lpRemoteName: *char; dwFlags: ulong; }
export type s__DISCDLGSTRUCTW = struct { cbStructure: ulong; hwndOwner: *s_HWND__; lpLocalName: *ushort; lpRemoteName: *ushort; dwFlags: ulong; }
export type s__UNIVERSAL_NAME_INFOA = struct { lpUniversalName: *char; }
export type s__UNIVERSAL_NAME_INFOW = struct { lpUniversalName: *ushort; }
export type s__REMOTE_NAME_INFOA = struct { lpUniversalName: *char; lpConnectionName: *char; lpRemainingPath: *char; }
export type s__REMOTE_NAME_INFOW = struct { lpUniversalName: *ushort; lpConnectionName: *ushort; lpRemainingPath: *ushort; }
export type s__NETINFOSTRUCT = struct { cbStructure: ulong; dwProviderVersion: ulong; dwStatus: ulong; dwCharacteristics: ulong; dwHandle: uint64; wNetType: ushort; dwPrinters: ulong; dwDrives: ulong; }
export type s__NETCONNECTINFOSTRUCT = struct { cbStructure: ulong; dwFlags: ulong; dwSpeed: ulong; dwDelay: ulong; dwOptDataSize: ulong; }
export type s_DDEACK = struct { #bits(8) bAppReturnCode: ushort; #bits(6) reserved: ushort; #bits(1) fBusy: ushort; #bits(1) fAck: ushort; }
export type s_DDEADVISE = struct { #bits(14) reserved: ushort; #bits(1) fDeferUpd: ushort; #bits(1) fAckReq: ushort; cfFormat: short; }
export type s_DDEDATA = struct { #bits(12) unused: ushort; #bits(1) fResponse: ushort; #bits(1) fRelease: ushort; #bits(1) reserved: ushort; #bits(1) fAckReq: ushort; cfFormat: short; Value: [1; uint8]; }
export type s_DDEPOKE = struct { #bits(13) unused: ushort; #bits(1) fRelease: ushort; #bits(2) fReserved: ushort; cfFormat: short; Value: [1; uint8]; }
export type s_DDELN = struct { #bits(13) unused: ushort; #bits(1) fRelease: ushort; #bits(1) fDeferUpd: ushort; #bits(1) fAckReq: ushort; cfFormat: short; }
export type s_DDEUP = struct { #bits(12) unused: ushort; #bits(1) fAck: ushort; #bits(1) fRelease: ushort; #bits(1) fReserved: ushort; #bits(1) fAckReq: ushort; cfFormat: short; rgb: [1; uint8]; }
export type s_HCONVLIST__
export type s_HCONV__
export type s_HSZ__
export type s_HDDEDATA__
export type s_tagHSZPAIR = struct { hszSvc: *s_HSZ__; hszTopic: *s_HSZ__; }
export type s_tagCONVCONTEXT = struct { cb: uint; wFlags: uint; wCountryID: uint; iCodePage: int; dwLangID: ulong; dwSecurity: ulong; qos: s__SECURITY_QUALITY_OF_SERVICE; }
export type s_tagCONVINFO = struct { cb: ulong; hUser: uint64; hConvPartner: *s_HCONV__; hszSvcPartner: *s_HSZ__; hszServiceReq: *s_HSZ__; hszTopic: *s_HSZ__; hszItem: *s_HSZ__; wFmt: uint; wType: uint; wStatus: uint; wConvst: uint; wLastError: uint; hConvList: *s_HCONVLIST__; ConvCtxt: s_tagCONVCONTEXT; hwnd: *s_HWND__; hwndPartner: *s_HWND__; }
export type s_tagDDEML_MSG_HOOK_DATA = struct { uiLo: uint64; uiHi: uint64; cbData: ulong; Data: [8; ulong]; }
export type s_tagMONMSGSTRUCT = struct { cb: uint; hwndTo: *s_HWND__; dwTime: ulong; hTask: *; wMsg: uint; wParam: uint64; lParam: int64; dmhd: s_tagDDEML_MSG_HOOK_DATA; }
export type s_tagMONCBSTRUCT = struct { cb: uint; dwTime: ulong; hTask: *; dwRet: ulong; wType: uint; wFmt: uint; hConv: *s_HCONV__; hsz1: *s_HSZ__; hsz2: *s_HSZ__; hData: *s_HDDEDATA__; dwData1: uint64; dwData2: uint64; cc: s_tagCONVCONTEXT; cbData: ulong; Data: [8; ulong]; }
export type s_tagMONHSZSTRUCTA = struct { cb: uint; fsAction: int; dwTime: ulong; hsz: *s_HSZ__; hTask: *; str: [1; char]; }
export type s_tagMONHSZSTRUCTW = struct { cb: uint; fsAction: int; dwTime: ulong; hsz: *s_HSZ__; hTask: *; str: [1; ushort]; }
export type s_tagMONERRSTRUCT = struct { cb: uint; wLastError: uint; dwTime: ulong; hTask: *; }
export type s_tagMONLINKSTRUCT = struct { cb: uint; dwTime: ulong; hTask: *; fEstablished: int; fNoData: int; hszSvc: *s_HSZ__; hszTopic: *s_HSZ__; hszItem: *s_HSZ__; wFmt: uint; fServer: int; hConvServer: *s_HCONV__; hConvClient: *s_HCONV__; }
export type s_tagMONCONVSTRUCT = struct { cb: uint; fConnect: int; dwTime: ulong; hTask: *; hszSvc: *s_HSZ__; hszTopic: *s_HSZ__; hConvClient: *s_HCONV__; hConvServer: *s_HCONV__; }
export type s_tagCRGB = struct { bRed: uint8; bGreen: uint8; bBlue: uint8; bExtra: uint8; }
export type s_mmtime_tag = struct { wType: uint; u: struct #union { ms: ulong; sample: ulong; cb: ulong; ticks: ulong; smpte: struct { hour: uint8; min: uint8; sec: uint8; frame: uint8; fps: uint8; dummy: uint8; pad: [2; uint8]; }; midi: struct { songptrpos: ulong; }; }; }
export type s_HDRVR__
export type s_tagMCI_GENERIC_PARMS = struct { dwCallback: uint64; }
export type s_tagMCI_OPEN_PARMSA = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *char; lpstrElementName: *char; lpstrAlias: *char; }
export type s_tagMCI_OPEN_PARMSW = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *ushort; lpstrElementName: *ushort; lpstrAlias: *ushort; }
export type s_tagMCI_PLAY_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; }
export type s_tagMCI_SEEK_PARMS = struct { dwCallback: uint64; dwTo: ulong; }
export type s_tagMCI_STATUS_PARMS = struct { dwCallback: uint64; dwReturn: uint64; dwItem: ulong; dwTrack: ulong; }
export type s_tagMCI_INFO_PARMSA = struct { dwCallback: uint64; lpstrReturn: *char; dwRetSize: ulong; }
export type s_tagMCI_INFO_PARMSW = struct { dwCallback: uint64; lpstrReturn: *ushort; dwRetSize: ulong; }
export type s_tagMCI_GETDEVCAPS_PARMS = struct { dwCallback: uint64; dwReturn: ulong; dwItem: ulong; }
export type s_tagMCI_SYSINFO_PARMSA = struct { dwCallback: uint64; lpstrReturn: *char; dwRetSize: ulong; dwNumber: ulong; wDeviceType: uint; }
export type s_tagMCI_SYSINFO_PARMSW = struct { dwCallback: uint64; lpstrReturn: *ushort; dwRetSize: ulong; dwNumber: ulong; wDeviceType: uint; }
export type s_tagMCI_SET_PARMS = struct { dwCallback: uint64; dwTimeFormat: ulong; dwAudio: ulong; }
export type s_tagMCI_BREAK_PARMS = struct { dwCallback: uint64; nVirtKey: int; hwndBreak: *s_HWND__; }
export type s_tagMCI_SAVE_PARMSA = struct { dwCallback: uint64; lpfilename: *char; }
export type s_tagMCI_SAVE_PARMSW = struct { dwCallback: uint64; lpfilename: *ushort; }
export type s_tagMCI_LOAD_PARMSA = struct { dwCallback: uint64; lpfilename: *char; }
export type s_tagMCI_LOAD_PARMSW = struct { dwCallback: uint64; lpfilename: *ushort; }
export type s_tagMCI_RECORD_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; }
export type s_tagMCI_VD_PLAY_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; dwSpeed: ulong; }
export type s_tagMCI_VD_STEP_PARMS = struct { dwCallback: uint64; dwFrames: ulong; }
export type s_tagMCI_VD_ESCAPE_PARMSA = struct { dwCallback: uint64; lpstrCommand: *char; }
export type s_tagMCI_VD_ESCAPE_PARMSW = struct { dwCallback: uint64; lpstrCommand: *ushort; }
export type s_tagMCI_WAVE_OPEN_PARMSA = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *char; lpstrElementName: *char; lpstrAlias: *char; dwBufferSeconds: ulong; }
export type s_tagMCI_WAVE_OPEN_PARMSW = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *ushort; lpstrElementName: *ushort; lpstrAlias: *ushort; dwBufferSeconds: ulong; }
export type s_tagMCI_WAVE_DELETE_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; }
export type s_tagMCI_WAVE_SET_PARMS = struct { dwCallback: uint64; dwTimeFormat: ulong; dwAudio: ulong; wInput: uint; wOutput: uint; wFormatTag: ushort; wReserved2: ushort; nChannels: ushort; wReserved3: ushort; nSamplesPerSec: ulong; nAvgBytesPerSec: ulong; nBlockAlign: ushort; wReserved4: ushort; wBitsPerSample: ushort; wReserved5: ushort; }
export type s_tagMCI_SEQ_SET_PARMS = struct { dwCallback: uint64; dwTimeFormat: ulong; dwAudio: ulong; dwTempo: ulong; dwPort: ulong; dwSlave: ulong; dwMaster: ulong; dwOffset: ulong; }
export type s_tagMCI_ANIM_OPEN_PARMSA = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *char; lpstrElementName: *char; lpstrAlias: *char; dwStyle: ulong; hWndParent: *s_HWND__; }
export type s_tagMCI_ANIM_OPEN_PARMSW = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *ushort; lpstrElementName: *ushort; lpstrAlias: *ushort; dwStyle: ulong; hWndParent: *s_HWND__; }
export type s_tagMCI_ANIM_PLAY_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; dwSpeed: ulong; }
export type s_tagMCI_ANIM_STEP_PARMS = struct { dwCallback: uint64; dwFrames: ulong; }
export type s_tagMCI_ANIM_WINDOW_PARMSA = struct { dwCallback: uint64; hWnd: *s_HWND__; nCmdShow: uint; lpstrText: *char; }
export type s_tagMCI_ANIM_WINDOW_PARMSW = struct { dwCallback: uint64; hWnd: *s_HWND__; nCmdShow: uint; lpstrText: *ushort; }
export type s_tagMCI_ANIM_RECT_PARMS = struct { dwCallback: uint64; rc: s_tagRECT; }
export type s_tagMCI_ANIM_UPDATE_PARMS = struct { dwCallback: uint64; rc: s_tagRECT; hDC: *s_HDC__; }
export type s_tagMCI_OVLY_OPEN_PARMSA = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *char; lpstrElementName: *char; lpstrAlias: *char; dwStyle: ulong; hWndParent: *s_HWND__; }
export type s_tagMCI_OVLY_OPEN_PARMSW = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *ushort; lpstrElementName: *ushort; lpstrAlias: *ushort; dwStyle: ulong; hWndParent: *s_HWND__; }
export type s_tagMCI_OVLY_WINDOW_PARMSA = struct { dwCallback: uint64; hWnd: *s_HWND__; nCmdShow: uint; lpstrText: *char; }
export type s_tagMCI_OVLY_WINDOW_PARMSW = struct { dwCallback: uint64; hWnd: *s_HWND__; nCmdShow: uint; lpstrText: *ushort; }
export type s_tagMCI_OVLY_RECT_PARMS = struct { dwCallback: uint64; rc: s_tagRECT; }
export type s_tagMCI_OVLY_SAVE_PARMSA = struct { dwCallback: uint64; lpfilename: *char; rc: s_tagRECT; }
export type s_tagMCI_OVLY_SAVE_PARMSW = struct { dwCallback: uint64; lpfilename: *ushort; rc: s_tagRECT; }
export type s_tagMCI_OVLY_LOAD_PARMSA = struct { dwCallback: uint64; lpfilename: *char; rc: s_tagRECT; }
export type s_tagMCI_OVLY_LOAD_PARMSW = struct { dwCallback: uint64; lpfilename: *ushort; rc: s_tagRECT; }
export type s_DRVCONFIGINFOEX = struct { dwDCISize: ulong; lpszDCISectionName: *ushort; lpszDCIAliasName: *ushort; dnDevNode: ulong; }
export type s_tagDRVCONFIGINFO = struct { dwDCISize: ulong; lpszDCISectionName: *ushort; lpszDCIAliasName: *ushort; }
export type s_HMMIO__
export type s__MMIOINFO = struct { dwFlags: ulong; fccIOProc: ulong; pIOProc: def (*char, uint, int64, int64) -> (int64); wErrorRet: uint; htask: *s_HTASK__; cchBuffer: long; pchBuffer: *char; pchNext: *char; pchEndRead: *char; pchEndWrite: *char; lBufOffset: long; lDiskOffset: long; adwInfo: [3; ulong]; dwReserved1: ulong; dwReserved2: ulong; hmmio: *s_HMMIO__; }
export type s__MMCKINFO = struct { ckid: ulong; cksize: ulong; fccType: ulong; dwDataOffset: ulong; dwFlags: ulong; }
export type s_HWAVE__
export type s_HWAVEIN__
export type s_HWAVEOUT__
export type s_wavehdr_tag
export type s_wavehdr_tag = struct { lpData: *char; dwBufferLength: ulong; dwBytesRecorded: ulong; dwUser: uint64; dwFlags: ulong; dwLoops: ulong; lpNext: *s_wavehdr_tag; reserved: uint64; }
export type s_tagWAVEOUTCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; dwSupport: ulong; }
export type s_tagWAVEOUTCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; dwSupport: ulong; }
export type s_tagWAVEOUTCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; dwSupport: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagWAVEOUTCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; dwSupport: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagWAVEINCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; }
export type s_tagWAVEINCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; }
export type s_tagWAVEINCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagWAVEINCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_waveformat_tag = struct { wFormatTag: ushort; nChannels: ushort; nSamplesPerSec: ulong; nAvgBytesPerSec: ulong; nBlockAlign: ushort; }
export type s_pcmwaveformat_tag = struct { wf: s_waveformat_tag; wBitsPerSample: ushort; }
export type s_tWAVEFORMATEX = struct { wFormatTag: ushort; nChannels: ushort; nSamplesPerSec: ulong; nAvgBytesPerSec: ulong; nBlockAlign: ushort; wBitsPerSample: ushort; cbSize: ushort; }
export type s_HMIDI__
export type s_HMIDIIN__
export type s_HMIDIOUT__
export type s_HMIDISTRM__
export type s_tagMIDIOUTCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; wTechnology: ushort; wVoices: ushort; wNotes: ushort; wChannelMask: ushort; dwSupport: ulong; }
export type s_tagMIDIOUTCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; wTechnology: ushort; wVoices: ushort; wNotes: ushort; wChannelMask: ushort; dwSupport: ulong; }
export type s_tagMIDIOUTCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; wTechnology: ushort; wVoices: ushort; wNotes: ushort; wChannelMask: ushort; dwSupport: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagMIDIOUTCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; wTechnology: ushort; wVoices: ushort; wNotes: ushort; wChannelMask: ushort; dwSupport: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagMIDIINCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwSupport: ulong; }
export type s_tagMIDIINCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwSupport: ulong; }
export type s_tagMIDIINCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwSupport: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagMIDIINCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwSupport: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_midihdr_tag
export type s_midihdr_tag = struct { lpData: *char; dwBufferLength: ulong; dwBytesRecorded: ulong; dwUser: uint64; dwFlags: ulong; lpNext: *s_midihdr_tag; reserved: uint64; dwOffset: ulong; dwReserved: [8; uint64]; }
export type s_midievent_tag = struct { dwDeltaTime: ulong; dwStreamID: ulong; dwEvent: ulong; dwParms: [1; ulong]; }
export type s_midistrmbuffver_tag = struct { dwVersion: ulong; dwMid: ulong; dwOEMVersion: ulong; }
export type s_midiproptimediv_tag = struct { cbStruct: ulong; dwTimeDiv: ulong; }
export type s_midiproptempo_tag = struct { cbStruct: ulong; dwTempo: ulong; }
export type s_tagAUXCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; wTechnology: ushort; wReserved1: ushort; dwSupport: ulong; }
export type s_tagAUXCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; wTechnology: ushort; wReserved1: ushort; dwSupport: ulong; }
export type s_tagAUXCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; wTechnology: ushort; wReserved1: ushort; dwSupport: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagAUXCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; wTechnology: ushort; wReserved1: ushort; dwSupport: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_HMIXEROBJ__
export type s_HMIXER__
export type s_tagMIXERCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; fdwSupport: ulong; cDestinations: ulong; }
export type s_tagMIXERCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; fdwSupport: ulong; cDestinations: ulong; }
export type s_tagMIXERCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; fdwSupport: ulong; cDestinations: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagMIXERCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; fdwSupport: ulong; cDestinations: ulong; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagMIXERLINEA = struct { cbStruct: ulong; dwDestination: ulong; dwSource: ulong; dwLineID: ulong; fdwLine: ulong; dwUser: uint64; dwComponentType: ulong; cChannels: ulong; cConnections: ulong; cControls: ulong; szShortName: [16; char]; szName: [64; char]; Target: struct { dwType: ulong; dwDeviceID: ulong; wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; }; }
export type s_tagMIXERLINEW = struct { cbStruct: ulong; dwDestination: ulong; dwSource: ulong; dwLineID: ulong; fdwLine: ulong; dwUser: uint64; dwComponentType: ulong; cChannels: ulong; cConnections: ulong; cControls: ulong; szShortName: [16; ushort]; szName: [64; ushort]; Target: struct { dwType: ulong; dwDeviceID: ulong; wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; }; }
export type s_tagMIXERCONTROLA = struct { cbStruct: ulong; dwControlID: ulong; dwControlType: ulong; fdwControl: ulong; cMultipleItems: ulong; szShortName: [16; char]; szName: [64; char]; Bounds: struct #union { struct { lMinimum: long; lMaximum: long; }; struct { dwMinimum: ulong; dwMaximum: ulong; }; dwReserved: [6; ulong]; }; Metrics: struct #union { cSteps: ulong; cbCustomData: ulong; dwReserved: [6; ulong]; }; }
export type s_tagMIXERCONTROLW = struct { cbStruct: ulong; dwControlID: ulong; dwControlType: ulong; fdwControl: ulong; cMultipleItems: ulong; szShortName: [16; ushort]; szName: [64; ushort]; Bounds: struct #union { struct { lMinimum: long; lMaximum: long; }; struct { dwMinimum: ulong; dwMaximum: ulong; }; dwReserved: [6; ulong]; }; Metrics: struct #union { cSteps: ulong; cbCustomData: ulong; dwReserved: [6; ulong]; }; }
export type s_tagMIXERLINECONTROLSA = struct { cbStruct: ulong; dwLineID: ulong; struct #union { dwControlID: ulong; dwControlType: ulong; }; cControls: ulong; cbmxctrl: ulong; pamxctrl: *s_tagMIXERCONTROLA; }
export type s_tagMIXERLINECONTROLSW = struct { cbStruct: ulong; dwLineID: ulong; struct #union { dwControlID: ulong; dwControlType: ulong; }; cControls: ulong; cbmxctrl: ulong; pamxctrl: *s_tagMIXERCONTROLW; }
export type s_tMIXERCONTROLDETAILS = struct { cbStruct: ulong; dwControlID: ulong; cChannels: ulong; struct #union { hwndOwner: *s_HWND__; cMultipleItems: ulong; }; cbDetails: ulong; paDetails: *; }
export type s_tagMIXERCONTROLDETAILS_LISTTEXTA = struct { dwParam1: ulong; dwParam2: ulong; szName: [64; char]; }
export type s_tagMIXERCONTROLDETAILS_LISTTEXTW = struct { dwParam1: ulong; dwParam2: ulong; szName: [64; ushort]; }
export type s_tMIXERCONTROLDETAILS_BOOLEAN = struct { fValue: long; }
export type s_tMIXERCONTROLDETAILS_SIGNED = struct { lValue: long; }
export type s_tMIXERCONTROLDETAILS_UNSIGNED = struct { dwValue: ulong; }
export type s_timecaps_tag = struct { wPeriodMin: uint; wPeriodMax: uint; }
export type s_tagJOYCAPSA = struct { wMid: ushort; wPid: ushort; szPname: [32; char]; wXmin: uint; wXmax: uint; wYmin: uint; wYmax: uint; wZmin: uint; wZmax: uint; wNumButtons: uint; wPeriodMin: uint; wPeriodMax: uint; wRmin: uint; wRmax: uint; wUmin: uint; wUmax: uint; wVmin: uint; wVmax: uint; wCaps: uint; wMaxAxes: uint; wNumAxes: uint; wMaxButtons: uint; szRegKey: [32; char]; szOEMVxD: [260; char]; }
export type s_tagJOYCAPSW = struct { wMid: ushort; wPid: ushort; szPname: [32; ushort]; wXmin: uint; wXmax: uint; wYmin: uint; wYmax: uint; wZmin: uint; wZmax: uint; wNumButtons: uint; wPeriodMin: uint; wPeriodMax: uint; wRmin: uint; wRmax: uint; wUmin: uint; wUmax: uint; wVmin: uint; wVmax: uint; wCaps: uint; wMaxAxes: uint; wNumAxes: uint; wMaxButtons: uint; szRegKey: [32; ushort]; szOEMVxD: [260; ushort]; }
export type s_tagJOYCAPS2A = struct { wMid: ushort; wPid: ushort; szPname: [32; char]; wXmin: uint; wXmax: uint; wYmin: uint; wYmax: uint; wZmin: uint; wZmax: uint; wNumButtons: uint; wPeriodMin: uint; wPeriodMax: uint; wRmin: uint; wRmax: uint; wUmin: uint; wUmax: uint; wVmin: uint; wVmax: uint; wCaps: uint; wMaxAxes: uint; wNumAxes: uint; wMaxButtons: uint; szRegKey: [32; char]; szOEMVxD: [260; char]; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_tagJOYCAPS2W = struct { wMid: ushort; wPid: ushort; szPname: [32; ushort]; wXmin: uint; wXmax: uint; wYmin: uint; wYmax: uint; wZmin: uint; wZmax: uint; wNumButtons: uint; wPeriodMin: uint; wPeriodMax: uint; wRmin: uint; wRmax: uint; wUmin: uint; wUmax: uint; wVmin: uint; wVmax: uint; wCaps: uint; wMaxAxes: uint; wNumAxes: uint; wMaxButtons: uint; szRegKey: [32; ushort]; szOEMVxD: [260; ushort]; ManufacturerGuid: s__GUID; ProductGuid: s__GUID; NameGuid: s__GUID; }
export type s_joyinfo_tag = struct { wXpos: uint; wYpos: uint; wZpos: uint; wButtons: uint; }
export type s_joyinfoex_tag = struct { dwSize: ulong; dwFlags: ulong; dwXpos: ulong; dwYpos: ulong; dwZpos: ulong; dwRpos: ulong; dwUpos: ulong; dwVpos: ulong; dwButtons: ulong; dwButtonNumber: ulong; dwPOV: ulong; dwReserved1: ulong; dwReserved2: ulong; }
export type s__NCB
export type s__NCB = struct { ncb_command: uint8; ncb_retcode: uint8; ncb_lsn: uint8; ncb_num: uint8; ncb_buffer: *uint8; ncb_length: ushort; ncb_callname: [16; uint8]; ncb_name: [16; uint8]; ncb_rto: uint8; ncb_sto: uint8; ncb_post: def (*s__NCB) -> (); ncb_lana_num: uint8; ncb_cmd_cplt: uint8; ncb_reserve: [18; uint8]; ncb_event: *; }
export type s__ADAPTER_STATUS = struct { adapter_address: [6; uint8]; rev_major: uint8; reserved0: uint8; adapter_type: uint8; rev_minor: uint8; duration: ushort; frmr_recv: ushort; frmr_xmit: ushort; iframe_recv_err: ushort; xmit_aborts: ushort; xmit_success: ulong; recv_success: ulong; iframe_xmit_err: ushort; recv_buff_unavail: ushort; t1_timeouts: ushort; ti_timeouts: ushort; reserved1: ulong; free_ncbs: ushort; max_cfg_ncbs: ushort; max_ncbs: ushort; xmit_buf_unavail: ushort; max_dgram_size: ushort; pending_sess: ushort; max_cfg_sess: ushort; max_sess: ushort; max_sess_pkt_size: ushort; name_count: ushort; }
export type s__NAME_BUFFER = struct { name: [16; uint8]; name_num: uint8; name_flags: uint8; }
export type s__SESSION_HEADER = struct { sess_name: uint8; num_sess: uint8; rcv_dg_outstanding: uint8; rcv_any_outstanding: uint8; }
export type s__SESSION_BUFFER = struct { lsn: uint8; state: uint8; local_name: [16; uint8]; remote_name: [16; uint8]; rcvs_outstanding: uint8; sends_outstanding: uint8; }
export type s__LANA_ENUM = struct { length: uint8; lana: [255; uint8]; }
export type s__FIND_NAME_HEADER = struct { node_count: ushort; reserved: uint8; unique_group: uint8; }
export type s__FIND_NAME_BUFFER = struct { length: uint8; access_control: uint8; frame_control: uint8; destination_addr: [6; uint8]; source_addr: [6; uint8]; routing_info: [18; uint8]; }
export type s__ACTION_HEADER = struct { transport_id: ulong; action_code: ushort; reserved: ushort; }
export type s__RPC_BINDING_VECTOR = struct { Count: ulong; BindingH: [1; *]; }
export type s__UUID_VECTOR = struct { Count: ulong; Uuid: [1; *s__GUID]; }
export type s__RPC_IF_ID = struct { Uuid: s__GUID; VersMajor: ushort; VersMinor: ushort; }
export type s__RPC_PROTSEQ_VECTORA = struct { Count: uint; Protseq: [1; *uint8]; }
export type s__RPC_PROTSEQ_VECTORW = struct { Count: uint; Protseq: [1; *ushort]; }
export type s__RPC_POLICY = struct { Length: uint; EndpointFlags: ulong; NICFlags: ulong; }
export type s_RPC_STATS_VECTOR = struct { Count: uint; Stats: [1; ulong]; }
export type s_RPC_IF_ID_VECTOR = struct { Count: ulong; IfId: [1; *s__RPC_IF_ID]; }
export type s__RPC_SECURITY_QOS = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; }
export type s__SEC_WINNT_AUTH_IDENTITY_W = struct { User: *ushort; UserLength: ulong; Domain: *ushort; DomainLength: ulong; Password: *ushort; PasswordLength: ulong; Flags: ulong; }
export type s__SEC_WINNT_AUTH_IDENTITY_A = struct { User: *uint8; UserLength: ulong; Domain: *uint8; DomainLength: ulong; Password: *uint8; PasswordLength: ulong; Flags: ulong; }
export type s__RPC_HTTP_TRANSPORT_CREDENTIALS_W = struct { TransportCredentials: *s__SEC_WINNT_AUTH_IDENTITY_W; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *ushort; }
export type s__RPC_HTTP_TRANSPORT_CREDENTIALS_A = struct { TransportCredentials: *s__SEC_WINNT_AUTH_IDENTITY_A; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *uint8; }
export type s__RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = struct { TransportCredentials: *s__SEC_WINNT_AUTH_IDENTITY_W; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *ushort; ProxyCredentials: *s__SEC_WINNT_AUTH_IDENTITY_W; NumberOfProxyAuthnSchemes: ulong; ProxyAuthnSchemes: *ulong; }
export type s__RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = struct { TransportCredentials: *s__SEC_WINNT_AUTH_IDENTITY_A; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *uint8; ProxyCredentials: *s__SEC_WINNT_AUTH_IDENTITY_A; NumberOfProxyAuthnSchemes: ulong; ProxyAuthnSchemes: *ulong; }
export type s__RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = struct { TransportCredentials: *; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *ushort; ProxyCredentials: *; NumberOfProxyAuthnSchemes: ulong; ProxyAuthnSchemes: *ulong; }
export type s__RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = struct { TransportCredentials: *; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *uint8; ProxyCredentials: *; NumberOfProxyAuthnSchemes: ulong; ProxyAuthnSchemes: *ulong; }
export type s__RPC_SECURITY_QOS_V2_W = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *s__RPC_HTTP_TRANSPORT_CREDENTIALS_W; }; }
export type s__RPC_SECURITY_QOS_V2_A = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *s__RPC_HTTP_TRANSPORT_CREDENTIALS_A; }; }
export type s__RPC_SECURITY_QOS_V3_W = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *s__RPC_HTTP_TRANSPORT_CREDENTIALS_W; }; Sid: *; }
export type s__RPC_SECURITY_QOS_V3_A = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *s__RPC_HTTP_TRANSPORT_CREDENTIALS_A; }; Sid: *; }
export type s__RPC_SECURITY_QOS_V4_W = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *s__RPC_HTTP_TRANSPORT_CREDENTIALS_W; }; Sid: *; EffectiveOnly: uint; }
export type s__RPC_SECURITY_QOS_V4_A = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *s__RPC_HTTP_TRANSPORT_CREDENTIALS_A; }; Sid: *; EffectiveOnly: uint; }
export type s__RPC_SECURITY_QOS_V5_W = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *s__RPC_HTTP_TRANSPORT_CREDENTIALS_W; }; Sid: *; EffectiveOnly: uint; ServerSecurityDescriptor: *; }
export type s__RPC_SECURITY_QOS_V5_A = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *s__RPC_HTTP_TRANSPORT_CREDENTIALS_A; }; Sid: *; EffectiveOnly: uint; ServerSecurityDescriptor: *; }
export type s__RPC_BINDING_HANDLE_TEMPLATE_V1_W = struct { Version: ulong; Flags: ulong; ProtocolSequence: ulong; NetworkAddress: *ushort; StringEndpoint: *ushort; u1: struct #union { Reserved: *ushort; }; ObjectUuid: s__GUID; }
export type s__RPC_BINDING_HANDLE_TEMPLATE_V1_A = struct { Version: ulong; Flags: ulong; ProtocolSequence: ulong; NetworkAddress: *uint8; StringEndpoint: *uint8; u1: struct #union { Reserved: *uint8; }; ObjectUuid: s__GUID; }
export type s__RPC_BINDING_HANDLE_SECURITY_V1_W = struct { Version: ulong; ServerPrincName: *ushort; AuthnLevel: ulong; AuthnSvc: ulong; AuthIdentity: *s__SEC_WINNT_AUTH_IDENTITY_W; SecurityQos: *s__RPC_SECURITY_QOS; }
export type s__RPC_BINDING_HANDLE_SECURITY_V1_A = struct { Version: ulong; ServerPrincName: *uint8; AuthnLevel: ulong; AuthnSvc: ulong; AuthIdentity: *s__SEC_WINNT_AUTH_IDENTITY_A; SecurityQos: *s__RPC_SECURITY_QOS; }
export type s__RPC_BINDING_HANDLE_OPTIONS_V1 = struct { Version: ulong; Flags: ulong; ComTimeout: ulong; CallTimeout: ulong; }
export type e__RPC_HTTP_REDIRECTOR_STAGE = enum { RPCHTTP_RS_REDIRECT = 1; RPCHTTP_RS_ACCESS_1 = 2; RPCHTTP_RS_SESSION = 3; RPCHTTP_RS_ACCESS_2 = 4; RPCHTTP_RS_INTERFACE = 5; }
export type s_RPC_CLIENT_INFORMATION1 = struct { UserName: *uint8; ComputerName: *uint8; Privilege: ushort; AuthFlags: ulong; }
export type RPC_CLIENT_INFORMATION1
export type s_RPC_ENDPOINT_TEMPLATEW = struct { Version: ulong; ProtSeq: *ushort; Endpoint: *ushort; SecurityDescriptor: *; Backlog: ulong; }
export type RPC_ENDPOINT_TEMPLATEW
export type s_RPC_ENDPOINT_TEMPLATEA = struct { Version: ulong; ProtSeq: *uint8; Endpoint: *uint8; SecurityDescriptor: *; Backlog: ulong; }
export type RPC_ENDPOINT_TEMPLATEA
export type s_RPC_INTERFACE_TEMPLATEA = struct { Version: ulong; IfSpec: *; MgrTypeUuid: *s__GUID; MgrEpv: *; Flags: uint; MaxCalls: uint; MaxRpcSize: uint; IfCallback: def (*, *) -> (long); UuidVector: *s__UUID_VECTOR; Annotation: *uint8; SecurityDescriptor: *; }
export type RPC_INTERFACE_TEMPLATEA
export type s_RPC_INTERFACE_TEMPLATEW = struct { Version: ulong; IfSpec: *; MgrTypeUuid: *s__GUID; MgrEpv: *; Flags: uint; MaxCalls: uint; MaxRpcSize: uint; IfCallback: def (*, *) -> (long); UuidVector: *s__UUID_VECTOR; Annotation: *ushort; SecurityDescriptor: *; }
export type RPC_INTERFACE_TEMPLATEW
export type s__RPC_VERSION = struct { MajorVersion: ushort; MinorVersion: ushort; }
export type s__RPC_SYNTAX_IDENTIFIER = struct { SyntaxGUID: s__GUID; SyntaxVersion: s__RPC_VERSION; }
export type s__RPC_MESSAGE = struct { Handle: *; DataRepresentation: ulong; Buffer: *; BufferLength: uint; ProcNum: uint; TransferSyntax: *s__RPC_SYNTAX_IDENTIFIER; RpcInterfaceInformation: *; ReservedForRuntime: *; ManagerEpv: *; ImportContext: *; RpcFlags: ulong; }
export type s_RPC_DISPATCH_TABLE = struct { DispatchTableCount: uint; DispatchTable: def (*s__RPC_MESSAGE) -> (); Reserved: int64; }
export type RPC_DISPATCH_TABLE
export type s__RPC_PROTSEQ_ENDPOINT = struct { RpcProtocolSequence: *uint8; Endpoint: *uint8; }
export type s__RPC_SERVER_INTERFACE = struct { Length: uint; InterfaceId: s__RPC_SYNTAX_IDENTIFIER; TransferSyntax: s__RPC_SYNTAX_IDENTIFIER; DispatchTable: *RPC_DISPATCH_TABLE; RpcProtseqEndpointCount: uint; RpcProtseqEndpoint: *s__RPC_PROTSEQ_ENDPOINT; DefaultManagerEpv: *; InterpreterInfo: *; Flags: uint; }
export type s__RPC_CLIENT_INTERFACE = struct { Length: uint; InterfaceId: s__RPC_SYNTAX_IDENTIFIER; TransferSyntax: s__RPC_SYNTAX_IDENTIFIER; DispatchTable: *RPC_DISPATCH_TABLE; RpcProtseqEndpointCount: uint; RpcProtseqEndpoint: *s__RPC_PROTSEQ_ENDPOINT; Reserved: uint64; InterpreterInfo: *; Flags: uint; }
export type e__LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = enum { MarshalDirectionMarshal; MarshalDirectionUnmarshal = 1; }
export type s__RPC_SEC_CONTEXT_KEY_INFO = struct { EncryptAlgorithm: ulong; KeySize: ulong; SignatureAlgorithm: ulong; }
export type s__RPC_TRANSFER_SYNTAX = struct { Uuid: s__GUID; VersMajor: ushort; VersMinor: ushort; }
export type s__RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = struct { BufferSize: ulong; Buffer: *char; }
export type s__RDR_CALLOUT_STATE = struct { LastError: long; LastEEInfo: *; LastCalledStage: e__RPC_HTTP_REDIRECTOR_STAGE; ServerName: *ushort; ServerPort: *ushort; RemoteUser: *ushort; AuthType: *ushort; ResourceTypePresent: uint8; SessionIdPresent: uint8; InterfacePresent: uint8; ResourceType: s__GUID; SessionId: s__GUID; Interface: s__RPC_SYNTAX_IDENTIFIER; CertContext: *; }
export type e_RpcProxyPerfCounters = enum { RpcCurrentUniqueUser = 1; RpcBackEndConnectionAttempts = 2; RpcBackEndConnectionFailed = 3; RpcRequestsPerSecond = 4; RpcIncomingConnections = 5; RpcIncomingBandwidth = 6; RpcOutgoingBandwidth = 7; RpcAttemptedLbsDecisions = 8; RpcFailedLbsDecisions = 9; RpcAttemptedLbsMessages = 10; RpcFailedLbsMessages = 11; RpcLastCounter = 12; }
export type s_tagI_RpcProxyCallbackInterface = struct { IsValidMachineFn: def (*ushort, *ushort, ulong) -> (long); GetClientAddressFn: def (*, *char, *ulong) -> (long); GetConnectionTimeoutFn: def (*ulong) -> (long); PerformCalloutFn: def (*, *s__RDR_CALLOUT_STATE, e__RPC_HTTP_REDIRECTOR_STAGE) -> (long); FreeCalloutStateFn: def (*s__RDR_CALLOUT_STATE) -> (); GetClientSessionAndResourceUUIDFn: def (*, *int, *s__GUID, *int, *s__GUID) -> (long); ProxyFilterIfFn: def (*, *s__GUID, ushort, *int) -> (long); RpcProxyUpdatePerfCounterFn: def (e_RpcProxyPerfCounters, int, ulong) -> (); RpcProxyUpdatePerfCounterBackendServerFn: def (*ushort, int) -> (); }
export type e__RPC_NOTIFICATION_TYPES = enum { RpcNotificationTypeNone; RpcNotificationTypeEvent = 1; RpcNotificationTypeApc = 2; RpcNotificationTypeIoc = 3; RpcNotificationTypeHwnd = 4; RpcNotificationTypeCallback = 5; }
export type e__RPC_ASYNC_EVENT = enum { RpcCallComplete; RpcSendComplete = 1; RpcReceiveComplete = 2; RpcClientDisconnect = 3; RpcClientCancel = 4; }
export type s__RPC_ASYNC_STATE
export type u__RPC_ASYNC_NOTIFICATION_INFO = struct #union { APC: struct { NotificationRoutine: def (*s__RPC_ASYNC_STATE, *, e__RPC_ASYNC_EVENT) -> (); hThread: *; }; IOC: struct { hIOPort: *; dwNumberOfBytesTransferred: ulong; dwCompletionKey: uint64; lpOverlapped: *s__OVERLAPPED; }; HWND: struct { hWnd: *s_HWND__; Msg: uint; }; hEvent: *; NotificationRoutine: def (*s__RPC_ASYNC_STATE, *, e__RPC_ASYNC_EVENT) -> (); }
export type s__RPC_ASYNC_STATE = struct { Size: uint; Signature: ulong; Lock: long; Flags: ulong; StubInfo: *; UserInfo: *; RuntimeInfo: *; Event: e__RPC_ASYNC_EVENT; NotificationType: e__RPC_NOTIFICATION_TYPES; u: u__RPC_ASYNC_NOTIFICATION_INFO; Reserved: [4; int64]; }
export type e_tagExtendedErrorParamTypes = enum { eeptAnsiString = 1; eeptUnicodeString = 2; eeptLongVal = 3; eeptShortVal = 4; eeptPointerVal = 5; eeptNone = 6; eeptBinary = 7; }
export type s_tagBinaryParam = struct { Buffer: *; Size: short; }
export type s_tagRPC_EE_INFO_PARAM = struct { ParameterType: e_tagExtendedErrorParamTypes; u: struct #union { AnsiString: *char; UnicodeString: *ushort; LVal: long; SVal: short; PVal: uint64; BVal: s_tagBinaryParam; }; }
export type s_tagRPC_EXTENDED_ERROR_INFO = struct { Version: ulong; ComputerName: *ushort; ProcessID: ulong; u: struct #union { SystemTime: s__SYSTEMTIME; FileTime: s__FILETIME; }; GeneratingComponent: ulong; Status: ulong; DetectionLocation: ushort; Flags: ushort; NumberOfParameters: int; Parameters: [4; s_tagRPC_EE_INFO_PARAM]; }
export type s_tagRPC_ERROR_ENUM_HANDLE = struct { Signature: ulong; CurrentPos: *; Head: *; }
export type e_tagRpcLocalAddressFormat = enum { rlafInvalid; rlafIPv4 = 1; rlafIPv6 = 2; }
export type s__RPC_CALL_LOCAL_ADDRESS_V1 = struct { Version: uint; Buffer: *; BufferSize: ulong; AddressFormat: e_tagRpcLocalAddressFormat; }
export type s_tagRPC_CALL_ATTRIBUTES_V1_W = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *ushort; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *ushort; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; }
export type s_tagRPC_CALL_ATTRIBUTES_V1_A = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *uint8; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *uint8; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; }
export type e_tagRpcCallType = enum { rctInvalid; rctNormal = 1; rctTraining = 2; rctGuaranteed = 3; }
export type e_tagRpcCallClientLocality = enum { rcclInvalid; rcclLocal = 1; rcclRemote = 2; rcclClientUnknownLocality = 3; }
export type s_tagRPC_CALL_ATTRIBUTES_V2_W = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *ushort; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *ushort; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; KernelModeCaller: int; ProtocolSequence: ulong; IsClientLocal: e_tagRpcCallClientLocality; ClientPID: *; CallStatus: ulong; CallType: e_tagRpcCallType; CallLocalAddress: *s__RPC_CALL_LOCAL_ADDRESS_V1; OpNum: ushort; InterfaceUuid: s__GUID; }
export type s_tagRPC_CALL_ATTRIBUTES_V2_A = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *uint8; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *uint8; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; KernelModeCaller: int; ProtocolSequence: ulong; IsClientLocal: ulong; ClientPID: *; CallStatus: ulong; CallType: e_tagRpcCallType; CallLocalAddress: *s__RPC_CALL_LOCAL_ADDRESS_V1; OpNum: ushort; InterfaceUuid: s__GUID; }
export type s_tagRPC_CALL_ATTRIBUTES_V3_W = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *ushort; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *ushort; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; KernelModeCaller: int; ProtocolSequence: ulong; IsClientLocal: e_tagRpcCallClientLocality; ClientPID: *; CallStatus: ulong; CallType: e_tagRpcCallType; CallLocalAddress: *s__RPC_CALL_LOCAL_ADDRESS_V1; OpNum: ushort; InterfaceUuid: s__GUID; ClientIdentifierBufferLength: ulong; ClientIdentifier: *uint8; }
export type s_tagRPC_CALL_ATTRIBUTES_V3_A = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *uint8; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *uint8; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; KernelModeCaller: int; ProtocolSequence: ulong; IsClientLocal: ulong; ClientPID: *; CallStatus: ulong; CallType: e_tagRpcCallType; CallLocalAddress: *s__RPC_CALL_LOCAL_ADDRESS_V1; OpNum: ushort; InterfaceUuid: s__GUID; ClientIdentifierBufferLength: ulong; ClientIdentifier: *uint8; }
export type e__RPC_NOTIFICATIONS = enum { RpcNotificationCallNone; RpcNotificationClientDisconnect = 1; RpcNotificationCallCancel = 2; }
export type s_HDROP__
export type s__DRAGINFOA = struct { uSize: uint; pt: s_tagPOINT; fNC: int; lpFileList: *char; grfKeyState: ulong; }
export type s__DRAGINFOW = struct { uSize: uint; pt: s_tagPOINT; fNC: int; lpFileList: *ushort; grfKeyState: ulong; }
export type s__AppBarData = struct { cbSize: ulong; hWnd: *s_HWND__; uCallbackMessage: uint; uEdge: uint; rc: s_tagRECT; lParam: int64; }
export type s__SHFILEOPSTRUCTA = struct { hwnd: *s_HWND__; wFunc: uint; pFrom: *char; pTo: *char; fFlags: ushort; fAnyOperationsAborted: int; hNameMappings: *; lpszProgressTitle: *char; }
export type s__SHFILEOPSTRUCTW = struct { hwnd: *s_HWND__; wFunc: uint; pFrom: *ushort; pTo: *ushort; fFlags: ushort; fAnyOperationsAborted: int; hNameMappings: *; lpszProgressTitle: *ushort; }
export type s__SHNAMEMAPPINGA = struct { pszOldPath: *char; pszNewPath: *char; cchOldPath: int; cchNewPath: int; }
export type s__SHNAMEMAPPINGW = struct { pszOldPath: *ushort; pszNewPath: *ushort; cchOldPath: int; cchNewPath: int; }
export type s__SHELLEXECUTEINFOA = struct { cbSize: ulong; fMask: ulong; hwnd: *s_HWND__; lpVerb: *char; lpFile: *char; lpParameters: *char; lpDirectory: *char; nShow: int; hInstApp: *s_HINSTANCE__; lpIDList: *; lpClass: *char; hkeyClass: *s_HKEY__; dwHotKey: ulong; struct #union { hIcon: *; hMonitor: *; }; hProcess: *; }
export type s__SHELLEXECUTEINFOW = struct { cbSize: ulong; fMask: ulong; hwnd: *s_HWND__; lpVerb: *ushort; lpFile: *ushort; lpParameters: *ushort; lpDirectory: *ushort; nShow: int; hInstApp: *s_HINSTANCE__; lpIDList: *; lpClass: *ushort; hkeyClass: *s_HKEY__; dwHotKey: ulong; struct #union { hIcon: *; hMonitor: *; }; hProcess: *; }
export type s__SHCREATEPROCESSINFOW = struct { cbSize: ulong; fMask: ulong; hwnd: *s_HWND__; pszFile: *ushort; pszParameters: *ushort; pszCurrentDirectory: *ushort; hUserToken: *; lpProcessAttributes: *s__SECURITY_ATTRIBUTES; lpThreadAttributes: *s__SECURITY_ATTRIBUTES; bInheritHandles: int; dwCreationFlags: ulong; lpStartupInfo: *s__STARTUPINFOW; lpProcessInformation: *s__PROCESS_INFORMATION; }
export type e_ASSOCCLASS = enum { ASSOCCLASS_SHELL_KEY; ASSOCCLASS_PROGID_KEY = 1; ASSOCCLASS_PROGID_STR = 2; ASSOCCLASS_CLSID_KEY = 3; ASSOCCLASS_CLSID_STR = 4; ASSOCCLASS_APP_KEY = 5; ASSOCCLASS_APP_STR = 6; ASSOCCLASS_SYSTEM_STR = 7; ASSOCCLASS_FOLDER = 8; ASSOCCLASS_STAR = 9; ASSOCCLASS_FIXED_PROGID_STR = 10; ASSOCCLASS_PROTOCOL_STR = 11; }
export type s_ASSOCIATIONELEMENT = struct { ac: e_ASSOCCLASS; hkClass: *s_HKEY__; pszClass: *ushort; }
export type s__SHQUERYRBINFO = struct { cbSize: ulong; i64Size: int64; i64NumItems: int64; }
export type e_QUERY_USER_NOTIFICATION_STATE = enum { QUNS_NOT_PRESENT = 1; QUNS_BUSY = 2; QUNS_RUNNING_D3D_FULL_SCREEN = 3; QUNS_PRESENTATION_MODE = 4; QUNS_ACCEPTS_NOTIFICATIONS = 5; QUNS_QUIET_TIME = 6; QUNS_APP = 7; }
export type s__NOTIFYICONDATAA = struct { cbSize: ulong; hWnd: *s_HWND__; uID: uint; uFlags: uint; uCallbackMessage: uint; hIcon: *s_HICON__; szTip: [128; char]; dwState: ulong; dwStateMask: ulong; szInfo: [256; char]; struct #union { uTimeout: uint; uVersion: uint; }; szInfoTitle: [64; char]; dwInfoFlags: ulong; guidItem: s__GUID; hBalloonIcon: *s_HICON__; }
export type s__NOTIFYICONDATAW = struct { cbSize: ulong; hWnd: *s_HWND__; uID: uint; uFlags: uint; uCallbackMessage: uint; hIcon: *s_HICON__; szTip: [128; ushort]; dwState: ulong; dwStateMask: ulong; szInfo: [256; ushort]; struct #union { uTimeout: uint; uVersion: uint; }; szInfoTitle: [64; ushort]; dwInfoFlags: ulong; guidItem: s__GUID; hBalloonIcon: *s_HICON__; }
export type s__NOTIFYICONIDENTIFIER = struct { cbSize: ulong; hWnd: *s_HWND__; uID: uint; guidItem: s__GUID; }
export type s__SHFILEINFOA = struct { hIcon: *s_HICON__; iIcon: int; dwAttributes: ulong; szDisplayName: [260; char]; szTypeName: [80; char]; }
export type s__SHFILEINFOW = struct { hIcon: *s_HICON__; iIcon: int; dwAttributes: ulong; szDisplayName: [260; ushort]; szTypeName: [80; ushort]; }
export type s__SHSTOCKICONINFO = struct { cbSize: ulong; hIcon: *s_HICON__; iSysImageIndex: int; iIcon: int; szPath: [260; ushort]; }
export type e_SHSTOCKICONID = enum { SIID_DOCNOASSOC; SIID_DOCASSOC = 1; SIID_APPLICATION = 2; SIID_FOLDER = 3; SIID_FOLDEROPEN = 4; SIID_DRIVE525 = 5; SIID_DRIVE35 = 6; SIID_DRIVEREMOVE = 7; SIID_DRIVEFIXED = 8; SIID_DRIVENET = 9; SIID_DRIVENETDISABLED = 10; SIID_DRIVECD = 11; SIID_DRIVERAM = 12; SIID_WORLD = 13; SIID_SERVER = 15; SIID_PRINTER = 16; SIID_MYNETWORK = 17; SIID_FIND = 22; SIID_HELP = 23; SIID_SHARE = 28; SIID_LINK = 29; SIID_SLOWFILE = 30; SIID_RECYCLER = 31; SIID_RECYCLERFULL = 32; SIID_MEDIACDAUDIO = 40; SIID_LOCK = 47; SIID_AUTOLIST = 49; SIID_PRINTERNET = 50; SIID_SERVERSHARE = 51; SIID_PRINTERFAX = 52; SIID_PRINTERFAXNET = 53; SIID_PRINTERFILE = 54; SIID_STACK = 55; SIID_MEDIASVCD = 56; SIID_STUFFEDFOLDER = 57; SIID_DRIVEUNKNOWN = 58; SIID_DRIVEDVD = 59; SIID_MEDIADVD = 60; SIID_MEDIADVDRAM = 61; SIID_MEDIADVDRW = 62; SIID_MEDIADVDR = 63; SIID_MEDIADVDROM = 64; SIID_MEDIACDAUDIOPLUS = 65; SIID_MEDIACDRW = 66; SIID_MEDIACDR = 67; SIID_MEDIACDBURN = 68; SIID_MEDIABLANKCD = 69; SIID_MEDIACDROM = 70; SIID_AUDIOFILES = 71; SIID_IMAGEFILES = 72; SIID_VIDEOFILES = 73; SIID_MIXEDFILES = 74; SIID_FOLDERBACK = 75; SIID_FOLDERFRONT = 76; SIID_SHIELD = 77; SIID_WARNING = 78; SIID_INFO = 79; SIID_ERROR = 80; SIID_KEY = 81; SIID_SOFTWARE = 82; SIID_RENAME = 83; SIID_DELETE = 84; SIID_MEDIAAUDIODVD = 85; SIID_MEDIAMOVIEDVD = 86; SIID_MEDIAENHANCEDCD = 87; SIID_MEDIAENHANCEDDVD = 88; SIID_MEDIAHDDVD = 89; SIID_MEDIABLURAY = 90; SIID_MEDIAVCD = 91; SIID_MEDIADVDPLUSR = 92; SIID_MEDIADVDPLUSRW = 93; SIID_DESKTOPPC = 94; SIID_MOBILEPC = 95; SIID_USERS = 96; SIID_MEDIASMARTMEDIA = 97; SIID_MEDIACOMPACTFLASH = 98; SIID_DEVICECELLPHONE = 99; SIID_DEVICECAMERA = 100; SIID_DEVICEVIDEOCAMERA = 101; SIID_DEVICEAUDIOPLAYER = 102; SIID_NETWORKCONNECT = 103; SIID_INTERNET = 104; SIID_ZIPFILE = 105; SIID_SETTINGS = 106; SIID_DRIVEHDDVD = 132; SIID_DRIVEBD = 133; SIID_MEDIAHDDVDROM = 134; SIID_MEDIAHDDVDR = 135; SIID_MEDIAHDDVDRAM = 136; SIID_MEDIABDROM = 137; SIID_MEDIABDR = 138; SIID_MEDIABDRE = 139; SIID_CLUSTEREDDRIVE = 140; SIID_MAX_ICONS = 181; }
export type s__OPEN_PRINTER_PROPS_INFOA = struct { dwSize: ulong; pszSheetName: *char; uSheetIndex: uint; dwFlags: ulong; bModal: int; }
export type s__OPEN_PRINTER_PROPS_INFOW = struct { dwSize: ulong; pszSheetName: *ushort; uSheetIndex: uint; dwFlags: ulong; bModal: int; }
export type s_NET_ADDRESS_INFO_
export type s_tagNC_ADDRESS = struct { pAddrInfo: *s_NET_ADDRESS_INFO_; PortNumber: ushort; PrefixLength: uint8; }
export type s__PERF_DATA_BLOCK = struct { Signature: [4; ushort]; LittleEndian: ulong; Version: ulong; Revision: ulong; TotalByteLength: ulong; HeaderLength: ulong; NumObjectTypes: ulong; DefaultObject: long; SystemTime: s__SYSTEMTIME; PerfTime: u__LARGE_INTEGER; PerfFreq: u__LARGE_INTEGER; PerfTime100nSec: u__LARGE_INTEGER; SystemNameLength: ulong; SystemNameOffset: ulong; }
export type s__PERF_OBJECT_TYPE = struct { TotalByteLength: ulong; DefinitionLength: ulong; HeaderLength: ulong; ObjectNameTitleIndex: ulong; ObjectNameTitle: ulong; ObjectHelpTitleIndex: ulong; ObjectHelpTitle: ulong; DetailLevel: ulong; NumCounters: ulong; DefaultCounter: long; NumInstances: long; CodePage: ulong; PerfTime: u__LARGE_INTEGER; PerfFreq: u__LARGE_INTEGER; }
export type s__PERF_COUNTER_DEFINITION = struct { ByteLength: ulong; CounterNameTitleIndex: ulong; CounterNameTitle: ulong; CounterHelpTitleIndex: ulong; CounterHelpTitle: ulong; DefaultScale: long; DetailLevel: ulong; CounterType: ulong; CounterSize: ulong; CounterOffset: ulong; }
export type s__PERF_INSTANCE_DEFINITION = struct { ByteLength: ulong; ParentObjectTitleIndex: ulong; ParentObjectInstance: ulong; UniqueID: long; NameOffset: ulong; NameLength: ulong; }
export type s__PERF_COUNTER_BLOCK = struct { ByteLength: ulong; }
export type s_fd_set = struct { fd_count: uint; fd_array: [64; uint64]; }
export type s_in_addr = struct { S_un: struct #union { S_un_b: struct { s_b1: uint8; s_b2: uint8; s_b3: uint8; s_b4: uint8; }; S_un_w: struct { s_w1: ushort; s_w2: ushort; }; S_addr: ulong; }; }
export type s_WSAData = struct { wVersion: ushort; wHighVersion: ushort; iMaxSockets: ushort; iMaxUdpDg: ushort; lpVendorInfo: *char; szDescription: [257; char]; szSystemStatus: [129; char]; }
export type s__TRANSMIT_FILE_BUFFERS = struct { Head: *; HeadLength: ulong; Tail: *; TailLength: ulong; }
export type s_sockaddr
export type s_sockaddr_in
export type s_linger
export type s_hostent
export type s_servent
export type s_protoent
export type s_timeval
export type s__CMS_KEY_INFO = struct { dwVersion: ulong; Algid: uint; pbOID: *uint8; cbOID: ulong; }
export type s__HMAC_Info = struct { HashAlgid: uint; pbInnerString: *uint8; cbInnerString: ulong; pbOuterString: *uint8; cbOuterString: ulong; }
export type s__SCHANNEL_ALG = struct { dwUse: ulong; Algid: uint; cBits: ulong; dwFlags: ulong; dwReserved: ulong; }
export type s__PROV_ENUMALGS = struct { aiAlgid: uint; dwBitLen: ulong; dwNameLen: ulong; szName: [20; char]; }
export type s__PROV_ENUMALGS_EX = struct { aiAlgid: uint; dwDefaultLen: ulong; dwMinLen: ulong; dwMaxLen: ulong; dwProtocols: ulong; dwNameLen: ulong; szName: [20; char]; dwLongNameLen: ulong; szLongName: [40; char]; }
export type s__PUBLICKEYSTRUC = struct { bType: uint8; bVersion: uint8; reserved: ushort; aiKeyAlg: uint; }
export type s__RSAPUBKEY = struct { magic: ulong; bitlen: ulong; pubexp: ulong; }
export type s__PUBKEY = struct { magic: ulong; bitlen: ulong; }
export type s__DSSSEED = struct { counter: ulong; seed: [20; uint8]; }
export type s__PUBKEYVER3 = struct { magic: ulong; bitlenP: ulong; bitlenQ: ulong; bitlenJ: ulong; DSSSeed: s__DSSSEED; }
export type s__PRIVKEYVER3 = struct { magic: ulong; bitlenP: ulong; bitlenQ: ulong; bitlenJ: ulong; bitlenX: ulong; DSSSeed: s__DSSSEED; }
export type s__KEY_TYPE_SUBTYPE = struct { dwKeySpec: ulong; Type: s__GUID; Subtype: s__GUID; }
export type s__CERT_FORTEZZA_DATA_PROP = struct { SerialNumber: [8; uint8]; CertIndex: int; CertLabel: [36; uint8]; }
export type s__CRYPT_RC4_KEY_STATE = struct { Key: [16; uint8]; SBox: [256; uint8]; i: uint8; j: uint8; }
export type s__CRYPT_DES_KEY_STATE = struct { Key: [8; uint8]; IV: [8; uint8]; Feedback: [8; uint8]; }
export type s__CRYPT_3DES_KEY_STATE = struct { Key: [24; uint8]; IV: [8; uint8]; Feedback: [8; uint8]; }
export type s__CRYPT_AES_128_KEY_STATE = struct { Key: [16; uint8]; IV: [16; uint8]; EncryptionState: [11; [16; uint8]]; DecryptionState: [11; [16; uint8]]; Feedback: [16; uint8]; }
export type s__CRYPT_AES_256_KEY_STATE = struct { Key: [32; uint8]; IV: [16; uint8]; EncryptionState: [15; [16; uint8]]; DecryptionState: [15; [16; uint8]]; Feedback: [16; uint8]; }
export type s__CRYPTOAPI_BLOB = struct { cbData: ulong; pbData: *uint8; }
export type s__CMS_DH_KEY_INFO = struct { dwVersion: ulong; Algid: uint; pszContentEncObjId: *char; PubInfo: s__CRYPTOAPI_BLOB; pReserved: *; }
export type s___BCRYPT_KEY_LENGTHS_STRUCT = struct { dwMinLength: ulong; dwMaxLength: ulong; dwIncrement: ulong; }
export type s__BCRYPT_OID = struct { cbOID: ulong; pbOID: *uint8; }
export type s__BCRYPT_OID_LIST = struct { dwOIDCount: ulong; pOIDs: *s__BCRYPT_OID; }
export type s__BCRYPT_PKCS1_PADDING_INFO = struct { pszAlgId: *ushort; }
export type s__BCRYPT_PSS_PADDING_INFO = struct { pszAlgId: *ushort; cbSalt: ulong; }
export type s__BCRYPT_OAEP_PADDING_INFO = struct { pszAlgId: *ushort; pbLabel: *uint8; cbLabel: ulong; }
export type s__BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = struct { cbSize: ulong; dwInfoVersion: ulong; pbNonce: *uint8; cbNonce: ulong; pbAuthData: *uint8; cbAuthData: ulong; pbTag: *uint8; cbTag: ulong; pbMacContext: *uint8; cbMacContext: ulong; cbAAD: ulong; cbData: uint64; dwFlags: ulong; }
export type s__BCryptBuffer = struct { cbBuffer: ulong; BufferType: ulong; pvBuffer: *; }
export type s__BCryptBufferDesc = struct { ulVersion: ulong; cBuffers: ulong; pBuffers: *s__BCryptBuffer; }
export type s__BCRYPT_KEY_BLOB = struct { Magic: ulong; }
export type s__BCRYPT_RSAKEY_BLOB = struct { Magic: ulong; BitLength: ulong; cbPublicExp: ulong; cbModulus: ulong; cbPrime1: ulong; cbPrime2: ulong; }
export type s__BCRYPT_ECCKEY_BLOB = struct { dwMagic: ulong; cbKey: ulong; }
export type s__SSL_ECCKEY_BLOB = struct { dwCurveType: ulong; cbKey: ulong; }
export type e_ECC_CURVE_TYPE_ENUM = enum { BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1; BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2; BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3; }
export type e_ECC_CURVE_ALG_ID_ENUM = enum { BCRYPT_NO_CURVE_GENERATION_ALG_ID; }
export type s__BCRYPT_ECCFULLKEY_BLOB = struct { dwMagic: ulong; dwVersion: ulong; dwCurveType: e_ECC_CURVE_TYPE_ENUM; dwCurveGenerationAlgId: e_ECC_CURVE_ALG_ID_ENUM; cbFieldLength: ulong; cbSubgroupOrder: ulong; cbCofactor: ulong; cbSeed: ulong; }
export type s__BCRYPT_DH_KEY_BLOB = struct { dwMagic: ulong; cbKey: ulong; }
export type s__BCRYPT_DH_PARAMETER_HEADER = struct { cbLength: ulong; dwMagic: ulong; cbKeyLength: ulong; }
export type s__BCRYPT_DSA_KEY_BLOB = struct { dwMagic: ulong; cbKey: ulong; Count: [4; uint8]; Seed: [20; uint8]; q: [20; uint8]; }
export type e_HASHALGORITHM_ENUM = enum { DSA_HASH_ALGORITHM_SHA1; DSA_HASH_ALGORITHM_SHA256 = 1; DSA_HASH_ALGORITHM_SHA512 = 2; }
export type e_DSAFIPSVERSION_ENUM = enum { DSA_FIPS186_2; DSA_FIPS186_3 = 1; }
export type s__BCRYPT_DSA_KEY_BLOB_V2 = struct { dwMagic: ulong; cbKey: ulong; hashAlgorithm: e_HASHALGORITHM_ENUM; standardVersion: e_DSAFIPSVERSION_ENUM; cbSeedLength: ulong; cbGroupSize: ulong; Count: [4; uint8]; }
export type s__BCRYPT_KEY_DATA_BLOB_HEADER = struct { dwMagic: ulong; dwVersion: ulong; cbKeyData: ulong; }
export type s__BCRYPT_DSA_PARAMETER_HEADER = struct { cbLength: ulong; dwMagic: ulong; cbKeyLength: ulong; Count: [4; uint8]; Seed: [20; uint8]; q: [20; uint8]; }
export type s__BCRYPT_DSA_PARAMETER_HEADER_V2 = struct { cbLength: ulong; dwMagic: ulong; cbKeyLength: ulong; hashAlgorithm: e_HASHALGORITHM_ENUM; standardVersion: e_DSAFIPSVERSION_ENUM; cbSeedLength: ulong; cbGroupSize: ulong; Count: [4; uint8]; }
export type s__BCRYPT_ECC_CURVE_NAMES = struct { dwEccCurveNames: ulong; pEccCurveNames: **ushort; }
export type e_BCRYPT_HASH_OPERATION_TYPE = enum { BCRYPT_HASH_OPERATION_HASH_DATA = 1; BCRYPT_HASH_OPERATION_FINISH_HASH = 2; }
export type s__BCRYPT_MULTI_HASH_OPERATION = struct { iHash: ulong; hashOperation: e_BCRYPT_HASH_OPERATION_TYPE; pbBuffer: *uint8; cbBuffer: ulong; }
export type e_BCRYPT_MULTI_OPERATION_TYPE = enum { BCRYPT_OPERATION_TYPE_HASH = 1; }
export type s__BCRYPT_MULTI_OBJECT_LENGTH_STRUCT = struct { cbPerObject: ulong; cbPerElement: ulong; }
export type s__BCRYPT_ALGORITHM_IDENTIFIER = struct { pszName: *ushort; dwClass: ulong; dwFlags: ulong; }
export type s__BCRYPT_PROVIDER_NAME = struct { pszProviderName: *ushort; }
export type s__BCRYPT_INTERFACE_VERSION = struct { MajorVersion: ushort; MinorVersion: ushort; }
export type s__CRYPT_INTERFACE_REG = struct { dwInterface: ulong; dwFlags: ulong; cFunctions: ulong; rgpszFunctions: **ushort; }
export type s__CRYPT_IMAGE_REG = struct { pszImage: *ushort; cInterfaces: ulong; rgpInterfaces: **s__CRYPT_INTERFACE_REG; }
export type s__CRYPT_PROVIDER_REG = struct { cAliases: ulong; rgpszAliases: **ushort; pUM: *s__CRYPT_IMAGE_REG; pKM: *s__CRYPT_IMAGE_REG; }
export type s__CRYPT_PROVIDERS = struct { cProviders: ulong; rgpszProviders: **ushort; }
export type s__CRYPT_CONTEXT_CONFIG = struct { dwFlags: ulong; dwReserved: ulong; }
export type s__CRYPT_CONTEXT_FUNCTION_CONFIG = struct { dwFlags: ulong; dwReserved: ulong; }
export type s__CRYPT_CONTEXTS = struct { cContexts: ulong; rgpszContexts: **ushort; }
export type s__CRYPT_CONTEXT_FUNCTIONS = struct { cFunctions: ulong; rgpszFunctions: **ushort; }
export type s__CRYPT_CONTEXT_FUNCTION_PROVIDERS = struct { cProviders: ulong; rgpszProviders: **ushort; }
export type s__CRYPT_PROPERTY_REF = struct { pszProperty: *ushort; cbValue: ulong; pbValue: *uint8; }
export type s__CRYPT_IMAGE_REF = struct { pszImage: *ushort; dwFlags: ulong; }
export type s__CRYPT_PROVIDER_REF = struct { dwInterface: ulong; pszFunction: *ushort; pszProvider: *ushort; cProperties: ulong; rgpProperties: **s__CRYPT_PROPERTY_REF; pUM: *s__CRYPT_IMAGE_REF; pKM: *s__CRYPT_IMAGE_REF; }
export type s__CRYPT_PROVIDER_REFS = struct { cProviders: ulong; rgpProviders: **s__CRYPT_PROVIDER_REF; }
export type s_NCRYPT_ALLOC_PARA = struct { cbSize: ulong; pfnAlloc: def (uint64) -> (*); pfnFree: def (*) -> (); }
export type s__NCRYPT_CIPHER_PADDING_INFO = struct { cbSize: ulong; dwFlags: ulong; pbIV: *uint8; cbIV: ulong; pbOtherInfo: *uint8; cbOtherInfo: ulong; }
export type s__NCRYPT_PLATFORM_ATTEST_PADDING_INFO = struct { magic: ulong; pcrMask: ulong; }
export type s__NCRYPT_KEY_ATTEST_PADDING_INFO = struct { magic: ulong; pbKeyBlob: *uint8; cbKeyBlob: ulong; pbKeyAuth: *uint8; cbKeyAuth: ulong; }
export type s__NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = struct { Version: ulong; Flags: ulong; cbPublicKeyBlob: ulong; }
export type s__NCRYPT_VSM_KEY_ATTESTATION_STATEMENT = struct { Magic: ulong; Version: ulong; cbSignature: ulong; cbReport: ulong; cbAttributes: ulong; }
export type s__NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = struct { Version: ulong; TrustletId: uint64; MinSvn: ulong; FlagsMask: ulong; FlagsExpected: ulong; #bits(1) AllowDebugging: ulong; #bits(31) Reserved: ulong; }
export type s__NCRYPT_EXPORTED_ISOLATED_KEY_HEADER = struct { Version: ulong; KeyUsage: ulong; #bits(1) PerBootKey: ulong; #bits(31) Reserved: ulong; cbAlgName: ulong; cbNonce: ulong; cbAuthTag: ulong; cbWrappingKey: ulong; cbIsolatedKey: ulong; }
export type s__NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = struct { Header: s__NCRYPT_EXPORTED_ISOLATED_KEY_HEADER; }
export type s___NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = struct { Magic: uint; Version: uint; HeaderSize: uint; cbCertifyInfo: uint; cbSignature: uint; cbTpmPublic: uint; }
export type s__NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = struct { Magic: ulong; Version: ulong; pcrAlg: ulong; cbSignature: ulong; cbQuote: ulong; cbPcrs: ulong; }
export type s__NCryptAlgorithmName = struct { pszName: *ushort; dwClass: ulong; dwAlgOperations: ulong; dwFlags: ulong; }
export type s_NCryptKeyName = struct { pszName: *ushort; pszAlgid: *ushort; dwLegacyKeySpec: ulong; dwFlags: ulong; }
export type s_NCryptProviderName = struct { pszName: *ushort; pszComment: *ushort; }
export type s___NCRYPT_UI_POLICY = struct { dwVersion: ulong; dwFlags: ulong; pszCreationTitle: *ushort; pszFriendlyName: *ushort; pszDescription: *ushort; }
export type s___NCRYPT_KEY_ACCESS_POLICY_BLOB = struct { dwVersion: ulong; dwPolicyFlags: ulong; cbUserSid: ulong; cbApplicationSid: ulong; }
export type s___NCRYPT_SUPPORTED_LENGTHS = struct { dwMinLength: ulong; dwMaxLength: ulong; dwIncrement: ulong; dwDefaultLength: ulong; }
export type s___NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO = struct { dwVersion: ulong; iExpiration: int; pabNonce: [32; uint8]; pabPolicyRef: [32; uint8]; pabHMAC: [32; uint8]; }
export type s___NCRYPT_PCP_TPM_FW_VERSION_INFO = struct { major1: ushort; major2: ushort; minor1: ushort; minor2: ushort; }
export type s___NCRYPT_PCP_RAW_POLICYDIGEST = struct { dwVersion: ulong; cbDigest: ulong; }
export type s__NCRYPT_KEY_BLOB_HEADER = struct { cbSize: ulong; dwMagic: ulong; cbAlgName: ulong; cbKeyData: ulong; }
export type s_NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = struct { magic: ulong; cbHeader: ulong; cbPublic: ulong; cbPrivate: ulong; cbName: ulong; }
export type s__CRYPT_BIT_BLOB = struct { cbData: ulong; pbData: *uint8; cUnusedBits: ulong; }
export type s__CRYPT_ALGORITHM_IDENTIFIER = struct { pszObjId: *char; Parameters: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_OBJID_TABLE = struct { dwAlgId: ulong; pszObjId: *char; }
export type s__CRYPT_HASH_INFO = struct { HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; Hash: s__CRYPTOAPI_BLOB; }
export type s__CERT_EXTENSION = struct { pszObjId: *char; fCritical: int; Value: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_ATTRIBUTE_TYPE_VALUE = struct { pszObjId: *char; Value: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_ATTRIBUTE = struct { pszObjId: *char; cValue: ulong; rgValue: *s__CRYPTOAPI_BLOB; }
export type s__CRYPT_ATTRIBUTES = struct { cAttr: ulong; rgAttr: *s__CRYPT_ATTRIBUTE; }
export type s__CERT_RDN_ATTR = struct { pszObjId: *char; dwValueType: ulong; Value: s__CRYPTOAPI_BLOB; }
export type s__CERT_RDN = struct { cRDNAttr: ulong; rgRDNAttr: *s__CERT_RDN_ATTR; }
export type s__CERT_NAME_INFO = struct { cRDN: ulong; rgRDN: *s__CERT_RDN; }
export type s__CERT_NAME_VALUE = struct { dwValueType: ulong; Value: s__CRYPTOAPI_BLOB; }
export type s__CERT_PUBLIC_KEY_INFO = struct { Algorithm: s__CRYPT_ALGORITHM_IDENTIFIER; PublicKey: s__CRYPT_BIT_BLOB; }
export type s__CRYPT_ECC_PRIVATE_KEY_INFO = struct { dwVersion: ulong; PrivateKey: s__CRYPTOAPI_BLOB; szCurveOid: *char; PublicKey: s__CRYPT_BIT_BLOB; }
export type s__CRYPT_PRIVATE_KEY_INFO = struct { Version: ulong; Algorithm: s__CRYPT_ALGORITHM_IDENTIFIER; PrivateKey: s__CRYPTOAPI_BLOB; pAttributes: *s__CRYPT_ATTRIBUTES; }
export type s__CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = struct { EncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; EncryptedPrivateKey: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_PKCS8_IMPORT_PARAMS = struct { PrivateKey: s__CRYPTOAPI_BLOB; pResolvehCryptProvFunc: def (*s__CRYPT_PRIVATE_KEY_INFO, *uint64, *) -> (int); pVoidResolveFunc: *; pDecryptPrivateKeyFunc: def (s__CRYPT_ALGORITHM_IDENTIFIER, s__CRYPTOAPI_BLOB, *uint8, *ulong, *) -> (int); pVoidDecryptFunc: *; }
export type s__CRYPT_PKCS8_EXPORT_PARAMS = struct { hCryptProv: uint64; dwKeySpec: ulong; pszPrivateKeyObjId: *char; pEncryptPrivateKeyFunc: def (*s__CRYPT_ALGORITHM_IDENTIFIER, *s__CRYPTOAPI_BLOB, *uint8, *ulong, *) -> (int); pVoidEncryptFunc: *; }
export type s__CERT_INFO = struct { dwVersion: ulong; SerialNumber: s__CRYPTOAPI_BLOB; SignatureAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; Issuer: s__CRYPTOAPI_BLOB; NotBefore: s__FILETIME; NotAfter: s__FILETIME; Subject: s__CRYPTOAPI_BLOB; SubjectPublicKeyInfo: s__CERT_PUBLIC_KEY_INFO; IssuerUniqueId: s__CRYPT_BIT_BLOB; SubjectUniqueId: s__CRYPT_BIT_BLOB; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CRL_ENTRY = struct { SerialNumber: s__CRYPTOAPI_BLOB; RevocationDate: s__FILETIME; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CRL_INFO = struct { dwVersion: ulong; SignatureAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; Issuer: s__CRYPTOAPI_BLOB; ThisUpdate: s__FILETIME; NextUpdate: s__FILETIME; cCRLEntry: ulong; rgCRLEntry: *s__CRL_ENTRY; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CERT_OR_CRL_BLOB = struct { dwChoice: ulong; cbEncoded: ulong; pbEncoded: *uint8; }
export type s__CERT_OR_CRL_BUNDLE = struct { cItem: ulong; rgItem: *s__CERT_OR_CRL_BLOB; }
export type s__CERT_REQUEST_INFO = struct { dwVersion: ulong; Subject: s__CRYPTOAPI_BLOB; SubjectPublicKeyInfo: s__CERT_PUBLIC_KEY_INFO; cAttribute: ulong; rgAttribute: *s__CRYPT_ATTRIBUTE; }
export type s__CERT_KEYGEN_REQUEST_INFO = struct { dwVersion: ulong; SubjectPublicKeyInfo: s__CERT_PUBLIC_KEY_INFO; pwszChallengeString: *ushort; }
export type s__CERT_SIGNED_CONTENT_INFO = struct { ToBeSigned: s__CRYPTOAPI_BLOB; SignatureAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; Signature: s__CRYPT_BIT_BLOB; }
export type s__CTL_USAGE = struct { cUsageIdentifier: ulong; rgpszUsageIdentifier: **char; }
export type s__CTL_ENTRY = struct { SubjectIdentifier: s__CRYPTOAPI_BLOB; cAttribute: ulong; rgAttribute: *s__CRYPT_ATTRIBUTE; }
export type s__CTL_INFO = struct { dwVersion: ulong; SubjectUsage: s__CTL_USAGE; ListIdentifier: s__CRYPTOAPI_BLOB; SequenceNumber: s__CRYPTOAPI_BLOB; ThisUpdate: s__FILETIME; NextUpdate: s__FILETIME; SubjectAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; cCTLEntry: ulong; rgCTLEntry: *s__CTL_ENTRY; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CRYPT_TIME_STAMP_REQUEST_INFO = struct { pszTimeStampAlgorithm: *char; pszContentType: *char; Content: s__CRYPTOAPI_BLOB; cAttribute: ulong; rgAttribute: *s__CRYPT_ATTRIBUTE; }
export type s__CRYPT_ENROLLMENT_NAME_VALUE_PAIR = struct { pwszName: *ushort; pwszValue: *ushort; }
export type s__CRYPT_CSP_PROVIDER = struct { dwKeySpec: ulong; pwszProviderName: *ushort; Signature: s__CRYPT_BIT_BLOB; }
export type s__CRYPT_ENCODE_PARA = struct { cbSize: ulong; pfnAlloc: def (uint64) -> (*); pfnFree: def (*) -> (); }
export type s__CRYPT_DECODE_PARA = struct { cbSize: ulong; pfnAlloc: def (uint64) -> (*); pfnFree: def (*) -> (); }
export type s__CERT_EXTENSIONS = struct { cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CERT_AUTHORITY_KEY_ID_INFO = struct { KeyId: s__CRYPTOAPI_BLOB; CertIssuer: s__CRYPTOAPI_BLOB; CertSerialNumber: s__CRYPTOAPI_BLOB; }
export type s__CERT_PRIVATE_KEY_VALIDITY = struct { NotBefore: s__FILETIME; NotAfter: s__FILETIME; }
export type s__CERT_KEY_ATTRIBUTES_INFO = struct { KeyId: s__CRYPTOAPI_BLOB; IntendedKeyUsage: s__CRYPT_BIT_BLOB; pPrivateKeyUsagePeriod: *s__CERT_PRIVATE_KEY_VALIDITY; }
export type s__CERT_POLICY_ID = struct { cCertPolicyElementId: ulong; rgpszCertPolicyElementId: **char; }
export type s__CERT_KEY_USAGE_RESTRICTION_INFO = struct { cCertPolicyId: ulong; rgCertPolicyId: *s__CERT_POLICY_ID; RestrictedKeyUsage: s__CRYPT_BIT_BLOB; }
export type s__CERT_OTHER_NAME = struct { pszObjId: *char; Value: s__CRYPTOAPI_BLOB; }
export type s__CERT_ALT_NAME_ENTRY = struct { dwAltNameChoice: ulong; struct #union { pOtherName: *s__CERT_OTHER_NAME; pwszRfc822Name: *ushort; pwszDNSName: *ushort; DirectoryName: s__CRYPTOAPI_BLOB; pwszURL: *ushort; IPAddress: s__CRYPTOAPI_BLOB; pszRegisteredID: *char; }; }
export type s__CERT_ALT_NAME_INFO = struct { cAltEntry: ulong; rgAltEntry: *s__CERT_ALT_NAME_ENTRY; }
export type s__CERT_BASIC_CONSTRAINTS_INFO = struct { SubjectType: s__CRYPT_BIT_BLOB; fPathLenConstraint: int; dwPathLenConstraint: ulong; cSubtreesConstraint: ulong; rgSubtreesConstraint: *s__CRYPTOAPI_BLOB; }
export type s__CERT_BASIC_CONSTRAINTS2_INFO = struct { fCA: int; fPathLenConstraint: int; dwPathLenConstraint: ulong; }
export type s__CERT_POLICY_QUALIFIER_INFO = struct { pszPolicyQualifierId: *char; Qualifier: s__CRYPTOAPI_BLOB; }
export type s__CERT_POLICY_INFO = struct { pszPolicyIdentifier: *char; cPolicyQualifier: ulong; rgPolicyQualifier: *s__CERT_POLICY_QUALIFIER_INFO; }
export type s__CERT_POLICIES_INFO = struct { cPolicyInfo: ulong; rgPolicyInfo: *s__CERT_POLICY_INFO; }
export type s__CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = struct { pszOrganization: *char; cNoticeNumbers: ulong; rgNoticeNumbers: *int; }
export type s__CERT_POLICY_QUALIFIER_USER_NOTICE = struct { pNoticeReference: *s__CERT_POLICY_QUALIFIER_NOTICE_REFERENCE; pszDisplayText: *ushort; }
export type s__CPS_URLS = struct { pszURL: *ushort; pAlgorithm: *s__CRYPT_ALGORITHM_IDENTIFIER; pDigest: *s__CRYPTOAPI_BLOB; }
export type s__CERT_POLICY95_QUALIFIER1 = struct { pszPracticesReference: *ushort; pszNoticeIdentifier: *char; pszNSINoticeIdentifier: *char; cCPSURLs: ulong; rgCPSURLs: *s__CPS_URLS; }
export type s__CERT_POLICY_MAPPING = struct { pszIssuerDomainPolicy: *char; pszSubjectDomainPolicy: *char; }
export type s__CERT_POLICY_MAPPINGS_INFO = struct { cPolicyMapping: ulong; rgPolicyMapping: *s__CERT_POLICY_MAPPING; }
export type s__CERT_POLICY_CONSTRAINTS_INFO = struct { fRequireExplicitPolicy: int; dwRequireExplicitPolicySkipCerts: ulong; fInhibitPolicyMapping: int; dwInhibitPolicyMappingSkipCerts: ulong; }
export type s__CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = struct { pszObjId: *char; cValue: ulong; rgValue: *s__CRYPTOAPI_BLOB; }
export type s__CRYPT_CONTENT_INFO = struct { pszObjId: *char; Content: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_SEQUENCE_OF_ANY = struct { cValue: ulong; rgValue: *s__CRYPTOAPI_BLOB; }
export type s__CERT_AUTHORITY_KEY_ID2_INFO = struct { KeyId: s__CRYPTOAPI_BLOB; AuthorityCertIssuer: s__CERT_ALT_NAME_INFO; AuthorityCertSerialNumber: s__CRYPTOAPI_BLOB; }
export type s__CERT_ACCESS_DESCRIPTION = struct { pszAccessMethod: *char; AccessLocation: s__CERT_ALT_NAME_ENTRY; }
export type s__CERT_AUTHORITY_INFO_ACCESS = struct { cAccDescr: ulong; rgAccDescr: *s__CERT_ACCESS_DESCRIPTION; }
export type s__CRL_DIST_POINT_NAME = struct { dwDistPointNameChoice: ulong; struct #union { FullName: s__CERT_ALT_NAME_INFO; }; }
export type s__CRL_DIST_POINT = struct { DistPointName: s__CRL_DIST_POINT_NAME; ReasonFlags: s__CRYPT_BIT_BLOB; CRLIssuer: s__CERT_ALT_NAME_INFO; }
export type s__CRL_DIST_POINTS_INFO = struct { cDistPoint: ulong; rgDistPoint: *s__CRL_DIST_POINT; }
export type s__CROSS_CERT_DIST_POINTS_INFO = struct { dwSyncDeltaTime: ulong; cDistPoint: ulong; rgDistPoint: *s__CERT_ALT_NAME_INFO; }
export type s__CERT_PAIR = struct { Forward: s__CRYPTOAPI_BLOB; Reverse: s__CRYPTOAPI_BLOB; }
export type s__CRL_ISSUING_DIST_POINT = struct { DistPointName: s__CRL_DIST_POINT_NAME; fOnlyContainsUserCerts: int; fOnlyContainsCACerts: int; OnlySomeReasonFlags: s__CRYPT_BIT_BLOB; fIndirectCRL: int; }
export type s__CERT_GENERAL_SUBTREE = struct { Base: s__CERT_ALT_NAME_ENTRY; dwMinimum: ulong; fMaximum: int; dwMaximum: ulong; }
export type s__CERT_NAME_CONSTRAINTS_INFO = struct { cPermittedSubtree: ulong; rgPermittedSubtree: *s__CERT_GENERAL_SUBTREE; cExcludedSubtree: ulong; rgExcludedSubtree: *s__CERT_GENERAL_SUBTREE; }
export type s__CERT_DSS_PARAMETERS = struct { p: s__CRYPTOAPI_BLOB; q: s__CRYPTOAPI_BLOB; g: s__CRYPTOAPI_BLOB; }
export type s__CERT_DH_PARAMETERS = struct { p: s__CRYPTOAPI_BLOB; g: s__CRYPTOAPI_BLOB; }
export type s__CERT_ECC_SIGNATURE = struct { r: s__CRYPTOAPI_BLOB; s: s__CRYPTOAPI_BLOB; }
export type s__CERT_X942_DH_VALIDATION_PARAMS = struct { seed: s__CRYPT_BIT_BLOB; pgenCounter: ulong; }
export type s__CERT_X942_DH_PARAMETERS = struct { p: s__CRYPTOAPI_BLOB; g: s__CRYPTOAPI_BLOB; q: s__CRYPTOAPI_BLOB; j: s__CRYPTOAPI_BLOB; pValidationParams: *s__CERT_X942_DH_VALIDATION_PARAMS; }
export type s__CRYPT_X942_OTHER_INFO = struct { pszContentEncryptionObjId: *char; rgbCounter: [4; uint8]; rgbKeyLength: [4; uint8]; PubInfo: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_ECC_CMS_SHARED_INFO = struct { Algorithm: s__CRYPT_ALGORITHM_IDENTIFIER; EntityUInfo: s__CRYPTOAPI_BLOB; rgbSuppPubInfo: [4; uint8]; }
export type s__CRYPT_RC2_CBC_PARAMETERS = struct { dwVersion: ulong; fIV: int; rgbIV: [8; uint8]; }
export type s__CRYPT_SMIME_CAPABILITY = struct { pszObjId: *char; Parameters: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_SMIME_CAPABILITIES = struct { cCapability: ulong; rgCapability: *s__CRYPT_SMIME_CAPABILITY; }
export type s__CERT_QC_STATEMENT = struct { pszStatementId: *char; StatementInfo: s__CRYPTOAPI_BLOB; }
export type s__CERT_QC_STATEMENTS_EXT_INFO = struct { cStatement: ulong; rgStatement: *s__CERT_QC_STATEMENT; }
export type s__CRYPT_MASK_GEN_ALGORITHM = struct { pszObjId: *char; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; }
export type s__CRYPT_RSA_SSA_PSS_PARAMETERS = struct { HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; MaskGenAlgorithm: s__CRYPT_MASK_GEN_ALGORITHM; dwSaltLength: ulong; dwTrailerField: ulong; }
export type s__CRYPT_PSOURCE_ALGORITHM = struct { pszObjId: *char; EncodingParameters: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_RSAES_OAEP_PARAMETERS = struct { HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; MaskGenAlgorithm: s__CRYPT_MASK_GEN_ALGORITHM; PSourceAlgorithm: s__CRYPT_PSOURCE_ALGORITHM; }
export type s__CMC_TAGGED_ATTRIBUTE = struct { dwBodyPartID: ulong; Attribute: s__CRYPT_ATTRIBUTE; }
export type s__CMC_TAGGED_CERT_REQUEST = struct { dwBodyPartID: ulong; SignedCertRequest: s__CRYPTOAPI_BLOB; }
export type s__CMC_TAGGED_REQUEST = struct { dwTaggedRequestChoice: ulong; struct #union { pTaggedCertRequest: *s__CMC_TAGGED_CERT_REQUEST; }; }
export type s__CMC_TAGGED_CONTENT_INFO = struct { dwBodyPartID: ulong; EncodedContentInfo: s__CRYPTOAPI_BLOB; }
export type s__CMC_TAGGED_OTHER_MSG = struct { dwBodyPartID: ulong; pszObjId: *char; Value: s__CRYPTOAPI_BLOB; }
export type s__CMC_DATA_INFO = struct { cTaggedAttribute: ulong; rgTaggedAttribute: *s__CMC_TAGGED_ATTRIBUTE; cTaggedRequest: ulong; rgTaggedRequest: *s__CMC_TAGGED_REQUEST; cTaggedContentInfo: ulong; rgTaggedContentInfo: *s__CMC_TAGGED_CONTENT_INFO; cTaggedOtherMsg: ulong; rgTaggedOtherMsg: *s__CMC_TAGGED_OTHER_MSG; }
export type s__CMC_RESPONSE_INFO = struct { cTaggedAttribute: ulong; rgTaggedAttribute: *s__CMC_TAGGED_ATTRIBUTE; cTaggedContentInfo: ulong; rgTaggedContentInfo: *s__CMC_TAGGED_CONTENT_INFO; cTaggedOtherMsg: ulong; rgTaggedOtherMsg: *s__CMC_TAGGED_OTHER_MSG; }
export type s__CMC_PEND_INFO = struct { PendToken: s__CRYPTOAPI_BLOB; PendTime: s__FILETIME; }
export type s__CMC_STATUS_INFO = struct { dwStatus: ulong; cBodyList: ulong; rgdwBodyList: *ulong; pwszStatusString: *ushort; dwOtherInfoChoice: ulong; struct #union { dwFailInfo: ulong; pPendInfo: *s__CMC_PEND_INFO; }; }
export type s__CMC_ADD_EXTENSIONS_INFO = struct { dwCmcDataReference: ulong; cCertReference: ulong; rgdwCertReference: *ulong; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CMC_ADD_ATTRIBUTES_INFO = struct { dwCmcDataReference: ulong; cCertReference: ulong; rgdwCertReference: *ulong; cAttribute: ulong; rgAttribute: *s__CRYPT_ATTRIBUTE; }
export type s__CERT_TEMPLATE_EXT = struct { pszObjId: *char; dwMajorVersion: ulong; fMinorVersion: int; dwMinorVersion: ulong; }
export type s__CERT_HASHED_URL = struct { HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; Hash: s__CRYPTOAPI_BLOB; pwszUrl: *ushort; }
export type s__CERT_LOGOTYPE_DETAILS = struct { pwszMimeType: *ushort; cHashedUrl: ulong; rgHashedUrl: *s__CERT_HASHED_URL; }
export type s__CERT_LOGOTYPE_REFERENCE = struct { cHashedUrl: ulong; rgHashedUrl: *s__CERT_HASHED_URL; }
export type s__CERT_LOGOTYPE_IMAGE_INFO = struct { dwLogotypeImageInfoChoice: ulong; dwFileSize: ulong; dwXSize: ulong; dwYSize: ulong; dwLogotypeImageResolutionChoice: ulong; struct #union { dwNumBits: ulong; dwTableSize: ulong; }; pwszLanguage: *ushort; }
export type s__CERT_LOGOTYPE_IMAGE = struct { LogotypeDetails: s__CERT_LOGOTYPE_DETAILS; pLogotypeImageInfo: *s__CERT_LOGOTYPE_IMAGE_INFO; }
export type s__CERT_LOGOTYPE_AUDIO_INFO = struct { dwFileSize: ulong; dwPlayTime: ulong; dwChannels: ulong; dwSampleRate: ulong; pwszLanguage: *ushort; }
export type s__CERT_LOGOTYPE_AUDIO = struct { LogotypeDetails: s__CERT_LOGOTYPE_DETAILS; pLogotypeAudioInfo: *s__CERT_LOGOTYPE_AUDIO_INFO; }
export type s__CERT_LOGOTYPE_DATA = struct { cLogotypeImage: ulong; rgLogotypeImage: *s__CERT_LOGOTYPE_IMAGE; cLogotypeAudio: ulong; rgLogotypeAudio: *s__CERT_LOGOTYPE_AUDIO; }
export type s__CERT_LOGOTYPE_INFO = struct { dwLogotypeInfoChoice: ulong; struct #union { pLogotypeDirectInfo: *s__CERT_LOGOTYPE_DATA; pLogotypeIndirectInfo: *s__CERT_LOGOTYPE_REFERENCE; }; }
export type s__CERT_OTHER_LOGOTYPE_INFO = struct { pszObjId: *char; LogotypeInfo: s__CERT_LOGOTYPE_INFO; }
export type s__CERT_LOGOTYPE_EXT_INFO = struct { cCommunityLogo: ulong; rgCommunityLogo: *s__CERT_LOGOTYPE_INFO; pIssuerLogo: *s__CERT_LOGOTYPE_INFO; pSubjectLogo: *s__CERT_LOGOTYPE_INFO; cOtherLogo: ulong; rgOtherLogo: *s__CERT_OTHER_LOGOTYPE_INFO; }
export type s__CERT_BIOMETRIC_DATA = struct { dwTypeOfBiometricDataChoice: ulong; struct #union { dwPredefined: ulong; pszObjId: *char; }; HashedUrl: s__CERT_HASHED_URL; }
export type s__CERT_BIOMETRIC_EXT_INFO = struct { cBiometricData: ulong; rgBiometricData: *s__CERT_BIOMETRIC_DATA; }
export type s__OCSP_SIGNATURE_INFO = struct { SignatureAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; Signature: s__CRYPT_BIT_BLOB; cCertEncoded: ulong; rgCertEncoded: *s__CRYPTOAPI_BLOB; }
export type s__OCSP_SIGNED_REQUEST_INFO = struct { ToBeSigned: s__CRYPTOAPI_BLOB; pOptionalSignatureInfo: *s__OCSP_SIGNATURE_INFO; }
export type s__OCSP_CERT_ID = struct { HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; IssuerNameHash: s__CRYPTOAPI_BLOB; IssuerKeyHash: s__CRYPTOAPI_BLOB; SerialNumber: s__CRYPTOAPI_BLOB; }
export type s__OCSP_REQUEST_ENTRY = struct { CertId: s__OCSP_CERT_ID; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__OCSP_REQUEST_INFO = struct { dwVersion: ulong; pRequestorName: *s__CERT_ALT_NAME_ENTRY; cRequestEntry: ulong; rgRequestEntry: *s__OCSP_REQUEST_ENTRY; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__OCSP_RESPONSE_INFO = struct { dwStatus: ulong; pszObjId: *char; Value: s__CRYPTOAPI_BLOB; }
export type s__OCSP_BASIC_SIGNED_RESPONSE_INFO = struct { ToBeSigned: s__CRYPTOAPI_BLOB; SignatureInfo: s__OCSP_SIGNATURE_INFO; }
export type s__OCSP_BASIC_REVOKED_INFO = struct { RevocationDate: s__FILETIME; dwCrlReasonCode: ulong; }
export type s__OCSP_BASIC_RESPONSE_ENTRY = struct { CertId: s__OCSP_CERT_ID; dwCertStatus: ulong; struct #union { pRevokedInfo: *s__OCSP_BASIC_REVOKED_INFO; }; ThisUpdate: s__FILETIME; NextUpdate: s__FILETIME; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__OCSP_BASIC_RESPONSE_INFO = struct { dwVersion: ulong; dwResponderIdChoice: ulong; struct #union { ByNameResponderId: s__CRYPTOAPI_BLOB; ByKeyResponderId: s__CRYPTOAPI_BLOB; }; ProducedAt: s__FILETIME; cResponseEntry: ulong; rgResponseEntry: *s__OCSP_BASIC_RESPONSE_ENTRY; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CERT_SUPPORTED_ALGORITHM_INFO = struct { Algorithm: s__CRYPT_ALGORITHM_IDENTIFIER; IntendedKeyUsage: s__CRYPT_BIT_BLOB; IntendedCertPolicies: s__CERT_POLICIES_INFO; }
export type s__CERT_TPM_SPECIFICATION_INFO = struct { pwszFamily: *ushort; dwLevel: ulong; dwRevision: ulong; }
export type s__CRYPT_OID_FUNC_ENTRY = struct { pszOID: *char; pvFuncAddr: *; }
export type s__CRYPT_OID_INFO = struct { cbSize: ulong; pszOID: *char; pwszName: *ushort; dwGroupId: ulong; struct #union { dwValue: ulong; Algid: uint; dwLength: ulong; }; ExtraInfo: s__CRYPTOAPI_BLOB; }
export type s__CERT_STRONG_SIGN_SERIALIZED_INFO = struct { dwFlags: ulong; pwszCNGSignHashAlgids: *ushort; pwszCNGPubKeyMinBitLengths: *ushort; }
export type s__CERT_STRONG_SIGN_PARA = struct { cbSize: ulong; dwInfoChoice: ulong; struct #union { pvInfo: *; pSerializedInfo: *s__CERT_STRONG_SIGN_SERIALIZED_INFO; pszOID: *char; }; }
export type s__CERT_ISSUER_SERIAL_NUMBER = struct { Issuer: s__CRYPTOAPI_BLOB; SerialNumber: s__CRYPTOAPI_BLOB; }
export type s__CERT_ID = struct { dwIdChoice: ulong; struct #union { IssuerSerialNumber: s__CERT_ISSUER_SERIAL_NUMBER; KeyId: s__CRYPTOAPI_BLOB; HashId: s__CRYPTOAPI_BLOB; }; }
export type s__CMSG_SIGNER_ENCODE_INFO = struct { cbSize: ulong; pCertInfo: *s__CERT_INFO; struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; cAuthAttr: ulong; rgAuthAttr: *s__CRYPT_ATTRIBUTE; cUnauthAttr: ulong; rgUnauthAttr: *s__CRYPT_ATTRIBUTE; }
export type s__CMSG_SIGNED_ENCODE_INFO = struct { cbSize: ulong; cSigners: ulong; rgSigners: *s__CMSG_SIGNER_ENCODE_INFO; cCertEncoded: ulong; rgCertEncoded: *s__CRYPTOAPI_BLOB; cCrlEncoded: ulong; rgCrlEncoded: *s__CRYPTOAPI_BLOB; }
export type s__CMSG_RECIPIENT_ENCODE_INFO
export type s__CMSG_ENVELOPED_ENCODE_INFO = struct { cbSize: ulong; hCryptProv: uint64; ContentEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvEncryptionAuxInfo: *; cRecipients: ulong; rgpRecipients: **s__CERT_INFO; }
export type s__CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = struct { cbSize: ulong; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvKeyEncryptionAuxInfo: *; hCryptProv: uint64; RecipientPublicKey: s__CRYPT_BIT_BLOB; RecipientId: s__CERT_ID; }
export type s__CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = struct { cbSize: ulong; RecipientPublicKey: s__CRYPT_BIT_BLOB; RecipientId: s__CERT_ID; Date: s__FILETIME; pOtherAttr: *s__CRYPT_ATTRIBUTE_TYPE_VALUE; }
export type s__CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = struct { cbSize: ulong; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvKeyEncryptionAuxInfo: *; KeyWrapAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvKeyWrapAuxInfo: *; hCryptProv: uint64; dwKeySpec: ulong; dwKeyChoice: ulong; struct #union { pEphemeralAlgorithm: *s__CRYPT_ALGORITHM_IDENTIFIER; pSenderId: *s__CERT_ID; }; UserKeyingMaterial: s__CRYPTOAPI_BLOB; cRecipientEncryptedKeys: ulong; rgpRecipientEncryptedKeys: **s__CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO; }
export type s__CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = struct { cbSize: ulong; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvKeyEncryptionAuxInfo: *; hCryptProv: uint64; dwKeyChoice: ulong; struct #union { hKeyEncryptionKey: uint64; pvKeyEncryptionKey: *; }; KeyId: s__CRYPTOAPI_BLOB; Date: s__FILETIME; pOtherAttr: *s__CRYPT_ATTRIBUTE_TYPE_VALUE; }
export type s__CMSG_RC2_AUX_INFO = struct { cbSize: ulong; dwBitLen: ulong; }
export type s__CMSG_SP3_COMPATIBLE_AUX_INFO = struct { cbSize: ulong; dwFlags: ulong; }
export type s__CMSG_RC4_AUX_INFO = struct { cbSize: ulong; dwBitLen: ulong; }
export type s__CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = struct { cbSize: ulong; SignedInfo: s__CMSG_SIGNED_ENCODE_INFO; EnvelopedInfo: s__CMSG_ENVELOPED_ENCODE_INFO; }
export type s__CMSG_HASHED_ENCODE_INFO = struct { cbSize: ulong; hCryptProv: uint64; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; }
export type s__CMSG_ENCRYPTED_ENCODE_INFO = struct { cbSize: ulong; ContentEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvEncryptionAuxInfo: *; }
export type s__CMSG_STREAM_INFO = struct { cbContent: ulong; pfnStreamOutput: def (*, *uint8, ulong, int) -> (int); pvArg: *; }
export type s__CMSG_SIGNER_INFO = struct { dwVersion: ulong; Issuer: s__CRYPTOAPI_BLOB; SerialNumber: s__CRYPTOAPI_BLOB; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; HashEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; EncryptedHash: s__CRYPTOAPI_BLOB; AuthAttrs: s__CRYPT_ATTRIBUTES; UnauthAttrs: s__CRYPT_ATTRIBUTES; }
export type s__CMSG_CMS_SIGNER_INFO = struct { dwVersion: ulong; SignerId: s__CERT_ID; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; HashEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; EncryptedHash: s__CRYPTOAPI_BLOB; AuthAttrs: s__CRYPT_ATTRIBUTES; UnauthAttrs: s__CRYPT_ATTRIBUTES; }
export type s__CMSG_KEY_TRANS_RECIPIENT_INFO = struct { dwVersion: ulong; RecipientId: s__CERT_ID; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; EncryptedKey: s__CRYPTOAPI_BLOB; }
export type s__CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = struct { RecipientId: s__CERT_ID; EncryptedKey: s__CRYPTOAPI_BLOB; Date: s__FILETIME; pOtherAttr: *s__CRYPT_ATTRIBUTE_TYPE_VALUE; }
export type s__CMSG_KEY_AGREE_RECIPIENT_INFO = struct { dwVersion: ulong; dwOriginatorChoice: ulong; struct #union { OriginatorCertId: s__CERT_ID; OriginatorPublicKeyInfo: s__CERT_PUBLIC_KEY_INFO; }; UserKeyingMaterial: s__CRYPTOAPI_BLOB; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; cRecipientEncryptedKeys: ulong; rgpRecipientEncryptedKeys: **s__CMSG_RECIPIENT_ENCRYPTED_KEY_INFO; }
export type s__CMSG_MAIL_LIST_RECIPIENT_INFO = struct { dwVersion: ulong; KeyId: s__CRYPTOAPI_BLOB; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; EncryptedKey: s__CRYPTOAPI_BLOB; Date: s__FILETIME; pOtherAttr: *s__CRYPT_ATTRIBUTE_TYPE_VALUE; }
export type s__CMSG_CMS_RECIPIENT_INFO = struct { dwRecipientChoice: ulong; struct #union { pKeyTrans: *s__CMSG_KEY_TRANS_RECIPIENT_INFO; pKeyAgree: *s__CMSG_KEY_AGREE_RECIPIENT_INFO; pMailList: *s__CMSG_MAIL_LIST_RECIPIENT_INFO; }; }
export type s__CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = struct { cbSize: ulong; hCryptProv: uint64; dwSignerIndex: ulong; dwSignerType: ulong; pvSigner: *; }
export type s__CMSG_CTRL_DECRYPT_PARA = struct { cbSize: ulong; struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; dwRecipientIndex: ulong; }
export type s__CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = struct { cbSize: ulong; struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; pKeyTrans: *s__CMSG_KEY_TRANS_RECIPIENT_INFO; dwRecipientIndex: ulong; }
export type s__CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = struct { cbSize: ulong; struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; pKeyAgree: *s__CMSG_KEY_AGREE_RECIPIENT_INFO; dwRecipientIndex: ulong; dwRecipientEncryptedKeyIndex: ulong; OriginatorPublicKey: s__CRYPT_BIT_BLOB; }
export type s__CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = struct { cbSize: ulong; hCryptProv: uint64; pMailList: *s__CMSG_MAIL_LIST_RECIPIENT_INFO; dwRecipientIndex: ulong; dwKeyChoice: ulong; struct #union { hKeyEncryptionKey: uint64; pvKeyEncryptionKey: *; }; }
export type s__CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = struct { cbSize: ulong; dwSignerIndex: ulong; blob: s__CRYPTOAPI_BLOB; }
export type s__CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = struct { cbSize: ulong; dwSignerIndex: ulong; dwUnauthAttrIndex: ulong; }
export type s__CMSG_CONTENT_ENCRYPT_INFO = struct { cbSize: ulong; hCryptProv: uint64; ContentEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvEncryptionAuxInfo: *; cRecipients: ulong; rgCmsRecipients: *s__CMSG_RECIPIENT_ENCODE_INFO; pfnAlloc: def (uint64) -> (*); pfnFree: def (*) -> (); dwEncryptFlags: ulong; struct #union { hContentEncryptKey: uint64; hCNGContentEncryptKey: *; }; dwFlags: ulong; fCNG: int; pbCNGContentEncryptKeyObject: *uint8; pbContentEncryptKey: *uint8; cbContentEncryptKey: ulong; }
export type s__CMSG_KEY_TRANS_ENCRYPT_INFO = struct { cbSize: ulong; dwRecipientIndex: ulong; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; EncryptedKey: s__CRYPTOAPI_BLOB; dwFlags: ulong; }
export type s__CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = struct { cbSize: ulong; EncryptedKey: s__CRYPTOAPI_BLOB; }
export type s__CMSG_KEY_AGREE_ENCRYPT_INFO = struct { cbSize: ulong; dwRecipientIndex: ulong; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; UserKeyingMaterial: s__CRYPTOAPI_BLOB; dwOriginatorChoice: ulong; struct #union { OriginatorCertId: s__CERT_ID; OriginatorPublicKeyInfo: s__CERT_PUBLIC_KEY_INFO; }; cKeyAgreeKeyEncryptInfo: ulong; rgpKeyAgreeKeyEncryptInfo: **s__CMSG_KEY_AGREE_KEY_ENCRYPT_INFO; dwFlags: ulong; }
export type s__CMSG_MAIL_LIST_ENCRYPT_INFO = struct { cbSize: ulong; dwRecipientIndex: ulong; KeyEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; EncryptedKey: s__CRYPTOAPI_BLOB; dwFlags: ulong; }
export type s__CMSG_CNG_CONTENT_DECRYPT_INFO = struct { cbSize: ulong; ContentEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pfnAlloc: def (uint64) -> (*); pfnFree: def (*) -> (); hNCryptKey: uint64; pbContentEncryptKey: *uint8; cbContentEncryptKey: ulong; hCNGContentEncryptKey: *; pbCNGContentEncryptKeyObject: *uint8; }
export type s__CERT_CONTEXT = struct { dwCertEncodingType: ulong; pbCertEncoded: *uint8; cbCertEncoded: ulong; pCertInfo: *s__CERT_INFO; hCertStore: *; }
export type s__CRL_CONTEXT = struct { dwCertEncodingType: ulong; pbCrlEncoded: *uint8; cbCrlEncoded: ulong; pCrlInfo: *s__CRL_INFO; hCertStore: *; }
export type s__CTL_CONTEXT = struct { dwMsgAndCertEncodingType: ulong; pbCtlEncoded: *uint8; cbCtlEncoded: ulong; pCtlInfo: *s__CTL_INFO; hCertStore: *; hCryptMsg: *; pbCtlContent: *uint8; cbCtlContent: ulong; }
export type e_CertKeyType = enum { KeyTypeOther; KeyTypeVirtualSmartCard = 1; KeyTypePhysicalSmartCard = 2; KeyTypePassport = 3; KeyTypePassportRemote = 4; KeyTypePassportSmartCard = 5; KeyTypeHardware = 6; KeyTypeSoftware = 7; KeyTypeSelfSigned = 8; }
export type s__CRYPT_KEY_PROV_PARAM = struct { dwParam: ulong; pbData: *uint8; cbData: ulong; dwFlags: ulong; }
export type s__CRYPT_KEY_PROV_INFO = struct { pwszContainerName: *ushort; pwszProvName: *ushort; dwProvType: ulong; dwFlags: ulong; cProvParam: ulong; rgProvParam: *s__CRYPT_KEY_PROV_PARAM; dwKeySpec: ulong; }
export type s__CERT_KEY_CONTEXT = struct { cbSize: ulong; struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; }
export type s__ROOT_INFO_LUID = struct { LowPart: ulong; HighPart: long; }
export type s__CRYPT_SMART_CARD_ROOT_INFO = struct { rgbCardID: [16; uint8]; luid: s__ROOT_INFO_LUID; }
export type s__CERT_SYSTEM_STORE_RELOCATE_PARA = struct { struct #union { hKeyBase: *s_HKEY__; pvBase: *; }; struct #union { pvSystemStore: *; pszSystemStore: *char; pwszSystemStore: *ushort; }; }
export type s__CERT_REGISTRY_STORE_CLIENT_GPT_PARA = struct { hKeyBase: *s_HKEY__; pwszRegPath: *ushort; }
export type s__CERT_REGISTRY_STORE_ROAMING_PARA = struct { hKey: *s_HKEY__; pwszStoreDirectory: *ushort; }
export type s__CERT_LDAP_STORE_OPENED_PARA = struct { pvLdapSessionHandle: *; pwszLdapUrl: *ushort; }
export type s__CERT_STORE_PROV_INFO = struct { cbSize: ulong; cStoreProvFunc: ulong; rgpvStoreProvFunc: **; hStoreProv: *; dwStoreProvFlags: ulong; hStoreProvFuncAddr2: *; }
export type s__CERT_STORE_PROV_FIND_INFO = struct { cbSize: ulong; dwMsgAndCertEncodingType: ulong; dwFindFlags: ulong; dwFindType: ulong; pvFindPara: *; }
export type s__CRL_FIND_ISSUED_FOR_PARA = struct { pSubjectCert: *s__CERT_CONTEXT; pIssuerCert: *s__CERT_CONTEXT; }
export type s__CTL_ANY_SUBJECT_INFO = struct { SubjectAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; SubjectIdentifier: s__CRYPTOAPI_BLOB; }
export type s__CTL_FIND_USAGE_PARA = struct { cbSize: ulong; SubjectUsage: s__CTL_USAGE; ListIdentifier: s__CRYPTOAPI_BLOB; pSigner: *s__CERT_INFO; }
export type s__CTL_FIND_SUBJECT_PARA = struct { cbSize: ulong; pUsagePara: *s__CTL_FIND_USAGE_PARA; dwSubjectType: ulong; pvSubject: *; }
export type s__CERT_CREATE_CONTEXT_PARA = struct { cbSize: ulong; pfnFree: def (*) -> (); pvFree: *; pfnSort: def (ulong, ulong, ulong, *) -> (int); pvSort: *; }
export type s__CERT_SYSTEM_STORE_INFO = struct { cbSize: ulong; }
export type s__CERT_PHYSICAL_STORE_INFO = struct { cbSize: ulong; pszOpenStoreProvider: *char; dwOpenEncodingType: ulong; dwOpenFlags: ulong; OpenParameters: s__CRYPTOAPI_BLOB; dwFlags: ulong; dwPriority: ulong; }
export type s__CTL_VERIFY_USAGE_PARA = struct { cbSize: ulong; ListIdentifier: s__CRYPTOAPI_BLOB; cCtlStore: ulong; rghCtlStore: **; cSignerStore: ulong; rghSignerStore: **; }
export type s__CTL_VERIFY_USAGE_STATUS = struct { cbSize: ulong; dwError: ulong; dwFlags: ulong; ppCtl: **s__CTL_CONTEXT; dwCtlEntryIndex: ulong; ppSigner: **s__CERT_CONTEXT; dwSignerIndex: ulong; }
export type s__CERT_REVOCATION_CRL_INFO = struct { cbSize: ulong; pBaseCrlContext: *s__CRL_CONTEXT; pDeltaCrlContext: *s__CRL_CONTEXT; pCrlEntry: *s__CRL_ENTRY; fDeltaCrlEntry: int; }
export type s__CERT_REVOCATION_CHAIN_PARA
export type s__CERT_REVOCATION_PARA = struct { cbSize: ulong; pIssuerCert: *s__CERT_CONTEXT; cCertStore: ulong; rgCertStore: **; hCrlStore: *; pftTimeToUse: *s__FILETIME; }
export type s__CERT_REVOCATION_STATUS = struct { cbSize: ulong; dwIndex: ulong; dwError: ulong; dwReason: ulong; fHasFreshnessTime: int; dwFreshnessTime: ulong; }
export type s__CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = struct { CertSignHashCNGAlgPropData: s__CRYPTOAPI_BLOB; CertIssuerPubKeyBitLengthPropData: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = struct { cCNGHashAlgid: ulong; rgpwszCNGHashAlgid: **ushort; dwWeakIndex: ulong; }
export type s__CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = struct { cOID: ulong; rgpszOID: **char; }
export type s__CRYPT_SIGN_MESSAGE_PARA = struct { cbSize: ulong; dwMsgEncodingType: ulong; pSigningCert: *s__CERT_CONTEXT; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; cMsgCert: ulong; rgpMsgCert: **s__CERT_CONTEXT; cMsgCrl: ulong; rgpMsgCrl: **s__CRL_CONTEXT; cAuthAttr: ulong; rgAuthAttr: *s__CRYPT_ATTRIBUTE; cUnauthAttr: ulong; rgUnauthAttr: *s__CRYPT_ATTRIBUTE; dwFlags: ulong; dwInnerContentType: ulong; }
export type s__CRYPT_VERIFY_MESSAGE_PARA = struct { cbSize: ulong; dwMsgAndCertEncodingType: ulong; hCryptProv: uint64; pfnGetSignerCertificate: def (*, ulong, *s__CERT_INFO, *) -> (*s__CERT_CONTEXT); pvGetArg: *; }
export type s__CRYPT_ENCRYPT_MESSAGE_PARA = struct { cbSize: ulong; dwMsgEncodingType: ulong; hCryptProv: uint64; ContentEncryptionAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvEncryptionAuxInfo: *; dwFlags: ulong; dwInnerContentType: ulong; }
export type s__CRYPT_DECRYPT_MESSAGE_PARA = struct { cbSize: ulong; dwMsgAndCertEncodingType: ulong; cCertStore: ulong; rghCertStore: **; }
export type s__CRYPT_HASH_MESSAGE_PARA = struct { cbSize: ulong; dwMsgEncodingType: ulong; hCryptProv: uint64; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; }
export type s__CRYPT_KEY_SIGN_MESSAGE_PARA = struct { cbSize: ulong; dwMsgAndCertEncodingType: ulong; struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; PubKeyAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; }
export type s__CRYPT_KEY_VERIFY_MESSAGE_PARA = struct { cbSize: ulong; dwMsgEncodingType: ulong; hCryptProv: uint64; }
export type s__CERT_CHAIN = struct { cCerts: ulong; certs: *s__CRYPTOAPI_BLOB; keyLocatorInfo: s__CRYPT_KEY_PROV_INFO; }
export type s__CRYPT_BLOB_ARRAY = struct { cBlob: ulong; rgBlob: *s__CRYPTOAPI_BLOB; }
export type s__CRYPT_CREDENTIALS = struct { cbSize: ulong; pszCredentialsOid: *char; pvCredentials: *; }
export type s__CRYPT_PASSWORD_CREDENTIALSA = struct { cbSize: ulong; pszUsername: *char; pszPassword: *char; }
export type s__CRYPT_PASSWORD_CREDENTIALSW = struct { cbSize: ulong; pszUsername: *ushort; pszPassword: *ushort; }
export type s__CRYPTNET_URL_CACHE_PRE_FETCH_INFO = struct { cbSize: ulong; dwObjectType: ulong; dwError: ulong; dwReserved: ulong; ThisUpdateTime: s__FILETIME; NextUpdateTime: s__FILETIME; PublishTime: s__FILETIME; }
export type s__CRYPTNET_URL_CACHE_FLUSH_INFO = struct { cbSize: ulong; dwExemptSeconds: ulong; ExpireTime: s__FILETIME; }
export type s__CRYPTNET_URL_CACHE_RESPONSE_INFO = struct { cbSize: ulong; wResponseType: ushort; wResponseFlags: ushort; LastModifiedTime: s__FILETIME; dwMaxAge: ulong; pwszETag: *ushort; dwProxyId: ulong; }
export type s__CRYPT_RETRIEVE_AUX_INFO = struct { cbSize: ulong; pLastSyncTime: *s__FILETIME; dwMaxUrlRetrievalByteCount: ulong; pPreFetchInfo: *s__CRYPTNET_URL_CACHE_PRE_FETCH_INFO; pFlushInfo: *s__CRYPTNET_URL_CACHE_FLUSH_INFO; ppResponseInfo: **s__CRYPTNET_URL_CACHE_RESPONSE_INFO; pwszCacheFileNamePrefix: *ushort; pftCacheResync: *s__FILETIME; fProxyCacheRetrieval: int; dwHttpStatusCode: ulong; ppwszErrorResponseHeaders: **ushort; ppErrorContentBlob: **s__CRYPTOAPI_BLOB; }
export type s__CRYPT_ASYNC_RETRIEVAL_COMPLETION = struct { pfnCompletion: def (*, ulong, *char, *char, *) -> (); pvCompletion: *; }
export type s__CRYPT_URL_ARRAY = struct { cUrl: ulong; rgwszUrl: **ushort; }
export type s__CRYPT_URL_INFO = struct { cbSize: ulong; dwSyncDeltaTime: ulong; cGroup: ulong; rgcGroupEntry: *ulong; }
export type s__CERT_CRL_CONTEXT_PAIR = struct { pCertContext: *s__CERT_CONTEXT; pCrlContext: *s__CRL_CONTEXT; }
export type s__CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = struct { cbSize: ulong; iDeltaCrlIndicator: int; pftCacheResync: *s__FILETIME; pLastSyncTime: *s__FILETIME; pMaxAgeTime: *s__FILETIME; pChainPara: *s__CERT_REVOCATION_CHAIN_PARA; pDeltaCrlIndicator: *s__CRYPTOAPI_BLOB; }
export type s__CERT_CHAIN_ENGINE_CONFIG = struct { cbSize: ulong; hRestrictedRoot: *; hRestrictedTrust: *; hRestrictedOther: *; cAdditionalStore: ulong; rghAdditionalStore: **; dwFlags: ulong; dwUrlRetrievalTimeout: ulong; MaximumCachedCertificates: ulong; CycleDetectionModulus: ulong; hExclusiveRoot: *; hExclusiveTrustedPeople: *; dwExclusiveFlags: ulong; }
export type s__CERT_TRUST_STATUS = struct { dwErrorStatus: ulong; dwInfoStatus: ulong; }
export type s__CERT_REVOCATION_INFO = struct { cbSize: ulong; dwRevocationResult: ulong; pszRevocationOid: *char; pvOidSpecificInfo: *; fHasFreshnessTime: int; dwFreshnessTime: ulong; pCrlInfo: *s__CERT_REVOCATION_CRL_INFO; }
export type s__CERT_TRUST_LIST_INFO = struct { cbSize: ulong; pCtlEntry: *s__CTL_ENTRY; pCtlContext: *s__CTL_CONTEXT; }
export type s__CERT_CHAIN_ELEMENT = struct { cbSize: ulong; pCertContext: *s__CERT_CONTEXT; TrustStatus: s__CERT_TRUST_STATUS; pRevocationInfo: *s__CERT_REVOCATION_INFO; pIssuanceUsage: *s__CTL_USAGE; pApplicationUsage: *s__CTL_USAGE; pwszExtendedErrorInfo: *ushort; }
export type s__CERT_SIMPLE_CHAIN = struct { cbSize: ulong; TrustStatus: s__CERT_TRUST_STATUS; cElement: ulong; rgpElement: **s__CERT_CHAIN_ELEMENT; pTrustListInfo: *s__CERT_TRUST_LIST_INFO; fHasRevocationFreshnessTime: int; dwRevocationFreshnessTime: ulong; }
export type s__CERT_CHAIN_CONTEXT
export type s__CERT_USAGE_MATCH = struct { dwType: ulong; Usage: s__CTL_USAGE; }
export type s__CTL_USAGE_MATCH = struct { dwType: ulong; Usage: s__CTL_USAGE; }
export type s__CERT_CHAIN_PARA = struct { cbSize: ulong; RequestedUsage: s__CERT_USAGE_MATCH; }
export type s__CRL_REVOCATION_INFO = struct { pCrlEntry: *s__CRL_ENTRY; pCrlContext: *s__CRL_CONTEXT; pCrlIssuerChain: *s__CERT_CHAIN_CONTEXT; }
export type s__CERT_CHAIN_FIND_BY_ISSUER_PARA = struct { cbSize: ulong; pszUsageIdentifier: *char; dwKeySpec: ulong; dwAcquirePrivateKeyFlags: ulong; cIssuer: ulong; rgIssuer: *s__CRYPTOAPI_BLOB; pfnFindCallback: def (*s__CERT_CONTEXT, *) -> (int); pvFindArg: *; }
export type s__CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwFlags: ulong; pvExtraPolicyPara: *; }
export type s__CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; dwError: ulong; lChainIndex: long; lElementIndex: long; pvExtraPolicyStatus: *; }
export type s__AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwRegPolicySettings: ulong; pSignerInfo: *s__CMSG_SIGNER_INFO; }
export type s__AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; fCommercial: int; }
export type s__AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwRegPolicySettings: ulong; fCommercial: int; }
export type s__HTTPSPolicyCallbackData = struct { struct #union { cbStruct: ulong; cbSize: ulong; }; dwAuthType: ulong; fdwChecks: ulong; pwszServerName: *ushort; }
export type s__EV_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwRootProgramQualifierFlags: ulong; }
export type s__EV_EXTRA_CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; dwQualifiers: ulong; dwIssuanceUsageIndex: ulong; }
export type s__SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; dwErrorLevel: ulong; dwErrorCategory: ulong; dwReserved: ulong; wszErrorText: [256; ushort]; }
export type s__SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwReserved: ulong; pwszServerName: *ushort; rgpszHpkpValue: [2; *char]; }
export type s__SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwReserved: ulong; pwszServerName: *ushort; }
export type s__SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; lError: long; wszErrorText: [512; ushort]; }
export type s__CRYPT_PKCS12_PBE_PARAMS = struct { iIterations: int; cbSalt: ulong; }
export type s__PKCS12_PBES2_EXPORT_PARAMS = struct { dwSize: ulong; hNcryptDescriptor: *; pwszPbes2Alg: *ushort; }
export type s__CERT_SERVER_OCSP_RESPONSE_CONTEXT
export type s__CERT_SERVER_OCSP_RESPONSE_OPEN_PARA = struct { cbSize: ulong; dwFlags: ulong; pcbUsedSize: *ulong; pwszOcspDirectory: *ushort; pfnUpdateCallback: def (*s__CERT_CHAIN_CONTEXT, *s__CERT_SERVER_OCSP_RESPONSE_CONTEXT, *s__CRL_CONTEXT, *s__CRL_CONTEXT, *, ulong) -> (); pvUpdateCallbackArg: *; }
export type s__CERT_SELECT_CHAIN_PARA = struct { hChainEngine: *; pTime: *s__FILETIME; hAdditionalStore: *; pChainPara: *s__CERT_CHAIN_PARA; dwFlags: ulong; }
export type s__CERT_SELECT_CRITERIA = struct { dwType: ulong; cPara: ulong; ppPara: **; }
export type s__CRYPT_TIMESTAMP_REQUEST = struct { dwVersion: ulong; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; HashedMessage: s__CRYPTOAPI_BLOB; pszTSAPolicyId: *char; Nonce: s__CRYPTOAPI_BLOB; fCertReq: int; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CRYPT_TIMESTAMP_RESPONSE = struct { dwStatus: ulong; cFreeText: ulong; rgFreeText: **ushort; FailureInfo: s__CRYPT_BIT_BLOB; ContentInfo: s__CRYPTOAPI_BLOB; }
export type s__CRYPT_TIMESTAMP_ACCURACY = struct { dwSeconds: ulong; dwMillis: ulong; dwMicros: ulong; }
export type s__CRYPT_TIMESTAMP_INFO = struct { dwVersion: ulong; pszTSAPolicyId: *char; HashAlgorithm: s__CRYPT_ALGORITHM_IDENTIFIER; HashedMessage: s__CRYPTOAPI_BLOB; SerialNumber: s__CRYPTOAPI_BLOB; ftTime: s__FILETIME; pvAccuracy: *s__CRYPT_TIMESTAMP_ACCURACY; fOrdering: int; Nonce: s__CRYPTOAPI_BLOB; Tsa: s__CRYPTOAPI_BLOB; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CRYPT_TIMESTAMP_CONTEXT = struct { cbEncoded: ulong; pbEncoded: *uint8; pTimeStamp: *s__CRYPT_TIMESTAMP_INFO; }
export type s__CRYPT_TIMESTAMP_PARA = struct { pszTSAPolicyId: *char; fRequestCerts: int; Nonce: s__CRYPTOAPI_BLOB; cExtension: ulong; rgExtension: *s__CERT_EXTENSION; }
export type s__CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = struct { cbSize: ulong; pfnGet: def (*, *s__CRYPTOAPI_BLOB, ulong, *s__CRYPTOAPI_BLOB, **uint8, *ulong, **ushort, **s__CRYPTOAPI_BLOB) -> (int); pfnRelease: def (ulong, *) -> (); pfnFreePassword: def (*, *ushort) -> (); pfnFree: def (*, *uint8) -> (); pfnFreeIdentifier: def (*, *s__CRYPTOAPI_BLOB) -> (); }
export type s__CRYPTPROTECT_PROMPTSTRUCT = struct { cbSize: ulong; dwPromptFlags: ulong; hwndApp: *s_HWND__; szPrompt: *ushort; }
export type s__CERTIFICATE_BLOB = struct { dwCertEncodingType: ulong; cbData: ulong; pbData: *uint8; }
export type s__EFS_HASH_BLOB = struct { cbData: ulong; pbData: *uint8; }
export type s__EFS_RPC_BLOB = struct { cbData: ulong; pbData: *uint8; }
export type s__EFS_PIN_BLOB = struct { cbPadding: ulong; cbData: ulong; pbData: *uint8; }
export type s__EFS_KEY_INFO = struct { dwVersion: ulong; Entropy: ulong; Algorithm: uint; KeyLength: ulong; }
export type s__EFS_COMPATIBILITY_INFO = struct { EfsVersion: ulong; }
export type s__EFS_VERSION_INFO = struct { EfsVersion: ulong; SubVersion: ulong; }
export type s__EFS_DECRYPTION_STATUS_INFO = struct { dwDecryptionError: ulong; dwHashOffset: ulong; cbHash: ulong; }
export type s__EFS_ENCRYPTION_STATUS_INFO = struct { bHasCurrentKey: int; dwEncryptionError: ulong; }
export type s__ENCRYPTION_CERTIFICATE = struct { cbTotalLength: ulong; pUserSid: *s__SID; pCertBlob: *s__CERTIFICATE_BLOB; }
export type s__ENCRYPTION_CERTIFICATE_HASH = struct { cbTotalLength: ulong; pUserSid: *s__SID; pHash: *s__EFS_HASH_BLOB; lpDisplayInformation: *ushort; }
export type s__ENCRYPTION_CERTIFICATE_HASH_LIST = struct { nCert_Hash: ulong; pUsers: **s__ENCRYPTION_CERTIFICATE_HASH; }
export type s__ENCRYPTION_CERTIFICATE_LIST = struct { nUsers: ulong; pUsers: **s__ENCRYPTION_CERTIFICATE; }
export type s__ENCRYPTED_FILE_METADATA_SIGNATURE = struct { dwEfsAccessType: ulong; pCertificatesAdded: *s__ENCRYPTION_CERTIFICATE_HASH_LIST; pEncryptionCertificate: *s__ENCRYPTION_CERTIFICATE; pEfsStreamSignature: *s__EFS_RPC_BLOB; }
export type s__ENCRYPTION_PROTECTOR = struct { cbTotalLength: ulong; pUserSid: *s__SID; lpProtectorDescriptor: *ushort; }
export type s__ENCRYPTION_PROTECTOR_LIST = struct { nProtectors: ulong; pProtectors: **s__ENCRYPTION_PROTECTOR; }
export type s_RPC_IMPORT_CONTEXT_P = struct { LookupContext: *; ProposedHandle: *; Bindings: *s__RPC_BINDING_VECTOR; }
export type RPC_IMPORT_CONTEXT_P
export type s__NDR_SCONTEXT
export type s__SCONTEXT_QUEUE = struct { NumberOfObjects: ulong; ArrayOfObjects: **s__NDR_SCONTEXT; }
export type s__MIDL_STUB_MESSAGE
export type s_ARRAY_INFO = struct { Dimension: long; BufferConformanceMark: *ulong; BufferVarianceMark: *ulong; MaxCountArray: *ulong; OffsetArray: *ulong; ActualCountArray: *ulong; }
export type ARRAY_INFO
export type s__NDR_ASYNC_MESSAGE
export type s__NDR_CORRELATION_INFO
export type s__MIDL_METHOD_PROPERTY = struct { Id: ulong; Value: uint64; }
export type s__MIDL_METHOD_PROPERTY_MAP = struct { Count: ulong; Properties: *s__MIDL_METHOD_PROPERTY; }
export type s__MIDL_INTERFACE_METHOD_PROPERTIES = struct { MethodCount: ushort; MethodProperties: **s__MIDL_METHOD_PROPERTY_MAP; }
export type s__MIDL_SYNTAX_INFO = struct { TransferSyntax: s__RPC_SYNTAX_IDENTIFIER; DispatchTable: *s_RPC_DISPATCH_TABLE; ProcString: *uint8; FmtStringOffset: *ushort; TypeString: *uint8; aUserMarshalQuadruple: *; pMethodProperties: *s__MIDL_INTERFACE_METHOD_PROPERTIES; pReserved2: uint64; }
export type s__GENERIC_BINDING_ROUTINE_PAIR = struct { pfnBind: def (*) -> (*); pfnUnbind: def (*, *uint8) -> (); }
export type s___GENERIC_BINDING_INFO = struct { pObj: *; Size: uint; pfnBind: def (*) -> (*); pfnUnbind: def (*, *uint8) -> (); }
export type s__XMIT_ROUTINE_QUINTUPLE = struct { pfnTranslateToXmit: def (*s__MIDL_STUB_MESSAGE) -> (); pfnTranslateFromXmit: def (*s__MIDL_STUB_MESSAGE) -> (); pfnFreeXmit: def (*s__MIDL_STUB_MESSAGE) -> (); pfnFreeInst: def (*s__MIDL_STUB_MESSAGE) -> (); }
export type s__USER_MARSHAL_ROUTINE_QUADRUPLE = struct { pfnBufferSize: def (*ulong, ulong, *) -> (ulong); pfnMarshall: def (*ulong, *uint8, *) -> (*uint8); pfnUnmarshall: def (*ulong, *uint8, *) -> (*uint8); pfnFree: def (*ulong, *) -> (); }
export type e__USER_MARSHAL_CB_TYPE = enum { USER_MARSHAL_CB_BUFFER_SIZE; USER_MARSHAL_CB_MARSHALL = 1; USER_MARSHAL_CB_UNMARSHALL = 2; USER_MARSHAL_CB_FREE = 3; }
export type s__USER_MARSHAL_CB = struct { Flags: ulong; pStubMsg: *s__MIDL_STUB_MESSAGE; pReserve: *uint8; Signature: ulong; CBType: e__USER_MARSHAL_CB_TYPE; pFormat: *uint8; pTypeFormat: *uint8; }
export type s__MALLOC_FREE_STRUCT = struct { pfnAllocate: def (uint64) -> (*); pfnFree: def (*) -> (); }
export type s__COMM_FAULT_OFFSETS = struct { CommOffset: short; FaultOffset: short; }
export type e__IDL_CS_CONVERT = enum { IDL_CS_NO_CONVERT; IDL_CS_IN_PLACE_CONVERT = 1; IDL_CS_NEW_BUFFER_CONVERT = 2; }
export type s__NDR_CS_SIZE_CONVERT_ROUTINES = struct { pfnNetSize: def (*, ulong, ulong, *e__IDL_CS_CONVERT, *ulong, *ulong) -> (); pfnToNetCs: def (*, ulong, *, ulong, *uint8, *ulong, *ulong) -> (); pfnLocalSize: def (*, ulong, ulong, *e__IDL_CS_CONVERT, *ulong, *ulong) -> (); pfnFromNetCs: def (*, ulong, *uint8, ulong, ulong, *, *ulong, *ulong) -> (); }
export type s__NDR_CS_ROUTINES = struct { pSizeConvertRoutines: *s__NDR_CS_SIZE_CONVERT_ROUTINES; pTagGettingRoutines: def (*, int, *ulong, *ulong, *ulong, *ulong) -> (); }
export type s__NDR_EXPR_DESC = struct { pOffset: *ushort; pFormatExpr: *uint8; }
export type s__MIDL_STUB_DESC = struct { RpcInterfaceInformation: *; pfnAllocate: def (uint64) -> (*); pfnFree: def (*) -> (); IMPLICIT_HANDLE_INFO: struct #union { pAutoHandle: **; pPrimitiveHandle: **; pGenericBindingInfo: *s___GENERIC_BINDING_INFO; }; apfnNdrRundownRoutines: def (*) -> (); aGenericBindingRoutinePairs: *s__GENERIC_BINDING_ROUTINE_PAIR; apfnExprEval: def (*s__MIDL_STUB_MESSAGE) -> (); aXmitQuintuple: *s__XMIT_ROUTINE_QUINTUPLE; pFormatTypes: *uint8; fCheckBounds: int; Version: ulong; pMallocFreeStruct: *s__MALLOC_FREE_STRUCT; MIDLVersion: long; CommFaultOffsets: *s__COMM_FAULT_OFFSETS; aUserMarshalQuadruple: *s__USER_MARSHAL_ROUTINE_QUADRUPLE; NotifyRoutineTable: def () -> (); mFlags: uint64; CsRoutineTables: *s__NDR_CS_ROUTINES; ProxyServerInfo: *; pExprInfo: *s__NDR_EXPR_DESC; }
export type s__MIDL_FORMAT_STRING = struct { Pad: short; Format: *uint8; }
export type s__MIDL_SERVER_INFO_ = struct { pStubDesc: *s__MIDL_STUB_DESC; DispatchTable: **long (); ProcString: *uint8; FmtStringOffset: *ushort; ThunkTable: def (*s__MIDL_STUB_MESSAGE) -> (); pTransferSyntax: *s__RPC_SYNTAX_IDENTIFIER; nCount: uint64; pSyntaxInfo: *s__MIDL_SYNTAX_INFO; }
export type s__MIDL_STUBLESS_PROXY_INFO = struct { pStubDesc: *s__MIDL_STUB_DESC; ProcFormatString: *uint8; FormatStringOffset: *ushort; pTransferSyntax: *s__RPC_SYNTAX_IDENTIFIER; nCount: uint64; pSyntaxInfo: *s__MIDL_SYNTAX_INFO; }
export type u__CLIENT_CALL_RETURN = struct #union { Pointer: *; Simple: int64; }
export type e_XLAT_SIDE = enum { XLAT_SERVER = 1; XLAT_CLIENT = 2; }
export type s__FULL_PTR_XLAT_TABLES = struct { RefIdToPointer: *; PointerToRefId: *; NextRefId: ulong; XlatSide: e_XLAT_SIDE; }
export type e__system_handle_t = enum { SYSTEM_HANDLE_FILE; SYSTEM_HANDLE_SEMAPHORE = 1; SYSTEM_HANDLE_EVENT = 2; SYSTEM_HANDLE_MUTEX = 3; SYSTEM_HANDLE_PROCESS = 4; SYSTEM_HANDLE_TOKEN = 5; SYSTEM_HANDLE_SECTION = 6; SYSTEM_HANDLE_REG_KEY = 7; SYSTEM_HANDLE_THREAD = 8; SYSTEM_HANDLE_COMPOSITION_OBJECT = 9; SYSTEM_HANDLE_SOCKET = 10; SYSTEM_HANDLE_JOB = 11; SYSTEM_HANDLE_PIPE = 12; SYSTEM_HANDLE_MAX = 12; SYSTEM_HANDLE_INVALID = 255; }
export type s__MIDL_INTERCEPTION_INFO = struct { Version: ulong; ProcString: *uint8; ProcFormatOffsetTable: *ushort; ProcCount: ulong; TypeString: *uint8; }
export type s__MIDL_WINRT_TYPE_SERIALIZATION_INFO = struct { Version: ulong; TypeFormatString: *uint8; FormatStringSize: ushort; TypeOffset: ushort; StubDesc: *s__MIDL_STUB_DESC; }
export type e_STUB_PHASE = enum { STUB_UNMARSHAL; STUB_CALL_SERVER = 1; STUB_MARSHAL = 2; STUB_CALL_SERVER_NO_HRESULT = 3; }
export type e_PROXY_PHASE = enum { PROXY_CALCSIZE; PROXY_GETBUFFER = 1; PROXY_MARSHAL = 2; PROXY_SENDRECEIVE = 3; PROXY_UNMARSHAL = 4; }
export type s_IRpcChannelBuffer
export type s__NDR_USER_MARSHAL_INFO_LEVEL1 = struct { Buffer: *; BufferSize: ulong; pfnAllocate: def (uint64) -> (*); pfnFree: def (*) -> (); pRpcChannelBuffer: *s_IRpcChannelBuffer; Reserved: [5; uint64]; }
export type s__NDR_USER_MARSHAL_INFO = struct { InformationLevel: ulong; struct #union { Level1: s__NDR_USER_MARSHAL_INFO_LEVEL1; }; }
export type s__COAUTHIDENTITY = struct { User: *ushort; UserLength: ulong; Domain: *ushort; DomainLength: ulong; Password: *ushort; PasswordLength: ulong; Flags: ulong; }
export type s__COAUTHINFO = struct { dwAuthnSvc: ulong; dwAuthzSvc: ulong; pwszServerPrincName: *ushort; dwAuthnLevel: ulong; dwImpersonationLevel: ulong; pAuthIdentityData: *s__COAUTHIDENTITY; dwCapabilities: ulong; }
export type e_tagMEMCTX = enum { MEMCTX_TASK = 1; MEMCTX_SHARED = 2; MEMCTX_MACSYSTEM = 3; MEMCTX_UNKNOWN = -1; MEMCTX_SAME = -2; }
export type e_tagCLSCTX = enum { CLSCTX_INPROC_SERVER = 1; CLSCTX_INPROC_HANDLER = 2; CLSCTX_LOCAL_SERVER = 4; CLSCTX_INPROC_SERVER16 = 8; CLSCTX_REMOTE_SERVER = 16; CLSCTX_INPROC_HANDLER16 = 32; CLSCTX_RESERVED1 = 64; CLSCTX_RESERVED2 = 128; CLSCTX_RESERVED3 = 256; CLSCTX_RESERVED4 = 512; CLSCTX_NO_CODE_DOWNLOAD = 1024; CLSCTX_RESERVED5 = 2048; CLSCTX_NO_CUSTOM_MARSHAL = 4096; CLSCTX_ENABLE_CODE_DOWNLOAD = 8192; CLSCTX_NO_FAILURE_LOG = 16384; CLSCTX_DISABLE_AAA = 32768; CLSCTX_ENABLE_AAA = 65536; CLSCTX_FROM_DEFAULT_CONTEXT = 131072; CLSCTX_ACTIVATE_X86_SERVER = 262144; CLSCTX_ACTIVATE_32_BIT_SERVER = 262144; CLSCTX_ACTIVATE_64_BIT_SERVER = 524288; CLSCTX_ENABLE_CLOAKING = 1048576; CLSCTX_APPCONTAINER = 4194304; CLSCTX_ACTIVATE_AAA_AS_IU = 8388608; CLSCTX_RESERVED6 = 16777216; CLSCTX_ACTIVATE_ARM32_SERVER = 33554432; CLSCTX_ALLOW_LOWER_TRUST_REGISTRATION = 67108864; CLSCTX_PS_DLL = -2147483648; }
export type e_tagMSHLFLAGS = enum { MSHLFLAGS_NORMAL; MSHLFLAGS_TABLESTRONG = 1; MSHLFLAGS_TABLEWEAK = 2; MSHLFLAGS_NOPING = 4; MSHLFLAGS_RESERVED1 = 8; MSHLFLAGS_RESERVED2 = 16; MSHLFLAGS_RESERVED3 = 32; MSHLFLAGS_RESERVED4 = 64; }
export type e_tagMSHCTX = enum { MSHCTX_LOCAL; MSHCTX_NOSHAREDMEM = 1; MSHCTX_DIFFERENTMACHINE = 2; MSHCTX_INPROC = 3; MSHCTX_CROSSCTX = 4; MSHCTX_CONTAINER = 5; }
export type s__BYTE_BLOB = struct { clSize: ulong; abData: [1; uint8]; }
export type s__WORD_BLOB = struct { clSize: ulong; asData: [1; ushort]; }
export type s__DWORD_BLOB = struct { clSize: ulong; alData: [1; ulong]; }
export type s__FLAGGED_BYTE_BLOB = struct { fFlags: ulong; clSize: ulong; abData: [1; uint8]; }
export type s__FLAGGED_WORD_BLOB = struct { fFlags: ulong; clSize: ulong; asData: [1; ushort]; }
export type s__BYTE_SIZEDARR = struct { clSize: ulong; pData: *uint8; }
export type s__SHORT_SIZEDARR = struct { clSize: ulong; pData: *ushort; }
export type s__LONG_SIZEDARR = struct { clSize: ulong; pData: *ulong; }
export type s__HYPER_SIZEDARR = struct { clSize: ulong; pData: *int64; }
export type s_tagBLOB = struct { cbSize: ulong; pBlobData: *uint8; }
export type s_tagRemHGLOBAL = struct { fNullHGlobal: long; cbData: ulong; data: [1; uint8]; }
export type s_tagRemHMETAFILEPICT = struct { mm: long; xExt: long; yExt: long; cbData: ulong; data: [1; uint8]; }
export type s_tagRemHENHMETAFILE = struct { cbData: ulong; data: [1; uint8]; }
export type s_tagRemHBITMAP = struct { cbData: ulong; data: [1; uint8]; }
export type s_tagRemHPALETTE = struct { cbData: ulong; data: [1; uint8]; }
export type s_tagRemBRUSH = struct { cbData: ulong; data: [1; uint8]; }
export type e_tagDVASPECT = enum { DVASPECT_CONTENT = 1; DVASPECT_THUMBNAIL = 2; DVASPECT_ICON = 4; DVASPECT_DOCPRINT = 8; }
export type e_tagSTGC = enum { STGC_DEFAULT; STGC_OVERWRITE = 1; STGC_ONLYIFCURRENT = 2; STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4; STGC_CONSOLIDATE = 8; }
export type e_tagSTGMOVE = enum { STGMOVE_MOVE; STGMOVE_COPY = 1; STGMOVE_SHALLOWCOPY = 2; }
export type e_tagSTATFLAG = enum { STATFLAG_DEFAULT; STATFLAG_NONAME = 1; STATFLAG_NOOPEN = 2; }
export type u___MIDL_IWinTypes_0001 = struct #union { dwValue: ulong; pwszName: *ushort; }
export type s__userCLIPFORMAT = struct { fContext: long; __MIDL_IWinTypes_0001: u___MIDL_IWinTypes_0001; u: u___MIDL_IWinTypes_0001; }
export type u___MIDL_IWinTypes_0002 = struct #union { hInproc: long; hRemote: *s__DWORD_BLOB; }
export type s__GDI_NONREMOTE = struct { fContext: long; __MIDL_IWinTypes_0002: u___MIDL_IWinTypes_0002; u: u___MIDL_IWinTypes_0002; }
export type u___MIDL_IWinTypes_0003 = struct #union { hInproc: long; hRemote: *s__FLAGGED_BYTE_BLOB; hInproc64: int64; }
export type s__userHGLOBAL = struct { fContext: long; __MIDL_IWinTypes_0003: u___MIDL_IWinTypes_0003; u: u___MIDL_IWinTypes_0003; }
export type u___MIDL_IWinTypes_0004 = struct #union { hInproc: long; hRemote: *s__BYTE_BLOB; hInproc64: int64; }
export type s__userHMETAFILE = struct { fContext: long; __MIDL_IWinTypes_0004: u___MIDL_IWinTypes_0004; u: u___MIDL_IWinTypes_0004; }
export type s__remoteMETAFILEPICT = struct { mm: long; xExt: long; yExt: long; hMF: *s__userHMETAFILE; }
export type u___MIDL_IWinTypes_0005 = struct #union { hInproc: long; hRemote: *s__remoteMETAFILEPICT; hInproc64: int64; }
export type s__userHMETAFILEPICT = struct { fContext: long; __MIDL_IWinTypes_0005: u___MIDL_IWinTypes_0005; u: u___MIDL_IWinTypes_0005; }
export type u___MIDL_IWinTypes_0006 = struct #union { hInproc: long; hRemote: *s__BYTE_BLOB; hInproc64: int64; }
export type s__userHENHMETAFILE = struct { fContext: long; __MIDL_IWinTypes_0006: u___MIDL_IWinTypes_0006; u: u___MIDL_IWinTypes_0006; }
export type s__userBITMAP = struct { bmType: long; bmWidth: long; bmHeight: long; bmWidthBytes: long; bmPlanes: ushort; bmBitsPixel: ushort; cbSize: ulong; pBuffer: [1; uint8]; }
export type u___MIDL_IWinTypes_0007 = struct #union { hInproc: long; hRemote: *s__userBITMAP; hInproc64: int64; }
export type s__userHBITMAP = struct { fContext: long; __MIDL_IWinTypes_0007: u___MIDL_IWinTypes_0007; u: u___MIDL_IWinTypes_0007; }
export type u___MIDL_IWinTypes_0008 = struct #union { hInproc: long; hRemote: *s_tagLOGPALETTE; hInproc64: int64; }
export type s__userHPALETTE = struct { fContext: long; __MIDL_IWinTypes_0008: u___MIDL_IWinTypes_0008; u: u___MIDL_IWinTypes_0008; }
export type u___MIDL_IWinTypes_0009 = struct #union { hInproc: long; hRemote: long; }
export type s__RemotableHandle = struct { fContext: long; __MIDL_IWinTypes_0009: u___MIDL_IWinTypes_0009; u: u___MIDL_IWinTypes_0009; }
export type u_tagCY = struct #union { struct { Lo: ulong; Hi: long; }; int64: int64; }
export type s_tagDEC = struct { wReserved: ushort; struct #union { struct { scale: uint8; sign: uint8; }; signscale: ushort; }; Hi32: ulong; struct #union { struct { Lo32: ulong; Mid32: ulong; }; Lo64: uint64; }; }
export type s_tagBSTRBLOB = struct { cbSize: ulong; pData: *uint8; }
export type s_tagCLIPDATA = struct { cbSize: ulong; ulClipFmt: long; pClipData: *uint8; }
export type s__tagpropertykey = struct { fmtid: s__GUID; pid: ulong; }
export type s_tagCSPLATFORM = struct { dwPlatformId: ulong; dwVersionHi: ulong; dwVersionLo: ulong; dwProcessorArch: ulong; }
export type s_tagQUERYCONTEXT = struct { dwContext: ulong; Platform: s_tagCSPLATFORM; Locale: ulong; dwVersionHi: ulong; dwVersionLo: ulong; }
export type e_tagTYSPEC = enum { TYSPEC_CLSID; TYSPEC_FILEEXT = 1; TYSPEC_MIMETYPE = 2; TYSPEC_FILENAME = 3; TYSPEC_PROGID = 4; TYSPEC_PACKAGENAME = 5; TYSPEC_OBJECTID = 6; }
export type u___MIDL___MIDL_itf_wtypes_0000_0001_0005 = struct #union { clsid: s__GUID; pFileExt: *ushort; pMimeType: *ushort; pProgId: *ushort; pFileName: *ushort; ByName: struct { pPackageName: *ushort; PolicyId: s__GUID; }; ByObjectId: struct { ObjectId: s__GUID; PolicyId: s__GUID; }; }
export type s___MIDL___MIDL_itf_wtypes_0000_0001_0001 = struct { tyspec: ulong; __MIDL___MIDL_itf_wtypes_0000_0001_0005: u___MIDL___MIDL_itf_wtypes_0000_0001_0005; tagged_union: u___MIDL___MIDL_itf_wtypes_0000_0001_0005; }
export type s__STORAGE_HOTPLUG_INFO = struct { Size: ulong; MediaRemovable: uint8; MediaHotplug: uint8; DeviceHotplug: uint8; WriteCacheEnableOverride: uint8; }
export type s__STORAGE_DEVICE_NUMBER = struct { DeviceType: ulong; DeviceNumber: ulong; PartitionNumber: ulong; }
export type s__STORAGE_DEVICE_NUMBERS = struct { Version: ulong; Size: ulong; NumberOfDevices: ulong; Devices: [1; s__STORAGE_DEVICE_NUMBER]; }
export type s__STORAGE_DEVICE_NUMBER_EX = struct { Version: ulong; Size: ulong; Flags: ulong; DeviceType: ulong; DeviceNumber: ulong; DeviceGuid: s__GUID; PartitionNumber: ulong; }
export type s__STORAGE_BUS_RESET_REQUEST = struct { PathId: uint8; }
export type s_STORAGE_BREAK_RESERVATION_REQUEST = struct { Length: ulong; _unused: uint8; PathId: uint8; TargetId: uint8; Lun: uint8; }
export type s__PREVENT_MEDIA_REMOVAL = struct { PreventMediaRemoval: uint8; }
export type s__CLASS_MEDIA_CHANGE_CONTEXT = struct { MediaChangeCount: ulong; NewState: ulong; }
export type s__TAPE_STATISTICS = struct { Version: ulong; Flags: ulong; RecoveredWrites: u__LARGE_INTEGER; UnrecoveredWrites: u__LARGE_INTEGER; RecoveredReads: u__LARGE_INTEGER; UnrecoveredReads: u__LARGE_INTEGER; CompressionRatioReads: uint8; CompressionRatioWrites: uint8; }
export type s__TAPE_GET_STATISTICS = struct { Operation: ulong; }
export type e__STORAGE_MEDIA_TYPE = enum { DDS_4mm = 32; MiniQic = 33; Travan = 34; QIC = 35; MP_8mm = 36; AME_8mm = 37; AIT1_8mm = 38; DLT = 39; NCTP = 40; IBM_3480 = 41; IBM_3490E = 42; IBM_Magstar_3590 = 43; IBM_Magstar_MP = 44; STK_DATA_D3 = 45; SONY_DTF = 46; DV_6mm = 47; DMI = 48; SONY_D2 = 49; CLEANER_CARTRIDGE = 50; CD_ROM = 51; CD_R = 52; CD_RW = 53; DVD_ROM = 54; DVD_R = 55; DVD_RW = 56; MO_3_RW = 57; MO_5_WO = 58; MO_5_RW = 59; MO_5_LIMDOW = 60; PC_5_WO = 61; PC_5_RW = 62; PD_5_RW = 63; ABL_5_WO = 64; PINNACLE_APEX_5_RW = 65; SONY_12_WO = 66; PHILIPS_12_WO = 67; HITACHI_12_WO = 68; CYGNET_12_WO = 69; KODAK_14_WO = 70; MO_NFR_525 = 71; NIKON_12_RW = 72; IOMEGA_ZIP = 73; IOMEGA_JAZ = 74; SYQUEST_EZ135 = 75; SYQUEST_EZFLYER = 76; SYQUEST_SYJET = 77; AVATAR_F2 = 78; MP2_8mm = 79; DST_S = 80; DST_M = 81; DST_L = 82; VXATape_1 = 83; VXATape_2 = 84; STK_9840 = 85; LTO_Ultrium = 86; LTO_Accelis = 87; DVD_RAM = 88; AIT_8mm = 89; ADR_1 = 90; ADR_2 = 91; STK_9940 = 92; SAIT = 93; VXATape = 94; }
export type e__STORAGE_BUS_TYPE = enum { BusTypeUnknown; BusTypeScsi = 1; BusTypeAtapi = 2; BusTypeAta = 3; BusType1394 = 4; BusTypeSsa = 5; BusTypeFibre = 6; BusTypeUsb = 7; BusTypeRAID = 8; BusTypeiScsi = 9; BusTypeSas = 10; BusTypeSata = 11; BusTypeSd = 12; BusTypeMmc = 13; BusTypeVirtual = 14; BusTypeFileBackedVirtual = 15; BusTypeSpaces = 16; BusTypeNvme = 17; BusTypeSCM = 18; BusTypeUfs = 19; BusTypeMax = 20; BusTypeMaxReserved = 127; }
export type s__DEVICE_MEDIA_INFO = struct { DeviceSpecific: struct #union { DiskInfo: struct { Cylinders: u__LARGE_INTEGER; MediaType: e__STORAGE_MEDIA_TYPE; TracksPerCylinder: ulong; SectorsPerTrack: ulong; BytesPerSector: ulong; NumberMediaSides: ulong; MediaCharacteristics: ulong; }; RemovableDiskInfo: struct { Cylinders: u__LARGE_INTEGER; MediaType: e__STORAGE_MEDIA_TYPE; TracksPerCylinder: ulong; SectorsPerTrack: ulong; BytesPerSector: ulong; NumberMediaSides: ulong; MediaCharacteristics: ulong; }; TapeInfo: struct { MediaType: e__STORAGE_MEDIA_TYPE; MediaCharacteristics: ulong; CurrentBlockSize: ulong; BusType: e__STORAGE_BUS_TYPE; BusSpecificData: struct #union { ScsiInformation: struct { MediumType: uint8; DensityCode: uint8; }; }; }; }; }
export type s__GET_MEDIA_TYPES = struct { DeviceType: ulong; MediaInfoCount: ulong; MediaInfo: [1; s__DEVICE_MEDIA_INFO]; }
export type s__STORAGE_PREDICT_FAILURE = struct { PredictFailure: ulong; VendorSpecific: [512; uint8]; }
export type s__STORAGE_FAILURE_PREDICTION_CONFIG = struct { Version: ulong; Size: ulong; Set: uint8; Enabled: uint8; Reserved: ushort; }
export type e__STORAGE_QUERY_TYPE = enum { PropertyStandardQuery; PropertyExistsQuery = 1; PropertyMaskQuery = 2; PropertyQueryMaxDefined = 3; }
export type e__STORAGE_SET_TYPE = enum { PropertyStandardSet; PropertyExistsSet = 1; PropertySetMaxDefined = 2; }
export type e__STORAGE_PROPERTY_ID = enum { StorageDeviceProperty; StorageAdapterProperty = 1; StorageDeviceIdProperty = 2; StorageDeviceUniqueIdProperty = 3; StorageDeviceWriteCacheProperty = 4; StorageMiniportProperty = 5; StorageAccessAlignmentProperty = 6; StorageDeviceSeekPenaltyProperty = 7; StorageDeviceTrimProperty = 8; StorageDeviceWriteAggregationProperty = 9; StorageDeviceDeviceTelemetryProperty = 10; StorageDeviceLBProvisioningProperty = 11; StorageDevicePowerProperty = 12; StorageDeviceCopyOffloadProperty = 13; StorageDeviceResiliencyProperty = 14; StorageDeviceMediumProductType = 15; StorageAdapterRpmbProperty = 16; StorageAdapterCryptoProperty = 17; StorageDeviceIoCapabilityProperty = 48; StorageAdapterProtocolSpecificProperty = 49; StorageDeviceProtocolSpecificProperty = 50; StorageAdapterTemperatureProperty = 51; StorageDeviceTemperatureProperty = 52; StorageAdapterPhysicalTopologyProperty = 53; StorageDevicePhysicalTopologyProperty = 54; StorageDeviceAttributesProperty = 55; StorageDeviceManagementStatus = 56; StorageAdapterSerialNumberProperty = 57; StorageDeviceLocationProperty = 58; StorageDeviceNumaProperty = 59; StorageDeviceZonedDeviceProperty = 60; StorageDeviceUnsafeShutdownCount = 61; StorageDeviceEnduranceProperty = 62; StorageDeviceLedStateProperty = 63; StorageDeviceSelfEncryptionProperty = 64; StorageFruIdProperty = 65; }
export type s__STORAGE_PROPERTY_QUERY = struct { PropertyId: e__STORAGE_PROPERTY_ID; QueryType: e__STORAGE_QUERY_TYPE; AdditionalParameters: [1; uint8]; }
export type s__STORAGE_PROPERTY_SET = struct { PropertyId: e__STORAGE_PROPERTY_ID; SetType: e__STORAGE_SET_TYPE; AdditionalParameters: [1; uint8]; }
export type s__STORAGE_DESCRIPTOR_HEADER = struct { Version: ulong; Size: ulong; }
export type s__STORAGE_DEVICE_DESCRIPTOR = struct { Version: ulong; Size: ulong; DeviceType: uint8; DeviceTypeModifier: uint8; RemovableMedia: uint8; CommandQueueing: uint8; VendorIdOffset: ulong; ProductIdOffset: ulong; ProductRevisionOffset: ulong; SerialNumberOffset: ulong; BusType: e__STORAGE_BUS_TYPE; RawPropertiesLength: ulong; RawDeviceProperties: [1; uint8]; }
export type s__STORAGE_ADAPTER_DESCRIPTOR = struct { Version: ulong; Size: ulong; MaximumTransferLength: ulong; MaximumPhysicalPages: ulong; AlignmentMask: ulong; AdapterUsesPio: uint8; AdapterScansDown: uint8; CommandQueueing: uint8; AcceleratedTransfer: uint8; BusType: uint8; BusMajorVersion: ushort; BusMinorVersion: ushort; SrbType: uint8; AddressType: uint8; }
export type s__STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = struct { Version: ulong; Size: ulong; BytesPerCacheLine: ulong; BytesOffsetForCacheAlignment: ulong; BytesPerLogicalSector: ulong; BytesPerPhysicalSector: ulong; BytesOffsetForSectorAlignment: ulong; }
export type s__STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = struct { Version: ulong; Size: ulong; MediumProductType: ulong; }
export type e__STORAGE_PORT_CODE_SET = enum { StoragePortCodeSetReserved; StoragePortCodeSetStorport = 1; StoragePortCodeSetSCSIport = 2; StoragePortCodeSetSpaceport = 3; StoragePortCodeSetATAport = 4; StoragePortCodeSetUSBport = 5; StoragePortCodeSetSBP2port = 6; StoragePortCodeSetSDport = 7; }
export type s__STORAGE_MINIPORT_DESCRIPTOR = struct { Version: ulong; Size: ulong; Portdriver: e__STORAGE_PORT_CODE_SET; LUNResetSupported: uint8; TargetResetSupported: uint8; IoTimeoutValue: ushort; ExtraIoInfoSupported: uint8; Flags: struct #union { struct { #bits(1) LogicalPoFxForDisk: uint8; #bits(7) Reserved: uint8; }; AsBYTE: uint8; }; Reserved0: [2; uint8]; Reserved1: ulong; }
export type e__STORAGE_IDENTIFIER_CODE_SET = enum { StorageIdCodeSetReserved; StorageIdCodeSetBinary = 1; StorageIdCodeSetAscii = 2; StorageIdCodeSetUtf8 = 3; }
export type e__STORAGE_IDENTIFIER_TYPE = enum { StorageIdTypeVendorSpecific; StorageIdTypeVendorId = 1; StorageIdTypeEUI64 = 2; StorageIdTypeFCPHName = 3; StorageIdTypePortRelative = 4; StorageIdTypeTargetPortGroup = 5; StorageIdTypeLogicalUnitGroup = 6; StorageIdTypeMD5LogicalUnitIdentifier = 7; StorageIdTypeScsiNameString = 8; }
export type e__STORAGE_ID_NAA_FORMAT = enum { StorageIdNAAFormatIEEEExtended = 2; StorageIdNAAFormatIEEERegistered = 3; StorageIdNAAFormatIEEEERegisteredExtended = 5; }
export type e__STORAGE_ASSOCIATION_TYPE = enum { StorageIdAssocDevice; StorageIdAssocPort = 1; StorageIdAssocTarget = 2; }
export type s__STORAGE_IDENTIFIER = struct { CodeSet: e__STORAGE_IDENTIFIER_CODE_SET; Type: e__STORAGE_IDENTIFIER_TYPE; IdentifierSize: ushort; NextOffset: ushort; Association: e__STORAGE_ASSOCIATION_TYPE; Identifier: [1; uint8]; }
export type s__STORAGE_DEVICE_ID_DESCRIPTOR = struct { Version: ulong; Size: ulong; NumberOfIdentifiers: ulong; Identifiers: [1; uint8]; }
export type s__DEVICE_SEEK_PENALTY_DESCRIPTOR = struct { Version: ulong; Size: ulong; IncursSeekPenalty: uint8; }
export type s__DEVICE_WRITE_AGGREGATION_DESCRIPTOR = struct { Version: ulong; Size: ulong; BenefitsFromWriteAggregation: uint8; }
export type s__DEVICE_TRIM_DESCRIPTOR = struct { Version: ulong; Size: ulong; TrimEnabled: uint8; }
export type s__DEVICE_LB_PROVISIONING_DESCRIPTOR = struct { Version: ulong; Size: ulong; #bits(1) ThinProvisioningEnabled: uint8; #bits(1) ThinProvisioningReadZeros: uint8; #bits(3) AnchorSupported: uint8; #bits(1) UnmapGranularityAlignmentValid: uint8; #bits(1) GetFreeSpaceSupported: uint8; #bits(1) MapSupported: uint8; Reserved1: [7; uint8]; OptimalUnmapGranularity: uint64; UnmapGranularityAlignment: uint64; MaxUnmapLbaCount: ulong; MaxUnmapBlockDescriptorCount: ulong; }
export type s__STORAGE_LB_PROVISIONING_MAP_RESOURCES = struct { Size: ulong; Version: ulong; #bits(1) AvailableMappingResourcesValid: uint8; #bits(1) UsedMappingResourcesValid: uint8; #bits(6) Reserved0: uint8; Reserved1: [3; uint8]; #bits(2) AvailableMappingResourcesScope: uint8; #bits(2) UsedMappingResourcesScope: uint8; #bits(4) Reserved2: uint8; Reserved3: [3; uint8]; AvailableMappingResources: uint64; UsedMappingResources: uint64; }
export type s__DEVICE_POWER_DESCRIPTOR = struct { Version: ulong; Size: ulong; DeviceAttentionSupported: uint8; AsynchronousNotificationSupported: uint8; IdlePowerManagementEnabled: uint8; D3ColdEnabled: uint8; D3ColdSupported: uint8; NoVerifyDuringIdlePower: uint8; Reserved: [2; uint8]; IdleTimeoutInMS: ulong; }
export type s__DEVICE_COPY_OFFLOAD_DESCRIPTOR = struct { Version: ulong; Size: ulong; MaximumTokenLifetime: ulong; DefaultTokenLifetime: ulong; MaximumTransferSize: uint64; OptimalTransferCount: uint64; MaximumDataDescriptors: ulong; MaximumTransferLengthPerDescriptor: ulong; OptimalTransferLengthPerDescriptor: ulong; OptimalTransferLengthGranularity: ushort; Reserved: [2; uint8]; }
export type s__STORAGE_DEVICE_RESILIENCY_DESCRIPTOR = struct { Version: ulong; Size: ulong; NameOffset: ulong; NumberOfLogicalCopies: ulong; NumberOfPhysicalCopies: ulong; PhysicalDiskRedundancy: ulong; NumberOfColumns: ulong; Interleave: ulong; }
export type e__STORAGE_RPMB_FRAME_TYPE = enum { StorageRpmbFrameTypeUnknown; StorageRpmbFrameTypeStandard = 1; StorageRpmbFrameTypeMax = 2; }
export type s__STORAGE_RPMB_DESCRIPTOR = struct { Version: ulong; Size: ulong; SizeInBytes: ulong; MaxReliableWriteSizeInBytes: ulong; FrameFormat: e__STORAGE_RPMB_FRAME_TYPE; }
export type e__STORAGE_CRYPTO_ALGORITHM_ID = enum { StorageCryptoAlgorithmUnknown; StorageCryptoAlgorithmXTSAES = 1; StorageCryptoAlgorithmBitlockerAESCBC = 2; StorageCryptoAlgorithmAESECB = 3; StorageCryptoAlgorithmESSIVAESCBC = 4; StorageCryptoAlgorithmMax = 5; }
export type e__STORAGE_CRYPTO_KEY_SIZE = enum { StorageCryptoKeySizeUnknown; StorageCryptoKeySize128Bits = 1; StorageCryptoKeySize192Bits = 2; StorageCryptoKeySize256Bits = 3; StorageCryptoKeySize512Bits = 4; }
export type s__STORAGE_CRYPTO_CAPABILITY = struct { Version: ulong; Size: ulong; CryptoCapabilityIndex: ulong; AlgorithmId: e__STORAGE_CRYPTO_ALGORITHM_ID; KeySize: e__STORAGE_CRYPTO_KEY_SIZE; DataUnitSizeBitmask: ulong; }
export type s__STORAGE_CRYPTO_DESCRIPTOR = struct { Version: ulong; Size: ulong; NumKeysSupported: ulong; NumCryptoCapabilities: ulong; CryptoCapabilities: [1; s__STORAGE_CRYPTO_CAPABILITY]; }
export type e__STORAGE_TIER_MEDIA_TYPE = enum { StorageTierMediaTypeUnspecified; StorageTierMediaTypeDisk = 1; StorageTierMediaTypeSsd = 2; StorageTierMediaTypeScm = 4; StorageTierMediaTypeMax = 5; }
export type e__STORAGE_TIER_CLASS = enum { StorageTierClassUnspecified; StorageTierClassCapacity = 1; StorageTierClassPerformance = 2; StorageTierClassMax = 3; }
export type s__STORAGE_TIER = struct { Id: s__GUID; Name: [256; ushort]; Description: [256; ushort]; Flags: uint64; ProvisionedCapacity: uint64; MediaType: e__STORAGE_TIER_MEDIA_TYPE; Class: e__STORAGE_TIER_CLASS; }
export type s__STORAGE_DEVICE_TIERING_DESCRIPTOR = struct { Version: ulong; Size: ulong; Flags: ulong; TotalNumberOfTiers: ulong; NumberOfTiersReturned: ulong; Tiers: [1; s__STORAGE_TIER]; }
export type s__STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = struct { Version: ulong; Size: ulong; NumberOfFaultDomains: ulong; FaultDomainIds: [1; s__GUID]; }
export type e__STORAGE_PROTOCOL_TYPE = enum { ProtocolTypeUnknown; ProtocolTypeScsi = 1; ProtocolTypeAta = 2; ProtocolTypeNvme = 3; ProtocolTypeSd = 4; ProtocolTypeUfs = 5; ProtocolTypeProprietary = 126; ProtocolTypeMaxReserved = 127; }
export type e__STORAGE_PROTOCOL_NVME_DATA_TYPE = enum { NVMeDataTypeUnknown; NVMeDataTypeIdentify = 1; NVMeDataTypeLogPage = 2; NVMeDataTypeFeature = 3; }
export type e__STORAGE_PROTOCOL_ATA_DATA_TYPE = enum { AtaDataTypeUnknown; AtaDataTypeIdentify = 1; AtaDataTypeLogPage = 2; }
export type e__STORAGE_PROTOCOL_UFS_DATA_TYPE = enum { UfsDataTypeUnknown; UfsDataTypeQueryDescriptor = 1; UfsDataTypeQueryAttribute = 2; UfsDataTypeQueryFlag = 3; UfsDataTypeQueryDmeAttribute = 4; UfsDataTypeQueryDmePeerAttribute = 5; UfsDataTypeMax = 6; }
export type u__STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE = struct #union { struct { #bits(1) RetainAsynEvent: ulong; #bits(4) LogSpecificField: ulong; #bits(27) Reserved: ulong; }; AsUlong: ulong; }
export type s__STORAGE_PROTOCOL_SPECIFIC_DATA = struct { ProtocolType: e__STORAGE_PROTOCOL_TYPE; DataType: ulong; ProtocolDataRequestValue: ulong; ProtocolDataRequestSubValue: ulong; ProtocolDataOffset: ulong; ProtocolDataLength: ulong; FixedProtocolReturnData: ulong; ProtocolDataRequestSubValue2: ulong; ProtocolDataRequestSubValue3: ulong; ProtocolDataRequestSubValue4: ulong; }
export type s__STORAGE_PROTOCOL_SPECIFIC_DATA_EXT = struct { ProtocolType: e__STORAGE_PROTOCOL_TYPE; DataType: ulong; ProtocolDataValue: ulong; ProtocolDataSubValue: ulong; ProtocolDataOffset: ulong; ProtocolDataLength: ulong; FixedProtocolReturnData: ulong; ProtocolDataSubValue2: ulong; ProtocolDataSubValue3: ulong; ProtocolDataSubValue4: ulong; ProtocolDataSubValue5: ulong; Reserved: [5; ulong]; }
export type s__STORAGE_PROTOCOL_DATA_DESCRIPTOR = struct { Version: ulong; Size: ulong; ProtocolSpecificData: s__STORAGE_PROTOCOL_SPECIFIC_DATA; }
export type s__STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = struct { Version: ulong; Size: ulong; ProtocolSpecificData: s__STORAGE_PROTOCOL_SPECIFIC_DATA_EXT; }
export type s__STORAGE_TEMPERATURE_INFO = struct { Index: ushort; Temperature: short; OverThreshold: short; UnderThreshold: short; OverThresholdChangable: uint8; UnderThresholdChangable: uint8; EventGenerated: uint8; Reserved0: uint8; Reserved1: ulong; }
export type s__STORAGE_TEMPERATURE_DATA_DESCRIPTOR = struct { Version: ulong; Size: ulong; CriticalTemperature: short; WarningTemperature: short; InfoCount: ushort; Reserved0: [2; uint8]; Reserved1: [2; ulong]; TemperatureInfo: [1; s__STORAGE_TEMPERATURE_INFO]; }
export type s__STORAGE_TEMPERATURE_THRESHOLD = struct { Version: ulong; Size: ulong; Flags: ushort; Index: ushort; Threshold: short; OverThreshold: uint8; Reserved: uint8; }
export type e__STORAGE_DEVICE_FORM_FACTOR = enum { FormFactorUnknown; FormFactor3_5 = 1; FormFactor2_5 = 2; FormFactor1_8 = 3; FormFactor1_8Less = 4; FormFactorEmbedded = 5; FormFactorMemoryCard = 6; FormFactormSata = 7; FormFactorM_2 = 8; FormFactorPCIeBoard = 9; FormFactorDimm = 10; }
export type e__STORAGE_COMPONENT_HEALTH_STATUS = enum { HealthStatusUnknown; HealthStatusNormal = 1; HealthStatusThrottled = 2; HealthStatusWarning = 3; HealthStatusDisabled = 4; HealthStatusFailed = 5; }
export type u__STORAGE_SPEC_VERSION = struct #union { struct { MinorVersion: struct #union { struct { SubMinor: uint8; Minor: uint8; }; AsUshort: ushort; }; MajorVersion: ushort; }; AsUlong: ulong; }
export type s__STORAGE_PHYSICAL_DEVICE_DATA = struct { DeviceId: ulong; Role: ulong; HealthStatus: e__STORAGE_COMPONENT_HEALTH_STATUS; CommandProtocol: e__STORAGE_PROTOCOL_TYPE; SpecVersion: u__STORAGE_SPEC_VERSION; FormFactor: e__STORAGE_DEVICE_FORM_FACTOR; Vendor: [8; uint8]; Model: [40; uint8]; FirmwareRevision: [16; uint8]; Capacity: uint64; PhysicalLocation: [32; uint8]; Reserved: [2; ulong]; }
export type s__STORAGE_PHYSICAL_ADAPTER_DATA = struct { AdapterId: ulong; HealthStatus: e__STORAGE_COMPONENT_HEALTH_STATUS; CommandProtocol: e__STORAGE_PROTOCOL_TYPE; SpecVersion: u__STORAGE_SPEC_VERSION; Vendor: [8; uint8]; Model: [40; uint8]; FirmwareRevision: [16; uint8]; PhysicalLocation: [32; uint8]; ExpanderConnected: uint8; Reserved0: [3; uint8]; Reserved1: [3; ulong]; }
export type s__STORAGE_PHYSICAL_NODE_DATA = struct { NodeId: ulong; AdapterCount: ulong; AdapterDataLength: ulong; AdapterDataOffset: ulong; DeviceCount: ulong; DeviceDataLength: ulong; DeviceDataOffset: ulong; Reserved: [3; ulong]; }
export type s__STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = struct { Version: ulong; Size: ulong; NodeCount: ulong; Reserved: ulong; Node: [1; s__STORAGE_PHYSICAL_NODE_DATA]; }
export type s__STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR = struct { Version: ulong; Size: ulong; LunMaxIoCount: ulong; AdapterMaxIoCount: ulong; }
export type s__STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = struct { Version: ulong; Size: ulong; Attributes: uint64; }
export type e__STORAGE_DISK_HEALTH_STATUS = enum { DiskHealthUnknown; DiskHealthUnhealthy = 1; DiskHealthWarning = 2; DiskHealthHealthy = 3; DiskHealthMax = 4; }
export type e__STORAGE_DISK_OPERATIONAL_STATUS = enum { DiskOpStatusNone; DiskOpStatusUnknown = 1; DiskOpStatusOk = 2; DiskOpStatusPredictingFailure = 3; DiskOpStatusInService = 4; DiskOpStatusHardwareError = 5; DiskOpStatusNotUsable = 6; DiskOpStatusTransientError = 7; DiskOpStatusMissing = 8; }
export type e__STORAGE_OPERATIONAL_STATUS_REASON = enum { DiskOpReasonUnknown; DiskOpReasonScsiSenseCode = 1; DiskOpReasonMedia = 2; DiskOpReasonIo = 3; DiskOpReasonThresholdExceeded = 4; DiskOpReasonLostData = 5; DiskOpReasonEnergySource = 6; DiskOpReasonConfiguration = 7; DiskOpReasonDeviceController = 8; DiskOpReasonMediaController = 9; DiskOpReasonComponent = 10; DiskOpReasonNVDIMM_N = 11; DiskOpReasonBackgroundOperation = 12; DiskOpReasonInvalidFirmware = 13; DiskOpReasonHealthCheck = 14; DiskOpReasonLostDataPersistence = 15; DiskOpReasonDisabledByPlatform = 16; DiskOpReasonLostWritePersistence = 17; DiskOpReasonDataPersistenceLossImminent = 18; DiskOpReasonWritePersistenceLossImminent = 19; DiskOpReasonMax = 20; }
export type s__STORAGE_OPERATIONAL_REASON = struct { Version: ulong; Size: ulong; Reason: e__STORAGE_OPERATIONAL_STATUS_REASON; RawBytes: struct #union { ScsiSenseKey: struct { SenseKey: uint8; ASC: uint8; ASCQ: uint8; Reserved: uint8; }; NVDIMM_N: struct { CriticalHealth: uint8; ModuleHealth: [2; uint8]; ErrorThresholdStatus: uint8; }; AsUlong: ulong; }; }
export type s__STORAGE_DEVICE_MANAGEMENT_STATUS = struct { Version: ulong; Size: ulong; Health: e__STORAGE_DISK_HEALTH_STATUS; NumberOfOperationalStatus: ulong; NumberOfAdditionalReasons: ulong; OperationalStatus: [16; e__STORAGE_DISK_OPERATIONAL_STATUS]; AdditionalReasons: [1; s__STORAGE_OPERATIONAL_REASON]; }
export type s__STORAGE_ADAPTER_SERIAL_NUMBER = struct { Version: ulong; Size: ulong; SerialNumber: [128; ushort]; }
export type e__STORAGE_ZONED_DEVICE_TYPES = enum { ZonedDeviceTypeUnknown; ZonedDeviceTypeHostManaged = 1; ZonedDeviceTypeHostAware = 2; ZonedDeviceTypeDeviceManaged = 3; }
export type e__STORAGE_ZONE_TYPES = enum { ZoneTypeUnknown; ZoneTypeConventional = 1; ZoneTypeSequentialWriteRequired = 2; ZoneTypeSequentialWritePreferred = 3; ZoneTypeMax = 4; }
export type s__STORAGE_ZONE_GROUP = struct { ZoneCount: ulong; ZoneType: e__STORAGE_ZONE_TYPES; ZoneSize: uint64; }
export type s__STORAGE_ZONED_DEVICE_DESCRIPTOR = struct { Version: ulong; Size: ulong; DeviceType: e__STORAGE_ZONED_DEVICE_TYPES; ZoneCount: ulong; ZoneAttributes: struct #union { SequentialRequiredZone: struct { MaxOpenZoneCount: ulong; UnrestrictedRead: uint8; Reserved: [3; uint8]; }; SequentialPreferredZone: struct { OptimalOpenZoneCount: ulong; Reserved: ulong; }; }; ZoneGroupCount: ulong; ZoneGroup: [1; s__STORAGE_ZONE_GROUP]; }
export type s__DEVICE_LOCATION = struct { Socket: ulong; Slot: ulong; Adapter: ulong; Port: ulong; struct #union { struct { Channel: ulong; Device: ulong; }; struct { Target: ulong; Lun: ulong; }; }; }
export type s__STORAGE_DEVICE_LOCATION_DESCRIPTOR = struct { Version: ulong; Size: ulong; Location: s__DEVICE_LOCATION; StringOffset: ulong; }
export type s__STORAGE_DEVICE_NUMA_PROPERTY = struct { Version: ulong; Size: ulong; NumaNode: ulong; }
export type s__STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = struct { Version: ulong; Size: ulong; UnsafeShutdownCount: ulong; }
export type s__STORAGE_HW_ENDURANCE_INFO = struct { ValidFields: ulong; GroupId: ulong; Flags: struct { #bits(1) Shared: ulong; #bits(31) Reserved: ulong; }; LifePercentage: ulong; BytesReadCount: [16; uint8]; ByteWriteCount: [16; uint8]; }
export type s__STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = struct { Version: ulong; Size: ulong; EnduranceInfo: s__STORAGE_HW_ENDURANCE_INFO; }
export type s__STORAGE_DEVICE_LED_STATE_DESCRIPTOR = struct { Version: ulong; Size: ulong; State: uint64; }
export type s__STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY = struct { Version: ulong; Size: ulong; SupportsSelfEncryption: uint8; }
export type e__STORAGE_ENCRYPTION_TYPE = enum { StorageEncryptionTypeUnknown; StorageEncryptionTypeEDrive = 1; StorageEncryptionTypeTcgOpal = 2; }
export type s__STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY_V2 = struct { Version: ulong; Size: ulong; SupportsSelfEncryption: uint8; EncryptionType: e__STORAGE_ENCRYPTION_TYPE; }
export type s__STORAGE_FRU_ID_DESCRIPTOR = struct { Version: ulong; Size: ulong; IdentifierSize: ulong; Identifier: [1; uint8]; }
export type s__DEVICE_DATA_SET_RANGE = struct { StartingOffset: int64; LengthInBytes: uint64; }
export type s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES = struct { Size: ulong; Action: ulong; Flags: ulong; ParameterBlockOffset: ulong; ParameterBlockLength: ulong; DataSetRangesOffset: ulong; DataSetRangesLength: ulong; }
export type s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT = struct { Size: ulong; Action: ulong; Flags: ulong; OperationStatus: ulong; ExtendedError: ulong; TargetDetailedError: ulong; ReservedStatus: ulong; OutputBlockOffset: ulong; OutputBlockLength: ulong; }
export type s__DEVICE_DSM_DEFINITION = struct { Action: ulong; SingleRange: uint8; ParameterBlockAlignment: ulong; ParameterBlockLength: ulong; HasOutput: uint8; OutputBlockAlignment: ulong; OutputBlockLength: ulong; }
export type s__DEVICE_DSM_NOTIFICATION_PARAMETERS = struct { Size: ulong; Flags: ulong; NumFileTypeIDs: ulong; FileTypeID: [1; s__GUID]; }
export type s__STORAGE_OFFLOAD_TOKEN = struct { TokenType: [4; uint8]; Reserved: [2; uint8]; TokenIdLength: [2; uint8]; struct #union { StorageOffloadZeroDataToken: struct { Reserved2: [504; uint8]; }; Token: [504; uint8]; }; }
export type s__DEVICE_DSM_OFFLOAD_READ_PARAMETERS = struct { Flags: ulong; TimeToLive: ulong; Reserved: [2; ulong]; }
export type s__STORAGE_OFFLOAD_READ_OUTPUT = struct { OffloadReadFlags: ulong; Reserved: ulong; LengthProtected: uint64; TokenLength: ulong; Token: s__STORAGE_OFFLOAD_TOKEN; }
export type s__DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = struct { Flags: ulong; Reserved: ulong; TokenOffset: uint64; Token: s__STORAGE_OFFLOAD_TOKEN; }
export type s__STORAGE_OFFLOAD_WRITE_OUTPUT = struct { OffloadWriteFlags: ulong; Reserved: ulong; LengthCopied: uint64; }
export type s__DEVICE_DATA_SET_LBP_STATE_PARAMETERS = struct { Version: ulong; Size: ulong; Flags: ulong; OutputVersion: ulong; }
export type s__DEVICE_DATA_SET_LB_PROVISIONING_STATE = struct { Size: ulong; Version: ulong; SlabSizeInBytes: uint64; SlabOffsetDeltaInBytes: ulong; SlabAllocationBitMapBitCount: ulong; SlabAllocationBitMapLength: ulong; SlabAllocationBitMap: [1; ulong]; }
export type s__DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 = struct { Size: ulong; Version: ulong; SlabSizeInBytes: uint64; SlabOffsetDeltaInBytes: uint64; SlabAllocationBitMapBitCount: ulong; SlabAllocationBitMapLength: ulong; SlabAllocationBitMap: [1; ulong]; }
export type s__DEVICE_DATA_SET_REPAIR_PARAMETERS = struct { NumberOfRepairCopies: ulong; SourceCopy: ulong; RepairCopies: [1; ulong]; }
export type s__DEVICE_DATA_SET_REPAIR_OUTPUT = struct { ParityExtent: s__DEVICE_DATA_SET_RANGE; }
export type s__DEVICE_DATA_SET_SCRUB_OUTPUT = struct { BytesProcessed: uint64; BytesRepaired: uint64; BytesFailed: uint64; }
export type s__DEVICE_DATA_SET_SCRUB_EX_OUTPUT = struct { BytesProcessed: uint64; BytesRepaired: uint64; BytesFailed: uint64; ParityExtent: s__DEVICE_DATA_SET_RANGE; BytesScrubbed: uint64; }
export type s__DEVICE_DSM_TIERING_QUERY_INPUT = struct { Version: ulong; Size: ulong; Flags: ulong; NumberOfTierIds: ulong; TierIds: [1; s__GUID]; }
export type s__STORAGE_TIER_REGION = struct { TierId: s__GUID; Offset: uint64; Length: uint64; }
export type s__DEVICE_DSM_TIERING_QUERY_OUTPUT = struct { Version: ulong; Size: ulong; Flags: ulong; Reserved: ulong; Alignment: uint64; TotalNumberOfRegions: ulong; NumberOfRegionsReturned: ulong; Regions: [1; s__STORAGE_TIER_REGION]; }
export type s__DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = struct { Size: ulong; TargetPriority: uint8; Reserved: [3; uint8]; }
export type s__DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT = struct { TopologyRangeBytes: uint64; TopologyId: [16; uint8]; }
export type s__DEVICE_STORAGE_ADDRESS_RANGE = struct { StartAddress: int64; LengthInBytes: uint64; }
export type s__DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = struct { Version: ulong; Flags: ulong; TotalNumberOfRanges: ulong; NumberOfRangesReturned: ulong; Ranges: [1; s__DEVICE_STORAGE_ADDRESS_RANGE]; }
export type s__DEVICE_DSM_REPORT_ZONES_PARAMETERS = struct { Size: ulong; ReportOption: uint8; Partial: uint8; Reserved: [2; uint8]; }
export type e__STORAGE_ZONES_ATTRIBUTES = enum { ZonesAttributeTypeAndLengthMayDifferent; ZonesAttributeTypeSameLengthSame = 1; ZonesAttributeTypeSameLastZoneLengthDifferent = 2; ZonesAttributeTypeMayDifferentLengthSame = 3; }
export type e__STORAGE_ZONE_CONDITION = enum { ZoneConditionConventional; ZoneConditionEmpty = 1; ZoneConditionImplicitlyOpened = 2; ZoneConditionExplicitlyOpened = 3; ZoneConditionClosed = 4; ZoneConditionReadOnly = 13; ZoneConditionFull = 14; ZoneConditionOffline = 15; }
export type s__STORAGE_ZONE_DESCRIPTOR = struct { Size: ulong; ZoneType: e__STORAGE_ZONE_TYPES; ZoneCondition: e__STORAGE_ZONE_CONDITION; ResetWritePointerRecommend: uint8; Reserved0: [3; uint8]; ZoneSize: uint64; WritePointerOffset: uint64; }
export type s__DEVICE_DSM_REPORT_ZONES_DATA = struct { Size: ulong; ZoneCount: ulong; Attributes: e__STORAGE_ZONES_ATTRIBUTES; Reserved0: ulong; ZoneDescriptors: [1; s__STORAGE_ZONE_DESCRIPTOR]; }
export type s__DEVICE_STORAGE_RANGE_ATTRIBUTES = struct { LengthInBytes: uint64; struct #union { AllFlags: ulong; struct { #bits(1) IsRangeBad: ulong; }; }; Reserved: ulong; }
export type s__DEVICE_DSM_RANGE_ERROR_INFO = struct { Version: ulong; Flags: ulong; TotalNumberOfRanges: ulong; NumberOfRangesReturned: ulong; Ranges: [1; s__DEVICE_STORAGE_RANGE_ATTRIBUTES]; }
export type s__DEVICE_DSM_LOST_QUERY_PARAMETERS = struct { Version: ulong; Granularity: uint64; }
export type s__DEVICE_DSM_LOST_QUERY_OUTPUT = struct { Version: ulong; Size: ulong; Alignment: uint64; NumberOfBits: ulong; BitMap: [1; ulong]; }
export type s__DEVICE_DSM_FREE_SPACE_OUTPUT = struct { Version: ulong; FreeSpace: uint64; }
export type s__DEVICE_DSM_CONVERSION_OUTPUT = struct { Version: ulong; Source: s__GUID; }
export type s__STORAGE_GET_BC_PROPERTIES_OUTPUT = struct { MaximumRequestsPerPeriod: ulong; MinimumPeriod: ulong; MaximumRequestSize: uint64; EstimatedTimePerRequest: ulong; NumOutStandingRequests: ulong; RequestSize: uint64; }
export type s__STORAGE_ALLOCATE_BC_STREAM_INPUT = struct { Version: ulong; RequestsPerPeriod: ulong; Period: ulong; RetryFailures: uint8; Discardable: uint8; Reserved1: [2; uint8]; AccessType: ulong; AccessMode: ulong; }
export type s__STORAGE_ALLOCATE_BC_STREAM_OUTPUT = struct { RequestSize: uint64; NumOutStandingRequests: ulong; }
export type s__STORAGE_PRIORITY_HINT_SUPPORT = struct { SupportFlags: ulong; }
export type e__STORAGE_DIAGNOSTIC_LEVEL = enum { StorageDiagnosticLevelDefault; StorageDiagnosticLevelMax = 1; }
export type e__STORAGE_DIAGNOSTIC_TARGET_TYPE = enum { StorageDiagnosticTargetTypeUndefined; StorageDiagnosticTargetTypePort = 1; StorageDiagnosticTargetTypeMiniport = 2; StorageDiagnosticTargetTypeHbaFirmware = 3; StorageDiagnosticTargetTypeMax = 4; }
export type s__STORAGE_DIAGNOSTIC_REQUEST = struct { Version: ulong; Size: ulong; Flags: ulong; TargetType: e__STORAGE_DIAGNOSTIC_TARGET_TYPE; Level: e__STORAGE_DIAGNOSTIC_LEVEL; }
export type s__STORAGE_DIAGNOSTIC_DATA = struct { Version: ulong; Size: ulong; ProviderId: s__GUID; BufferSize: ulong; Reserved: ulong; DiagnosticDataBuffer: [1; uint8]; }
export type s__PHYSICAL_ELEMENT_STATUS_REQUEST = struct { Version: ulong; Size: ulong; StartingElement: ulong; Filter: uint8; ReportType: uint8; Reserved: [2; uint8]; }
export type s__PHYSICAL_ELEMENT_STATUS_DESCRIPTOR = struct { Version: ulong; Size: ulong; ElementIdentifier: ulong; PhysicalElementType: uint8; PhysicalElementHealth: uint8; Reserved1: [2; uint8]; AssociatedCapacity: uint64; Reserved2: [4; ulong]; }
export type s__PHYSICAL_ELEMENT_STATUS = struct { Version: ulong; Size: ulong; DescriptorCount: ulong; ReturnedDescriptorCount: ulong; ElementIdentifierBeingDepoped: ulong; Reserved: ulong; Descriptors: [1; s__PHYSICAL_ELEMENT_STATUS_DESCRIPTOR]; }
export type s__REMOVE_ELEMENT_AND_TRUNCATE_REQUEST = struct { Version: ulong; Size: ulong; RequestCapacity: uint64; ElementIdentifier: ulong; Reserved: ulong; }
export type e__DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = enum { DeviceInternalStatusDataRequestTypeUndefined; DeviceCurrentInternalStatusDataHeader = 1; DeviceCurrentInternalStatusData = 2; DeviceSavedInternalStatusDataHeader = 3; DeviceSavedInternalStatusData = 4; }
export type e__DEVICE_INTERNAL_STATUS_DATA_SET = enum { DeviceStatusDataSetUndefined; DeviceStatusDataSet1 = 1; DeviceStatusDataSet2 = 2; DeviceStatusDataSet3 = 3; DeviceStatusDataSet4 = 4; DeviceStatusDataSetMax = 5; }
export type s__GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = struct { Version: ulong; Size: ulong; RequestDataType: e__DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE; RequestDataSet: e__DEVICE_INTERNAL_STATUS_DATA_SET; }
export type s__DEVICE_INTERNAL_STATUS_DATA = struct { Version: ulong; Size: ulong; T10VendorId: uint64; DataSet1Length: ulong; DataSet2Length: ulong; DataSet3Length: ulong; DataSet4Length: ulong; StatusDataVersion: uint8; Reserved: [3; uint8]; ReasonIdentifier: [128; uint8]; StatusDataLength: ulong; StatusData: [1; uint8]; }
export type e__STORAGE_SANITIZE_METHOD = enum { StorageSanitizeMethodDefault; StorageSanitizeMethodBlockErase = 1; StorageSanitizeMethodCryptoErase = 2; }
export type s__STORAGE_REINITIALIZE_MEDIA = struct { Version: ulong; Size: ulong; TimeoutInSeconds: ulong; SanitizeOption: struct { #bits(4) SanitizeMethod: ulong; #bits(1) DisallowUnrestrictedSanitizeExit: ulong; #bits(27) Reserved: ulong; }; }
export type s__STORAGE_MEDIA_SERIAL_NUMBER_DATA = struct { Reserved: ushort; SerialNumberLength: ushort; SerialNumber: *uint8; }
export type s__STORAGE_READ_CAPACITY = struct { Version: ulong; Size: ulong; BlockLength: ulong; NumberOfBlocks: u__LARGE_INTEGER; DiskLength: u__LARGE_INTEGER; }
export type e__WRITE_CACHE_TYPE = enum { WriteCacheTypeUnknown; WriteCacheTypeNone = 1; WriteCacheTypeWriteBack = 2; WriteCacheTypeWriteThrough = 3; }
export type e__WRITE_CACHE_ENABLE = enum { WriteCacheEnableUnknown; WriteCacheDisabled = 1; WriteCacheEnabled = 2; }
export type e__WRITE_CACHE_CHANGE = enum { WriteCacheChangeUnknown; WriteCacheNotChangeable = 1; WriteCacheChangeable = 2; }
export type e__WRITE_THROUGH = enum { WriteThroughUnknown; WriteThroughNotSupported = 1; WriteThroughSupported = 2; }
export type s__STORAGE_WRITE_CACHE_PROPERTY = struct { Version: ulong; Size: ulong; WriteCacheType: e__WRITE_CACHE_TYPE; WriteCacheEnabled: e__WRITE_CACHE_ENABLE; WriteCacheChangeable: e__WRITE_CACHE_CHANGE; WriteThroughSupported: e__WRITE_THROUGH; FlushCacheSupported: uint8; UserDefinedPowerProtection: uint8; NVCacheEnabled: uint8; }
export type s__PERSISTENT_RESERVE_COMMAND = struct { Version: ulong; Size: ulong; struct #union { PR_IN: struct { #bits(5) ServiceAction: uint8; #bits(3) Reserved1: uint8; AllocationLength: ushort; }; PR_OUT: struct { #bits(5) ServiceAction: uint8; #bits(3) Reserved1: uint8; #bits(4) Type: uint8; #bits(4) Scope: uint8; ParameterList: *uint8; }; }; }
export type e__DEVICEDUMP_COLLECTION_TYPE = enum { TCCollectionBugCheck = 1; TCCollectionApplicationRequested = 2; TCCollectionDeviceRequested = 3; }
export type s__DEVICEDUMP_SUBSECTION_POINTER = struct { dwSize: ulong; dwFlags: ulong; dwOffset: ulong; }
export type s__DEVICEDUMP_STRUCTURE_VERSION = struct { dwSignature: ulong; dwVersion: ulong; dwSize: ulong; }
export type s__DEVICEDUMP_SECTION_HEADER = struct { guidDeviceDataId: s__GUID; sOrganizationID: [16; uint8]; dwFirmwareRevision: ulong; sModelNumber: [32; uint8]; szDeviceManufacturingID: [32; uint8]; dwFlags: ulong; bRestrictedPrivateDataVersion: ulong; dwFirmwareIssueId: ulong; szIssueDescriptionString: [132; uint8]; }
export type s__GP_LOG_PAGE_DESCRIPTOR = struct { LogAddress: ushort; LogSectors: ushort; }
export type s__DEVICEDUMP_PUBLIC_SUBSECTION = struct { dwFlags: ulong; GPLogTable: [16; s__GP_LOG_PAGE_DESCRIPTOR]; szDescription: [16; char]; bData: [1; uint8]; }
export type s__DEVICEDUMP_RESTRICTED_SUBSECTION = struct { bData: [1; uint8]; }
export type s__DEVICEDUMP_PRIVATE_SUBSECTION = struct { dwFlags: ulong; GPLogId: s__GP_LOG_PAGE_DESCRIPTOR; bData: [1; uint8]; }
export type s__DEVICEDUMP_STORAGEDEVICE_DATA = struct { Descriptor: s__DEVICEDUMP_STRUCTURE_VERSION; SectionHeader: s__DEVICEDUMP_SECTION_HEADER; dwBufferSize: ulong; dwReasonForCollection: ulong; PublicData: s__DEVICEDUMP_SUBSECTION_POINTER; RestrictedData: s__DEVICEDUMP_SUBSECTION_POINTER; PrivateData: s__DEVICEDUMP_SUBSECTION_POINTER; }
export type s__DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = struct { Cdb: [16; uint8]; Command: [16; uint8]; StartTime: uint64; EndTime: uint64; OperationStatus: ulong; OperationError: ulong; StackSpecific: struct #union { ExternalStack: struct { dwReserved: ulong; }; AtaPort: struct { dwAtaPortSpecific: ulong; }; StorPort: struct { SrbTag: ulong; }; }; }
export type s__DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = struct { Descriptor: s__DEVICEDUMP_STRUCTURE_VERSION; dwReasonForCollection: ulong; cDriverName: [16; uint8]; uiNumRecords: ulong; RecordArray: [1; s__DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD]; }
export type s__STORAGE_IDLE_POWER = struct { Version: ulong; Size: ulong; #bits(1) WakeCapableHint: ulong; #bits(1) D3ColdSupported: ulong; #bits(30) Reserved: ulong; D3IdleTimeout: ulong; }
export type e__STORAGE_POWERUP_REASON_TYPE = enum { StoragePowerupUnknown; StoragePowerupIO = 1; StoragePowerupDeviceAttention = 2; }
export type s__STORAGE_IDLE_POWERUP_REASON = struct { Version: ulong; Size: ulong; PowerupReason: e__STORAGE_POWERUP_REASON_TYPE; }
export type e__STORAGE_DEVICE_POWER_CAP_UNITS = enum { StorageDevicePowerCapUnitsPercent; StorageDevicePowerCapUnitsMilliwatts = 1; }
export type s__STORAGE_DEVICE_POWER_CAP = struct { Version: ulong; Size: ulong; Units: e__STORAGE_DEVICE_POWER_CAP_UNITS; MaxPower: uint64; }
export type s__STORAGE_RPMB_DATA_FRAME = struct { Stuff: [196; uint8]; KeyOrMAC: [32; uint8]; Data: [256; uint8]; Nonce: [16; uint8]; WriteCounter: [4; uint8]; Address: [2; uint8]; BlockCount: [2; uint8]; OperationResult: [2; uint8]; RequestOrResponseType: [2; uint8]; }
export type e__STORAGE_RPMB_COMMAND_TYPE = enum { StorRpmbProgramAuthKey = 1; StorRpmbQueryWriteCounter = 2; StorRpmbAuthenticatedWrite = 3; StorRpmbAuthenticatedRead = 4; StorRpmbReadResultRequest = 5; StorRpmbAuthenticatedDeviceConfigWrite = 6; StorRpmbAuthenticatedDeviceConfigRead = 7; }
export type s__STORAGE_EVENT_NOTIFICATION = struct { Version: ulong; Size: ulong; Events: uint64; }
export type e__STORAGE_COUNTER_TYPE = enum { StorageCounterTypeUnknown; StorageCounterTypeTemperatureCelsius = 1; StorageCounterTypeTemperatureCelsiusMax = 2; StorageCounterTypeReadErrorsTotal = 3; StorageCounterTypeReadErrorsCorrected = 4; StorageCounterTypeReadErrorsUncorrected = 5; StorageCounterTypeWriteErrorsTotal = 6; StorageCounterTypeWriteErrorsCorrected = 7; StorageCounterTypeWriteErrorsUncorrected = 8; StorageCounterTypeManufactureDate = 9; StorageCounterTypeStartStopCycleCount = 10; StorageCounterTypeStartStopCycleCountMax = 11; StorageCounterTypeLoadUnloadCycleCount = 12; StorageCounterTypeLoadUnloadCycleCountMax = 13; StorageCounterTypeWearPercentage = 14; StorageCounterTypeWearPercentageWarning = 15; StorageCounterTypeWearPercentageMax = 16; StorageCounterTypePowerOnHours = 17; StorageCounterTypeReadLatency100NSMax = 18; StorageCounterTypeWriteLatency100NSMax = 19; StorageCounterTypeFlushLatency100NSMax = 20; StorageCounterTypeMax = 21; }
export type s__STORAGE_COUNTER = struct { Type: e__STORAGE_COUNTER_TYPE; Value: struct #union { ManufactureDate: struct { Week: ulong; Year: ulong; }; AsUlonglong: uint64; }; }
export type s__STORAGE_COUNTERS = struct { Version: ulong; Size: ulong; NumberOfCounters: ulong; Counters: [1; s__STORAGE_COUNTER]; }
export type s__STORAGE_HW_FIRMWARE_INFO_QUERY = struct { Version: ulong; Size: ulong; Flags: ulong; Reserved: ulong; }
export type s__STORAGE_HW_FIRMWARE_SLOT_INFO = struct { Version: ulong; Size: ulong; SlotNumber: uint8; #bits(1) ReadOnly: uint8; #bits(7) Reserved0: uint8; Reserved1: [6; uint8]; Revision: [16; uint8]; }
export type s__STORAGE_HW_FIRMWARE_INFO = struct { Version: ulong; Size: ulong; #bits(1) SupportUpgrade: uint8; #bits(7) Reserved0: uint8; SlotCount: uint8; ActiveSlot: uint8; PendingActivateSlot: uint8; FirmwareShared: uint8; Reserved: [3; uint8]; ImagePayloadAlignment: ulong; ImagePayloadMaxSize: ulong; Slot: [1; s__STORAGE_HW_FIRMWARE_SLOT_INFO]; }
export type s__STORAGE_HW_FIRMWARE_DOWNLOAD = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: uint8; Reserved: [3; uint8]; Offset: uint64; BufferSize: uint64; ImageBuffer: [1; uint8]; }
export type s__STORAGE_HW_FIRMWARE_DOWNLOAD_V2 = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: uint8; Reserved: [3; uint8]; Offset: uint64; BufferSize: uint64; ImageSize: ulong; Reserved2: ulong; ImageBuffer: [1; uint8]; }
export type s__STORAGE_HW_FIRMWARE_ACTIVATE = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: uint8; Reserved0: [3; uint8]; }
export type s__STORAGE_PROTOCOL_COMMAND = struct { Version: ulong; Length: ulong; ProtocolType: e__STORAGE_PROTOCOL_TYPE; Flags: ulong; ReturnStatus: ulong; ErrorCode: ulong; CommandLength: ulong; ErrorInfoLength: ulong; DataToDeviceTransferLength: ulong; DataFromDeviceTransferLength: ulong; TimeOutValue: ulong; ErrorInfoOffset: ulong; DataToDeviceBufferOffset: ulong; DataFromDeviceBufferOffset: ulong; CommandSpecific: ulong; Reserved0: ulong; FixedProtocolReturnData: ulong; Reserved1: [3; ulong]; Command: [1; uint8]; }
export type e__STORAGE_ATTRIBUTE_MGMT_ACTION = enum { StorAttributeMgmt_ClearAttribute; StorAttributeMgmt_SetAttribute = 1; StorAttributeMgmt_ResetAttribute = 2; }
export type s__STORAGE_ATTRIBUTE_MGMT = struct { Version: ulong; Size: ulong; Action: e__STORAGE_ATTRIBUTE_MGMT_ACTION; Attribute: ulong; }
export type s__SCM_PD_HEALTH_NOTIFICATION_DATA = struct { DeviceGuid: s__GUID; }
export type s__SCM_LOGICAL_DEVICE_INSTANCE = struct { Version: ulong; Size: ulong; DeviceGuid: s__GUID; SymbolicLink: [256; ushort]; }
export type s__SCM_LOGICAL_DEVICES = struct { Version: ulong; Size: ulong; DeviceCount: ulong; Devices: [1; s__SCM_LOGICAL_DEVICE_INSTANCE]; }
export type s__SCM_PHYSICAL_DEVICE_INSTANCE = struct { Version: ulong; Size: ulong; NfitHandle: ulong; SymbolicLink: [256; ushort]; }
export type s__SCM_PHYSICAL_DEVICES = struct { Version: ulong; Size: ulong; DeviceCount: ulong; Devices: [1; s__SCM_PHYSICAL_DEVICE_INSTANCE]; }
export type e__SCM_REGION_FLAG = enum { ScmRegionFlagNone; ScmRegionFlagLabel = 1; }
export type s__SCM_REGION = struct { Version: ulong; Size: ulong; Flags: ulong; NfitHandle: ulong; LogicalDeviceGuid: s__GUID; AddressRangeType: s__GUID; AssociatedId: ulong; Length: uint64; StartingDPA: uint64; BaseSPA: uint64; SPAOffset: uint64; RegionOffset: uint64; }
export type s__SCM_REGIONS = struct { Version: ulong; Size: ulong; RegionCount: ulong; Regions: [1; s__SCM_REGION]; }
export type e__SCM_BUS_QUERY_TYPE = enum { ScmBusQuery_Descriptor; ScmBusQuery_IsSupported = 1; ScmBusQuery_Max = 2; }
export type e__SCM_BUS_SET_TYPE = enum { ScmBusSet_Descriptor; ScmBusSet_IsSupported = 1; ScmBusSet_Max = 2; }
export type e__SCM_BUS_PROPERTY_ID = enum { ScmBusProperty_RuntimeFwActivationInfo; ScmBusProperty_DedicatedMemoryInfo = 1; ScmBusProperty_DedicatedMemoryState = 2; ScmBusProperty_Max = 3; }
export type s__SCM_BUS_PROPERTY_QUERY = struct { Version: ulong; Size: ulong; PropertyId: e__SCM_BUS_PROPERTY_ID; QueryType: e__SCM_BUS_QUERY_TYPE; AdditionalParameters: [1; uint8]; }
export type e__SCM_BUS_FIRMWARE_ACTIVATION_STATE = enum { ScmBusFirmwareActivationState_Idle; ScmBusFirmwareActivationState_Armed = 1; ScmBusFirmwareActivationState_Busy = 2; }
export type s__SCM_BUS_RUNTIME_FW_ACTIVATION_INFO = struct { Version: ulong; Size: ulong; RuntimeFwActivationSupported: uint8; FirmwareActivationState: e__SCM_BUS_FIRMWARE_ACTIVATION_STATE; FirmwareActivationCapability: struct { #bits(1) FwManagedIoQuiesceFwActivationSupported: ulong; #bits(1) OsManagedIoQuiesceFwActivationSupported: ulong; #bits(1) WarmResetBasedFwActivationSupported: ulong; #bits(29) Reserved: ulong; }; EstimatedFirmwareActivationTimeInUSecs: uint64; EstimatedProcessorAccessQuiesceTimeInUSecs: uint64; EstimatedIOAccessQuiesceTimeInUSecs: uint64; PlatformSupportedMaxIOAccessQuiesceTimeInUSecs: uint64; }
export type s__SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO = struct { DeviceGuid: s__GUID; DeviceNumber: ulong; Flags: struct { #bits(1) ForcedByRegistry: ulong; #bits(1) Initialized: ulong; #bits(30) Reserved: ulong; }; DeviceSize: uint64; }
export type s__SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO = struct { Version: ulong; Size: ulong; DeviceCount: ulong; Devices: [1; s__SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO]; }
export type s__SCM_BUS_PROPERTY_SET = struct { Version: ulong; Size: ulong; PropertyId: e__SCM_BUS_PROPERTY_ID; SetType: e__SCM_BUS_SET_TYPE; AdditionalParameters: [1; uint8]; }
export type s__SCM_BUS_DEDICATED_MEMORY_STATE = struct { ActivateState: uint8; }
export type s__SCM_INTERLEAVED_PD_INFO = struct { DeviceHandle: ulong; DeviceGuid: s__GUID; }
export type s__SCM_LD_INTERLEAVE_SET_INFO = struct { Version: ulong; Size: ulong; InterleaveSetSize: ulong; InterleaveSet: [1; s__SCM_INTERLEAVED_PD_INFO]; }
export type e__SCM_PD_QUERY_TYPE = enum { ScmPhysicalDeviceQuery_Descriptor; ScmPhysicalDeviceQuery_IsSupported = 1; ScmPhysicalDeviceQuery_Max = 2; }
export type e__SCM_PD_SET_TYPE = enum { ScmPhysicalDeviceSet_Descriptor; ScmPhysicalDeviceSet_IsSupported = 1; ScmPhysicalDeviceSet_Max = 2; }
export type e__SCM_PD_PROPERTY_ID = enum { ScmPhysicalDeviceProperty_DeviceInfo; ScmPhysicalDeviceProperty_ManagementStatus = 1; ScmPhysicalDeviceProperty_FirmwareInfo = 2; ScmPhysicalDeviceProperty_LocationString = 3; ScmPhysicalDeviceProperty_DeviceSpecificInfo = 4; ScmPhysicalDeviceProperty_DeviceHandle = 5; ScmPhysicalDeviceProperty_FruIdString = 6; ScmPhysicalDeviceProperty_RuntimeFwActivationInfo = 7; ScmPhysicalDeviceProperty_RuntimeFwActivationArmState = 8; ScmPhysicalDeviceProperty_Max = 9; }
export type s__SCM_PD_PROPERTY_QUERY = struct { Version: ulong; Size: ulong; PropertyId: e__SCM_PD_PROPERTY_ID; QueryType: e__SCM_PD_QUERY_TYPE; AdditionalParameters: [1; uint8]; }
export type s__SCM_PD_PROPERTY_SET = struct { Version: ulong; Size: ulong; PropertyId: e__SCM_PD_PROPERTY_ID; SetType: e__SCM_PD_SET_TYPE; AdditionalParameters: [1; uint8]; }
export type s__SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE = struct { ArmState: uint8; }
export type s__SCM_PD_DESCRIPTOR_HEADER = struct { Version: ulong; Size: ulong; }
export type s__SCM_PD_DEVICE_HANDLE = struct { Version: ulong; Size: ulong; DeviceGuid: s__GUID; DeviceHandle: ulong; }
export type s__SCM_PD_DEVICE_INFO = struct { Version: ulong; Size: ulong; DeviceGuid: s__GUID; UnsafeShutdownCount: ulong; PersistentMemorySizeInBytes: uint64; VolatileMemorySizeInBytes: uint64; TotalMemorySizeInBytes: uint64; SlotNumber: ulong; DeviceHandle: ulong; PhysicalId: ushort; NumberOfFormatInterfaceCodes: uint8; FormatInterfaceCodes: [8; ushort]; VendorId: ulong; ProductId: ulong; SubsystemDeviceId: ulong; SubsystemVendorId: ulong; ManufacturingLocation: uint8; ManufacturingWeek: uint8; ManufacturingYear: uint8; SerialNumber4Byte: ulong; SerialNumberLengthInChars: ulong; SerialNumber: [1; char]; }
export type s__SCM_PD_DEVICE_SPECIFIC_PROPERTY = struct { Name: [128; ushort]; Value: int64; }
export type s__SCM_PD_DEVICE_SPECIFIC_INFO = struct { Version: ulong; Size: ulong; NumberOfProperties: ulong; DeviceSpecificProperties: [1; s__SCM_PD_DEVICE_SPECIFIC_PROPERTY]; }
export type s__SCM_PD_FIRMWARE_SLOT_INFO = struct { Version: ulong; Size: ulong; SlotNumber: uint8; #bits(1) ReadOnly: uint8; #bits(7) Reserved0: uint8; Reserved1: [6; uint8]; Revision: [32; uint8]; }
export type s__SCM_PD_FIRMWARE_INFO = struct { Version: ulong; Size: ulong; ActiveSlot: uint8; NextActiveSlot: uint8; SlotCount: uint8; Slots: [1; s__SCM_PD_FIRMWARE_SLOT_INFO]; }
export type e__SCM_PD_HEALTH_STATUS = enum { ScmPhysicalDeviceHealth_Unknown; ScmPhysicalDeviceHealth_Unhealthy = 1; ScmPhysicalDeviceHealth_Warning = 2; ScmPhysicalDeviceHealth_Healthy = 3; ScmPhysicalDeviceHealth_Max = 4; }
export type e__SCM_PD_OPERATIONAL_STATUS = enum { ScmPhysicalDeviceOpStatus_Unknown; ScmPhysicalDeviceOpStatus_Ok = 1; ScmPhysicalDeviceOpStatus_PredictingFailure = 2; ScmPhysicalDeviceOpStatus_InService = 3; ScmPhysicalDeviceOpStatus_HardwareError = 4; ScmPhysicalDeviceOpStatus_NotUsable = 5; ScmPhysicalDeviceOpStatus_TransientError = 6; ScmPhysicalDeviceOpStatus_Missing = 7; ScmPhysicalDeviceOpStatus_Max = 8; }
export type e__SCM_PD_OPERATIONAL_STATUS_REASON = enum { ScmPhysicalDeviceOpReason_Unknown; ScmPhysicalDeviceOpReason_Media = 1; ScmPhysicalDeviceOpReason_ThresholdExceeded = 2; ScmPhysicalDeviceOpReason_LostData = 3; ScmPhysicalDeviceOpReason_EnergySource = 4; ScmPhysicalDeviceOpReason_Configuration = 5; ScmPhysicalDeviceOpReason_DeviceController = 6; ScmPhysicalDeviceOpReason_MediaController = 7; ScmPhysicalDeviceOpReason_Component = 8; ScmPhysicalDeviceOpReason_BackgroundOperation = 9; ScmPhysicalDeviceOpReason_InvalidFirmware = 10; ScmPhysicalDeviceOpReason_HealthCheck = 11; ScmPhysicalDeviceOpReason_LostDataPersistence = 12; ScmPhysicalDeviceOpReason_DisabledByPlatform = 13; ScmPhysicalDeviceOpReason_PermanentError = 14; ScmPhysicalDeviceOpReason_LostWritePersistence = 15; ScmPhysicalDeviceOpReason_FatalError = 16; ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = 17; ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = 18; ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = 19; ScmPhysicalDeviceOpReason_PerformanceDegradation = 20; ScmPhysicalDeviceOpReason_ExcessiveTemperature = 21; ScmPhysicalDeviceOpReason_InternalFailure = 22; ScmPhysicalDeviceOpReason_Max = 23; }
export type s__SCM_PD_MANAGEMENT_STATUS = struct { Version: ulong; Size: ulong; Health: e__SCM_PD_HEALTH_STATUS; NumberOfOperationalStatus: ulong; NumberOfAdditionalReasons: ulong; OperationalStatus: [16; e__SCM_PD_OPERATIONAL_STATUS]; AdditionalReasons: [1; e__SCM_PD_OPERATIONAL_STATUS_REASON]; }
export type s__SCM_PD_LOCATION_STRING = struct { Version: ulong; Size: ulong; Location: [1; ushort]; }
export type s__SCM_PD_FRU_ID_STRING = struct { Version: ulong; Size: ulong; IdentifierSize: ulong; Identifier: [1; uint8]; }
export type s__SCM_PD_FIRMWARE_DOWNLOAD = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: uint8; Reserved: [3; uint8]; Offset: uint64; FirmwareImageSizeInBytes: ulong; FirmwareImage: [1; uint8]; }
export type s__SCM_PD_FIRMWARE_ACTIVATE = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: uint8; }
export type e__SCM_PD_LAST_FW_ACTIVATION_STATUS = enum { ScmPdLastFwActivationStatus_None; ScmPdLastFwActivationStatus_Success = 1; ScmPdLastFwActivationStatus_FwNotFound = 2; ScmPdLastFwActivationStatus_ColdRebootRequired = 3; ScmPdLastFwActivaitonStatus_ActivationInProgress = 4; ScmPdLastFwActivaitonStatus_Retry = 5; ScmPdLastFwActivaitonStatus_FwUnsupported = 6; ScmPdLastFwActivaitonStatus_UnknownError = 7; }
export type e__SCM_PD_FIRMWARE_ACTIVATION_STATE = enum { ScmPdFirmwareActivationState_Idle; ScmPdFirmwareActivationState_Armed = 1; ScmPdFirmwareActivationState_Busy = 2; }
export type s__SCM_PD_RUNTIME_FW_ACTIVATION_INFO = struct { Version: ulong; Size: ulong; LastFirmwareActivationStatus: e__SCM_PD_LAST_FW_ACTIVATION_STATUS; FirmwareActivationState: e__SCM_PD_FIRMWARE_ACTIVATION_STATE; }
export type s__SCM_PD_PASSTHROUGH_INPUT = struct { Version: ulong; Size: ulong; ProtocolGuid: s__GUID; DataSize: ulong; Data: [1; uint8]; }
export type s__SCM_PD_PASSTHROUGH_OUTPUT = struct { Version: ulong; Size: ulong; ProtocolGuid: s__GUID; DataSize: ulong; Data: [1; uint8]; }
export type s__SCM_PD_PASSTHROUGH_INVDIMM_INPUT = struct { Opcode: ulong; OpcodeParametersLength: ulong; OpcodeParameters: [1; uint8]; }
export type s__SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = struct { GeneralStatus: ushort; ExtendedStatus: ushort; OutputDataLength: ulong; OutputData: [1; uint8]; }
export type s__SCM_PD_REINITIALIZE_MEDIA_INPUT = struct { Version: ulong; Size: ulong; Options: struct { #bits(1) Overwrite: ulong; }; }
export type e__SCM_PD_MEDIA_REINITIALIZATION_STATUS = enum { ScmPhysicalDeviceReinit_Success; ScmPhysicalDeviceReinit_RebootNeeded = 1; ScmPhysicalDeviceReinit_ColdBootNeeded = 2; ScmPhysicalDeviceReinit_Max = 3; }
export type s__SCM_PD_REINITIALIZE_MEDIA_OUTPUT = struct { Version: ulong; Size: ulong; Status: e__SCM_PD_MEDIA_REINITIALIZATION_STATUS; }
export type e__MEDIA_TYPE = enum { Unknown; F5_1Pt2_512 = 1; F3_1Pt44_512 = 2; F3_2Pt88_512 = 3; F3_20Pt8_512 = 4; F3_720_512 = 5; F5_360_512 = 6; F5_320_512 = 7; F5_320_1024 = 8; F5_180_512 = 9; F5_160_512 = 10; RemovableMedia = 11; FixedMedia = 12; F3_120M_512 = 13; F3_640_512 = 14; F5_640_512 = 15; F5_720_512 = 16; F3_1Pt2_512 = 17; F3_1Pt23_1024 = 18; F5_1Pt23_1024 = 19; F3_128Mb_512 = 20; F3_230Mb_512 = 21; F8_256_128 = 22; F3_200Mb_512 = 23; F3_240M_512 = 24; F3_32M_512 = 25; }
export type s__FORMAT_PARAMETERS = struct { MediaType: e__MEDIA_TYPE; StartCylinderNumber: ulong; EndCylinderNumber: ulong; StartHeadNumber: ulong; EndHeadNumber: ulong; }
export type s__FORMAT_EX_PARAMETERS = struct { MediaType: e__MEDIA_TYPE; StartCylinderNumber: ulong; EndCylinderNumber: ulong; StartHeadNumber: ulong; EndHeadNumber: ulong; FormatGapLength: ushort; SectorsPerTrack: ushort; SectorNumber: [1; ushort]; }
export type s__DISK_GEOMETRY = struct { Cylinders: u__LARGE_INTEGER; MediaType: e__MEDIA_TYPE; TracksPerCylinder: ulong; SectorsPerTrack: ulong; BytesPerSector: ulong; }
export type s__PARTITION_INFORMATION = struct { StartingOffset: u__LARGE_INTEGER; PartitionLength: u__LARGE_INTEGER; HiddenSectors: ulong; PartitionNumber: ulong; PartitionType: uint8; BootIndicator: uint8; RecognizedPartition: uint8; RewritePartition: uint8; }
export type s__SET_PARTITION_INFORMATION = struct { PartitionType: uint8; }
export type s__DRIVE_LAYOUT_INFORMATION = struct { PartitionCount: ulong; Signature: ulong; PartitionEntry: [1; s__PARTITION_INFORMATION]; }
export type s__VERIFY_INFORMATION = struct { StartingOffset: u__LARGE_INTEGER; Length: ulong; }
export type s__REASSIGN_BLOCKS = struct { Reserved: ushort; Count: ushort; BlockNumber: [1; ulong]; }
export type s__REASSIGN_BLOCKS_EX = struct { Reserved: ushort; Count: ushort; BlockNumber: [1; u__LARGE_INTEGER]; }
export type e__PARTITION_STYLE = enum { PARTITION_STYLE_MBR; PARTITION_STYLE_GPT = 1; PARTITION_STYLE_RAW = 2; }
export type s__PARTITION_INFORMATION_GPT = struct { PartitionType: s__GUID; PartitionId: s__GUID; Attributes: uint64; Name: [36; ushort]; }
export type s__PARTITION_INFORMATION_MBR = struct { PartitionType: uint8; BootIndicator: uint8; RecognizedPartition: uint8; HiddenSectors: ulong; PartitionId: s__GUID; }
export type s__SET_PARTITION_INFORMATION_EX = struct { PartitionStyle: e__PARTITION_STYLE; struct #union { Mbr: s__SET_PARTITION_INFORMATION; Gpt: s__PARTITION_INFORMATION_GPT; }; }
export type s__CREATE_DISK_GPT = struct { DiskId: s__GUID; MaxPartitionCount: ulong; }
export type s__CREATE_DISK_MBR = struct { Signature: ulong; }
export type s__CREATE_DISK = struct { PartitionStyle: e__PARTITION_STYLE; struct #union { Mbr: s__CREATE_DISK_MBR; Gpt: s__CREATE_DISK_GPT; }; }
export type s__GET_LENGTH_INFORMATION = struct { Length: u__LARGE_INTEGER; }
export type s__PARTITION_INFORMATION_EX = struct { PartitionStyle: e__PARTITION_STYLE; StartingOffset: u__LARGE_INTEGER; PartitionLength: u__LARGE_INTEGER; PartitionNumber: ulong; RewritePartition: uint8; IsServicePartition: uint8; struct #union { Mbr: s__PARTITION_INFORMATION_MBR; Gpt: s__PARTITION_INFORMATION_GPT; }; }
export type s__DRIVE_LAYOUT_INFORMATION_GPT = struct { DiskId: s__GUID; StartingUsableOffset: u__LARGE_INTEGER; UsableLength: u__LARGE_INTEGER; MaxPartitionCount: ulong; }
export type s__DRIVE_LAYOUT_INFORMATION_MBR = struct { Signature: ulong; CheckSum: ulong; }
export type s__DRIVE_LAYOUT_INFORMATION_EX = struct { PartitionStyle: ulong; PartitionCount: ulong; struct #union { Mbr: s__DRIVE_LAYOUT_INFORMATION_MBR; Gpt: s__DRIVE_LAYOUT_INFORMATION_GPT; }; PartitionEntry: [1; s__PARTITION_INFORMATION_EX]; }
export type e__DETECTION_TYPE = enum { DetectNone; DetectInt13 = 1; DetectExInt13 = 2; }
export type s__DISK_INT13_INFO = struct { DriveSelect: ushort; MaxCylinders: ulong; SectorsPerTrack: ushort; MaxHeads: ushort; NumberDrives: ushort; }
export type s__DISK_EX_INT13_INFO = struct { ExBufferSize: ushort; ExFlags: ushort; ExCylinders: ulong; ExHeads: ulong; ExSectorsPerTrack: ulong; ExSectorsPerDrive: uint64; ExSectorSize: ushort; ExReserved: ushort; }
export type s__DISK_DETECTION_INFO = struct { SizeOfDetectInfo: ulong; DetectionType: e__DETECTION_TYPE; struct #union { struct { Int13: s__DISK_INT13_INFO; ExInt13: s__DISK_EX_INT13_INFO; }; }; }
export type s__DISK_PARTITION_INFO = struct { SizeOfPartitionInfo: ulong; PartitionStyle: e__PARTITION_STYLE; struct #union { Mbr: struct { Signature: ulong; CheckSum: ulong; }; Gpt: struct { DiskId: s__GUID; }; }; }
export type s__DISK_GEOMETRY_EX = struct { Geometry: s__DISK_GEOMETRY; DiskSize: u__LARGE_INTEGER; Data: [1; uint8]; }
export type s__DISK_CONTROLLER_NUMBER = struct { ControllerNumber: ulong; DiskNumber: ulong; }
export type e_DISK_CACHE_RETENTION_PRIORITY = enum { EqualPriority; KeepPrefetchedData = 1; KeepReadData = 2; }
export type s__DISK_CACHE_INFORMATION = struct { ParametersSavable: uint8; ReadCacheEnabled: uint8; WriteCacheEnabled: uint8; ReadRetentionPriority: e_DISK_CACHE_RETENTION_PRIORITY; WriteRetentionPriority: e_DISK_CACHE_RETENTION_PRIORITY; DisablePrefetchTransferLength: ushort; PrefetchScalar: uint8; struct #union { ScalarPrefetch: struct { Minimum: ushort; Maximum: ushort; MaximumBlocks: ushort; }; BlockPrefetch: struct { Minimum: ushort; Maximum: ushort; }; }; }
export type s__DISK_GROW_PARTITION = struct { PartitionNumber: ulong; BytesToGrow: u__LARGE_INTEGER; }
export type s__HISTOGRAM_BUCKET = struct { Reads: ulong; Writes: ulong; }
export type s__DISK_HISTOGRAM = struct { DiskSize: u__LARGE_INTEGER; Start: u__LARGE_INTEGER; End: u__LARGE_INTEGER; Average: u__LARGE_INTEGER; AverageRead: u__LARGE_INTEGER; AverageWrite: u__LARGE_INTEGER; Granularity: ulong; Size: ulong; ReadCount: ulong; WriteCount: ulong; Histogram: *s__HISTOGRAM_BUCKET; }
export type s__DISK_PERFORMANCE = struct { BytesRead: u__LARGE_INTEGER; BytesWritten: u__LARGE_INTEGER; ReadTime: u__LARGE_INTEGER; WriteTime: u__LARGE_INTEGER; IdleTime: u__LARGE_INTEGER; ReadCount: ulong; WriteCount: ulong; QueueDepth: ulong; SplitCount: ulong; QueryTime: u__LARGE_INTEGER; StorageDeviceNumber: ulong; StorageManagerName: [8; ushort]; }
export type s__DISK_RECORD = struct { ByteOffset: u__LARGE_INTEGER; StartTime: u__LARGE_INTEGER; EndTime: u__LARGE_INTEGER; VirtualAddress: *; NumberOfBytes: ulong; DeviceNumber: uint8; ReadRequest: uint8; }
export type s__DISK_LOGGING = struct { Function: uint8; BufferAddress: *; BufferSize: ulong; }
export type e__BIN_TYPES = enum { RequestSize; RequestLocation = 1; }
export type s__BIN_RANGE = struct { StartValue: u__LARGE_INTEGER; Length: u__LARGE_INTEGER; }
export type s__PERF_BIN = struct { NumberOfBins: ulong; TypeOfBin: ulong; BinsRanges: [1; s__BIN_RANGE]; }
export type s__BIN_COUNT = struct { BinRange: s__BIN_RANGE; BinCount: ulong; }
export type s__BIN_RESULTS = struct { NumberOfBins: ulong; BinCounts: [1; s__BIN_COUNT]; }
export type s__GETVERSIONINPARAMS = struct { bVersion: uint8; bRevision: uint8; bReserved: uint8; bIDEDeviceMap: uint8; fCapabilities: ulong; dwReserved: [4; ulong]; }
export type s__IDEREGS = struct { bFeaturesReg: uint8; bSectorCountReg: uint8; bSectorNumberReg: uint8; bCylLowReg: uint8; bCylHighReg: uint8; bDriveHeadReg: uint8; bCommandReg: uint8; bReserved: uint8; }
export type s__SENDCMDINPARAMS = struct { cBufferSize: ulong; irDriveRegs: s__IDEREGS; bDriveNumber: uint8; bReserved: [3; uint8]; dwReserved: [4; ulong]; bBuffer: [1; uint8]; }
export type s__DRIVERSTATUS = struct { bDriverError: uint8; bIDEError: uint8; bReserved: [2; uint8]; dwReserved: [2; ulong]; }
export type s__SENDCMDOUTPARAMS = struct { cBufferSize: ulong; DriverStatus: s__DRIVERSTATUS; bBuffer: [1; uint8]; }
export type s__GET_DISK_ATTRIBUTES = struct { Version: ulong; Reserved1: ulong; Attributes: uint64; }
export type s__SET_DISK_ATTRIBUTES = struct { Version: ulong; Persist: uint8; Reserved1: [3; uint8]; Attributes: uint64; AttributesMask: uint64; Reserved2: [4; ulong]; }
export type e__ELEMENT_TYPE = enum { AllElements; ChangerTransport = 1; ChangerSlot = 2; ChangerIEPort = 3; ChangerDrive = 4; ChangerDoor = 5; ChangerKeypad = 6; ChangerMaxElement = 7; }
export type s__CHANGER_ELEMENT = struct { ElementType: e__ELEMENT_TYPE; ElementAddress: ulong; }
export type s__CHANGER_ELEMENT_LIST = struct { Element: s__CHANGER_ELEMENT; NumberOfElements: ulong; }
export type s__GET_CHANGER_PARAMETERS = struct { Size: ulong; NumberTransportElements: ushort; NumberStorageElements: ushort; NumberCleanerSlots: ushort; NumberIEElements: ushort; NumberDataTransferElements: ushort; NumberOfDoors: ushort; FirstSlotNumber: ushort; FirstDriveNumber: ushort; FirstTransportNumber: ushort; FirstIEPortNumber: ushort; FirstCleanerSlotAddress: ushort; MagazineSize: ushort; DriveCleanTimeout: ulong; Features0: ulong; Features1: ulong; MoveFromTransport: uint8; MoveFromSlot: uint8; MoveFromIePort: uint8; MoveFromDrive: uint8; ExchangeFromTransport: uint8; ExchangeFromSlot: uint8; ExchangeFromIePort: uint8; ExchangeFromDrive: uint8; LockUnlockCapabilities: uint8; PositionCapabilities: uint8; Reserved1: [2; uint8]; Reserved2: [2; ulong]; }
export type s__CHANGER_PRODUCT_DATA = struct { VendorId: [8; uint8]; ProductId: [16; uint8]; Revision: [4; uint8]; SerialNumber: [32; uint8]; DeviceType: uint8; }
export type s__CHANGER_SET_ACCESS = struct { Element: s__CHANGER_ELEMENT; Control: ulong; }
export type s__CHANGER_READ_ELEMENT_STATUS = struct { ElementList: s__CHANGER_ELEMENT_LIST; VolumeTagInfo: uint8; }
export type s__CHANGER_ELEMENT_STATUS = struct { Element: s__CHANGER_ELEMENT; SrcElementAddress: s__CHANGER_ELEMENT; Flags: ulong; ExceptionCode: ulong; TargetId: uint8; Lun: uint8; Reserved: ushort; PrimaryVolumeID: [36; uint8]; AlternateVolumeID: [36; uint8]; }
export type s__CHANGER_ELEMENT_STATUS_EX = struct { Element: s__CHANGER_ELEMENT; SrcElementAddress: s__CHANGER_ELEMENT; Flags: ulong; ExceptionCode: ulong; TargetId: uint8; Lun: uint8; Reserved: ushort; PrimaryVolumeID: [36; uint8]; AlternateVolumeID: [36; uint8]; VendorIdentification: [8; uint8]; ProductIdentification: [16; uint8]; SerialNumber: [32; uint8]; }
export type s__CHANGER_INITIALIZE_ELEMENT_STATUS = struct { ElementList: s__CHANGER_ELEMENT_LIST; BarCodeScan: uint8; }
export type s__CHANGER_SET_POSITION = struct { Transport: s__CHANGER_ELEMENT; Destination: s__CHANGER_ELEMENT; Flip: uint8; }
export type s__CHANGER_EXCHANGE_MEDIUM = struct { Transport: s__CHANGER_ELEMENT; Source: s__CHANGER_ELEMENT; Destination1: s__CHANGER_ELEMENT; Destination2: s__CHANGER_ELEMENT; Flip1: uint8; Flip2: uint8; }
export type s__CHANGER_MOVE_MEDIUM = struct { Transport: s__CHANGER_ELEMENT; Source: s__CHANGER_ELEMENT; Destination: s__CHANGER_ELEMENT; Flip: uint8; }
export type s__CHANGER_SEND_VOLUME_TAG_INFORMATION = struct { StartingElement: s__CHANGER_ELEMENT; ActionCode: ulong; VolumeIDTemplate: [40; uint8]; }
export type s__READ_ELEMENT_ADDRESS_INFO = struct { NumberOfElements: ulong; ElementStatus: [1; s__CHANGER_ELEMENT_STATUS]; }
export type e__CHANGER_DEVICE_PROBLEM_TYPE = enum { DeviceProblemNone; DeviceProblemHardware = 1; DeviceProblemCHMError = 2; DeviceProblemDoorOpen = 3; DeviceProblemCalibrationError = 4; DeviceProblemTargetFailure = 5; DeviceProblemCHMMoveError = 6; DeviceProblemCHMZeroError = 7; DeviceProblemCartridgeInsertError = 8; DeviceProblemPositionError = 9; DeviceProblemSensorError = 10; DeviceProblemCartridgeEjectError = 11; DeviceProblemGripperError = 12; DeviceProblemDriveError = 13; }
export type s__PATHNAME_BUFFER = struct { PathNameLength: ulong; Name: [1; ushort]; }
export type s__FSCTL_QUERY_FAT_BPB_BUFFER = struct { First0x24BytesOfBootSector: [36; uint8]; }
export type s_NTFS_VOLUME_DATA_BUFFER = struct { VolumeSerialNumber: u__LARGE_INTEGER; NumberSectors: u__LARGE_INTEGER; TotalClusters: u__LARGE_INTEGER; FreeClusters: u__LARGE_INTEGER; TotalReserved: u__LARGE_INTEGER; BytesPerSector: ulong; BytesPerCluster: ulong; BytesPerFileRecordSegment: ulong; ClustersPerFileRecordSegment: ulong; MftValidDataLength: u__LARGE_INTEGER; MftStartLcn: u__LARGE_INTEGER; Mft2StartLcn: u__LARGE_INTEGER; MftZoneStart: u__LARGE_INTEGER; MftZoneEnd: u__LARGE_INTEGER; }
export type NTFS_VOLUME_DATA_BUFFER
export type s_NTFS_EXTENDED_VOLUME_DATA = struct { ByteCount: ulong; MajorVersion: ushort; MinorVersion: ushort; BytesPerPhysicalSector: ulong; LfsMajorVersion: ushort; LfsMinorVersion: ushort; MaxDeviceTrimExtentCount: ulong; MaxDeviceTrimByteCount: ulong; MaxVolumeTrimExtentCount: ulong; MaxVolumeTrimByteCount: ulong; }
export type NTFS_EXTENDED_VOLUME_DATA
export type s_REFS_VOLUME_DATA_BUFFER = struct { ByteCount: ulong; MajorVersion: ulong; MinorVersion: ulong; BytesPerPhysicalSector: ulong; VolumeSerialNumber: u__LARGE_INTEGER; NumberSectors: u__LARGE_INTEGER; TotalClusters: u__LARGE_INTEGER; FreeClusters: u__LARGE_INTEGER; TotalReserved: u__LARGE_INTEGER; BytesPerSector: ulong; BytesPerCluster: ulong; MaximumSizeOfResidentFile: u__LARGE_INTEGER; FastTierDataFillRatio: ushort; SlowTierDataFillRatio: ushort; DestagesFastTierToSlowTierRate: ulong; Reserved: [9; u__LARGE_INTEGER]; }
export type REFS_VOLUME_DATA_BUFFER
export type s_STARTING_LCN_INPUT_BUFFER = struct { StartingLcn: u__LARGE_INTEGER; }
export type STARTING_LCN_INPUT_BUFFER
export type s_STARTING_LCN_INPUT_BUFFER_EX = struct { StartingLcn: u__LARGE_INTEGER; Flags: ulong; }
export type STARTING_LCN_INPUT_BUFFER_EX
export type s_VOLUME_BITMAP_BUFFER = struct { StartingLcn: u__LARGE_INTEGER; BitmapSize: u__LARGE_INTEGER; Buffer: [1; uint8]; }
export type VOLUME_BITMAP_BUFFER
export type s_STARTING_VCN_INPUT_BUFFER = struct { StartingVcn: u__LARGE_INTEGER; }
export type STARTING_VCN_INPUT_BUFFER
export type s_RETRIEVAL_POINTERS_BUFFER = struct { ExtentCount: ulong; StartingVcn: u__LARGE_INTEGER; struct { NextVcn: u__LARGE_INTEGER; Lcn: u__LARGE_INTEGER; }; Extents: [1; struct { NextVcn: u__LARGE_INTEGER; Lcn: u__LARGE_INTEGER; }]; }
export type s_RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = struct { ExtentCount: ulong; StartingVcn: u__LARGE_INTEGER; struct { NextVcn: u__LARGE_INTEGER; Lcn: u__LARGE_INTEGER; ReferenceCount: ulong; }; Extents: [1; struct { NextVcn: u__LARGE_INTEGER; Lcn: u__LARGE_INTEGER; ReferenceCount: ulong; }]; }
export type s_RETRIEVAL_POINTER_COUNT = struct { ExtentCount: ulong; }
export type s_NTFS_FILE_RECORD_INPUT_BUFFER = struct { FileReferenceNumber: u__LARGE_INTEGER; }
export type NTFS_FILE_RECORD_INPUT_BUFFER
export type s_NTFS_FILE_RECORD_OUTPUT_BUFFER = struct { FileReferenceNumber: u__LARGE_INTEGER; FileRecordLength: ulong; FileRecordBuffer: [1; uint8]; }
export type NTFS_FILE_RECORD_OUTPUT_BUFFER
export type s_MOVE_FILE_DATA = struct { FileHandle: *; StartingVcn: u__LARGE_INTEGER; StartingLcn: u__LARGE_INTEGER; ClusterCount: ulong; }
export type MOVE_FILE_DATA
export type s_MOVE_FILE_RECORD_DATA = struct { FileHandle: *; SourceFileRecord: u__LARGE_INTEGER; TargetFileRecord: u__LARGE_INTEGER; }
export type MOVE_FILE_RECORD_DATA
export type s__MOVE_FILE_DATA32 = struct { FileHandle: uint; StartingVcn: u__LARGE_INTEGER; StartingLcn: u__LARGE_INTEGER; ClusterCount: ulong; }
export type s_FIND_BY_SID_DATA = struct { Restart: ulong; Sid: s__SID; }
export type FIND_BY_SID_DATA
export type s_FIND_BY_SID_OUTPUT = struct { NextEntryOffset: ulong; FileIndex: ulong; FileNameLength: ulong; FileName: [1; ushort]; }
export type FIND_BY_SID_OUTPUT
export type s_MFT_ENUM_DATA_V0 = struct { StartFileReferenceNumber: uint64; LowUsn: int64; HighUsn: int64; }
export type MFT_ENUM_DATA_V0
export type s_MFT_ENUM_DATA_V1 = struct { StartFileReferenceNumber: uint64; LowUsn: int64; HighUsn: int64; MinMajorVersion: ushort; MaxMajorVersion: ushort; }
export type MFT_ENUM_DATA_V1
export type s_CREATE_USN_JOURNAL_DATA = struct { MaximumSize: uint64; AllocationDelta: uint64; }
export type CREATE_USN_JOURNAL_DATA
export type s_READ_FILE_USN_DATA = struct { MinMajorVersion: ushort; MaxMajorVersion: ushort; }
export type READ_FILE_USN_DATA
export type s_READ_USN_JOURNAL_DATA_V0 = struct { StartUsn: int64; ReasonMask: ulong; ReturnOnlyOnClose: ulong; Timeout: uint64; BytesToWaitFor: uint64; UsnJournalID: uint64; }
export type READ_USN_JOURNAL_DATA_V0
export type s_READ_USN_JOURNAL_DATA_V1 = struct { StartUsn: int64; ReasonMask: ulong; ReturnOnlyOnClose: ulong; Timeout: uint64; BytesToWaitFor: uint64; UsnJournalID: uint64; MinMajorVersion: ushort; MaxMajorVersion: ushort; }
export type READ_USN_JOURNAL_DATA_V1
export type s_USN_TRACK_MODIFIED_RANGES = struct { Flags: ulong; Unused: ulong; ChunkSize: uint64; FileSizeThreshold: int64; }
export type USN_TRACK_MODIFIED_RANGES
export type s_USN_RANGE_TRACK_OUTPUT = struct { Usn: int64; }
export type USN_RANGE_TRACK_OUTPUT
export type s_USN_RECORD_V2 = struct { RecordLength: ulong; MajorVersion: ushort; MinorVersion: ushort; FileReferenceNumber: uint64; ParentFileReferenceNumber: uint64; Usn: int64; TimeStamp: u__LARGE_INTEGER; Reason: ulong; SourceInfo: ulong; SecurityId: ulong; FileAttributes: ulong; FileNameLength: ushort; FileNameOffset: ushort; FileName: [1; ushort]; }
export type USN_RECORD_V2
export type s_USN_RECORD_V3 = struct { RecordLength: ulong; MajorVersion: ushort; MinorVersion: ushort; FileReferenceNumber: s__FILE_ID_128; ParentFileReferenceNumber: s__FILE_ID_128; Usn: int64; TimeStamp: u__LARGE_INTEGER; Reason: ulong; SourceInfo: ulong; SecurityId: ulong; FileAttributes: ulong; FileNameLength: ushort; FileNameOffset: ushort; FileName: [1; ushort]; }
export type USN_RECORD_V3
export type s_USN_RECORD_COMMON_HEADER = struct { RecordLength: ulong; MajorVersion: ushort; MinorVersion: ushort; }
export type USN_RECORD_COMMON_HEADER
export type s_USN_RECORD_EXTENT = struct { Offset: int64; Length: int64; }
export type USN_RECORD_EXTENT
export type s_USN_RECORD_V4 = struct { Header: s_USN_RECORD_COMMON_HEADER; FileReferenceNumber: s__FILE_ID_128; ParentFileReferenceNumber: s__FILE_ID_128; Usn: int64; Reason: ulong; SourceInfo: ulong; RemainingExtents: ulong; NumberOfExtents: ushort; ExtentSize: ushort; Extents: [1; s_USN_RECORD_EXTENT]; }
export type USN_RECORD_V4
export type u_USN_RECORD_UNION = struct #union { Header: s_USN_RECORD_COMMON_HEADER; V2: s_USN_RECORD_V2; V3: s_USN_RECORD_V3; V4: s_USN_RECORD_V4; }
export type USN_RECORD_UNION
export type s_USN_JOURNAL_DATA_V0 = struct { UsnJournalID: uint64; FirstUsn: int64; NextUsn: int64; LowestValidUsn: int64; MaxUsn: int64; MaximumSize: uint64; AllocationDelta: uint64; }
export type USN_JOURNAL_DATA_V0
export type s_USN_JOURNAL_DATA_V1 = struct { UsnJournalID: uint64; FirstUsn: int64; NextUsn: int64; LowestValidUsn: int64; MaxUsn: int64; MaximumSize: uint64; AllocationDelta: uint64; MinSupportedMajorVersion: ushort; MaxSupportedMajorVersion: ushort; }
export type USN_JOURNAL_DATA_V1
export type s_USN_JOURNAL_DATA_V2 = struct { UsnJournalID: uint64; FirstUsn: int64; NextUsn: int64; LowestValidUsn: int64; MaxUsn: int64; MaximumSize: uint64; AllocationDelta: uint64; MinSupportedMajorVersion: ushort; MaxSupportedMajorVersion: ushort; Flags: ulong; RangeTrackChunkSize: uint64; RangeTrackFileSizeThreshold: int64; }
export type USN_JOURNAL_DATA_V2
export type s_DELETE_USN_JOURNAL_DATA = struct { UsnJournalID: uint64; DeleteFlags: ulong; }
export type DELETE_USN_JOURNAL_DATA
export type s__MARK_HANDLE_INFO = struct { struct #union { UsnSourceInfo: ulong; CopyNumber: ulong; }; VolumeHandle: *; HandleInfo: ulong; }
export type s__MARK_HANDLE_INFO32 = struct { struct #union { UsnSourceInfo: ulong; CopyNumber: ulong; }; VolumeHandle: uint; HandleInfo: ulong; }
export type s_BULK_SECURITY_TEST_DATA = struct { DesiredAccess: ulong; SecurityIds: [1; ulong]; }
export type BULK_SECURITY_TEST_DATA
export type s__FILE_PREFETCH = struct { Type: ulong; Count: ulong; Prefetch: [1; uint64]; }
export type s__FILE_PREFETCH_EX = struct { Type: ulong; Count: ulong; Context: *; Prefetch: [1; uint64]; }
export type s__FILESYSTEM_STATISTICS = struct { FileSystemType: ushort; Version: ushort; SizeOfCompleteStructure: ulong; UserFileReads: ulong; UserFileReadBytes: ulong; UserDiskReads: ulong; UserFileWrites: ulong; UserFileWriteBytes: ulong; UserDiskWrites: ulong; MetaDataReads: ulong; MetaDataReadBytes: ulong; MetaDataDiskReads: ulong; MetaDataWrites: ulong; MetaDataWriteBytes: ulong; MetaDataDiskWrites: ulong; }
export type s__FAT_STATISTICS = struct { CreateHits: ulong; SuccessfulCreates: ulong; FailedCreates: ulong; NonCachedReads: ulong; NonCachedReadBytes: ulong; NonCachedWrites: ulong; NonCachedWriteBytes: ulong; NonCachedDiskReads: ulong; NonCachedDiskWrites: ulong; }
export type s__EXFAT_STATISTICS = struct { CreateHits: ulong; SuccessfulCreates: ulong; FailedCreates: ulong; NonCachedReads: ulong; NonCachedReadBytes: ulong; NonCachedWrites: ulong; NonCachedWriteBytes: ulong; NonCachedDiskReads: ulong; NonCachedDiskWrites: ulong; }
export type s__NTFS_STATISTICS = struct { LogFileFullExceptions: ulong; OtherExceptions: ulong; MftReads: ulong; MftReadBytes: ulong; MftWrites: ulong; MftWriteBytes: ulong; MftWritesUserLevel: struct { Write: ushort; Create: ushort; SetInfo: ushort; Flush: ushort; }; MftWritesFlushForLogFileFull: ushort; MftWritesLazyWriter: ushort; MftWritesUserRequest: ushort; Mft2Writes: ulong; Mft2WriteBytes: ulong; Mft2WritesUserLevel: struct { Write: ushort; Create: ushort; SetInfo: ushort; Flush: ushort; }; Mft2WritesFlushForLogFileFull: ushort; Mft2WritesLazyWriter: ushort; Mft2WritesUserRequest: ushort; RootIndexReads: ulong; RootIndexReadBytes: ulong; RootIndexWrites: ulong; RootIndexWriteBytes: ulong; BitmapReads: ulong; BitmapReadBytes: ulong; BitmapWrites: ulong; BitmapWriteBytes: ulong; BitmapWritesFlushForLogFileFull: ushort; BitmapWritesLazyWriter: ushort; BitmapWritesUserRequest: ushort; BitmapWritesUserLevel: struct { Write: ushort; Create: ushort; SetInfo: ushort; }; MftBitmapReads: ulong; MftBitmapReadBytes: ulong; MftBitmapWrites: ulong; MftBitmapWriteBytes: ulong; MftBitmapWritesFlushForLogFileFull: ushort; MftBitmapWritesLazyWriter: ushort; MftBitmapWritesUserRequest: ushort; MftBitmapWritesUserLevel: struct { Write: ushort; Create: ushort; SetInfo: ushort; Flush: ushort; }; UserIndexReads: ulong; UserIndexReadBytes: ulong; UserIndexWrites: ulong; UserIndexWriteBytes: ulong; LogFileReads: ulong; LogFileReadBytes: ulong; LogFileWrites: ulong; LogFileWriteBytes: ulong; Allocate: struct { Calls: ulong; Clusters: ulong; Hints: ulong; RunsReturned: ulong; HintsHonored: ulong; HintsClusters: ulong; Cache: ulong; CacheClusters: ulong; CacheMiss: ulong; CacheMissClusters: ulong; }; DiskResourcesExhausted: ulong; }
export type s__FILESYSTEM_STATISTICS_EX = struct { FileSystemType: ushort; Version: ushort; SizeOfCompleteStructure: ulong; UserFileReads: uint64; UserFileReadBytes: uint64; UserDiskReads: uint64; UserFileWrites: uint64; UserFileWriteBytes: uint64; UserDiskWrites: uint64; MetaDataReads: uint64; MetaDataReadBytes: uint64; MetaDataDiskReads: uint64; MetaDataWrites: uint64; MetaDataWriteBytes: uint64; MetaDataDiskWrites: uint64; }
export type s__NTFS_STATISTICS_EX = struct { LogFileFullExceptions: ulong; OtherExceptions: ulong; MftReads: uint64; MftReadBytes: uint64; MftWrites: uint64; MftWriteBytes: uint64; MftWritesUserLevel: struct { Write: ulong; Create: ulong; SetInfo: ulong; Flush: ulong; }; MftWritesFlushForLogFileFull: ulong; MftWritesLazyWriter: ulong; MftWritesUserRequest: ulong; Mft2Writes: uint64; Mft2WriteBytes: uint64; Mft2WritesUserLevel: struct { Write: ulong; Create: ulong; SetInfo: ulong; Flush: ulong; }; Mft2WritesFlushForLogFileFull: ulong; Mft2WritesLazyWriter: ulong; Mft2WritesUserRequest: ulong; RootIndexReads: uint64; RootIndexReadBytes: uint64; RootIndexWrites: uint64; RootIndexWriteBytes: uint64; BitmapReads: uint64; BitmapReadBytes: uint64; BitmapWrites: uint64; BitmapWriteBytes: uint64; BitmapWritesFlushForLogFileFull: ulong; BitmapWritesLazyWriter: ulong; BitmapWritesUserRequest: ulong; BitmapWritesUserLevel: struct { Write: ulong; Create: ulong; SetInfo: ulong; Flush: ulong; }; MftBitmapReads: uint64; MftBitmapReadBytes: uint64; MftBitmapWrites: uint64; MftBitmapWriteBytes: uint64; MftBitmapWritesFlushForLogFileFull: ulong; MftBitmapWritesLazyWriter: ulong; MftBitmapWritesUserRequest: ulong; MftBitmapWritesUserLevel: struct { Write: ulong; Create: ulong; SetInfo: ulong; Flush: ulong; }; UserIndexReads: uint64; UserIndexReadBytes: uint64; UserIndexWrites: uint64; UserIndexWriteBytes: uint64; LogFileReads: uint64; LogFileReadBytes: uint64; LogFileWrites: uint64; LogFileWriteBytes: uint64; Allocate: struct { Calls: ulong; RunsReturned: ulong; Hints: ulong; HintsHonored: ulong; Cache: ulong; CacheMiss: ulong; Clusters: uint64; HintsClusters: uint64; CacheClusters: uint64; CacheMissClusters: uint64; }; DiskResourcesExhausted: ulong; VolumeTrimCount: uint64; VolumeTrimTime: uint64; VolumeTrimByteCount: uint64; FileLevelTrimCount: uint64; FileLevelTrimTime: uint64; FileLevelTrimByteCount: uint64; VolumeTrimSkippedCount: uint64; VolumeTrimSkippedByteCount: uint64; NtfsFillStatInfoFromMftRecordCalledCount: uint64; NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount: uint64; NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount: uint64; }
export type s__FILE_OBJECTID_BUFFER = struct { ObjectId: [16; uint8]; struct #union { struct { BirthVolumeId: [16; uint8]; BirthObjectId: [16; uint8]; DomainId: [16; uint8]; }; ExtendedInfo: [48; uint8]; }; }
export type s__FILE_SET_SPARSE_BUFFER = struct { SetSparse: uint8; }
export type s__FILE_ZERO_DATA_INFORMATION = struct { FileOffset: u__LARGE_INTEGER; BeyondFinalZero: u__LARGE_INTEGER; }
export type s__FILE_ZERO_DATA_INFORMATION_EX = struct { FileOffset: u__LARGE_INTEGER; BeyondFinalZero: u__LARGE_INTEGER; Flags: ulong; }
export type s__FILE_ALLOCATED_RANGE_BUFFER = struct { FileOffset: u__LARGE_INTEGER; Length: u__LARGE_INTEGER; }
export type s__ENCRYPTION_BUFFER = struct { EncryptionOperation: ulong; Private: [1; uint8]; }
export type s__DECRYPTION_STATUS_BUFFER = struct { NoEncryptedStreams: uint8; }
export type s__REQUEST_RAW_ENCRYPTED_DATA = struct { FileOffset: int64; Length: ulong; }
export type s__ENCRYPTED_DATA_INFO = struct { StartingFileOffset: uint64; OutputBufferOffset: ulong; BytesWithinFileSize: ulong; BytesWithinValidDataLength: ulong; CompressionFormat: ushort; DataUnitShift: uint8; ChunkShift: uint8; ClusterShift: uint8; EncryptionFormat: uint8; NumberOfDataBlocks: ushort; DataBlockSize: [1; ulong]; }
export type s__EXTENDED_ENCRYPTED_DATA_INFO = struct { ExtendedCode: ulong; Length: ulong; Flags: ulong; Reserved: ulong; }
export type s__PLEX_READ_DATA_REQUEST = struct { ByteOffset: u__LARGE_INTEGER; ByteLength: ulong; PlexNumber: ulong; }
export type s__SI_COPYFILE = struct { SourceFileNameLength: ulong; DestinationFileNameLength: ulong; Flags: ulong; FileNameBuffer: [1; ushort]; }
export type s__FILE_MAKE_COMPATIBLE_BUFFER = struct { CloseDisc: uint8; }
export type s__FILE_SET_DEFECT_MGMT_BUFFER = struct { Disable: uint8; }
export type s__FILE_QUERY_SPARING_BUFFER = struct { SparingUnitBytes: ulong; SoftwareSparing: uint8; TotalSpareBlocks: ulong; FreeSpareBlocks: ulong; }
export type s__FILE_QUERY_ON_DISK_VOL_INFO_BUFFER = struct { DirectoryCount: u__LARGE_INTEGER; FileCount: u__LARGE_INTEGER; FsFormatMajVersion: ushort; FsFormatMinVersion: ushort; FsFormatName: [12; ushort]; FormatTime: u__LARGE_INTEGER; LastUpdateTime: u__LARGE_INTEGER; CopyrightInfo: [34; ushort]; AbstractInfo: [34; ushort]; FormattingImplementationInfo: [34; ushort]; LastModifyingImplementationInfo: [34; ushort]; }
export type s__FILE_INITIATE_REPAIR_OUTPUT_BUFFER = struct { Hint1: uint64; Hint2: uint64; Clsn: uint64; Status: ulong; }
export type e__SHRINK_VOLUME_REQUEST_TYPES = enum { ShrinkPrepare = 1; ShrinkCommit = 2; ShrinkAbort = 3; }
export type s__SHRINK_VOLUME_INFORMATION = struct { ShrinkRequestType: e__SHRINK_VOLUME_REQUEST_TYPES; Flags: uint64; NewNumberOfSectors: int64; }
export type s__TXFS_MODIFY_RM = struct { Flags: ulong; LogContainerCountMax: ulong; LogContainerCountMin: ulong; LogContainerCount: ulong; LogGrowthIncrement: ulong; LogAutoShrinkPercentage: ulong; Reserved: uint64; LoggingMode: ushort; }
export type s__TXFS_QUERY_RM_INFORMATION = struct { BytesRequired: ulong; TailLsn: uint64; CurrentLsn: uint64; ArchiveTailLsn: uint64; LogContainerSize: uint64; HighestVirtualClock: u__LARGE_INTEGER; LogContainerCount: ulong; LogContainerCountMax: ulong; LogContainerCountMin: ulong; LogGrowthIncrement: ulong; LogAutoShrinkPercentage: ulong; Flags: ulong; LoggingMode: ushort; Reserved: ushort; RmState: ulong; LogCapacity: uint64; LogFree: uint64; TopsSize: uint64; TopsUsed: uint64; TransactionCount: uint64; OnePCCount: uint64; TwoPCCount: uint64; NumberLogFileFull: uint64; OldestTransactionAge: uint64; RMName: s__GUID; TmLogPathOffset: ulong; }
export type s__TXFS_ROLLFORWARD_REDO_INFORMATION = struct { LastVirtualClock: u__LARGE_INTEGER; LastRedoLsn: uint64; HighestRecoveryLsn: uint64; Flags: ulong; }
export type s__TXFS_START_RM_INFORMATION = struct { Flags: ulong; LogContainerSize: uint64; LogContainerCountMin: ulong; LogContainerCountMax: ulong; LogGrowthIncrement: ulong; LogAutoShrinkPercentage: ulong; TmLogPathOffset: ulong; TmLogPathLength: ushort; LoggingMode: ushort; LogPathLength: ushort; Reserved: ushort; LogPath: [1; ushort]; }
export type s__TXFS_GET_METADATA_INFO_OUT = struct { TxfFileId: struct { LowPart: int64; HighPart: int64; }; LockingTransaction: s__GUID; LastLsn: uint64; TransactionState: ulong; }
export type s__TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = struct { Offset: uint64; NameFlags: ulong; FileId: int64; Reserved1: ulong; Reserved2: ulong; Reserved3: int64; FileName: [1; ushort]; }
export type s__TXFS_LIST_TRANSACTION_LOCKED_FILES = struct { KtmTransaction: s__GUID; NumberOfFiles: uint64; BufferSizeRequired: uint64; Offset: uint64; }
export type s__TXFS_LIST_TRANSACTIONS_ENTRY = struct { TransactionId: s__GUID; TransactionState: ulong; Reserved1: ulong; Reserved2: ulong; Reserved3: int64; }
export type s__TXFS_LIST_TRANSACTIONS = struct { NumberOfTransactions: uint64; BufferSizeRequired: uint64; }
export type s__TXFS_READ_BACKUP_INFORMATION_OUT = struct { struct #union { BufferLength: ulong; Buffer: [1; uint8]; }; }
export type s__TXFS_WRITE_BACKUP_INFORMATION = struct { Buffer: [1; uint8]; }
export type s__TXFS_GET_TRANSACTED_VERSION = struct { ThisBaseVersion: ulong; LatestVersion: ulong; ThisMiniVersion: ushort; FirstMiniVersion: ushort; LatestMiniVersion: ushort; }
export type s__TXFS_SAVEPOINT_INFORMATION = struct { KtmTransaction: *; ActionCode: ulong; SavepointId: ulong; }
export type s__TXFS_CREATE_MINIVERSION_INFO = struct { StructureVersion: ushort; StructureLength: ushort; BaseVersion: ulong; MiniVersion: ushort; }
export type s__TXFS_TRANSACTION_ACTIVE_INFO = struct { TransactionsActiveAtSnapshot: uint8; }
export type s__BOOT_AREA_INFO = struct { BootSectorCount: ulong; struct { Offset: u__LARGE_INTEGER; }; BootSectors: [2; struct { Offset: u__LARGE_INTEGER; }]; }
export type s__RETRIEVAL_POINTER_BASE = struct { FileAreaOffset: u__LARGE_INTEGER; }
export type s__FILE_FS_PERSISTENT_VOLUME_INFORMATION = struct { VolumeFlags: ulong; FlagMask: ulong; Version: ulong; Reserved: ulong; }
export type s__FILE_SYSTEM_RECOGNITION_INFORMATION = struct { FileSystem: [9; char]; }
export type s__REQUEST_OPLOCK_INPUT_BUFFER = struct { StructureVersion: ushort; StructureLength: ushort; RequestedOplockLevel: ulong; Flags: ulong; }
export type s__REQUEST_OPLOCK_OUTPUT_BUFFER = struct { StructureVersion: ushort; StructureLength: ushort; OriginalOplockLevel: ulong; NewOplockLevel: ulong; Flags: ulong; AccessMode: ulong; ShareMode: ushort; }
export type s__VIRTUAL_STORAGE_TYPE = struct { DeviceId: ulong; VendorId: s__GUID; }
export type s__STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = struct { RequestLevel: ulong; RequestFlags: ulong; }
export type s__STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = struct { EntryLength: ulong; DependencyTypeFlags: ulong; ProviderSpecificFlags: ulong; VirtualStorageType: s__VIRTUAL_STORAGE_TYPE; }
export type s__STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = struct { EntryLength: ulong; DependencyTypeFlags: ulong; ProviderSpecificFlags: ulong; VirtualStorageType: s__VIRTUAL_STORAGE_TYPE; AncestorLevel: ulong; HostVolumeNameOffset: ulong; HostVolumeNameSize: ulong; DependentVolumeNameOffset: ulong; DependentVolumeNameSize: ulong; RelativePathOffset: ulong; RelativePathSize: ulong; DependentDeviceNameOffset: ulong; DependentDeviceNameSize: ulong; }
export type s__STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = struct { ResponseLevel: ulong; NumberEntries: ulong; struct #union { Lev1Depends: *s__STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY; Lev2Depends: *s__STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY; }; }
export type s__SD_CHANGE_MACHINE_SID_INPUT = struct { CurrentMachineSIDOffset: ushort; CurrentMachineSIDLength: ushort; NewMachineSIDOffset: ushort; NewMachineSIDLength: ushort; }
export type s__SD_CHANGE_MACHINE_SID_OUTPUT = struct { NumSDChangedSuccess: uint64; NumSDChangedFail: uint64; NumSDUnused: uint64; NumSDTotal: uint64; NumMftSDChangedSuccess: uint64; NumMftSDChangedFail: uint64; NumMftSDTotal: uint64; }
export type s__SD_QUERY_STATS_INPUT = struct { Reserved: ulong; }
export type s__SD_QUERY_STATS_OUTPUT = struct { SdsStreamSize: uint64; SdsAllocationSize: uint64; SiiStreamSize: uint64; SiiAllocationSize: uint64; SdhStreamSize: uint64; SdhAllocationSize: uint64; NumSDTotal: uint64; NumSDUnused: uint64; }
export type s__SD_ENUM_SDS_INPUT = struct { StartingOffset: uint64; MaxSDEntriesToReturn: uint64; }
export type s__SD_ENUM_SDS_ENTRY = struct { Hash: ulong; SecurityId: ulong; Offset: uint64; Length: ulong; Descriptor: [1; uint8]; }
export type s__SD_ENUM_SDS_OUTPUT = struct { NextOffset: uint64; NumSDEntriesReturned: uint64; NumSDBytesReturned: uint64; SDEntry: [1; s__SD_ENUM_SDS_ENTRY]; }
export type s__SD_GLOBAL_CHANGE_INPUT = struct { Flags: ulong; ChangeType: ulong; struct #union { SdChange: s__SD_CHANGE_MACHINE_SID_INPUT; SdQueryStats: s__SD_QUERY_STATS_INPUT; SdEnumSds: s__SD_ENUM_SDS_INPUT; }; }
export type s__SD_GLOBAL_CHANGE_OUTPUT = struct { Flags: ulong; ChangeType: ulong; struct #union { SdChange: s__SD_CHANGE_MACHINE_SID_OUTPUT; SdQueryStats: s__SD_QUERY_STATS_OUTPUT; SdEnumSds: s__SD_ENUM_SDS_OUTPUT; }; }
export type s__LOOKUP_STREAM_FROM_CLUSTER_INPUT = struct { Flags: ulong; NumberOfClusters: ulong; Cluster: [1; u__LARGE_INTEGER]; }
export type s__LOOKUP_STREAM_FROM_CLUSTER_OUTPUT = struct { Offset: ulong; NumberOfMatches: ulong; BufferSizeRequired: ulong; }
export type s__LOOKUP_STREAM_FROM_CLUSTER_ENTRY = struct { OffsetToNext: ulong; Flags: ulong; Reserved: u__LARGE_INTEGER; Cluster: u__LARGE_INTEGER; FileName: [1; ushort]; }
export type s__FILE_TYPE_NOTIFICATION_INPUT = struct { Flags: ulong; NumFileTypeIDs: ulong; FileTypeID: [1; s__GUID]; }
export type s__CSV_MGMT_LOCK = struct { Flags: ulong; }
export type s__CSV_NAMESPACE_INFO = struct { Version: ulong; DeviceNumber: ulong; StartingOffset: u__LARGE_INTEGER; SectorSize: ulong; }
export type e__CSV_CONTROL_OP = enum { CsvControlStartRedirectFile = 2; CsvControlStopRedirectFile = 3; CsvControlQueryRedirectState = 4; CsvControlQueryFileRevision = 6; CsvControlQueryMdsPath = 8; CsvControlQueryFileRevisionFileId128 = 9; CsvControlQueryVolumeRedirectState = 10; CsvControlEnableUSNRangeModificationTracking = 13; CsvControlMarkHandleLocalVolumeMount = 14; CsvControlUnmarkHandleLocalVolumeMount = 15; CsvControlGetCsvFsMdsPathV2 = 18; CsvControlDisableCaching = 19; CsvControlEnableCaching = 20; CsvControlStartForceDFO = 21; CsvControlStopForceDFO = 22; CsvControlQueryMdsPathNoPause = 23; CsvControlSetVolumeId = 24; CsvControlQueryVolumeId = 25; }
export type s__CSV_CONTROL_PARAM = struct { Operation: e__CSV_CONTROL_OP; Unused: int64; }
export type s__CSV_QUERY_REDIRECT_STATE = struct { MdsNodeId: ulong; DsNodeId: ulong; FileRedirected: uint8; }
export type s__CSV_QUERY_FILE_REVISION = struct { FileId: int64; FileRevision: [3; int64]; }
export type s__CSV_QUERY_FILE_REVISION_FILE_ID_128 = struct { FileId: s__FILE_ID_128; FileRevision: [3; int64]; }
export type s__CSV_QUERY_MDS_PATH = struct { MdsNodeId: ulong; DsNodeId: ulong; PathLength: ulong; Path: [1; ushort]; }
export type e__CSVFS_DISK_CONNECTIVITY = enum { CsvFsDiskConnectivityNone; CsvFsDiskConnectivityMdsNodeOnly = 1; CsvFsDiskConnectivitySubsetOfNodes = 2; CsvFsDiskConnectivityAllNodes = 3; }
export type s__CSV_QUERY_VOLUME_REDIRECT_STATE = struct { MdsNodeId: ulong; DsNodeId: ulong; IsDiskConnected: uint8; ClusterEnableDirectIo: uint8; DiskConnectivity: e__CSVFS_DISK_CONNECTIVITY; }
export type s__CSV_QUERY_MDS_PATH_V2 = struct { Version: int64; RequiredSize: ulong; MdsNodeId: ulong; DsNodeId: ulong; Flags: ulong; DiskConnectivity: e__CSVFS_DISK_CONNECTIVITY; VolumeId: s__GUID; IpAddressOffset: ulong; IpAddressLength: ulong; PathOffset: ulong; PathLength: ulong; }
export type s__CSV_SET_VOLUME_ID = struct { VolumeId: s__GUID; }
export type s__CSV_QUERY_VOLUME_ID = struct { VolumeId: s__GUID; }
export type e__LMR_QUERY_INFO_CLASS = enum { LMRQuerySessionInfo = 1; }
export type s__LMR_QUERY_INFO_PARAM = struct { Operation: e__LMR_QUERY_INFO_CLASS; }
export type s__LMR_QUERY_SESSION_INFO = struct { SessionId: uint64; }
export type s__CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = struct { VetoedFromAltitudeIntegral: uint64; VetoedFromAltitudeDecimal: uint64; Reason: [256; ushort]; }
export type e__STORAGE_RESERVE_ID = enum { StorageReserveIdNone; StorageReserveIdHard = 1; StorageReserveIdSoft = 2; StorageReserveIdUpdateScratch = 3; StorageReserveIdMax = 4; }
export type s__CSV_IS_OWNED_BY_CSVFS = struct { OwnedByCSVFS: uint8; }
export type s__FILE_LEVEL_TRIM_RANGE = struct { Offset: uint64; Length: uint64; }
export type s__FILE_LEVEL_TRIM = struct { Key: ulong; NumRanges: ulong; Ranges: [1; s__FILE_LEVEL_TRIM_RANGE]; }
export type s__FILE_LEVEL_TRIM_OUTPUT = struct { NumRangesProcessed: ulong; }
export type e__QUERY_FILE_LAYOUT_FILTER_TYPE = enum { QUERY_FILE_LAYOUT_FILTER_TYPE_NONE; QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1; QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2; QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3; QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4; }
export type s__CLUSTER_RANGE = struct { StartingCluster: u__LARGE_INTEGER; ClusterCount: u__LARGE_INTEGER; }
export type s__FILE_REFERENCE_RANGE = struct { StartingFileReferenceNumber: uint64; EndingFileReferenceNumber: uint64; }
export type s__QUERY_FILE_LAYOUT_INPUT = struct { struct #union { FilterEntryCount: ulong; NumberOfPairs: ulong; }; Flags: ulong; FilterType: e__QUERY_FILE_LAYOUT_FILTER_TYPE; Reserved: ulong; Filter: struct #union { ClusterRanges: [1; s__CLUSTER_RANGE]; FileReferenceRanges: [1; s__FILE_REFERENCE_RANGE]; StorageReserveIds: [1; e__STORAGE_RESERVE_ID]; }; }
export type s__QUERY_FILE_LAYOUT_OUTPUT = struct { FileEntryCount: ulong; FirstFileOffset: ulong; Flags: ulong; Reserved: ulong; }
export type s__FILE_LAYOUT_ENTRY = struct { Version: ulong; NextFileOffset: ulong; Flags: ulong; FileAttributes: ulong; FileReferenceNumber: uint64; FirstNameOffset: ulong; FirstStreamOffset: ulong; ExtraInfoOffset: ulong; ExtraInfoLength: ulong; }
export type s__FILE_LAYOUT_NAME_ENTRY = struct { NextNameOffset: ulong; Flags: ulong; ParentFileReferenceNumber: uint64; FileNameLength: ulong; Reserved: ulong; FileName: [1; ushort]; }
export type s__FILE_LAYOUT_INFO_ENTRY = struct { BasicInformation: struct { CreationTime: u__LARGE_INTEGER; LastAccessTime: u__LARGE_INTEGER; LastWriteTime: u__LARGE_INTEGER; ChangeTime: u__LARGE_INTEGER; FileAttributes: ulong; }; OwnerId: ulong; SecurityId: ulong; Usn: int64; StorageReserveId: e__STORAGE_RESERVE_ID; }
export type s__STREAM_LAYOUT_ENTRY = struct { Version: ulong; NextStreamOffset: ulong; Flags: ulong; ExtentInformationOffset: ulong; AllocationSize: u__LARGE_INTEGER; EndOfFile: u__LARGE_INTEGER; StreamInformationOffset: ulong; AttributeTypeCode: ulong; AttributeFlags: ulong; StreamIdentifierLength: ulong; StreamIdentifier: [1; ushort]; }
export type s__STREAM_EXTENT_ENTRY = struct { Flags: ulong; ExtentInformation: struct #union { RetrievalPointers: s_RETRIEVAL_POINTERS_BUFFER; }; }
export type s__FSCTL_GET_INTEGRITY_INFORMATION_BUFFER = struct { ChecksumAlgorithm: ushort; Reserved: ushort; Flags: ulong; ChecksumChunkSizeInBytes: ulong; ClusterSizeInBytes: ulong; }
export type s__FSCTL_SET_INTEGRITY_INFORMATION_BUFFER = struct { ChecksumAlgorithm: ushort; Reserved: ushort; Flags: ulong; }
export type s__FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = struct { EnableIntegrity: uint8; KeepIntegrityStateUnchanged: uint8; Reserved: ushort; Flags: ulong; Version: uint8; Reserved2: [7; uint8]; }
export type s__FSCTL_OFFLOAD_READ_INPUT = struct { Size: ulong; Flags: ulong; TokenTimeToLive: ulong; Reserved: ulong; FileOffset: uint64; CopyLength: uint64; }
export type s__FSCTL_OFFLOAD_READ_OUTPUT = struct { Size: ulong; Flags: ulong; TransferLength: uint64; Token: [512; uint8]; }
export type s__FSCTL_OFFLOAD_WRITE_INPUT = struct { Size: ulong; Flags: ulong; FileOffset: uint64; CopyLength: uint64; TransferOffset: uint64; Token: [512; uint8]; }
export type s__FSCTL_OFFLOAD_WRITE_OUTPUT = struct { Size: ulong; Flags: ulong; LengthWritten: uint64; }
export type s__SET_PURGE_FAILURE_MODE_INPUT = struct { Flags: ulong; }
export type s__REPAIR_COPIES_INPUT = struct { Size: ulong; Flags: ulong; FileOffset: u__LARGE_INTEGER; Length: ulong; SourceCopy: ulong; NumberOfRepairCopies: ulong; RepairCopies: [1; ulong]; }
export type s__REPAIR_COPIES_OUTPUT = struct { Size: ulong; Status: ulong; ResumeFileOffset: u__LARGE_INTEGER; }
export type s__FILE_REGION_INFO = struct { FileOffset: int64; Length: int64; Usage: ulong; Reserved: ulong; }
export type s__FILE_REGION_OUTPUT = struct { Flags: ulong; TotalRegionEntryCount: ulong; RegionEntryCount: ulong; Reserved: ulong; Region: [1; s__FILE_REGION_INFO]; }
export type s__FILE_REGION_INPUT = struct { FileOffset: int64; Length: int64; DesiredUsage: ulong; }
export type s__WRITE_USN_REASON_INPUT = struct { Flags: ulong; UsnReasonToWrite: ulong; }
export type e__FILE_STORAGE_TIER_MEDIA_TYPE = enum { FileStorageTierMediaTypeUnspecified; FileStorageTierMediaTypeDisk = 1; FileStorageTierMediaTypeSsd = 2; FileStorageTierMediaTypeScm = 4; FileStorageTierMediaTypeMax = 5; }
export type e__FILE_STORAGE_TIER_CLASS = enum { FileStorageTierClassUnspecified; FileStorageTierClassCapacity = 1; FileStorageTierClassPerformance = 2; FileStorageTierClassMax = 3; }
export type s__FILE_STORAGE_TIER = struct { Id: s__GUID; Name: [256; ushort]; Description: [256; ushort]; Flags: uint64; ProvisionedCapacity: uint64; MediaType: e__FILE_STORAGE_TIER_MEDIA_TYPE; Class: e__FILE_STORAGE_TIER_CLASS; }
export type s__FSCTL_QUERY_STORAGE_CLASSES_OUTPUT = struct { Version: ulong; Size: ulong; Flags: ulong; TotalNumberOfTiers: ulong; NumberOfTiersReturned: ulong; Tiers: [1; s__FILE_STORAGE_TIER]; }
export type s__DesiredStorageClass = struct { Class: e__FILE_STORAGE_TIER_CLASS; Flags: ulong; }
export type s__DataStream = struct { Length: ushort; Flags: ushort; Reserved: ulong; Vdl: uint64; }
export type s__Reparse = struct { Length: ushort; Flags: ushort; ReparseDataSize: ulong; ReparseDataOffset: ulong; }
export type s__Ea = struct { Length: ushort; Flags: ushort; EaSize: ulong; EaInformationOffset: ulong; }
export type u__StreamInformation = struct #union { _DesiredStorageClass: s__DesiredStorageClass; DesiredStorageClass: s__DesiredStorageClass; _DataStream: s__DataStream; DataStream: s__DataStream; _Reparse: s__Reparse; Reparse: s__Reparse; _Ea: s__Ea; Ea: s__Ea; }
export type s__STREAM_INFORMATION_ENTRY = struct { Version: ulong; Flags: ulong; _StreamInformation: u__StreamInformation; StreamInformation: u__StreamInformation; }
export type s__FSCTL_QUERY_REGION_INFO_INPUT = struct { Version: ulong; Size: ulong; Flags: ulong; NumberOfTierIds: ulong; TierIds: [1; s__GUID]; }
export type s__FILE_STORAGE_TIER_REGION = struct { TierId: s__GUID; Offset: uint64; Length: uint64; }
export type s__FSCTL_QUERY_REGION_INFO_OUTPUT = struct { Version: ulong; Size: ulong; Flags: ulong; Reserved: ulong; Alignment: uint64; TotalNumberOfRegions: ulong; NumberOfRegionsReturned: ulong; Regions: [1; s__FILE_STORAGE_TIER_REGION]; }
export type s__FILE_DESIRED_STORAGE_CLASS_INFORMATION = struct { Class: e__FILE_STORAGE_TIER_CLASS; Flags: ulong; }
export type s__DUPLICATE_EXTENTS_DATA = struct { FileHandle: *; SourceFileOffset: u__LARGE_INTEGER; TargetFileOffset: u__LARGE_INTEGER; ByteCount: u__LARGE_INTEGER; }
export type s__DUPLICATE_EXTENTS_DATA32 = struct { FileHandle: uint; SourceFileOffset: u__LARGE_INTEGER; TargetFileOffset: u__LARGE_INTEGER; ByteCount: u__LARGE_INTEGER; }
export type s__DUPLICATE_EXTENTS_DATA_EX = struct { Size: uint64; FileHandle: *; SourceFileOffset: u__LARGE_INTEGER; TargetFileOffset: u__LARGE_INTEGER; ByteCount: u__LARGE_INTEGER; Flags: ulong; }
export type s__DUPLICATE_EXTENTS_DATA_EX32 = struct { Size: uint; FileHandle: uint; SourceFileOffset: u__LARGE_INTEGER; TargetFileOffset: u__LARGE_INTEGER; ByteCount: u__LARGE_INTEGER; Flags: ulong; }
export type e__DUPLICATE_EXTENTS_STATE = enum { FileSnapStateInactive; FileSnapStateSource = 1; FileSnapStateTarget = 2; }
export type s__ASYNC_DUPLICATE_EXTENTS_STATUS = struct { Version: ulong; State: e__DUPLICATE_EXTENTS_STATE; SourceFileOffset: uint64; TargetFileOffset: uint64; ByteCount: uint64; BytesDuplicated: uint64; }
export type e__REFS_SMR_VOLUME_GC_STATE = enum { SmrGcStateInactive; SmrGcStatePaused = 1; SmrGcStateActive = 2; SmrGcStateActiveFullSpeed = 3; }
export type s__REFS_SMR_VOLUME_INFO_OUTPUT = struct { Version: ulong; Flags: ulong; SizeOfRandomlyWritableTier: u__LARGE_INTEGER; FreeSpaceInRandomlyWritableTier: u__LARGE_INTEGER; SizeofSMRTier: u__LARGE_INTEGER; FreeSpaceInSMRTier: u__LARGE_INTEGER; UsableFreeSpaceInSMRTier: u__LARGE_INTEGER; VolumeGcState: e__REFS_SMR_VOLUME_GC_STATE; VolumeGcLastStatus: ulong; CurrentGcBandFillPercentage: ulong; Unused: [6; uint64]; }
export type e__REFS_SMR_VOLUME_GC_ACTION = enum { SmrGcActionStart = 1; SmrGcActionStartFullSpeed = 2; SmrGcActionPause = 3; SmrGcActionStop = 4; }
export type e__REFS_SMR_VOLUME_GC_METHOD = enum { SmrGcMethodCompaction = 1; SmrGcMethodCompression = 2; SmrGcMethodRotation = 3; }
export type s__REFS_SMR_VOLUME_GC_PARAMETERS = struct { Version: ulong; Flags: ulong; Action: e__REFS_SMR_VOLUME_GC_ACTION; Method: e__REFS_SMR_VOLUME_GC_METHOD; IoGranularity: ulong; CompressionFormat: ulong; Unused: [8; uint64]; }
export type s__STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = struct { OptimalWriteSize: ulong; StreamGranularitySize: ulong; StreamIdMin: ulong; StreamIdMax: ulong; }
export type s__STREAMS_ASSOCIATE_ID_INPUT_BUFFER = struct { Flags: ulong; StreamId: ulong; }
export type s__STREAMS_QUERY_ID_OUTPUT_BUFFER = struct { StreamId: ulong; }
export type s__QUERY_BAD_RANGES_INPUT_RANGE = struct { StartOffset: uint64; LengthInBytes: uint64; }
export type s__QUERY_BAD_RANGES_INPUT = struct { Flags: ulong; NumRanges: ulong; Ranges: [1; s__QUERY_BAD_RANGES_INPUT_RANGE]; }
export type s__QUERY_BAD_RANGES_OUTPUT_RANGE = struct { Flags: ulong; Reserved: ulong; StartOffset: uint64; LengthInBytes: uint64; }
export type s__QUERY_BAD_RANGES_OUTPUT = struct { Flags: ulong; NumBadRanges: ulong; NextOffsetToLookUp: uint64; BadRanges: [1; s__QUERY_BAD_RANGES_OUTPUT_RANGE]; }
export type s__SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = struct { Flags: ulong; AlignmentShift: ulong; FileOffsetToAlign: uint64; FallbackAlignmentShift: ulong; }
export type e__VIRTUAL_STORAGE_BEHAVIOR_CODE = enum { VirtualStorageBehaviorUndefined; VirtualStorageBehaviorCacheWriteThrough = 1; VirtualStorageBehaviorCacheWriteBack = 2; VirtualStorageBehaviorStopIoProcessing = 3; VirtualStorageBehaviorRestartIoProcessing = 4; }
export type s__VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = struct { Size: ulong; BehaviorCode: e__VIRTUAL_STORAGE_BEHAVIOR_CODE; }
export type s__ENCRYPTION_KEY_CTRL_INPUT = struct { HeaderSize: ulong; StructureSize: ulong; KeyOffset: ushort; KeySize: ushort; DplLock: ulong; DplUserId: uint64; DplCredentialId: uint64; }
export type s__WOF_EXTERNAL_INFO = struct { Version: ulong; Provider: ulong; }
export type s__WOF_EXTERNAL_FILE_ID = struct { FileId: s__FILE_ID_128; }
export type s__WOF_VERSION_INFO = struct { WofVersion: ulong; }
export type s__WIM_PROVIDER_EXTERNAL_INFO = struct { Version: ulong; Flags: ulong; DataSourceId: u__LARGE_INTEGER; ResourceHash: [20; uint8]; }
export type s__WIM_PROVIDER_ADD_OVERLAY_INPUT = struct { WimType: ulong; WimIndex: ulong; WimFileNameOffset: ulong; WimFileNameLength: ulong; }
export type s__WIM_PROVIDER_UPDATE_OVERLAY_INPUT = struct { DataSourceId: u__LARGE_INTEGER; WimFileNameOffset: ulong; WimFileNameLength: ulong; }
export type s__WIM_PROVIDER_REMOVE_OVERLAY_INPUT = struct { DataSourceId: u__LARGE_INTEGER; }
export type s__WIM_PROVIDER_SUSPEND_OVERLAY_INPUT = struct { DataSourceId: u__LARGE_INTEGER; }
export type s__WIM_PROVIDER_OVERLAY_ENTRY = struct { NextEntryOffset: ulong; DataSourceId: u__LARGE_INTEGER; WimGuid: s__GUID; WimFileNameOffset: ulong; WimType: ulong; WimIndex: ulong; Flags: ulong; }
export type s__FILE_PROVIDER_EXTERNAL_INFO_V0 = struct { Version: ulong; Algorithm: ulong; }
export type s__FILE_PROVIDER_EXTERNAL_INFO_V1 = struct { Version: ulong; Algorithm: ulong; Flags: ulong; }
export type s__CONTAINER_VOLUME_STATE = struct { Flags: ulong; }
export type s__CONTAINER_ROOT_INFO_INPUT = struct { Flags: ulong; }
export type s__CONTAINER_ROOT_INFO_OUTPUT = struct { ContainerRootIdLength: ushort; ContainerRootId: [1; uint8]; }
export type s__VIRTUALIZATION_INSTANCE_INFO_INPUT = struct { NumberOfWorkerThreads: ulong; Flags: ulong; }
export type s__VIRTUALIZATION_INSTANCE_INFO_INPUT_EX = struct { HeaderSize: ushort; Flags: ulong; NotificationInfoSize: ulong; NotificationInfoOffset: ushort; ProviderMajorVersion: ushort; }
export type s__VIRTUALIZATION_INSTANCE_INFO_OUTPUT = struct { VirtualizationInstanceID: s__GUID; }
export type s__GET_FILTER_FILE_IDENTIFIER_INPUT = struct { AltitudeLength: ushort; Altitude: [1; ushort]; }
export type s__GET_FILTER_FILE_IDENTIFIER_OUTPUT = struct { FilterFileIdentifierLength: ushort; FilterFileIdentifier: [1; uint8]; }
export type e__FS_BPIO_OPERATIONS = enum { FS_BPIO_OP_ENABLE = 1; FS_BPIO_OP_DISABLE = 2; FS_BPIO_OP_QUERY = 3; FS_BPIO_OP_VOLUME_STACK_PAUSE = 4; FS_BPIO_OP_VOLUME_STACK_RESUME = 5; FS_BPIO_OP_STREAM_PAUSE = 6; FS_BPIO_OP_STREAM_RESUME = 7; FS_BPIO_OP_GET_INFO = 8; FS_BPIO_OP_MAX_OPERATION = 9; }
export type e__FS_BPIO_INFLAGS = enum { FSBPIO_INFL_None; FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = 1; }
export type s__FS_BPIO_INPUT = struct { Operation: e__FS_BPIO_OPERATIONS; InFlags: e__FS_BPIO_INFLAGS; Reserved1: uint64; Reserved2: uint64; }
export type e__FS_BPIO_OUTFLAGS = enum { FSBPIO_OUTFL_None; FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = 1; FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = 2; FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = 4; FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = 8; }
export type s__FS_BPIO_RESULTS = struct { OpStatus: ulong; FailingDriverNameLen: ushort; FailingDriverName: [32; ushort]; FailureReasonLen: ushort; FailureReason: [128; ushort]; }
export type s__FS_BPIO_INFO = struct { ActiveBypassIoCount: ulong; StorageDriverNameLen: ushort; StorageDriverName: [32; ushort]; }
export type s__FS_BPIO_OUTPUT = struct { Operation: e__FS_BPIO_OPERATIONS; OutFlags: e__FS_BPIO_OUTFLAGS; Reserved1: uint64; Reserved2: uint64; struct #union { Enable: s__FS_BPIO_RESULTS; Query: s__FS_BPIO_RESULTS; VolumeStackResume: s__FS_BPIO_RESULTS; StreamResume: s__FS_BPIO_RESULTS; GetInfo: s__FS_BPIO_INFO; }; }
export type s__SMB_SHARE_FLUSH_AND_PURGE_INPUT = struct { Version: ushort; }
export type s__SMB_SHARE_FLUSH_AND_PURGE_OUTPUT = struct { cEntriesPurged: ulong; }
export type s__DISK_EXTENT = struct { DiskNumber: ulong; StartingOffset: u__LARGE_INTEGER; ExtentLength: u__LARGE_INTEGER; }
export type s__VOLUME_DISK_EXTENTS = struct { NumberOfDiskExtents: ulong; Extents: [1; s__DISK_EXTENT]; }
export type s__VOLUME_GET_GPT_ATTRIBUTES_INFORMATION = struct { GptAttributes: uint64; }
export type s__IO_IRP_EXT_TRACK_OFFSET_HEADER
export type s__IO_IRP_EXT_TRACK_OFFSET_HEADER = struct { Validation: ushort; Flags: ushort; TrackedOffsetCallback: def (*s__IO_IRP_EXT_TRACK_OFFSET_HEADER, *s__IO_IRP_EXT_TRACK_OFFSET_HEADER, int64) -> (); }
export type s__SCARD_IO_REQUEST = struct { dwProtocol: ulong; cbPciLength: ulong; }
export type s__SCARD_T0_COMMAND = struct { bCla: uint8; bIns: uint8; bP1: uint8; bP2: uint8; bP3: uint8; }
export type s__SCARD_T0_REQUEST = struct { ioRequest: s__SCARD_IO_REQUEST; bSw1: uint8; bSw2: uint8; struct #union { CmdBytes: s__SCARD_T0_COMMAND; rgbHeader: [5; uint8]; }; }
export type s__SCARD_T1_REQUEST = struct { ioRequest: s__SCARD_IO_REQUEST; }
export type s_SCARD_READERSTATEA = struct { szReader: *char; pvUserData: *; dwCurrentState: ulong; dwEventState: ulong; cbAtr: ulong; rgbAtr: [36; uint8]; }
export type SCARD_READERSTATEA
export type s_SCARD_READERSTATEW = struct { szReader: *ushort; pvUserData: *; dwCurrentState: ulong; dwEventState: ulong; cbAtr: ulong; rgbAtr: [36; uint8]; }
export type SCARD_READERSTATEW
export type s__SCARD_ATRMASK = struct { cbAtr: ulong; rgbAtr: [36; uint8]; rgbMask: [36; uint8]; }
export type s_OPENCARD_SEARCH_CRITERIAA = struct { dwStructSize: ulong; lpstrGroupNames: *char; nMaxGroupNames: ulong; rgguidInterfaces: *s__GUID; cguidInterfaces: ulong; lpstrCardNames: *char; nMaxCardNames: ulong; lpfnCheck: def (uint64, uint64, *) -> (int); lpfnConnect: def (uint64, *char, *char, *) -> (uint64); lpfnDisconnect: def (uint64, uint64, *) -> (); pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; }
export type OPENCARD_SEARCH_CRITERIAA
export type s_OPENCARD_SEARCH_CRITERIAW = struct { dwStructSize: ulong; lpstrGroupNames: *ushort; nMaxGroupNames: ulong; rgguidInterfaces: *s__GUID; cguidInterfaces: ulong; lpstrCardNames: *ushort; nMaxCardNames: ulong; lpfnCheck: def (uint64, uint64, *) -> (int); lpfnConnect: def (uint64, *ushort, *ushort, *) -> (uint64); lpfnDisconnect: def (uint64, uint64, *) -> (); pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; }
export type OPENCARD_SEARCH_CRITERIAW
export type s_OPENCARDNAME_EXA = struct { dwStructSize: ulong; hSCardContext: uint64; hwndOwner: *s_HWND__; dwFlags: ulong; lpstrTitle: *char; lpstrSearchDesc: *char; hIcon: *s_HICON__; pOpenCardSearchCriteria: *OPENCARD_SEARCH_CRITERIAA; lpfnConnect: def (uint64, *char, *char, *) -> (uint64); pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; lpstrRdr: *char; nMaxRdr: ulong; lpstrCard: *char; nMaxCard: ulong; dwActiveProtocol: ulong; hCardHandle: uint64; }
export type OPENCARDNAME_EXA
export type s_OPENCARDNAME_EXW = struct { dwStructSize: ulong; hSCardContext: uint64; hwndOwner: *s_HWND__; dwFlags: ulong; lpstrTitle: *ushort; lpstrSearchDesc: *ushort; hIcon: *s_HICON__; pOpenCardSearchCriteria: *OPENCARD_SEARCH_CRITERIAW; lpfnConnect: def (uint64, *ushort, *ushort, *) -> (uint64); pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; lpstrRdr: *ushort; nMaxRdr: ulong; lpstrCard: *ushort; nMaxCard: ulong; dwActiveProtocol: ulong; hCardHandle: uint64; }
export type OPENCARDNAME_EXW
export type e_READER_SEL_REQUEST_MATCH_TYPE = enum { RSR_MATCH_TYPE_READER_AND_CONTAINER = 1; RSR_MATCH_TYPE_SERIAL_NUMBER = 2; RSR_MATCH_TYPE_ALL_CARDS = 3; }
export type s_READER_SEL_REQUEST = struct { dwShareMode: ulong; dwPreferredProtocols: ulong; MatchType: e_READER_SEL_REQUEST_MATCH_TYPE; struct #union { ReaderAndContainerParameter: struct { cbReaderNameOffset: ulong; cchReaderNameLength: ulong; cbContainerNameOffset: ulong; cchContainerNameLength: ulong; dwDesiredCardModuleVersion: ulong; dwCspFlags: ulong; }; SerialNumberParameter: struct { cbSerialNumberOffset: ulong; cbSerialNumberLength: ulong; dwDesiredCardModuleVersion: ulong; }; }; }
export type READER_SEL_REQUEST
export type s_READER_SEL_RESPONSE = struct { cbReaderNameOffset: ulong; cchReaderNameLength: ulong; cbCardNameOffset: ulong; cchCardNameLength: ulong; }
export type READER_SEL_RESPONSE
export type s_OPENCARDNAMEA = struct { dwStructSize: ulong; hwndOwner: *s_HWND__; hSCardContext: uint64; lpstrGroupNames: *char; nMaxGroupNames: ulong; lpstrCardNames: *char; nMaxCardNames: ulong; rgguidInterfaces: *s__GUID; cguidInterfaces: ulong; lpstrRdr: *char; nMaxRdr: ulong; lpstrCard: *char; nMaxCard: ulong; lpstrTitle: *char; dwFlags: ulong; pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; dwActiveProtocol: ulong; lpfnConnect: def (uint64, *char, *char, *) -> (uint64); lpfnCheck: def (uint64, uint64, *) -> (int); lpfnDisconnect: def (uint64, uint64, *) -> (); hCardHandle: uint64; }
export type OPENCARDNAMEA
export type s_OPENCARDNAMEW = struct { dwStructSize: ulong; hwndOwner: *s_HWND__; hSCardContext: uint64; lpstrGroupNames: *ushort; nMaxGroupNames: ulong; lpstrCardNames: *ushort; nMaxCardNames: ulong; rgguidInterfaces: *s__GUID; cguidInterfaces: ulong; lpstrRdr: *ushort; nMaxRdr: ulong; lpstrCard: *ushort; nMaxCard: ulong; lpstrTitle: *ushort; dwFlags: ulong; pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; dwActiveProtocol: ulong; lpfnConnect: def (uint64, *ushort, *ushort, *) -> (uint64); lpfnCheck: def (uint64, uint64, *) -> (int); lpfnDisconnect: def (uint64, uint64, *) -> (); hCardHandle: uint64; }
export type OPENCARDNAMEW
export type s__PSP
export type s__PROPSHEETPAGEA
export type s__PROPSHEETPAGEW
export type s__PROPSHEETPAGEA_V1 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; struct #union { pszTemplate: *char; pResource: *s_DLGTEMPLATE; }; struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszTitle: *char; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *s__PROPSHEETPAGEA) -> (uint); pcRefParent: *uint; }
export type s__PROPSHEETPAGEA_V2 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; struct #union { pszTemplate: *char; pResource: *s_DLGTEMPLATE; }; struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszTitle: *char; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *s__PROPSHEETPAGEA) -> (uint); pcRefParent: *uint; pszHeaderTitle: *char; pszHeaderSubTitle: *char; }
export type s__PROPSHEETPAGEA_V3 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; struct #union { pszTemplate: *char; pResource: *s_DLGTEMPLATE; }; struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszTitle: *char; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *s__PROPSHEETPAGEA) -> (uint); pcRefParent: *uint; pszHeaderTitle: *char; pszHeaderSubTitle: *char; hActCtx: *; }
export type s__PROPSHEETPAGEA = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; struct #union { pszTemplate: *char; pResource: *s_DLGTEMPLATE; }; struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszTitle: *char; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *s__PROPSHEETPAGEA) -> (uint); pcRefParent: *uint; pszHeaderTitle: *char; pszHeaderSubTitle: *char; hActCtx: *; struct #union { hbmHeader: *s_HBITMAP__; pszbmHeader: *char; }; }
export type s__PROPSHEETPAGEW_V1 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; struct #union { pszTemplate: *ushort; pResource: *s_DLGTEMPLATE; }; struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszTitle: *ushort; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *s__PROPSHEETPAGEW) -> (uint); pcRefParent: *uint; }
export type s__PROPSHEETPAGEW_V2 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; struct #union { pszTemplate: *ushort; pResource: *s_DLGTEMPLATE; }; struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszTitle: *ushort; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *s__PROPSHEETPAGEW) -> (uint); pcRefParent: *uint; pszHeaderTitle: *ushort; pszHeaderSubTitle: *ushort; }
export type s__PROPSHEETPAGEW_V3 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; struct #union { pszTemplate: *ushort; pResource: *s_DLGTEMPLATE; }; struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszTitle: *ushort; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *s__PROPSHEETPAGEW) -> (uint); pcRefParent: *uint; pszHeaderTitle: *ushort; pszHeaderSubTitle: *ushort; hActCtx: *; }
export type s__PROPSHEETPAGEW = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; struct #union { pszTemplate: *ushort; pResource: *s_DLGTEMPLATE; }; struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszTitle: *ushort; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *s__PROPSHEETPAGEW) -> (uint); pcRefParent: *uint; pszHeaderTitle: *ushort; pszHeaderSubTitle: *ushort; hActCtx: *; struct #union { hbmHeader: *s_HBITMAP__; pszbmHeader: *ushort; }; }
export type s__PROPSHEETHEADERA_V1 = struct { dwSize: ulong; dwFlags: ulong; hwndParent: *s_HWND__; hInstance: *s_HINSTANCE__; struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszCaption: *char; nPages: uint; struct #union { nStartPage: uint; pStartPage: *char; }; struct #union { ppsp: *s__PROPSHEETPAGEA; phpage: **s__PSP; }; pfnCallback: def (*s_HWND__, uint, int64) -> (int); }
export type s__PROPSHEETHEADERA_V2 = struct { dwSize: ulong; dwFlags: ulong; hwndParent: *s_HWND__; hInstance: *s_HINSTANCE__; struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszCaption: *char; nPages: uint; struct #union { nStartPage: uint; pStartPage: *char; }; struct #union { ppsp: *s__PROPSHEETPAGEA; phpage: **s__PSP; }; pfnCallback: def (*s_HWND__, uint, int64) -> (int); struct #union { hbmWatermark: *s_HBITMAP__; pszbmWatermark: *char; }; hplWatermark: *s_HPALETTE__; struct #union { hbmHeader: *s_HBITMAP__; pszbmHeader: *char; }; }
export type s__PROPSHEETHEADERW_V1 = struct { dwSize: ulong; dwFlags: ulong; hwndParent: *s_HWND__; hInstance: *s_HINSTANCE__; struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszCaption: *ushort; nPages: uint; struct #union { nStartPage: uint; pStartPage: *ushort; }; struct #union { ppsp: *s__PROPSHEETPAGEW; phpage: **s__PSP; }; pfnCallback: def (*s_HWND__, uint, int64) -> (int); }
export type s__PROPSHEETHEADERW_V2 = struct { dwSize: ulong; dwFlags: ulong; hwndParent: *s_HWND__; hInstance: *s_HINSTANCE__; struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszCaption: *ushort; nPages: uint; struct #union { nStartPage: uint; pStartPage: *ushort; }; struct #union { ppsp: *s__PROPSHEETPAGEW; phpage: **s__PSP; }; pfnCallback: def (*s_HWND__, uint, int64) -> (int); struct #union { hbmWatermark: *s_HBITMAP__; pszbmWatermark: *ushort; }; hplWatermark: *s_HPALETTE__; struct #union { hbmHeader: *s_HBITMAP__; pszbmHeader: *ushort; }; }
export type s__PSHNOTIFY = struct { hdr: s_tagNMHDR; lParam: int64; }
export type s__PRINTER_INFO_1A = struct { Flags: ulong; pDescription: *char; pName: *char; pComment: *char; }
export type s__PRINTER_INFO_1W = struct { Flags: ulong; pDescription: *ushort; pName: *ushort; pComment: *ushort; }
export type s__PRINTER_INFO_2A = struct { pServerName: *char; pPrinterName: *char; pShareName: *char; pPortName: *char; pDriverName: *char; pComment: *char; pLocation: *char; pDevMode: *s__devicemodeA; pSepFile: *char; pPrintProcessor: *char; pDatatype: *char; pParameters: *char; pSecurityDescriptor: *; Attributes: ulong; Priority: ulong; DefaultPriority: ulong; StartTime: ulong; UntilTime: ulong; Status: ulong; cJobs: ulong; AveragePPM: ulong; }
export type s__PRINTER_INFO_2W = struct { pServerName: *ushort; pPrinterName: *ushort; pShareName: *ushort; pPortName: *ushort; pDriverName: *ushort; pComment: *ushort; pLocation: *ushort; pDevMode: *s__devicemodeW; pSepFile: *ushort; pPrintProcessor: *ushort; pDatatype: *ushort; pParameters: *ushort; pSecurityDescriptor: *; Attributes: ulong; Priority: ulong; DefaultPriority: ulong; StartTime: ulong; UntilTime: ulong; Status: ulong; cJobs: ulong; AveragePPM: ulong; }
export type s__PRINTER_INFO_3 = struct { pSecurityDescriptor: *; }
export type s__PRINTER_INFO_4A = struct { pPrinterName: *char; pServerName: *char; Attributes: ulong; }
export type s__PRINTER_INFO_4W = struct { pPrinterName: *ushort; pServerName: *ushort; Attributes: ulong; }
export type s__PRINTER_INFO_5A = struct { pPrinterName: *char; pPortName: *char; Attributes: ulong; DeviceNotSelectedTimeout: ulong; TransmissionRetryTimeout: ulong; }
export type s__PRINTER_INFO_5W = struct { pPrinterName: *ushort; pPortName: *ushort; Attributes: ulong; DeviceNotSelectedTimeout: ulong; TransmissionRetryTimeout: ulong; }
export type s__PRINTER_INFO_6 = struct { dwStatus: ulong; }
export type s__PRINTER_INFO_7A = struct { pszObjectGUID: *char; dwAction: ulong; }
export type s__PRINTER_INFO_7W = struct { pszObjectGUID: *ushort; dwAction: ulong; }
export type s__PRINTER_INFO_8A = struct { pDevMode: *s__devicemodeA; }
export type s__PRINTER_INFO_8W = struct { pDevMode: *s__devicemodeW; }
export type s__PRINTER_INFO_9A = struct { pDevMode: *s__devicemodeA; }
export type s__PRINTER_INFO_9W = struct { pDevMode: *s__devicemodeW; }
export type s__JOB_INFO_1A = struct { JobId: ulong; pPrinterName: *char; pMachineName: *char; pUserName: *char; pDocument: *char; pDatatype: *char; pStatus: *char; Status: ulong; Priority: ulong; Position: ulong; TotalPages: ulong; PagesPrinted: ulong; Submitted: s__SYSTEMTIME; }
export type s__JOB_INFO_1W = struct { JobId: ulong; pPrinterName: *ushort; pMachineName: *ushort; pUserName: *ushort; pDocument: *ushort; pDatatype: *ushort; pStatus: *ushort; Status: ulong; Priority: ulong; Position: ulong; TotalPages: ulong; PagesPrinted: ulong; Submitted: s__SYSTEMTIME; }
export type s__JOB_INFO_2A = struct { JobId: ulong; pPrinterName: *char; pMachineName: *char; pUserName: *char; pDocument: *char; pNotifyName: *char; pDatatype: *char; pPrintProcessor: *char; pParameters: *char; pDriverName: *char; pDevMode: *s__devicemodeA; pStatus: *char; pSecurityDescriptor: *; Status: ulong; Priority: ulong; Position: ulong; StartTime: ulong; UntilTime: ulong; TotalPages: ulong; Size: ulong; Submitted: s__SYSTEMTIME; Time: ulong; PagesPrinted: ulong; }
export type s__JOB_INFO_2W = struct { JobId: ulong; pPrinterName: *ushort; pMachineName: *ushort; pUserName: *ushort; pDocument: *ushort; pNotifyName: *ushort; pDatatype: *ushort; pPrintProcessor: *ushort; pParameters: *ushort; pDriverName: *ushort; pDevMode: *s__devicemodeW; pStatus: *ushort; pSecurityDescriptor: *; Status: ulong; Priority: ulong; Position: ulong; StartTime: ulong; UntilTime: ulong; TotalPages: ulong; Size: ulong; Submitted: s__SYSTEMTIME; Time: ulong; PagesPrinted: ulong; }
export type s__JOB_INFO_3 = struct { JobId: ulong; NextJobId: ulong; Reserved: ulong; }
export type s__JOB_INFO_4A = struct { JobId: ulong; pPrinterName: *char; pMachineName: *char; pUserName: *char; pDocument: *char; pNotifyName: *char; pDatatype: *char; pPrintProcessor: *char; pParameters: *char; pDriverName: *char; pDevMode: *s__devicemodeA; pStatus: *char; pSecurityDescriptor: *; Status: ulong; Priority: ulong; Position: ulong; StartTime: ulong; UntilTime: ulong; TotalPages: ulong; Size: ulong; Submitted: s__SYSTEMTIME; Time: ulong; PagesPrinted: ulong; SizeHigh: long; }
export type s__JOB_INFO_4W = struct { JobId: ulong; pPrinterName: *ushort; pMachineName: *ushort; pUserName: *ushort; pDocument: *ushort; pNotifyName: *ushort; pDatatype: *ushort; pPrintProcessor: *ushort; pParameters: *ushort; pDriverName: *ushort; pDevMode: *s__devicemodeW; pStatus: *ushort; pSecurityDescriptor: *; Status: ulong; Priority: ulong; Position: ulong; StartTime: ulong; UntilTime: ulong; TotalPages: ulong; Size: ulong; Submitted: s__SYSTEMTIME; Time: ulong; PagesPrinted: ulong; SizeHigh: long; }
export type s__ADDJOB_INFO_1A = struct { Path: *char; JobId: ulong; }
export type s__ADDJOB_INFO_1W = struct { Path: *ushort; JobId: ulong; }
export type s__DRIVER_INFO_1A = struct { pName: *char; }
export type s__DRIVER_INFO_1W = struct { pName: *ushort; }
export type s__DRIVER_INFO_2A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; }
export type s__DRIVER_INFO_2W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; }
export type s__DRIVER_INFO_3A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; pHelpFile: *char; pDependentFiles: *char; pMonitorName: *char; pDefaultDataType: *char; }
export type s__DRIVER_INFO_3W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; pHelpFile: *ushort; pDependentFiles: *ushort; pMonitorName: *ushort; pDefaultDataType: *ushort; }
export type s__DRIVER_INFO_4A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; pHelpFile: *char; pDependentFiles: *char; pMonitorName: *char; pDefaultDataType: *char; pszzPreviousNames: *char; }
export type s__DRIVER_INFO_4W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; pHelpFile: *ushort; pDependentFiles: *ushort; pMonitorName: *ushort; pDefaultDataType: *ushort; pszzPreviousNames: *ushort; }
export type s__DRIVER_INFO_5A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; dwDriverAttributes: ulong; dwConfigVersion: ulong; dwDriverVersion: ulong; }
export type s__DRIVER_INFO_5W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; dwDriverAttributes: ulong; dwConfigVersion: ulong; dwDriverVersion: ulong; }
export type s__DRIVER_INFO_6A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; pHelpFile: *char; pDependentFiles: *char; pMonitorName: *char; pDefaultDataType: *char; pszzPreviousNames: *char; ftDriverDate: s__FILETIME; dwlDriverVersion: uint64; pszMfgName: *char; pszOEMUrl: *char; pszHardwareID: *char; pszProvider: *char; }
export type s__DRIVER_INFO_6W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; pHelpFile: *ushort; pDependentFiles: *ushort; pMonitorName: *ushort; pDefaultDataType: *ushort; pszzPreviousNames: *ushort; ftDriverDate: s__FILETIME; dwlDriverVersion: uint64; pszMfgName: *ushort; pszOEMUrl: *ushort; pszHardwareID: *ushort; pszProvider: *ushort; }
export type s__DRIVER_INFO_8A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; pHelpFile: *char; pDependentFiles: *char; pMonitorName: *char; pDefaultDataType: *char; pszzPreviousNames: *char; ftDriverDate: s__FILETIME; dwlDriverVersion: uint64; pszMfgName: *char; pszOEMUrl: *char; pszHardwareID: *char; pszProvider: *char; pszPrintProcessor: *char; pszVendorSetup: *char; pszzColorProfiles: *char; pszInfPath: *char; dwPrinterDriverAttributes: ulong; pszzCoreDriverDependencies: *char; ftMinInboxDriverVerDate: s__FILETIME; dwlMinInboxDriverVerVersion: uint64; }
export type s__DRIVER_INFO_8W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; pHelpFile: *ushort; pDependentFiles: *ushort; pMonitorName: *ushort; pDefaultDataType: *ushort; pszzPreviousNames: *ushort; ftDriverDate: s__FILETIME; dwlDriverVersion: uint64; pszMfgName: *ushort; pszOEMUrl: *ushort; pszHardwareID: *ushort; pszProvider: *ushort; pszPrintProcessor: *ushort; pszVendorSetup: *ushort; pszzColorProfiles: *ushort; pszInfPath: *ushort; dwPrinterDriverAttributes: ulong; pszzCoreDriverDependencies: *ushort; ftMinInboxDriverVerDate: s__FILETIME; dwlMinInboxDriverVerVersion: uint64; }
export type s__DOC_INFO_1A = struct { pDocName: *char; pOutputFile: *char; pDatatype: *char; }
export type s__DOC_INFO_1W = struct { pDocName: *ushort; pOutputFile: *ushort; pDatatype: *ushort; }
export type s__FORM_INFO_1A = struct { Flags: ulong; pName: *char; Size: s_tagSIZE; ImageableArea: s__RECTL; }
export type s__FORM_INFO_1W = struct { Flags: ulong; pName: *ushort; Size: s_tagSIZE; ImageableArea: s__RECTL; }
export type s__FORM_INFO_2A = struct { Flags: ulong; pName: *char; Size: s_tagSIZE; ImageableArea: s__RECTL; pKeyword: *char; StringType: ulong; pMuiDll: *char; dwResourceId: ulong; pDisplayName: *char; wLangId: ushort; }
export type s__FORM_INFO_2W = struct { Flags: ulong; pName: *ushort; Size: s_tagSIZE; ImageableArea: s__RECTL; pKeyword: *char; StringType: ulong; pMuiDll: *ushort; dwResourceId: ulong; pDisplayName: *ushort; wLangId: ushort; }
export type s__DOC_INFO_2A = struct { pDocName: *char; pOutputFile: *char; pDatatype: *char; dwMode: ulong; JobId: ulong; }
export type s__DOC_INFO_2W = struct { pDocName: *ushort; pOutputFile: *ushort; pDatatype: *ushort; dwMode: ulong; JobId: ulong; }
export type s__DOC_INFO_3A = struct { pDocName: *char; pOutputFile: *char; pDatatype: *char; dwFlags: ulong; }
export type s__DOC_INFO_3W = struct { pDocName: *ushort; pOutputFile: *ushort; pDatatype: *ushort; dwFlags: ulong; }
export type s__PRINTPROCESSOR_INFO_1A = struct { pName: *char; }
export type s__PRINTPROCESSOR_INFO_1W = struct { pName: *ushort; }
export type s__PRINTPROCESSOR_CAPS_1 = struct { dwLevel: ulong; dwNupOptions: ulong; dwPageOrderFlags: ulong; dwNumberOfCopies: ulong; }
export type s__PRINTPROCESSOR_CAPS_2 = struct { dwLevel: ulong; dwNupOptions: ulong; dwPageOrderFlags: ulong; dwNumberOfCopies: ulong; dwDuplexHandlingCaps: ulong; dwNupDirectionCaps: ulong; dwNupBorderCaps: ulong; dwBookletHandlingCaps: ulong; dwScalingCaps: ulong; }
export type s__PORT_INFO_1A = struct { pName: *char; }
export type s__PORT_INFO_1W = struct { pName: *ushort; }
export type s__PORT_INFO_2A = struct { pPortName: *char; pMonitorName: *char; pDescription: *char; fPortType: ulong; Reserved: ulong; }
export type s__PORT_INFO_2W = struct { pPortName: *ushort; pMonitorName: *ushort; pDescription: *ushort; fPortType: ulong; Reserved: ulong; }
export type s__PORT_INFO_3A = struct { dwStatus: ulong; pszStatus: *char; dwSeverity: ulong; }
export type s__PORT_INFO_3W = struct { dwStatus: ulong; pszStatus: *ushort; dwSeverity: ulong; }
export type s__MONITOR_INFO_1A = struct { pName: *char; }
export type s__MONITOR_INFO_1W = struct { pName: *ushort; }
export type s__MONITOR_INFO_2A = struct { pName: *char; pEnvironment: *char; pDLLName: *char; }
export type s__MONITOR_INFO_2W = struct { pName: *ushort; pEnvironment: *ushort; pDLLName: *ushort; }
export type s__DATATYPES_INFO_1A = struct { pName: *char; }
export type s__DATATYPES_INFO_1W = struct { pName: *ushort; }
export type s__PRINTER_DEFAULTSA = struct { pDatatype: *char; pDevMode: *s__devicemodeA; DesiredAccess: ulong; }
export type s__PRINTER_DEFAULTSW = struct { pDatatype: *ushort; pDevMode: *s__devicemodeW; DesiredAccess: ulong; }
export type s__PRINTER_ENUM_VALUESA = struct { pValueName: *char; cbValueName: ulong; dwType: ulong; pData: *uint8; cbData: ulong; }
export type s__PRINTER_ENUM_VALUESW = struct { pValueName: *ushort; cbValueName: ulong; dwType: ulong; pData: *uint8; cbData: ulong; }
export type s__PRINTER_NOTIFY_OPTIONS_TYPE = struct { Type: ushort; Reserved0: ushort; Reserved1: ulong; Reserved2: ulong; Count: ulong; pFields: *ushort; }
export type s__PRINTER_NOTIFY_OPTIONS = struct { Version: ulong; Flags: ulong; Count: ulong; pTypes: *s__PRINTER_NOTIFY_OPTIONS_TYPE; }
export type s__PRINTER_NOTIFY_INFO_DATA = struct { Type: ushort; Field: ushort; Reserved: ulong; Id: ulong; NotifyData: struct #union { adwData: [2; ulong]; Data: struct { cbBuf: ulong; pBuf: *; }; }; }
export type s__PRINTER_NOTIFY_INFO = struct { Version: ulong; Flags: ulong; Count: ulong; aData: [1; s__PRINTER_NOTIFY_INFO_DATA]; }
export type s__BINARY_CONTAINER = struct { cbBuf: ulong; pData: *uint8; }
export type s__BIDI_DATA = struct { dwBidiType: ulong; u: struct #union { bData: int; iData: long; sData: *ushort; fData: float; biData: s__BINARY_CONTAINER; }; }
export type s__BIDI_REQUEST_DATA = struct { dwReqNumber: ulong; pSchema: *ushort; data: s__BIDI_DATA; }
export type s__BIDI_REQUEST_CONTAINER = struct { Version: ulong; Flags: ulong; Count: ulong; aData: [1; s__BIDI_REQUEST_DATA]; }
export type s__BIDI_RESPONSE_DATA = struct { dwResult: ulong; dwReqNumber: ulong; pSchema: *ushort; data: s__BIDI_DATA; }
export type s__BIDI_RESPONSE_CONTAINER = struct { Version: ulong; Flags: ulong; Count: ulong; aData: [1; s__BIDI_RESPONSE_DATA]; }
export type e_BIDI_TYPE = enum { BIDI_NULL; BIDI_INT = 1; BIDI_FLOAT = 2; BIDI_BOOL = 3; BIDI_STRING = 4; BIDI_TEXT = 5; BIDI_ENUM = 6; BIDI_BLOB = 7; }
export type s__PROVIDOR_INFO_1A = struct { pName: *char; pEnvironment: *char; pDLLName: *char; }
export type s__PROVIDOR_INFO_1W = struct { pName: *ushort; pEnvironment: *ushort; pDLLName: *ushort; }
export type s__PROVIDOR_INFO_2A = struct { pOrder: *char; }
export type s__PROVIDOR_INFO_2W = struct { pOrder: *ushort; }
export type e__PRINTER_OPTION_FLAGS = enum { PRINTER_OPTION_NO_CACHE = 1; PRINTER_OPTION_CACHE = 2; PRINTER_OPTION_CLIENT_CHANGE = 4; PRINTER_OPTION_NO_CLIENT_DATA = 8; }
export type s__PRINTER_OPTIONSA = struct { cbSize: uint; dwFlags: ulong; }
export type s__PRINTER_OPTIONSW = struct { cbSize: uint; dwFlags: ulong; }
export type s__PRINTER_CONNECTION_INFO_1A = struct { dwFlags: ulong; pszDriverName: *char; }
export type s__PRINTER_CONNECTION_INFO_1W = struct { dwFlags: ulong; pszDriverName: *ushort; }
export type s__CORE_PRINTER_DRIVERA = struct { CoreDriverGUID: s__GUID; ftDriverDate: s__FILETIME; dwlDriverVersion: uint64; szPackageID: [260; char]; }
export type s__CORE_PRINTER_DRIVERW = struct { CoreDriverGUID: s__GUID; ftDriverDate: s__FILETIME; dwlDriverVersion: uint64; szPackageID: [260; ushort]; }
export type e_EPrintPropertyType = enum { kPropertyTypeString = 1; kPropertyTypeInt32 = 2; kPropertyTypeInt64 = 3; kPropertyTypeByte = 4; kPropertyTypeTime = 5; kPropertyTypeDevMode = 6; kPropertyTypeSD = 7; kPropertyTypeNotificationReply = 8; kPropertyTypeNotificationOptions = 9; kPropertyTypeBuffer = 10; }
export type e_EPrintXPSJobProgress = enum { kAddingDocumentSequence; kDocumentSequenceAdded = 1; kAddingFixedDocument = 2; kFixedDocumentAdded = 3; kAddingFixedPage = 4; kFixedPageAdded = 5; kResourceAdded = 6; kFontAdded = 7; kImageAdded = 8; kXpsDocumentCommitted = 9; }
export type e_EPrintXPSJobOperation = enum { kJobProduction = 1; kJobConsumption = 2; }
export type s_PrintPropertyValue = struct { ePropertyType: e_EPrintPropertyType; value: struct #union { propertyByte: uint8; propertyString: *ushort; propertyInt32: long; propertyInt64: int64; propertyBlob: struct { cbBuf: ulong; pBuf: *; }; }; }
export type s_PrintNamedProperty = struct { propertyName: *ushort; propertyValue: s_PrintPropertyValue; }
export type s_PrintPropertiesCollection = struct { numberOfProperties: ulong; propertiesCollection: *s_PrintNamedProperty; }
export type e_PRINT_EXECUTION_CONTEXT = enum { PRINT_EXECUTION_CONTEXT_APPLICATION; PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1; PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2; PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3; PRINT_EXECUTION_CONTEXT_WOW64 = 4; }
export type s_PRINT_EXECUTION_DATA = struct { context: e_PRINT_EXECUTION_CONTEXT; clientAppPID: ulong; }
export type s__div_t = struct { quot: int; rem: int; }
export type s__ldiv_t = struct { quot: long; rem: long; }
export type s__lldiv_t = struct { quot: int64; rem: int64; }
export type s__LDOUBLE = struct { ld: [10; uint8]; }
export type s__CRT_DOUBLE = struct { x: double; }
export type s__CRT_FLOAT = struct { f: float; }
export type s__LONGDOUBLE = struct { x: float80; }
export type s__LDBL12 = struct { ld12: [12; uint8]; }
export type e_tagREGCLS = enum { REGCLS_SINGLEUSE; REGCLS_MULTIPLEUSE = 1; REGCLS_MULTI_SEPARATE = 2; REGCLS_SUSPENDED = 4; REGCLS_SURROGATE = 8; REGCLS_AGILE = 16; }
export type s_IRpcStubBuffer
export type e_tagCOINITBASE = enum { COINITBASE_MULTITHREADED; }
export type s_IUnknown
export type s_AsyncIUnknown
export type s_IClassFactory
export type s_IUnknownVtbl = struct { QueryInterface: def (*s_IUnknown, *s__GUID, **) -> (long); AddRef: def (*s_IUnknown) -> (ulong); Release: def (*s_IUnknown) -> (ulong); }
export type s_AsyncIUnknownVtbl = struct { QueryInterface: def (*s_AsyncIUnknown, *s__GUID, **) -> (long); AddRef: def (*s_AsyncIUnknown) -> (ulong); Release: def (*s_AsyncIUnknown) -> (ulong); Begin_QueryInterface: def (*s_AsyncIUnknown, *s__GUID) -> (long); Finish_QueryInterface: def (*s_AsyncIUnknown, **) -> (long); Begin_AddRef: def (*s_AsyncIUnknown) -> (long); Finish_AddRef: def (*s_AsyncIUnknown) -> (ulong); Begin_Release: def (*s_AsyncIUnknown) -> (long); Finish_Release: def (*s_AsyncIUnknown) -> (ulong); }
export type s_IClassFactoryVtbl = struct { QueryInterface: def (*s_IClassFactory, *s__GUID, **) -> (long); AddRef: def (*s_IClassFactory) -> (ulong); Release: def (*s_IClassFactory) -> (ulong); CreateInstance: def (*s_IClassFactory, *s_IUnknown, *s__GUID, **) -> (long); LockServer: def (*s_IClassFactory, int) -> (long); }
export type s_IMarshal
export type s_INoMarshal
export type s_IAgileObject
export type s_IActivationFilter
export type s_IMarshal2
export type s_IMalloc
export type s_IStdMarshalInfo
export type s_IExternalConnection
export type s_IMultiQI
export type s_AsyncIMultiQI
export type s_IInternalUnknown
export type s_IEnumUnknown
export type s_IEnumString
export type s_ISequentialStream
export type s_IStream
export type s_IRpcChannelBuffer2
export type s_IAsyncRpcChannelBuffer
export type s_IRpcChannelBuffer3
export type s_IRpcSyntaxNegotiate
export type s_IRpcProxyBuffer
export type s_IPSFactoryBuffer
export type s_IChannelHook
export type s_IClientSecurity
export type s_IServerSecurity
export type s_IRpcOptions
export type s_IGlobalOptions
export type s_ISurrogate
export type s_IGlobalInterfaceTable
export type s_ISynchronize
export type s_ISynchronizeHandle
export type s_ISynchronizeEvent
export type s_ISynchronizeContainer
export type s_ISynchronizeMutex
export type s_ICancelMethodCalls
export type s_IAsyncManager
export type s_ICallFactory
export type s_IRpcHelper
export type s_IReleaseMarshalBuffers
export type s_IWaitMultiple
export type s_IAddrTrackingControl
export type s_IAddrExclusionControl
export type s_IPipeByte
export type s_AsyncIPipeByte
export type s_IPipeLong
export type s_AsyncIPipeLong
export type s_IPipeDouble
export type s_AsyncIPipeDouble
export type s_IEnumContextProps
export type s_IContext
export type s_IObjContext
export type s_IComThreadingInfo
export type s_IProcessInitControl
export type s_IFastRundown
export type s_IMarshalingStream
export type s_IAgileReference
export type s_IMachineGlobalObjectTable
export type s_ISupportAllowLowerTrustActivation
export type s__COSERVERINFO = struct { dwReserved1: ulong; pwszName: *ushort; pAuthInfo: *s__COAUTHINFO; dwReserved2: ulong; }
export type s_IMarshalVtbl = struct { QueryInterface: def (*s_IMarshal, *s__GUID, **) -> (long); AddRef: def (*s_IMarshal) -> (ulong); Release: def (*s_IMarshal) -> (ulong); GetUnmarshalClass: def (*s_IMarshal, *s__GUID, *, ulong, *, ulong, *s__GUID) -> (long); GetMarshalSizeMax: def (*s_IMarshal, *s__GUID, *, ulong, *, ulong, *ulong) -> (long); MarshalInterface: def (*s_IMarshal, *s_IStream, *s__GUID, *, ulong, *, ulong) -> (long); UnmarshalInterface: def (*s_IMarshal, *s_IStream, *s__GUID, **) -> (long); ReleaseMarshalData: def (*s_IMarshal, *s_IStream) -> (long); DisconnectObject: def (*s_IMarshal, ulong) -> (long); }
export type s_INoMarshalVtbl = struct { QueryInterface: def (*s_INoMarshal, *s__GUID, **) -> (long); AddRef: def (*s_INoMarshal) -> (ulong); Release: def (*s_INoMarshal) -> (ulong); }
export type s_IAgileObjectVtbl = struct { QueryInterface: def (*s_IAgileObject, *s__GUID, **) -> (long); AddRef: def (*s_IAgileObject) -> (ulong); Release: def (*s_IAgileObject) -> (ulong); }
export type e_tagACTIVATIONTYPE = enum { ACTIVATIONTYPE_UNCATEGORIZED; ACTIVATIONTYPE_FROM_MONIKER = 1; ACTIVATIONTYPE_FROM_DATA = 2; ACTIVATIONTYPE_FROM_STORAGE = 4; ACTIVATIONTYPE_FROM_STREAM = 8; ACTIVATIONTYPE_FROM_FILE = 16; }
export type s_IActivationFilterVtbl = struct { QueryInterface: def (*s_IActivationFilter, *s__GUID, **) -> (long); AddRef: def (*s_IActivationFilter) -> (ulong); Release: def (*s_IActivationFilter) -> (ulong); HandleActivation: def (*s_IActivationFilter, ulong, *s__GUID, *s__GUID) -> (long); }
export type s_IMarshal2Vtbl = struct { QueryInterface: def (*s_IMarshal2, *s__GUID, **) -> (long); AddRef: def (*s_IMarshal2) -> (ulong); Release: def (*s_IMarshal2) -> (ulong); GetUnmarshalClass: def (*s_IMarshal2, *s__GUID, *, ulong, *, ulong, *s__GUID) -> (long); GetMarshalSizeMax: def (*s_IMarshal2, *s__GUID, *, ulong, *, ulong, *ulong) -> (long); MarshalInterface: def (*s_IMarshal2, *s_IStream, *s__GUID, *, ulong, *, ulong) -> (long); UnmarshalInterface: def (*s_IMarshal2, *s_IStream, *s__GUID, **) -> (long); ReleaseMarshalData: def (*s_IMarshal2, *s_IStream) -> (long); DisconnectObject: def (*s_IMarshal2, ulong) -> (long); }
export type s_IMallocVtbl = struct { QueryInterface: def (*s_IMalloc, *s__GUID, **) -> (long); AddRef: def (*s_IMalloc) -> (ulong); Release: def (*s_IMalloc) -> (ulong); Alloc: def (*s_IMalloc, uint64) -> (*); Realloc: def (*s_IMalloc, *, uint64) -> (*); Free: def (*s_IMalloc, *) -> (); GetSize: def (*s_IMalloc, *) -> (uint64); DidAlloc: def (*s_IMalloc, *) -> (int); HeapMinimize: def (*s_IMalloc) -> (); }
export type s_IStdMarshalInfoVtbl = struct { QueryInterface: def (*s_IStdMarshalInfo, *s__GUID, **) -> (long); AddRef: def (*s_IStdMarshalInfo) -> (ulong); Release: def (*s_IStdMarshalInfo) -> (ulong); GetClassForHandler: def (*s_IStdMarshalInfo, ulong, *, *s__GUID) -> (long); }
export type e_tagEXTCONN = enum { EXTCONN_STRONG = 1; EXTCONN_WEAK = 2; EXTCONN_CALLABLE = 4; }
export type s_IExternalConnectionVtbl = struct { QueryInterface: def (*s_IExternalConnection, *s__GUID, **) -> (long); AddRef: def (*s_IExternalConnection) -> (ulong); Release: def (*s_IExternalConnection) -> (ulong); AddConnection: def (*s_IExternalConnection, ulong, ulong) -> (ulong); ReleaseConnection: def (*s_IExternalConnection, ulong, ulong, int) -> (ulong); }
export type s_tagMULTI_QI = struct { pIID: *s__GUID; pItf: *s_IUnknown; hr: long; }
export type s_IMultiQIVtbl = struct { QueryInterface: def (*s_IMultiQI, *s__GUID, **) -> (long); AddRef: def (*s_IMultiQI) -> (ulong); Release: def (*s_IMultiQI) -> (ulong); QueryMultipleInterfaces: def (*s_IMultiQI, ulong, *s_tagMULTI_QI) -> (long); }
export type s_AsyncIMultiQIVtbl = struct { QueryInterface: def (*s_AsyncIMultiQI, *s__GUID, **) -> (long); AddRef: def (*s_AsyncIMultiQI) -> (ulong); Release: def (*s_AsyncIMultiQI) -> (ulong); Begin_QueryMultipleInterfaces: def (*s_AsyncIMultiQI, ulong, *s_tagMULTI_QI) -> (long); Finish_QueryMultipleInterfaces: def (*s_AsyncIMultiQI, *s_tagMULTI_QI) -> (long); }
export type s_IInternalUnknownVtbl = struct { QueryInterface: def (*s_IInternalUnknown, *s__GUID, **) -> (long); AddRef: def (*s_IInternalUnknown) -> (ulong); Release: def (*s_IInternalUnknown) -> (ulong); QueryInternalInterface: def (*s_IInternalUnknown, *s__GUID, **) -> (long); }
export type s_IEnumUnknownVtbl = struct { QueryInterface: def (*s_IEnumUnknown, *s__GUID, **) -> (long); AddRef: def (*s_IEnumUnknown) -> (ulong); Release: def (*s_IEnumUnknown) -> (ulong); Next: def (*s_IEnumUnknown, ulong, **s_IUnknown, *ulong) -> (long); Skip: def (*s_IEnumUnknown, ulong) -> (long); Reset: def (*s_IEnumUnknown) -> (long); Clone: def (*s_IEnumUnknown, **s_IEnumUnknown) -> (long); }
export type s_IEnumStringVtbl = struct { QueryInterface: def (*s_IEnumString, *s__GUID, **) -> (long); AddRef: def (*s_IEnumString) -> (ulong); Release: def (*s_IEnumString) -> (ulong); Next: def (*s_IEnumString, ulong, **ushort, *ulong) -> (long); Skip: def (*s_IEnumString, ulong) -> (long); Reset: def (*s_IEnumString) -> (long); Clone: def (*s_IEnumString, **s_IEnumString) -> (long); }
export type s_ISequentialStreamVtbl = struct { QueryInterface: def (*s_ISequentialStream, *s__GUID, **) -> (long); AddRef: def (*s_ISequentialStream) -> (ulong); Release: def (*s_ISequentialStream) -> (ulong); Read: def (*s_ISequentialStream, *, ulong, *ulong) -> (long); Write: def (*s_ISequentialStream, *, ulong, *ulong) -> (long); }
export type s_tagSTATSTG = struct { pwcsName: *ushort; type_: ulong; cbSize: u__ULARGE_INTEGER; mtime: s__FILETIME; ctime: s__FILETIME; atime: s__FILETIME; grfMode: ulong; grfLocksSupported: ulong; clsid: s__GUID; grfStateBits: ulong; reserved: ulong; }
export type e_tagSTGTY = enum { STGTY_STORAGE = 1; STGTY_STREAM = 2; STGTY_LOCKBYTES = 3; STGTY_PROPERTY = 4; }
export type e_tagSTREAM_SEEK = enum { STREAM_SEEK_SET; STREAM_SEEK_CUR = 1; STREAM_SEEK_END = 2; }
export type e_tagLOCKTYPE = enum { LOCK_WRITE = 1; LOCK_EXCLUSIVE = 2; LOCK_ONLYONCE = 4; }
export type s_IStreamVtbl = struct { QueryInterface: def (*s_IStream, *s__GUID, **) -> (long); AddRef: def (*s_IStream) -> (ulong); Release: def (*s_IStream) -> (ulong); Read: def (*s_IStream, *, ulong, *ulong) -> (long); Write: def (*s_IStream, *, ulong, *ulong) -> (long); Seek: def (*s_IStream, u__LARGE_INTEGER, ulong, *u__ULARGE_INTEGER) -> (long); SetSize: def (*s_IStream, u__ULARGE_INTEGER) -> (long); CopyTo: def (*s_IStream, *s_IStream, u__ULARGE_INTEGER, *u__ULARGE_INTEGER, *u__ULARGE_INTEGER) -> (long); Commit: def (*s_IStream, ulong) -> (long); Revert: def (*s_IStream) -> (long); LockRegion: def (*s_IStream, u__ULARGE_INTEGER, u__ULARGE_INTEGER, ulong) -> (long); UnlockRegion: def (*s_IStream, u__ULARGE_INTEGER, u__ULARGE_INTEGER, ulong) -> (long); Stat: def (*s_IStream, *s_tagSTATSTG, ulong) -> (long); Clone: def (*s_IStream, **s_IStream) -> (long); }
export type s_tagRPCOLEMESSAGE = struct { reserved1: *; dataRepresentation: ulong; Buffer: *; cbBuffer: ulong; iMethod: ulong; reserved2: [5; *]; rpcFlags: ulong; }
export type s_IRpcChannelBufferVtbl = struct { QueryInterface: def (*s_IRpcChannelBuffer, *s__GUID, **) -> (long); AddRef: def (*s_IRpcChannelBuffer) -> (ulong); Release: def (*s_IRpcChannelBuffer) -> (ulong); GetBuffer: def (*s_IRpcChannelBuffer, *s_tagRPCOLEMESSAGE, *s__GUID) -> (long); SendReceive: def (*s_IRpcChannelBuffer, *s_tagRPCOLEMESSAGE, *ulong) -> (long); FreeBuffer: def (*s_IRpcChannelBuffer, *s_tagRPCOLEMESSAGE) -> (long); GetDestCtx: def (*s_IRpcChannelBuffer, *ulong, **) -> (long); IsConnected: def (*s_IRpcChannelBuffer) -> (long); }
export type s_IRpcChannelBuffer2Vtbl = struct { QueryInterface: def (*s_IRpcChannelBuffer2, *s__GUID, **) -> (long); AddRef: def (*s_IRpcChannelBuffer2) -> (ulong); Release: def (*s_IRpcChannelBuffer2) -> (ulong); GetBuffer: def (*s_IRpcChannelBuffer2, *s_tagRPCOLEMESSAGE, *s__GUID) -> (long); SendReceive: def (*s_IRpcChannelBuffer2, *s_tagRPCOLEMESSAGE, *ulong) -> (long); FreeBuffer: def (*s_IRpcChannelBuffer2, *s_tagRPCOLEMESSAGE) -> (long); GetDestCtx: def (*s_IRpcChannelBuffer2, *ulong, **) -> (long); IsConnected: def (*s_IRpcChannelBuffer2) -> (long); GetProtocolVersion: def (*s_IRpcChannelBuffer2, *ulong) -> (long); }
export type s_IAsyncRpcChannelBufferVtbl = struct { QueryInterface: def (*s_IAsyncRpcChannelBuffer, *s__GUID, **) -> (long); AddRef: def (*s_IAsyncRpcChannelBuffer) -> (ulong); Release: def (*s_IAsyncRpcChannelBuffer) -> (ulong); GetBuffer: def (*s_IAsyncRpcChannelBuffer, *s_tagRPCOLEMESSAGE, *s__GUID) -> (long); SendReceive: def (*s_IAsyncRpcChannelBuffer, *s_tagRPCOLEMESSAGE, *ulong) -> (long); FreeBuffer: def (*s_IAsyncRpcChannelBuffer, *s_tagRPCOLEMESSAGE) -> (long); GetDestCtx: def (*s_IAsyncRpcChannelBuffer, *ulong, **) -> (long); IsConnected: def (*s_IAsyncRpcChannelBuffer) -> (long); GetProtocolVersion: def (*s_IAsyncRpcChannelBuffer, *ulong) -> (long); Send: def (*s_IAsyncRpcChannelBuffer, *s_tagRPCOLEMESSAGE, *s_ISynchronize, *ulong) -> (long); Receive: def (*s_IAsyncRpcChannelBuffer, *s_tagRPCOLEMESSAGE, *ulong) -> (long); GetDestCtxEx: def (*s_IAsyncRpcChannelBuffer, *s_tagRPCOLEMESSAGE, *ulong, **) -> (long); }
export type s_IRpcChannelBuffer3Vtbl = struct { QueryInterface: def (*s_IRpcChannelBuffer3, *s__GUID, **) -> (long); AddRef: def (*s_IRpcChannelBuffer3) -> (ulong); Release: def (*s_IRpcChannelBuffer3) -> (ulong); GetBuffer: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE, *s__GUID) -> (long); SendReceive: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE, *ulong) -> (long); FreeBuffer: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE) -> (long); GetDestCtx: def (*s_IRpcChannelBuffer3, *ulong, **) -> (long); IsConnected: def (*s_IRpcChannelBuffer3) -> (long); GetProtocolVersion: def (*s_IRpcChannelBuffer3, *ulong) -> (long); Send: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE, *ulong) -> (long); Receive: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE, ulong, *ulong) -> (long); Cancel: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE) -> (long); GetCallContext: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE, *s__GUID, **) -> (long); GetDestCtxEx: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE, *ulong, **) -> (long); GetState: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE, *ulong) -> (long); RegisterAsync: def (*s_IRpcChannelBuffer3, *s_tagRPCOLEMESSAGE, *s_IAsyncManager) -> (long); }
export type s_IRpcSyntaxNegotiateVtbl = struct { QueryInterface: def (*s_IRpcSyntaxNegotiate, *s__GUID, **) -> (long); AddRef: def (*s_IRpcSyntaxNegotiate) -> (ulong); Release: def (*s_IRpcSyntaxNegotiate) -> (ulong); NegotiateSyntax: def (*s_IRpcSyntaxNegotiate, *s_tagRPCOLEMESSAGE) -> (long); }
export type s_IRpcProxyBufferVtbl = struct { QueryInterface: def (*s_IRpcProxyBuffer, *s__GUID, **) -> (long); AddRef: def (*s_IRpcProxyBuffer) -> (ulong); Release: def (*s_IRpcProxyBuffer) -> (ulong); Connect: def (*s_IRpcProxyBuffer, *s_IRpcChannelBuffer) -> (long); Disconnect: def (*s_IRpcProxyBuffer) -> (); }
export type s_IRpcStubBufferVtbl = struct { QueryInterface: def (*s_IRpcStubBuffer, *s__GUID, **) -> (long); AddRef: def (*s_IRpcStubBuffer) -> (ulong); Release: def (*s_IRpcStubBuffer) -> (ulong); Connect: def (*s_IRpcStubBuffer, *s_IUnknown) -> (long); Disconnect: def (*s_IRpcStubBuffer) -> (); Invoke: def (*s_IRpcStubBuffer, *s_tagRPCOLEMESSAGE, *s_IRpcChannelBuffer) -> (long); IsIIDSupported: def (*s_IRpcStubBuffer, *s__GUID) -> (*s_IRpcStubBuffer); CountRefs: def (*s_IRpcStubBuffer) -> (ulong); DebugServerQueryInterface: def (*s_IRpcStubBuffer, **) -> (long); DebugServerRelease: def (*s_IRpcStubBuffer, *) -> (); }
export type s_IPSFactoryBufferVtbl = struct { QueryInterface: def (*s_IPSFactoryBuffer, *s__GUID, **) -> (long); AddRef: def (*s_IPSFactoryBuffer) -> (ulong); Release: def (*s_IPSFactoryBuffer) -> (ulong); CreateProxy: def (*s_IPSFactoryBuffer, *s_IUnknown, *s__GUID, **s_IRpcProxyBuffer, **) -> (long); CreateStub: def (*s_IPSFactoryBuffer, *s__GUID, *s_IUnknown, **s_IRpcStubBuffer) -> (long); }
export type s_SChannelHookCallInfo = struct { iid: s__GUID; cbSize: ulong; uCausality: s__GUID; dwServerPid: ulong; iMethod: ulong; pObject: *; }
export type s_IChannelHookVtbl = struct { QueryInterface: def (*s_IChannelHook, *s__GUID, **) -> (long); AddRef: def (*s_IChannelHook) -> (ulong); Release: def (*s_IChannelHook) -> (ulong); ClientGetSize: def (*s_IChannelHook, *s__GUID, *s__GUID, *ulong) -> (); ClientFillBuffer: def (*s_IChannelHook, *s__GUID, *s__GUID, *ulong, *) -> (); ClientNotify: def (*s_IChannelHook, *s__GUID, *s__GUID, ulong, *, ulong, long) -> (); ServerNotify: def (*s_IChannelHook, *s__GUID, *s__GUID, ulong, *, ulong) -> (); ServerGetSize: def (*s_IChannelHook, *s__GUID, *s__GUID, long, *ulong) -> (); ServerFillBuffer: def (*s_IChannelHook, *s__GUID, *s__GUID, *ulong, *, long) -> (); }
export type s_tagSOLE_AUTHENTICATION_SERVICE = struct { dwAuthnSvc: ulong; dwAuthzSvc: ulong; pPrincipalName: *ushort; hr: long; }
export type e_tagEOLE_AUTHENTICATION_CAPABILITIES = enum { EOAC_NONE; EOAC_MUTUAL_AUTH = 1; EOAC_STATIC_CLOAKING = 32; EOAC_DYNAMIC_CLOAKING = 64; EOAC_ANY_AUTHORITY = 128; EOAC_MAKE_FULLSIC = 256; EOAC_DEFAULT = 2048; EOAC_SECURE_REFS = 2; EOAC_ACCESS_CONTROL = 4; EOAC_APPID = 8; EOAC_DYNAMIC = 16; EOAC_REQUIRE_FULLSIC = 512; EOAC_AUTO_IMPERSONATE = 1024; EOAC_DISABLE_AAA = 4096; EOAC_NO_CUSTOM_MARSHAL = 8192; EOAC_RESERVED1 = 16384; }
export type s_tagSOLE_AUTHENTICATION_INFO = struct { dwAuthnSvc: ulong; dwAuthzSvc: ulong; pAuthInfo: *; }
export type s_tagSOLE_AUTHENTICATION_LIST = struct { cAuthInfo: ulong; aAuthInfo: *s_tagSOLE_AUTHENTICATION_INFO; }
export type s_IClientSecurityVtbl = struct { QueryInterface: def (*s_IClientSecurity, *s__GUID, **) -> (long); AddRef: def (*s_IClientSecurity) -> (ulong); Release: def (*s_IClientSecurity) -> (ulong); QueryBlanket: def (*s_IClientSecurity, *s_IUnknown, *ulong, *ulong, **ushort, *ulong, *ulong, **, *ulong) -> (long); SetBlanket: def (*s_IClientSecurity, *s_IUnknown, ulong, ulong, *ushort, ulong, ulong, *, ulong) -> (long); CopyProxy: def (*s_IClientSecurity, *s_IUnknown, **s_IUnknown) -> (long); }
export type s_IServerSecurityVtbl = struct { QueryInterface: def (*s_IServerSecurity, *s__GUID, **) -> (long); AddRef: def (*s_IServerSecurity) -> (ulong); Release: def (*s_IServerSecurity) -> (ulong); QueryBlanket: def (*s_IServerSecurity, *ulong, *ulong, **ushort, *ulong, *ulong, **, *ulong) -> (long); ImpersonateClient: def (*s_IServerSecurity) -> (long); RevertToSelf: def (*s_IServerSecurity) -> (long); IsImpersonating: def (*s_IServerSecurity) -> (int); }
export type e_tagRPCOPT_PROPERTIES = enum { COMBND_RPCTIMEOUT = 1; COMBND_SERVER_LOCALITY = 2; COMBND_RESERVED1 = 4; COMBND_RESERVED2 = 5; COMBND_RESERVED3 = 8; COMBND_RESERVED4 = 16; }
export type e_tagRPCOPT_SERVER_LOCALITY_VALUES = enum { SERVER_LOCALITY_PROCESS_LOCAL; SERVER_LOCALITY_MACHINE_LOCAL = 1; SERVER_LOCALITY_REMOTE = 2; }
export type s_IRpcOptionsVtbl = struct { QueryInterface: def (*s_IRpcOptions, *s__GUID, **) -> (long); AddRef: def (*s_IRpcOptions) -> (ulong); Release: def (*s_IRpcOptions) -> (ulong); Set: def (*s_IRpcOptions, *s_IUnknown, e_tagRPCOPT_PROPERTIES, uint64) -> (long); Query: def (*s_IRpcOptions, *s_IUnknown, e_tagRPCOPT_PROPERTIES, *uint64) -> (long); }
export type e_tagGLOBALOPT_PROPERTIES = enum { COMGLB_EXCEPTION_HANDLING = 1; COMGLB_APPID = 2; COMGLB_RPC_THREADPOOL_SETTING = 3; COMGLB_RO_SETTINGS = 4; COMGLB_UNMARSHALING_POLICY = 5; COMGLB_PROPERTIES_RESERVED1 = 6; COMGLB_PROPERTIES_RESERVED2 = 7; COMGLB_PROPERTIES_RESERVED3 = 8; }
export type e_tagGLOBALOPT_EH_VALUES = enum { COMGLB_EXCEPTION_HANDLE; COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1; COMGLB_EXCEPTION_DONOT_HANDLE = 1; COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2; }
export type e_tagGLOBALOPT_RPCTP_VALUES = enum { COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL; COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1; }
export type e_tagGLOBALOPT_RO_FLAGS = enum { COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 1; COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 2; COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4; COMGLB_FAST_RUNDOWN = 8; COMGLB_RESERVED1 = 16; COMGLB_RESERVED2 = 32; COMGLB_RESERVED3 = 64; COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 128; COMGLB_RESERVED4 = 256; COMGLB_RESERVED5 = 512; COMGLB_RESERVED6 = 1024; }
export type e_tagGLOBALOPT_UNMARSHALING_POLICY_VALUES = enum { COMGLB_UNMARSHALING_POLICY_NORMAL; COMGLB_UNMARSHALING_POLICY_STRONG = 1; COMGLB_UNMARSHALING_POLICY_HYBRID = 2; }
export type s_IGlobalOptionsVtbl = struct { QueryInterface: def (*s_IGlobalOptions, *s__GUID, **) -> (long); AddRef: def (*s_IGlobalOptions) -> (ulong); Release: def (*s_IGlobalOptions) -> (ulong); Set: def (*s_IGlobalOptions, e_tagGLOBALOPT_PROPERTIES, uint64) -> (long); Query: def (*s_IGlobalOptions, e_tagGLOBALOPT_PROPERTIES, *uint64) -> (long); }
export type s_ISurrogateVtbl = struct { QueryInterface: def (*s_ISurrogate, *s__GUID, **) -> (long); AddRef: def (*s_ISurrogate) -> (ulong); Release: def (*s_ISurrogate) -> (ulong); LoadDllServer: def (*s_ISurrogate, *s__GUID) -> (long); FreeSurrogate: def (*s_ISurrogate) -> (long); }
export type s_IGlobalInterfaceTableVtbl = struct { QueryInterface: def (*s_IGlobalInterfaceTable, *s__GUID, **) -> (long); AddRef: def (*s_IGlobalInterfaceTable) -> (ulong); Release: def (*s_IGlobalInterfaceTable) -> (ulong); RegisterInterfaceInGlobal: def (*s_IGlobalInterfaceTable, *s_IUnknown, *s__GUID, *ulong) -> (long); RevokeInterfaceFromGlobal: def (*s_IGlobalInterfaceTable, ulong) -> (long); GetInterfaceFromGlobal: def (*s_IGlobalInterfaceTable, ulong, *s__GUID, **) -> (long); }
export type s_ISynchronizeVtbl = struct { QueryInterface: def (*s_ISynchronize, *s__GUID, **) -> (long); AddRef: def (*s_ISynchronize) -> (ulong); Release: def (*s_ISynchronize) -> (ulong); Wait: def (*s_ISynchronize, ulong, ulong) -> (long); Signal: def (*s_ISynchronize) -> (long); Reset: def (*s_ISynchronize) -> (long); }
export type s_ISynchronizeHandleVtbl = struct { QueryInterface: def (*s_ISynchronizeHandle, *s__GUID, **) -> (long); AddRef: def (*s_ISynchronizeHandle) -> (ulong); Release: def (*s_ISynchronizeHandle) -> (ulong); GetHandle: def (*s_ISynchronizeHandle, **) -> (long); }
export type s_ISynchronizeEventVtbl = struct { QueryInterface: def (*s_ISynchronizeEvent, *s__GUID, **) -> (long); AddRef: def (*s_ISynchronizeEvent) -> (ulong); Release: def (*s_ISynchronizeEvent) -> (ulong); GetHandle: def (*s_ISynchronizeEvent, **) -> (long); SetEventHandle: def (*s_ISynchronizeEvent, **) -> (long); }
export type s_ISynchronizeContainerVtbl = struct { QueryInterface: def (*s_ISynchronizeContainer, *s__GUID, **) -> (long); AddRef: def (*s_ISynchronizeContainer) -> (ulong); Release: def (*s_ISynchronizeContainer) -> (ulong); AddSynchronize: def (*s_ISynchronizeContainer, *s_ISynchronize) -> (long); WaitMultiple: def (*s_ISynchronizeContainer, ulong, ulong, **s_ISynchronize) -> (long); }
export type s_ISynchronizeMutexVtbl = struct { QueryInterface: def (*s_ISynchronizeMutex, *s__GUID, **) -> (long); AddRef: def (*s_ISynchronizeMutex) -> (ulong); Release: def (*s_ISynchronizeMutex) -> (ulong); Wait: def (*s_ISynchronizeMutex, ulong, ulong) -> (long); Signal: def (*s_ISynchronizeMutex) -> (long); Reset: def (*s_ISynchronizeMutex) -> (long); ReleaseMutex: def (*s_ISynchronizeMutex) -> (long); }
export type s_ICancelMethodCallsVtbl = struct { QueryInterface: def (*s_ICancelMethodCalls, *s__GUID, **) -> (long); AddRef: def (*s_ICancelMethodCalls) -> (ulong); Release: def (*s_ICancelMethodCalls) -> (ulong); Cancel: def (*s_ICancelMethodCalls, ulong) -> (long); TestCancel: def (*s_ICancelMethodCalls) -> (long); }
export type e_tagDCOM_CALL_STATE = enum { DCOM_NONE; DCOM_CALL_COMPLETE = 1; DCOM_CALL_CANCELED = 2; }
export type s_IAsyncManagerVtbl = struct { QueryInterface: def (*s_IAsyncManager, *s__GUID, **) -> (long); AddRef: def (*s_IAsyncManager) -> (ulong); Release: def (*s_IAsyncManager) -> (ulong); CompleteCall: def (*s_IAsyncManager, long) -> (long); GetCallContext: def (*s_IAsyncManager, *s__GUID, **) -> (long); GetState: def (*s_IAsyncManager, *ulong) -> (long); }
export type s_ICallFactoryVtbl = struct { QueryInterface: def (*s_ICallFactory, *s__GUID, **) -> (long); AddRef: def (*s_ICallFactory) -> (ulong); Release: def (*s_ICallFactory) -> (ulong); CreateCall: def (*s_ICallFactory, *s__GUID, *s_IUnknown, *s__GUID, **s_IUnknown) -> (long); }
export type s_IRpcHelperVtbl = struct { QueryInterface: def (*s_IRpcHelper, *s__GUID, **) -> (long); AddRef: def (*s_IRpcHelper) -> (ulong); Release: def (*s_IRpcHelper) -> (ulong); GetDCOMProtocolVersion: def (*s_IRpcHelper, *ulong) -> (long); GetIIDFromOBJREF: def (*s_IRpcHelper, *, **s__GUID) -> (long); }
export type s_IReleaseMarshalBuffersVtbl = struct { QueryInterface: def (*s_IReleaseMarshalBuffers, *s__GUID, **) -> (long); AddRef: def (*s_IReleaseMarshalBuffers) -> (ulong); Release: def (*s_IReleaseMarshalBuffers) -> (ulong); ReleaseMarshalBuffer: def (*s_IReleaseMarshalBuffers, *s_tagRPCOLEMESSAGE, ulong, *s_IUnknown) -> (long); }
export type s_IWaitMultipleVtbl = struct { QueryInterface: def (*s_IWaitMultiple, *s__GUID, **) -> (long); AddRef: def (*s_IWaitMultiple) -> (ulong); Release: def (*s_IWaitMultiple) -> (ulong); WaitMultiple: def (*s_IWaitMultiple, ulong, **s_ISynchronize) -> (long); AddSynchronize: def (*s_IWaitMultiple, *s_ISynchronize) -> (long); }
export type s_IAddrTrackingControlVtbl = struct { QueryInterface: def (*s_IAddrTrackingControl, *s__GUID, **) -> (long); AddRef: def (*s_IAddrTrackingControl) -> (ulong); Release: def (*s_IAddrTrackingControl) -> (ulong); EnableCOMDynamicAddrTracking: def (*s_IAddrTrackingControl) -> (long); DisableCOMDynamicAddrTracking: def (*s_IAddrTrackingControl) -> (long); }
export type s_IAddrExclusionControlVtbl = struct { QueryInterface: def (*s_IAddrExclusionControl, *s__GUID, **) -> (long); AddRef: def (*s_IAddrExclusionControl) -> (ulong); Release: def (*s_IAddrExclusionControl) -> (ulong); GetCurrentAddrExclusionList: def (*s_IAddrExclusionControl, *s__GUID, **) -> (long); UpdateAddrExclusionList: def (*s_IAddrExclusionControl, *s_IUnknown) -> (long); }
export type s_IPipeByteVtbl = struct { QueryInterface: def (*s_IPipeByte, *s__GUID, **) -> (long); AddRef: def (*s_IPipeByte) -> (ulong); Release: def (*s_IPipeByte) -> (ulong); Pull: def (*s_IPipeByte, *uint8, ulong, *ulong) -> (long); Push: def (*s_IPipeByte, *uint8, ulong) -> (long); }
export type s_AsyncIPipeByteVtbl = struct { QueryInterface: def (*s_AsyncIPipeByte, *s__GUID, **) -> (long); AddRef: def (*s_AsyncIPipeByte) -> (ulong); Release: def (*s_AsyncIPipeByte) -> (ulong); Begin_Pull: def (*s_AsyncIPipeByte, ulong) -> (long); Finish_Pull: def (*s_AsyncIPipeByte, *uint8, *ulong) -> (long); Begin_Push: def (*s_AsyncIPipeByte, *uint8, ulong) -> (long); Finish_Push: def (*s_AsyncIPipeByte) -> (long); }
export type s_IPipeLongVtbl = struct { QueryInterface: def (*s_IPipeLong, *s__GUID, **) -> (long); AddRef: def (*s_IPipeLong) -> (ulong); Release: def (*s_IPipeLong) -> (ulong); Pull: def (*s_IPipeLong, *long, ulong, *ulong) -> (long); Push: def (*s_IPipeLong, *long, ulong) -> (long); }
export type s_AsyncIPipeLongVtbl = struct { QueryInterface: def (*s_AsyncIPipeLong, *s__GUID, **) -> (long); AddRef: def (*s_AsyncIPipeLong) -> (ulong); Release: def (*s_AsyncIPipeLong) -> (ulong); Begin_Pull: def (*s_AsyncIPipeLong, ulong) -> (long); Finish_Pull: def (*s_AsyncIPipeLong, *long, *ulong) -> (long); Begin_Push: def (*s_AsyncIPipeLong, *long, ulong) -> (long); Finish_Push: def (*s_AsyncIPipeLong) -> (long); }
export type s_IPipeDoubleVtbl = struct { QueryInterface: def (*s_IPipeDouble, *s__GUID, **) -> (long); AddRef: def (*s_IPipeDouble) -> (ulong); Release: def (*s_IPipeDouble) -> (ulong); Pull: def (*s_IPipeDouble, *double, ulong, *ulong) -> (long); Push: def (*s_IPipeDouble, *double, ulong) -> (long); }
export type s_AsyncIPipeDoubleVtbl = struct { QueryInterface: def (*s_AsyncIPipeDouble, *s__GUID, **) -> (long); AddRef: def (*s_AsyncIPipeDouble) -> (ulong); Release: def (*s_AsyncIPipeDouble) -> (ulong); Begin_Pull: def (*s_AsyncIPipeDouble, ulong) -> (long); Finish_Pull: def (*s_AsyncIPipeDouble, *double, *ulong) -> (long); Begin_Push: def (*s_AsyncIPipeDouble, *double, ulong) -> (long); Finish_Push: def (*s_AsyncIPipeDouble) -> (long); }
export type e__APTTYPEQUALIFIER = enum { APTTYPEQUALIFIER_NONE; APTTYPEQUALIFIER_IMPLICIT_MTA = 1; APTTYPEQUALIFIER_NA_ON_MTA = 2; APTTYPEQUALIFIER_NA_ON_STA = 3; APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4; APTTYPEQUALIFIER_NA_ON_MAINSTA = 5; APTTYPEQUALIFIER_APPLICATION_STA = 6; APTTYPEQUALIFIER_RESERVED_1 = 7; }
export type e__APTTYPE = enum { APTTYPE_CURRENT = -1; APTTYPE_STA; APTTYPE_MTA = 1; APTTYPE_NA = 2; APTTYPE_MAINSTA = 3; }
export type e__THDTYPE = enum { THDTYPE_BLOCKMESSAGES; THDTYPE_PROCESSMESSAGES = 1; }
export type s_IComThreadingInfoVtbl = struct { QueryInterface: def (*s_IComThreadingInfo, *s__GUID, **) -> (long); AddRef: def (*s_IComThreadingInfo) -> (ulong); Release: def (*s_IComThreadingInfo) -> (ulong); GetCurrentApartmentType: def (*s_IComThreadingInfo, *e__APTTYPE) -> (long); GetCurrentThreadType: def (*s_IComThreadingInfo, *e__THDTYPE) -> (long); GetCurrentLogicalThreadId: def (*s_IComThreadingInfo, *s__GUID) -> (long); SetCurrentLogicalThreadId: def (*s_IComThreadingInfo, *s__GUID) -> (long); }
export type s_IProcessInitControlVtbl = struct { QueryInterface: def (*s_IProcessInitControl, *s__GUID, **) -> (long); AddRef: def (*s_IProcessInitControl) -> (ulong); Release: def (*s_IProcessInitControl) -> (ulong); ResetInitializerTimeout: def (*s_IProcessInitControl, ulong) -> (long); }
export type s_IFastRundownVtbl = struct { QueryInterface: def (*s_IFastRundown, *s__GUID, **) -> (long); AddRef: def (*s_IFastRundown) -> (ulong); Release: def (*s_IFastRundown) -> (ulong); }
export type e_CO_MARSHALING_CONTEXT_ATTRIBUTES = enum { CO_MARSHALING_SOURCE_IS_APP_CONTAINER; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = -2147483648; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = -2147483647; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = -2147483646; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = -2147483645; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = -2147483644; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = -2147483643; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = -2147483642; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = -2147483641; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = -2147483640; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = -2147483639; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = -2147483638; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = -2147483637; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = -2147483636; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = -2147483635; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = -2147483634; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = -2147483633; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = -2147483632; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = -2147483631; }
export type s_IMarshalingStreamVtbl = struct { QueryInterface: def (*s_IMarshalingStream, *s__GUID, **) -> (long); AddRef: def (*s_IMarshalingStream) -> (ulong); Release: def (*s_IMarshalingStream) -> (ulong); Read: def (*s_IMarshalingStream, *, ulong, *ulong) -> (long); Write: def (*s_IMarshalingStream, *, ulong, *ulong) -> (long); Seek: def (*s_IMarshalingStream, u__LARGE_INTEGER, ulong, *u__ULARGE_INTEGER) -> (long); SetSize: def (*s_IMarshalingStream, u__ULARGE_INTEGER) -> (long); CopyTo: def (*s_IMarshalingStream, *s_IStream, u__ULARGE_INTEGER, *u__ULARGE_INTEGER, *u__ULARGE_INTEGER) -> (long); Commit: def (*s_IMarshalingStream, ulong) -> (long); Revert: def (*s_IMarshalingStream) -> (long); LockRegion: def (*s_IMarshalingStream, u__ULARGE_INTEGER, u__ULARGE_INTEGER, ulong) -> (long); UnlockRegion: def (*s_IMarshalingStream, u__ULARGE_INTEGER, u__ULARGE_INTEGER, ulong) -> (long); Stat: def (*s_IMarshalingStream, *s_tagSTATSTG, ulong) -> (long); Clone: def (*s_IMarshalingStream, **s_IStream) -> (long); GetMarshalingContextAttribute: def (*s_IMarshalingStream, e_CO_MARSHALING_CONTEXT_ATTRIBUTES, *uint64) -> (long); }
export type s_IAgileReferenceVtbl = struct { QueryInterface: def (*s_IAgileReference, *s__GUID, **) -> (long); AddRef: def (*s_IAgileReference) -> (ulong); Release: def (*s_IAgileReference) -> (ulong); Resolve: def (*s_IAgileReference, *s__GUID, **) -> (long); }
export type s_MachineGlobalObjectTableRegistrationToken__
export type s_IMachineGlobalObjectTableVtbl = struct { QueryInterface: def (*s_IMachineGlobalObjectTable, *s__GUID, **) -> (long); AddRef: def (*s_IMachineGlobalObjectTable) -> (ulong); Release: def (*s_IMachineGlobalObjectTable) -> (ulong); RegisterObject: def (*s_IMachineGlobalObjectTable, *s__GUID, *ushort, *s_IUnknown, **s_MachineGlobalObjectTableRegistrationToken__) -> (long); GetObjectA: def (*s_IMachineGlobalObjectTable, *s__GUID, *ushort, *s__GUID, **) -> (long); RevokeObject: def (*s_IMachineGlobalObjectTable, *s_MachineGlobalObjectTableRegistrationToken__) -> (long); }
export type s_ISupportAllowLowerTrustActivationVtbl = struct { QueryInterface: def (*s_ISupportAllowLowerTrustActivation, *s__GUID, **) -> (long); AddRef: def (*s_ISupportAllowLowerTrustActivation) -> (ulong); Release: def (*s_ISupportAllowLowerTrustActivation) -> (ulong); }
export type s_tagServerInformation = struct { dwServerPid: ulong; dwServerTid: ulong; ui64ServerAddress: uint64; }
export type s_CO_MTA_USAGE_COOKIE__
export type e_tagSTDMSHLFLAGS = enum { SMEXF_SERVER = 1; SMEXF_HANDLER = 2; }
export type s_tagPROPVARIANT
export type e_tagCOWAIT_FLAGS = enum { COWAIT_DEFAULT; COWAIT_WAITALL = 1; COWAIT_ALERTABLE = 2; COWAIT_INPUTAVAILABLE = 4; COWAIT_DISPATCH_CALLS = 8; COWAIT_DISPATCH_WINDOW_MESSAGES = 16; }
export type e_CWMO_FLAGS = enum { CWMO_DEFAULT; CWMO_DISPATCH_CALLS = 1; CWMO_DISPATCH_WINDOW_MESSAGES = 2; }
export type s_CO_DEVICE_CATALOG_COOKIE__
export type s_IMallocSpy
export type s_IBindCtx
export type s_IEnumMoniker
export type s_IRunnableObject
export type s_IRunningObjectTable
export type s_IPersist
export type s_IPersistStream
export type s_IMoniker
export type s_IROTData
export type s_IEnumSTATSTG
export type s_IStorage
export type s_IPersistFile
export type s_IPersistStorage
export type s_ILockBytes
export type s_IEnumFORMATETC
export type s_IEnumSTATDATA
export type s_IRootStorage
export type s_IAdviseSink
export type s_AsyncIAdviseSink
export type s_IAdviseSink2
export type s_AsyncIAdviseSink2
export type s_IDataObject
export type s_IDataAdviseHolder
export type s_IMessageFilter
export type s_IClassActivator
export type s_IFillLockBytes
export type s_IProgressNotify
export type s_ILayoutStorage
export type s_IBlockingLock
export type s_ITimeAndNoticeControl
export type s_IOplockStorage
export type s_IDirectWriterLock
export type s_IUrlMon
export type s_IForegroundTransfer
export type s_IThumbnailExtractor
export type s_IDummyHICONIncluder
export type s_IProcessLock
export type s_ISurrogateService
export type s_IInitializeSpy
export type s_IApartmentShutdown
export type s_IMallocSpyVtbl = struct { QueryInterface: def (*s_IMallocSpy, *s__GUID, **) -> (long); AddRef: def (*s_IMallocSpy) -> (ulong); Release: def (*s_IMallocSpy) -> (ulong); PreAlloc: def (*s_IMallocSpy, uint64) -> (uint64); PostAlloc: def (*s_IMallocSpy, *) -> (*); PreFree: def (*s_IMallocSpy, *, int) -> (*); PostFree: def (*s_IMallocSpy, int) -> (); PreRealloc: def (*s_IMallocSpy, *, uint64, **, int) -> (uint64); PostRealloc: def (*s_IMallocSpy, *, int) -> (*); PreGetSize: def (*s_IMallocSpy, *, int) -> (*); PostGetSize: def (*s_IMallocSpy, uint64, int) -> (uint64); PreDidAlloc: def (*s_IMallocSpy, *, int) -> (*); PostDidAlloc: def (*s_IMallocSpy, *, int, int) -> (int); PreHeapMinimize: def (*s_IMallocSpy) -> (); PostHeapMinimize: def (*s_IMallocSpy) -> (); }
export type s_tagBIND_OPTS = struct { cbStruct: ulong; grfFlags: ulong; grfMode: ulong; dwTickCountDeadline: ulong; }
export type s_tagBIND_OPTS2 = struct { cbStruct: ulong; grfFlags: ulong; grfMode: ulong; dwTickCountDeadline: ulong; dwTrackFlags: ulong; dwClassContext: ulong; locale: ulong; pServerInfo: *s__COSERVERINFO; }
export type s_tagBIND_OPTS3 = struct { cbStruct: ulong; grfFlags: ulong; grfMode: ulong; dwTickCountDeadline: ulong; dwTrackFlags: ulong; dwClassContext: ulong; locale: ulong; pServerInfo: *s__COSERVERINFO; hwnd: *s_HWND__; }
export type e_tagBIND_FLAGS = enum { BIND_MAYBOTHERUSER = 1; BIND_JUSTTESTEXISTENCE = 2; }
export type s_IBindCtxVtbl = struct { QueryInterface: def (*s_IBindCtx, *s__GUID, **) -> (long); AddRef: def (*s_IBindCtx) -> (ulong); Release: def (*s_IBindCtx) -> (ulong); RegisterObjectBound: def (*s_IBindCtx, *s_IUnknown) -> (long); RevokeObjectBound: def (*s_IBindCtx, *s_IUnknown) -> (long); ReleaseBoundObjects: def (*s_IBindCtx) -> (long); SetBindOptions: def (*s_IBindCtx, *s_tagBIND_OPTS) -> (long); GetBindOptions: def (*s_IBindCtx, *s_tagBIND_OPTS) -> (long); GetRunningObjectTable: def (*s_IBindCtx, **s_IRunningObjectTable) -> (long); RegisterObjectParam: def (*s_IBindCtx, *ushort, *s_IUnknown) -> (long); GetObjectParam: def (*s_IBindCtx, *ushort, **s_IUnknown) -> (long); EnumObjectParam: def (*s_IBindCtx, **s_IEnumString) -> (long); RevokeObjectParam: def (*s_IBindCtx, *ushort) -> (long); }
export type s_IEnumMonikerVtbl = struct { QueryInterface: def (*s_IEnumMoniker, *s__GUID, **) -> (long); AddRef: def (*s_IEnumMoniker) -> (ulong); Release: def (*s_IEnumMoniker) -> (ulong); Next: def (*s_IEnumMoniker, ulong, **s_IMoniker, *ulong) -> (long); Skip: def (*s_IEnumMoniker, ulong) -> (long); Reset: def (*s_IEnumMoniker) -> (long); Clone: def (*s_IEnumMoniker, **s_IEnumMoniker) -> (long); }
export type s_IRunnableObjectVtbl = struct { QueryInterface: def (*s_IRunnableObject, *s__GUID, **) -> (long); AddRef: def (*s_IRunnableObject) -> (ulong); Release: def (*s_IRunnableObject) -> (ulong); GetRunningClass: def (*s_IRunnableObject, *s__GUID) -> (long); Run: def (*s_IRunnableObject, *s_IBindCtx) -> (long); IsRunning: def (*s_IRunnableObject) -> (int); LockRunning: def (*s_IRunnableObject, int, int) -> (long); SetContainedObject: def (*s_IRunnableObject, int) -> (long); }
export type s_IRunningObjectTableVtbl = struct { QueryInterface: def (*s_IRunningObjectTable, *s__GUID, **) -> (long); AddRef: def (*s_IRunningObjectTable) -> (ulong); Release: def (*s_IRunningObjectTable) -> (ulong); Register: def (*s_IRunningObjectTable, ulong, *s_IUnknown, *s_IMoniker, *ulong) -> (long); Revoke: def (*s_IRunningObjectTable, ulong) -> (long); IsRunning: def (*s_IRunningObjectTable, *s_IMoniker) -> (long); GetObjectA: def (*s_IRunningObjectTable, *s_IMoniker, **s_IUnknown) -> (long); NoteChangeTime: def (*s_IRunningObjectTable, ulong, *s__FILETIME) -> (long); GetTimeOfLastChange: def (*s_IRunningObjectTable, *s_IMoniker, *s__FILETIME) -> (long); EnumRunning: def (*s_IRunningObjectTable, **s_IEnumMoniker) -> (long); }
export type s_IPersistVtbl = struct { QueryInterface: def (*s_IPersist, *s__GUID, **) -> (long); AddRef: def (*s_IPersist) -> (ulong); Release: def (*s_IPersist) -> (ulong); GetClassID: def (*s_IPersist, *s__GUID) -> (long); }
export type s_IPersistStreamVtbl = struct { QueryInterface: def (*s_IPersistStream, *s__GUID, **) -> (long); AddRef: def (*s_IPersistStream) -> (ulong); Release: def (*s_IPersistStream) -> (ulong); GetClassID: def (*s_IPersistStream, *s__GUID) -> (long); IsDirty: def (*s_IPersistStream) -> (long); Load: def (*s_IPersistStream, *s_IStream) -> (long); Save: def (*s_IPersistStream, *s_IStream, int) -> (long); GetSizeMax: def (*s_IPersistStream, *u__ULARGE_INTEGER) -> (long); }
export type e_tagMKSYS = enum { MKSYS_NONE; MKSYS_GENERICCOMPOSITE = 1; MKSYS_FILEMONIKER = 2; MKSYS_ANTIMONIKER = 3; MKSYS_ITEMMONIKER = 4; MKSYS_POINTERMONIKER = 5; MKSYS_CLASSMONIKER = 7; MKSYS_OBJREFMONIKER = 8; MKSYS_SESSIONMONIKER = 9; MKSYS_LUAMONIKER = 10; }
export type e_tagMKREDUCE = enum { MKRREDUCE_ONE = 196608; MKRREDUCE_TOUSER = 131072; MKRREDUCE_THROUGHUSER = 65536; MKRREDUCE_ALL; }
export type s_IMonikerVtbl = struct { QueryInterface: def (*s_IMoniker, *s__GUID, **) -> (long); AddRef: def (*s_IMoniker) -> (ulong); Release: def (*s_IMoniker) -> (ulong); GetClassID: def (*s_IMoniker, *s__GUID) -> (long); IsDirty: def (*s_IMoniker) -> (long); Load: def (*s_IMoniker, *s_IStream) -> (long); Save: def (*s_IMoniker, *s_IStream, int) -> (long); GetSizeMax: def (*s_IMoniker, *u__ULARGE_INTEGER) -> (long); BindToObject: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *s__GUID, **) -> (long); BindToStorage: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *s__GUID, **) -> (long); Reduce: def (*s_IMoniker, *s_IBindCtx, ulong, **s_IMoniker, **s_IMoniker) -> (long); ComposeWith: def (*s_IMoniker, *s_IMoniker, int, **s_IMoniker) -> (long); Enum: def (*s_IMoniker, int, **s_IEnumMoniker) -> (long); IsEqual: def (*s_IMoniker, *s_IMoniker) -> (long); Hash: def (*s_IMoniker, *ulong) -> (long); IsRunning: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *s_IMoniker) -> (long); GetTimeOfLastChange: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *s__FILETIME) -> (long); Inverse: def (*s_IMoniker, **s_IMoniker) -> (long); CommonPrefixWith: def (*s_IMoniker, *s_IMoniker, **s_IMoniker) -> (long); RelativePathTo: def (*s_IMoniker, *s_IMoniker, **s_IMoniker) -> (long); GetDisplayName: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, **ushort) -> (long); ParseDisplayName: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *ushort, *ulong, **s_IMoniker) -> (long); IsSystemMoniker: def (*s_IMoniker, *ulong) -> (long); }
export type s_IROTDataVtbl = struct { QueryInterface: def (*s_IROTData, *s__GUID, **) -> (long); AddRef: def (*s_IROTData) -> (ulong); Release: def (*s_IROTData) -> (ulong); GetComparisonData: def (*s_IROTData, *uint8, ulong, *ulong) -> (long); }
export type s_IEnumSTATSTGVtbl = struct { QueryInterface: def (*s_IEnumSTATSTG, *s__GUID, **) -> (long); AddRef: def (*s_IEnumSTATSTG) -> (ulong); Release: def (*s_IEnumSTATSTG) -> (ulong); Next: def (*s_IEnumSTATSTG, ulong, *s_tagSTATSTG, *ulong) -> (long); Skip: def (*s_IEnumSTATSTG, ulong) -> (long); Reset: def (*s_IEnumSTATSTG) -> (long); Clone: def (*s_IEnumSTATSTG, **s_IEnumSTATSTG) -> (long); }
export type s_tagRemSNB = struct { ulCntStr: ulong; ulCntChar: ulong; rgString: [1; ushort]; }
export type s_IStorageVtbl = struct { QueryInterface: def (*s_IStorage, *s__GUID, **) -> (long); AddRef: def (*s_IStorage) -> (ulong); Release: def (*s_IStorage) -> (ulong); CreateStream: def (*s_IStorage, *ushort, ulong, ulong, ulong, **s_IStream) -> (long); OpenStream: def (*s_IStorage, *ushort, *, ulong, ulong, **s_IStream) -> (long); CreateStorage: def (*s_IStorage, *ushort, ulong, ulong, ulong, **s_IStorage) -> (long); OpenStorage: def (*s_IStorage, *ushort, *s_IStorage, ulong, **ushort, ulong, **s_IStorage) -> (long); CopyTo: def (*s_IStorage, ulong, *s__GUID, **ushort, *s_IStorage) -> (long); MoveElementTo: def (*s_IStorage, *ushort, *s_IStorage, *ushort, ulong) -> (long); Commit: def (*s_IStorage, ulong) -> (long); Revert: def (*s_IStorage) -> (long); EnumElements: def (*s_IStorage, ulong, *, ulong, **s_IEnumSTATSTG) -> (long); DestroyElement: def (*s_IStorage, *ushort) -> (long); RenameElement: def (*s_IStorage, *ushort, *ushort) -> (long); SetElementTimes: def (*s_IStorage, *ushort, *s__FILETIME, *s__FILETIME, *s__FILETIME) -> (long); SetClass: def (*s_IStorage, *s__GUID) -> (long); SetStateBits: def (*s_IStorage, ulong, ulong) -> (long); Stat: def (*s_IStorage, *s_tagSTATSTG, ulong) -> (long); }
export type s_IPersistFileVtbl = struct { QueryInterface: def (*s_IPersistFile, *s__GUID, **) -> (long); AddRef: def (*s_IPersistFile) -> (ulong); Release: def (*s_IPersistFile) -> (ulong); GetClassID: def (*s_IPersistFile, *s__GUID) -> (long); IsDirty: def (*s_IPersistFile) -> (long); Load: def (*s_IPersistFile, *ushort, ulong) -> (long); Save: def (*s_IPersistFile, *ushort, int) -> (long); SaveCompleted: def (*s_IPersistFile, *ushort) -> (long); GetCurFile: def (*s_IPersistFile, **ushort) -> (long); }
export type s_IPersistStorageVtbl = struct { QueryInterface: def (*s_IPersistStorage, *s__GUID, **) -> (long); AddRef: def (*s_IPersistStorage) -> (ulong); Release: def (*s_IPersistStorage) -> (ulong); GetClassID: def (*s_IPersistStorage, *s__GUID) -> (long); IsDirty: def (*s_IPersistStorage) -> (long); InitNew: def (*s_IPersistStorage, *s_IStorage) -> (long); Load: def (*s_IPersistStorage, *s_IStorage) -> (long); Save: def (*s_IPersistStorage, *s_IStorage, int) -> (long); SaveCompleted: def (*s_IPersistStorage, *s_IStorage) -> (long); HandsOffStorage: def (*s_IPersistStorage) -> (long); }
export type s_ILockBytesVtbl = struct { QueryInterface: def (*s_ILockBytes, *s__GUID, **) -> (long); AddRef: def (*s_ILockBytes) -> (ulong); Release: def (*s_ILockBytes) -> (ulong); ReadAt: def (*s_ILockBytes, u__ULARGE_INTEGER, *, ulong, *ulong) -> (long); WriteAt: def (*s_ILockBytes, u__ULARGE_INTEGER, *, ulong, *ulong) -> (long); Flush: def (*s_ILockBytes) -> (long); SetSize: def (*s_ILockBytes, u__ULARGE_INTEGER) -> (long); LockRegion: def (*s_ILockBytes, u__ULARGE_INTEGER, u__ULARGE_INTEGER, ulong) -> (long); UnlockRegion: def (*s_ILockBytes, u__ULARGE_INTEGER, u__ULARGE_INTEGER, ulong) -> (long); Stat: def (*s_ILockBytes, *s_tagSTATSTG, ulong) -> (long); }
export type s_tagDVTARGETDEVICE = struct { tdSize: ulong; tdDriverNameOffset: ushort; tdDeviceNameOffset: ushort; tdPortNameOffset: ushort; tdExtDevmodeOffset: ushort; tdData: [1; uint8]; }
export type s_tagFORMATETC = struct { cfFormat: ushort; ptd: *s_tagDVTARGETDEVICE; dwAspect: ulong; lindex: long; tymed: ulong; }
export type s_IEnumFORMATETCVtbl = struct { QueryInterface: def (*s_IEnumFORMATETC, *s__GUID, **) -> (long); AddRef: def (*s_IEnumFORMATETC) -> (ulong); Release: def (*s_IEnumFORMATETC) -> (ulong); Next: def (*s_IEnumFORMATETC, ulong, *s_tagFORMATETC, *ulong) -> (long); Skip: def (*s_IEnumFORMATETC, ulong) -> (long); Reset: def (*s_IEnumFORMATETC) -> (long); Clone: def (*s_IEnumFORMATETC, **s_IEnumFORMATETC) -> (long); }
export type e_tagADVF = enum { ADVF_NODATA = 1; ADVF_PRIMEFIRST = 2; ADVF_ONLYONCE = 4; ADVF_DATAONSTOP = 64; ADVFCACHE_NOHANDLER = 8; ADVFCACHE_FORCEBUILTIN = 16; ADVFCACHE_ONSAVE = 32; }
export type s_tagSTATDATA = struct { formatetc: s_tagFORMATETC; advf: ulong; pAdvSink: *s_IAdviseSink; dwConnection: ulong; }
export type s_IEnumSTATDATAVtbl = struct { QueryInterface: def (*s_IEnumSTATDATA, *s__GUID, **) -> (long); AddRef: def (*s_IEnumSTATDATA) -> (ulong); Release: def (*s_IEnumSTATDATA) -> (ulong); Next: def (*s_IEnumSTATDATA, ulong, *s_tagSTATDATA, *ulong) -> (long); Skip: def (*s_IEnumSTATDATA, ulong) -> (long); Reset: def (*s_IEnumSTATDATA) -> (long); Clone: def (*s_IEnumSTATDATA, **s_IEnumSTATDATA) -> (long); }
export type s_IRootStorageVtbl = struct { QueryInterface: def (*s_IRootStorage, *s__GUID, **) -> (long); AddRef: def (*s_IRootStorage) -> (ulong); Release: def (*s_IRootStorage) -> (ulong); SwitchToFile: def (*s_IRootStorage, *ushort) -> (long); }
export type e_tagTYMED = enum { TYMED_HGLOBAL = 1; TYMED_FILE = 2; TYMED_ISTREAM = 4; TYMED_ISTORAGE = 8; TYMED_GDI = 16; TYMED_MFPICT = 32; TYMED_ENHMF = 64; TYMED_NULL; }
export type s_tagRemSTGMEDIUM = struct { tymed: ulong; dwHandleType: ulong; pData: ulong; pUnkForRelease: ulong; cbData: ulong; data: [1; uint8]; }
export type s_tagSTGMEDIUM = struct { tymed: ulong; struct #union { hBitmap: *s_HBITMAP__; hMetaFilePict: *; hEnhMetaFile: *s_HENHMETAFILE__; hGlobal: *; lpszFileName: *ushort; pstm: *s_IStream; pstg: *s_IStorage; }; pUnkForRelease: *s_IUnknown; }
export type u___MIDL_IAdviseSink_0002 = struct #union { hBitmap: *s__userHBITMAP; hPalette: *s__userHPALETTE; hGeneric: *s__userHGLOBAL; }
export type s__GDI_OBJECT = struct { ObjectType: ulong; __MIDL_IAdviseSink_0002: u___MIDL_IAdviseSink_0002; u: u___MIDL_IAdviseSink_0002; }
export type u___MIDL_IAdviseSink_0003 = struct #union { hMetaFilePict: *s__userHMETAFILEPICT; hHEnhMetaFile: *s__userHENHMETAFILE; hGdiHandle: *s__GDI_OBJECT; hGlobal: *s__userHGLOBAL; lpszFileName: *ushort; pstm: *s__BYTE_BLOB; pstg: *s__BYTE_BLOB; }
export type s__STGMEDIUM_UNION = struct { tymed: ulong; __MIDL_IAdviseSink_0003: u___MIDL_IAdviseSink_0003; u: u___MIDL_IAdviseSink_0003; }
export type s__userSTGMEDIUM = struct { _STGMEDIUM_UNION: s__STGMEDIUM_UNION; pUnkForRelease: *s_IUnknown; }
export type s__userFLAG_STGMEDIUM = struct { ContextFlags: long; fPassOwnership: long; Stgmed: s__userSTGMEDIUM; }
export type s__FLAG_STGMEDIUM = struct { ContextFlags: long; fPassOwnership: long; Stgmed: s_tagSTGMEDIUM; }
export type s_IAdviseSinkVtbl = struct { QueryInterface: def (*s_IAdviseSink, *s__GUID, **) -> (long); AddRef: def (*s_IAdviseSink) -> (ulong); Release: def (*s_IAdviseSink) -> (ulong); OnDataChange: def (*s_IAdviseSink, *s_tagFORMATETC, *s_tagSTGMEDIUM) -> (); OnViewChange: def (*s_IAdviseSink, ulong, long) -> (); OnRename: def (*s_IAdviseSink, *s_IMoniker) -> (); OnSave: def (*s_IAdviseSink) -> (); OnClose: def (*s_IAdviseSink) -> (); }
export type s_AsyncIAdviseSinkVtbl = struct { QueryInterface: def (*s_AsyncIAdviseSink, *s__GUID, **) -> (long); AddRef: def (*s_AsyncIAdviseSink) -> (ulong); Release: def (*s_AsyncIAdviseSink) -> (ulong); Begin_OnDataChange: def (*s_AsyncIAdviseSink, *s_tagFORMATETC, *s_tagSTGMEDIUM) -> (); Finish_OnDataChange: def (*s_AsyncIAdviseSink) -> (); Begin_OnViewChange: def (*s_AsyncIAdviseSink, ulong, long) -> (); Finish_OnViewChange: def (*s_AsyncIAdviseSink) -> (); Begin_OnRename: def (*s_AsyncIAdviseSink, *s_IMoniker) -> (); Finish_OnRename: def (*s_AsyncIAdviseSink) -> (); Begin_OnSave: def (*s_AsyncIAdviseSink) -> (); Finish_OnSave: def (*s_AsyncIAdviseSink) -> (); Begin_OnClose: def (*s_AsyncIAdviseSink) -> (); Finish_OnClose: def (*s_AsyncIAdviseSink) -> (); }
export type s_IAdviseSink2Vtbl = struct { QueryInterface: def (*s_IAdviseSink2, *s__GUID, **) -> (long); AddRef: def (*s_IAdviseSink2) -> (ulong); Release: def (*s_IAdviseSink2) -> (ulong); OnDataChange: def (*s_IAdviseSink2, *s_tagFORMATETC, *s_tagSTGMEDIUM) -> (); OnViewChange: def (*s_IAdviseSink2, ulong, long) -> (); OnRename: def (*s_IAdviseSink2, *s_IMoniker) -> (); OnSave: def (*s_IAdviseSink2) -> (); OnClose: def (*s_IAdviseSink2) -> (); OnLinkSrcChange: def (*s_IAdviseSink2, *s_IMoniker) -> (); }
export type s_AsyncIAdviseSink2Vtbl = struct { QueryInterface: def (*s_AsyncIAdviseSink2, *s__GUID, **) -> (long); AddRef: def (*s_AsyncIAdviseSink2) -> (ulong); Release: def (*s_AsyncIAdviseSink2) -> (ulong); Begin_OnDataChange: def (*s_AsyncIAdviseSink2, *s_tagFORMATETC, *s_tagSTGMEDIUM) -> (); Finish_OnDataChange: def (*s_AsyncIAdviseSink2) -> (); Begin_OnViewChange: def (*s_AsyncIAdviseSink2, ulong, long) -> (); Finish_OnViewChange: def (*s_AsyncIAdviseSink2) -> (); Begin_OnRename: def (*s_AsyncIAdviseSink2, *s_IMoniker) -> (); Finish_OnRename: def (*s_AsyncIAdviseSink2) -> (); Begin_OnSave: def (*s_AsyncIAdviseSink2) -> (); Finish_OnSave: def (*s_AsyncIAdviseSink2) -> (); Begin_OnClose: def (*s_AsyncIAdviseSink2) -> (); Finish_OnClose: def (*s_AsyncIAdviseSink2) -> (); Begin_OnLinkSrcChange: def (*s_AsyncIAdviseSink2, *s_IMoniker) -> (); Finish_OnLinkSrcChange: def (*s_AsyncIAdviseSink2) -> (); }
export type e_tagDATADIR = enum { DATADIR_GET = 1; DATADIR_SET = 2; }
export type s_IDataObjectVtbl = struct { QueryInterface: def (*s_IDataObject, *s__GUID, **) -> (long); AddRef: def (*s_IDataObject) -> (ulong); Release: def (*s_IDataObject) -> (ulong); GetData: def (*s_IDataObject, *s_tagFORMATETC, *s_tagSTGMEDIUM) -> (long); GetDataHere: def (*s_IDataObject, *s_tagFORMATETC, *s_tagSTGMEDIUM) -> (long); QueryGetData: def (*s_IDataObject, *s_tagFORMATETC) -> (long); GetCanonicalFormatEtc: def (*s_IDataObject, *s_tagFORMATETC, *s_tagFORMATETC) -> (long); SetData: def (*s_IDataObject, *s_tagFORMATETC, *s_tagSTGMEDIUM, int) -> (long); EnumFormatEtc: def (*s_IDataObject, ulong, **s_IEnumFORMATETC) -> (long); DAdvise: def (*s_IDataObject, *s_tagFORMATETC, ulong, *s_IAdviseSink, *ulong) -> (long); DUnadvise: def (*s_IDataObject, ulong) -> (long); EnumDAdvise: def (*s_IDataObject, **s_IEnumSTATDATA) -> (long); }
export type s_IDataAdviseHolderVtbl = struct { QueryInterface: def (*s_IDataAdviseHolder, *s__GUID, **) -> (long); AddRef: def (*s_IDataAdviseHolder) -> (ulong); Release: def (*s_IDataAdviseHolder) -> (ulong); Advise: def (*s_IDataAdviseHolder, *s_IDataObject, *s_tagFORMATETC, ulong, *s_IAdviseSink, *ulong) -> (long); Unadvise: def (*s_IDataAdviseHolder, ulong) -> (long); EnumAdvise: def (*s_IDataAdviseHolder, **s_IEnumSTATDATA) -> (long); SendOnDataChange: def (*s_IDataAdviseHolder, *s_IDataObject, ulong, ulong) -> (long); }
export type e_tagCALLTYPE = enum { CALLTYPE_TOPLEVEL = 1; CALLTYPE_NESTED = 2; CALLTYPE_ASYNC = 3; CALLTYPE_TOPLEVEL_CALLPENDING = 4; CALLTYPE_ASYNC_CALLPENDING = 5; }
export type e_tagSERVERCALL = enum { SERVERCALL_ISHANDLED; SERVERCALL_REJECTED = 1; SERVERCALL_RETRYLATER = 2; }
export type e_tagPENDINGTYPE = enum { PENDINGTYPE_TOPLEVEL = 1; PENDINGTYPE_NESTED = 2; }
export type e_tagPENDINGMSG = enum { PENDINGMSG_CANCELCALL; PENDINGMSG_WAITNOPROCESS = 1; PENDINGMSG_WAITDEFPROCESS = 2; }
export type s_tagINTERFACEINFO = struct { pUnk: *s_IUnknown; iid: s__GUID; wMethod: ushort; }
export type s_IMessageFilterVtbl = struct { QueryInterface: def (*s_IMessageFilter, *s__GUID, **) -> (long); AddRef: def (*s_IMessageFilter) -> (ulong); Release: def (*s_IMessageFilter) -> (ulong); HandleInComingCall: def (*s_IMessageFilter, ulong, *s_HTASK__, ulong, *s_tagINTERFACEINFO) -> (ulong); RetryRejectedCall: def (*s_IMessageFilter, *s_HTASK__, ulong, ulong) -> (ulong); MessagePending: def (*s_IMessageFilter, *s_HTASK__, ulong, ulong) -> (ulong); }
export type s_IClassActivatorVtbl = struct { QueryInterface: def (*s_IClassActivator, *s__GUID, **) -> (long); AddRef: def (*s_IClassActivator) -> (ulong); Release: def (*s_IClassActivator) -> (ulong); GetClassObject: def (*s_IClassActivator, *s__GUID, ulong, ulong, *s__GUID, **) -> (long); }
export type s_IFillLockBytesVtbl = struct { QueryInterface: def (*s_IFillLockBytes, *s__GUID, **) -> (long); AddRef: def (*s_IFillLockBytes) -> (ulong); Release: def (*s_IFillLockBytes) -> (ulong); FillAppend: def (*s_IFillLockBytes, *, ulong, *ulong) -> (long); FillAt: def (*s_IFillLockBytes, u__ULARGE_INTEGER, *, ulong, *ulong) -> (long); SetFillSize: def (*s_IFillLockBytes, u__ULARGE_INTEGER) -> (long); Terminate: def (*s_IFillLockBytes, int) -> (long); }
export type s_IProgressNotifyVtbl = struct { QueryInterface: def (*s_IProgressNotify, *s__GUID, **) -> (long); AddRef: def (*s_IProgressNotify) -> (ulong); Release: def (*s_IProgressNotify) -> (ulong); OnProgress: def (*s_IProgressNotify, ulong, ulong, int, int) -> (long); }
export type s_tagStorageLayout = struct { LayoutType: ulong; pwcsElementName: *ushort; cOffset: u__LARGE_INTEGER; cBytes: u__LARGE_INTEGER; }
export type s_ILayoutStorageVtbl = struct { QueryInterface: def (*s_ILayoutStorage, *s__GUID, **) -> (long); AddRef: def (*s_ILayoutStorage) -> (ulong); Release: def (*s_ILayoutStorage) -> (ulong); LayoutScript: def (*s_ILayoutStorage, *s_tagStorageLayout, ulong, ulong) -> (long); BeginMonitor: def (*s_ILayoutStorage) -> (long); EndMonitor: def (*s_ILayoutStorage) -> (long); ReLayoutDocfile: def (*s_ILayoutStorage, *ushort) -> (long); ReLayoutDocfileOnILockBytes: def (*s_ILayoutStorage, *s_ILockBytes) -> (long); }
export type s_IBlockingLockVtbl = struct { QueryInterface: def (*s_IBlockingLock, *s__GUID, **) -> (long); AddRef: def (*s_IBlockingLock) -> (ulong); Release: def (*s_IBlockingLock) -> (ulong); Lock: def (*s_IBlockingLock, ulong) -> (long); Unlock: def (*s_IBlockingLock) -> (long); }
export type s_ITimeAndNoticeControlVtbl = struct { QueryInterface: def (*s_ITimeAndNoticeControl, *s__GUID, **) -> (long); AddRef: def (*s_ITimeAndNoticeControl) -> (ulong); Release: def (*s_ITimeAndNoticeControl) -> (ulong); SuppressChanges: def (*s_ITimeAndNoticeControl, ulong, ulong) -> (long); }
export type s_IOplockStorageVtbl = struct { QueryInterface: def (*s_IOplockStorage, *s__GUID, **) -> (long); AddRef: def (*s_IOplockStorage) -> (ulong); Release: def (*s_IOplockStorage) -> (ulong); CreateStorageEx: def (*s_IOplockStorage, *ushort, ulong, ulong, ulong, *s__GUID, **) -> (long); OpenStorageEx: def (*s_IOplockStorage, *ushort, ulong, ulong, ulong, *s__GUID, **) -> (long); }
export type s_IDirectWriterLockVtbl = struct { QueryInterface: def (*s_IDirectWriterLock, *s__GUID, **) -> (long); AddRef: def (*s_IDirectWriterLock) -> (ulong); Release: def (*s_IDirectWriterLock) -> (ulong); WaitForWriteAccess: def (*s_IDirectWriterLock, ulong) -> (long); ReleaseWriteAccess: def (*s_IDirectWriterLock) -> (long); HaveWriteAccess: def (*s_IDirectWriterLock) -> (long); }
export type s_IUrlMonVtbl = struct { QueryInterface: def (*s_IUrlMon, *s__GUID, **) -> (long); AddRef: def (*s_IUrlMon) -> (ulong); Release: def (*s_IUrlMon) -> (ulong); AsyncGetClassBits: def (*s_IUrlMon, *s__GUID, *ushort, *ushort, ulong, ulong, *ushort, *s_IBindCtx, ulong, *s__GUID, ulong) -> (long); }
export type s_IForegroundTransferVtbl = struct { QueryInterface: def (*s_IForegroundTransfer, *s__GUID, **) -> (long); AddRef: def (*s_IForegroundTransfer) -> (ulong); Release: def (*s_IForegroundTransfer) -> (ulong); AllowForegroundTransfer: def (*s_IForegroundTransfer, *) -> (long); }
export type s_IThumbnailExtractorVtbl = struct { QueryInterface: def (*s_IThumbnailExtractor, *s__GUID, **) -> (long); AddRef: def (*s_IThumbnailExtractor) -> (ulong); Release: def (*s_IThumbnailExtractor) -> (ulong); ExtractThumbnail: def (*s_IThumbnailExtractor, *s_IStorage, ulong, ulong, *ulong, *ulong, **s_HBITMAP__) -> (long); OnFileUpdated: def (*s_IThumbnailExtractor, *s_IStorage) -> (long); }
export type s_IDummyHICONIncluderVtbl = struct { QueryInterface: def (*s_IDummyHICONIncluder, *s__GUID, **) -> (long); AddRef: def (*s_IDummyHICONIncluder) -> (ulong); Release: def (*s_IDummyHICONIncluder) -> (ulong); Dummy: def (*s_IDummyHICONIncluder, *s_HICON__, *s_HDC__) -> (long); }
export type e_tagApplicationType = enum { ServerApplication; LibraryApplication = 1; }
export type e_tagShutdownType = enum { IdleShutdown; ForcedShutdown = 1; }
export type s_IProcessLockVtbl = struct { QueryInterface: def (*s_IProcessLock, *s__GUID, **) -> (long); AddRef: def (*s_IProcessLock) -> (ulong); Release: def (*s_IProcessLock) -> (ulong); AddRefOnProcess: def (*s_IProcessLock) -> (ulong); ReleaseRefOnProcess: def (*s_IProcessLock) -> (ulong); }
export type s_ISurrogateServiceVtbl = struct { QueryInterface: def (*s_ISurrogateService, *s__GUID, **) -> (long); AddRef: def (*s_ISurrogateService) -> (ulong); Release: def (*s_ISurrogateService) -> (ulong); Init: def (*s_ISurrogateService, *s__GUID, *s_IProcessLock, *int) -> (long); ApplicationLaunch: def (*s_ISurrogateService, *s__GUID, e_tagApplicationType) -> (long); ApplicationFree: def (*s_ISurrogateService, *s__GUID) -> (long); CatalogRefresh: def (*s_ISurrogateService, ulong) -> (long); ProcessShutdown: def (*s_ISurrogateService, e_tagShutdownType) -> (long); }
export type s_IInitializeSpyVtbl = struct { QueryInterface: def (*s_IInitializeSpy, *s__GUID, **) -> (long); AddRef: def (*s_IInitializeSpy) -> (ulong); Release: def (*s_IInitializeSpy) -> (ulong); PreInitialize: def (*s_IInitializeSpy, ulong, ulong) -> (long); PostInitialize: def (*s_IInitializeSpy, long, ulong, ulong) -> (long); PreUninitialize: def (*s_IInitializeSpy, ulong) -> (long); PostUninitialize: def (*s_IInitializeSpy, ulong) -> (long); }
export type s_IApartmentShutdownVtbl = struct { QueryInterface: def (*s_IApartmentShutdown, *s__GUID, **) -> (long); AddRef: def (*s_IApartmentShutdown) -> (ulong); Release: def (*s_IApartmentShutdown) -> (ulong); OnUninitialize: def (*s_IApartmentShutdown, uint64) -> (); }
export type s_IPropertyStorage
export type s_IPropertySetStorage
export type s_IEnumSTATPROPSTG
export type s_IEnumSTATPROPSETSTG
export type s_ICreateTypeInfo
export type s_ICreateTypeInfo2
export type s_ICreateTypeLib
export type s_ICreateTypeLib2
export type s_IDispatch
export type s_IEnumVARIANT
export type s_ITypeComp
export type s_ITypeInfo
export type s_ITypeInfo2
export type s_ITypeLib
export type s_ITypeLib2
export type s_ITypeChangeEvents
export type s_IErrorInfo
export type s_ICreateErrorInfo
export type s_ISupportErrorInfo
export type s_ITypeFactory
export type s_ITypeMarshal
export type s_IRecordInfo
export type s_IErrorLog
export type s_IPropertyBag
export type s_ITypeLibRegistrationReader
export type s_ITypeLibRegistration
export type s_tagSAFEARRAYBOUND = struct { cElements: ulong; lLbound: long; }
export type s__wireVARIANT
export type s__wireBRECORD
export type s__wireSAFEARR_BSTR = struct { Size: ulong; aBstr: **s__FLAGGED_WORD_BLOB; }
export type s__wireSAFEARR_UNKNOWN = struct { Size: ulong; apUnknown: **s_IUnknown; }
export type s__wireSAFEARR_DISPATCH = struct { Size: ulong; apDispatch: **s_IDispatch; }
export type s__wireSAFEARR_VARIANT = struct { Size: ulong; aVariant: **s__wireVARIANT; }
export type s__wireSAFEARR_BRECORD = struct { Size: ulong; aRecord: **s__wireBRECORD; }
export type s__wireSAFEARR_HAVEIID = struct { Size: ulong; apUnknown: **s_IUnknown; iid: s__GUID; }
export type e_tagSF_TYPE = enum { SF_ERROR = 10; SF_I1 = 16; SF_I2 = 2; SF_I4 = 3; SF_I8 = 20; SF_BSTR = 8; SF_UNKNOWN = 13; SF_DISPATCH = 9; SF_VARIANT = 12; SF_RECORD = 36; SF_HAVEIID = 32781; }
export type u___MIDL_IOleAutomationTypes_0001 = struct #union { BstrStr: s__wireSAFEARR_BSTR; UnknownStr: s__wireSAFEARR_UNKNOWN; DispatchStr: s__wireSAFEARR_DISPATCH; VariantStr: s__wireSAFEARR_VARIANT; RecordStr: s__wireSAFEARR_BRECORD; HaveIidStr: s__wireSAFEARR_HAVEIID; ByteStr: s__BYTE_SIZEDARR; WordStr: s__SHORT_SIZEDARR; LongStr: s__LONG_SIZEDARR; HyperStr: s__HYPER_SIZEDARR; }
export type s__wireSAFEARRAY_UNION = struct { sfType: ulong; __MIDL_IOleAutomationTypes_0001: u___MIDL_IOleAutomationTypes_0001; u: u___MIDL_IOleAutomationTypes_0001; }
export type s__wireSAFEARRAY
export type s_tagSAFEARRAY = struct { cDims: ushort; fFeatures: ushort; cbElements: ulong; cLocks: ulong; pvData: *; rgsabound: [1; s_tagSAFEARRAYBOUND]; }
export type s_tagVARIANT
export type e_tagTYPEKIND = enum { TKIND_ENUM; TKIND_RECORD = 1; TKIND_MODULE = 2; TKIND_INTERFACE = 3; TKIND_DISPATCH = 4; TKIND_COCLASS = 5; TKIND_ALIAS = 6; TKIND_UNION = 7; TKIND_MAX = 8; }
export type s_tagTYPEDESC
export type s_tagARRAYDESC
export type s_tagTYPEDESC = struct { struct #union { lptdesc: *s_tagTYPEDESC; lpadesc: *s_tagARRAYDESC; hreftype: ulong; }; vt: ushort; }
export type s_tagARRAYDESC = struct { tdescElem: s_tagTYPEDESC; cDims: ushort; rgbounds: [1; s_tagSAFEARRAYBOUND]; }
export type s_tagPARAMDESCEX = struct { cBytes: ulong; varDefaultValue: s_tagVARIANT; }
export type s_tagPARAMDESC = struct { pparamdescex: *s_tagPARAMDESCEX; wParamFlags: ushort; }
export type s_tagIDLDESC = struct { dwReserved: uint64; wIDLFlags: ushort; }
export type s_tagELEMDESC = struct { tdesc: s_tagTYPEDESC; struct #union { idldesc: s_tagIDLDESC; paramdesc: s_tagPARAMDESC; }; }
export type s_tagTYPEATTR = struct { guid: s__GUID; lcid: ulong; dwReserved: ulong; memidConstructor: long; memidDestructor: long; lpstrSchema: *ushort; cbSizeInstance: ulong; typekind: e_tagTYPEKIND; cFuncs: ushort; cVars: ushort; cImplTypes: ushort; cbSizeVft: ushort; cbAlignment: ushort; wTypeFlags: ushort; wMajorVerNum: ushort; wMinorVerNum: ushort; tdescAlias: s_tagTYPEDESC; idldescType: s_tagIDLDESC; }
export type s_tagDISPPARAMS = struct { rgvarg: *s_tagVARIANT; rgdispidNamedArgs: *long; cArgs: uint; cNamedArgs: uint; }
export type s_tagEXCEPINFO
export type s_tagEXCEPINFO = struct { wCode: ushort; wReserved: ushort; bstrSource: *ushort; bstrDescription: *ushort; bstrHelpFile: *ushort; dwHelpContext: ulong; pvReserved: *; pfnDeferredFillIn: def (*s_tagEXCEPINFO) -> (long); scode: long; }
export type e_tagCALLCONV = enum { CC_FASTCALL; CC_CDECL = 1; CC_MSCPASCAL = 2; CC_PASCAL = 2; CC_MACPASCAL = 3; CC_STDCALL = 4; CC_FPFASTCALL = 5; CC_SYSCALL = 6; CC_MPWCDECL = 7; CC_MPWPASCAL = 8; CC_MAX = 9; }
export type e_tagFUNCKIND = enum { FUNC_VIRTUAL; FUNC_PUREVIRTUAL = 1; FUNC_NONVIRTUAL = 2; FUNC_STATIC = 3; FUNC_DISPATCH = 4; }
export type e_tagINVOKEKIND = enum { INVOKE_FUNC = 1; INVOKE_PROPERTYGET = 2; INVOKE_PROPERTYPUT = 4; INVOKE_PROPERTYPUTREF = 8; }
export type s_tagFUNCDESC = struct { memid: long; lprgscode: *long; lprgelemdescParam: *s_tagELEMDESC; funckind: e_tagFUNCKIND; invkind: e_tagINVOKEKIND; callconv: e_tagCALLCONV; cParams: short; cParamsOpt: short; oVft: short; cScodes: short; elemdescFunc: s_tagELEMDESC; wFuncFlags: ushort; }
export type e_tagVARKIND = enum { VAR_PERINSTANCE; VAR_STATIC = 1; VAR_CONST = 2; VAR_DISPATCH = 3; }
export type s_tagVARDESC = struct { memid: long; lpstrSchema: *ushort; struct #union { oInst: ulong; lpvarValue: *s_tagVARIANT; }; elemdescVar: s_tagELEMDESC; wVarFlags: ushort; varkind: e_tagVARKIND; }
export type e_tagTYPEFLAGS = enum { TYPEFLAG_FAPPOBJECT = 1; TYPEFLAG_FCANCREATE = 2; TYPEFLAG_FLICENSED = 4; TYPEFLAG_FPREDECLID = 8; TYPEFLAG_FHIDDEN = 16; TYPEFLAG_FCONTROL = 32; TYPEFLAG_FDUAL = 64; TYPEFLAG_FNONEXTENSIBLE = 128; TYPEFLAG_FOLEAUTOMATION = 256; TYPEFLAG_FRESTRICTED = 512; TYPEFLAG_FAGGREGATABLE = 1024; TYPEFLAG_FREPLACEABLE = 2048; TYPEFLAG_FDISPATCHABLE = 4096; TYPEFLAG_FREVERSEBIND = 8192; TYPEFLAG_FPROXY = 16384; }
export type e_tagFUNCFLAGS = enum { FUNCFLAG_FRESTRICTED = 1; FUNCFLAG_FSOURCE = 2; FUNCFLAG_FBINDABLE = 4; FUNCFLAG_FREQUESTEDIT = 8; FUNCFLAG_FDISPLAYBIND = 16; FUNCFLAG_FDEFAULTBIND = 32; FUNCFLAG_FHIDDEN = 64; FUNCFLAG_FUSESGETLASTERROR = 128; FUNCFLAG_FDEFAULTCOLLELEM = 256; FUNCFLAG_FUIDEFAULT = 512; FUNCFLAG_FNONBROWSABLE = 1024; FUNCFLAG_FREPLACEABLE = 2048; FUNCFLAG_FIMMEDIATEBIND = 4096; }
export type e_tagVARFLAGS = enum { VARFLAG_FREADONLY = 1; VARFLAG_FSOURCE = 2; VARFLAG_FBINDABLE = 4; VARFLAG_FREQUESTEDIT = 8; VARFLAG_FDISPLAYBIND = 16; VARFLAG_FDEFAULTBIND = 32; VARFLAG_FHIDDEN = 64; VARFLAG_FRESTRICTED = 128; VARFLAG_FDEFAULTCOLLELEM = 256; VARFLAG_FUIDEFAULT = 512; VARFLAG_FNONBROWSABLE = 1024; VARFLAG_FREPLACEABLE = 2048; VARFLAG_FIMMEDIATEBIND = 4096; }
export type s_tagCLEANLOCALSTORAGE = struct { pInterface: *s_IUnknown; pStorage: *; flags: ulong; }
export type s_tagCUSTDATAITEM = struct { guid: s__GUID; varValue: s_tagVARIANT; }
export type s_tagCUSTDATA = struct { cCustData: ulong; prgCustData: *s_tagCUSTDATAITEM; }
export type s_ICreateTypeInfoVtbl = struct { QueryInterface: def (*s_ICreateTypeInfo, *s__GUID, **) -> (long); AddRef: def (*s_ICreateTypeInfo) -> (ulong); Release: def (*s_ICreateTypeInfo) -> (ulong); SetGuid: def (*s_ICreateTypeInfo, *s__GUID) -> (long); SetTypeFlags: def (*s_ICreateTypeInfo, uint) -> (long); SetDocString: def (*s_ICreateTypeInfo, *ushort) -> (long); SetHelpContext: def (*s_ICreateTypeInfo, ulong) -> (long); SetVersion: def (*s_ICreateTypeInfo, ushort, ushort) -> (long); AddRefTypeInfo: def (*s_ICreateTypeInfo, *s_ITypeInfo, *ulong) -> (long); AddFuncDesc: def (*s_ICreateTypeInfo, uint, *s_tagFUNCDESC) -> (long); AddImplType: def (*s_ICreateTypeInfo, uint, ulong) -> (long); SetImplTypeFlags: def (*s_ICreateTypeInfo, uint, int) -> (long); SetAlignment: def (*s_ICreateTypeInfo, ushort) -> (long); SetSchema: def (*s_ICreateTypeInfo, *ushort) -> (long); AddVarDesc: def (*s_ICreateTypeInfo, uint, *s_tagVARDESC) -> (long); SetFuncAndParamNames: def (*s_ICreateTypeInfo, uint, **ushort, uint) -> (long); SetVarName: def (*s_ICreateTypeInfo, uint, *ushort) -> (long); SetTypeDescAlias: def (*s_ICreateTypeInfo, *s_tagTYPEDESC) -> (long); DefineFuncAsDllEntry: def (*s_ICreateTypeInfo, uint, *ushort, *ushort) -> (long); SetFuncDocString: def (*s_ICreateTypeInfo, uint, *ushort) -> (long); SetVarDocString: def (*s_ICreateTypeInfo, uint, *ushort) -> (long); SetFuncHelpContext: def (*s_ICreateTypeInfo, uint, ulong) -> (long); SetVarHelpContext: def (*s_ICreateTypeInfo, uint, ulong) -> (long); SetMops: def (*s_ICreateTypeInfo, uint, *ushort) -> (long); SetTypeIdldesc: def (*s_ICreateTypeInfo, *s_tagIDLDESC) -> (long); LayOut: def (*s_ICreateTypeInfo) -> (long); }
export type s_ICreateTypeInfo2Vtbl = struct { QueryInterface: def (*s_ICreateTypeInfo2, *s__GUID, **) -> (long); AddRef: def (*s_ICreateTypeInfo2) -> (ulong); Release: def (*s_ICreateTypeInfo2) -> (ulong); SetGuid: def (*s_ICreateTypeInfo2, *s__GUID) -> (long); SetTypeFlags: def (*s_ICreateTypeInfo2, uint) -> (long); SetDocString: def (*s_ICreateTypeInfo2, *ushort) -> (long); SetHelpContext: def (*s_ICreateTypeInfo2, ulong) -> (long); SetVersion: def (*s_ICreateTypeInfo2, ushort, ushort) -> (long); AddRefTypeInfo: def (*s_ICreateTypeInfo2, *s_ITypeInfo, *ulong) -> (long); AddFuncDesc: def (*s_ICreateTypeInfo2, uint, *s_tagFUNCDESC) -> (long); AddImplType: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); SetImplTypeFlags: def (*s_ICreateTypeInfo2, uint, int) -> (long); SetAlignment: def (*s_ICreateTypeInfo2, ushort) -> (long); SetSchema: def (*s_ICreateTypeInfo2, *ushort) -> (long); AddVarDesc: def (*s_ICreateTypeInfo2, uint, *s_tagVARDESC) -> (long); SetFuncAndParamNames: def (*s_ICreateTypeInfo2, uint, **ushort, uint) -> (long); SetVarName: def (*s_ICreateTypeInfo2, uint, *ushort) -> (long); SetTypeDescAlias: def (*s_ICreateTypeInfo2, *s_tagTYPEDESC) -> (long); DefineFuncAsDllEntry: def (*s_ICreateTypeInfo2, uint, *ushort, *ushort) -> (long); SetFuncDocString: def (*s_ICreateTypeInfo2, uint, *ushort) -> (long); SetVarDocString: def (*s_ICreateTypeInfo2, uint, *ushort) -> (long); SetFuncHelpContext: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); SetVarHelpContext: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); SetMops: def (*s_ICreateTypeInfo2, uint, *ushort) -> (long); SetTypeIdldesc: def (*s_ICreateTypeInfo2, *s_tagIDLDESC) -> (long); LayOut: def (*s_ICreateTypeInfo2) -> (long); DeleteFuncDesc: def (*s_ICreateTypeInfo2, uint) -> (long); DeleteFuncDescByMemId: def (*s_ICreateTypeInfo2, long, e_tagINVOKEKIND) -> (long); DeleteVarDesc: def (*s_ICreateTypeInfo2, uint) -> (long); DeleteVarDescByMemId: def (*s_ICreateTypeInfo2, long) -> (long); DeleteImplType: def (*s_ICreateTypeInfo2, uint) -> (long); SetCustData: def (*s_ICreateTypeInfo2, *s__GUID, *s_tagVARIANT) -> (long); SetFuncCustData: def (*s_ICreateTypeInfo2, uint, *s__GUID, *s_tagVARIANT) -> (long); SetParamCustData: def (*s_ICreateTypeInfo2, uint, uint, *s__GUID, *s_tagVARIANT) -> (long); SetVarCustData: def (*s_ICreateTypeInfo2, uint, *s__GUID, *s_tagVARIANT) -> (long); SetImplTypeCustData: def (*s_ICreateTypeInfo2, uint, *s__GUID, *s_tagVARIANT) -> (long); SetHelpStringContext: def (*s_ICreateTypeInfo2, ulong) -> (long); SetFuncHelpStringContext: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); SetVarHelpStringContext: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); Invalidate: def (*s_ICreateTypeInfo2) -> (long); SetName: def (*s_ICreateTypeInfo2, *ushort) -> (long); }
export type s_ICreateTypeLibVtbl = struct { QueryInterface: def (*s_ICreateTypeLib, *s__GUID, **) -> (long); AddRef: def (*s_ICreateTypeLib) -> (ulong); Release: def (*s_ICreateTypeLib) -> (ulong); CreateTypeInfo: def (*s_ICreateTypeLib, *ushort, e_tagTYPEKIND, **s_ICreateTypeInfo) -> (long); SetName: def (*s_ICreateTypeLib, *ushort) -> (long); SetVersion: def (*s_ICreateTypeLib, ushort, ushort) -> (long); SetGuid: def (*s_ICreateTypeLib, *s__GUID) -> (long); SetDocString: def (*s_ICreateTypeLib, *ushort) -> (long); SetHelpFileName: def (*s_ICreateTypeLib, *ushort) -> (long); SetHelpContext: def (*s_ICreateTypeLib, ulong) -> (long); SetLcid: def (*s_ICreateTypeLib, ulong) -> (long); SetLibFlags: def (*s_ICreateTypeLib, uint) -> (long); SaveAllChanges: def (*s_ICreateTypeLib) -> (long); }
export type s_ICreateTypeLib2Vtbl = struct { QueryInterface: def (*s_ICreateTypeLib2, *s__GUID, **) -> (long); AddRef: def (*s_ICreateTypeLib2) -> (ulong); Release: def (*s_ICreateTypeLib2) -> (ulong); CreateTypeInfo: def (*s_ICreateTypeLib2, *ushort, e_tagTYPEKIND, **s_ICreateTypeInfo) -> (long); SetName: def (*s_ICreateTypeLib2, *ushort) -> (long); SetVersion: def (*s_ICreateTypeLib2, ushort, ushort) -> (long); SetGuid: def (*s_ICreateTypeLib2, *s__GUID) -> (long); SetDocString: def (*s_ICreateTypeLib2, *ushort) -> (long); SetHelpFileName: def (*s_ICreateTypeLib2, *ushort) -> (long); SetHelpContext: def (*s_ICreateTypeLib2, ulong) -> (long); SetLcid: def (*s_ICreateTypeLib2, ulong) -> (long); SetLibFlags: def (*s_ICreateTypeLib2, uint) -> (long); SaveAllChanges: def (*s_ICreateTypeLib2) -> (long); DeleteTypeInfo: def (*s_ICreateTypeLib2, *ushort) -> (long); SetCustData: def (*s_ICreateTypeLib2, *s__GUID, *s_tagVARIANT) -> (long); SetHelpStringContext: def (*s_ICreateTypeLib2, ulong) -> (long); SetHelpStringDll: def (*s_ICreateTypeLib2, *ushort) -> (long); }
export type s_IDispatchVtbl = struct { QueryInterface: def (*s_IDispatch, *s__GUID, **) -> (long); AddRef: def (*s_IDispatch) -> (ulong); Release: def (*s_IDispatch) -> (ulong); GetTypeInfoCount: def (*s_IDispatch, *uint) -> (long); GetTypeInfo: def (*s_IDispatch, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IDispatch, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IDispatch, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); }
export type s_IEnumVARIANTVtbl = struct { QueryInterface: def (*s_IEnumVARIANT, *s__GUID, **) -> (long); AddRef: def (*s_IEnumVARIANT) -> (ulong); Release: def (*s_IEnumVARIANT) -> (ulong); Next: def (*s_IEnumVARIANT, ulong, *s_tagVARIANT, *ulong) -> (long); Skip: def (*s_IEnumVARIANT, ulong) -> (long); Reset: def (*s_IEnumVARIANT) -> (long); Clone: def (*s_IEnumVARIANT, **s_IEnumVARIANT) -> (long); }
export type e_tagDESCKIND = enum { DESCKIND_NONE; DESCKIND_FUNCDESC = 1; DESCKIND_VARDESC = 2; DESCKIND_TYPECOMP = 3; DESCKIND_IMPLICITAPPOBJ = 4; DESCKIND_MAX = 5; }
export type u_tagBINDPTR = struct #union { lpfuncdesc: *s_tagFUNCDESC; lpvardesc: *s_tagVARDESC; lptcomp: *s_ITypeComp; }
export type s_ITypeCompVtbl = struct { QueryInterface: def (*s_ITypeComp, *s__GUID, **) -> (long); AddRef: def (*s_ITypeComp) -> (ulong); Release: def (*s_ITypeComp) -> (ulong); Bind: def (*s_ITypeComp, *ushort, ulong, ushort, **s_ITypeInfo, *e_tagDESCKIND, *u_tagBINDPTR) -> (long); BindType: def (*s_ITypeComp, *ushort, ulong, **s_ITypeInfo, **s_ITypeComp) -> (long); }
export type s_ITypeInfoVtbl = struct { QueryInterface: def (*s_ITypeInfo, *s__GUID, **) -> (long); AddRef: def (*s_ITypeInfo) -> (ulong); Release: def (*s_ITypeInfo) -> (ulong); GetTypeAttr: def (*s_ITypeInfo, **s_tagTYPEATTR) -> (long); GetTypeComp: def (*s_ITypeInfo, **s_ITypeComp) -> (long); GetFuncDesc: def (*s_ITypeInfo, uint, **s_tagFUNCDESC) -> (long); GetVarDesc: def (*s_ITypeInfo, uint, **s_tagVARDESC) -> (long); GetNames: def (*s_ITypeInfo, long, **ushort, uint, *uint) -> (long); GetRefTypeOfImplType: def (*s_ITypeInfo, uint, *ulong) -> (long); GetImplTypeFlags: def (*s_ITypeInfo, uint, *int) -> (long); GetIDsOfNames: def (*s_ITypeInfo, **ushort, uint, *long) -> (long); Invoke: def (*s_ITypeInfo, *, long, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); GetDocumentation: def (*s_ITypeInfo, long, **ushort, **ushort, *ulong, **ushort) -> (long); GetDllEntry: def (*s_ITypeInfo, long, e_tagINVOKEKIND, **ushort, **ushort, *ushort) -> (long); GetRefTypeInfo: def (*s_ITypeInfo, ulong, **s_ITypeInfo) -> (long); AddressOfMember: def (*s_ITypeInfo, long, e_tagINVOKEKIND, **) -> (long); CreateInstance: def (*s_ITypeInfo, *s_IUnknown, *s__GUID, **) -> (long); GetMops: def (*s_ITypeInfo, long, **ushort) -> (long); GetContainingTypeLib: def (*s_ITypeInfo, **s_ITypeLib, *uint) -> (long); ReleaseTypeAttr: def (*s_ITypeInfo, *s_tagTYPEATTR) -> (); ReleaseFuncDesc: def (*s_ITypeInfo, *s_tagFUNCDESC) -> (); ReleaseVarDesc: def (*s_ITypeInfo, *s_tagVARDESC) -> (); }
export type s_ITypeInfo2Vtbl = struct { QueryInterface: def (*s_ITypeInfo2, *s__GUID, **) -> (long); AddRef: def (*s_ITypeInfo2) -> (ulong); Release: def (*s_ITypeInfo2) -> (ulong); GetTypeAttr: def (*s_ITypeInfo2, **s_tagTYPEATTR) -> (long); GetTypeComp: def (*s_ITypeInfo2, **s_ITypeComp) -> (long); GetFuncDesc: def (*s_ITypeInfo2, uint, **s_tagFUNCDESC) -> (long); GetVarDesc: def (*s_ITypeInfo2, uint, **s_tagVARDESC) -> (long); GetNames: def (*s_ITypeInfo2, long, **ushort, uint, *uint) -> (long); GetRefTypeOfImplType: def (*s_ITypeInfo2, uint, *ulong) -> (long); GetImplTypeFlags: def (*s_ITypeInfo2, uint, *int) -> (long); GetIDsOfNames: def (*s_ITypeInfo2, **ushort, uint, *long) -> (long); Invoke: def (*s_ITypeInfo2, *, long, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); GetDocumentation: def (*s_ITypeInfo2, long, **ushort, **ushort, *ulong, **ushort) -> (long); GetDllEntry: def (*s_ITypeInfo2, long, e_tagINVOKEKIND, **ushort, **ushort, *ushort) -> (long); GetRefTypeInfo: def (*s_ITypeInfo2, ulong, **s_ITypeInfo) -> (long); AddressOfMember: def (*s_ITypeInfo2, long, e_tagINVOKEKIND, **) -> (long); CreateInstance: def (*s_ITypeInfo2, *s_IUnknown, *s__GUID, **) -> (long); GetMops: def (*s_ITypeInfo2, long, **ushort) -> (long); GetContainingTypeLib: def (*s_ITypeInfo2, **s_ITypeLib, *uint) -> (long); ReleaseTypeAttr: def (*s_ITypeInfo2, *s_tagTYPEATTR) -> (); ReleaseFuncDesc: def (*s_ITypeInfo2, *s_tagFUNCDESC) -> (); ReleaseVarDesc: def (*s_ITypeInfo2, *s_tagVARDESC) -> (); GetTypeKind: def (*s_ITypeInfo2, *e_tagTYPEKIND) -> (long); GetTypeFlags: def (*s_ITypeInfo2, *ulong) -> (long); GetFuncIndexOfMemId: def (*s_ITypeInfo2, long, e_tagINVOKEKIND, *uint) -> (long); GetVarIndexOfMemId: def (*s_ITypeInfo2, long, *uint) -> (long); GetCustData: def (*s_ITypeInfo2, *s__GUID, *s_tagVARIANT) -> (long); GetFuncCustData: def (*s_ITypeInfo2, uint, *s__GUID, *s_tagVARIANT) -> (long); GetParamCustData: def (*s_ITypeInfo2, uint, uint, *s__GUID, *s_tagVARIANT) -> (long); GetVarCustData: def (*s_ITypeInfo2, uint, *s__GUID, *s_tagVARIANT) -> (long); GetImplTypeCustData: def (*s_ITypeInfo2, uint, *s__GUID, *s_tagVARIANT) -> (long); GetDocumentation2: def (*s_ITypeInfo2, long, ulong, **ushort, *ulong, **ushort) -> (long); GetAllCustData: def (*s_ITypeInfo2, *s_tagCUSTDATA) -> (long); GetAllFuncCustData: def (*s_ITypeInfo2, uint, *s_tagCUSTDATA) -> (long); GetAllParamCustData: def (*s_ITypeInfo2, uint, uint, *s_tagCUSTDATA) -> (long); GetAllVarCustData: def (*s_ITypeInfo2, uint, *s_tagCUSTDATA) -> (long); GetAllImplTypeCustData: def (*s_ITypeInfo2, uint, *s_tagCUSTDATA) -> (long); }
export type e_tagSYSKIND = enum { SYS_WIN16; SYS_WIN32 = 1; SYS_MAC = 2; SYS_WIN64 = 3; }
export type e_tagLIBFLAGS = enum { LIBFLAG_FRESTRICTED = 1; LIBFLAG_FCONTROL = 2; LIBFLAG_FHIDDEN = 4; LIBFLAG_FHASDISKIMAGE = 8; }
export type s_tagTLIBATTR = struct { guid: s__GUID; lcid: ulong; syskind: e_tagSYSKIND; wMajorVerNum: ushort; wMinorVerNum: ushort; wLibFlags: ushort; }
export type s_ITypeLibVtbl = struct { QueryInterface: def (*s_ITypeLib, *s__GUID, **) -> (long); AddRef: def (*s_ITypeLib) -> (ulong); Release: def (*s_ITypeLib) -> (ulong); GetTypeInfoCount: def (*s_ITypeLib) -> (uint); GetTypeInfo: def (*s_ITypeLib, uint, **s_ITypeInfo) -> (long); GetTypeInfoType: def (*s_ITypeLib, uint, *e_tagTYPEKIND) -> (long); GetTypeInfoOfGuid: def (*s_ITypeLib, *s__GUID, **s_ITypeInfo) -> (long); GetLibAttr: def (*s_ITypeLib, **s_tagTLIBATTR) -> (long); GetTypeComp: def (*s_ITypeLib, **s_ITypeComp) -> (long); GetDocumentation: def (*s_ITypeLib, int, **ushort, **ushort, *ulong, **ushort) -> (long); IsName: def (*s_ITypeLib, *ushort, ulong, *int) -> (long); FindName: def (*s_ITypeLib, *ushort, ulong, **s_ITypeInfo, *long, *ushort) -> (long); ReleaseTLibAttr: def (*s_ITypeLib, *s_tagTLIBATTR) -> (); }
export type s_ITypeLib2Vtbl = struct { QueryInterface: def (*s_ITypeLib2, *s__GUID, **) -> (long); AddRef: def (*s_ITypeLib2) -> (ulong); Release: def (*s_ITypeLib2) -> (ulong); GetTypeInfoCount: def (*s_ITypeLib2) -> (uint); GetTypeInfo: def (*s_ITypeLib2, uint, **s_ITypeInfo) -> (long); GetTypeInfoType: def (*s_ITypeLib2, uint, *e_tagTYPEKIND) -> (long); GetTypeInfoOfGuid: def (*s_ITypeLib2, *s__GUID, **s_ITypeInfo) -> (long); GetLibAttr: def (*s_ITypeLib2, **s_tagTLIBATTR) -> (long); GetTypeComp: def (*s_ITypeLib2, **s_ITypeComp) -> (long); GetDocumentation: def (*s_ITypeLib2, int, **ushort, **ushort, *ulong, **ushort) -> (long); IsName: def (*s_ITypeLib2, *ushort, ulong, *int) -> (long); FindName: def (*s_ITypeLib2, *ushort, ulong, **s_ITypeInfo, *long, *ushort) -> (long); ReleaseTLibAttr: def (*s_ITypeLib2, *s_tagTLIBATTR) -> (); GetCustData: def (*s_ITypeLib2, *s__GUID, *s_tagVARIANT) -> (long); GetLibStatistics: def (*s_ITypeLib2, *ulong, *ulong) -> (long); GetDocumentation2: def (*s_ITypeLib2, int, ulong, **ushort, *ulong, **ushort) -> (long); GetAllCustData: def (*s_ITypeLib2, *s_tagCUSTDATA) -> (long); }
export type e_tagCHANGEKIND = enum { CHANGEKIND_ADDMEMBER; CHANGEKIND_DELETEMEMBER = 1; CHANGEKIND_SETNAMES = 2; CHANGEKIND_SETDOCUMENTATION = 3; CHANGEKIND_GENERAL = 4; CHANGEKIND_INVALIDATE = 5; CHANGEKIND_CHANGEFAILED = 6; CHANGEKIND_MAX = 7; }
export type s_ITypeChangeEventsVtbl = struct { QueryInterface: def (*s_ITypeChangeEvents, *s__GUID, **) -> (long); AddRef: def (*s_ITypeChangeEvents) -> (ulong); Release: def (*s_ITypeChangeEvents) -> (ulong); RequestTypeChange: def (*s_ITypeChangeEvents, e_tagCHANGEKIND, *s_ITypeInfo, *ushort, *int) -> (long); AfterTypeChange: def (*s_ITypeChangeEvents, e_tagCHANGEKIND, *s_ITypeInfo, *ushort) -> (long); }
export type s_IErrorInfoVtbl = struct { QueryInterface: def (*s_IErrorInfo, *s__GUID, **) -> (long); AddRef: def (*s_IErrorInfo) -> (ulong); Release: def (*s_IErrorInfo) -> (ulong); GetGUID: def (*s_IErrorInfo, *s__GUID) -> (long); GetSource: def (*s_IErrorInfo, **ushort) -> (long); GetDescription: def (*s_IErrorInfo, **ushort) -> (long); GetHelpFile: def (*s_IErrorInfo, **ushort) -> (long); GetHelpContext: def (*s_IErrorInfo, *ulong) -> (long); }
export type s_ICreateErrorInfoVtbl = struct { QueryInterface: def (*s_ICreateErrorInfo, *s__GUID, **) -> (long); AddRef: def (*s_ICreateErrorInfo) -> (ulong); Release: def (*s_ICreateErrorInfo) -> (ulong); SetGUID: def (*s_ICreateErrorInfo, *s__GUID) -> (long); SetSource: def (*s_ICreateErrorInfo, *ushort) -> (long); SetDescription: def (*s_ICreateErrorInfo, *ushort) -> (long); SetHelpFile: def (*s_ICreateErrorInfo, *ushort) -> (long); SetHelpContext: def (*s_ICreateErrorInfo, ulong) -> (long); }
export type s_ISupportErrorInfoVtbl = struct { QueryInterface: def (*s_ISupportErrorInfo, *s__GUID, **) -> (long); AddRef: def (*s_ISupportErrorInfo) -> (ulong); Release: def (*s_ISupportErrorInfo) -> (ulong); InterfaceSupportsErrorInfo: def (*s_ISupportErrorInfo, *s__GUID) -> (long); }
export type s_ITypeFactoryVtbl = struct { QueryInterface: def (*s_ITypeFactory, *s__GUID, **) -> (long); AddRef: def (*s_ITypeFactory) -> (ulong); Release: def (*s_ITypeFactory) -> (ulong); CreateFromTypeInfo: def (*s_ITypeFactory, *s_ITypeInfo, *s__GUID, **s_IUnknown) -> (long); }
export type s_ITypeMarshalVtbl = struct { QueryInterface: def (*s_ITypeMarshal, *s__GUID, **) -> (long); AddRef: def (*s_ITypeMarshal) -> (ulong); Release: def (*s_ITypeMarshal) -> (ulong); Size: def (*s_ITypeMarshal, *, ulong, *, *ulong) -> (long); Marshal: def (*s_ITypeMarshal, *, ulong, *, ulong, *uint8, *ulong) -> (long); Unmarshal: def (*s_ITypeMarshal, *, ulong, ulong, *uint8, *ulong) -> (long); Free: def (*s_ITypeMarshal, *) -> (long); }
export type s_IRecordInfoVtbl = struct { QueryInterface: def (*s_IRecordInfo, *s__GUID, **) -> (long); AddRef: def (*s_IRecordInfo) -> (ulong); Release: def (*s_IRecordInfo) -> (ulong); RecordInit: def (*s_IRecordInfo, *) -> (long); RecordClear: def (*s_IRecordInfo, *) -> (long); RecordCopy: def (*s_IRecordInfo, *, *) -> (long); GetGuid: def (*s_IRecordInfo, *s__GUID) -> (long); GetName: def (*s_IRecordInfo, **ushort) -> (long); GetSize: def (*s_IRecordInfo, *ulong) -> (long); GetTypeInfo: def (*s_IRecordInfo, **s_ITypeInfo) -> (long); GetField: def (*s_IRecordInfo, *, *ushort, *s_tagVARIANT) -> (long); GetFieldNoCopy: def (*s_IRecordInfo, *, *ushort, *s_tagVARIANT, **) -> (long); PutField: def (*s_IRecordInfo, ulong, *, *ushort, *s_tagVARIANT) -> (long); PutFieldNoCopy: def (*s_IRecordInfo, ulong, *, *ushort, *s_tagVARIANT) -> (long); GetFieldNames: def (*s_IRecordInfo, *ulong, **ushort) -> (long); IsMatchingType: def (*s_IRecordInfo, *s_IRecordInfo) -> (int); RecordCreate: def (*s_IRecordInfo) -> (*); RecordCreateCopy: def (*s_IRecordInfo, *, **) -> (long); RecordDestroy: def (*s_IRecordInfo, *) -> (long); }
export type s_IErrorLogVtbl = struct { QueryInterface: def (*s_IErrorLog, *s__GUID, **) -> (long); AddRef: def (*s_IErrorLog) -> (ulong); Release: def (*s_IErrorLog) -> (ulong); AddError: def (*s_IErrorLog, *ushort, *s_tagEXCEPINFO) -> (long); }
export type s_IPropertyBagVtbl = struct { QueryInterface: def (*s_IPropertyBag, *s__GUID, **) -> (long); AddRef: def (*s_IPropertyBag) -> (ulong); Release: def (*s_IPropertyBag) -> (ulong); Read: def (*s_IPropertyBag, *ushort, *s_tagVARIANT, *s_IErrorLog) -> (long); Write: def (*s_IPropertyBag, *ushort, *s_tagVARIANT) -> (long); }
export type s_ITypeLibRegistrationReaderVtbl = struct { QueryInterface: def (*s_ITypeLibRegistrationReader, *s__GUID, **) -> (long); AddRef: def (*s_ITypeLibRegistrationReader) -> (ulong); Release: def (*s_ITypeLibRegistrationReader) -> (ulong); EnumTypeLibRegistrations: def (*s_ITypeLibRegistrationReader, **s_IEnumUnknown) -> (long); }
export type s_ITypeLibRegistrationVtbl = struct { QueryInterface: def (*s_ITypeLibRegistration, *s__GUID, **) -> (long); AddRef: def (*s_ITypeLibRegistration) -> (ulong); Release: def (*s_ITypeLibRegistration) -> (ulong); GetGuid: def (*s_ITypeLibRegistration, *s__GUID) -> (long); GetVersion: def (*s_ITypeLibRegistration, **ushort) -> (long); GetLcid: def (*s_ITypeLibRegistration, *ulong) -> (long); GetWin32Path: def (*s_ITypeLibRegistration, **ushort) -> (long); GetWin64Path: def (*s_ITypeLibRegistration, **ushort) -> (long); GetDisplayName: def (*s_ITypeLibRegistration, **ushort) -> (long); GetFlags: def (*s_ITypeLibRegistration, *ulong) -> (long); GetHelpDir: def (*s_ITypeLibRegistration, **ushort) -> (long); }
export type s_tagVersionedStream = struct { guidVersion: s__GUID; pStream: *s_IStream; }
export type s_tagCAC = struct { cElems: ulong; pElems: *char; }
export type s_tagCAUB = struct { cElems: ulong; pElems: *uint8; }
export type s_tagCAI = struct { cElems: ulong; pElems: *short; }
export type s_tagCAUI = struct { cElems: ulong; pElems: *ushort; }
export type s_tagCAL = struct { cElems: ulong; pElems: *long; }
export type s_tagCAUL = struct { cElems: ulong; pElems: *ulong; }
export type s_tagCAFLT = struct { cElems: ulong; pElems: *float; }
export type s_tagCADBL = struct { cElems: ulong; pElems: *double; }
export type s_tagCACY = struct { cElems: ulong; pElems: *u_tagCY; }
export type s_tagCADATE = struct { cElems: ulong; pElems: *double; }
export type s_tagCABSTR = struct { cElems: ulong; pElems: **ushort; }
export type s_tagCABSTRBLOB = struct { cElems: ulong; pElems: *s_tagBSTRBLOB; }
export type s_tagCABOOL = struct { cElems: ulong; pElems: *short; }
export type s_tagCASCODE = struct { cElems: ulong; pElems: *long; }
export type s_tagCAPROPVARIANT = struct { cElems: ulong; pElems: *s_tagPROPVARIANT; }
export type s_tagCAH = struct { cElems: ulong; pElems: *u__LARGE_INTEGER; }
export type s_tagCAUH = struct { cElems: ulong; pElems: *u__ULARGE_INTEGER; }
export type s_tagCALPSTR = struct { cElems: ulong; pElems: **char; }
export type s_tagCALPWSTR = struct { cElems: ulong; pElems: **ushort; }
export type s_tagCAFILETIME = struct { cElems: ulong; pElems: *s__FILETIME; }
export type s_tagCACLIPDATA = struct { cElems: ulong; pElems: *s_tagCLIPDATA; }
export type s_tagCACLSID = struct { cElems: ulong; pElems: *s__GUID; }
export type s_tagPROPSPEC = struct { ulKind: ulong; struct #union { propid: ulong; lpwstr: *ushort; }; }
export type s_tagSTATPROPSTG = struct { lpwstrName: *ushort; propid: ulong; vt: ushort; }
export type s_tagSTATPROPSETSTG = struct { fmtid: s__GUID; clsid: s__GUID; grfFlags: ulong; mtime: s__FILETIME; ctime: s__FILETIME; atime: s__FILETIME; dwOSVersion: ulong; }
export type s_IPropertyStorageVtbl = struct { QueryInterface: def (*s_IPropertyStorage, *s__GUID, **) -> (long); AddRef: def (*s_IPropertyStorage) -> (ulong); Release: def (*s_IPropertyStorage) -> (ulong); ReadMultiple: def (*s_IPropertyStorage, ulong, *s_tagPROPSPEC, *s_tagPROPVARIANT) -> (long); WriteMultiple: def (*s_IPropertyStorage, ulong, *s_tagPROPSPEC, *s_tagPROPVARIANT, ulong) -> (long); DeleteMultiple: def (*s_IPropertyStorage, ulong, *s_tagPROPSPEC) -> (long); ReadPropertyNames: def (*s_IPropertyStorage, ulong, *ulong, **ushort) -> (long); WritePropertyNames: def (*s_IPropertyStorage, ulong, *ulong, **ushort) -> (long); DeletePropertyNames: def (*s_IPropertyStorage, ulong, *ulong) -> (long); Commit: def (*s_IPropertyStorage, ulong) -> (long); Revert: def (*s_IPropertyStorage) -> (long); Enum: def (*s_IPropertyStorage, **s_IEnumSTATPROPSTG) -> (long); SetTimes: def (*s_IPropertyStorage, *s__FILETIME, *s__FILETIME, *s__FILETIME) -> (long); SetClass: def (*s_IPropertyStorage, *s__GUID) -> (long); Stat: def (*s_IPropertyStorage, *s_tagSTATPROPSETSTG) -> (long); }
export type s_IPropertySetStorageVtbl = struct { QueryInterface: def (*s_IPropertySetStorage, *s__GUID, **) -> (long); AddRef: def (*s_IPropertySetStorage) -> (ulong); Release: def (*s_IPropertySetStorage) -> (ulong); Create: def (*s_IPropertySetStorage, *s__GUID, *s__GUID, ulong, ulong, **s_IPropertyStorage) -> (long); Open: def (*s_IPropertySetStorage, *s__GUID, ulong, **s_IPropertyStorage) -> (long); Delete: def (*s_IPropertySetStorage, *s__GUID) -> (long); Enum: def (*s_IPropertySetStorage, **s_IEnumSTATPROPSETSTG) -> (long); }
export type s_IEnumSTATPROPSTGVtbl = struct { QueryInterface: def (*s_IEnumSTATPROPSTG, *s__GUID, **) -> (long); AddRef: def (*s_IEnumSTATPROPSTG) -> (ulong); Release: def (*s_IEnumSTATPROPSTG) -> (ulong); Next: def (*s_IEnumSTATPROPSTG, ulong, *s_tagSTATPROPSTG, *ulong) -> (long); Skip: def (*s_IEnumSTATPROPSTG, ulong) -> (long); Reset: def (*s_IEnumSTATPROPSTG) -> (long); Clone: def (*s_IEnumSTATPROPSTG, **s_IEnumSTATPROPSTG) -> (long); }
export type s_IEnumSTATPROPSETSTGVtbl = struct { QueryInterface: def (*s_IEnumSTATPROPSETSTG, *s__GUID, **) -> (long); AddRef: def (*s_IEnumSTATPROPSETSTG) -> (ulong); Release: def (*s_IEnumSTATPROPSETSTG) -> (ulong); Next: def (*s_IEnumSTATPROPSETSTG, ulong, *s_tagSTATPROPSETSTG, *ulong) -> (long); Skip: def (*s_IEnumSTATPROPSETSTG, ulong) -> (long); Reset: def (*s_IEnumSTATPROPSETSTG) -> (long); Clone: def (*s_IEnumSTATPROPSETSTG, **s_IEnumSTATPROPSETSTG) -> (long); }
export type s_tagSTGOPTIONS = struct { usVersion: ushort; reserved: ushort; ulSectorSize: ulong; pwcsTemplateFile: *ushort; }
export type e_tagCOINIT = enum { COINIT_APARTMENTTHREADED = 2; COINIT_MULTITHREADED; COINIT_DISABLE_OLE1DDE = 4; COINIT_SPEED_OVER_MEMORY = 8; }
export type e_tagCOMSD = enum { SD_LAUNCHPERMISSIONS; SD_ACCESSPERMISSIONS = 1; SD_LAUNCHRESTRICTIONS = 2; SD_ACCESSRESTRICTIONS = 3; }
export type s_IPersistMoniker
export type s_IMonikerProp
export type s_IBindProtocol
export type s_IBinding
export type s_IBindStatusCallback
export type s_IBindStatusCallbackEx
export type s_IAuthenticate
export type s_IAuthenticateEx
export type s_IHttpNegotiate
export type s_IHttpNegotiate2
export type s_IHttpNegotiate3
export type s_IWinInetFileStream
export type s_IWindowForBindingUI
export type s_ICodeInstall
export type s_IUri
export type s_IUriContainer
export type s_IUriBuilder
export type s_IUriBuilderFactory
export type s_IWinInetInfo
export type s_IHttpSecurity
export type s_IWinInetHttpInfo
export type s_IWinInetHttpTimeouts
export type s_IWinInetCacheHints
export type s_IWinInetCacheHints2
export type s_IBindHost
export type s_IInternet
export type s_IInternetBindInfo
export type s_IInternetBindInfoEx
export type s_IInternetProtocolRoot
export type s_IInternetProtocol
export type s_IInternetProtocolEx
export type s_IInternetProtocolSink
export type s_IInternetProtocolSinkStackable
export type s_IInternetSession
export type s_IInternetThreadSwitch
export type s_IInternetPriority
export type s_IInternetProtocolInfo
export type s_IInternetSecurityMgrSite
export type s_IInternetSecurityManager
export type s_IInternetSecurityManagerEx
export type s_IInternetSecurityManagerEx2
export type s_IZoneIdentifier
export type s_IZoneIdentifier2
export type s_IInternetHostSecurityManager
export type s_IInternetZoneManager
export type s_IInternetZoneManagerEx
export type s_IInternetZoneManagerEx2
export type s_ISoftDistExt
export type s_ICatalogFileInfo
export type s_IDataFilter
export type s_IEncodingFilterFactory
export type s_IWrappedProtocol
export type s_IGetBindHandle
export type s_IBindCallbackRedirect
export type s_IBindHttpSecurity
export type s_IOleAdviseHolder
export type s_IOleCache
export type s_IOleCache2
export type s_IOleCacheControl
export type s_IParseDisplayName
export type s_IOleContainer
export type s_IOleClientSite
export type s_IOleObject
export type s_IOleWindow
export type s_IOleLink
export type s_IOleItemContainer
export type s_IOleInPlaceUIWindow
export type s_IOleInPlaceActiveObject
export type s_IOleInPlaceFrame
export type s_IOleInPlaceObject
export type s_IOleInPlaceSite
export type s_IContinue
export type s_IViewObject
export type s_IViewObject2
export type s_IDropSource
export type s_IDropTarget
export type s_IDropSourceNotify
export type s_IEnterpriseDropTarget
export type s_IEnumOLEVERB
export type s_IOleAdviseHolderVtbl = struct { QueryInterface: def (*s_IOleAdviseHolder, *s__GUID, **) -> (long); AddRef: def (*s_IOleAdviseHolder) -> (ulong); Release: def (*s_IOleAdviseHolder) -> (ulong); Advise: def (*s_IOleAdviseHolder, *s_IAdviseSink, *ulong) -> (long); Unadvise: def (*s_IOleAdviseHolder, ulong) -> (long); EnumAdvise: def (*s_IOleAdviseHolder, **s_IEnumSTATDATA) -> (long); SendOnRename: def (*s_IOleAdviseHolder, *s_IMoniker) -> (long); SendOnSave: def (*s_IOleAdviseHolder) -> (long); SendOnClose: def (*s_IOleAdviseHolder) -> (long); }
export type s_IOleCacheVtbl = struct { QueryInterface: def (*s_IOleCache, *s__GUID, **) -> (long); AddRef: def (*s_IOleCache) -> (ulong); Release: def (*s_IOleCache) -> (ulong); Cache: def (*s_IOleCache, *s_tagFORMATETC, ulong, *ulong) -> (long); Uncache: def (*s_IOleCache, ulong) -> (long); EnumCache: def (*s_IOleCache, **s_IEnumSTATDATA) -> (long); InitCache: def (*s_IOleCache, *s_IDataObject) -> (long); SetData: def (*s_IOleCache, *s_tagFORMATETC, *s_tagSTGMEDIUM, int) -> (long); }
export type e_tagDISCARDCACHE = enum { DISCARDCACHE_SAVEIFDIRTY; DISCARDCACHE_NOSAVE = 1; }
export type s_IOleCache2Vtbl = struct { QueryInterface: def (*s_IOleCache2, *s__GUID, **) -> (long); AddRef: def (*s_IOleCache2) -> (ulong); Release: def (*s_IOleCache2) -> (ulong); Cache: def (*s_IOleCache2, *s_tagFORMATETC, ulong, *ulong) -> (long); Uncache: def (*s_IOleCache2, ulong) -> (long); EnumCache: def (*s_IOleCache2, **s_IEnumSTATDATA) -> (long); InitCache: def (*s_IOleCache2, *s_IDataObject) -> (long); SetData: def (*s_IOleCache2, *s_tagFORMATETC, *s_tagSTGMEDIUM, int) -> (long); UpdateCache: def (*s_IOleCache2, *s_IDataObject, ulong, *) -> (long); DiscardCache: def (*s_IOleCache2, ulong) -> (long); }
export type s_IOleCacheControlVtbl = struct { QueryInterface: def (*s_IOleCacheControl, *s__GUID, **) -> (long); AddRef: def (*s_IOleCacheControl) -> (ulong); Release: def (*s_IOleCacheControl) -> (ulong); OnRun: def (*s_IOleCacheControl, *s_IDataObject) -> (long); OnStop: def (*s_IOleCacheControl) -> (long); }
export type s_IParseDisplayNameVtbl = struct { QueryInterface: def (*s_IParseDisplayName, *s__GUID, **) -> (long); AddRef: def (*s_IParseDisplayName) -> (ulong); Release: def (*s_IParseDisplayName) -> (ulong); ParseDisplayName: def (*s_IParseDisplayName, *s_IBindCtx, *ushort, *ulong, **s_IMoniker) -> (long); }
export type s_IOleContainerVtbl = struct { QueryInterface: def (*s_IOleContainer, *s__GUID, **) -> (long); AddRef: def (*s_IOleContainer) -> (ulong); Release: def (*s_IOleContainer) -> (ulong); ParseDisplayName: def (*s_IOleContainer, *s_IBindCtx, *ushort, *ulong, **s_IMoniker) -> (long); EnumObjects: def (*s_IOleContainer, ulong, **s_IEnumUnknown) -> (long); LockContainer: def (*s_IOleContainer, int) -> (long); }
export type s_IOleClientSiteVtbl = struct { QueryInterface: def (*s_IOleClientSite, *s__GUID, **) -> (long); AddRef: def (*s_IOleClientSite) -> (ulong); Release: def (*s_IOleClientSite) -> (ulong); SaveObject: def (*s_IOleClientSite) -> (long); GetMoniker: def (*s_IOleClientSite, ulong, ulong, **s_IMoniker) -> (long); GetContainer: def (*s_IOleClientSite, **s_IOleContainer) -> (long); ShowObject: def (*s_IOleClientSite) -> (long); OnShowWindow: def (*s_IOleClientSite, int) -> (long); RequestNewObjectLayout: def (*s_IOleClientSite) -> (long); }
export type e_tagOLEGETMONIKER = enum { OLEGETMONIKER_ONLYIFTHERE = 1; OLEGETMONIKER_FORCEASSIGN = 2; OLEGETMONIKER_UNASSIGN = 3; OLEGETMONIKER_TEMPFORUSER = 4; }
export type e_tagOLEWHICHMK = enum { OLEWHICHMK_CONTAINER = 1; OLEWHICHMK_OBJREL = 2; OLEWHICHMK_OBJFULL = 3; }
export type e_tagUSERCLASSTYPE = enum { USERCLASSTYPE_FULL = 1; USERCLASSTYPE_SHORT = 2; USERCLASSTYPE_APPNAME = 3; }
export type e_tagOLEMISC = enum { OLEMISC_RECOMPOSEONRESIZE = 1; OLEMISC_ONLYICONIC = 2; OLEMISC_INSERTNOTREPLACE = 4; OLEMISC_STATIC = 8; OLEMISC_CANTLINKINSIDE = 16; OLEMISC_CANLINKBYOLE1 = 32; OLEMISC_ISLINKOBJECT = 64; OLEMISC_INSIDEOUT = 128; OLEMISC_ACTIVATEWHENVISIBLE = 256; OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512; OLEMISC_INVISIBLEATRUNTIME = 1024; OLEMISC_ALWAYSRUN = 2048; OLEMISC_ACTSLIKEBUTTON = 4096; OLEMISC_ACTSLIKELABEL = 8192; OLEMISC_NOUIACTIVATE = 16384; OLEMISC_ALIGNABLE = 32768; OLEMISC_SIMPLEFRAME = 65536; OLEMISC_SETCLIENTSITEFIRST = 131072; OLEMISC_IMEMODE = 262144; OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288; OLEMISC_WANTSTOMENUMERGE = 1048576; OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152; }
export type e_tagOLECLOSE = enum { OLECLOSE_SAVEIFDIRTY; OLECLOSE_NOSAVE = 1; OLECLOSE_PROMPTSAVE = 2; }
export type s_IOleObjectVtbl = struct { QueryInterface: def (*s_IOleObject, *s__GUID, **) -> (long); AddRef: def (*s_IOleObject) -> (ulong); Release: def (*s_IOleObject) -> (ulong); SetClientSite: def (*s_IOleObject, *s_IOleClientSite) -> (long); GetClientSite: def (*s_IOleObject, **s_IOleClientSite) -> (long); SetHostNames: def (*s_IOleObject, *ushort, *ushort) -> (long); Close: def (*s_IOleObject, ulong) -> (long); SetMoniker: def (*s_IOleObject, ulong, *s_IMoniker) -> (long); GetMoniker: def (*s_IOleObject, ulong, ulong, **s_IMoniker) -> (long); InitFromData: def (*s_IOleObject, *s_IDataObject, int, ulong) -> (long); GetClipboardData: def (*s_IOleObject, ulong, **s_IDataObject) -> (long); DoVerb: def (*s_IOleObject, long, *s_tagMSG, *s_IOleClientSite, long, *s_HWND__, *s_tagRECT) -> (long); EnumVerbs: def (*s_IOleObject, **s_IEnumOLEVERB) -> (long); Update: def (*s_IOleObject) -> (long); IsUpToDate: def (*s_IOleObject) -> (long); GetUserClassID: def (*s_IOleObject, *s__GUID) -> (long); GetUserType: def (*s_IOleObject, ulong, **ushort) -> (long); SetExtent: def (*s_IOleObject, ulong, *s_tagSIZE) -> (long); GetExtent: def (*s_IOleObject, ulong, *s_tagSIZE) -> (long); Advise: def (*s_IOleObject, *s_IAdviseSink, *ulong) -> (long); Unadvise: def (*s_IOleObject, ulong) -> (long); EnumAdvise: def (*s_IOleObject, **s_IEnumSTATDATA) -> (long); GetMiscStatus: def (*s_IOleObject, ulong, *ulong) -> (long); SetColorScheme: def (*s_IOleObject, *s_tagLOGPALETTE) -> (long); }
export type e_tagOLERENDER = enum { OLERENDER_NONE; OLERENDER_DRAW = 1; OLERENDER_FORMAT = 2; OLERENDER_ASIS = 3; }
export type s_tagOBJECTDESCRIPTOR = struct { cbSize: ulong; clsid: s__GUID; dwDrawAspect: ulong; sizel: s_tagSIZE; pointl: s__POINTL; dwStatus: ulong; dwFullUserTypeName: ulong; dwSrcOfCopy: ulong; }
export type s_IOleWindowVtbl = struct { QueryInterface: def (*s_IOleWindow, *s__GUID, **) -> (long); AddRef: def (*s_IOleWindow) -> (ulong); Release: def (*s_IOleWindow) -> (ulong); GetWindow: def (*s_IOleWindow, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleWindow, int) -> (long); }
export type e_tagOLEUPDATE = enum { OLEUPDATE_ALWAYS = 1; OLEUPDATE_ONCALL = 3; }
export type e_tagOLELINKBIND = enum { OLELINKBIND_EVENIFCLASSDIFF = 1; }
export type s_IOleLinkVtbl = struct { QueryInterface: def (*s_IOleLink, *s__GUID, **) -> (long); AddRef: def (*s_IOleLink) -> (ulong); Release: def (*s_IOleLink) -> (ulong); SetUpdateOptions: def (*s_IOleLink, ulong) -> (long); GetUpdateOptions: def (*s_IOleLink, *ulong) -> (long); SetSourceMoniker: def (*s_IOleLink, *s_IMoniker, *s__GUID) -> (long); GetSourceMoniker: def (*s_IOleLink, **s_IMoniker) -> (long); SetSourceDisplayName: def (*s_IOleLink, *ushort) -> (long); GetSourceDisplayName: def (*s_IOleLink, **ushort) -> (long); BindToSource: def (*s_IOleLink, ulong, *s_IBindCtx) -> (long); BindIfRunning: def (*s_IOleLink) -> (long); GetBoundSource: def (*s_IOleLink, **s_IUnknown) -> (long); UnbindSource: def (*s_IOleLink) -> (long); Update: def (*s_IOleLink, *s_IBindCtx) -> (long); }
export type e_tagBINDSPEED = enum { BINDSPEED_INDEFINITE = 1; BINDSPEED_MODERATE = 2; BINDSPEED_IMMEDIATE = 3; }
export type e_tagOLECONTF = enum { OLECONTF_EMBEDDINGS = 1; OLECONTF_LINKS = 2; OLECONTF_OTHERS = 4; OLECONTF_ONLYUSER = 8; OLECONTF_ONLYIFRUNNING = 16; }
export type s_IOleItemContainerVtbl = struct { QueryInterface: def (*s_IOleItemContainer, *s__GUID, **) -> (long); AddRef: def (*s_IOleItemContainer) -> (ulong); Release: def (*s_IOleItemContainer) -> (ulong); ParseDisplayName: def (*s_IOleItemContainer, *s_IBindCtx, *ushort, *ulong, **s_IMoniker) -> (long); EnumObjects: def (*s_IOleItemContainer, ulong, **s_IEnumUnknown) -> (long); LockContainer: def (*s_IOleItemContainer, int) -> (long); GetObjectA: def (*s_IOleItemContainer, *ushort, ulong, *s_IBindCtx, *s__GUID, **) -> (long); GetObjectStorage: def (*s_IOleItemContainer, *ushort, *s_IBindCtx, *s__GUID, **) -> (long); IsRunning: def (*s_IOleItemContainer, *ushort) -> (long); }
export type s_IOleInPlaceUIWindowVtbl = struct { QueryInterface: def (*s_IOleInPlaceUIWindow, *s__GUID, **) -> (long); AddRef: def (*s_IOleInPlaceUIWindow) -> (ulong); Release: def (*s_IOleInPlaceUIWindow) -> (ulong); GetWindow: def (*s_IOleInPlaceUIWindow, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceUIWindow, int) -> (long); GetBorder: def (*s_IOleInPlaceUIWindow, *s_tagRECT) -> (long); RequestBorderSpace: def (*s_IOleInPlaceUIWindow, *s_tagRECT) -> (long); SetBorderSpace: def (*s_IOleInPlaceUIWindow, *s_tagRECT) -> (long); SetActiveObject: def (*s_IOleInPlaceUIWindow, *s_IOleInPlaceActiveObject, *ushort) -> (long); }
export type s_IOleInPlaceActiveObjectVtbl = struct { QueryInterface: def (*s_IOleInPlaceActiveObject, *s__GUID, **) -> (long); AddRef: def (*s_IOleInPlaceActiveObject) -> (ulong); Release: def (*s_IOleInPlaceActiveObject) -> (ulong); GetWindow: def (*s_IOleInPlaceActiveObject, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceActiveObject, int) -> (long); TranslateAcceleratorA: def (*s_IOleInPlaceActiveObject, *s_tagMSG) -> (long); OnFrameWindowActivate: def (*s_IOleInPlaceActiveObject, int) -> (long); OnDocWindowActivate: def (*s_IOleInPlaceActiveObject, int) -> (long); ResizeBorder: def (*s_IOleInPlaceActiveObject, *s_tagRECT, *s_IOleInPlaceUIWindow, int) -> (long); EnableModeless: def (*s_IOleInPlaceActiveObject, int) -> (long); }
export type s_tagOIFI = struct { cb: uint; fMDIApp: int; hwndFrame: *s_HWND__; haccel: *s_HACCEL__; cAccelEntries: uint; }
export type s_tagOleMenuGroupWidths = struct { width: [6; long]; }
export type s_IOleInPlaceFrameVtbl = struct { QueryInterface: def (*s_IOleInPlaceFrame, *s__GUID, **) -> (long); AddRef: def (*s_IOleInPlaceFrame) -> (ulong); Release: def (*s_IOleInPlaceFrame) -> (ulong); GetWindow: def (*s_IOleInPlaceFrame, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceFrame, int) -> (long); GetBorder: def (*s_IOleInPlaceFrame, *s_tagRECT) -> (long); RequestBorderSpace: def (*s_IOleInPlaceFrame, *s_tagRECT) -> (long); SetBorderSpace: def (*s_IOleInPlaceFrame, *s_tagRECT) -> (long); SetActiveObject: def (*s_IOleInPlaceFrame, *s_IOleInPlaceActiveObject, *ushort) -> (long); InsertMenus: def (*s_IOleInPlaceFrame, *s_HMENU__, *s_tagOleMenuGroupWidths) -> (long); SetMenu: def (*s_IOleInPlaceFrame, *s_HMENU__, *, *s_HWND__) -> (long); RemoveMenus: def (*s_IOleInPlaceFrame, *s_HMENU__) -> (long); SetStatusText: def (*s_IOleInPlaceFrame, *ushort) -> (long); EnableModeless: def (*s_IOleInPlaceFrame, int) -> (long); TranslateAcceleratorA: def (*s_IOleInPlaceFrame, *s_tagMSG, ushort) -> (long); }
export type s_IOleInPlaceObjectVtbl = struct { QueryInterface: def (*s_IOleInPlaceObject, *s__GUID, **) -> (long); AddRef: def (*s_IOleInPlaceObject) -> (ulong); Release: def (*s_IOleInPlaceObject) -> (ulong); GetWindow: def (*s_IOleInPlaceObject, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceObject, int) -> (long); InPlaceDeactivate: def (*s_IOleInPlaceObject) -> (long); UIDeactivate: def (*s_IOleInPlaceObject) -> (long); SetObjectRects: def (*s_IOleInPlaceObject, *s_tagRECT, *s_tagRECT) -> (long); ReactivateAndUndo: def (*s_IOleInPlaceObject) -> (long); }
export type s_IOleInPlaceSiteVtbl = struct { QueryInterface: def (*s_IOleInPlaceSite, *s__GUID, **) -> (long); AddRef: def (*s_IOleInPlaceSite) -> (ulong); Release: def (*s_IOleInPlaceSite) -> (ulong); GetWindow: def (*s_IOleInPlaceSite, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceSite, int) -> (long); CanInPlaceActivate: def (*s_IOleInPlaceSite) -> (long); OnInPlaceActivate: def (*s_IOleInPlaceSite) -> (long); OnUIActivate: def (*s_IOleInPlaceSite) -> (long); GetWindowContext: def (*s_IOleInPlaceSite, **s_IOleInPlaceFrame, **s_IOleInPlaceUIWindow, *s_tagRECT, *s_tagRECT, *s_tagOIFI) -> (long); Scroll: def (*s_IOleInPlaceSite, s_tagSIZE) -> (long); OnUIDeactivate: def (*s_IOleInPlaceSite, int) -> (long); OnInPlaceDeactivate: def (*s_IOleInPlaceSite) -> (long); DiscardUndoState: def (*s_IOleInPlaceSite) -> (long); DeactivateAndUndo: def (*s_IOleInPlaceSite) -> (long); OnPosRectChange: def (*s_IOleInPlaceSite, *s_tagRECT) -> (long); }
export type s_IContinueVtbl = struct { QueryInterface: def (*s_IContinue, *s__GUID, **) -> (long); AddRef: def (*s_IContinue) -> (ulong); Release: def (*s_IContinue) -> (ulong); FContinue: def (*s_IContinue) -> (long); }
export type s_IViewObjectVtbl = struct { QueryInterface: def (*s_IViewObject, *s__GUID, **) -> (long); AddRef: def (*s_IViewObject) -> (ulong); Release: def (*s_IViewObject) -> (ulong); Draw: def (*s_IViewObject, ulong, long, *, *s_tagDVTARGETDEVICE, *s_HDC__, *s_HDC__, *s__RECTL, *s__RECTL, def (uint64) -> (int), uint64) -> (long); GetColorSet: def (*s_IViewObject, ulong, long, *, *s_tagDVTARGETDEVICE, *s_HDC__, **s_tagLOGPALETTE) -> (long); Freeze: def (*s_IViewObject, ulong, long, *, *ulong) -> (long); Unfreeze: def (*s_IViewObject, ulong) -> (long); SetAdvise: def (*s_IViewObject, ulong, ulong, *s_IAdviseSink) -> (long); GetAdvise: def (*s_IViewObject, *ulong, *ulong, **s_IAdviseSink) -> (long); }
export type s_IViewObject2Vtbl = struct { QueryInterface: def (*s_IViewObject2, *s__GUID, **) -> (long); AddRef: def (*s_IViewObject2) -> (ulong); Release: def (*s_IViewObject2) -> (ulong); Draw: def (*s_IViewObject2, ulong, long, *, *s_tagDVTARGETDEVICE, *s_HDC__, *s_HDC__, *s__RECTL, *s__RECTL, def (uint64) -> (int), uint64) -> (long); GetColorSet: def (*s_IViewObject2, ulong, long, *, *s_tagDVTARGETDEVICE, *s_HDC__, **s_tagLOGPALETTE) -> (long); Freeze: def (*s_IViewObject2, ulong, long, *, *ulong) -> (long); Unfreeze: def (*s_IViewObject2, ulong) -> (long); SetAdvise: def (*s_IViewObject2, ulong, ulong, *s_IAdviseSink) -> (long); GetAdvise: def (*s_IViewObject2, *ulong, *ulong, **s_IAdviseSink) -> (long); GetExtent: def (*s_IViewObject2, ulong, long, *s_tagDVTARGETDEVICE, *s_tagSIZE) -> (long); }
export type s_IDropSourceVtbl = struct { QueryInterface: def (*s_IDropSource, *s__GUID, **) -> (long); AddRef: def (*s_IDropSource) -> (ulong); Release: def (*s_IDropSource) -> (ulong); QueryContinueDrag: def (*s_IDropSource, int, ulong) -> (long); GiveFeedback: def (*s_IDropSource, ulong) -> (long); }
export type s_IDropTargetVtbl = struct { QueryInterface: def (*s_IDropTarget, *s__GUID, **) -> (long); AddRef: def (*s_IDropTarget) -> (ulong); Release: def (*s_IDropTarget) -> (ulong); DragEnter: def (*s_IDropTarget, *s_IDataObject, ulong, s__POINTL, *ulong) -> (long); DragOver: def (*s_IDropTarget, ulong, s__POINTL, *ulong) -> (long); DragLeave: def (*s_IDropTarget) -> (long); Drop: def (*s_IDropTarget, *s_IDataObject, ulong, s__POINTL, *ulong) -> (long); }
export type s_IDropSourceNotifyVtbl = struct { QueryInterface: def (*s_IDropSourceNotify, *s__GUID, **) -> (long); AddRef: def (*s_IDropSourceNotify) -> (ulong); Release: def (*s_IDropSourceNotify) -> (ulong); DragEnterTarget: def (*s_IDropSourceNotify, *s_HWND__) -> (long); DragLeaveTarget: def (*s_IDropSourceNotify) -> (long); }
export type s_IEnterpriseDropTargetVtbl = struct { QueryInterface: def (*s_IEnterpriseDropTarget, *s__GUID, **) -> (long); AddRef: def (*s_IEnterpriseDropTarget) -> (ulong); Release: def (*s_IEnterpriseDropTarget) -> (ulong); SetDropSourceEnterpriseId: def (*s_IEnterpriseDropTarget, *ushort) -> (long); IsEvaluatingEdpPolicy: def (*s_IEnterpriseDropTarget, *int) -> (long); }
export type s_tagOLEVERB = struct { lVerb: long; lpszVerbName: *ushort; fuFlags: ulong; grfAttribs: ulong; }
export type e_tagOLEVERBATTRIB = enum { OLEVERBATTRIB_NEVERDIRTIES = 1; OLEVERBATTRIB_ONCONTAINERMENU = 2; }
export type s_IEnumOLEVERBVtbl = struct { QueryInterface: def (*s_IEnumOLEVERB, *s__GUID, **) -> (long); AddRef: def (*s_IEnumOLEVERB) -> (ulong); Release: def (*s_IEnumOLEVERB) -> (ulong); Next: def (*s_IEnumOLEVERB, ulong, *s_tagOLEVERB, *ulong) -> (long); Skip: def (*s_IEnumOLEVERB, ulong) -> (long); Reset: def (*s_IEnumOLEVERB) -> (long); Clone: def (*s_IEnumOLEVERB, **s_IEnumOLEVERB) -> (long); }
export type s_IServiceProvider
export type s_IServiceProviderVtbl = struct { QueryInterface: def (*s_IServiceProvider, *s__GUID, **) -> (long); AddRef: def (*s_IServiceProvider) -> (ulong); Release: def (*s_IServiceProvider) -> (ulong); QueryService: def (*s_IServiceProvider, *s__GUID, *s__GUID, **) -> (long); }
export type s_IXMLDOMImplementation
export type s_IXMLDOMNode
export type s_IXMLDOMDocumentFragment
export type s_IXMLDOMDocument
export type s_IXMLDOMNodeList
export type s_IXMLDOMNamedNodeMap
export type s_IXMLDOMCharacterData
export type s_IXMLDOMAttribute
export type s_IXMLDOMElement
export type s_IXMLDOMText
export type s_IXMLDOMComment
export type s_IXMLDOMProcessingInstruction
export type s_IXMLDOMCDATASection
export type s_IXMLDOMDocumentType
export type s_IXMLDOMNotation
export type s_IXMLDOMEntity
export type s_IXMLDOMEntityReference
export type s_IXMLDOMParseError
export type s_IXTLRuntime
export type s_XMLDOMDocumentEvents
export type s_DOMDocument
export type s_DOMFreeThreadedDocument
export type s_IXMLHttpRequest
export type s_XMLHTTPRequest
export type s_IXMLDSOControl
export type s_XMLDSOControl
export type s_IXMLElementCollection
export type s_IXMLDocument
export type s_IXMLDocument2
export type s_IXMLElement
export type s_IXMLElement2
export type s_IXMLAttribute
export type s_IXMLError
export type s_XMLDocument
export type s__xml_error = struct { _nLine: uint; _pchBuf: *ushort; _cchBuf: uint; _ich: uint; _pszFound: *ushort; _pszExpected: *ushort; _reserved1: ulong; _reserved2: ulong; }
export type e_tagDOMNodeType = enum { NODE_INVALID; NODE_ELEMENT = 1; NODE_ATTRIBUTE = 2; NODE_TEXT = 3; NODE_CDATA_SECTION = 4; NODE_ENTITY_REFERENCE = 5; NODE_ENTITY = 6; NODE_PROCESSING_INSTRUCTION = 7; NODE_COMMENT = 8; NODE_DOCUMENT = 9; NODE_DOCUMENT_TYPE = 10; NODE_DOCUMENT_FRAGMENT = 11; NODE_NOTATION = 12; }
export type e_tagXMLEMEM_TYPE = enum { XMLELEMTYPE_ELEMENT; XMLELEMTYPE_TEXT = 1; XMLELEMTYPE_COMMENT = 2; XMLELEMTYPE_DOCUMENT = 3; XMLELEMTYPE_DTD = 4; XMLELEMTYPE_PI = 5; XMLELEMTYPE_OTHER = 6; }
export type s_IXMLDOMImplementationVtbl = struct { QueryInterface: def (*s_IXMLDOMImplementation, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMImplementation) -> (ulong); Release: def (*s_IXMLDOMImplementation) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMImplementation, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMImplementation, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMImplementation, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMImplementation, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); hasFeature: def (*s_IXMLDOMImplementation, *ushort, *ushort, *short) -> (long); }
export type s_IXMLDOMNodeVtbl = struct { QueryInterface: def (*s_IXMLDOMNode, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMNode) -> (ulong); Release: def (*s_IXMLDOMNode) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMNode, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMNode, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMNode, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMNode, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMNode, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMNode, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMNode, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMNode, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMNode, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMNode, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMNode, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMNode, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMNode, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMNode, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMNode, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMNode, **ushort) -> (long); get_text: def (*s_IXMLDOMNode, **ushort) -> (long); put_text: def (*s_IXMLDOMNode, *ushort) -> (long); get_specified: def (*s_IXMLDOMNode, *short) -> (long); get_definition: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMNode, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMNode, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMNode, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMNode, *ushort) -> (long); get_xml: def (*s_IXMLDOMNode, **ushort) -> (long); transformNode: def (*s_IXMLDOMNode, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMNode, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMNode, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMNode, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMNode, **ushort) -> (long); get_prefix: def (*s_IXMLDOMNode, **ushort) -> (long); get_baseName: def (*s_IXMLDOMNode, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMNode, *s_IXMLDOMNode, s_tagVARIANT) -> (long); }
export type s_IXMLDOMDocumentFragmentVtbl = struct { QueryInterface: def (*s_IXMLDOMDocumentFragment, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMDocumentFragment) -> (ulong); Release: def (*s_IXMLDOMDocumentFragment) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMDocumentFragment, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMDocumentFragment, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMDocumentFragment, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMDocumentFragment, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMDocumentFragment, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMDocumentFragment, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMDocumentFragment, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMDocumentFragment, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMDocumentFragment, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); get_text: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); put_text: def (*s_IXMLDOMDocumentFragment, *ushort) -> (long); get_specified: def (*s_IXMLDOMDocumentFragment, *short) -> (long); get_definition: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMDocumentFragment, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMDocumentFragment, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMDocumentFragment, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMDocumentFragment, *ushort) -> (long); get_xml: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); transformNode: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMDocumentFragment, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMDocumentFragment, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMDocumentFragment, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); get_prefix: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); get_baseName: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, s_tagVARIANT) -> (long); }
export type s_IXMLDOMDocumentVtbl = struct { QueryInterface: def (*s_IXMLDOMDocument, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMDocument) -> (ulong); Release: def (*s_IXMLDOMDocument) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMDocument, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMDocument, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMDocument, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMDocument, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMDocument, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMDocument, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMDocument, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMDocument, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMDocument, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMDocument, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMDocument, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMDocument, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMDocument, **ushort) -> (long); get_text: def (*s_IXMLDOMDocument, **ushort) -> (long); put_text: def (*s_IXMLDOMDocument, *ushort) -> (long); get_specified: def (*s_IXMLDOMDocument, *short) -> (long); get_definition: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMDocument, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMDocument, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMDocument, *ushort) -> (long); get_xml: def (*s_IXMLDOMDocument, **ushort) -> (long); transformNode: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMDocument, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMDocument, **ushort) -> (long); get_prefix: def (*s_IXMLDOMDocument, **ushort) -> (long); get_baseName: def (*s_IXMLDOMDocument, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_doctype: def (*s_IXMLDOMDocument, **s_IXMLDOMDocumentType) -> (long); get_implementation: def (*s_IXMLDOMDocument, **s_IXMLDOMImplementation) -> (long); get_documentElement: def (*s_IXMLDOMDocument, **s_IXMLDOMElement) -> (long); putref_documentElement: def (*s_IXMLDOMDocument, *s_IXMLDOMElement) -> (long); createElement: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMElement) -> (long); createDocumentFragment: def (*s_IXMLDOMDocument, **s_IXMLDOMDocumentFragment) -> (long); createTextNode: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMText) -> (long); createComment: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMComment) -> (long); createCDATASection: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMCDATASection) -> (long); createProcessingInstruction: def (*s_IXMLDOMDocument, *ushort, *ushort, **s_IXMLDOMProcessingInstruction) -> (long); createAttribute: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMAttribute) -> (long); createEntityReference: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMEntityReference) -> (long); getElementsByTagName: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMNodeList) -> (long); createNode: def (*s_IXMLDOMDocument, s_tagVARIANT, *ushort, *ushort, **s_IXMLDOMNode) -> (long); nodeFromID: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMNode) -> (long); load: def (*s_IXMLDOMDocument, s_tagVARIANT, *short) -> (long); get_readyState: def (*s_IXMLDOMDocument, *long) -> (long); get_parseError: def (*s_IXMLDOMDocument, **s_IXMLDOMParseError) -> (long); get_url: def (*s_IXMLDOMDocument, **ushort) -> (long); get_async: def (*s_IXMLDOMDocument, *short) -> (long); put_async: def (*s_IXMLDOMDocument, short) -> (long); abort: def (*s_IXMLDOMDocument) -> (long); loadXML: def (*s_IXMLDOMDocument, *ushort, *short) -> (long); save: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); get_validateOnParse: def (*s_IXMLDOMDocument, *short) -> (long); put_validateOnParse: def (*s_IXMLDOMDocument, short) -> (long); get_resolveExternals: def (*s_IXMLDOMDocument, *short) -> (long); put_resolveExternals: def (*s_IXMLDOMDocument, short) -> (long); get_preserveWhiteSpace: def (*s_IXMLDOMDocument, *short) -> (long); put_preserveWhiteSpace: def (*s_IXMLDOMDocument, short) -> (long); put_onreadystatechange: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); put_ondataavailable: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); put_ontransformnode: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); }
export type s_IXMLDOMNodeListVtbl = struct { QueryInterface: def (*s_IXMLDOMNodeList, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMNodeList) -> (ulong); Release: def (*s_IXMLDOMNodeList) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMNodeList, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMNodeList, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMNodeList, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMNodeList, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_item: def (*s_IXMLDOMNodeList, long, **s_IXMLDOMNode) -> (long); get_length: def (*s_IXMLDOMNodeList, *long) -> (long); nextNode: def (*s_IXMLDOMNodeList, **s_IXMLDOMNode) -> (long); reset: def (*s_IXMLDOMNodeList) -> (long); get__newEnum: def (*s_IXMLDOMNodeList, **s_IUnknown) -> (long); }
export type s_IXMLDOMNamedNodeMapVtbl = struct { QueryInterface: def (*s_IXMLDOMNamedNodeMap, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMNamedNodeMap) -> (ulong); Release: def (*s_IXMLDOMNamedNodeMap) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMNamedNodeMap, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMNamedNodeMap, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMNamedNodeMap, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMNamedNodeMap, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); getNamedItem: def (*s_IXMLDOMNamedNodeMap, *ushort, **s_IXMLDOMNode) -> (long); setNamedItem: def (*s_IXMLDOMNamedNodeMap, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeNamedItem: def (*s_IXMLDOMNamedNodeMap, *ushort, **s_IXMLDOMNode) -> (long); get_item: def (*s_IXMLDOMNamedNodeMap, long, **s_IXMLDOMNode) -> (long); get_length: def (*s_IXMLDOMNamedNodeMap, *long) -> (long); getQualifiedItem: def (*s_IXMLDOMNamedNodeMap, *ushort, *ushort, **s_IXMLDOMNode) -> (long); removeQualifiedItem: def (*s_IXMLDOMNamedNodeMap, *ushort, *ushort, **s_IXMLDOMNode) -> (long); nextNode: def (*s_IXMLDOMNamedNodeMap, **s_IXMLDOMNode) -> (long); reset: def (*s_IXMLDOMNamedNodeMap) -> (long); get__newEnum: def (*s_IXMLDOMNamedNodeMap, **s_IUnknown) -> (long); }
export type s_IXMLDOMCharacterDataVtbl = struct { QueryInterface: def (*s_IXMLDOMCharacterData, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMCharacterData) -> (ulong); Release: def (*s_IXMLDOMCharacterData) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMCharacterData, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMCharacterData, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMCharacterData, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMCharacterData, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMCharacterData, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMCharacterData, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMCharacterData, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMCharacterData, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMCharacterData, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMCharacterData, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMCharacterData, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMCharacterData, **ushort) -> (long); get_text: def (*s_IXMLDOMCharacterData, **ushort) -> (long); put_text: def (*s_IXMLDOMCharacterData, *ushort) -> (long); get_specified: def (*s_IXMLDOMCharacterData, *short) -> (long); get_definition: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMCharacterData, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMCharacterData, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMCharacterData, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMCharacterData, *ushort) -> (long); get_xml: def (*s_IXMLDOMCharacterData, **ushort) -> (long); transformNode: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMCharacterData, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMCharacterData, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMCharacterData, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMCharacterData, **ushort) -> (long); get_prefix: def (*s_IXMLDOMCharacterData, **ushort) -> (long); get_baseName: def (*s_IXMLDOMCharacterData, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_data: def (*s_IXMLDOMCharacterData, **ushort) -> (long); put_data: def (*s_IXMLDOMCharacterData, *ushort) -> (long); get_length: def (*s_IXMLDOMCharacterData, *long) -> (long); substringData: def (*s_IXMLDOMCharacterData, long, long, **ushort) -> (long); appendData: def (*s_IXMLDOMCharacterData, *ushort) -> (long); insertData: def (*s_IXMLDOMCharacterData, long, *ushort) -> (long); deleteData: def (*s_IXMLDOMCharacterData, long, long) -> (long); replaceData: def (*s_IXMLDOMCharacterData, long, long, *ushort) -> (long); }
export type s_IXMLDOMAttributeVtbl = struct { QueryInterface: def (*s_IXMLDOMAttribute, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMAttribute) -> (ulong); Release: def (*s_IXMLDOMAttribute) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMAttribute, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMAttribute, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMAttribute, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMAttribute, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMAttribute, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMAttribute, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMAttribute, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMAttribute, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMAttribute, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMAttribute, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMAttribute, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMAttribute, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_text: def (*s_IXMLDOMAttribute, **ushort) -> (long); put_text: def (*s_IXMLDOMAttribute, *ushort) -> (long); get_specified: def (*s_IXMLDOMAttribute, *short) -> (long); get_definition: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMAttribute, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMAttribute, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMAttribute, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMAttribute, *ushort) -> (long); get_xml: def (*s_IXMLDOMAttribute, **ushort) -> (long); transformNode: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMAttribute, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMAttribute, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMAttribute, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_prefix: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_baseName: def (*s_IXMLDOMAttribute, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_name: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_value: def (*s_IXMLDOMAttribute, *s_tagVARIANT) -> (long); put_value: def (*s_IXMLDOMAttribute, s_tagVARIANT) -> (long); }
export type s_IXMLDOMElementVtbl = struct { QueryInterface: def (*s_IXMLDOMElement, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMElement) -> (ulong); Release: def (*s_IXMLDOMElement) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMElement, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMElement, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMElement, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMElement, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMElement, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMElement, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMElement, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMElement, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMElement, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMElement, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMElement, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMElement, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMElement, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMElement, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMElement, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMElement, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMElement, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMElement, **ushort) -> (long); get_text: def (*s_IXMLDOMElement, **ushort) -> (long); put_text: def (*s_IXMLDOMElement, *ushort) -> (long); get_specified: def (*s_IXMLDOMElement, *short) -> (long); get_definition: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMElement, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMElement, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMElement, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMElement, *ushort) -> (long); get_xml: def (*s_IXMLDOMElement, **ushort) -> (long); transformNode: def (*s_IXMLDOMElement, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMElement, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMElement, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMElement, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMElement, **ushort) -> (long); get_prefix: def (*s_IXMLDOMElement, **ushort) -> (long); get_baseName: def (*s_IXMLDOMElement, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMElement, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_tagName: def (*s_IXMLDOMElement, **ushort) -> (long); getAttribute: def (*s_IXMLDOMElement, *ushort, *s_tagVARIANT) -> (long); setAttribute: def (*s_IXMLDOMElement, *ushort, s_tagVARIANT) -> (long); removeAttribute: def (*s_IXMLDOMElement, *ushort) -> (long); getAttributeNode: def (*s_IXMLDOMElement, *ushort, **s_IXMLDOMAttribute) -> (long); setAttributeNode: def (*s_IXMLDOMElement, *s_IXMLDOMAttribute, **s_IXMLDOMAttribute) -> (long); removeAttributeNode: def (*s_IXMLDOMElement, *s_IXMLDOMAttribute, **s_IXMLDOMAttribute) -> (long); getElementsByTagName: def (*s_IXMLDOMElement, *ushort, **s_IXMLDOMNodeList) -> (long); normalize: def (*s_IXMLDOMElement) -> (long); }
export type s_IXMLDOMTextVtbl = struct { QueryInterface: def (*s_IXMLDOMText, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMText) -> (ulong); Release: def (*s_IXMLDOMText) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMText, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMText, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMText, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMText, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMText, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMText, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMText, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMText, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMText, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMText, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMText, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMText, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMText, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMText, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMText, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMText, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMText, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMText, **ushort) -> (long); get_text: def (*s_IXMLDOMText, **ushort) -> (long); put_text: def (*s_IXMLDOMText, *ushort) -> (long); get_specified: def (*s_IXMLDOMText, *short) -> (long); get_definition: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMText, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMText, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMText, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMText, *ushort) -> (long); get_xml: def (*s_IXMLDOMText, **ushort) -> (long); transformNode: def (*s_IXMLDOMText, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMText, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMText, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMText, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMText, **ushort) -> (long); get_prefix: def (*s_IXMLDOMText, **ushort) -> (long); get_baseName: def (*s_IXMLDOMText, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMText, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_data: def (*s_IXMLDOMText, **ushort) -> (long); put_data: def (*s_IXMLDOMText, *ushort) -> (long); get_length: def (*s_IXMLDOMText, *long) -> (long); substringData: def (*s_IXMLDOMText, long, long, **ushort) -> (long); appendData: def (*s_IXMLDOMText, *ushort) -> (long); insertData: def (*s_IXMLDOMText, long, *ushort) -> (long); deleteData: def (*s_IXMLDOMText, long, long) -> (long); replaceData: def (*s_IXMLDOMText, long, long, *ushort) -> (long); splitText: def (*s_IXMLDOMText, long, **s_IXMLDOMText) -> (long); }
export type s_IXMLDOMCommentVtbl = struct { QueryInterface: def (*s_IXMLDOMComment, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMComment) -> (ulong); Release: def (*s_IXMLDOMComment) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMComment, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMComment, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMComment, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMComment, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMComment, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMComment, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMComment, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMComment, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMComment, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMComment, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMComment, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMComment, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMComment, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMComment, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMComment, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMComment, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMComment, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMComment, **ushort) -> (long); get_text: def (*s_IXMLDOMComment, **ushort) -> (long); put_text: def (*s_IXMLDOMComment, *ushort) -> (long); get_specified: def (*s_IXMLDOMComment, *short) -> (long); get_definition: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMComment, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMComment, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMComment, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMComment, *ushort) -> (long); get_xml: def (*s_IXMLDOMComment, **ushort) -> (long); transformNode: def (*s_IXMLDOMComment, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMComment, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMComment, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMComment, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMComment, **ushort) -> (long); get_prefix: def (*s_IXMLDOMComment, **ushort) -> (long); get_baseName: def (*s_IXMLDOMComment, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMComment, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_data: def (*s_IXMLDOMComment, **ushort) -> (long); put_data: def (*s_IXMLDOMComment, *ushort) -> (long); get_length: def (*s_IXMLDOMComment, *long) -> (long); substringData: def (*s_IXMLDOMComment, long, long, **ushort) -> (long); appendData: def (*s_IXMLDOMComment, *ushort) -> (long); insertData: def (*s_IXMLDOMComment, long, *ushort) -> (long); deleteData: def (*s_IXMLDOMComment, long, long) -> (long); replaceData: def (*s_IXMLDOMComment, long, long, *ushort) -> (long); }
export type s_IXMLDOMProcessingInstructionVtbl = struct { QueryInterface: def (*s_IXMLDOMProcessingInstruction, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMProcessingInstruction) -> (ulong); Release: def (*s_IXMLDOMProcessingInstruction) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMProcessingInstruction, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMProcessingInstruction, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMProcessingInstruction, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMProcessingInstruction, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMProcessingInstruction, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMProcessingInstruction, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMProcessingInstruction, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMProcessingInstruction, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMProcessingInstruction, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_text: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); put_text: def (*s_IXMLDOMProcessingInstruction, *ushort) -> (long); get_specified: def (*s_IXMLDOMProcessingInstruction, *short) -> (long); get_definition: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMProcessingInstruction, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMProcessingInstruction, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMProcessingInstruction, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMProcessingInstruction, *ushort) -> (long); get_xml: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); transformNode: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMProcessingInstruction, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMProcessingInstruction, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMProcessingInstruction, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_prefix: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_baseName: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_target: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_data: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); put_data: def (*s_IXMLDOMProcessingInstruction, *ushort) -> (long); }
export type s_IXMLDOMCDATASectionVtbl = struct { QueryInterface: def (*s_IXMLDOMCDATASection, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMCDATASection) -> (ulong); Release: def (*s_IXMLDOMCDATASection) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMCDATASection, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMCDATASection, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMCDATASection, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMCDATASection, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMCDATASection, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMCDATASection, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMCDATASection, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMCDATASection, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMCDATASection, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMCDATASection, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMCDATASection, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMCDATASection, **ushort) -> (long); get_text: def (*s_IXMLDOMCDATASection, **ushort) -> (long); put_text: def (*s_IXMLDOMCDATASection, *ushort) -> (long); get_specified: def (*s_IXMLDOMCDATASection, *short) -> (long); get_definition: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMCDATASection, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMCDATASection, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMCDATASection, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMCDATASection, *ushort) -> (long); get_xml: def (*s_IXMLDOMCDATASection, **ushort) -> (long); transformNode: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMCDATASection, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMCDATASection, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMCDATASection, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMCDATASection, **ushort) -> (long); get_prefix: def (*s_IXMLDOMCDATASection, **ushort) -> (long); get_baseName: def (*s_IXMLDOMCDATASection, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_data: def (*s_IXMLDOMCDATASection, **ushort) -> (long); put_data: def (*s_IXMLDOMCDATASection, *ushort) -> (long); get_length: def (*s_IXMLDOMCDATASection, *long) -> (long); substringData: def (*s_IXMLDOMCDATASection, long, long, **ushort) -> (long); appendData: def (*s_IXMLDOMCDATASection, *ushort) -> (long); insertData: def (*s_IXMLDOMCDATASection, long, *ushort) -> (long); deleteData: def (*s_IXMLDOMCDATASection, long, long) -> (long); replaceData: def (*s_IXMLDOMCDATASection, long, long, *ushort) -> (long); splitText: def (*s_IXMLDOMCDATASection, long, **s_IXMLDOMText) -> (long); }
export type s_IXMLDOMDocumentTypeVtbl = struct { QueryInterface: def (*s_IXMLDOMDocumentType, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMDocumentType) -> (ulong); Release: def (*s_IXMLDOMDocumentType) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMDocumentType, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMDocumentType, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMDocumentType, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMDocumentType, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMDocumentType, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMDocumentType, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMDocumentType, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMDocumentType, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMDocumentType, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMDocumentType, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_text: def (*s_IXMLDOMDocumentType, **ushort) -> (long); put_text: def (*s_IXMLDOMDocumentType, *ushort) -> (long); get_specified: def (*s_IXMLDOMDocumentType, *short) -> (long); get_definition: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMDocumentType, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMDocumentType, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMDocumentType, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMDocumentType, *ushort) -> (long); get_xml: def (*s_IXMLDOMDocumentType, **ushort) -> (long); transformNode: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMDocumentType, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMDocumentType, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMDocumentType, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_prefix: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_baseName: def (*s_IXMLDOMDocumentType, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_name: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_entities: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNamedNodeMap) -> (long); get_notations: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNamedNodeMap) -> (long); }
export type s_IXMLDOMNotationVtbl = struct { QueryInterface: def (*s_IXMLDOMNotation, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMNotation) -> (ulong); Release: def (*s_IXMLDOMNotation) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMNotation, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMNotation, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMNotation, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMNotation, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMNotation, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMNotation, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMNotation, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMNotation, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMNotation, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMNotation, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMNotation, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMNotation, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMNotation, **ushort) -> (long); get_text: def (*s_IXMLDOMNotation, **ushort) -> (long); put_text: def (*s_IXMLDOMNotation, *ushort) -> (long); get_specified: def (*s_IXMLDOMNotation, *short) -> (long); get_definition: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMNotation, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMNotation, *ushort) -> (long); get_xml: def (*s_IXMLDOMNotation, **ushort) -> (long); transformNode: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMNotation, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMNotation, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMNotation, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMNotation, **ushort) -> (long); get_prefix: def (*s_IXMLDOMNotation, **ushort) -> (long); get_baseName: def (*s_IXMLDOMNotation, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_publicId: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); get_systemId: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); }
export type s_IXMLDOMEntityVtbl = struct { QueryInterface: def (*s_IXMLDOMEntity, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMEntity) -> (ulong); Release: def (*s_IXMLDOMEntity) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMEntity, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMEntity, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMEntity, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMEntity, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMEntity, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMEntity, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMEntity, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMEntity, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMEntity, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMEntity, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMEntity, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMEntity, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMEntity, **ushort) -> (long); get_text: def (*s_IXMLDOMEntity, **ushort) -> (long); put_text: def (*s_IXMLDOMEntity, *ushort) -> (long); get_specified: def (*s_IXMLDOMEntity, *short) -> (long); get_definition: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMEntity, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMEntity, *ushort) -> (long); get_xml: def (*s_IXMLDOMEntity, **ushort) -> (long); transformNode: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMEntity, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMEntity, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMEntity, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMEntity, **ushort) -> (long); get_prefix: def (*s_IXMLDOMEntity, **ushort) -> (long); get_baseName: def (*s_IXMLDOMEntity, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_publicId: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); get_systemId: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); get_notationName: def (*s_IXMLDOMEntity, **ushort) -> (long); }
export type s_IXMLDOMEntityReferenceVtbl = struct { QueryInterface: def (*s_IXMLDOMEntityReference, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMEntityReference) -> (ulong); Release: def (*s_IXMLDOMEntityReference) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMEntityReference, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMEntityReference, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMEntityReference, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMEntityReference, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMEntityReference, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMEntityReference, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMEntityReference, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMEntityReference, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMEntityReference, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMEntityReference, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMEntityReference, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMEntityReference, **ushort) -> (long); get_text: def (*s_IXMLDOMEntityReference, **ushort) -> (long); put_text: def (*s_IXMLDOMEntityReference, *ushort) -> (long); get_specified: def (*s_IXMLDOMEntityReference, *short) -> (long); get_definition: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMEntityReference, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMEntityReference, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMEntityReference, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMEntityReference, *ushort) -> (long); get_xml: def (*s_IXMLDOMEntityReference, **ushort) -> (long); transformNode: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMEntityReference, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMEntityReference, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMEntityReference, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMEntityReference, **ushort) -> (long); get_prefix: def (*s_IXMLDOMEntityReference, **ushort) -> (long); get_baseName: def (*s_IXMLDOMEntityReference, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, s_tagVARIANT) -> (long); }
export type s_IXMLDOMParseErrorVtbl = struct { QueryInterface: def (*s_IXMLDOMParseError, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDOMParseError) -> (ulong); Release: def (*s_IXMLDOMParseError) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMParseError, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMParseError, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMParseError, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMParseError, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_errorCode: def (*s_IXMLDOMParseError, *long) -> (long); get_url: def (*s_IXMLDOMParseError, **ushort) -> (long); get_reason: def (*s_IXMLDOMParseError, **ushort) -> (long); get_srcText: def (*s_IXMLDOMParseError, **ushort) -> (long); get_line: def (*s_IXMLDOMParseError, *long) -> (long); get_linepos: def (*s_IXMLDOMParseError, *long) -> (long); get_filepos: def (*s_IXMLDOMParseError, *long) -> (long); }
export type s_IXTLRuntimeVtbl = struct { QueryInterface: def (*s_IXTLRuntime, *s__GUID, **) -> (long); AddRef: def (*s_IXTLRuntime) -> (ulong); Release: def (*s_IXTLRuntime) -> (ulong); GetTypeInfoCount: def (*s_IXTLRuntime, *uint) -> (long); GetTypeInfo: def (*s_IXTLRuntime, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXTLRuntime, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXTLRuntime, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXTLRuntime, **ushort) -> (long); get_nodeValue: def (*s_IXTLRuntime, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXTLRuntime, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXTLRuntime, *e_tagDOMNodeType) -> (long); get_parentNode: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXTLRuntime, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXTLRuntime, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXTLRuntime, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXTLRuntime, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXTLRuntime, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXTLRuntime, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXTLRuntime, *short) -> (long); get_ownerDocument: def (*s_IXTLRuntime, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXTLRuntime, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXTLRuntime, **ushort) -> (long); get_text: def (*s_IXTLRuntime, **ushort) -> (long); put_text: def (*s_IXTLRuntime, *ushort) -> (long); get_specified: def (*s_IXTLRuntime, *short) -> (long); get_definition: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXTLRuntime, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXTLRuntime, s_tagVARIANT) -> (long); get_dataType: def (*s_IXTLRuntime, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXTLRuntime, *ushort) -> (long); get_xml: def (*s_IXTLRuntime, **ushort) -> (long); transformNode: def (*s_IXTLRuntime, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXTLRuntime, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXTLRuntime, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXTLRuntime, *short) -> (long); get_namespaceURI: def (*s_IXTLRuntime, **ushort) -> (long); get_prefix: def (*s_IXTLRuntime, **ushort) -> (long); get_baseName: def (*s_IXTLRuntime, **ushort) -> (long); transformNodeToObject: def (*s_IXTLRuntime, *s_IXMLDOMNode, s_tagVARIANT) -> (long); uniqueID: def (*s_IXTLRuntime, *s_IXMLDOMNode, *long) -> (long); depth: def (*s_IXTLRuntime, *s_IXMLDOMNode, *long) -> (long); childNumber: def (*s_IXTLRuntime, *s_IXMLDOMNode, *long) -> (long); ancestorChildNumber: def (*s_IXTLRuntime, *ushort, *s_IXMLDOMNode, *long) -> (long); absoluteChildNumber: def (*s_IXTLRuntime, *s_IXMLDOMNode, *long) -> (long); formatIndex: def (*s_IXTLRuntime, long, *ushort, **ushort) -> (long); formatNumber: def (*s_IXTLRuntime, double, *ushort, **ushort) -> (long); formatDate: def (*s_IXTLRuntime, s_tagVARIANT, *ushort, s_tagVARIANT, **ushort) -> (long); formatTime: def (*s_IXTLRuntime, s_tagVARIANT, *ushort, s_tagVARIANT, **ushort) -> (long); }
export type s_XMLDOMDocumentEventsVtbl = struct { QueryInterface: def (*s_XMLDOMDocumentEvents, *s__GUID, **) -> (long); AddRef: def (*s_XMLDOMDocumentEvents) -> (ulong); Release: def (*s_XMLDOMDocumentEvents) -> (ulong); GetTypeInfoCount: def (*s_XMLDOMDocumentEvents, *uint) -> (long); GetTypeInfo: def (*s_XMLDOMDocumentEvents, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_XMLDOMDocumentEvents, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_XMLDOMDocumentEvents, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); }
export type s_IXMLHttpRequestVtbl = struct { QueryInterface: def (*s_IXMLHttpRequest, *s__GUID, **) -> (long); AddRef: def (*s_IXMLHttpRequest) -> (ulong); Release: def (*s_IXMLHttpRequest) -> (ulong); GetTypeInfoCount: def (*s_IXMLHttpRequest, *uint) -> (long); GetTypeInfo: def (*s_IXMLHttpRequest, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLHttpRequest, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLHttpRequest, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); open: def (*s_IXMLHttpRequest, *ushort, *ushort, s_tagVARIANT, s_tagVARIANT, s_tagVARIANT) -> (long); setRequestHeader: def (*s_IXMLHttpRequest, *ushort, *ushort) -> (long); getResponseHeader: def (*s_IXMLHttpRequest, *ushort, **ushort) -> (long); getAllResponseHeaders: def (*s_IXMLHttpRequest, **ushort) -> (long); send: def (*s_IXMLHttpRequest, s_tagVARIANT) -> (long); abort: def (*s_IXMLHttpRequest) -> (long); get_status: def (*s_IXMLHttpRequest, *long) -> (long); get_statusText: def (*s_IXMLHttpRequest, **ushort) -> (long); get_responseXML: def (*s_IXMLHttpRequest, **s_IDispatch) -> (long); get_responseText: def (*s_IXMLHttpRequest, **ushort) -> (long); get_responseBody: def (*s_IXMLHttpRequest, *s_tagVARIANT) -> (long); get_responseStream: def (*s_IXMLHttpRequest, *s_tagVARIANT) -> (long); get_readyState: def (*s_IXMLHttpRequest, *long) -> (long); put_onreadystatechange: def (*s_IXMLHttpRequest, *s_IDispatch) -> (long); }
export type s_IXMLDSOControlVtbl = struct { QueryInterface: def (*s_IXMLDSOControl, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDSOControl) -> (ulong); Release: def (*s_IXMLDSOControl) -> (ulong); GetTypeInfoCount: def (*s_IXMLDSOControl, *uint) -> (long); GetTypeInfo: def (*s_IXMLDSOControl, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDSOControl, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDSOControl, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_XMLDocument: def (*s_IXMLDSOControl, **s_IXMLDOMDocument) -> (long); put_XMLDocument: def (*s_IXMLDSOControl, *s_IXMLDOMDocument) -> (long); get_JavaDSOCompatible: def (*s_IXMLDSOControl, *int) -> (long); put_JavaDSOCompatible: def (*s_IXMLDSOControl, int) -> (long); get_readyState: def (*s_IXMLDSOControl, *long) -> (long); }
export type s_IXMLElementCollectionVtbl = struct { QueryInterface: def (*s_IXMLElementCollection, *s__GUID, **) -> (long); AddRef: def (*s_IXMLElementCollection) -> (ulong); Release: def (*s_IXMLElementCollection) -> (ulong); GetTypeInfoCount: def (*s_IXMLElementCollection, *uint) -> (long); GetTypeInfo: def (*s_IXMLElementCollection, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLElementCollection, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLElementCollection, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); put_length: def (*s_IXMLElementCollection, long) -> (long); get_length: def (*s_IXMLElementCollection, *long) -> (long); get__newEnum: def (*s_IXMLElementCollection, **s_IUnknown) -> (long); item: def (*s_IXMLElementCollection, s_tagVARIANT, s_tagVARIANT, **s_IDispatch) -> (long); }
export type s_IXMLDocumentVtbl = struct { QueryInterface: def (*s_IXMLDocument, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDocument) -> (ulong); Release: def (*s_IXMLDocument) -> (ulong); GetTypeInfoCount: def (*s_IXMLDocument, *uint) -> (long); GetTypeInfo: def (*s_IXMLDocument, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDocument, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDocument, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_root: def (*s_IXMLDocument, **s_IXMLElement) -> (long); get_fileSize: def (*s_IXMLDocument, **ushort) -> (long); get_fileModifiedDate: def (*s_IXMLDocument, **ushort) -> (long); get_fileUpdatedDate: def (*s_IXMLDocument, **ushort) -> (long); get_URL: def (*s_IXMLDocument, **ushort) -> (long); put_URL: def (*s_IXMLDocument, *ushort) -> (long); get_mimeType: def (*s_IXMLDocument, **ushort) -> (long); get_readyState: def (*s_IXMLDocument, *long) -> (long); get_charset: def (*s_IXMLDocument, **ushort) -> (long); put_charset: def (*s_IXMLDocument, *ushort) -> (long); get_version: def (*s_IXMLDocument, **ushort) -> (long); get_doctype: def (*s_IXMLDocument, **ushort) -> (long); get_dtdURL: def (*s_IXMLDocument, **ushort) -> (long); createElement: def (*s_IXMLDocument, s_tagVARIANT, s_tagVARIANT, **s_IXMLElement) -> (long); }
export type s_IXMLDocument2Vtbl = struct { QueryInterface: def (*s_IXMLDocument2, *s__GUID, **) -> (long); AddRef: def (*s_IXMLDocument2) -> (ulong); Release: def (*s_IXMLDocument2) -> (ulong); GetTypeInfoCount: def (*s_IXMLDocument2, *uint) -> (long); GetTypeInfo: def (*s_IXMLDocument2, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDocument2, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDocument2, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_root: def (*s_IXMLDocument2, **s_IXMLElement2) -> (long); get_fileSize: def (*s_IXMLDocument2, **ushort) -> (long); get_fileModifiedDate: def (*s_IXMLDocument2, **ushort) -> (long); get_fileUpdatedDate: def (*s_IXMLDocument2, **ushort) -> (long); get_URL: def (*s_IXMLDocument2, **ushort) -> (long); put_URL: def (*s_IXMLDocument2, *ushort) -> (long); get_mimeType: def (*s_IXMLDocument2, **ushort) -> (long); get_readyState: def (*s_IXMLDocument2, *long) -> (long); get_charset: def (*s_IXMLDocument2, **ushort) -> (long); put_charset: def (*s_IXMLDocument2, *ushort) -> (long); get_version: def (*s_IXMLDocument2, **ushort) -> (long); get_doctype: def (*s_IXMLDocument2, **ushort) -> (long); get_dtdURL: def (*s_IXMLDocument2, **ushort) -> (long); createElement: def (*s_IXMLDocument2, s_tagVARIANT, s_tagVARIANT, **s_IXMLElement2) -> (long); get_async: def (*s_IXMLDocument2, *short) -> (long); put_async: def (*s_IXMLDocument2, short) -> (long); }
export type s_IXMLElementVtbl = struct { QueryInterface: def (*s_IXMLElement, *s__GUID, **) -> (long); AddRef: def (*s_IXMLElement) -> (ulong); Release: def (*s_IXMLElement) -> (ulong); GetTypeInfoCount: def (*s_IXMLElement, *uint) -> (long); GetTypeInfo: def (*s_IXMLElement, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLElement, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLElement, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_tagName: def (*s_IXMLElement, **ushort) -> (long); put_tagName: def (*s_IXMLElement, *ushort) -> (long); get_parent: def (*s_IXMLElement, **s_IXMLElement) -> (long); setAttribute: def (*s_IXMLElement, *ushort, s_tagVARIANT) -> (long); getAttribute: def (*s_IXMLElement, *ushort, *s_tagVARIANT) -> (long); removeAttribute: def (*s_IXMLElement, *ushort) -> (long); get_children: def (*s_IXMLElement, **s_IXMLElementCollection) -> (long); get_type: def (*s_IXMLElement, *long) -> (long); get_text: def (*s_IXMLElement, **ushort) -> (long); put_text: def (*s_IXMLElement, *ushort) -> (long); addChild: def (*s_IXMLElement, *s_IXMLElement, long, long) -> (long); removeChild: def (*s_IXMLElement, *s_IXMLElement) -> (long); }
export type s_IXMLElement2Vtbl = struct { QueryInterface: def (*s_IXMLElement2, *s__GUID, **) -> (long); AddRef: def (*s_IXMLElement2) -> (ulong); Release: def (*s_IXMLElement2) -> (ulong); GetTypeInfoCount: def (*s_IXMLElement2, *uint) -> (long); GetTypeInfo: def (*s_IXMLElement2, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLElement2, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLElement2, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_tagName: def (*s_IXMLElement2, **ushort) -> (long); put_tagName: def (*s_IXMLElement2, *ushort) -> (long); get_parent: def (*s_IXMLElement2, **s_IXMLElement2) -> (long); setAttribute: def (*s_IXMLElement2, *ushort, s_tagVARIANT) -> (long); getAttribute: def (*s_IXMLElement2, *ushort, *s_tagVARIANT) -> (long); removeAttribute: def (*s_IXMLElement2, *ushort) -> (long); get_children: def (*s_IXMLElement2, **s_IXMLElementCollection) -> (long); get_type: def (*s_IXMLElement2, *long) -> (long); get_text: def (*s_IXMLElement2, **ushort) -> (long); put_text: def (*s_IXMLElement2, *ushort) -> (long); addChild: def (*s_IXMLElement2, *s_IXMLElement2, long, long) -> (long); removeChild: def (*s_IXMLElement2, *s_IXMLElement2) -> (long); get_attributes: def (*s_IXMLElement2, **s_IXMLElementCollection) -> (long); }
export type s_IXMLAttributeVtbl = struct { QueryInterface: def (*s_IXMLAttribute, *s__GUID, **) -> (long); AddRef: def (*s_IXMLAttribute) -> (ulong); Release: def (*s_IXMLAttribute) -> (ulong); GetTypeInfoCount: def (*s_IXMLAttribute, *uint) -> (long); GetTypeInfo: def (*s_IXMLAttribute, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLAttribute, *s__GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLAttribute, long, *s__GUID, ulong, ushort, *s_tagDISPPARAMS, *s_tagVARIANT, *s_tagEXCEPINFO, *uint) -> (long); get_name: def (*s_IXMLAttribute, **ushort) -> (long); get_value: def (*s_IXMLAttribute, **ushort) -> (long); }
export type s_IXMLErrorVtbl = struct { QueryInterface: def (*s_IXMLError, *s__GUID, **) -> (long); AddRef: def (*s_IXMLError) -> (ulong); Release: def (*s_IXMLError) -> (ulong); GetErrorInfo: def (*s_IXMLError, *s__xml_error) -> (long); }
export type e_IEObjectType = enum { IE_EPM_OBJECT_EVENT; IE_EPM_OBJECT_MUTEX = 1; IE_EPM_OBJECT_SEMAPHORE = 2; IE_EPM_OBJECT_SHARED_MEMORY = 3; IE_EPM_OBJECT_WAITABLE_TIMER = 4; IE_EPM_OBJECT_FILE = 5; IE_EPM_OBJECT_NAMED_PIPE = 6; IE_EPM_OBJECT_REGISTRY = 7; }
export type s_IPersistMonikerVtbl = struct { QueryInterface: def (*s_IPersistMoniker, *s__GUID, **) -> (long); AddRef: def (*s_IPersistMoniker) -> (ulong); Release: def (*s_IPersistMoniker) -> (ulong); GetClassID: def (*s_IPersistMoniker, *s__GUID) -> (long); IsDirty: def (*s_IPersistMoniker) -> (long); Load: def (*s_IPersistMoniker, int, *s_IMoniker, *s_IBindCtx, ulong) -> (long); Save: def (*s_IPersistMoniker, *s_IMoniker, *s_IBindCtx, int) -> (long); SaveCompleted: def (*s_IPersistMoniker, *s_IMoniker, *s_IBindCtx) -> (long); GetCurMoniker: def (*s_IPersistMoniker, **s_IMoniker) -> (long); }
export type e___MIDL_IMonikerProp_0001 = enum { MIMETYPEPROP; USE_SRC_URL = 1; CLASSIDPROP = 2; TRUSTEDDOWNLOADPROP = 3; POPUPLEVELPROP = 4; }
export type s_IMonikerPropVtbl = struct { QueryInterface: def (*s_IMonikerProp, *s__GUID, **) -> (long); AddRef: def (*s_IMonikerProp) -> (ulong); Release: def (*s_IMonikerProp) -> (ulong); PutProperty: def (*s_IMonikerProp, e___MIDL_IMonikerProp_0001, *ushort) -> (long); }
export type s_IBindProtocolVtbl = struct { QueryInterface: def (*s_IBindProtocol, *s__GUID, **) -> (long); AddRef: def (*s_IBindProtocol) -> (ulong); Release: def (*s_IBindProtocol) -> (ulong); CreateBinding: def (*s_IBindProtocol, *ushort, *s_IBindCtx, **s_IBinding) -> (long); }
export type s_IBindingVtbl = struct { QueryInterface: def (*s_IBinding, *s__GUID, **) -> (long); AddRef: def (*s_IBinding) -> (ulong); Release: def (*s_IBinding) -> (ulong); Abort: def (*s_IBinding) -> (long); Suspend: def (*s_IBinding) -> (long); Resume: def (*s_IBinding) -> (long); SetPriority: def (*s_IBinding, long) -> (long); GetPriority: def (*s_IBinding, *long) -> (long); GetBindResult: def (*s_IBinding, *s__GUID, *ulong, **ushort, *ulong) -> (long); }
export type e___MIDL_IBindStatusCallback_0001 = enum { BINDVERB_GET; BINDVERB_POST = 1; BINDVERB_PUT = 2; BINDVERB_CUSTOM = 3; BINDVERB_RESERVED1 = 4; }
export type e___MIDL_IBindStatusCallback_0002 = enum { BINDINFOF_URLENCODESTGMEDDATA = 1; BINDINFOF_URLENCODEDEXTRAINFO = 2; }
export type e___MIDL_IBindStatusCallback_0003 = enum { BINDF_ASYNCHRONOUS = 1; BINDF_ASYNCSTORAGE = 2; BINDF_NOPROGRESSIVERENDERING = 4; BINDF_OFFLINEOPERATION = 8; BINDF_GETNEWESTVERSION = 16; BINDF_NOWRITECACHE = 32; BINDF_NEEDFILE = 64; BINDF_PULLDATA = 128; BINDF_IGNORESECURITYPROBLEM = 256; BINDF_RESYNCHRONIZE = 512; BINDF_HYPERLINK = 1024; BINDF_NO_UI = 2048; BINDF_SILENTOPERATION = 4096; BINDF_PRAGMA_NO_CACHE = 8192; BINDF_GETCLASSOBJECT = 16384; BINDF_RESERVED_1 = 32768; BINDF_FREE_THREADED = 65536; BINDF_DIRECT_READ = 131072; BINDF_FORMS_SUBMIT = 262144; BINDF_GETFROMCACHE_IF_NET_FAIL = 524288; BINDF_FROMURLMON = 1048576; BINDF_FWD_BACK = 2097152; BINDF_PREFERDEFAULTHANDLER = 4194304; BINDF_ENFORCERESTRICTED = 8388608; BINDF_RESERVED_2 = -2147483648; BINDF_RESERVED_3 = 16777216; BINDF_RESERVED_4 = 33554432; BINDF_RESERVED_5 = 67108864; BINDF_RESERVED_6 = 134217728; BINDF_RESERVED_7 = 1073741824; BINDF_RESERVED_8 = 536870912; }
export type e___MIDL_IBindStatusCallback_0004 = enum { URL_ENCODING_NONE; URL_ENCODING_ENABLE_UTF8 = 268435456; URL_ENCODING_DISABLE_UTF8 = 536870912; }
export type s__tagBINDINFO = struct { cbSize: ulong; szExtraInfo: *ushort; stgmedData: s_tagSTGMEDIUM; grfBindInfoF: ulong; dwBindVerb: ulong; szCustomVerb: *ushort; cbstgmedData: ulong; dwOptions: ulong; dwOptionsFlags: ulong; dwCodePage: ulong; securityAttributes: s__SECURITY_ATTRIBUTES; iid: s__GUID; pUnk: *s_IUnknown; dwReserved: ulong; }
export type s__REMSECURITY_ATTRIBUTES = struct { nLength: ulong; lpSecurityDescriptor: ulong; bInheritHandle: int; }
export type s__tagRemBINDINFO = struct { cbSize: ulong; szExtraInfo: *ushort; grfBindInfoF: ulong; dwBindVerb: ulong; szCustomVerb: *ushort; cbstgmedData: ulong; dwOptions: ulong; dwOptionsFlags: ulong; dwCodePage: ulong; securityAttributes: s__REMSECURITY_ATTRIBUTES; iid: s__GUID; pUnk: *s_IUnknown; dwReserved: ulong; }
export type s_tagRemFORMATETC = struct { cfFormat: ulong; ptd: ulong; dwAspect: ulong; lindex: long; tymed: ulong; }
export type e___MIDL_IBindStatusCallback_0005 = enum { BINDINFO_OPTIONS_WININETFLAG = 65536; BINDINFO_OPTIONS_ENABLE_UTF8 = 131072; BINDINFO_OPTIONS_DISABLE_UTF8 = 262144; BINDINFO_OPTIONS_USE_IE_ENCODING = 524288; BINDINFO_OPTIONS_BINDTOOBJECT = 1048576; BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152; BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304; BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608; BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216; BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 33554432; BINDINFO_WPC_DOWNLOADBLOCKED = 134217728; BINDINFO_WPC_LOGGING_ENABLED = 268435456; BINDINFO_OPTIONS_ALLOWCONNECTDATA = 536870912; BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 1073741824; BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = -2147483648; }
export type e___MIDL_IBindStatusCallback_0006 = enum { BSCF_FIRSTDATANOTIFICATION = 1; BSCF_INTERMEDIATEDATANOTIFICATION = 2; BSCF_LASTDATANOTIFICATION = 4; BSCF_DATAFULLYAVAILABLE = 8; BSCF_AVAILABLEDATASIZEUNKNOWN = 16; BSCF_SKIPDRAINDATAFORFILEURLS = 32; BSCF_64BITLENGTHDOWNLOAD = 64; }
export type e_tagBINDSTATUS = enum { BINDSTATUS_FINDINGRESOURCE = 1; BINDSTATUS_CONNECTING = 2; BINDSTATUS_REDIRECTING = 3; BINDSTATUS_BEGINDOWNLOADDATA = 4; BINDSTATUS_DOWNLOADINGDATA = 5; BINDSTATUS_ENDDOWNLOADDATA = 6; BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7; BINDSTATUS_INSTALLINGCOMPONENTS = 8; BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9; BINDSTATUS_USINGCACHEDCOPY = 10; BINDSTATUS_SENDINGREQUEST = 11; BINDSTATUS_CLASSIDAVAILABLE = 12; BINDSTATUS_MIMETYPEAVAILABLE = 13; BINDSTATUS_CACHEFILENAMEAVAILABLE = 14; BINDSTATUS_BEGINSYNCOPERATION = 15; BINDSTATUS_ENDSYNCOPERATION = 16; BINDSTATUS_BEGINUPLOADDATA = 17; BINDSTATUS_UPLOADINGDATA = 18; BINDSTATUS_ENDUPLOADDATA = 19; BINDSTATUS_PROTOCOLCLASSID = 20; BINDSTATUS_ENCODING = 21; BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22; BINDSTATUS_CLASSINSTALLLOCATION = 23; BINDSTATUS_DECODING = 24; BINDSTATUS_LOADINGMIMEHANDLER = 25; BINDSTATUS_CONTENTDISPOSITIONATTACH = 26; BINDSTATUS_FILTERREPORTMIMETYPE = 27; BINDSTATUS_CLSIDCANINSTANTIATE = 28; BINDSTATUS_IUNKNOWNAVAILABLE = 29; BINDSTATUS_DIRECTBIND = 30; BINDSTATUS_RAWMIMETYPE = 31; BINDSTATUS_PROXYDETECTING = 32; BINDSTATUS_ACCEPTRANGES = 33; BINDSTATUS_COOKIE_SENT = 34; BINDSTATUS_COMPACT_POLICY_RECEIVED = 35; BINDSTATUS_COOKIE_SUPPRESSED = 36; BINDSTATUS_COOKIE_STATE_UNKNOWN = 37; BINDSTATUS_COOKIE_STATE_ACCEPT = 38; BINDSTATUS_COOKIE_STATE_REJECT = 39; BINDSTATUS_COOKIE_STATE_PROMPT = 40; BINDSTATUS_COOKIE_STATE_LEASH = 41; BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42; BINDSTATUS_POLICY_HREF = 43; BINDSTATUS_P3P_HEADER = 44; BINDSTATUS_SESSION_COOKIE_RECEIVED = 45; BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46; BINDSTATUS_SESSION_COOKIES_ALLOWED = 47; BINDSTATUS_CACHECONTROL = 48; BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49; BINDSTATUS_MIMETEXTPLAINMISMATCH = 50; BINDSTATUS_PUBLISHERAVAILABLE = 51; BINDSTATUS_DISPLAYNAMEAVAILABLE = 52; BINDSTATUS_SSLUX_NAVBLOCKED = 53; BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54; BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55; BINDSTATUS_64BIT_PROGRESS = 56; BINDSTATUS_LAST = 56; BINDSTATUS_RESERVED_0 = 57; BINDSTATUS_RESERVED_1 = 58; BINDSTATUS_RESERVED_2 = 59; BINDSTATUS_RESERVED_3 = 60; BINDSTATUS_RESERVED_4 = 61; BINDSTATUS_RESERVED_5 = 62; BINDSTATUS_RESERVED_6 = 63; BINDSTATUS_RESERVED_7 = 64; BINDSTATUS_RESERVED_8 = 65; BINDSTATUS_RESERVED_9 = 66; BINDSTATUS_RESERVED_A = 67; BINDSTATUS_RESERVED_B = 68; BINDSTATUS_RESERVED_C = 69; BINDSTATUS_RESERVED_D = 70; BINDSTATUS_RESERVED_E = 71; BINDSTATUS_RESERVED_F = 72; BINDSTATUS_RESERVED_10 = 73; BINDSTATUS_RESERVED_11 = 74; BINDSTATUS_RESERVED_12 = 75; BINDSTATUS_RESERVED_13 = 76; BINDSTATUS_RESERVED_14 = 77; BINDSTATUS_LAST_PRIVATE = 77; }
export type s_IBindStatusCallbackVtbl = struct { QueryInterface: def (*s_IBindStatusCallback, *s__GUID, **) -> (long); AddRef: def (*s_IBindStatusCallback) -> (ulong); Release: def (*s_IBindStatusCallback) -> (ulong); OnStartBinding: def (*s_IBindStatusCallback, ulong, *s_IBinding) -> (long); GetPriority: def (*s_IBindStatusCallback, *long) -> (long); OnLowResource: def (*s_IBindStatusCallback, ulong) -> (long); OnProgress: def (*s_IBindStatusCallback, ulong, ulong, ulong, *ushort) -> (long); OnStopBinding: def (*s_IBindStatusCallback, long, *ushort) -> (long); GetBindInfo: def (*s_IBindStatusCallback, *ulong, *s__tagBINDINFO) -> (long); OnDataAvailable: def (*s_IBindStatusCallback, ulong, ulong, *s_tagFORMATETC, *s_tagSTGMEDIUM) -> (long); OnObjectAvailable: def (*s_IBindStatusCallback, *s__GUID, *s_IUnknown) -> (long); }
export type e___MIDL_IBindStatusCallbackEx_0001 = enum { BINDF2_DISABLEBASICOVERHTTP = 1; BINDF2_DISABLEAUTOCOOKIEHANDLING = 2; BINDF2_READ_DATA_GREATER_THAN_4GB = 4; BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8; BINDF2_SETDOWNLOADMODE = 32; BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 64; BINDF2_KEEP_CALLBACK_MODULE_LOADED = 128; BINDF2_ALLOW_PROXY_CRED_PROMPT = 256; BINDF2_RESERVED_17 = 512; BINDF2_RESERVED_16 = 1024; BINDF2_RESERVED_15 = 2048; BINDF2_RESERVED_14 = 4096; BINDF2_RESERVED_13 = 8192; BINDF2_RESERVED_12 = 16384; BINDF2_RESERVED_11 = 32768; BINDF2_RESERVED_10 = 65536; BINDF2_RESERVED_F = 131072; BINDF2_RESERVED_E = 262144; BINDF2_RESERVED_D = 524288; BINDF2_RESERVED_C = 1048576; BINDF2_RESERVED_B = 2097152; BINDF2_RESERVED_A = 4194304; BINDF2_RESERVED_9 = 8388608; BINDF2_RESERVED_8 = 16777216; BINDF2_RESERVED_7 = 33554432; BINDF2_RESERVED_6 = 67108864; BINDF2_RESERVED_5 = 134217728; BINDF2_RESERVED_4 = 268435456; BINDF2_RESERVED_3 = 536870912; BINDF2_RESERVED_2 = 1073741824; BINDF2_RESERVED_1 = -2147483648; }
export type s_IBindStatusCallbackExVtbl = struct { QueryInterface: def (*s_IBindStatusCallbackEx, *s__GUID, **) -> (long); AddRef: def (*s_IBindStatusCallbackEx) -> (ulong); Release: def (*s_IBindStatusCallbackEx) -> (ulong); OnStartBinding: def (*s_IBindStatusCallbackEx, ulong, *s_IBinding) -> (long); GetPriority: def (*s_IBindStatusCallbackEx, *long) -> (long); OnLowResource: def (*s_IBindStatusCallbackEx, ulong) -> (long); OnProgress: def (*s_IBindStatusCallbackEx, ulong, ulong, ulong, *ushort) -> (long); OnStopBinding: def (*s_IBindStatusCallbackEx, long, *ushort) -> (long); GetBindInfo: def (*s_IBindStatusCallbackEx, *ulong, *s__tagBINDINFO) -> (long); OnDataAvailable: def (*s_IBindStatusCallbackEx, ulong, ulong, *s_tagFORMATETC, *s_tagSTGMEDIUM) -> (long); OnObjectAvailable: def (*s_IBindStatusCallbackEx, *s__GUID, *s_IUnknown) -> (long); GetBindInfoEx: def (*s_IBindStatusCallbackEx, *ulong, *s__tagBINDINFO, *ulong, *ulong) -> (long); }
export type s_IAuthenticateVtbl = struct { QueryInterface: def (*s_IAuthenticate, *s__GUID, **) -> (long); AddRef: def (*s_IAuthenticate) -> (ulong); Release: def (*s_IAuthenticate) -> (ulong); Authenticate: def (*s_IAuthenticate, **s_HWND__, **ushort, **ushort) -> (long); }
export type e___MIDL_IAuthenticateEx_0001 = enum { AUTHENTICATEF_PROXY = 1; AUTHENTICATEF_BASIC = 2; AUTHENTICATEF_HTTP = 4; }
export type s__tagAUTHENTICATEINFO = struct { dwFlags: ulong; dwReserved: ulong; }
export type s_IAuthenticateExVtbl = struct { QueryInterface: def (*s_IAuthenticateEx, *s__GUID, **) -> (long); AddRef: def (*s_IAuthenticateEx) -> (ulong); Release: def (*s_IAuthenticateEx) -> (ulong); Authenticate: def (*s_IAuthenticateEx, **s_HWND__, **ushort, **ushort) -> (long); AuthenticateEx: def (*s_IAuthenticateEx, **s_HWND__, **ushort, **ushort, *s__tagAUTHENTICATEINFO) -> (long); }
export type s_IHttpNegotiateVtbl = struct { QueryInterface: def (*s_IHttpNegotiate, *s__GUID, **) -> (long); AddRef: def (*s_IHttpNegotiate) -> (ulong); Release: def (*s_IHttpNegotiate) -> (ulong); BeginningTransaction: def (*s_IHttpNegotiate, *ushort, *ushort, ulong, **ushort) -> (long); OnResponse: def (*s_IHttpNegotiate, ulong, *ushort, *ushort, **ushort) -> (long); }
export type s_IHttpNegotiate2Vtbl = struct { QueryInterface: def (*s_IHttpNegotiate2, *s__GUID, **) -> (long); AddRef: def (*s_IHttpNegotiate2) -> (ulong); Release: def (*s_IHttpNegotiate2) -> (ulong); BeginningTransaction: def (*s_IHttpNegotiate2, *ushort, *ushort, ulong, **ushort) -> (long); OnResponse: def (*s_IHttpNegotiate2, ulong, *ushort, *ushort, **ushort) -> (long); GetRootSecurityId: def (*s_IHttpNegotiate2, *uint8, *ulong, uint64) -> (long); }
export type s_IHttpNegotiate3Vtbl = struct { QueryInterface: def (*s_IHttpNegotiate3, *s__GUID, **) -> (long); AddRef: def (*s_IHttpNegotiate3) -> (ulong); Release: def (*s_IHttpNegotiate3) -> (ulong); BeginningTransaction: def (*s_IHttpNegotiate3, *ushort, *ushort, ulong, **ushort) -> (long); OnResponse: def (*s_IHttpNegotiate3, ulong, *ushort, *ushort, **ushort) -> (long); GetRootSecurityId: def (*s_IHttpNegotiate3, *uint8, *ulong, uint64) -> (long); GetSerializedClientCertContext: def (*s_IHttpNegotiate3, **uint8, *ulong) -> (long); }
export type s_IWinInetFileStreamVtbl = struct { QueryInterface: def (*s_IWinInetFileStream, *s__GUID, **) -> (long); AddRef: def (*s_IWinInetFileStream) -> (ulong); Release: def (*s_IWinInetFileStream) -> (ulong); SetHandleForUnlock: def (*s_IWinInetFileStream, uint64, uint64) -> (long); SetDeleteFile: def (*s_IWinInetFileStream, uint64) -> (long); }
export type s_IWindowForBindingUIVtbl = struct { QueryInterface: def (*s_IWindowForBindingUI, *s__GUID, **) -> (long); AddRef: def (*s_IWindowForBindingUI) -> (ulong); Release: def (*s_IWindowForBindingUI) -> (ulong); GetWindow: def (*s_IWindowForBindingUI, *s__GUID, **s_HWND__) -> (long); }
export type e___MIDL_ICodeInstall_0001 = enum { CIP_DISK_FULL; CIP_ACCESS_DENIED = 1; CIP_NEWER_VERSION_EXISTS = 2; CIP_OLDER_VERSION_EXISTS = 3; CIP_NAME_CONFLICT = 4; CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5; CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6; CIP_UNSAFE_TO_ABORT = 7; CIP_NEED_REBOOT = 8; CIP_NEED_REBOOT_UI_PERMISSION = 9; }
export type s_ICodeInstallVtbl = struct { QueryInterface: def (*s_ICodeInstall, *s__GUID, **) -> (long); AddRef: def (*s_ICodeInstall) -> (ulong); Release: def (*s_ICodeInstall) -> (ulong); GetWindow: def (*s_ICodeInstall, *s__GUID, **s_HWND__) -> (long); OnCodeInstallProblem: def (*s_ICodeInstall, ulong, *ushort, *ushort, ulong) -> (long); }
export type e___MIDL_IUri_0001 = enum { Uri_PROPERTY_ABSOLUTE_URI; Uri_PROPERTY_STRING_START; Uri_PROPERTY_AUTHORITY = 1; Uri_PROPERTY_DISPLAY_URI = 2; Uri_PROPERTY_DOMAIN = 3; Uri_PROPERTY_EXTENSION = 4; Uri_PROPERTY_FRAGMENT = 5; Uri_PROPERTY_HOST = 6; Uri_PROPERTY_PASSWORD = 7; Uri_PROPERTY_PATH = 8; Uri_PROPERTY_PATH_AND_QUERY = 9; Uri_PROPERTY_QUERY = 10; Uri_PROPERTY_RAW_URI = 11; Uri_PROPERTY_SCHEME_NAME = 12; Uri_PROPERTY_USER_INFO = 13; Uri_PROPERTY_USER_NAME = 14; Uri_PROPERTY_STRING_LAST = 14; Uri_PROPERTY_HOST_TYPE = 15; Uri_PROPERTY_DWORD_START = 15; Uri_PROPERTY_PORT = 16; Uri_PROPERTY_SCHEME = 17; Uri_PROPERTY_ZONE = 18; Uri_PROPERTY_DWORD_LAST = 18; }
export type e___MIDL_IUri_0002 = enum { Uri_HOST_UNKNOWN; Uri_HOST_DNS = 1; Uri_HOST_IPV4 = 2; Uri_HOST_IPV6 = 3; Uri_HOST_IDN = 4; }
export type s_IUriVtbl = struct { QueryInterface: def (*s_IUri, *s__GUID, **) -> (long); AddRef: def (*s_IUri) -> (ulong); Release: def (*s_IUri) -> (ulong); GetPropertyBSTR: def (*s_IUri, e___MIDL_IUri_0001, **ushort, ulong) -> (long); GetPropertyLength: def (*s_IUri, e___MIDL_IUri_0001, *ulong, ulong) -> (long); GetPropertyDWORD: def (*s_IUri, e___MIDL_IUri_0001, *ulong, ulong) -> (long); HasProperty: def (*s_IUri, e___MIDL_IUri_0001, *int) -> (long); GetAbsoluteUri: def (*s_IUri, **ushort) -> (long); GetAuthority: def (*s_IUri, **ushort) -> (long); GetDisplayUri: def (*s_IUri, **ushort) -> (long); GetDomain: def (*s_IUri, **ushort) -> (long); GetExtension: def (*s_IUri, **ushort) -> (long); GetFragment: def (*s_IUri, **ushort) -> (long); GetHost: def (*s_IUri, **ushort) -> (long); GetPassword: def (*s_IUri, **ushort) -> (long); GetPath: def (*s_IUri, **ushort) -> (long); GetPathAndQuery: def (*s_IUri, **ushort) -> (long); GetQuery: def (*s_IUri, **ushort) -> (long); GetRawUri: def (*s_IUri, **ushort) -> (long); GetSchemeName: def (*s_IUri, **ushort) -> (long); GetUserInfo: def (*s_IUri, **ushort) -> (long); GetUserNameA: def (*s_IUri, **ushort) -> (long); GetHostType: def (*s_IUri, *ulong) -> (long); GetPort: def (*s_IUri, *ulong) -> (long); GetScheme: def (*s_IUri, *ulong) -> (long); GetZone: def (*s_IUri, *ulong) -> (long); GetProperties: def (*s_IUri, *ulong) -> (long); IsEqual: def (*s_IUri, *s_IUri, *int) -> (long); }
export type s_IUriContainerVtbl = struct { QueryInterface: def (*s_IUriContainer, *s__GUID, **) -> (long); AddRef: def (*s_IUriContainer) -> (ulong); Release: def (*s_IUriContainer) -> (ulong); GetIUri: def (*s_IUriContainer, **s_IUri) -> (long); }
export type s_IUriBuilderVtbl = struct { QueryInterface: def (*s_IUriBuilder, *s__GUID, **) -> (long); AddRef: def (*s_IUriBuilder) -> (ulong); Release: def (*s_IUriBuilder) -> (ulong); CreateUriSimple: def (*s_IUriBuilder, ulong, uint64, **s_IUri) -> (long); CreateUri: def (*s_IUriBuilder, ulong, ulong, uint64, **s_IUri) -> (long); CreateUriWithFlags: def (*s_IUriBuilder, ulong, ulong, ulong, uint64, **s_IUri) -> (long); GetIUri: def (*s_IUriBuilder, **s_IUri) -> (long); SetIUri: def (*s_IUriBuilder, *s_IUri) -> (long); GetFragment: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetHost: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetPassword: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetPath: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetPort: def (*s_IUriBuilder, *int, *ulong) -> (long); GetQuery: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetSchemeName: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetUserNameA: def (*s_IUriBuilder, *ulong, **ushort) -> (long); SetFragment: def (*s_IUriBuilder, *ushort) -> (long); SetHost: def (*s_IUriBuilder, *ushort) -> (long); SetPassword: def (*s_IUriBuilder, *ushort) -> (long); SetPath: def (*s_IUriBuilder, *ushort) -> (long); SetPortA: def (*s_IUriBuilder, int, ulong) -> (long); SetQuery: def (*s_IUriBuilder, *ushort) -> (long); SetSchemeName: def (*s_IUriBuilder, *ushort) -> (long); SetUserName: def (*s_IUriBuilder, *ushort) -> (long); RemoveProperties: def (*s_IUriBuilder, ulong) -> (long); HasBeenModified: def (*s_IUriBuilder, *int) -> (long); }
export type s_IUriBuilderFactoryVtbl = struct { QueryInterface: def (*s_IUriBuilderFactory, *s__GUID, **) -> (long); AddRef: def (*s_IUriBuilderFactory) -> (ulong); Release: def (*s_IUriBuilderFactory) -> (ulong); CreateIUriBuilder: def (*s_IUriBuilderFactory, ulong, uint64, **s_IUriBuilder) -> (long); CreateInitializedIUriBuilder: def (*s_IUriBuilderFactory, ulong, uint64, **s_IUriBuilder) -> (long); }
export type s_IWinInetInfoVtbl = struct { QueryInterface: def (*s_IWinInetInfo, *s__GUID, **) -> (long); AddRef: def (*s_IWinInetInfo) -> (ulong); Release: def (*s_IWinInetInfo) -> (ulong); QueryOption: def (*s_IWinInetInfo, ulong, *, *ulong) -> (long); }
export type s_IHttpSecurityVtbl = struct { QueryInterface: def (*s_IHttpSecurity, *s__GUID, **) -> (long); AddRef: def (*s_IHttpSecurity) -> (ulong); Release: def (*s_IHttpSecurity) -> (ulong); GetWindow: def (*s_IHttpSecurity, *s__GUID, **s_HWND__) -> (long); OnSecurityProblem: def (*s_IHttpSecurity, ulong) -> (long); }
export type s_IWinInetHttpInfoVtbl = struct { QueryInterface: def (*s_IWinInetHttpInfo, *s__GUID, **) -> (long); AddRef: def (*s_IWinInetHttpInfo) -> (ulong); Release: def (*s_IWinInetHttpInfo) -> (ulong); QueryOption: def (*s_IWinInetHttpInfo, ulong, *, *ulong) -> (long); QueryInfo: def (*s_IWinInetHttpInfo, ulong, *, *ulong, *ulong, *ulong) -> (long); }
export type s_IWinInetHttpTimeoutsVtbl = struct { QueryInterface: def (*s_IWinInetHttpTimeouts, *s__GUID, **) -> (long); AddRef: def (*s_IWinInetHttpTimeouts) -> (ulong); Release: def (*s_IWinInetHttpTimeouts) -> (ulong); GetRequestTimeouts: def (*s_IWinInetHttpTimeouts, *ulong, *ulong, *ulong) -> (long); }
export type s_IWinInetCacheHintsVtbl = struct { QueryInterface: def (*s_IWinInetCacheHints, *s__GUID, **) -> (long); AddRef: def (*s_IWinInetCacheHints) -> (ulong); Release: def (*s_IWinInetCacheHints) -> (ulong); SetCacheExtension: def (*s_IWinInetCacheHints, *ushort, *, *ulong, *ulong, *ulong) -> (long); }
export type s_IWinInetCacheHints2Vtbl = struct { QueryInterface: def (*s_IWinInetCacheHints2, *s__GUID, **) -> (long); AddRef: def (*s_IWinInetCacheHints2) -> (ulong); Release: def (*s_IWinInetCacheHints2) -> (ulong); SetCacheExtension: def (*s_IWinInetCacheHints2, *ushort, *, *ulong, *ulong, *ulong) -> (long); SetCacheExtension2: def (*s_IWinInetCacheHints2, *ushort, *ushort, *ulong, *ulong, *ulong) -> (long); }
export type s_IBindHostVtbl = struct { QueryInterface: def (*s_IBindHost, *s__GUID, **) -> (long); AddRef: def (*s_IBindHost) -> (ulong); Release: def (*s_IBindHost) -> (ulong); CreateMoniker: def (*s_IBindHost, *ushort, *s_IBindCtx, **s_IMoniker, ulong) -> (long); MonikerBindToStorage: def (*s_IBindHost, *s_IMoniker, *s_IBindCtx, *s_IBindStatusCallback, *s__GUID, **) -> (long); MonikerBindToObject: def (*s_IBindHost, *s_IMoniker, *s_IBindCtx, *s_IBindStatusCallback, *s__GUID, **) -> (long); }
export type s_IInternetVtbl = struct { QueryInterface: def (*s_IInternet, *s__GUID, **) -> (long); AddRef: def (*s_IInternet) -> (ulong); Release: def (*s_IInternet) -> (ulong); }
export type e_tagBINDSTRING = enum { BINDSTRING_HEADERS = 1; BINDSTRING_ACCEPT_MIMES = 2; BINDSTRING_EXTRA_URL = 3; BINDSTRING_LANGUAGE = 4; BINDSTRING_USERNAME = 5; BINDSTRING_PASSWORD = 6; BINDSTRING_UA_PIXELS = 7; BINDSTRING_UA_COLOR = 8; BINDSTRING_OS = 9; BINDSTRING_USER_AGENT = 10; BINDSTRING_ACCEPT_ENCODINGS = 11; BINDSTRING_POST_COOKIE = 12; BINDSTRING_POST_DATA_MIME = 13; BINDSTRING_URL = 14; BINDSTRING_IID = 15; BINDSTRING_FLAG_BIND_TO_OBJECT = 16; BINDSTRING_PTR_BIND_CONTEXT = 17; BINDSTRING_XDR_ORIGIN = 18; BINDSTRING_DOWNLOADPATH = 19; BINDSTRING_ROOTDOC_URL = 20; BINDSTRING_INITIAL_FILENAME = 21; BINDSTRING_PROXY_USERNAME = 22; BINDSTRING_PROXY_PASSWORD = 23; BINDSTRING_ENTERPRISE_ID = 24; BINDSTRING_DOC_URL = 25; BINDSTRING_SAMESITE_COOKIE_LEVEL = 26; }
export type s_IInternetBindInfoVtbl = struct { QueryInterface: def (*s_IInternetBindInfo, *s__GUID, **) -> (long); AddRef: def (*s_IInternetBindInfo) -> (ulong); Release: def (*s_IInternetBindInfo) -> (ulong); GetBindInfo: def (*s_IInternetBindInfo, *ulong, *s__tagBINDINFO) -> (long); GetBindString: def (*s_IInternetBindInfo, ulong, **ushort, ulong, *ulong) -> (long); }
export type s_IInternetBindInfoExVtbl = struct { QueryInterface: def (*s_IInternetBindInfoEx, *s__GUID, **) -> (long); AddRef: def (*s_IInternetBindInfoEx) -> (ulong); Release: def (*s_IInternetBindInfoEx) -> (ulong); GetBindInfo: def (*s_IInternetBindInfoEx, *ulong, *s__tagBINDINFO) -> (long); GetBindString: def (*s_IInternetBindInfoEx, ulong, **ushort, ulong, *ulong) -> (long); GetBindInfoEx: def (*s_IInternetBindInfoEx, *ulong, *s__tagBINDINFO, *ulong, *ulong) -> (long); }
export type e__tagPI_FLAGS = enum { PI_PARSE_URL = 1; PI_FILTER_MODE = 2; PI_FORCE_ASYNC = 4; PI_USE_WORKERTHREAD = 8; PI_MIMEVERIFICATION = 16; PI_CLSIDLOOKUP = 32; PI_DATAPROGRESS = 64; PI_SYNCHRONOUS = 128; PI_APARTMENTTHREADED = 256; PI_CLASSINSTALL = 512; PI_PASSONBINDCTX = 8192; PI_NOMIMEHANDLER = 32768; PI_LOADAPPDIRECT = 16384; PD_FORCE_SWITCH = 65536; PI_PREFERDEFAULTHANDLER = 131072; }
export type s__tagPROTOCOLDATA = struct { grfFlags: ulong; dwState: ulong; pData: *; cbData: ulong; }
export type s__tagStartParam = struct { iid: s__GUID; pIBindCtx: *s_IBindCtx; pItf: *s_IUnknown; }
export type s_IInternetProtocolRootVtbl = struct { QueryInterface: def (*s_IInternetProtocolRoot, *s__GUID, **) -> (long); AddRef: def (*s_IInternetProtocolRoot) -> (ulong); Release: def (*s_IInternetProtocolRoot) -> (ulong); Start: def (*s_IInternetProtocolRoot, *ushort, *s_IInternetProtocolSink, *s_IInternetBindInfo, ulong, uint64) -> (long); Continue: def (*s_IInternetProtocolRoot, *s__tagPROTOCOLDATA) -> (long); Abort: def (*s_IInternetProtocolRoot, long, ulong) -> (long); Terminate: def (*s_IInternetProtocolRoot, ulong) -> (long); Suspend: def (*s_IInternetProtocolRoot) -> (long); Resume: def (*s_IInternetProtocolRoot) -> (long); }
export type s_IInternetProtocolVtbl = struct { QueryInterface: def (*s_IInternetProtocol, *s__GUID, **) -> (long); AddRef: def (*s_IInternetProtocol) -> (ulong); Release: def (*s_IInternetProtocol) -> (ulong); Start: def (*s_IInternetProtocol, *ushort, *s_IInternetProtocolSink, *s_IInternetBindInfo, ulong, uint64) -> (long); Continue: def (*s_IInternetProtocol, *s__tagPROTOCOLDATA) -> (long); Abort: def (*s_IInternetProtocol, long, ulong) -> (long); Terminate: def (*s_IInternetProtocol, ulong) -> (long); Suspend: def (*s_IInternetProtocol) -> (long); Resume: def (*s_IInternetProtocol) -> (long); Read: def (*s_IInternetProtocol, *, ulong, *ulong) -> (long); Seek: def (*s_IInternetProtocol, u__LARGE_INTEGER, ulong, *u__ULARGE_INTEGER) -> (long); LockRequest: def (*s_IInternetProtocol, ulong) -> (long); UnlockRequest: def (*s_IInternetProtocol) -> (long); }
export type s_IInternetProtocolExVtbl = struct { QueryInterface: def (*s_IInternetProtocolEx, *s__GUID, **) -> (long); AddRef: def (*s_IInternetProtocolEx) -> (ulong); Release: def (*s_IInternetProtocolEx) -> (ulong); Start: def (*s_IInternetProtocolEx, *ushort, *s_IInternetProtocolSink, *s_IInternetBindInfo, ulong, uint64) -> (long); Continue: def (*s_IInternetProtocolEx, *s__tagPROTOCOLDATA) -> (long); Abort: def (*s_IInternetProtocolEx, long, ulong) -> (long); Terminate: def (*s_IInternetProtocolEx, ulong) -> (long); Suspend: def (*s_IInternetProtocolEx) -> (long); Resume: def (*s_IInternetProtocolEx) -> (long); Read: def (*s_IInternetProtocolEx, *, ulong, *ulong) -> (long); Seek: def (*s_IInternetProtocolEx, u__LARGE_INTEGER, ulong, *u__ULARGE_INTEGER) -> (long); LockRequest: def (*s_IInternetProtocolEx, ulong) -> (long); UnlockRequest: def (*s_IInternetProtocolEx) -> (long); StartEx: def (*s_IInternetProtocolEx, *s_IUri, *s_IInternetProtocolSink, *s_IInternetBindInfo, ulong, uint64) -> (long); }
export type s_IInternetProtocolSinkVtbl = struct { QueryInterface: def (*s_IInternetProtocolSink, *s__GUID, **) -> (long); AddRef: def (*s_IInternetProtocolSink) -> (ulong); Release: def (*s_IInternetProtocolSink) -> (ulong); Switch: def (*s_IInternetProtocolSink, *s__tagPROTOCOLDATA) -> (long); ReportProgress: def (*s_IInternetProtocolSink, ulong, *ushort) -> (long); ReportData: def (*s_IInternetProtocolSink, ulong, ulong, ulong) -> (long); ReportResult: def (*s_IInternetProtocolSink, long, ulong, *ushort) -> (long); }
export type s_IInternetProtocolSinkStackableVtbl = struct { QueryInterface: def (*s_IInternetProtocolSinkStackable, *s__GUID, **) -> (long); AddRef: def (*s_IInternetProtocolSinkStackable) -> (ulong); Release: def (*s_IInternetProtocolSinkStackable) -> (ulong); SwitchSink: def (*s_IInternetProtocolSinkStackable, *s_IInternetProtocolSink) -> (long); CommitSwitch: def (*s_IInternetProtocolSinkStackable) -> (long); RollbackSwitch: def (*s_IInternetProtocolSinkStackable) -> (long); }
export type e__tagOIBDG_FLAGS = enum { OIBDG_APARTMENTTHREADED = 256; OIBDG_DATAONLY = 4096; }
export type s_IInternetSessionVtbl = struct { QueryInterface: def (*s_IInternetSession, *s__GUID, **) -> (long); AddRef: def (*s_IInternetSession) -> (ulong); Release: def (*s_IInternetSession) -> (ulong); RegisterNameSpace: def (*s_IInternetSession, *s_IClassFactory, *s__GUID, *ushort, ulong, **ushort, ulong) -> (long); UnregisterNameSpace: def (*s_IInternetSession, *s_IClassFactory, *ushort) -> (long); RegisterMimeFilter: def (*s_IInternetSession, *s_IClassFactory, *s__GUID, *ushort) -> (long); UnregisterMimeFilter: def (*s_IInternetSession, *s_IClassFactory, *ushort) -> (long); CreateBinding: def (*s_IInternetSession, *s_IBindCtx, *ushort, *s_IUnknown, **s_IUnknown, **s_IInternetProtocol, ulong) -> (long); SetSessionOption: def (*s_IInternetSession, ulong, *, ulong, ulong) -> (long); GetSessionOption: def (*s_IInternetSession, ulong, *, *ulong, ulong) -> (long); }
export type s_IInternetThreadSwitchVtbl = struct { QueryInterface: def (*s_IInternetThreadSwitch, *s__GUID, **) -> (long); AddRef: def (*s_IInternetThreadSwitch) -> (ulong); Release: def (*s_IInternetThreadSwitch) -> (ulong); Prepare: def (*s_IInternetThreadSwitch) -> (long); Continue: def (*s_IInternetThreadSwitch) -> (long); }
export type s_IInternetPriorityVtbl = struct { QueryInterface: def (*s_IInternetPriority, *s__GUID, **) -> (long); AddRef: def (*s_IInternetPriority) -> (ulong); Release: def (*s_IInternetPriority) -> (ulong); SetPriority: def (*s_IInternetPriority, long) -> (long); GetPriority: def (*s_IInternetPriority, *long) -> (long); }
export type e__tagPARSEACTION = enum { PARSE_CANONICALIZE = 1; PARSE_FRIENDLY = 2; PARSE_SECURITY_URL = 3; PARSE_ROOTDOCUMENT = 4; PARSE_DOCUMENT = 5; PARSE_ANCHOR = 6; PARSE_ENCODE_IS_UNESCAPE = 7; PARSE_DECODE_IS_ESCAPE = 8; PARSE_PATH_FROM_URL = 9; PARSE_URL_FROM_PATH = 10; PARSE_MIME = 11; PARSE_SERVER = 12; PARSE_SCHEMA = 13; PARSE_SITE = 14; PARSE_DOMAIN = 15; PARSE_LOCATION = 16; PARSE_SECURITY_DOMAIN = 17; PARSE_ESCAPE = 18; PARSE_UNESCAPE = 19; }
export type e__tagPSUACTION = enum { PSU_DEFAULT = 1; PSU_SECURITY_URL_ONLY = 2; }
export type e__tagQUERYOPTION = enum { QUERY_EXPIRATION_DATE = 1; QUERY_TIME_OF_LAST_CHANGE = 2; QUERY_CONTENT_ENCODING = 3; QUERY_CONTENT_TYPE = 4; QUERY_REFRESH = 5; QUERY_RECOMBINE = 6; QUERY_CAN_NAVIGATE = 7; QUERY_USES_NETWORK = 8; QUERY_IS_CACHED = 9; QUERY_IS_INSTALLEDENTRY = 10; QUERY_IS_CACHED_OR_MAPPED = 11; QUERY_USES_CACHE = 12; QUERY_IS_SECURE = 13; QUERY_IS_SAFE = 14; QUERY_USES_HISTORYFOLDER = 15; QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16; }
export type s_IInternetProtocolInfoVtbl = struct { QueryInterface: def (*s_IInternetProtocolInfo, *s__GUID, **) -> (long); AddRef: def (*s_IInternetProtocolInfo) -> (ulong); Release: def (*s_IInternetProtocolInfo) -> (ulong); ParseUrl: def (*s_IInternetProtocolInfo, *ushort, e__tagPARSEACTION, ulong, *ushort, ulong, *ulong, ulong) -> (long); CombineUrl: def (*s_IInternetProtocolInfo, *ushort, *ushort, ulong, *ushort, ulong, *ulong, ulong) -> (long); CompareUrl: def (*s_IInternetProtocolInfo, *ushort, *ushort, ulong) -> (long); QueryInfo: def (*s_IInternetProtocolInfo, *ushort, e__tagQUERYOPTION, ulong, *, ulong, *ulong, ulong) -> (long); }
export type e__tagINTERNETFEATURELIST = enum { FEATURE_OBJECT_CACHING; FEATURE_ZONE_ELEVATION = 1; FEATURE_MIME_HANDLING = 2; FEATURE_MIME_SNIFFING = 3; FEATURE_WINDOW_RESTRICTIONS = 4; FEATURE_WEBOC_POPUPMANAGEMENT = 5; FEATURE_BEHAVIORS = 6; FEATURE_DISABLE_MK_PROTOCOL = 7; FEATURE_LOCALMACHINE_LOCKDOWN = 8; FEATURE_SECURITYBAND = 9; FEATURE_RESTRICT_ACTIVEXINSTALL = 10; FEATURE_VALIDATE_NAVIGATE_URL = 11; FEATURE_RESTRICT_FILEDOWNLOAD = 12; FEATURE_ADDON_MANAGEMENT = 13; FEATURE_PROTOCOL_LOCKDOWN = 14; FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15; FEATURE_SAFE_BINDTOOBJECT = 16; FEATURE_UNC_SAVEDFILECHECK = 17; FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18; FEATURE_TABBED_BROWSING = 19; FEATURE_SSLUX = 20; FEATURE_DISABLE_NAVIGATION_SOUNDS = 21; FEATURE_DISABLE_LEGACY_COMPRESSION = 22; FEATURE_FORCE_ADDR_AND_STATUS = 23; FEATURE_XMLHTTP = 24; FEATURE_DISABLE_TELNET_PROTOCOL = 25; FEATURE_FEEDS = 26; FEATURE_BLOCK_INPUT_PROMPTS = 27; FEATURE_ENTRY_COUNT = 28; }
export type s_IInternetSecurityMgrSiteVtbl = struct { QueryInterface: def (*s_IInternetSecurityMgrSite, *s__GUID, **) -> (long); AddRef: def (*s_IInternetSecurityMgrSite) -> (ulong); Release: def (*s_IInternetSecurityMgrSite) -> (ulong); GetWindow: def (*s_IInternetSecurityMgrSite, **s_HWND__) -> (long); EnableModeless: def (*s_IInternetSecurityMgrSite, int) -> (long); }
export type e___MIDL_IInternetSecurityManager_0001 = enum { PUAF_DEFAULT; PUAF_NOUI = 1; PUAF_ISFILE = 2; PUAF_WARN_IF_DENIED = 4; PUAF_FORCEUI_FOREGROUND = 8; PUAF_CHECK_TIFS = 16; PUAF_DONTCHECKBOXINDIALOG = 32; PUAF_TRUSTED = 64; PUAF_ACCEPT_WILDCARD_SCHEME = 128; PUAF_ENFORCERESTRICTED = 256; PUAF_NOSAVEDFILECHECK = 512; PUAF_REQUIRESAVEDFILECHECK = 1024; PUAF_DONT_USE_CACHE = 4096; PUAF_RESERVED1 = 8192; PUAF_RESERVED2 = 16384; PUAF_LMZ_UNLOCKED = 65536; PUAF_LMZ_LOCKED = 131072; PUAF_DEFAULTZONEPOL = 262144; PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288; PUAF_NOUIIFLOCKED = 1048576; PUAF_DRAGPROTOCOLCHECK = 2097152; }
export type e___MIDL_IInternetSecurityManager_0002 = enum { PUAFOUT_DEFAULT; PUAFOUT_ISLOCKZONEPOLICY = 1; }
export type e___MIDL_IInternetSecurityManager_0003 = enum { SZM_CREATE; SZM_DELETE = 1; }
export type s_IInternetSecurityManagerVtbl = struct { QueryInterface: def (*s_IInternetSecurityManager, *s__GUID, **) -> (long); AddRef: def (*s_IInternetSecurityManager) -> (ulong); Release: def (*s_IInternetSecurityManager) -> (ulong); SetSecuritySite: def (*s_IInternetSecurityManager, *s_IInternetSecurityMgrSite) -> (long); GetSecuritySite: def (*s_IInternetSecurityManager, **s_IInternetSecurityMgrSite) -> (long); MapUrlToZone: def (*s_IInternetSecurityManager, *ushort, *ulong, ulong) -> (long); GetSecurityId: def (*s_IInternetSecurityManager, *ushort, *uint8, *ulong, uint64) -> (long); ProcessUrlAction: def (*s_IInternetSecurityManager, *ushort, ulong, *uint8, ulong, *uint8, ulong, ulong, ulong) -> (long); QueryCustomPolicy: def (*s_IInternetSecurityManager, *ushort, *s__GUID, **uint8, *ulong, *uint8, ulong, ulong) -> (long); SetZoneMapping: def (*s_IInternetSecurityManager, ulong, *ushort, ulong) -> (long); GetZoneMappings: def (*s_IInternetSecurityManager, ulong, **s_IEnumString, ulong) -> (long); }
export type s_IInternetSecurityManagerExVtbl = struct { QueryInterface: def (*s_IInternetSecurityManagerEx, *s__GUID, **) -> (long); AddRef: def (*s_IInternetSecurityManagerEx) -> (ulong); Release: def (*s_IInternetSecurityManagerEx) -> (ulong); SetSecuritySite: def (*s_IInternetSecurityManagerEx, *s_IInternetSecurityMgrSite) -> (long); GetSecuritySite: def (*s_IInternetSecurityManagerEx, **s_IInternetSecurityMgrSite) -> (long); MapUrlToZone: def (*s_IInternetSecurityManagerEx, *ushort, *ulong, ulong) -> (long); GetSecurityId: def (*s_IInternetSecurityManagerEx, *ushort, *uint8, *ulong, uint64) -> (long); ProcessUrlAction: def (*s_IInternetSecurityManagerEx, *ushort, ulong, *uint8, ulong, *uint8, ulong, ulong, ulong) -> (long); QueryCustomPolicy: def (*s_IInternetSecurityManagerEx, *ushort, *s__GUID, **uint8, *ulong, *uint8, ulong, ulong) -> (long); SetZoneMapping: def (*s_IInternetSecurityManagerEx, ulong, *ushort, ulong) -> (long); GetZoneMappings: def (*s_IInternetSecurityManagerEx, ulong, **s_IEnumString, ulong) -> (long); ProcessUrlActionEx: def (*s_IInternetSecurityManagerEx, *ushort, ulong, *uint8, ulong, *uint8, ulong, ulong, ulong, *ulong) -> (long); }
export type s_IInternetSecurityManagerEx2Vtbl = struct { QueryInterface: def (*s_IInternetSecurityManagerEx2, *s__GUID, **) -> (long); AddRef: def (*s_IInternetSecurityManagerEx2) -> (ulong); Release: def (*s_IInternetSecurityManagerEx2) -> (ulong); SetSecuritySite: def (*s_IInternetSecurityManagerEx2, *s_IInternetSecurityMgrSite) -> (long); GetSecuritySite: def (*s_IInternetSecurityManagerEx2, **s_IInternetSecurityMgrSite) -> (long); MapUrlToZone: def (*s_IInternetSecurityManagerEx2, *ushort, *ulong, ulong) -> (long); GetSecurityId: def (*s_IInternetSecurityManagerEx2, *ushort, *uint8, *ulong, uint64) -> (long); ProcessUrlAction: def (*s_IInternetSecurityManagerEx2, *ushort, ulong, *uint8, ulong, *uint8, ulong, ulong, ulong) -> (long); QueryCustomPolicy: def (*s_IInternetSecurityManagerEx2, *ushort, *s__GUID, **uint8, *ulong, *uint8, ulong, ulong) -> (long); SetZoneMapping: def (*s_IInternetSecurityManagerEx2, ulong, *ushort, ulong) -> (long); GetZoneMappings: def (*s_IInternetSecurityManagerEx2, ulong, **s_IEnumString, ulong) -> (long); ProcessUrlActionEx: def (*s_IInternetSecurityManagerEx2, *ushort, ulong, *uint8, ulong, *uint8, ulong, ulong, ulong, *ulong) -> (long); MapUrlToZoneEx2: def (*s_IInternetSecurityManagerEx2, *s_IUri, *ulong, ulong, **ushort, *ulong) -> (long); ProcessUrlActionEx2: def (*s_IInternetSecurityManagerEx2, *s_IUri, ulong, *uint8, ulong, *uint8, ulong, ulong, uint64, *ulong) -> (long); GetSecurityIdEx2: def (*s_IInternetSecurityManagerEx2, *s_IUri, *uint8, *ulong, uint64) -> (long); QueryCustomPolicyEx2: def (*s_IInternetSecurityManagerEx2, *s_IUri, *s__GUID, **uint8, *ulong, *uint8, ulong, uint64) -> (long); }
export type s_IZoneIdentifierVtbl = struct { QueryInterface: def (*s_IZoneIdentifier, *s__GUID, **) -> (long); AddRef: def (*s_IZoneIdentifier) -> (ulong); Release: def (*s_IZoneIdentifier) -> (ulong); GetId: def (*s_IZoneIdentifier, *ulong) -> (long); SetId: def (*s_IZoneIdentifier, ulong) -> (long); Remove: def (*s_IZoneIdentifier) -> (long); }
export type s_IZoneIdentifier2Vtbl = struct { QueryInterface: def (*s_IZoneIdentifier2, *s__GUID, **) -> (long); AddRef: def (*s_IZoneIdentifier2) -> (ulong); Release: def (*s_IZoneIdentifier2) -> (ulong); GetId: def (*s_IZoneIdentifier2, *ulong) -> (long); SetId: def (*s_IZoneIdentifier2, ulong) -> (long); Remove: def (*s_IZoneIdentifier2) -> (long); GetLastWriterPackageFamilyName: def (*s_IZoneIdentifier2, **ushort) -> (long); SetLastWriterPackageFamilyName: def (*s_IZoneIdentifier2, *ushort) -> (long); RemoveLastWriterPackageFamilyName: def (*s_IZoneIdentifier2) -> (long); GetAppZoneId: def (*s_IZoneIdentifier2, *ulong) -> (long); SetAppZoneId: def (*s_IZoneIdentifier2, ulong) -> (long); RemoveAppZoneId: def (*s_IZoneIdentifier2) -> (long); }
export type s_IInternetHostSecurityManagerVtbl = struct { QueryInterface: def (*s_IInternetHostSecurityManager, *s__GUID, **) -> (long); AddRef: def (*s_IInternetHostSecurityManager) -> (ulong); Release: def (*s_IInternetHostSecurityManager) -> (ulong); GetSecurityId: def (*s_IInternetHostSecurityManager, *uint8, *ulong, uint64) -> (long); ProcessUrlAction: def (*s_IInternetHostSecurityManager, ulong, *uint8, ulong, *uint8, ulong, ulong, ulong) -> (long); QueryCustomPolicy: def (*s_IInternetHostSecurityManager, *s__GUID, **uint8, *ulong, *uint8, ulong, ulong) -> (long); }
export type e_tagURLZONE = enum { URLZONE_INVALID = -1; URLZONE_PREDEFINED_MIN; URLZONE_LOCAL_MACHINE; URLZONE_INTRANET = 1; URLZONE_TRUSTED = 2; URLZONE_INTERNET = 3; URLZONE_UNTRUSTED = 4; URLZONE_PREDEFINED_MAX = 999; URLZONE_USER_MIN = 1000; URLZONE_USER_MAX = 10000; }
export type e_tagURLTEMPLATE = enum { URLTEMPLATE_CUSTOM; URLTEMPLATE_PREDEFINED_MIN = 65536; URLTEMPLATE_LOW = 65536; URLTEMPLATE_MEDLOW = 66816; URLTEMPLATE_MEDIUM = 69632; URLTEMPLATE_MEDHIGH = 70912; URLTEMPLATE_HIGH = 73728; URLTEMPLATE_PREDEFINED_MAX = 131072; }
export type e___MIDL_IInternetZoneManager_0002 = enum { ZAFLAGS_CUSTOM_EDIT = 1; ZAFLAGS_ADD_SITES = 2; ZAFLAGS_REQUIRE_VERIFICATION = 4; ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8; ZAFLAGS_INCLUDE_INTRANET_SITES = 16; ZAFLAGS_NO_UI = 32; ZAFLAGS_SUPPORTS_VERIFICATION = 64; ZAFLAGS_UNC_AS_INTRANET = 128; ZAFLAGS_DETECT_INTRANET = 256; ZAFLAGS_USE_LOCKED_ZONES = 65536; ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072; ZAFLAGS_NO_CACHE = 262144; }
export type s__ZONEATTRIBUTES = struct { cbSize: ulong; szDisplayName: [260; ushort]; szDescription: [200; ushort]; szIconPath: [260; ushort]; dwTemplateMinLevel: ulong; dwTemplateRecommended: ulong; dwTemplateCurrentLevel: ulong; dwFlags: ulong; }
export type e__URLZONEREG = enum { URLZONEREG_DEFAULT; URLZONEREG_HKLM = 1; URLZONEREG_HKCU = 2; }
export type s_IInternetZoneManagerVtbl = struct { QueryInterface: def (*s_IInternetZoneManager, *s__GUID, **) -> (long); AddRef: def (*s_IInternetZoneManager) -> (ulong); Release: def (*s_IInternetZoneManager) -> (ulong); GetZoneAttributes: def (*s_IInternetZoneManager, ulong, *s__ZONEATTRIBUTES) -> (long); SetZoneAttributes: def (*s_IInternetZoneManager, ulong, *s__ZONEATTRIBUTES) -> (long); GetZoneCustomPolicy: def (*s_IInternetZoneManager, ulong, *s__GUID, **uint8, *ulong, e__URLZONEREG) -> (long); SetZoneCustomPolicy: def (*s_IInternetZoneManager, ulong, *s__GUID, *uint8, ulong, e__URLZONEREG) -> (long); GetZoneActionPolicy: def (*s_IInternetZoneManager, ulong, ulong, *uint8, ulong, e__URLZONEREG) -> (long); SetZoneActionPolicy: def (*s_IInternetZoneManager, ulong, ulong, *uint8, ulong, e__URLZONEREG) -> (long); PromptAction: def (*s_IInternetZoneManager, ulong, *s_HWND__, *ushort, *ushort, ulong) -> (long); LogAction: def (*s_IInternetZoneManager, ulong, *ushort, *ushort, ulong) -> (long); CreateZoneEnumerator: def (*s_IInternetZoneManager, *ulong, *ulong, ulong) -> (long); GetZoneAt: def (*s_IInternetZoneManager, ulong, ulong, *ulong) -> (long); DestroyZoneEnumerator: def (*s_IInternetZoneManager, ulong) -> (long); CopyTemplatePoliciesToZone: def (*s_IInternetZoneManager, ulong, ulong, ulong) -> (long); }
export type s_IInternetZoneManagerExVtbl = struct { QueryInterface: def (*s_IInternetZoneManagerEx, *s__GUID, **) -> (long); AddRef: def (*s_IInternetZoneManagerEx) -> (ulong); Release: def (*s_IInternetZoneManagerEx) -> (ulong); GetZoneAttributes: def (*s_IInternetZoneManagerEx, ulong, *s__ZONEATTRIBUTES) -> (long); SetZoneAttributes: def (*s_IInternetZoneManagerEx, ulong, *s__ZONEATTRIBUTES) -> (long); GetZoneCustomPolicy: def (*s_IInternetZoneManagerEx, ulong, *s__GUID, **uint8, *ulong, e__URLZONEREG) -> (long); SetZoneCustomPolicy: def (*s_IInternetZoneManagerEx, ulong, *s__GUID, *uint8, ulong, e__URLZONEREG) -> (long); GetZoneActionPolicy: def (*s_IInternetZoneManagerEx, ulong, ulong, *uint8, ulong, e__URLZONEREG) -> (long); SetZoneActionPolicy: def (*s_IInternetZoneManagerEx, ulong, ulong, *uint8, ulong, e__URLZONEREG) -> (long); PromptAction: def (*s_IInternetZoneManagerEx, ulong, *s_HWND__, *ushort, *ushort, ulong) -> (long); LogAction: def (*s_IInternetZoneManagerEx, ulong, *ushort, *ushort, ulong) -> (long); CreateZoneEnumerator: def (*s_IInternetZoneManagerEx, *ulong, *ulong, ulong) -> (long); GetZoneAt: def (*s_IInternetZoneManagerEx, ulong, ulong, *ulong) -> (long); DestroyZoneEnumerator: def (*s_IInternetZoneManagerEx, ulong) -> (long); CopyTemplatePoliciesToZone: def (*s_IInternetZoneManagerEx, ulong, ulong, ulong) -> (long); GetZoneActionPolicyEx: def (*s_IInternetZoneManagerEx, ulong, ulong, *uint8, ulong, e__URLZONEREG, ulong) -> (long); SetZoneActionPolicyEx: def (*s_IInternetZoneManagerEx, ulong, ulong, *uint8, ulong, e__URLZONEREG, ulong) -> (long); }
export type s_IInternetZoneManagerEx2Vtbl = struct { QueryInterface: def (*s_IInternetZoneManagerEx2, *s__GUID, **) -> (long); AddRef: def (*s_IInternetZoneManagerEx2) -> (ulong); Release: def (*s_IInternetZoneManagerEx2) -> (ulong); GetZoneAttributes: def (*s_IInternetZoneManagerEx2, ulong, *s__ZONEATTRIBUTES) -> (long); SetZoneAttributes: def (*s_IInternetZoneManagerEx2, ulong, *s__ZONEATTRIBUTES) -> (long); GetZoneCustomPolicy: def (*s_IInternetZoneManagerEx2, ulong, *s__GUID, **uint8, *ulong, e__URLZONEREG) -> (long); SetZoneCustomPolicy: def (*s_IInternetZoneManagerEx2, ulong, *s__GUID, *uint8, ulong, e__URLZONEREG) -> (long); GetZoneActionPolicy: def (*s_IInternetZoneManagerEx2, ulong, ulong, *uint8, ulong, e__URLZONEREG) -> (long); SetZoneActionPolicy: def (*s_IInternetZoneManagerEx2, ulong, ulong, *uint8, ulong, e__URLZONEREG) -> (long); PromptAction: def (*s_IInternetZoneManagerEx2, ulong, *s_HWND__, *ushort, *ushort, ulong) -> (long); LogAction: def (*s_IInternetZoneManagerEx2, ulong, *ushort, *ushort, ulong) -> (long); CreateZoneEnumerator: def (*s_IInternetZoneManagerEx2, *ulong, *ulong, ulong) -> (long); GetZoneAt: def (*s_IInternetZoneManagerEx2, ulong, ulong, *ulong) -> (long); DestroyZoneEnumerator: def (*s_IInternetZoneManagerEx2, ulong) -> (long); CopyTemplatePoliciesToZone: def (*s_IInternetZoneManagerEx2, ulong, ulong, ulong) -> (long); GetZoneActionPolicyEx: def (*s_IInternetZoneManagerEx2, ulong, ulong, *uint8, ulong, e__URLZONEREG, ulong) -> (long); SetZoneActionPolicyEx: def (*s_IInternetZoneManagerEx2, ulong, ulong, *uint8, ulong, e__URLZONEREG, ulong) -> (long); GetZoneAttributesEx: def (*s_IInternetZoneManagerEx2, ulong, *s__ZONEATTRIBUTES, ulong) -> (long); GetZoneSecurityState: def (*s_IInternetZoneManagerEx2, ulong, int, *ulong, *int) -> (long); GetIESecurityState: def (*s_IInternetZoneManagerEx2, int, *ulong, *int, int) -> (long); FixUnsecureSettings: def (*s_IInternetZoneManagerEx2) -> (long); }
export type s__tagCODEBASEHOLD = struct { cbSize: ulong; szDistUnit: *ushort; szCodeBase: *ushort; dwVersionMS: ulong; dwVersionLS: ulong; dwStyle: ulong; }
export type s__tagSOFTDISTINFO = struct { cbSize: ulong; dwFlags: ulong; dwAdState: ulong; szTitle: *ushort; szAbstract: *ushort; szHREF: *ushort; dwInstalledVersionMS: ulong; dwInstalledVersionLS: ulong; dwUpdateVersionMS: ulong; dwUpdateVersionLS: ulong; dwAdvertisedVersionMS: ulong; dwAdvertisedVersionLS: ulong; dwReserved: ulong; }
export type s_ISoftDistExtVtbl = struct { QueryInterface: def (*s_ISoftDistExt, *s__GUID, **) -> (long); AddRef: def (*s_ISoftDistExt) -> (ulong); Release: def (*s_ISoftDistExt) -> (ulong); ProcessSoftDist: def (*s_ISoftDistExt, *ushort, *s_IXMLElement, *s__tagSOFTDISTINFO) -> (long); GetFirstCodeBase: def (*s_ISoftDistExt, **ushort, *ulong) -> (long); GetNextCodeBase: def (*s_ISoftDistExt, **ushort, *ulong) -> (long); AsyncInstallDistributionUnit: def (*s_ISoftDistExt, *s_IBindCtx, *, ulong, *s__tagCODEBASEHOLD) -> (long); }
export type s_ICatalogFileInfoVtbl = struct { QueryInterface: def (*s_ICatalogFileInfo, *s__GUID, **) -> (long); AddRef: def (*s_ICatalogFileInfo) -> (ulong); Release: def (*s_ICatalogFileInfo) -> (ulong); GetCatalogFile: def (*s_ICatalogFileInfo, **char) -> (long); GetJavaTrust: def (*s_ICatalogFileInfo, **) -> (long); }
export type s_IDataFilterVtbl = struct { QueryInterface: def (*s_IDataFilter, *s__GUID, **) -> (long); AddRef: def (*s_IDataFilter) -> (ulong); Release: def (*s_IDataFilter) -> (ulong); DoEncode: def (*s_IDataFilter, ulong, long, *uint8, long, *uint8, long, *long, *long, ulong) -> (long); DoDecode: def (*s_IDataFilter, ulong, long, *uint8, long, *uint8, long, *long, *long, ulong) -> (long); SetEncodingLevel: def (*s_IDataFilter, ulong) -> (long); }
export type s__tagPROTOCOLFILTERDATA = struct { cbSize: ulong; pProtocolSink: *s_IInternetProtocolSink; pProtocol: *s_IInternetProtocol; pUnk: *s_IUnknown; dwFilterFlags: ulong; }
export type s__tagDATAINFO = struct { ulTotalSize: ulong; ulavrPacketSize: ulong; ulConnectSpeed: ulong; ulProcessorSpeed: ulong; }
export type s_IEncodingFilterFactoryVtbl = struct { QueryInterface: def (*s_IEncodingFilterFactory, *s__GUID, **) -> (long); AddRef: def (*s_IEncodingFilterFactory) -> (ulong); Release: def (*s_IEncodingFilterFactory) -> (ulong); FindBestFilter: def (*s_IEncodingFilterFactory, *ushort, *ushort, s__tagDATAINFO, **s_IDataFilter) -> (long); GetDefaultFilter: def (*s_IEncodingFilterFactory, *ushort, *ushort, **s_IDataFilter) -> (long); }
export type s__tagHIT_LOGGING_INFO = struct { dwStructSize: ulong; lpszLoggedUrlName: *char; StartTime: s__SYSTEMTIME; EndTime: s__SYSTEMTIME; lpszExtendedInfo: *char; }
export type s_IWrappedProtocolVtbl = struct { QueryInterface: def (*s_IWrappedProtocol, *s__GUID, **) -> (long); AddRef: def (*s_IWrappedProtocol) -> (ulong); Release: def (*s_IWrappedProtocol) -> (ulong); GetWrapperCode: def (*s_IWrappedProtocol, *long, uint64) -> (long); }
export type e___MIDL_IGetBindHandle_0001 = enum { BINDHANDLETYPES_APPCACHE; BINDHANDLETYPES_DEPENDENCY = 1; BINDHANDLETYPES_COUNT = 2; }
export type s_IGetBindHandleVtbl = struct { QueryInterface: def (*s_IGetBindHandle, *s__GUID, **) -> (long); AddRef: def (*s_IGetBindHandle) -> (ulong); Release: def (*s_IGetBindHandle) -> (ulong); GetBindHandle: def (*s_IGetBindHandle, e___MIDL_IGetBindHandle_0001, **) -> (long); }
export type s__tagPROTOCOL_ARGUMENT = struct { szMethod: *ushort; szTargetUrl: *ushort; }
export type s_IBindCallbackRedirectVtbl = struct { QueryInterface: def (*s_IBindCallbackRedirect, *s__GUID, **) -> (long); AddRef: def (*s_IBindCallbackRedirect) -> (ulong); Release: def (*s_IBindCallbackRedirect) -> (ulong); Redirect: def (*s_IBindCallbackRedirect, *ushort, *short) -> (long); }
export type s_IBindHttpSecurityVtbl = struct { QueryInterface: def (*s_IBindHttpSecurity, *s__GUID, **) -> (long); AddRef: def (*s_IBindHttpSecurity) -> (ulong); Release: def (*s_IBindHttpSecurity) -> (ulong); GetIgnoreCertMask: def (*s_IBindHttpSecurity, *ulong) -> (long); }
export type s_tagSERIALIZEDPROPERTYVALUE = struct { dwType: ulong; rgb: [1; uint8]; }
export type s_NUMPARSE = struct { cDig: int; dwInFlags: ulong; dwOutFlags: ulong; cchUsed: int; nBaseShift: int; nPwr10: int; }
export type s_UDATE = struct { st: s__SYSTEMTIME; wDayOfYear: ushort; }
export type e_tagREGKIND = enum { REGKIND_DEFAULT; REGKIND_REGISTER = 1; REGKIND_NONE = 2; }
export type s_tagPARAMDATA = struct { szName: *ushort; vt: ushort; }
export type s_tagMETHODDATA = struct { szName: *ushort; ppdata: *s_tagPARAMDATA; dispid: long; iMeth: uint; cc: e_tagCALLCONV; cArgs: uint; wFlags: ushort; vtReturn: ushort; }
export type s_tagINTERFACEDATA = struct { pmethdata: *s_tagMETHODDATA; cMembers: uint; }
export type s__OLESTREAM
export type s__OLESTREAMVTBL = struct { Get: def (*s__OLESTREAM, *, ulong) -> (ulong); Put: def (*s__OLESTREAM, *, ulong) -> (ulong); }
export type s__OLESTREAM = struct { lpstbl: *s__OLESTREAMVTBL; }
export type s_tagOFN_NT4A = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpstrFilter: *char; lpstrCustomFilter: *char; nMaxCustFilter: ulong; nFilterIndex: ulong; lpstrFile: *char; nMaxFile: ulong; lpstrFileTitle: *char; nMaxFileTitle: ulong; lpstrInitialDir: *char; lpstrTitle: *char; Flags: ulong; nFileOffset: ushort; nFileExtension: ushort; lpstrDefExt: *char; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; }
export type s_tagOFN_NT4W = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpstrFilter: *ushort; lpstrCustomFilter: *ushort; nMaxCustFilter: ulong; nFilterIndex: ulong; lpstrFile: *ushort; nMaxFile: ulong; lpstrFileTitle: *ushort; nMaxFileTitle: ulong; lpstrInitialDir: *ushort; lpstrTitle: *ushort; Flags: ulong; nFileOffset: ushort; nFileExtension: ushort; lpstrDefExt: *ushort; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; }
export type s_tagOFNA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpstrFilter: *char; lpstrCustomFilter: *char; nMaxCustFilter: ulong; nFilterIndex: ulong; lpstrFile: *char; nMaxFile: ulong; lpstrFileTitle: *char; nMaxFileTitle: ulong; lpstrInitialDir: *char; lpstrTitle: *char; Flags: ulong; nFileOffset: ushort; nFileExtension: ushort; lpstrDefExt: *char; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; pvReserved: *; dwReserved: ulong; FlagsEx: ulong; }
export type s_tagOFNW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpstrFilter: *ushort; lpstrCustomFilter: *ushort; nMaxCustFilter: ulong; nFilterIndex: ulong; lpstrFile: *ushort; nMaxFile: ulong; lpstrFileTitle: *ushort; nMaxFileTitle: ulong; lpstrInitialDir: *ushort; lpstrTitle: *ushort; Flags: ulong; nFileOffset: ushort; nFileExtension: ushort; lpstrDefExt: *ushort; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; pvReserved: *; dwReserved: ulong; FlagsEx: ulong; }
export type s__OFNOTIFYA = struct { hdr: s_tagNMHDR; lpOFN: *s_tagOFNA; pszFile: *char; }
export type s__OFNOTIFYW = struct { hdr: s_tagNMHDR; lpOFN: *s_tagOFNW; pszFile: *ushort; }
export type s__OFNOTIFYEXA = struct { hdr: s_tagNMHDR; lpOFN: *s_tagOFNA; psf: *; pidl: *; }
export type s__OFNOTIFYEXW = struct { hdr: s_tagNMHDR; lpOFN: *s_tagOFNW; psf: *; pidl: *; }
export type s_tagCHOOSECOLORA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HWND__; rgbResult: ulong; lpCustColors: *ulong; Flags: ulong; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; }
export type s_tagCHOOSECOLORW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HWND__; rgbResult: ulong; lpCustColors: *ulong; Flags: ulong; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; }
export type s_tagFINDREPLACEA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; Flags: ulong; lpstrFindWhat: *char; lpstrReplaceWith: *char; wFindWhatLen: ushort; wReplaceWithLen: ushort; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; }
export type s_tagFINDREPLACEW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; Flags: ulong; lpstrFindWhat: *ushort; lpstrReplaceWith: *ushort; wFindWhatLen: ushort; wReplaceWithLen: ushort; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; }
export type s_tagCHOOSEFONTA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDC: *s_HDC__; lpLogFont: *s_tagLOGFONTA; iPointSize: int; Flags: ulong; rgbColors: ulong; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; hInstance: *s_HINSTANCE__; lpszStyle: *char; nFontType: ushort; ___MISSING_ALIGNMENT__: ushort; nSizeMin: int; nSizeMax: int; }
export type s_tagCHOOSEFONTW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDC: *s_HDC__; lpLogFont: *s_tagLOGFONTW; iPointSize: int; Flags: ulong; rgbColors: ulong; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; hInstance: *s_HINSTANCE__; lpszStyle: *ushort; nFontType: ushort; ___MISSING_ALIGNMENT__: ushort; nSizeMin: int; nSizeMax: int; }
export type s_tagPDA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; hDC: *s_HDC__; Flags: ulong; nFromPage: ushort; nToPage: ushort; nMinPage: ushort; nMaxPage: ushort; nCopies: ushort; hInstance: *s_HINSTANCE__; lCustData: int64; lpfnPrintHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpfnSetupHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpPrintTemplateName: *char; lpSetupTemplateName: *char; hPrintTemplate: *; hSetupTemplate: *; }
export type s_tagPDW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; hDC: *s_HDC__; Flags: ulong; nFromPage: ushort; nToPage: ushort; nMinPage: ushort; nMaxPage: ushort; nCopies: ushort; hInstance: *s_HINSTANCE__; lCustData: int64; lpfnPrintHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpfnSetupHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpPrintTemplateName: *ushort; lpSetupTemplateName: *ushort; hPrintTemplate: *; hSetupTemplate: *; }
export type s_IPrintDialogCallbackVtbl
export type s_IPrintDialogCallback = struct { lpVtbl: *s_IPrintDialogCallbackVtbl; }
export type s_IPrintDialogServicesVtbl
export type s_IPrintDialogServices = struct { lpVtbl: *s_IPrintDialogServicesVtbl; }
export type s_tagPRINTPAGERANGE = struct { nFromPage: ulong; nToPage: ulong; }
export type s_tagPDEXA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; hDC: *s_HDC__; Flags: ulong; Flags2: ulong; ExclusionFlags: ulong; nPageRanges: ulong; nMaxPageRanges: ulong; lpPageRanges: *s_tagPRINTPAGERANGE; nMinPage: ulong; nMaxPage: ulong; nCopies: ulong; hInstance: *s_HINSTANCE__; lpPrintTemplateName: *char; lpCallback: *s_IUnknown; nPropertyPages: ulong; lphPropertyPages: **s__PSP; nStartPage: ulong; dwResultAction: ulong; }
export type s_tagPDEXW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; hDC: *s_HDC__; Flags: ulong; Flags2: ulong; ExclusionFlags: ulong; nPageRanges: ulong; nMaxPageRanges: ulong; lpPageRanges: *s_tagPRINTPAGERANGE; nMinPage: ulong; nMaxPage: ulong; nCopies: ulong; hInstance: *s_HINSTANCE__; lpPrintTemplateName: *ushort; lpCallback: *s_IUnknown; nPropertyPages: ulong; lphPropertyPages: **s__PSP; nStartPage: ulong; dwResultAction: ulong; }
export type s_tagDEVNAMES = struct { wDriverOffset: ushort; wDeviceOffset: ushort; wOutputOffset: ushort; wDefault: ushort; }
export type s_tagPSDA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; Flags: ulong; ptPaperSize: s_tagPOINT; rtMinMargin: s_tagRECT; rtMargin: s_tagRECT; hInstance: *s_HINSTANCE__; lCustData: int64; lpfnPageSetupHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpfnPagePaintHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpPageSetupTemplateName: *char; hPageSetupTemplate: *; }
export type s_tagPSDW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; Flags: ulong; ptPaperSize: s_tagPOINT; rtMinMargin: s_tagRECT; rtMargin: s_tagRECT; hInstance: *s_HINSTANCE__; lCustData: int64; lpfnPageSetupHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpfnPagePaintHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpPageSetupTemplateName: *ushort; hPageSetupTemplate: *; }
export type s_SERVICE_TRIGGER_CUSTOM_STATE_ID = struct { Data: [2; ulong]; }
export type s__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = struct { u: struct #union { CustomStateId: s_SERVICE_TRIGGER_CUSTOM_STATE_ID; s: struct { DataOffset: ulong; Data: [1; uint8]; }; }; }
export type s__SERVICE_DESCRIPTIONA = struct { lpDescription: *char; }
export type s__SERVICE_DESCRIPTIONW = struct { lpDescription: *ushort; }
export type e__SC_ACTION_TYPE = enum { SC_ACTION_NONE; SC_ACTION_RESTART = 1; SC_ACTION_REBOOT = 2; SC_ACTION_RUN_COMMAND = 3; SC_ACTION_OWN_RESTART = 4; }
export type s__SC_ACTION = struct { Type: e__SC_ACTION_TYPE; Delay: ulong; }
export type s__SERVICE_FAILURE_ACTIONSA = struct { dwResetPeriod: ulong; lpRebootMsg: *char; lpCommand: *char; cActions: ulong; lpsaActions: *s__SC_ACTION; }
export type s__SERVICE_FAILURE_ACTIONSW = struct { dwResetPeriod: ulong; lpRebootMsg: *ushort; lpCommand: *ushort; cActions: ulong; lpsaActions: *s__SC_ACTION; }
export type s__SERVICE_DELAYED_AUTO_START_INFO = struct { fDelayedAutostart: int; }
export type s__SERVICE_FAILURE_ACTIONS_FLAG = struct { fFailureActionsOnNonCrashFailures: int; }
export type s__SERVICE_SID_INFO = struct { dwServiceSidType: ulong; }
export type s__SERVICE_REQUIRED_PRIVILEGES_INFOA = struct { pmszRequiredPrivileges: *char; }
export type s__SERVICE_REQUIRED_PRIVILEGES_INFOW = struct { pmszRequiredPrivileges: *ushort; }
export type s__SERVICE_PRESHUTDOWN_INFO = struct { dwPreshutdownTimeout: ulong; }
export type s__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = struct { dwDataType: ulong; cbData: ulong; pData: *uint8; }
export type s__SERVICE_TRIGGER = struct { dwTriggerType: ulong; dwAction: ulong; pTriggerSubtype: *s__GUID; cDataItems: ulong; pDataItems: *s__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM; }
export type s__SERVICE_TRIGGER_INFO = struct { cTriggers: ulong; pTriggers: *s__SERVICE_TRIGGER; pReserved: *uint8; }
export type s__SERVICE_PREFERRED_NODE_INFO = struct { usPreferredNode: ushort; fDelete: uint8; }
export type s__SERVICE_TIMECHANGE_INFO = struct { liNewTime: u__LARGE_INTEGER; liOldTime: u__LARGE_INTEGER; }
export type s__SERVICE_LAUNCH_PROTECTED_INFO = struct { dwLaunchProtected: ulong; }
export type s_SC_HANDLE__
export type s_SERVICE_STATUS_HANDLE__
export type e__SC_STATUS_TYPE = enum { SC_STATUS_PROCESS_INFO; }
export type e__SC_ENUM_TYPE = enum { SC_ENUM_PROCESS_INFO; }
export type s__SERVICE_STATUS = struct { dwServiceType: ulong; dwCurrentState: ulong; dwControlsAccepted: ulong; dwWin32ExitCode: ulong; dwServiceSpecificExitCode: ulong; dwCheckPoint: ulong; dwWaitHint: ulong; }
export type s__SERVICE_STATUS_PROCESS = struct { dwServiceType: ulong; dwCurrentState: ulong; dwControlsAccepted: ulong; dwWin32ExitCode: ulong; dwServiceSpecificExitCode: ulong; dwCheckPoint: ulong; dwWaitHint: ulong; dwProcessId: ulong; dwServiceFlags: ulong; }
export type s__ENUM_SERVICE_STATUSA = struct { lpServiceName: *char; lpDisplayName: *char; ServiceStatus: s__SERVICE_STATUS; }
export type s__ENUM_SERVICE_STATUSW = struct { lpServiceName: *ushort; lpDisplayName: *ushort; ServiceStatus: s__SERVICE_STATUS; }
export type s__ENUM_SERVICE_STATUS_PROCESSA = struct { lpServiceName: *char; lpDisplayName: *char; ServiceStatusProcess: s__SERVICE_STATUS_PROCESS; }
export type s__ENUM_SERVICE_STATUS_PROCESSW = struct { lpServiceName: *ushort; lpDisplayName: *ushort; ServiceStatusProcess: s__SERVICE_STATUS_PROCESS; }
export type s__QUERY_SERVICE_LOCK_STATUSA = struct { fIsLocked: ulong; lpLockOwner: *char; dwLockDuration: ulong; }
export type s__QUERY_SERVICE_LOCK_STATUSW = struct { fIsLocked: ulong; lpLockOwner: *ushort; dwLockDuration: ulong; }
export type s__QUERY_SERVICE_CONFIGA = struct { dwServiceType: ulong; dwStartType: ulong; dwErrorControl: ulong; lpBinaryPathName: *char; lpLoadOrderGroup: *char; dwTagId: ulong; lpDependencies: *char; lpServiceStartName: *char; lpDisplayName: *char; }
export type s__QUERY_SERVICE_CONFIGW = struct { dwServiceType: ulong; dwStartType: ulong; dwErrorControl: ulong; lpBinaryPathName: *ushort; lpLoadOrderGroup: *ushort; dwTagId: ulong; lpDependencies: *ushort; lpServiceStartName: *ushort; lpDisplayName: *ushort; }
export type s__SERVICE_TABLE_ENTRYA = struct { lpServiceName: *char; lpServiceProc: def (ulong, **char) -> (); }
export type s__SERVICE_TABLE_ENTRYW = struct { lpServiceName: *ushort; lpServiceProc: def (ulong, **ushort) -> (); }
export type s__SERVICE_NOTIFY_1 = struct { dwVersion: ulong; pfnNotifyCallback: def (*) -> (); pContext: *; dwNotificationStatus: ulong; ServiceStatus: s__SERVICE_STATUS_PROCESS; }
export type s__SERVICE_NOTIFY_2A = struct { dwVersion: ulong; pfnNotifyCallback: def (*) -> (); pContext: *; dwNotificationStatus: ulong; ServiceStatus: s__SERVICE_STATUS_PROCESS; dwNotificationTriggered: ulong; pszServiceNames: *char; }
export type s__SERVICE_NOTIFY_2W = struct { dwVersion: ulong; pfnNotifyCallback: def (*) -> (); pContext: *; dwNotificationStatus: ulong; ServiceStatus: s__SERVICE_STATUS_PROCESS; dwNotificationTriggered: ulong; pszServiceNames: *ushort; }
export type s__SERVICE_CONTROL_STATUS_REASON_PARAMSA = struct { dwReason: ulong; pszComment: *char; ServiceStatus: s__SERVICE_STATUS_PROCESS; }
export type s__SERVICE_CONTROL_STATUS_REASON_PARAMSW = struct { dwReason: ulong; pszComment: *ushort; ServiceStatus: s__SERVICE_STATUS_PROCESS; }
export type s__SERVICE_START_REASON = struct { dwReason: ulong; }
export type e__SC_EVENT_TYPE = enum { SC_EVENT_DATABASE_CHANGE; SC_EVENT_PROPERTY_CHANGE = 1; SC_EVENT_STATUS_CHANGE = 2; }
export type s__SC_NOTIFICATION_REGISTRATION
export type e_SERVICE_REGISTRY_STATE_TYPE = enum { ServiceRegistryStateParameters; ServiceRegistryStatePersistent = 1; MaxServiceRegistryStateType = 2; }
export type e_SERVICE_DIRECTORY_TYPE = enum { ServiceDirectoryPersistentState; ServiceDirectoryTypeMax = 1; }
export type e_SERVICE_SHARED_REGISTRY_STATE_TYPE = enum { ServiceSharedRegistryPersistentState; }
export type e_SERVICE_SHARED_DIRECTORY_TYPE = enum { ServiceSharedDirectoryPersistentState; }
export type s__MODEMDEVCAPS = struct { dwActualSize: ulong; dwRequiredSize: ulong; dwDevSpecificOffset: ulong; dwDevSpecificSize: ulong; dwModemProviderVersion: ulong; dwModemManufacturerOffset: ulong; dwModemManufacturerSize: ulong; dwModemModelOffset: ulong; dwModemModelSize: ulong; dwModemVersionOffset: ulong; dwModemVersionSize: ulong; dwDialOptions: ulong; dwCallSetupFailTimer: ulong; dwInactivityTimeout: ulong; dwSpeakerVolume: ulong; dwSpeakerMode: ulong; dwModemOptions: ulong; dwMaxDTERate: ulong; dwMaxDCERate: ulong; abVariablePortion: [1; uint8]; }
export type s__MODEMSETTINGS = struct { dwActualSize: ulong; dwRequiredSize: ulong; dwDevSpecificOffset: ulong; dwDevSpecificSize: ulong; dwCallSetupFailTimer: ulong; dwInactivityTimeout: ulong; dwSpeakerVolume: ulong; dwSpeakerMode: ulong; dwPreferredModemOptions: ulong; dwNegotiatedModemOptions: ulong; dwNegotiatedDCERate: ulong; abVariablePortion: [1; uint8]; }
export type s_HIMC__
export type s_HIMCC__
export type s_tagCOMPOSITIONFORM = struct { dwStyle: ulong; ptCurrentPos: s_tagPOINT; rcArea: s_tagRECT; }
export type s_tagCANDIDATEFORM = struct { dwIndex: ulong; dwStyle: ulong; ptCurrentPos: s_tagPOINT; rcArea: s_tagRECT; }
export type s_tagCANDIDATELIST = struct { dwSize: ulong; dwStyle: ulong; dwCount: ulong; dwSelection: ulong; dwPageStart: ulong; dwPageSize: ulong; dwOffset: [1; ulong]; }
export type s_tagREGISTERWORDA = struct { lpReading: *char; lpWord: *char; }
export type s_tagREGISTERWORDW = struct { lpReading: *ushort; lpWord: *ushort; }
export type s_tagRECONVERTSTRING = struct { dwSize: ulong; dwVersion: ulong; dwStrLen: ulong; dwStrOffset: ulong; dwCompStrLen: ulong; dwCompStrOffset: ulong; dwTargetStrLen: ulong; dwTargetStrOffset: ulong; }
export type s_tagSTYLEBUFA = struct { dwStyle: ulong; szDescription: [32; char]; }
export type s_tagSTYLEBUFW = struct { dwStyle: ulong; szDescription: [32; ushort]; }
export type s_tagIMEMENUITEMINFOA = struct { cbSize: uint; fType: uint; fState: uint; wID: uint; hbmpChecked: *s_HBITMAP__; hbmpUnchecked: *s_HBITMAP__; dwItemData: ulong; szString: [80; char]; hbmpItem: *s_HBITMAP__; }
export type s_tagIMEMENUITEMINFOW = struct { cbSize: uint; fType: uint; fState: uint; wID: uint; hbmpChecked: *s_HBITMAP__; hbmpUnchecked: *s_HBITMAP__; dwItemData: ulong; szString: [80; ushort]; hbmpItem: *s_HBITMAP__; }
export type s_tagIMECHARPOSITION = struct { dwSize: ulong; dwCharPos: ulong; pt: s_tagPOINT; cLineHeight: uint; rcDocument: s_tagRECT; }
export type s__LOADED_IMAGE = struct { ModuleName: *char; hFile: *; MappedAddress: *uint8; FileHeader: *s__IMAGE_NT_HEADERS64; LastRvaSection: *s__IMAGE_SECTION_HEADER; NumberOfSections: ulong; Sections: *s__IMAGE_SECTION_HEADER; Characteristics: ulong; fSystemImage: uint8; fDOSImage: uint8; fReadOnly: uint8; Version: uint8; Links: s__LIST_ENTRY; SizeOfImage: ulong; }
export type s__MODLOAD_DATA = struct { ssize: ulong; ssig: ulong; data: *; size: ulong; flags: ulong; }
export type s__MODLOAD_CVMISC = struct { oCV: ulong; cCV: uint64; oMisc: ulong; cMisc: uint64; dtImage: ulong; cImage: ulong; }
export type s__MODLOAD_PDBGUID_PDBAGE = struct { PdbGuid: s__GUID; PdbAge: ulong; }
export type e_ADDRESS_MODE = enum { AddrMode1616; AddrMode1632 = 1; AddrModeReal = 2; AddrModeFlat = 3; }
export type s__tagADDRESS64 = struct { Offset: uint64; Segment: ushort; Mode: e_ADDRESS_MODE; }
export type s__KDHELP64 = struct { Thread: uint64; ThCallbackStack: ulong; ThCallbackBStore: ulong; NextCallback: ulong; FramePointer: ulong; KiCallUserMode: uint64; KeUserCallbackDispatcher: uint64; SystemRangeStart: uint64; KiUserExceptionDispatcher: uint64; StackBase: uint64; StackLimit: uint64; BuildVersion: ulong; RetpolineStubFunctionTableSize: ulong; RetpolineStubFunctionTable: uint64; RetpolineStubOffset: ulong; RetpolineStubSize: ulong; Reserved0: [2; uint64]; }
export type s__tagSTACKFRAME64 = struct { AddrPC: s__tagADDRESS64; AddrReturn: s__tagADDRESS64; AddrFrame: s__tagADDRESS64; AddrStack: s__tagADDRESS64; AddrBStore: s__tagADDRESS64; FuncTableEntry: *; Params: [4; uint64]; Far: int; Virtual: int; Reserved: [3; uint64]; KdHelp: s__KDHELP64; }
export type s__tagSTACKFRAME_EX = struct { AddrPC: s__tagADDRESS64; AddrReturn: s__tagADDRESS64; AddrFrame: s__tagADDRESS64; AddrStack: s__tagADDRESS64; AddrBStore: s__tagADDRESS64; FuncTableEntry: *; Params: [4; uint64]; Far: int; Virtual: int; Reserved: [3; uint64]; KdHelp: s__KDHELP64; StackFrameSize: ulong; InlineFrameContext: ulong; }
export type s_API_VERSION = struct { MajorVersion: ushort; MinorVersion: ushort; Revision: ushort; Reserved: ushort; }
export type e_SYM_TYPE = enum { SymNone; SymCoff = 1; SymCv = 2; SymPdb = 3; SymExport = 4; SymDeferred = 5; SymSym = 6; SymDia = 7; SymVirtual = 8; NumSymTypes = 9; }
export type s__IMAGEHLP_SYMBOL64 = struct { SizeOfStruct: ulong; Address: uint64; Size: ulong; Flags: ulong; MaxNameLength: ulong; Name: [1; char]; }
export type s__IMAGEHLP_SYMBOL64_PACKAGE = struct { sym: s__IMAGEHLP_SYMBOL64; name: [2001; char]; }
export type s__IMAGEHLP_SYMBOLW64 = struct { SizeOfStruct: ulong; Address: uint64; Size: ulong; Flags: ulong; MaxNameLength: ulong; Name: [1; ushort]; }
export type s__IMAGEHLP_SYMBOLW64_PACKAGE = struct { sym: s__IMAGEHLP_SYMBOLW64; name: [2001; ushort]; }
export type s__IMAGEHLP_MODULE64 = struct { SizeOfStruct: ulong; BaseOfImage: uint64; ImageSize: ulong; TimeDateStamp: ulong; CheckSum: ulong; NumSyms: ulong; SymType: e_SYM_TYPE; ModuleName: [32; char]; ImageName: [256; char]; LoadedImageName: [256; char]; LoadedPdbName: [256; char]; CVSig: ulong; CVData: [780; char]; PdbSig: ulong; PdbSig70: s__GUID; PdbAge: ulong; PdbUnmatched: int; DbgUnmatched: int; LineNumbers: int; GlobalSymbols: int; TypeInfo: int; SourceIndexed: int; Publics: int; MachineType: ulong; Reserved: ulong; }
export type s__IMAGEHLP_MODULE64_EX = struct { Module: s__IMAGEHLP_MODULE64; RegionFlags: ulong; }
export type s__IMAGEHLP_MODULEW64 = struct { SizeOfStruct: ulong; BaseOfImage: uint64; ImageSize: ulong; TimeDateStamp: ulong; CheckSum: ulong; NumSyms: ulong; SymType: e_SYM_TYPE; ModuleName: [32; ushort]; ImageName: [256; ushort]; LoadedImageName: [256; ushort]; LoadedPdbName: [256; ushort]; CVSig: ulong; CVData: [780; ushort]; PdbSig: ulong; PdbSig70: s__GUID; PdbAge: ulong; PdbUnmatched: int; DbgUnmatched: int; LineNumbers: int; GlobalSymbols: int; TypeInfo: int; SourceIndexed: int; Publics: int; MachineType: ulong; Reserved: ulong; }
export type s__IMAGEHLP_MODULEW64_EX = struct { Module: s__IMAGEHLP_MODULEW64; RegionFlags: ulong; }
export type s__IMAGEHLP_LINE64 = struct { SizeOfStruct: ulong; Key: *; LineNumber: ulong; FileName: *char; Address: uint64; }
export type s__IMAGEHLP_LINEW64 = struct { SizeOfStruct: ulong; Key: *; LineNumber: ulong; FileName: *ushort; Address: uint64; }
export type s__SOURCEFILE = struct { ModBase: uint64; FileName: *char; }
export type s__SOURCEFILEW = struct { ModBase: uint64; FileName: *ushort; }
export type s__IMAGEHLP_CBA_READ_MEMORY = struct { addr: uint64; buf: *; bytes: ulong; bytesread: *ulong; }
export type s__IMAGEHLP_CBA_EVENT = struct { severity: ulong; code: ulong; desc: *char; object: *; }
export type s__IMAGEHLP_CBA_EVENTW = struct { severity: ulong; code: ulong; desc: *ushort; object: *; }
export type s__IMAGEHLP_DEFERRED_SYMBOL_LOAD64 = struct { SizeOfStruct: ulong; BaseOfImage: uint64; CheckSum: ulong; TimeDateStamp: ulong; FileName: [260; char]; Reparse: uint8; hFile: *; Flags: ulong; }
export type s__IMAGEHLP_DEFERRED_SYMBOL_LOADW64 = struct { SizeOfStruct: ulong; BaseOfImage: uint64; CheckSum: ulong; TimeDateStamp: ulong; FileName: [261; ushort]; Reparse: uint8; hFile: *; Flags: ulong; }
export type s__IMAGEHLP_DUPLICATE_SYMBOL64 = struct { SizeOfStruct: ulong; NumberOfDups: ulong; Symbol: *s__IMAGEHLP_SYMBOL64; SelectedSymbol: ulong; }
export type s__IMAGEHLP_JIT_SYMBOL_MAP = struct { SizeOfStruct: ulong; Address: uint64; BaseOfImage: uint64; }
export type e_IMAGEHLP_HD_TYPE = enum { hdBase; hdSym = 1; hdSrc = 2; hdMax = 3; }
export type s__OMAP = struct { rva: ulong; rvaTo: ulong; }
export type e_IMAGEHLP_EXTENDED_OPTIONS = enum { SYMOPT_EX_DISABLEACCESSTIMEUPDATE; SYMOPT_EX_LASTVALIDDEBUGDIRECTORY = 1; SYMOPT_EX_NOIMPLICITPATTERNSEARCH = 2; SYMOPT_EX_NEVERLOADSYMBOLS = 3; SYMOPT_EX_MAX = 4; }
export type s__SRCCODEINFO = struct { SizeOfStruct: ulong; Key: *; ModBase: uint64; Obj: [261; char]; FileName: [261; char]; LineNumber: ulong; Address: uint64; }
export type s__SRCCODEINFOW = struct { SizeOfStruct: ulong; Key: *; ModBase: uint64; Obj: [261; ushort]; FileName: [261; ushort]; LineNumber: ulong; Address: uint64; }
export type s__IMAGEHLP_SYMBOL_SRC = struct { sizeofstruct: ulong; type_: ulong; file: [260; char]; }
export type s__MODULE_TYPE_INFO = struct { dataLength: ushort; leaf: ushort; data: [1; uint8]; }
export type s__SYMBOL_INFO = struct { SizeOfStruct: ulong; TypeIndex: ulong; Reserved: [2; uint64]; Index: ulong; Size: ulong; ModBase: uint64; Flags: ulong; Value: uint64; Address: uint64; Register: ulong; Scope: ulong; Tag: ulong; NameLen: ulong; MaxNameLen: ulong; Name: [1; char]; }
export type s__SYMBOL_INFO_PACKAGE = struct { si: s__SYMBOL_INFO; name: [2001; char]; }
export type s__SYMBOL_INFOW = struct { SizeOfStruct: ulong; TypeIndex: ulong; Reserved: [2; uint64]; Index: ulong; Size: ulong; ModBase: uint64; Flags: ulong; Value: uint64; Address: uint64; Register: ulong; Scope: ulong; Tag: ulong; NameLen: ulong; MaxNameLen: ulong; Name: [1; ushort]; }
export type s__SYMBOL_INFO_PACKAGEW = struct { si: s__SYMBOL_INFOW; name: [2001; ushort]; }
export type s__IMAGEHLP_STACK_FRAME = struct { InstructionOffset: uint64; ReturnOffset: uint64; FrameOffset: uint64; StackOffset: uint64; BackingStoreOffset: uint64; FuncTableEntry: uint64; Params: [4; uint64]; Reserved: [5; uint64]; Virtual: int; Reserved2: ulong; }
export type e__IMAGEHLP_SYMBOL_TYPE_INFO = enum { TI_GET_SYMTAG; TI_GET_SYMNAME = 1; TI_GET_LENGTH = 2; TI_GET_TYPE = 3; TI_GET_TYPEID = 4; TI_GET_BASETYPE = 5; TI_GET_ARRAYINDEXTYPEID = 6; TI_FINDCHILDREN = 7; TI_GET_DATAKIND = 8; TI_GET_ADDRESSOFFSET = 9; TI_GET_OFFSET = 10; TI_GET_VALUE = 11; TI_GET_COUNT = 12; TI_GET_CHILDRENCOUNT = 13; TI_GET_BITPOSITION = 14; TI_GET_VIRTUALBASECLASS = 15; TI_GET_VIRTUALTABLESHAPEID = 16; TI_GET_VIRTUALBASEPOINTEROFFSET = 17; TI_GET_CLASSPARENTID = 18; TI_GET_NESTED = 19; TI_GET_SYMINDEX = 20; TI_GET_LEXICALPARENT = 21; TI_GET_ADDRESS = 22; TI_GET_THISADJUST = 23; TI_GET_UDTKIND = 24; TI_IS_EQUIV_TO = 25; TI_GET_CALLING_CONVENTION = 26; TI_IS_CLOSE_EQUIV_TO = 27; TI_GTIEX_REQS_VALID = 28; TI_GET_VIRTUALBASEOFFSET = 29; TI_GET_VIRTUALBASEDISPINDEX = 30; TI_GET_IS_REFERENCE = 31; TI_GET_INDIRECTVIRTUALBASECLASS = 32; TI_GET_VIRTUALBASETABLETYPE = 33; TI_GET_OBJECTPOINTERTYPE = 34; IMAGEHLP_SYMBOL_TYPE_INFO_MAX = 35; }
export type s__TI_FINDCHILDREN_PARAMS = struct { Count: ulong; Start: ulong; ChildId: [1; ulong]; }
export type s__IMAGEHLP_GET_TYPE_INFO_PARAMS = struct { SizeOfStruct: ulong; Flags: ulong; NumIds: ulong; TypeIds: *ulong; TagFilter: uint64; NumReqs: ulong; ReqKinds: *e__IMAGEHLP_SYMBOL_TYPE_INFO; ReqOffsets: *uint64; ReqSizes: *ulong; ReqStride: uint64; BufferSize: uint64; Buffer: *; EntriesMatched: ulong; EntriesFilled: ulong; TagsFound: uint64; AllReqsValid: uint64; NumReqsValid: ulong; ReqsValid: *uint64; }
export type s_SYMSRV_INDEX_INFO = struct { sizeofstruct: ulong; file: [261; char]; stripped: int; timestamp: ulong; size: ulong; dbgfile: [261; char]; pdbfile: [261; char]; guid: s__GUID; sig: ulong; age: ulong; }
export type SYMSRV_INDEX_INFO
export type s_SYMSRV_INDEX_INFOW = struct { sizeofstruct: ulong; file: [261; ushort]; stripped: int; timestamp: ulong; size: ulong; dbgfile: [261; ushort]; pdbfile: [261; ushort]; guid: s__GUID; sig: ulong; age: ulong; }
export type SYMSRV_INDEX_INFOW
export type e_IMAGEHLP_SF_TYPE = enum { sfImage; sfDbg = 1; sfPdb = 2; sfMpd = 3; sfMax = 4; }
export type s_SYMSRV_EXTENDED_OUTPUT_DATA = struct { sizeOfStruct: ulong; version: ulong; filePtrMsg: [261; ushort]; }
export type SYMSRV_EXTENDED_OUTPUT_DATA
export type s_DBGHELP_DATA_REPORT_STRUCT = struct { pBinPathNonExist: *ushort; pSymbolPathNonExist: *ushort; }
export type DBGHELP_DATA_REPORT_STRUCT
export type s__MINIDUMP_LOCATION_DESCRIPTOR = struct { DataSize: uint; Rva: ulong; }
export type s__MINIDUMP_LOCATION_DESCRIPTOR64 = struct { DataSize: uint64; Rva: uint64; }
export type s__MINIDUMP_MEMORY_DESCRIPTOR = struct { StartOfMemoryRange: uint64; Memory: s__MINIDUMP_LOCATION_DESCRIPTOR; }
export type s__MINIDUMP_MEMORY_DESCRIPTOR64 = struct { StartOfMemoryRange: uint64; DataSize: uint64; }
export type s__MINIDUMP_HEADER = struct { Signature: uint; Version: uint; NumberOfStreams: uint; StreamDirectoryRva: ulong; CheckSum: uint; struct #union { Reserved: uint; TimeDateStamp: uint; }; Flags: uint64; }
export type s__MINIDUMP_DIRECTORY = struct { StreamType: uint; Location: s__MINIDUMP_LOCATION_DESCRIPTOR; }
export type s__MINIDUMP_STRING = struct { Length: uint; Buffer: *ushort; }
export type e__MINIDUMP_STREAM_TYPE = enum { UnusedStream; ReservedStream0 = 1; ReservedStream1 = 2; ThreadListStream = 3; ModuleListStream = 4; MemoryListStream = 5; ExceptionStream = 6; SystemInfoStream = 7; ThreadExListStream = 8; Memory64ListStream = 9; CommentStreamA = 10; CommentStreamW = 11; HandleDataStream = 12; FunctionTableStream = 13; UnloadedModuleListStream = 14; MiscInfoStream = 15; MemoryInfoListStream = 16; ThreadInfoListStream = 17; HandleOperationListStream = 18; TokenStream = 19; JavaScriptDataStream = 20; SystemMemoryInfoStream = 21; ProcessVmCountersStream = 22; IptTraceStream = 23; ThreadNamesStream = 24; ceStreamNull = 32768; ceStreamSystemInfo = 32769; ceStreamException = 32770; ceStreamModuleList = 32771; ceStreamProcessList = 32772; ceStreamThreadList = 32773; ceStreamThreadContextList = 32774; ceStreamThreadCallStackList = 32775; ceStreamMemoryVirtualList = 32776; ceStreamMemoryPhysicalList = 32777; ceStreamBucketParameters = 32778; ceStreamProcessModuleMap = 32779; ceStreamDiagnosisList = 32780; LastReservedStream = 65535; }
export type u__CPU_INFORMATION = struct #union { X86CpuInfo: struct { VendorId: [3; uint]; VersionInformation: uint; FeatureInformation: uint; AMDExtendedCpuFeatures: uint; }; OtherCpuInfo: struct { ProcessorFeatures: [2; uint64]; }; }
export type s__MINIDUMP_SYSTEM_INFO = struct { ProcessorArchitecture: ushort; ProcessorLevel: ushort; ProcessorRevision: ushort; struct #union { Reserved0: ushort; struct { NumberOfProcessors: uint8; ProductType: uint8; }; }; MajorVersion: uint; MinorVersion: uint; BuildNumber: uint; PlatformId: uint; CSDVersionRva: ulong; struct #union { Reserved1: uint; struct { SuiteMask: ushort; Reserved2: ushort; }; }; Cpu: u__CPU_INFORMATION; }
export type s__MINIDUMP_THREAD = struct { ThreadId: uint; SuspendCount: uint; PriorityClass: uint; Priority: uint; Teb: uint64; Stack: s__MINIDUMP_MEMORY_DESCRIPTOR; ThreadContext: s__MINIDUMP_LOCATION_DESCRIPTOR; }
export type s__MINIDUMP_THREAD_LIST = struct { NumberOfThreads: uint; Threads: *s__MINIDUMP_THREAD; }
export type s__MINIDUMP_THREAD_EX = struct { ThreadId: uint; SuspendCount: uint; PriorityClass: uint; Priority: uint; Teb: uint64; Stack: s__MINIDUMP_MEMORY_DESCRIPTOR; ThreadContext: s__MINIDUMP_LOCATION_DESCRIPTOR; BackingStore: s__MINIDUMP_MEMORY_DESCRIPTOR; }
export type s__MINIDUMP_THREAD_EX_LIST = struct { NumberOfThreads: uint; Threads: *s__MINIDUMP_THREAD_EX; }
export type s__MINIDUMP_EXCEPTION = struct { ExceptionCode: uint; ExceptionFlags: uint; ExceptionRecord: uint64; ExceptionAddress: uint64; NumberParameters: uint; __unusedAlignment: uint; ExceptionInformation: [15; uint64]; }
export type s_MINIDUMP_EXCEPTION_STREAM = struct { ThreadId: uint; __alignment: uint; ExceptionRecord: s__MINIDUMP_EXCEPTION; ThreadContext: s__MINIDUMP_LOCATION_DESCRIPTOR; }
export type s__MINIDUMP_MODULE = struct { BaseOfImage: uint64; SizeOfImage: uint; CheckSum: uint; TimeDateStamp: uint; ModuleNameRva: ulong; VersionInfo: s_tagVS_FIXEDFILEINFO; CvRecord: s__MINIDUMP_LOCATION_DESCRIPTOR; MiscRecord: s__MINIDUMP_LOCATION_DESCRIPTOR; Reserved0: uint64; Reserved1: uint64; }
export type s__MINIDUMP_MODULE_LIST = struct { NumberOfModules: uint; Modules: *s__MINIDUMP_MODULE; }
export type s__MINIDUMP_MEMORY_LIST = struct { NumberOfMemoryRanges: uint; MemoryRanges: *s__MINIDUMP_MEMORY_DESCRIPTOR; }
export type s__MINIDUMP_MEMORY64_LIST = struct { NumberOfMemoryRanges: uint64; BaseRva: uint64; MemoryRanges: *s__MINIDUMP_MEMORY_DESCRIPTOR64; }
export type s__MINIDUMP_EXCEPTION_INFORMATION = struct { ThreadId: ulong; ExceptionPointers: *s__EXCEPTION_POINTERS; ClientPointers: int; }
export type s__MINIDUMP_EXCEPTION_INFORMATION64 = struct { ThreadId: ulong; ExceptionRecord: uint64; ContextRecord: uint64; ClientPointers: int; }
export type e__MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = enum { MiniHandleObjectInformationNone; MiniThreadInformation1 = 1; MiniMutantInformation1 = 2; MiniMutantInformation2 = 3; MiniProcessInformation1 = 4; MiniProcessInformation2 = 5; MiniEventInformation1 = 6; MiniSectionInformation1 = 7; MiniSemaphoreInformation1 = 8; MiniHandleObjectInformationTypeMax = 9; }
export type s__MINIDUMP_HANDLE_OBJECT_INFORMATION = struct { NextInfoRva: ulong; InfoType: uint; SizeOfInfo: uint; }
export type s__MINIDUMP_HANDLE_DESCRIPTOR = struct { Handle: uint64; TypeNameRva: ulong; ObjectNameRva: ulong; Attributes: uint; GrantedAccess: uint; HandleCount: uint; PointerCount: uint; }
export type s__MINIDUMP_HANDLE_DESCRIPTOR_2 = struct { Handle: uint64; TypeNameRva: ulong; ObjectNameRva: ulong; Attributes: uint; GrantedAccess: uint; HandleCount: uint; PointerCount: uint; ObjectInfoRva: ulong; Reserved0: uint; }
export type s__MINIDUMP_HANDLE_DATA_STREAM = struct { SizeOfHeader: uint; SizeOfDescriptor: uint; NumberOfDescriptors: uint; Reserved: uint; }
export type s__MINIDUMP_HANDLE_OPERATION_LIST = struct { SizeOfHeader: uint; SizeOfEntry: uint; NumberOfEntries: uint; Reserved: uint; }
export type s__MINIDUMP_FUNCTION_TABLE_DESCRIPTOR = struct { MinimumAddress: uint64; MaximumAddress: uint64; BaseAddress: uint64; EntryCount: uint; SizeOfAlignPad: uint; }
export type s__MINIDUMP_FUNCTION_TABLE_STREAM = struct { SizeOfHeader: uint; SizeOfDescriptor: uint; SizeOfNativeDescriptor: uint; SizeOfFunctionEntry: uint; NumberOfDescriptors: uint; SizeOfAlignPad: uint; }
export type s__MINIDUMP_UNLOADED_MODULE = struct { BaseOfImage: uint64; SizeOfImage: uint; CheckSum: uint; TimeDateStamp: uint; ModuleNameRva: ulong; }
export type s__MINIDUMP_UNLOADED_MODULE_LIST = struct { SizeOfHeader: uint; SizeOfEntry: uint; NumberOfEntries: uint; }
export type s__XSTATE_CONFIG_FEATURE_MSC_INFO = struct { SizeOfInfo: uint; ContextSize: uint; EnabledFeatures: uint64; Features: [64; s__XSTATE_FEATURE]; }
export type s__MINIDUMP_MISC_INFO = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; }
export type s__MINIDUMP_MISC_INFO_2 = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; ProcessorMaxMhz: uint; ProcessorCurrentMhz: uint; ProcessorMhzLimit: uint; ProcessorMaxIdleState: uint; ProcessorCurrentIdleState: uint; }
export type s__MINIDUMP_MISC_INFO_3 = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; ProcessorMaxMhz: uint; ProcessorCurrentMhz: uint; ProcessorMhzLimit: uint; ProcessorMaxIdleState: uint; ProcessorCurrentIdleState: uint; ProcessIntegrityLevel: uint; ProcessExecuteFlags: uint; ProtectedProcess: uint; TimeZoneId: uint; TimeZone: s__TIME_ZONE_INFORMATION; }
export type s__MINIDUMP_MISC_INFO_4 = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; ProcessorMaxMhz: uint; ProcessorCurrentMhz: uint; ProcessorMhzLimit: uint; ProcessorMaxIdleState: uint; ProcessorCurrentIdleState: uint; ProcessIntegrityLevel: uint; ProcessExecuteFlags: uint; ProtectedProcess: uint; TimeZoneId: uint; TimeZone: s__TIME_ZONE_INFORMATION; BuildString: [260; ushort]; DbgBldStr: [40; ushort]; }
export type s__MINIDUMP_MISC_INFO_5 = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; ProcessorMaxMhz: uint; ProcessorCurrentMhz: uint; ProcessorMhzLimit: uint; ProcessorMaxIdleState: uint; ProcessorCurrentIdleState: uint; ProcessIntegrityLevel: uint; ProcessExecuteFlags: uint; ProtectedProcess: uint; TimeZoneId: uint; TimeZone: s__TIME_ZONE_INFORMATION; BuildString: [260; ushort]; DbgBldStr: [40; ushort]; XStateData: s__XSTATE_CONFIG_FEATURE_MSC_INFO; ProcessCookie: uint; }
export type s__MINIDUMP_MEMORY_INFO = struct { BaseAddress: uint64; AllocationBase: uint64; AllocationProtect: uint; __alignment1: uint; RegionSize: uint64; State: uint; Protect: uint; Type: uint; __alignment2: uint; }
export type s__MINIDUMP_MEMORY_INFO_LIST = struct { SizeOfHeader: ulong; SizeOfEntry: ulong; NumberOfEntries: uint64; }
export type s__MINIDUMP_THREAD_NAME = struct { ThreadId: ulong; RvaOfThreadName: uint64; }
export type s__MINIDUMP_THREAD_NAME_LIST = struct { NumberOfThreadNames: ulong; ThreadNames: *s__MINIDUMP_THREAD_NAME; }
export type s__MINIDUMP_THREAD_INFO = struct { ThreadId: uint; DumpFlags: uint; DumpError: uint; ExitStatus: uint; CreateTime: uint64; ExitTime: uint64; KernelTime: uint64; UserTime: uint64; StartAddress: uint64; Affinity: uint64; }
export type s__MINIDUMP_THREAD_INFO_LIST = struct { SizeOfHeader: ulong; SizeOfEntry: ulong; NumberOfEntries: ulong; }
export type s__MINIDUMP_TOKEN_INFO_HEADER = struct { TokenSize: ulong; TokenId: ulong; TokenHandle: uint64; }
export type s__MINIDUMP_TOKEN_INFO_LIST = struct { TokenListSize: ulong; TokenListEntries: ulong; ListHeaderSize: ulong; ElementHeaderSize: ulong; }
export type s__MINIDUMP_SYSTEM_BASIC_INFORMATION = struct { TimerResolution: ulong; PageSize: ulong; NumberOfPhysicalPages: ulong; LowestPhysicalPageNumber: ulong; HighestPhysicalPageNumber: ulong; AllocationGranularity: ulong; MinimumUserModeAddress: uint64; MaximumUserModeAddress: uint64; ActiveProcessorsAffinityMask: uint64; NumberOfProcessors: ulong; }
export type s__MINIDUMP_SYSTEM_FILECACHE_INFORMATION = struct { CurrentSize: uint64; PeakSize: uint64; PageFaultCount: ulong; MinimumWorkingSet: uint64; MaximumWorkingSet: uint64; CurrentSizeIncludingTransitionInPages: uint64; PeakSizeIncludingTransitionInPages: uint64; TransitionRePurposeCount: ulong; Flags: ulong; }
export type s__MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION = struct { AvailablePages: uint64; CommittedPages: uint64; CommitLimit: uint64; PeakCommitment: uint64; }
export type s__MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION = struct { IdleProcessTime: uint64; IoReadTransferCount: uint64; IoWriteTransferCount: uint64; IoOtherTransferCount: uint64; IoReadOperationCount: ulong; IoWriteOperationCount: ulong; IoOtherOperationCount: ulong; AvailablePages: ulong; CommittedPages: ulong; CommitLimit: ulong; PeakCommitment: ulong; PageFaultCount: ulong; CopyOnWriteCount: ulong; TransitionCount: ulong; CacheTransitionCount: ulong; DemandZeroCount: ulong; PageReadCount: ulong; PageReadIoCount: ulong; CacheReadCount: ulong; CacheIoCount: ulong; DirtyPagesWriteCount: ulong; DirtyWriteIoCount: ulong; MappedPagesWriteCount: ulong; MappedWriteIoCount: ulong; PagedPoolPages: ulong; NonPagedPoolPages: ulong; PagedPoolAllocs: ulong; PagedPoolFrees: ulong; NonPagedPoolAllocs: ulong; NonPagedPoolFrees: ulong; FreeSystemPtes: ulong; ResidentSystemCodePage: ulong; TotalSystemDriverPages: ulong; TotalSystemCodePages: ulong; NonPagedPoolLookasideHits: ulong; PagedPoolLookasideHits: ulong; AvailablePagedPoolPages: ulong; ResidentSystemCachePage: ulong; ResidentPagedPoolPage: ulong; ResidentSystemDriverPage: ulong; CcFastReadNoWait: ulong; CcFastReadWait: ulong; CcFastReadResourceMiss: ulong; CcFastReadNotPossible: ulong; CcFastMdlReadNoWait: ulong; CcFastMdlReadWait: ulong; CcFastMdlReadResourceMiss: ulong; CcFastMdlReadNotPossible: ulong; CcMapDataNoWait: ulong; CcMapDataWait: ulong; CcMapDataNoWaitMiss: ulong; CcMapDataWaitMiss: ulong; CcPinMappedDataCount: ulong; CcPinReadNoWait: ulong; CcPinReadWait: ulong; CcPinReadNoWaitMiss: ulong; CcPinReadWaitMiss: ulong; CcCopyReadNoWait: ulong; CcCopyReadWait: ulong; CcCopyReadNoWaitMiss: ulong; CcCopyReadWaitMiss: ulong; CcMdlReadNoWait: ulong; CcMdlReadWait: ulong; CcMdlReadNoWaitMiss: ulong; CcMdlReadWaitMiss: ulong; CcReadAheadIos: ulong; CcLazyWriteIos: ulong; CcLazyWritePages: ulong; CcDataFlushes: ulong; CcDataPages: ulong; ContextSwitches: ulong; FirstLevelTbFills: ulong; SecondLevelTbFills: ulong; SystemCalls: ulong; CcTotalDirtyPages: uint64; CcDirtyPageThreshold: uint64; ResidentAvailablePages: int64; SharedCommittedPages: uint64; }
export type s__MINIDUMP_SYSTEM_MEMORY_INFO_1 = struct { Revision: ushort; Flags: ushort; BasicInfo: s__MINIDUMP_SYSTEM_BASIC_INFORMATION; FileCacheInfo: s__MINIDUMP_SYSTEM_FILECACHE_INFORMATION; BasicPerfInfo: s__MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION; PerfInfo: s__MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION; }
export type s__MINIDUMP_PROCESS_VM_COUNTERS_1 = struct { Revision: ushort; PageFaultCount: ulong; PeakWorkingSetSize: uint64; WorkingSetSize: uint64; QuotaPeakPagedPoolUsage: uint64; QuotaPagedPoolUsage: uint64; QuotaPeakNonPagedPoolUsage: uint64; QuotaNonPagedPoolUsage: uint64; PagefileUsage: uint64; PeakPagefileUsage: uint64; PrivateUsage: uint64; }
export type s__MINIDUMP_PROCESS_VM_COUNTERS_2 = struct { Revision: ushort; Flags: ushort; PageFaultCount: ulong; PeakWorkingSetSize: uint64; WorkingSetSize: uint64; QuotaPeakPagedPoolUsage: uint64; QuotaPagedPoolUsage: uint64; QuotaPeakNonPagedPoolUsage: uint64; QuotaNonPagedPoolUsage: uint64; PagefileUsage: uint64; PeakPagefileUsage: uint64; PeakVirtualSize: uint64; VirtualSize: uint64; PrivateUsage: uint64; PrivateWorkingSetSize: uint64; SharedCommitUsage: uint64; JobSharedCommitUsage: uint64; JobPrivateCommitUsage: uint64; JobPeakPrivateCommitUsage: uint64; JobPrivateCommitLimit: uint64; JobTotalCommitLimit: uint64; }
export type s__MINIDUMP_USER_RECORD = struct { Type: uint; Memory: s__MINIDUMP_LOCATION_DESCRIPTOR; }
export type s__MINIDUMP_USER_STREAM = struct { Type: uint; BufferSize: ulong; Buffer: *; }
export type s__MINIDUMP_USER_STREAM_INFORMATION = struct { UserStreamCount: ulong; UserStreamArray: *s__MINIDUMP_USER_STREAM; }
export type e__MINIDUMP_CALLBACK_TYPE = enum { ModuleCallback; ThreadCallback = 1; ThreadExCallback = 2; IncludeThreadCallback = 3; IncludeModuleCallback = 4; MemoryCallback = 5; CancelCallback = 6; WriteKernelMinidumpCallback = 7; KernelMinidumpStatusCallback = 8; RemoveMemoryCallback = 9; IncludeVmRegionCallback = 10; IoStartCallback = 11; IoWriteAllCallback = 12; IoFinishCallback = 13; ReadMemoryFailureCallback = 14; SecondaryFlagsCallback = 15; IsProcessSnapshotCallback = 16; VmStartCallback = 17; VmQueryCallback = 18; VmPreReadCallback = 19; VmPostReadCallback = 20; }
export type s__MINIDUMP_THREAD_CALLBACK = struct { ThreadId: ulong; ThreadHandle: *; Context: s__CONTEXT; SizeOfContext: ulong; StackBase: uint64; StackEnd: uint64; }
export type s__MINIDUMP_THREAD_EX_CALLBACK = struct { ThreadId: ulong; ThreadHandle: *; Context: s__CONTEXT; SizeOfContext: ulong; StackBase: uint64; StackEnd: uint64; BackingStoreBase: uint64; BackingStoreEnd: uint64; }
export type s__MINIDUMP_INCLUDE_THREAD_CALLBACK = struct { ThreadId: ulong; }
export type e__THREAD_WRITE_FLAGS = enum { ThreadWriteThread = 1; ThreadWriteStack = 2; ThreadWriteContext = 4; ThreadWriteBackingStore = 8; ThreadWriteInstructionWindow = 16; ThreadWriteThreadData = 32; ThreadWriteThreadInfo = 64; }
export type s__MINIDUMP_MODULE_CALLBACK = struct { FullPath: *ushort; BaseOfImage: uint64; SizeOfImage: ulong; CheckSum: ulong; TimeDateStamp: ulong; VersionInfo: s_tagVS_FIXEDFILEINFO; CvRecord: *; SizeOfCvRecord: ulong; MiscRecord: *; SizeOfMiscRecord: ulong; }
export type s__MINIDUMP_INCLUDE_MODULE_CALLBACK = struct { BaseOfImage: uint64; }
export type e__MODULE_WRITE_FLAGS = enum { ModuleWriteModule = 1; ModuleWriteDataSeg = 2; ModuleWriteMiscRecord = 4; ModuleWriteCvRecord = 8; ModuleReferencedByMemory = 16; ModuleWriteTlsData = 32; ModuleWriteCodeSegs = 64; }
export type s__MINIDUMP_IO_CALLBACK = struct { Handle: *; Offset: uint64; Buffer: *; BufferBytes: ulong; }
export type s__MINIDUMP_READ_MEMORY_FAILURE_CALLBACK = struct { Offset: uint64; Bytes: ulong; FailureStatus: long; }
export type s__MINIDUMP_VM_QUERY_CALLBACK = struct { Offset: uint64; }
export type s__MINIDUMP_VM_PRE_READ_CALLBACK = struct { Offset: uint64; Buffer: *; Size: ulong; }
export type s__MINIDUMP_VM_POST_READ_CALLBACK = struct { Offset: uint64; Buffer: *; Size: ulong; Completed: ulong; Status: long; }
export type s__MINIDUMP_CALLBACK_INPUT = struct { ProcessId: ulong; ProcessHandle: *; CallbackType: ulong; struct #union { Status: long; Thread: s__MINIDUMP_THREAD_CALLBACK; ThreadEx: s__MINIDUMP_THREAD_EX_CALLBACK; Module: s__MINIDUMP_MODULE_CALLBACK; IncludeThread: s__MINIDUMP_INCLUDE_THREAD_CALLBACK; IncludeModule: s__MINIDUMP_INCLUDE_MODULE_CALLBACK; Io: s__MINIDUMP_IO_CALLBACK; ReadMemoryFailure: s__MINIDUMP_READ_MEMORY_FAILURE_CALLBACK; SecondaryFlags: ulong; VmQuery: s__MINIDUMP_VM_QUERY_CALLBACK; VmPreRead: s__MINIDUMP_VM_PRE_READ_CALLBACK; VmPostRead: s__MINIDUMP_VM_POST_READ_CALLBACK; }; }
export type s__MINIDUMP_CALLBACK_OUTPUT = struct { struct #union { ModuleWriteFlags: ulong; ThreadWriteFlags: ulong; SecondaryFlags: ulong; struct { MemoryBase: uint64; MemorySize: ulong; }; struct { CheckCancel: int; Cancel: int; }; Handle: *; struct { VmRegion: s__MINIDUMP_MEMORY_INFO; Continue: int; }; struct { VmQueryStatus: long; VmQueryResult: s__MINIDUMP_MEMORY_INFO; }; struct { VmReadStatus: long; VmReadBytesCompleted: ulong; }; Status: long; }; }
export type e__MINIDUMP_TYPE = enum { MiniDumpNormal; MiniDumpWithDataSegs = 1; MiniDumpWithFullMemory = 2; MiniDumpWithHandleData = 4; MiniDumpFilterMemory = 8; MiniDumpScanMemory = 16; MiniDumpWithUnloadedModules = 32; MiniDumpWithIndirectlyReferencedMemory = 64; MiniDumpFilterModulePaths = 128; MiniDumpWithProcessThreadData = 256; MiniDumpWithPrivateReadWriteMemory = 512; MiniDumpWithoutOptionalData = 1024; MiniDumpWithFullMemoryInfo = 2048; MiniDumpWithThreadInfo = 4096; MiniDumpWithCodeSegs = 8192; MiniDumpWithoutAuxiliaryState = 16384; MiniDumpWithFullAuxiliaryState = 32768; MiniDumpWithPrivateWriteCopyMemory = 65536; MiniDumpIgnoreInaccessibleMemory = 131072; MiniDumpWithTokenInformation = 262144; MiniDumpWithModuleHeaders = 524288; MiniDumpFilterTriage = 1048576; MiniDumpWithAvxXStateContext = 2097152; MiniDumpWithIptTrace = 4194304; MiniDumpScanInaccessiblePartialPages = 8388608; MiniDumpFilterWriteCombinedMemory = 16777216; MiniDumpValidTypeFlags = 33554431; }
export type e__MINIDUMP_SECONDARY_FLAGS = enum { MiniSecondaryWithoutPowerInfo = 1; MiniSecondaryValidFlags = 1; }
export type s__MINIDUMP_CALLBACK_INFORMATION = struct { CallbackRoutine: def (*, *s__MINIDUMP_CALLBACK_INPUT, *s__MINIDUMP_CALLBACK_OUTPUT) -> (int); CallbackParam: *; }
export type s__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = struct { Relationship: e__LOGICAL_PROCESSOR_RELATIONSHIP; Size: ulong; struct #union { Processor: s__PROCESSOR_RELATIONSHIP; NumaNode: s__NUMA_NODE_RELATIONSHIP; Cache: s__CACHE_RELATIONSHIP; Group: s__GROUP_RELATIONSHIP; }; }
export type s__SYSTEM_CPU_SET_INFORMATION = struct { Size: ulong; Type: e__CPU_SET_INFORMATION_TYPE; struct #union { CpuSet: struct { Id: ulong; Group: ushort; LogicalProcessorIndex: uint8; CoreIndex: uint8; LastLevelCacheIndex: uint8; NumaNodeIndex: uint8; EfficiencyClass: uint8; struct #union { AllFlags: uint8; struct { #bits(1) Parked: uint8; #bits(1) Allocated: uint8; #bits(1) AllocatedToTargetProcess: uint8; #bits(1) RealTime: uint8; #bits(4) ReservedFlags: uint8; }; }; struct #union { Reserved: ulong; SchedulingClass: uint8; }; AllocationTag: uint64; }; }; }
export type s__EVENTSFORLOGFILE = struct { ulSize: ulong; szLogicalLogFile: [256; ushort]; ulNumRecords: ulong; pEventLogRecords: *s__EVENTLOGRECORD; }
export type s__PACKEDEVENTINFO = struct { ulSize: ulong; ulNumEventsForLogFile: ulong; ulOffsets: *ulong; }
export type s__TEB
export type s_HKEY__ = struct { unused: int; }
export type s_HMETAFILE__ = struct { unused: int; }
export type s_HINSTANCE__ = struct { unused: int; }
export type s_HRGN__ = struct { unused: int; }
export type s_HRSRC__ = struct { unused: int; }
export type s_HSPRITE__ = struct { unused: int; }
export type s_HLSURF__ = struct { unused: int; }
export type s_HSTR__ = struct { unused: int; }
export type s_HTASK__ = struct { unused: int; }
export type s_HWINSTA__ = struct { unused: int; }
export type s_HKL__ = struct { unused: int; }
export type s_HWND__ = struct { unused: int; }
export type s_HHOOK__ = struct { unused: int; }
export type s_HACCEL__ = struct { unused: int; }
export type s_HBITMAP__ = struct { unused: int; }
export type s_HBRUSH__ = struct { unused: int; }
export type s_HCOLORSPACE__ = struct { unused: int; }
export type s_HDC__ = struct { unused: int; }
export type s_HGLRC__ = struct { unused: int; }
export type s_HDESK__ = struct { unused: int; }
export type s_HENHMETAFILE__ = struct { unused: int; }
export type s_HFONT__ = struct { unused: int; }
export type s_HICON__ = struct { unused: int; }
export type s_HMENU__ = struct { unused: int; }
export type s_HPALETTE__ = struct { unused: int; }
export type s_HPEN__ = struct { unused: int; }
export type s_HWINEVENTHOOK__ = struct { unused: int; }
export type s_HMONITOR__ = struct { unused: int; }
export type s_HUMPD__ = struct { unused: int; }
export type s_DPI_AWARENESS_CONTEXT__ = struct { unused: int; }
export type s__PROC_THREAD_ATTRIBUTE_LIST
export type s_HTOUCHINPUT__ = struct { unused: int; }
export type e_tagPOINTER_INPUT_TYPE = enum { PT_POINTER = 1; PT_TOUCH = 2; PT_PEN = 3; PT_MOUSE = 4; PT_TOUCHPAD = 5; }
export type s_HSYNTHETICPOINTERDEVICE__ = struct { unused: int; }
export type s_HRAWINPUT__ = struct { unused: int; }
export type s_HGESTUREINFO__ = struct { unused: int; }
export type e_SYSNLS_FUNCTION = enum { COMPARE_STRING = 1; }
export type e_SYSGEOTYPE = enum { GEO_NATION = 1; GEO_LATITUDE = 2; GEO_LONGITUDE = 3; GEO_ISO2 = 4; GEO_ISO3 = 5; GEO_RFC1766 = 6; GEO_LCID = 7; GEO_FRIENDLYNAME = 8; GEO_OFFICIALNAME = 9; GEO_TIMEZONES = 10; GEO_OFFICIALLANGUAGES = 11; GEO_ISO_UN_NUMBER = 12; GEO_PARENT = 13; GEO_DIALINGCODE = 14; GEO_CURRENCYCODE = 15; GEO_CURRENCYSYMBOL = 16; GEO_NAME = 17; GEO_ID = 18; }
export type e_SYSGEOCLASS = enum { GEOCLASS_NATION = 16; GEOCLASS_REGION = 14; GEOCLASS_ALL; }
export type s_HSAVEDUILANGUAGES__ = struct { unused: int; }
export type s_val_context = struct { valuelen: int; value_context: *; val_buff_ptr: *; }
export type s_HCONVLIST__ = struct { unused: int; }
export type s_HCONV__ = struct { unused: int; }
export type s_HSZ__ = struct { unused: int; }
export type s_HDDEDATA__ = struct { unused: int; }
export type s_HDRVR__ = struct { unused: int; }
export type s_HMMIO__ = struct { unused: int; }
export type s_HWAVE__ = struct { unused: int; }
export type s_HWAVEIN__ = struct { unused: int; }
export type s_HWAVEOUT__ = struct { unused: int; }
export type s_HMIDI__ = struct { unused: int; }
export type s_HMIDIIN__ = struct { unused: int; }
export type s_HMIDIOUT__ = struct { unused: int; }
export type s_HMIDISTRM__ = struct { unused: int; }
export type s_HMIXEROBJ__ = struct { unused: int; }
export type s_HMIXER__ = struct { unused: int; }
export type e_RPC_ADDRESS_CHANGE_TYPE = enum { PROTOCOL_NOT_LOADED = 1; PROTOCOL_LOADED = 2; PROTOCOL_ADDRESS_CHANGE = 3; }
export type s_HDROP__ = struct { unused: int; }
export type s_timeval = struct { tv_sec: long; tv_usec: long; }
export type s_hostent = struct { h_name: *char; h_aliases: **char; h_addrtype: short; h_length: short; h_addr_list: **char; }
export type s_netent = struct { n_name: *char; n_aliases: **char; n_addrtype: short; n_net: ulong; }
export type s_servent = struct { s_name: *char; s_aliases: **char; s_proto: *char; s_port: short; }
export type s_protoent = struct { p_name: *char; p_aliases: **char; p_proto: short; }
export type s_sockaddr_in = struct { sin_family: short; sin_port: ushort; sin_addr: s_in_addr; sin_zero: [8; char]; }
export type s_ip_mreq = struct { imr_multiaddr: s_in_addr; imr_interface: s_in_addr; }
export type s_sockaddr = struct { sa_family: ushort; sa_data: [14; char]; }
export type s_sockproto = struct { sp_family: ushort; sp_protocol: ushort; }
export type s_linger = struct { l_onoff: ushort; l_linger: ushort; }
export type s__CMSG_RECIPIENT_ENCODE_INFO = struct { dwRecipientChoice: ulong; struct #union { pKeyTrans: *s__CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO; pKeyAgree: *s__CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO; pMailList: *s__CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO; }; }
export type s__CERT_CHAIN_CONTEXT = struct { cbSize: ulong; TrustStatus: s__CERT_TRUST_STATUS; cChain: ulong; rgpChain: **s__CERT_SIMPLE_CHAIN; cLowerQualityChainContext: ulong; rgpLowerQualityChainContext: **s__CERT_CHAIN_CONTEXT; fHasRevocationFreshnessTime: int; dwRevocationFreshnessTime: ulong; dwCreateFlags: ulong; ChainId: s__GUID; }
export type s__CERT_REVOCATION_CHAIN_PARA = struct { cbSize: ulong; hChainEngine: *; hAdditionalStore: *; dwChainFlags: ulong; dwUrlRetrievalTimeout: ulong; pftCurrentTime: *s__FILETIME; pftCacheResync: *s__FILETIME; cbMaxUrlRetrievalByteCount: ulong; }
export type s__CERT_SERVER_OCSP_RESPONSE_CONTEXT = struct { cbSize: ulong; pbEncodedOcspResponse: *uint8; cbEncodedOcspResponse: ulong; }
export type s__NDR_SCONTEXT = struct { pad: [2; *]; userContext: *; }
export type s__NDR_ASYNC_MESSAGE
export type s__NDR_CORRELATION_INFO
export type s_NDR_ALLOC_ALL_NODES_CONTEXT
export type s_NDR_POINTER_QUEUE_STATE
export type s__NDR_PROC_CONTEXT
export type s__MIDL_STUB_MESSAGE = struct { RpcMsg: *s__RPC_MESSAGE; Buffer: *uint8; BufferStart: *uint8; BufferEnd: *uint8; BufferMark: *uint8; BufferLength: ulong; MemorySize: ulong; Memory: *uint8; IsClient: uint8; Pad: uint8; uFlags2: ushort; ReuseBuffer: int; pAllocAllNodesContext: *s_NDR_ALLOC_ALL_NODES_CONTEXT; pPointerQueueState: *s_NDR_POINTER_QUEUE_STATE; IgnoreEmbeddedPointers: int; PointerBufferMark: *uint8; CorrDespIncrement: uint8; uFlags: uint8; UniquePtrCount: ushort; MaxCount: uint64; Offset: ulong; ActualCount: ulong; pfnAllocate: def (uint64) -> (*); pfnFree: def (*) -> (); StackTop: *uint8; pPresentedType: *uint8; pTransmitType: *uint8; SavedHandle: *; StubDesc: *s__MIDL_STUB_DESC; FullPtrXlatTables: *s__FULL_PTR_XLAT_TABLES; FullPtrRefId: ulong; PointerLength: ulong; #bits(1) fInDontFree: int; #bits(1) fDontCallFreeInst: int; #bits(1) fUnused1: int; #bits(1) fHasReturn: int; #bits(1) fHasExtensions: int; #bits(1) fHasNewCorrDesc: int; #bits(1) fIsIn: int; #bits(1) fIsOut: int; #bits(1) fIsOicf: int; #bits(1) fBufferValid: int; #bits(1) fHasMemoryValidateCallback: int; #bits(1) fInFree: int; #bits(1) fNeedMCCP: int; #bits(3) fUnused2: int; #bits(16) fUnused3: int; dwDestContext: ulong; pvDestContext: *; SavedContextHandles: **s__NDR_SCONTEXT; ParamNumber: long; pRpcChannelBuffer: *s_IRpcChannelBuffer; pArrayInfo: *ARRAY_INFO; SizePtrCountArray: *ulong; SizePtrOffsetArray: *ulong; SizePtrLengthArray: *ulong; pArgQueue: *; dwStubPhase: ulong; LowStackMark: *; pAsyncMsg: *s__NDR_ASYNC_MESSAGE; pCorrInfo: *s__NDR_CORRELATION_INFO; pCorrMemory: *uint8; pMemoryList: *; pCSInfo: int64; ConformanceMark: *uint8; VarianceMark: *uint8; Unused: int64; pContext: *s__NDR_PROC_CONTEXT; ContextHandleHash: *; pUserMarshalList: *; Reserved51_3: int64; Reserved51_4: int64; Reserved51_5: int64; }
export type e_VARENUM = enum { VT_EMPTY; VT_NULL = 1; VT_I2 = 2; VT_I4 = 3; VT_R4 = 4; VT_R8 = 5; VT_CY = 6; VT_DATE = 7; VT_BSTR = 8; VT_DISPATCH = 9; VT_ERROR = 10; VT_BOOL = 11; VT_VARIANT = 12; VT_UNKNOWN = 13; VT_DECIMAL = 14; VT_I1 = 16; VT_UI1 = 17; VT_UI2 = 18; VT_UI4 = 19; VT_I8 = 20; VT_UI8 = 21; VT_INT = 22; VT_UINT = 23; VT_VOID = 24; VT_HRESULT = 25; VT_PTR = 26; VT_SAFEARRAY = 27; VT_CARRAY = 28; VT_USERDEFINED = 29; VT_LPSTR = 30; VT_LPWSTR = 31; VT_RECORD = 36; VT_INT_PTR = 37; VT_UINT_PTR = 38; VT_FILETIME = 64; VT_BLOB = 65; VT_STREAM = 66; VT_STORAGE = 67; VT_STREAMED_OBJECT = 68; VT_STORED_OBJECT = 69; VT_BLOB_OBJECT = 70; VT_CF = 71; VT_CLSID = 72; VT_VERSIONED_STREAM = 73; VT_BSTR_BLOB = 4095; VT_VECTOR = 4096; VT_ARRAY = 8192; VT_BYREF = 16384; VT_RESERVED = 32768; VT_ILLEGAL = 65535; VT_ILLEGALMASKED = 4095; VT_TYPEMASK = 4095; }
export type s__PSP
export type s_IUnknown = struct { lpVtbl: *s_IUnknownVtbl; }
export type s_AsyncIUnknown = struct { lpVtbl: *s_AsyncIUnknownVtbl; }
export type s_IClassFactory = struct { lpVtbl: *s_IClassFactoryVtbl; }
export type s_IMarshal = struct { lpVtbl: *s_IMarshalVtbl; }
export type s_INoMarshal = struct { lpVtbl: *s_INoMarshalVtbl; }
export type s_IAgileObject = struct { lpVtbl: *s_IAgileObjectVtbl; }
export type s_IActivationFilter = struct { lpVtbl: *s_IActivationFilterVtbl; }
export type s_IMarshal2 = struct { lpVtbl: *s_IMarshal2Vtbl; }
export type s_IMalloc = struct { lpVtbl: *s_IMallocVtbl; }
export type s_IStdMarshalInfo = struct { lpVtbl: *s_IStdMarshalInfoVtbl; }
export type s_IExternalConnection = struct { lpVtbl: *s_IExternalConnectionVtbl; }
export type s_IMultiQI = struct { lpVtbl: *s_IMultiQIVtbl; }
export type s_AsyncIMultiQI = struct { lpVtbl: *s_AsyncIMultiQIVtbl; }
export type s_IInternalUnknown = struct { lpVtbl: *s_IInternalUnknownVtbl; }
export type s_IEnumUnknown = struct { lpVtbl: *s_IEnumUnknownVtbl; }
export type s_IEnumString = struct { lpVtbl: *s_IEnumStringVtbl; }
export type s_ISequentialStream = struct { lpVtbl: *s_ISequentialStreamVtbl; }
export type s_IStream = struct { lpVtbl: *s_IStreamVtbl; }
export type s_IRpcChannelBuffer = struct { lpVtbl: *s_IRpcChannelBufferVtbl; }
export type s_IRpcChannelBuffer2 = struct { lpVtbl: *s_IRpcChannelBuffer2Vtbl; }
export type s_IAsyncRpcChannelBuffer = struct { lpVtbl: *s_IAsyncRpcChannelBufferVtbl; }
export type s_IRpcChannelBuffer3 = struct { lpVtbl: *s_IRpcChannelBuffer3Vtbl; }
export type s_IRpcSyntaxNegotiate = struct { lpVtbl: *s_IRpcSyntaxNegotiateVtbl; }
export type s_IRpcProxyBuffer = struct { lpVtbl: *s_IRpcProxyBufferVtbl; }
export type s_IRpcStubBuffer = struct { lpVtbl: *s_IRpcStubBufferVtbl; }
export type s_IPSFactoryBuffer = struct { lpVtbl: *s_IPSFactoryBufferVtbl; }
export type s_IChannelHook = struct { lpVtbl: *s_IChannelHookVtbl; }
export type s_IClientSecurity = struct { lpVtbl: *s_IClientSecurityVtbl; }
export type s_IServerSecurity = struct { lpVtbl: *s_IServerSecurityVtbl; }
export type s_IRpcOptions = struct { lpVtbl: *s_IRpcOptionsVtbl; }
export type s_IGlobalOptions = struct { lpVtbl: *s_IGlobalOptionsVtbl; }
export type s_ISurrogate = struct { lpVtbl: *s_ISurrogateVtbl; }
export type s_IGlobalInterfaceTable = struct { lpVtbl: *s_IGlobalInterfaceTableVtbl; }
export type s_ISynchronize = struct { lpVtbl: *s_ISynchronizeVtbl; }
export type s_ISynchronizeHandle = struct { lpVtbl: *s_ISynchronizeHandleVtbl; }
export type s_ISynchronizeEvent = struct { lpVtbl: *s_ISynchronizeEventVtbl; }
export type s_ISynchronizeContainer = struct { lpVtbl: *s_ISynchronizeContainerVtbl; }
export type s_ISynchronizeMutex = struct { lpVtbl: *s_ISynchronizeMutexVtbl; }
export type s_ICancelMethodCalls = struct { lpVtbl: *s_ICancelMethodCallsVtbl; }
export type s_IAsyncManager = struct { lpVtbl: *s_IAsyncManagerVtbl; }
export type s_ICallFactory = struct { lpVtbl: *s_ICallFactoryVtbl; }
export type s_IRpcHelper = struct { lpVtbl: *s_IRpcHelperVtbl; }
export type s_IReleaseMarshalBuffers = struct { lpVtbl: *s_IReleaseMarshalBuffersVtbl; }
export type s_IWaitMultiple = struct { lpVtbl: *s_IWaitMultipleVtbl; }
export type s_IAddrTrackingControl = struct { lpVtbl: *s_IAddrTrackingControlVtbl; }
export type s_IAddrExclusionControl = struct { lpVtbl: *s_IAddrExclusionControlVtbl; }
export type s_IPipeByte = struct { lpVtbl: *s_IPipeByteVtbl; }
export type s_AsyncIPipeByte = struct { lpVtbl: *s_AsyncIPipeByteVtbl; }
export type s_IPipeLong = struct { lpVtbl: *s_IPipeLongVtbl; }
export type s_AsyncIPipeLong = struct { lpVtbl: *s_AsyncIPipeLongVtbl; }
export type s_IPipeDouble = struct { lpVtbl: *s_IPipeDoubleVtbl; }
export type s_AsyncIPipeDouble = struct { lpVtbl: *s_AsyncIPipeDoubleVtbl; }
export type s_IComThreadingInfo = struct { lpVtbl: *s_IComThreadingInfoVtbl; }
export type s_IProcessInitControl = struct { lpVtbl: *s_IProcessInitControlVtbl; }
export type s_IFastRundown = struct { lpVtbl: *s_IFastRundownVtbl; }
export type s_IMarshalingStream = struct { lpVtbl: *s_IMarshalingStreamVtbl; }
export type s_IAgileReference = struct { lpVtbl: *s_IAgileReferenceVtbl; }
export type s_MachineGlobalObjectTableRegistrationToken__ = struct { unused: int; }
export type s_IMachineGlobalObjectTable = struct { lpVtbl: *s_IMachineGlobalObjectTableVtbl; }
export type s_ISupportAllowLowerTrustActivation = struct { lpVtbl: *s_ISupportAllowLowerTrustActivationVtbl; }
export type s_CO_MTA_USAGE_COOKIE__ = struct { unused: int; }
export type e_AgileReferenceOptions = enum { AGILEREFERENCE_DEFAULT; AGILEREFERENCE_DELAYEDMARSHAL = 1; }
export type s_CO_DEVICE_CATALOG_COOKIE__ = struct { unused: int; }
export type s_IMallocSpy = struct { lpVtbl: *s_IMallocSpyVtbl; }
export type s_IBindCtx = struct { lpVtbl: *s_IBindCtxVtbl; }
export type s_IEnumMoniker = struct { lpVtbl: *s_IEnumMonikerVtbl; }
export type s_IRunnableObject = struct { lpVtbl: *s_IRunnableObjectVtbl; }
export type s_IRunningObjectTable = struct { lpVtbl: *s_IRunningObjectTableVtbl; }
export type s_IPersist = struct { lpVtbl: *s_IPersistVtbl; }
export type s_IPersistStream = struct { lpVtbl: *s_IPersistStreamVtbl; }
export type s_IMoniker = struct { lpVtbl: *s_IMonikerVtbl; }
export type s_IROTData = struct { lpVtbl: *s_IROTDataVtbl; }
export type s_IEnumSTATSTG = struct { lpVtbl: *s_IEnumSTATSTGVtbl; }
export type s_IStorage = struct { lpVtbl: *s_IStorageVtbl; }
export type s_IPersistFile = struct { lpVtbl: *s_IPersistFileVtbl; }
export type s_IPersistStorage = struct { lpVtbl: *s_IPersistStorageVtbl; }
export type s_ILockBytes = struct { lpVtbl: *s_ILockBytesVtbl; }
export type s_IEnumFORMATETC = struct { lpVtbl: *s_IEnumFORMATETCVtbl; }
export type s_IEnumSTATDATA = struct { lpVtbl: *s_IEnumSTATDATAVtbl; }
export type s_IRootStorage = struct { lpVtbl: *s_IRootStorageVtbl; }
export type s_IAdviseSink = struct { lpVtbl: *s_IAdviseSinkVtbl; }
export type s_AsyncIAdviseSink = struct { lpVtbl: *s_AsyncIAdviseSinkVtbl; }
export type s_IAdviseSink2 = struct { lpVtbl: *s_IAdviseSink2Vtbl; }
export type s_AsyncIAdviseSink2 = struct { lpVtbl: *s_AsyncIAdviseSink2Vtbl; }
export type s_IDataObject = struct { lpVtbl: *s_IDataObjectVtbl; }
export type s_IDataAdviseHolder = struct { lpVtbl: *s_IDataAdviseHolderVtbl; }
export type s_IMessageFilter = struct { lpVtbl: *s_IMessageFilterVtbl; }
export type s_IClassActivator = struct { lpVtbl: *s_IClassActivatorVtbl; }
export type s_IFillLockBytes = struct { lpVtbl: *s_IFillLockBytesVtbl; }
export type s_IProgressNotify = struct { lpVtbl: *s_IProgressNotifyVtbl; }
export type s_ILayoutStorage = struct { lpVtbl: *s_ILayoutStorageVtbl; }
export type s_IBlockingLock = struct { lpVtbl: *s_IBlockingLockVtbl; }
export type s_ITimeAndNoticeControl = struct { lpVtbl: *s_ITimeAndNoticeControlVtbl; }
export type s_IOplockStorage = struct { lpVtbl: *s_IOplockStorageVtbl; }
export type s_IDirectWriterLock = struct { lpVtbl: *s_IDirectWriterLockVtbl; }
export type s_IUrlMon = struct { lpVtbl: *s_IUrlMonVtbl; }
export type s_IForegroundTransfer = struct { lpVtbl: *s_IForegroundTransferVtbl; }
export type s_IThumbnailExtractor = struct { lpVtbl: *s_IThumbnailExtractorVtbl; }
export type s_IDummyHICONIncluder = struct { lpVtbl: *s_IDummyHICONIncluderVtbl; }
export type s_IProcessLock = struct { lpVtbl: *s_IProcessLockVtbl; }
export type s_ISurrogateService = struct { lpVtbl: *s_ISurrogateServiceVtbl; }
export type s_IInitializeSpy = struct { lpVtbl: *s_IInitializeSpyVtbl; }
export type s_IApartmentShutdown = struct { lpVtbl: *s_IApartmentShutdownVtbl; }
export type s__wireSAFEARRAY = struct { cDims: ushort; fFeatures: ushort; cbElements: ulong; cLocks: ulong; uArrayStructs: s__wireSAFEARRAY_UNION; rgsabound: [1; s_tagSAFEARRAYBOUND]; }
export type s_tagVARIANT = struct { struct #union { struct { vt: ushort; wReserved1: ushort; wReserved2: ushort; wReserved3: ushort; struct #union { llVal: int64; lVal: long; bVal: uint8; iVal: short; fltVal: float; dblVal: double; boolVal: short; __OBSOLETE__VARIANT_BOOL: short; scode: long; cyVal: u_tagCY; date: double; bstrVal: *ushort; punkVal: *s_IUnknown; pdispVal: *s_IDispatch; parray: *s_tagSAFEARRAY; pbVal: *uint8; piVal: *short; plVal: *long; pllVal: *int64; pfltVal: *float; pdblVal: *double; pboolVal: *short; __OBSOLETE__VARIANT_PBOOL: *short; pscode: *long; pcyVal: *u_tagCY; pdate: *double; pbstrVal: **ushort; ppunkVal: **s_IUnknown; ppdispVal: **s_IDispatch; pparray: **s_tagSAFEARRAY; pvarVal: *s_tagVARIANT; byref: *; cVal: char; uiVal: ushort; ulVal: ulong; ullVal: uint64; intVal: int; uintVal: uint; pdecVal: *s_tagDEC; pcVal: *char; puiVal: *ushort; pulVal: *ulong; pullVal: *uint64; pintVal: *int; puintVal: *uint; struct { pvRecord: *; pRecInfo: *s_IRecordInfo; }; }; }; decVal: s_tagDEC; }; }
export type s__wireBRECORD = struct { fFlags: ulong; clSize: ulong; pRecInfo: *s_IRecordInfo; pRecord: *uint8; }
export type s__wireVARIANT = struct { clSize: ulong; rpcReserved: ulong; vt: ushort; wReserved1: ushort; wReserved2: ushort; wReserved3: ushort; struct #union { llVal: int64; lVal: long; bVal: uint8; iVal: short; fltVal: float; dblVal: double; boolVal: short; scode: long; cyVal: u_tagCY; date: double; bstrVal: *s__FLAGGED_WORD_BLOB; punkVal: *s_IUnknown; pdispVal: *s_IDispatch; parray: **s__wireSAFEARRAY; brecVal: *s__wireBRECORD; pbVal: *uint8; piVal: *short; plVal: *long; pllVal: *int64; pfltVal: *float; pdblVal: *double; pboolVal: *short; pscode: *long; pcyVal: *u_tagCY; pdate: *double; pbstrVal: **s__FLAGGED_WORD_BLOB; ppunkVal: **s_IUnknown; ppdispVal: **s_IDispatch; pparray: ***s__wireSAFEARRAY; pvarVal: **s__wireVARIANT; cVal: char; uiVal: ushort; ulVal: ulong; ullVal: uint64; intVal: int; uintVal: uint; decVal: s_tagDEC; pdecVal: *s_tagDEC; pcVal: *char; puiVal: *ushort; pulVal: *ulong; pullVal: *uint64; pintVal: *int; puintVal: *uint; }; }
export type s_ICreateTypeInfo = struct { lpVtbl: *s_ICreateTypeInfoVtbl; }
export type s_ICreateTypeInfo2 = struct { lpVtbl: *s_ICreateTypeInfo2Vtbl; }
export type s_ICreateTypeLib = struct { lpVtbl: *s_ICreateTypeLibVtbl; }
export type s_ICreateTypeLib2 = struct { lpVtbl: *s_ICreateTypeLib2Vtbl; }
export type s_IDispatch = struct { lpVtbl: *s_IDispatchVtbl; }
export type s_IEnumVARIANT = struct { lpVtbl: *s_IEnumVARIANTVtbl; }
export type s_ITypeComp = struct { lpVtbl: *s_ITypeCompVtbl; }
export type s_ITypeInfo = struct { lpVtbl: *s_ITypeInfoVtbl; }
export type s_ITypeInfo2 = struct { lpVtbl: *s_ITypeInfo2Vtbl; }
export type s_ITypeLib = struct { lpVtbl: *s_ITypeLibVtbl; }
export type s_ITypeLib2 = struct { lpVtbl: *s_ITypeLib2Vtbl; }
export type s_ITypeChangeEvents = struct { lpVtbl: *s_ITypeChangeEventsVtbl; }
export type s_IErrorInfo = struct { lpVtbl: *s_IErrorInfoVtbl; }
export type s_ICreateErrorInfo = struct { lpVtbl: *s_ICreateErrorInfoVtbl; }
export type s_ISupportErrorInfo = struct { lpVtbl: *s_ISupportErrorInfoVtbl; }
export type s_ITypeFactory = struct { lpVtbl: *s_ITypeFactoryVtbl; }
export type s_ITypeMarshal = struct { lpVtbl: *s_ITypeMarshalVtbl; }
export type s_IRecordInfo = struct { lpVtbl: *s_IRecordInfoVtbl; }
export type s_IErrorLog = struct { lpVtbl: *s_IErrorLogVtbl; }
export type s_IPropertyBag = struct { lpVtbl: *s_IPropertyBagVtbl; }
export type s_ITypeLibRegistrationReader = struct { lpVtbl: *s_ITypeLibRegistrationReaderVtbl; }
export type s_ITypeLibRegistration = struct { lpVtbl: *s_ITypeLibRegistrationVtbl; }
export type s_tagPROPVARIANT = struct { struct #union { struct { vt: ushort; wReserved1: ushort; wReserved2: ushort; wReserved3: ushort; struct #union { cVal: char; bVal: uint8; iVal: short; uiVal: ushort; lVal: long; ulVal: ulong; intVal: int; uintVal: uint; hVal: u__LARGE_INTEGER; uhVal: u__ULARGE_INTEGER; fltVal: float; dblVal: double; boolVal: short; __OBSOLETE__VARIANT_BOOL: short; scode: long; cyVal: u_tagCY; date: double; filetime: s__FILETIME; puuid: *s__GUID; pclipdata: *s_tagCLIPDATA; bstrVal: *ushort; bstrblobVal: s_tagBSTRBLOB; blob: s_tagBLOB; pszVal: *char; pwszVal: *ushort; punkVal: *s_IUnknown; pdispVal: *s_IDispatch; pStream: *s_IStream; pStorage: *s_IStorage; pVersionedStream: *s_tagVersionedStream; parray: *s_tagSAFEARRAY; cac: s_tagCAC; caub: s_tagCAUB; cai: s_tagCAI; caui: s_tagCAUI; cal: s_tagCAL; caul: s_tagCAUL; cah: s_tagCAH; cauh: s_tagCAUH; caflt: s_tagCAFLT; cadbl: s_tagCADBL; cabool: s_tagCABOOL; cascode: s_tagCASCODE; cacy: s_tagCACY; cadate: s_tagCADATE; cafiletime: s_tagCAFILETIME; cauuid: s_tagCACLSID; caclipdata: s_tagCACLIPDATA; cabstr: s_tagCABSTR; cabstrblob: s_tagCABSTRBLOB; calpstr: s_tagCALPSTR; calpwstr: s_tagCALPWSTR; capropvar: s_tagCAPROPVARIANT; pcVal: *char; pbVal: *uint8; piVal: *short; puiVal: *ushort; plVal: *long; pulVal: *ulong; pintVal: *int; puintVal: *uint; pfltVal: *float; pdblVal: *double; pboolVal: *short; pdecVal: *s_tagDEC; pscode: *long; pcyVal: *u_tagCY; pdate: *double; pbstrVal: **ushort; ppunkVal: **s_IUnknown; ppdispVal: **s_IDispatch; pparray: **s_tagSAFEARRAY; pvarVal: *s_tagPROPVARIANT; }; }; decVal: s_tagDEC; }; }
export type s_IPropertyStorage = struct { lpVtbl: *s_IPropertyStorageVtbl; }
export type s_IPropertySetStorage = struct { lpVtbl: *s_IPropertySetStorageVtbl; }
export type s_IEnumSTATPROPSTG = struct { lpVtbl: *s_IEnumSTATPROPSTGVtbl; }
export type s_IEnumSTATPROPSETSTG = struct { lpVtbl: *s_IEnumSTATPROPSETSTGVtbl; }
export type s_IOleAdviseHolder = struct { lpVtbl: *s_IOleAdviseHolderVtbl; }
export type s_IOleCache = struct { lpVtbl: *s_IOleCacheVtbl; }
export type s_IOleCache2 = struct { lpVtbl: *s_IOleCache2Vtbl; }
export type s_IOleCacheControl = struct { lpVtbl: *s_IOleCacheControlVtbl; }
export type s_IParseDisplayName = struct { lpVtbl: *s_IParseDisplayNameVtbl; }
export type s_IOleContainer = struct { lpVtbl: *s_IOleContainerVtbl; }
export type s_IOleClientSite = struct { lpVtbl: *s_IOleClientSiteVtbl; }
export type s_IOleObject = struct { lpVtbl: *s_IOleObjectVtbl; }
export type s_IOleWindow = struct { lpVtbl: *s_IOleWindowVtbl; }
export type s_IOleLink = struct { lpVtbl: *s_IOleLinkVtbl; }
export type s_IOleItemContainer = struct { lpVtbl: *s_IOleItemContainerVtbl; }
export type s_IOleInPlaceUIWindow = struct { lpVtbl: *s_IOleInPlaceUIWindowVtbl; }
export type s_IOleInPlaceActiveObject = struct { lpVtbl: *s_IOleInPlaceActiveObjectVtbl; }
export type s_IOleInPlaceFrame = struct { lpVtbl: *s_IOleInPlaceFrameVtbl; }
export type s_IOleInPlaceObject = struct { lpVtbl: *s_IOleInPlaceObjectVtbl; }
export type s_IOleInPlaceSite = struct { lpVtbl: *s_IOleInPlaceSiteVtbl; }
export type s_IContinue = struct { lpVtbl: *s_IContinueVtbl; }
export type s_IViewObject = struct { lpVtbl: *s_IViewObjectVtbl; }
export type s_IViewObject2 = struct { lpVtbl: *s_IViewObject2Vtbl; }
export type s_IDropSource = struct { lpVtbl: *s_IDropSourceVtbl; }
export type s_IDropTarget = struct { lpVtbl: *s_IDropTargetVtbl; }
export type s_IDropSourceNotify = struct { lpVtbl: *s_IDropSourceNotifyVtbl; }
export type s_IEnterpriseDropTarget = struct { lpVtbl: *s_IEnterpriseDropTargetVtbl; }
export type s_IEnumOLEVERB = struct { lpVtbl: *s_IEnumOLEVERBVtbl; }
export type s_IServiceProvider = struct { lpVtbl: *s_IServiceProviderVtbl; }
export type s_IXMLDOMImplementation = struct { lpVtbl: *s_IXMLDOMImplementationVtbl; }
export type s_IXMLDOMNode = struct { lpVtbl: *s_IXMLDOMNodeVtbl; }
export type s_IXMLDOMDocumentFragment = struct { lpVtbl: *s_IXMLDOMDocumentFragmentVtbl; }
export type s_IXMLDOMDocument = struct { lpVtbl: *s_IXMLDOMDocumentVtbl; }
export type s_IXMLDOMNodeList = struct { lpVtbl: *s_IXMLDOMNodeListVtbl; }
export type s_IXMLDOMNamedNodeMap = struct { lpVtbl: *s_IXMLDOMNamedNodeMapVtbl; }
export type s_IXMLDOMCharacterData = struct { lpVtbl: *s_IXMLDOMCharacterDataVtbl; }
export type s_IXMLDOMAttribute = struct { lpVtbl: *s_IXMLDOMAttributeVtbl; }
export type s_IXMLDOMElement = struct { lpVtbl: *s_IXMLDOMElementVtbl; }
export type s_IXMLDOMText = struct { lpVtbl: *s_IXMLDOMTextVtbl; }
export type s_IXMLDOMComment = struct { lpVtbl: *s_IXMLDOMCommentVtbl; }
export type s_IXMLDOMProcessingInstruction = struct { lpVtbl: *s_IXMLDOMProcessingInstructionVtbl; }
export type s_IXMLDOMCDATASection = struct { lpVtbl: *s_IXMLDOMCDATASectionVtbl; }
export type s_IXMLDOMDocumentType = struct { lpVtbl: *s_IXMLDOMDocumentTypeVtbl; }
export type s_IXMLDOMNotation = struct { lpVtbl: *s_IXMLDOMNotationVtbl; }
export type s_IXMLDOMEntity = struct { lpVtbl: *s_IXMLDOMEntityVtbl; }
export type s_IXMLDOMEntityReference = struct { lpVtbl: *s_IXMLDOMEntityReferenceVtbl; }
export type s_IXMLDOMParseError = struct { lpVtbl: *s_IXMLDOMParseErrorVtbl; }
export type s_IXTLRuntime = struct { lpVtbl: *s_IXTLRuntimeVtbl; }
export type s_XMLDOMDocumentEvents = struct { lpVtbl: *s_XMLDOMDocumentEventsVtbl; }
export type s_IXMLHttpRequest = struct { lpVtbl: *s_IXMLHttpRequestVtbl; }
export type s_IXMLDSOControl = struct { lpVtbl: *s_IXMLDSOControlVtbl; }
export type s_IXMLElementCollection = struct { lpVtbl: *s_IXMLElementCollectionVtbl; }
export type s_IXMLDocument = struct { lpVtbl: *s_IXMLDocumentVtbl; }
export type s_IXMLDocument2 = struct { lpVtbl: *s_IXMLDocument2Vtbl; }
export type s_IXMLElement = struct { lpVtbl: *s_IXMLElementVtbl; }
export type s_IXMLElement2 = struct { lpVtbl: *s_IXMLElement2Vtbl; }
export type s_IXMLAttribute = struct { lpVtbl: *s_IXMLAttributeVtbl; }
export type s_IXMLError = struct { lpVtbl: *s_IXMLErrorVtbl; }
export type s_IPersistMoniker = struct { lpVtbl: *s_IPersistMonikerVtbl; }
export type s_IMonikerProp = struct { lpVtbl: *s_IMonikerPropVtbl; }
export type s_IBindProtocol = struct { lpVtbl: *s_IBindProtocolVtbl; }
export type s_IBinding = struct { lpVtbl: *s_IBindingVtbl; }
export type s_IBindStatusCallback = struct { lpVtbl: *s_IBindStatusCallbackVtbl; }
export type s_IBindStatusCallbackEx = struct { lpVtbl: *s_IBindStatusCallbackExVtbl; }
export type s_IAuthenticate = struct { lpVtbl: *s_IAuthenticateVtbl; }
export type s_IAuthenticateEx = struct { lpVtbl: *s_IAuthenticateExVtbl; }
export type s_IHttpNegotiate = struct { lpVtbl: *s_IHttpNegotiateVtbl; }
export type s_IHttpNegotiate2 = struct { lpVtbl: *s_IHttpNegotiate2Vtbl; }
export type s_IHttpNegotiate3 = struct { lpVtbl: *s_IHttpNegotiate3Vtbl; }
export type s_IWinInetFileStream = struct { lpVtbl: *s_IWinInetFileStreamVtbl; }
export type s_IWindowForBindingUI = struct { lpVtbl: *s_IWindowForBindingUIVtbl; }
export type s_ICodeInstall = struct { lpVtbl: *s_ICodeInstallVtbl; }
export type s_IUri = struct { lpVtbl: *s_IUriVtbl; }
export type s_IUriContainer = struct { lpVtbl: *s_IUriContainerVtbl; }
export type s_IUriBuilder = struct { lpVtbl: *s_IUriBuilderVtbl; }
export type s_IUriBuilderFactory = struct { lpVtbl: *s_IUriBuilderFactoryVtbl; }
export type s_IWinInetInfo = struct { lpVtbl: *s_IWinInetInfoVtbl; }
export type s_IHttpSecurity = struct { lpVtbl: *s_IHttpSecurityVtbl; }
export type s_IWinInetHttpInfo = struct { lpVtbl: *s_IWinInetHttpInfoVtbl; }
export type s_IWinInetHttpTimeouts = struct { lpVtbl: *s_IWinInetHttpTimeoutsVtbl; }
export type s_IWinInetCacheHints = struct { lpVtbl: *s_IWinInetCacheHintsVtbl; }
export type s_IWinInetCacheHints2 = struct { lpVtbl: *s_IWinInetCacheHints2Vtbl; }
export type s_IBindHost = struct { lpVtbl: *s_IBindHostVtbl; }
export type s_IInternet = struct { lpVtbl: *s_IInternetVtbl; }
export type s_IInternetBindInfo = struct { lpVtbl: *s_IInternetBindInfoVtbl; }
export type s_IInternetBindInfoEx = struct { lpVtbl: *s_IInternetBindInfoExVtbl; }
export type s_IInternetProtocolRoot = struct { lpVtbl: *s_IInternetProtocolRootVtbl; }
export type s_IInternetProtocol = struct { lpVtbl: *s_IInternetProtocolVtbl; }
export type s_IInternetProtocolEx = struct { lpVtbl: *s_IInternetProtocolExVtbl; }
export type s_IInternetProtocolSink = struct { lpVtbl: *s_IInternetProtocolSinkVtbl; }
export type s_IInternetProtocolSinkStackable = struct { lpVtbl: *s_IInternetProtocolSinkStackableVtbl; }
export type s_IInternetSession = struct { lpVtbl: *s_IInternetSessionVtbl; }
export type s_IInternetThreadSwitch = struct { lpVtbl: *s_IInternetThreadSwitchVtbl; }
export type s_IInternetPriority = struct { lpVtbl: *s_IInternetPriorityVtbl; }
export type s_IInternetProtocolInfo = struct { lpVtbl: *s_IInternetProtocolInfoVtbl; }
export type s_IInternetSecurityMgrSite = struct { lpVtbl: *s_IInternetSecurityMgrSiteVtbl; }
export type s_IInternetSecurityManager = struct { lpVtbl: *s_IInternetSecurityManagerVtbl; }
export type s_IInternetSecurityManagerEx = struct { lpVtbl: *s_IInternetSecurityManagerExVtbl; }
export type s_IInternetSecurityManagerEx2 = struct { lpVtbl: *s_IInternetSecurityManagerEx2Vtbl; }
export type s_IZoneIdentifier = struct { lpVtbl: *s_IZoneIdentifierVtbl; }
export type s_IZoneIdentifier2 = struct { lpVtbl: *s_IZoneIdentifier2Vtbl; }
export type s_IInternetHostSecurityManager = struct { lpVtbl: *s_IInternetHostSecurityManagerVtbl; }
export type e___MIDL_IInternetZoneManager_0001 = enum { MAX_ZONE_PATH = 260; MAX_ZONE_DESCRIPTION = 200; }
export type s_IInternetZoneManager = struct { lpVtbl: *s_IInternetZoneManagerVtbl; }
export type s_IInternetZoneManagerEx = struct { lpVtbl: *s_IInternetZoneManagerExVtbl; }
export type s_IInternetZoneManagerEx2 = struct { lpVtbl: *s_IInternetZoneManagerEx2Vtbl; }
export type s_ISoftDistExt = struct { lpVtbl: *s_ISoftDistExtVtbl; }
export type s_ICatalogFileInfo = struct { lpVtbl: *s_ICatalogFileInfoVtbl; }
export type s_IDataFilter = struct { lpVtbl: *s_IDataFilterVtbl; }
export type s_IEncodingFilterFactory = struct { lpVtbl: *s_IEncodingFilterFactoryVtbl; }
export type s_CONFIRMSAFETY = struct { clsid: s__GUID; pUnk: *s_IUnknown; dwFlags: ulong; }
export type s_IWrappedProtocol = struct { lpVtbl: *s_IWrappedProtocolVtbl; }
export type s_IGetBindHandle = struct { lpVtbl: *s_IGetBindHandleVtbl; }
export type s_IBindCallbackRedirect = struct { lpVtbl: *s_IBindCallbackRedirectVtbl; }
export type s_IBindHttpSecurity = struct { lpVtbl: *s_IBindHttpSecurityVtbl; }
export type e_PIDMSI_STATUS_VALUE = enum { PIDMSI_STATUS_NORMAL; PIDMSI_STATUS_NEW = 1; PIDMSI_STATUS_PRELIM = 2; PIDMSI_STATUS_DRAFT = 3; PIDMSI_STATUS_INPROGRESS = 4; PIDMSI_STATUS_EDIT = 5; PIDMSI_STATUS_REVIEW = 6; PIDMSI_STATUS_PROOF = 7; PIDMSI_STATUS_FINAL = 8; PIDMSI_STATUS_OTHER = 32767; }
export type s_IPrintDialogCallbackVtbl = struct { QueryInterface: def (*s_IPrintDialogCallback, *s__GUID, **) -> (long); AddRef: def (*s_IPrintDialogCallback) -> (ulong); Release: def (*s_IPrintDialogCallback) -> (ulong); InitDone: def (*s_IPrintDialogCallback) -> (long); SelectionChange: def (*s_IPrintDialogCallback) -> (long); HandleMessage: def (*s_IPrintDialogCallback, *s_HWND__, uint, uint64, int64, *int64) -> (long); }
export type s_IPrintDialogServicesVtbl = struct { QueryInterface: def (*s_IPrintDialogServices, *s__GUID, **) -> (long); AddRef: def (*s_IPrintDialogServices) -> (ulong); Release: def (*s_IPrintDialogServices) -> (ulong); GetCurrentDevMode: def (*s_IPrintDialogServices, *s__devicemodeA, *uint) -> (long); GetCurrentPrinterName: def (*s_IPrintDialogServices, *ushort, *uint) -> (long); GetCurrentPortName: def (*s_IPrintDialogServices, *ushort, *uint) -> (long); }
export type s_SC_HANDLE__ = struct { unused: int; }
export type s_SERVICE_STATUS_HANDLE__ = struct { unused: int; }
export type s__SC_NOTIFICATION_REGISTRATION
export type s_HIMC__ = struct { unused: int; }
export type s_HIMCC__ = struct { unused: int; }
export const __llvm__: int = 1
export const __clang__: int = 1
export const __clang_major__: int = 16
export const __clang_minor__: int = 0
export const __clang_patchlevel__: int = 6
export const __clang_version__: [char] = "16.0.6 (https://github.com/llvm/llvm-project.git 7cbf1a2591520c2491aa35339f227775f4d3adf6)"
export const __ATOMIC_RELAXED: int = 0
export const __ATOMIC_CONSUME: int = 1
export const __ATOMIC_ACQUIRE: int = 2
export const __ATOMIC_RELEASE: int = 3
export const __ATOMIC_ACQ_REL: int = 4
export const __ATOMIC_SEQ_CST: int = 5
export const __OPENCL_MEMORY_SCOPE_WORK_ITEM: int = 0
export const __OPENCL_MEMORY_SCOPE_WORK_GROUP: int = 1
export const __OPENCL_MEMORY_SCOPE_DEVICE: int = 2
export const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: int = 3
export const __OPENCL_MEMORY_SCOPE_SUB_GROUP: int = 4
export const __PRAGMA_REDEFINE_EXTNAME: int = 1
export const __VERSION__: [char] = "Clang 16.0.6 (https://github.com/llvm/llvm-project.git 7cbf1a2591520c2491aa35339f227775f4d3adf6)"
export const __OBJC_BOOL_IS_BOOL: int = 0
export const __CONSTANT_CFSTRINGS__: int = 1
export const __clang_literal_encoding__: [char] = "UTF-8"
export const __clang_wide_literal_encoding__: [char] = "UTF-16"
export const __ORDER_LITTLE_ENDIAN__: int = 1234
export const __ORDER_BIG_ENDIAN__: int = 4321
export const __ORDER_PDP_ENDIAN__: int = 3412
export const __LITTLE_ENDIAN__: int = 1
export const __CHAR_BIT__: int = 8
export const __BOOL_WIDTH__: int = 8
export const __SHRT_WIDTH__: int = 16
export const __INT_WIDTH__: int = 32
export const __LONG_WIDTH__: int = 32
export const __LLONG_WIDTH__: int = 64
export const __BITINT_MAXWIDTH__: int = 8388608
export const __SCHAR_MAX__: int = 127
export const __SHRT_MAX__: int = 32767
export const __INT_MAX__: int = 2147483647
export const __WCHAR_MAX__: int = 65535
export const __WCHAR_WIDTH__: int = 16
export const __WINT_MAX__: int = 65535
export const __WINT_WIDTH__: int = 16
export const __INTMAX_WIDTH__: int = 64
export const __SIZE_WIDTH__: int = 64
export const __UINTMAX_WIDTH__: int = 64
export const __PTRDIFF_WIDTH__: int = 64
export const __INTPTR_WIDTH__: int = 64
export const __UINTPTR_WIDTH__: int = 64
export const __SIZEOF_DOUBLE__: int = 8
export const __SIZEOF_FLOAT__: int = 4
export const __SIZEOF_INT__: int = 4
export const __SIZEOF_LONG__: int = 4
export const __SIZEOF_LONG_DOUBLE__: int = 8
export const __SIZEOF_LONG_LONG__: int = 8
export const __SIZEOF_POINTER__: int = 8
export const __SIZEOF_SHORT__: int = 2
export const __SIZEOF_PTRDIFF_T__: int = 8
export const __SIZEOF_SIZE_T__: int = 8
export const __SIZEOF_WCHAR_T__: int = 2
export const __SIZEOF_WINT_T__: int = 2
export const __SIZEOF_INT128__: int = 16
export const __INTMAX_FMTd__: [char] = "lld"
export const __INTMAX_FMTi__: [char] = "lli"
export const __UINTMAX_FMTo__: [char] = "llo"
export const __UINTMAX_FMTu__: [char] = "llu"
export const __UINTMAX_FMTx__: [char] = "llx"
export const __UINTMAX_FMTX__: [char] = "llX"
export const __PTRDIFF_FMTd__: [char] = "lld"
export const __PTRDIFF_FMTi__: [char] = "lli"
export const __INTPTR_FMTd__: [char] = "lld"
export const __INTPTR_FMTi__: [char] = "lli"
export const __SIZE_FMTo__: [char] = "llo"
export const __SIZE_FMTu__: [char] = "llu"
export const __SIZE_FMTx__: [char] = "llx"
export const __SIZE_FMTX__: [char] = "llX"
export const __SIG_ATOMIC_MAX__: int = 2147483647
export const __SIG_ATOMIC_WIDTH__: int = 32
export const __UINTPTR_FMTo__: [char] = "llo"
export const __UINTPTR_FMTu__: [char] = "llu"
export const __UINTPTR_FMTx__: [char] = "llx"
export const __UINTPTR_FMTX__: [char] = "llX"
export const __FLT16_HAS_DENORM__: int = 1
export const __FLT16_DIG__: int = 3
export const __FLT16_DECIMAL_DIG__: int = 5
export const __FLT16_HAS_INFINITY__: int = 1
export const __FLT16_HAS_QUIET_NAN__: int = 1
export const __FLT16_MANT_DIG__: int = 11
export const __FLT16_MAX_10_EXP__: int = 4
export const __FLT16_MAX_EXP__: int = 16
export const __FLT_HAS_DENORM__: int = 1
export const __FLT_DIG__: int = 6
export const __FLT_DECIMAL_DIG__: int = 9
export const __FLT_HAS_INFINITY__: int = 1
export const __FLT_HAS_QUIET_NAN__: int = 1
export const __FLT_MANT_DIG__: int = 24
export const __FLT_MAX_10_EXP__: int = 38
export const __FLT_MAX_EXP__: int = 128
export const __DBL_DENORM_MIN__: double = 4.9406564584124654e-324
export const __DBL_HAS_DENORM__: int = 1
export const __DBL_DIG__: int = 15
export const __DBL_DECIMAL_DIG__: int = 17
export const __DBL_EPSILON__: double = 2.2204460492503131e-16
export const __DBL_HAS_INFINITY__: int = 1
export const __DBL_HAS_QUIET_NAN__: int = 1
export const __DBL_MANT_DIG__: int = 53
export const __DBL_MAX_10_EXP__: int = 308
export const __DBL_MAX_EXP__: int = 1024
export const __DBL_MAX__: double = 1.7976931348623157e+308
export const __DBL_MIN__: double = 2.2250738585072014e-308
export const __LDBL_HAS_DENORM__: int = 1
export const __LDBL_DIG__: int = 15
export const __LDBL_DECIMAL_DIG__: int = 17
export const __LDBL_HAS_INFINITY__: int = 1
export const __LDBL_HAS_QUIET_NAN__: int = 1
export const __LDBL_MANT_DIG__: int = 53
export const __LDBL_MAX_10_EXP__: int = 308
export const __LDBL_MAX_EXP__: int = 1024
export const __POINTER_WIDTH__: int = 64
export const __BIGGEST_ALIGNMENT__: int = 16
export const __WCHAR_UNSIGNED__: int = 1
export const __WINT_UNSIGNED__: int = 1
export const __INT8_FMTd__: [char] = "hhd"
export const __INT8_FMTi__: [char] = "hhi"
export const __INT16_FMTd__: [char] = "hd"
export const __INT16_FMTi__: [char] = "hi"
export const __INT32_FMTd__: [char] = "d"
export const __INT32_FMTi__: [char] = "i"
export const __INT64_FMTd__: [char] = "lld"
export const __INT64_FMTi__: [char] = "lli"
export const __UINT8_FMTo__: [char] = "hho"
export const __UINT8_FMTu__: [char] = "hhu"
export const __UINT8_FMTx__: [char] = "hhx"
export const __UINT8_FMTX__: [char] = "hhX"
export const __UINT8_MAX__: int = 255
export const __INT8_MAX__: int = 127
export const __UINT16_FMTo__: [char] = "ho"
export const __UINT16_FMTu__: [char] = "hu"
export const __UINT16_FMTx__: [char] = "hx"
export const __UINT16_FMTX__: [char] = "hX"
export const __UINT16_MAX__: int = 65535
export const __INT16_MAX__: int = 32767
export const __UINT32_FMTo__: [char] = "o"
export const __UINT32_FMTu__: [char] = "u"
export const __UINT32_FMTx__: [char] = "x"
export const __UINT32_FMTX__: [char] = "X"
export const __INT32_MAX__: int = 2147483647
export const __UINT64_FMTo__: [char] = "llo"
export const __UINT64_FMTu__: [char] = "llu"
export const __UINT64_FMTx__: [char] = "llx"
export const __UINT64_FMTX__: [char] = "llX"
export const __INT_LEAST8_MAX__: int = 127
export const __INT_LEAST8_WIDTH__: int = 8
export const __INT_LEAST8_FMTd__: [char] = "hhd"
export const __INT_LEAST8_FMTi__: [char] = "hhi"
export const __UINT_LEAST8_MAX__: int = 255
export const __UINT_LEAST8_FMTo__: [char] = "hho"
export const __UINT_LEAST8_FMTu__: [char] = "hhu"
export const __UINT_LEAST8_FMTx__: [char] = "hhx"
export const __UINT_LEAST8_FMTX__: [char] = "hhX"
export const __INT_LEAST16_MAX__: int = 32767
export const __INT_LEAST16_WIDTH__: int = 16
export const __INT_LEAST16_FMTd__: [char] = "hd"
export const __INT_LEAST16_FMTi__: [char] = "hi"
export const __UINT_LEAST16_MAX__: int = 65535
export const __UINT_LEAST16_FMTo__: [char] = "ho"
export const __UINT_LEAST16_FMTu__: [char] = "hu"
export const __UINT_LEAST16_FMTx__: [char] = "hx"
export const __UINT_LEAST16_FMTX__: [char] = "hX"
export const __INT_LEAST32_MAX__: int = 2147483647
export const __INT_LEAST32_WIDTH__: int = 32
export const __INT_LEAST32_FMTd__: [char] = "d"
export const __INT_LEAST32_FMTi__: [char] = "i"
export const __UINT_LEAST32_FMTo__: [char] = "o"
export const __UINT_LEAST32_FMTu__: [char] = "u"
export const __UINT_LEAST32_FMTx__: [char] = "x"
export const __UINT_LEAST32_FMTX__: [char] = "X"
export const __INT_LEAST64_WIDTH__: int = 64
export const __INT_LEAST64_FMTd__: [char] = "lld"
export const __INT_LEAST64_FMTi__: [char] = "lli"
export const __UINT_LEAST64_FMTo__: [char] = "llo"
export const __UINT_LEAST64_FMTu__: [char] = "llu"
export const __UINT_LEAST64_FMTx__: [char] = "llx"
export const __UINT_LEAST64_FMTX__: [char] = "llX"
export const __INT_FAST8_MAX__: int = 127
export const __INT_FAST8_WIDTH__: int = 8
export const __INT_FAST8_FMTd__: [char] = "hhd"
export const __INT_FAST8_FMTi__: [char] = "hhi"
export const __UINT_FAST8_MAX__: int = 255
export const __UINT_FAST8_FMTo__: [char] = "hho"
export const __UINT_FAST8_FMTu__: [char] = "hhu"
export const __UINT_FAST8_FMTx__: [char] = "hhx"
export const __UINT_FAST8_FMTX__: [char] = "hhX"
export const __INT_FAST16_MAX__: int = 32767
export const __INT_FAST16_WIDTH__: int = 16
export const __INT_FAST16_FMTd__: [char] = "hd"
export const __INT_FAST16_FMTi__: [char] = "hi"
export const __UINT_FAST16_MAX__: int = 65535
export const __UINT_FAST16_FMTo__: [char] = "ho"
export const __UINT_FAST16_FMTu__: [char] = "hu"
export const __UINT_FAST16_FMTx__: [char] = "hx"
export const __UINT_FAST16_FMTX__: [char] = "hX"
export const __INT_FAST32_MAX__: int = 2147483647
export const __INT_FAST32_WIDTH__: int = 32
export const __INT_FAST32_FMTd__: [char] = "d"
export const __INT_FAST32_FMTi__: [char] = "i"
export const __UINT_FAST32_FMTo__: [char] = "o"
export const __UINT_FAST32_FMTu__: [char] = "u"
export const __UINT_FAST32_FMTx__: [char] = "x"
export const __UINT_FAST32_FMTX__: [char] = "X"
export const __INT_FAST64_WIDTH__: int = 64
export const __INT_FAST64_FMTd__: [char] = "lld"
export const __INT_FAST64_FMTi__: [char] = "lli"
export const __UINT_FAST64_FMTo__: [char] = "llo"
export const __UINT_FAST64_FMTu__: [char] = "llu"
export const __UINT_FAST64_FMTx__: [char] = "llx"
export const __UINT_FAST64_FMTX__: [char] = "llX"
export const __FINITE_MATH_ONLY__: int = 0
export const __CLANG_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_INT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __NO_INLINE__: int = 1
export const __PIC__: int = 2
export const __pic__: int = 2
export const __FLT_RADIX__: int = 2
export const __GCC_ASM_FLAG_OUTPUTS__: int = 1
export const __code_model_small__: int = 1
export const __amd64__: int = 1
export const __amd64: int = 1
export const __x86_64: int = 1
export const __x86_64__: int = 1
export const __SEG_GS: int = 1
export const __SEG_FS: int = 1
export const __k8: int = 1
export const __k8__: int = 1
export const __tune_k8__: int = 1
export const __NO_MATH_INLINES: int = 1
export const __FXSR__: int = 1
export const __SSE2__: int = 1
export const __SSE2_MATH__: int = 1
export const __SSE__: int = 1
export const __SSE_MATH__: int = 1
export const __MMX__: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: int = 1
export const _WIN32: int = 1
export const _WIN64: int = 1
export const _M_FP_CONTRACT: int = 1
export const _M_FP_PRECISE: int = 1
export const _MSC_VER: int = 1936
export const _MSC_FULL_VER: int = 193632537
export const _MSC_BUILD: int = 1
export const _MSC_EXTENSIONS: int = 1
export const _ISO_VOLATILE: int = 1
export const _INTEGRAL_MAX_BITS: int = 64
export const __STDC_NO_THREADS__: int = 1
export const _MSVC_EXECUTION_CHARACTER_SET: int = 65001
export const _M_X64: int = 100
export const _M_AMD64: int = 100
export const __STDC_HOSTED__: int = 1
export const __STDC_UTF_16__: int = 1
export const __STDC_UTF_32__: int = 1
export const WINAPI_FAMILY_PC_APP: int = 2
export const WINAPI_FAMILY_PHONE_APP: int = 3
export const WINAPI_FAMILY_SYSTEM: int = 4
export const WINAPI_FAMILY_SERVER: int = 5
export const WINAPI_FAMILY_GAMES: int = 6
export const WINAPI_FAMILY_DESKTOP_APP: int = 100
export const _VCRT_COMPILER_PREPROCESSOR: int = 1
export const _SAL_VERSION: int = 20
export const __SAL_H_VERSION: int = 180000000
export const _USE_DECLSPECS_FOR_SAL: int = 0
export const _USE_ATTRIBUTES_FOR_SAL: int = 0
export const _CRT_PACKING: int = 8
export const _HAS_EXCEPTIONS: int = 1
export const _HAS_CXX17: int = 0
export const _HAS_CXX20: int = 0
export const _HAS_CXX23: int = 0
export const _HAS_NODISCARD: int = 0
export const EXCEPTION_EXECUTE_HANDLER: int = 1
export const EXCEPTION_CONTINUE_SEARCH: int = 0
export const __SAL_H_FULL_VER: int = 140050727
export const __SPECSTRINGS_STRICT_LEVEL: int = 1
export const __drv_typeConst: int = 0
export const __drv_typeCond: int = 1
export const __drv_typeBitset: int = 2
export const __drv_typeExpr: int = 3
export const STRICT: int = 1
export const MAX_PATH: int = 260
export const FALSE: int = 0
export const TRUE: int = 1
export const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: int = 1
export const _CRT_BUILD_DESKTOP_APP: int = 1
export const _ARGMAX: int = 100
export const _CRT_INT_MAX: int = 2147483647
export const _CRT_FUNCTIONS_REQUIRED: int = 1
export const _CRT_HAS_CXX17: int = 0
export const _CRT_HAS_C11: int = 1
export const _CRT_INTERNAL_NONSTDC_NAMES: int = 1
export const __STDC_WANT_SECURE_LIB__: int = 1
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: int = 1
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: int = 0
export const ANYSIZE_ARRAY: int = 1
export const DISPATCH_LEVEL: int = 2
export const APC_LEVEL: int = 1
export const PASSIVE_LEVEL: int = 0
export const HIGH_LEVEL: int = 15
export const MEMORY_ALLOCATION_ALIGNMENT: int = 16
export const X86_CACHE_ALIGNMENT_SIZE: int = 64
export const ARM_CACHE_ALIGNMENT_SIZE: int = 128
export const PRAGMA_DEPRECATED_DDK: int = 0
export const MAXIMUM_PROC_PER_GROUP: int = 64
export const EPERM: int = 1
export const ENOENT: int = 2
export const ESRCH: int = 3
export const EINTR: int = 4
export const EIO: int = 5
export const ENXIO: int = 6
export const E2BIG: int = 7
export const ENOEXEC: int = 8
export const EBADF: int = 9
export const ECHILD: int = 10
export const EAGAIN: int = 11
export const ENOMEM: int = 12
export const EACCES: int = 13
export const EFAULT: int = 14
export const EBUSY: int = 16
export const EEXIST: int = 17
export const EXDEV: int = 18
export const ENODEV: int = 19
export const ENOTDIR: int = 20
export const EISDIR: int = 21
export const ENFILE: int = 23
export const EMFILE: int = 24
export const ENOTTY: int = 25
export const EFBIG: int = 27
export const ENOSPC: int = 28
export const ESPIPE: int = 29
export const EROFS: int = 30
export const EMLINK: int = 31
export const EPIPE: int = 32
export const EDOM: int = 33
export const EDEADLK: int = 36
export const ENAMETOOLONG: int = 38
export const ENOLCK: int = 39
export const ENOSYS: int = 40
export const ENOTEMPTY: int = 41
export const EINVAL: int = 22
export const ERANGE: int = 34
export const EILSEQ: int = 42
export const STRUNCATE: int = 80
export const EADDRINUSE: int = 100
export const EADDRNOTAVAIL: int = 101
export const EAFNOSUPPORT: int = 102
export const EALREADY: int = 103
export const EBADMSG: int = 104
export const ECANCELED: int = 105
export const ECONNABORTED: int = 106
export const ECONNREFUSED: int = 107
export const ECONNRESET: int = 108
export const EDESTADDRREQ: int = 109
export const EHOSTUNREACH: int = 110
export const EIDRM: int = 111
export const EINPROGRESS: int = 112
export const EISCONN: int = 113
export const ELOOP: int = 114
export const EMSGSIZE: int = 115
export const ENETDOWN: int = 116
export const ENETRESET: int = 117
export const ENETUNREACH: int = 118
export const ENOBUFS: int = 119
export const ENODATA: int = 120
export const ENOLINK: int = 121
export const ENOMSG: int = 122
export const ENOPROTOOPT: int = 123
export const ENOSR: int = 124
export const ENOSTR: int = 125
export const ENOTCONN: int = 126
export const ENOTRECOVERABLE: int = 127
export const ENOTSOCK: int = 128
export const ENOTSUP: int = 129
export const EOPNOTSUPP: int = 130
export const EOTHER: int = 131
export const EOVERFLOW: int = 132
export const EOWNERDEAD: int = 133
export const EPROTO: int = 134
export const EPROTONOSUPPORT: int = 135
export const EPROTOTYPE: int = 136
export const ETIME: int = 137
export const ETIMEDOUT: int = 138
export const ETXTBSY: int = 139
export const EWOULDBLOCK: int = 140
export const ENCLAVE_SHORT_ID_LENGTH: int = 16
export const ENCLAVE_LONG_ID_LENGTH: int = 32
export const LOCALE_NAME_MAX_LENGTH: int = 85
export const MAXIMUM_WAIT_OBJECTS: int = 64
export const _MM_HINT_T0: int = 1
export const _MM_HINT_T1: int = 2
export const _MM_HINT_T2: int = 3
export const _MM_HINT_NTA: int = 0
export const EXCEPTION_READ_FAULT: int = 0
export const EXCEPTION_WRITE_FAULT: int = 1
export const EXCEPTION_EXECUTE_FAULT: int = 8
export const UNWIND_CHAIN_LIMIT: int = 32
export const OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME: [char] = "OutOfProcessFunctionTableCallback"
export const ARM64_MAX_BREAKPOINTS: int = 8
export const ARM64_MAX_WATCHPOINTS: int = 2
export const WOW64_SIZE_OF_80387_REGISTERS: int = 80
export const WOW64_MAXIMUM_SUPPORTED_EXTENSION: int = 512
export const EXCEPTION_MAXIMUM_PARAMETERS: int = 15
export const SID_HASH_SIZE: int = 32
export const SECURITY_TRUSTED_INSTALLER_RID1: int = 956008885
export const SECURITY_TRUSTED_INSTALLER_RID2: int = 3418522649
export const SECURITY_TRUSTED_INSTALLER_RID3: int = 1831038044
export const SECURITY_TRUSTED_INSTALLER_RID4: int = 1853292631
export const SECURITY_TRUSTED_INSTALLER_RID5: int = 2271478464
export const ACCESS_OBJECT_GUID: int = 0
export const ACCESS_PROPERTY_SET_GUID: int = 1
export const ACCESS_PROPERTY_GUID: int = 2
export const ACCESS_MAX_LEVEL: int = 4
export const ACCESS_DS_SOURCE_A: [char] = "DS"
export const ACCESS_DS_OBJECT_TYPE_NAME_A: [char] = "Directory Service Object"
export const TOKEN_SOURCE_LENGTH: int = 8
export const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1: int = 1
export const FLS_MAXIMUM_AVAILABLE: int = 4080
export const TLS_MINIMUM_AVAILABLE: int = 64
export const THREAD_DYNAMIC_CODE_ALLOW: int = 1
export const THREAD_BASE_PRIORITY_LOWRT: int = 15
export const THREAD_BASE_PRIORITY_MAX: int = 2
export const MEMORY_PRIORITY_LOWEST: int = 0
export const MEMORY_PRIORITY_VERY_LOW: int = 1
export const MEMORY_PRIORITY_LOW: int = 2
export const MEMORY_PRIORITY_MEDIUM: int = 3
export const MEMORY_PRIORITY_BELOW_NORMAL: int = 4
export const MEMORY_PRIORITY_NORMAL: int = 5
export const MAX_HW_COUNTERS: int = 16
export const JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG: int = 64
export const JOB_OBJECT_TERMINATE_AT_END_OF_JOB: int = 0
export const JOB_OBJECT_POST_AT_END_OF_JOB: int = 1
export const JOB_OBJECT_MSG_END_OF_JOB_TIME: int = 1
export const JOB_OBJECT_MSG_END_OF_PROCESS_TIME: int = 2
export const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT: int = 3
export const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO: int = 4
export const JOB_OBJECT_MSG_NEW_PROCESS: int = 6
export const JOB_OBJECT_MSG_EXIT_PROCESS: int = 7
export const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS: int = 8
export const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT: int = 9
export const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT: int = 10
export const JOB_OBJECT_MSG_NOTIFICATION_LIMIT: int = 11
export const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT: int = 12
export const JOB_OBJECT_MSG_SILO_TERMINATED: int = 13
export const JOB_OBJECT_MSG_MINIMUM: int = 1
export const JOB_OBJECT_MSG_MAXIMUM: int = 13
export const TIME_ZONE_ID_UNKNOWN: int = 0
export const TIME_ZONE_ID_STANDARD: int = 1
export const TIME_ZONE_ID_DAYLIGHT: int = 2
export const PROCESSOR_INTEL_386: int = 386
export const PROCESSOR_INTEL_486: int = 486
export const PROCESSOR_INTEL_PENTIUM: int = 586
export const PROCESSOR_INTEL_IA64: int = 2200
export const PROCESSOR_AMD_X8664: int = 8664
export const PROCESSOR_MIPS_R4000: int = 4000
export const PROCESSOR_ALPHA_21064: int = 21064
export const PROCESSOR_PPC_601: int = 601
export const PROCESSOR_PPC_603: int = 603
export const PROCESSOR_PPC_604: int = 604
export const PROCESSOR_PPC_620: int = 620
export const PROCESSOR_HITACHI_SH3: int = 10003
export const PROCESSOR_HITACHI_SH3E: int = 10004
export const PROCESSOR_HITACHI_SH4: int = 10005
export const PROCESSOR_MOTOROLA_821: int = 821
export const PROCESSOR_SHx_SH3: int = 103
export const PROCESSOR_SHx_SH4: int = 104
export const PROCESSOR_STRONGARM: int = 2577
export const PROCESSOR_ARM720: int = 1824
export const PROCESSOR_ARM820: int = 2080
export const PROCESSOR_ARM920: int = 2336
export const PROCESSOR_ARM_7TDMI: int = 70001
export const PROCESSOR_ARCHITECTURE_INTEL: int = 0
export const PROCESSOR_ARCHITECTURE_MIPS: int = 1
export const PROCESSOR_ARCHITECTURE_ALPHA: int = 2
export const PROCESSOR_ARCHITECTURE_PPC: int = 3
export const PROCESSOR_ARCHITECTURE_SHX: int = 4
export const PROCESSOR_ARCHITECTURE_ARM: int = 5
export const PROCESSOR_ARCHITECTURE_IA64: int = 6
export const PROCESSOR_ARCHITECTURE_ALPHA64: int = 7
export const PROCESSOR_ARCHITECTURE_MSIL: int = 8
export const PROCESSOR_ARCHITECTURE_AMD64: int = 9
export const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64: int = 10
export const PROCESSOR_ARCHITECTURE_NEUTRAL: int = 11
export const PROCESSOR_ARCHITECTURE_ARM64: int = 12
export const PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64: int = 13
export const PROCESSOR_ARCHITECTURE_IA32_ON_ARM64: int = 14
export const PF_FLOATING_POINT_PRECISION_ERRATA: int = 0
export const PF_FLOATING_POINT_EMULATED: int = 1
export const PF_COMPARE_EXCHANGE_DOUBLE: int = 2
export const PF_MMX_INSTRUCTIONS_AVAILABLE: int = 3
export const PF_PPC_MOVEMEM_64BIT_OK: int = 4
export const PF_ALPHA_BYTE_INSTRUCTIONS: int = 5
export const PF_XMMI_INSTRUCTIONS_AVAILABLE: int = 6
export const PF_3DNOW_INSTRUCTIONS_AVAILABLE: int = 7
export const PF_RDTSC_INSTRUCTION_AVAILABLE: int = 8
export const PF_PAE_ENABLED: int = 9
export const PF_XMMI64_INSTRUCTIONS_AVAILABLE: int = 10
export const PF_SSE_DAZ_MODE_AVAILABLE: int = 11
export const PF_NX_ENABLED: int = 12
export const PF_SSE3_INSTRUCTIONS_AVAILABLE: int = 13
export const PF_COMPARE_EXCHANGE128: int = 14
export const PF_COMPARE64_EXCHANGE128: int = 15
export const PF_CHANNELS_ENABLED: int = 16
export const PF_XSAVE_ENABLED: int = 17
export const PF_ARM_VFP_32_REGISTERS_AVAILABLE: int = 18
export const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE: int = 19
export const PF_SECOND_LEVEL_ADDRESS_TRANSLATION: int = 20
export const PF_VIRT_FIRMWARE_ENABLED: int = 21
export const PF_RDWRFSGSBASE_AVAILABLE: int = 22
export const PF_FASTFAIL_AVAILABLE: int = 23
export const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE: int = 24
export const PF_ARM_64BIT_LOADSTORE_ATOMIC: int = 25
export const PF_ARM_EXTERNAL_CACHE_AVAILABLE: int = 26
export const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE: int = 27
export const PF_RDRAND_INSTRUCTION_AVAILABLE: int = 28
export const PF_ARM_V8_INSTRUCTIONS_AVAILABLE: int = 29
export const PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE: int = 30
export const PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE: int = 31
export const PF_RDTSCP_INSTRUCTION_AVAILABLE: int = 32
export const PF_RDPID_INSTRUCTION_AVAILABLE: int = 33
export const PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE: int = 34
export const PF_MONITORX_INSTRUCTION_AVAILABLE: int = 35
export const PF_SSSE3_INSTRUCTIONS_AVAILABLE: int = 36
export const PF_SSE4_1_INSTRUCTIONS_AVAILABLE: int = 37
export const PF_SSE4_2_INSTRUCTIONS_AVAILABLE: int = 38
export const PF_AVX_INSTRUCTIONS_AVAILABLE: int = 39
export const PF_AVX2_INSTRUCTIONS_AVAILABLE: int = 40
export const PF_AVX512F_INSTRUCTIONS_AVAILABLE: int = 41
export const PF_ERMS_AVAILABLE: int = 42
export const PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE: int = 43
export const PF_ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE: int = 44
export const PF_ARM_V83_LRCPC_INSTRUCTIONS_AVAILABLE: int = 45
export const MEM_EXTENDED_PARAMETER_TYPE_BITS: int = 8
export const FILE_NAME_FLAG_HARDLINK: int = 0
export const SMB_CCF_APP_INSTANCE_EA_NAME: [char] = "ClusteredApplicationInstance"
export const POWERBUTTON_ACTION_INDEX_NOTHING: int = 0
export const POWERBUTTON_ACTION_INDEX_SLEEP: int = 1
export const POWERBUTTON_ACTION_INDEX_HIBERNATE: int = 2
export const POWERBUTTON_ACTION_INDEX_SHUTDOWN: int = 3
export const POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY: int = 4
export const POWERBUTTON_ACTION_VALUE_NOTHING: int = 0
export const POWERBUTTON_ACTION_VALUE_SLEEP: int = 2
export const POWERBUTTON_ACTION_VALUE_HIBERNATE: int = 3
export const POWERBUTTON_ACTION_VALUE_SHUTDOWN: int = 6
export const POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY: int = 8
export const PERFSTATE_POLICY_CHANGE_IDEAL: int = 0
export const PERFSTATE_POLICY_CHANGE_SINGLE: int = 1
export const PERFSTATE_POLICY_CHANGE_ROCKET: int = 2
export const PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE: int = 3
export const PROCESSOR_THROTTLE_DISABLED: int = 0
export const PROCESSOR_THROTTLE_ENABLED: int = 1
export const PROCESSOR_THROTTLE_AUTOMATIC: int = 2
export const PROCESSOR_PERF_BOOST_POLICY_DISABLED: int = 0
export const PROCESSOR_PERF_BOOST_POLICY_MAX: int = 100
export const PROCESSOR_PERF_BOOST_MODE_DISABLED: int = 0
export const PROCESSOR_PERF_BOOST_MODE_ENABLED: int = 1
export const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE: int = 2
export const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED: int = 3
export const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE: int = 4
export const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED: int = 5
export const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED: int = 6
export const PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED: int = 0
export const PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED: int = 1
export const PROCESSOR_PERF_ENERGY_PREFERENCE: int = 0
export const PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW: int = 0
export const PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW: int = 1270000000
export const PROCESSOR_DUTY_CYCLING_DISABLED: int = 0
export const PROCESSOR_DUTY_CYCLING_ENABLED: int = 1
export const CORE_PARKING_POLICY_CHANGE_IDEAL: int = 0
export const CORE_PARKING_POLICY_CHANGE_SINGLE: int = 1
export const CORE_PARKING_POLICY_CHANGE_ROCKET: int = 2
export const CORE_PARKING_POLICY_CHANGE_MULTISTEP: int = 3
export const PARKING_TOPOLOGY_POLICY_DISABLED: int = 0
export const PARKING_TOPOLOGY_POLICY_ROUNDROBIN: int = 1
export const PARKING_TOPOLOGY_POLICY_SEQUENTIAL: int = 2
export const SMT_UNPARKING_POLICY_CORE: int = 0
export const SMT_UNPARKING_POLICY_CORE_PER_THREAD: int = 1
export const SMT_UNPARKING_POLICY_LP_ROUNDROBIN: int = 2
export const SMT_UNPARKING_POLICY_LP_SEQUENTIAL: int = 3
export const POWER_DEVICE_IDLE_POLICY_PERFORMANCE: int = 0
export const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE: int = 1
export const POWER_CONNECTIVITY_IN_STANDBY_DISABLED: int = 0
export const POWER_CONNECTIVITY_IN_STANDBY_ENABLED: int = 1
export const POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED: int = 2
export const POWER_DISCONNECTED_STANDBY_MODE_NORMAL: int = 0
export const POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE: int = 1
export const POWER_SYSTEM_MAXIMUM: int = 7
export const DIAGNOSTIC_REASON_VERSION: int = 0
export const PROC_IDLE_BUCKET_COUNT: int = 6
export const PROC_IDLE_BUCKET_COUNT_EX: int = 16
export const NUM_DISCHARGE_POLICIES: int = 4
export const DISCHARGE_POLICY_CRITICAL: int = 0
export const DISCHARGE_POLICY_LOW: int = 1
export const PO_THROTTLE_NONE: int = 0
export const PO_THROTTLE_CONSTANT: int = 1
export const PO_THROTTLE_DEGRADE: int = 2
export const PO_THROTTLE_ADAPTIVE: int = 3
export const PO_THROTTLE_MAXIMUM: int = 4
export const IMAGE_SIZEOF_FILE_HEADER: int = 20
export const IMAGE_FILE_MACHINE_UNKNOWN: int = 0
export const IMAGE_NUMBEROF_DIRECTORY_ENTRIES: int = 16
export const IMAGE_SUBSYSTEM_UNKNOWN: int = 0
export const IMAGE_SUBSYSTEM_NATIVE: int = 1
export const IMAGE_SUBSYSTEM_WINDOWS_GUI: int = 2
export const IMAGE_SUBSYSTEM_WINDOWS_CUI: int = 3
export const IMAGE_SUBSYSTEM_OS2_CUI: int = 5
export const IMAGE_SUBSYSTEM_POSIX_CUI: int = 7
export const IMAGE_SUBSYSTEM_NATIVE_WINDOWS: int = 8
export const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: int = 9
export const IMAGE_SUBSYSTEM_EFI_APPLICATION: int = 10
export const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: int = 11
export const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: int = 12
export const IMAGE_SUBSYSTEM_EFI_ROM: int = 13
export const IMAGE_SUBSYSTEM_XBOX: int = 14
export const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION: int = 16
export const IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG: int = 17
export const IMAGE_DIRECTORY_ENTRY_EXPORT: int = 0
export const IMAGE_DIRECTORY_ENTRY_IMPORT: int = 1
export const IMAGE_DIRECTORY_ENTRY_RESOURCE: int = 2
export const IMAGE_DIRECTORY_ENTRY_EXCEPTION: int = 3
export const IMAGE_DIRECTORY_ENTRY_SECURITY: int = 4
export const IMAGE_DIRECTORY_ENTRY_BASERELOC: int = 5
export const IMAGE_DIRECTORY_ENTRY_DEBUG: int = 6
export const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE: int = 7
export const IMAGE_DIRECTORY_ENTRY_GLOBALPTR: int = 8
export const IMAGE_DIRECTORY_ENTRY_TLS: int = 9
export const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG: int = 10
export const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT: int = 11
export const IMAGE_DIRECTORY_ENTRY_IAT: int = 12
export const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT: int = 13
export const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR: int = 14
export const IMAGE_SIZEOF_SHORT_NAME: int = 8
export const IMAGE_SIZEOF_SECTION_HEADER: int = 40
export const IMAGE_SIZEOF_SYMBOL: int = 18
export const IMAGE_SYM_DTYPE_NULL: int = 0
export const IMAGE_SYM_DTYPE_POINTER: int = 1
export const IMAGE_SYM_DTYPE_FUNCTION: int = 2
export const IMAGE_SYM_DTYPE_ARRAY: int = 3
export const N_BTSHFT: int = 4
export const N_TSHIFT: int = 2
export const IMAGE_COMDAT_SELECT_NODUPLICATES: int = 1
export const IMAGE_COMDAT_SELECT_ANY: int = 2
export const IMAGE_COMDAT_SELECT_SAME_SIZE: int = 3
export const IMAGE_COMDAT_SELECT_EXACT_MATCH: int = 4
export const IMAGE_COMDAT_SELECT_ASSOCIATIVE: int = 5
export const IMAGE_COMDAT_SELECT_LARGEST: int = 6
export const IMAGE_COMDAT_SELECT_NEWEST: int = 7
export const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY: int = 1
export const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY: int = 2
export const IMAGE_WEAK_EXTERN_SEARCH_ALIAS: int = 3
export const IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY: int = 4
export const EMARCH_ENC_I17_IMM7B_INST_WORD_X: int = 3
export const EMARCH_ENC_I17_IMM7B_SIZE_X: int = 7
export const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X: int = 4
export const EMARCH_ENC_I17_IMM7B_VAL_POS_X: int = 0
export const EMARCH_ENC_I17_IMM9D_INST_WORD_X: int = 3
export const EMARCH_ENC_I17_IMM9D_SIZE_X: int = 9
export const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X: int = 18
export const EMARCH_ENC_I17_IMM9D_VAL_POS_X: int = 7
export const EMARCH_ENC_I17_IMM5C_INST_WORD_X: int = 3
export const EMARCH_ENC_I17_IMM5C_SIZE_X: int = 5
export const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X: int = 13
export const EMARCH_ENC_I17_IMM5C_VAL_POS_X: int = 16
export const EMARCH_ENC_I17_IC_INST_WORD_X: int = 3
export const EMARCH_ENC_I17_IC_SIZE_X: int = 1
export const EMARCH_ENC_I17_IC_INST_WORD_POS_X: int = 12
export const EMARCH_ENC_I17_IC_VAL_POS_X: int = 21
export const EMARCH_ENC_I17_IMM41a_INST_WORD_X: int = 1
export const EMARCH_ENC_I17_IMM41a_SIZE_X: int = 10
export const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X: int = 14
export const EMARCH_ENC_I17_IMM41a_VAL_POS_X: int = 22
export const EMARCH_ENC_I17_IMM41b_INST_WORD_X: int = 1
export const EMARCH_ENC_I17_IMM41b_SIZE_X: int = 8
export const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X: int = 24
export const EMARCH_ENC_I17_IMM41b_VAL_POS_X: int = 32
export const EMARCH_ENC_I17_IMM41c_INST_WORD_X: int = 2
export const EMARCH_ENC_I17_IMM41c_SIZE_X: int = 23
export const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X: int = 0
export const EMARCH_ENC_I17_IMM41c_VAL_POS_X: int = 40
export const EMARCH_ENC_I17_SIGN_INST_WORD_X: int = 3
export const EMARCH_ENC_I17_SIGN_SIZE_X: int = 1
export const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X: int = 27
export const EMARCH_ENC_I17_SIGN_VAL_POS_X: int = 63
export const X3_OPCODE_INST_WORD_X: int = 3
export const X3_OPCODE_SIZE_X: int = 4
export const X3_OPCODE_INST_WORD_POS_X: int = 28
export const X3_OPCODE_SIGN_VAL_POS_X: int = 0
export const X3_I_INST_WORD_X: int = 3
export const X3_I_SIZE_X: int = 1
export const X3_I_INST_WORD_POS_X: int = 27
export const X3_I_SIGN_VAL_POS_X: int = 59
export const X3_D_WH_INST_WORD_X: int = 3
export const X3_D_WH_SIZE_X: int = 3
export const X3_D_WH_INST_WORD_POS_X: int = 24
export const X3_D_WH_SIGN_VAL_POS_X: int = 0
export const X3_IMM20_INST_WORD_X: int = 3
export const X3_IMM20_SIZE_X: int = 20
export const X3_IMM20_INST_WORD_POS_X: int = 4
export const X3_IMM20_SIGN_VAL_POS_X: int = 0
export const X3_IMM39_1_INST_WORD_X: int = 2
export const X3_IMM39_1_SIZE_X: int = 23
export const X3_IMM39_1_INST_WORD_POS_X: int = 0
export const X3_IMM39_1_SIGN_VAL_POS_X: int = 36
export const X3_IMM39_2_INST_WORD_X: int = 1
export const X3_IMM39_2_SIZE_X: int = 16
export const X3_IMM39_2_INST_WORD_POS_X: int = 16
export const X3_IMM39_2_SIGN_VAL_POS_X: int = 20
export const X3_P_INST_WORD_X: int = 3
export const X3_P_SIZE_X: int = 4
export const X3_P_INST_WORD_POS_X: int = 0
export const X3_P_SIGN_VAL_POS_X: int = 0
export const X3_TMPLT_INST_WORD_X: int = 0
export const X3_TMPLT_SIZE_X: int = 4
export const X3_TMPLT_INST_WORD_POS_X: int = 0
export const X3_TMPLT_SIGN_VAL_POS_X: int = 0
export const X3_BTYPE_QP_INST_WORD_X: int = 2
export const X3_BTYPE_QP_SIZE_X: int = 9
export const X3_BTYPE_QP_INST_WORD_POS_X: int = 23
export const X3_BTYPE_QP_INST_VAL_POS_X: int = 0
export const X3_EMPTY_INST_WORD_X: int = 1
export const X3_EMPTY_SIZE_X: int = 2
export const X3_EMPTY_INST_WORD_POS_X: int = 14
export const X3_EMPTY_INST_VAL_POS_X: int = 0
export const IMAGE_REL_BASED_ABSOLUTE: int = 0
export const IMAGE_REL_BASED_HIGH: int = 1
export const IMAGE_REL_BASED_LOW: int = 2
export const IMAGE_REL_BASED_HIGHLOW: int = 3
export const IMAGE_REL_BASED_HIGHADJ: int = 4
export const IMAGE_REL_BASED_MACHINE_SPECIFIC_5: int = 5
export const IMAGE_REL_BASED_RESERVED: int = 6
export const IMAGE_REL_BASED_MACHINE_SPECIFIC_7: int = 7
export const IMAGE_REL_BASED_MACHINE_SPECIFIC_8: int = 8
export const IMAGE_REL_BASED_MACHINE_SPECIFIC_9: int = 9
export const IMAGE_REL_BASED_DIR64: int = 10
export const IMAGE_REL_BASED_IA64_IMM64: int = 9
export const IMAGE_REL_BASED_MIPS_JMPADDR: int = 5
export const IMAGE_REL_BASED_MIPS_JMPADDR16: int = 9
export const IMAGE_REL_BASED_ARM_MOV32: int = 5
export const IMAGE_REL_BASED_THUMB_MOV32: int = 7
export const IMAGE_ARCHIVE_START_SIZE: int = 8
export const IMAGE_ARCHIVE_START: [char] = "!<arch>\n"
export const IMAGE_ARCHIVE_END: [char] = "`\n"
export const IMAGE_ARCHIVE_PAD: [char] = "\n"
export const IMAGE_ARCHIVE_LINKER_MEMBER: [char] = "/               "
export const IMAGE_ARCHIVE_LONGNAMES_MEMBER: [char] = "//              "
export const IMAGE_ARCHIVE_HYBRIDMAP_MEMBER: [char] = "/<HYBRIDMAP>/   "
export const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR: int = 60
export const IMAGE_FUNCTION_OVERRIDE_INVALID: int = 0
export const IMAGE_FUNCTION_OVERRIDE_X64_REL32: int = 1
export const IMAGE_FUNCTION_OVERRIDE_ARM64_BRANCH26: int = 2
export const IMAGE_FUNCTION_OVERRIDE_ARM64_THUNK: int = 3
export const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT: int = 28
export const IMAGE_DEBUG_TYPE_UNKNOWN: int = 0
export const IMAGE_DEBUG_TYPE_COFF: int = 1
export const IMAGE_DEBUG_TYPE_CODEVIEW: int = 2
export const IMAGE_DEBUG_TYPE_FPO: int = 3
export const IMAGE_DEBUG_TYPE_MISC: int = 4
export const IMAGE_DEBUG_TYPE_EXCEPTION: int = 5
export const IMAGE_DEBUG_TYPE_FIXUP: int = 6
export const IMAGE_DEBUG_TYPE_OMAP_TO_SRC: int = 7
export const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC: int = 8
export const IMAGE_DEBUG_TYPE_BORLAND: int = 9
export const IMAGE_DEBUG_TYPE_RESERVED10: int = 10
export const IMAGE_DEBUG_TYPE_CLSID: int = 11
export const IMAGE_DEBUG_TYPE_VC_FEATURE: int = 12
export const IMAGE_DEBUG_TYPE_POGO: int = 13
export const IMAGE_DEBUG_TYPE_ILTCG: int = 14
export const IMAGE_DEBUG_TYPE_MPX: int = 15
export const IMAGE_DEBUG_TYPE_REPRO: int = 16
export const IMAGE_DEBUG_TYPE_SPGO: int = 18
export const IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS: int = 20
export const FRAME_FPO: int = 0
export const FRAME_TRAP: int = 1
export const FRAME_TSS: int = 2
export const FRAME_NONFPO: int = 3
export const SIZEOF_RFPO_DATA: int = 16
export const IMAGE_DEBUG_MISC_EXENAME: int = 1
export const UNWIND_HISTORY_TABLE_SIZE: int = 12
export const RTL_RUN_ONCE_CTX_RESERVED_BITS: int = 2
export const FAST_FAIL_LEGACY_GS_VIOLATION: int = 0
export const FAST_FAIL_VTGUARD_CHECK_FAILURE: int = 1
export const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE: int = 2
export const FAST_FAIL_CORRUPT_LIST_ENTRY: int = 3
export const FAST_FAIL_INCORRECT_STACK: int = 4
export const FAST_FAIL_INVALID_ARG: int = 5
export const FAST_FAIL_GS_COOKIE_INIT: int = 6
export const FAST_FAIL_FATAL_APP_EXIT: int = 7
export const FAST_FAIL_RANGE_CHECK_FAILURE: int = 8
export const FAST_FAIL_UNSAFE_REGISTRY_ACCESS: int = 9
export const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE: int = 10
export const FAST_FAIL_GUARD_WRITE_CHECK_FAILURE: int = 11
export const FAST_FAIL_INVALID_FIBER_SWITCH: int = 12
export const FAST_FAIL_INVALID_SET_OF_CONTEXT: int = 13
export const FAST_FAIL_INVALID_REFERENCE_COUNT: int = 14
export const FAST_FAIL_INVALID_JUMP_BUFFER: int = 18
export const FAST_FAIL_MRDATA_MODIFIED: int = 19
export const FAST_FAIL_CERTIFICATION_FAILURE: int = 20
export const FAST_FAIL_INVALID_EXCEPTION_CHAIN: int = 21
export const FAST_FAIL_CRYPTO_LIBRARY: int = 22
export const FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT: int = 23
export const FAST_FAIL_INVALID_IMAGE_BASE: int = 24
export const FAST_FAIL_DLOAD_PROTECTION_FAILURE: int = 25
export const FAST_FAIL_UNSAFE_EXTENSION_CALL: int = 26
export const FAST_FAIL_DEPRECATED_SERVICE_INVOKED: int = 27
export const FAST_FAIL_INVALID_BUFFER_ACCESS: int = 28
export const FAST_FAIL_INVALID_BALANCED_TREE: int = 29
export const FAST_FAIL_INVALID_NEXT_THREAD: int = 30
export const FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED: int = 31
export const FAST_FAIL_APCS_DISABLED: int = 32
export const FAST_FAIL_INVALID_IDLE_STATE: int = 33
export const FAST_FAIL_MRDATA_PROTECTION_FAILURE: int = 34
export const FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION: int = 35
export const FAST_FAIL_INVALID_LOCK_STATE: int = 36
export const FAST_FAIL_GUARD_JUMPTABLE: int = 37
export const FAST_FAIL_INVALID_LONGJUMP_TARGET: int = 38
export const FAST_FAIL_INVALID_DISPATCH_CONTEXT: int = 39
export const FAST_FAIL_INVALID_THREAD: int = 40
export const FAST_FAIL_INVALID_SYSCALL_NUMBER: int = 41
export const FAST_FAIL_INVALID_FILE_OPERATION: int = 42
export const FAST_FAIL_LPAC_ACCESS_DENIED: int = 43
export const FAST_FAIL_GUARD_SS_FAILURE: int = 44
export const FAST_FAIL_LOADER_CONTINUITY_FAILURE: int = 45
export const FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE: int = 46
export const FAST_FAIL_INVALID_CONTROL_STACK: int = 47
export const FAST_FAIL_SET_CONTEXT_DENIED: int = 48
export const FAST_FAIL_INVALID_IAT: int = 49
export const FAST_FAIL_HEAP_METADATA_CORRUPTION: int = 50
export const FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION: int = 51
export const FAST_FAIL_LOW_LABEL_ACCESS_DENIED: int = 52
export const FAST_FAIL_ENCLAVE_CALL_FAILURE: int = 53
export const FAST_FAIL_UNHANDLED_LSS_EXCEPTON: int = 54
export const FAST_FAIL_ADMINLESS_ACCESS_DENIED: int = 55
export const FAST_FAIL_UNEXPECTED_CALL: int = 56
export const FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS: int = 57
export const FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR: int = 58
export const FAST_FAIL_FLAGS_CORRUPTION: int = 59
export const FAST_FAIL_VEH_CORRUPTION: int = 60
export const FAST_FAIL_ETW_CORRUPTION: int = 61
export const FAST_FAIL_RIO_ABORT: int = 62
export const FAST_FAIL_INVALID_PFN: int = 63
export const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE_XFG: int = 64
export const FAST_FAIL_CAST_GUARD: int = 65
export const FAST_FAIL_HOST_VISIBILITY_CHANGE: int = 66
export const FAST_FAIL_KERNEL_CET_SHADOW_STACK_ASSIST: int = 67
export const FAST_FAIL_PATCH_CALLBACK_FAILED: int = 68
export const FAST_FAIL_NTDLL_PATCH_FAILED: int = 69
export const FAST_FAIL_INVALID_FLS_DATA: int = 70
export const HEAP_TAG_SHIFT: int = 18
export const VER_EQUAL: int = 1
export const VER_GREATER: int = 2
export const VER_GREATER_EQUAL: int = 3
export const VER_LESS: int = 4
export const VER_LESS_EQUAL: int = 5
export const VER_AND: int = 6
export const VER_OR: int = 7
export const VER_CONDITION_MASK: int = 7
export const VER_NUM_BITS_PER_CONDITION_MASK: int = 3
export const VER_PLATFORM_WIN32s: int = 0
export const VER_PLATFORM_WIN32_WINDOWS: int = 1
export const VER_PLATFORM_WIN32_NT: int = 2
export const RTL_CORRELATION_VECTOR_STRING_LENGTH: int = 129
export const IMAGE_POLICY_METADATA_VERSION: int = 1
export const IMAGE_POLICY_SECTION_NAME: [char] = ".tPolicy"
export const HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION: int = 1
export const PERFORMANCE_DATA_VERSION: int = 1
export const DLL_PROCESS_ATTACH: int = 1
export const DLL_THREAD_ATTACH: int = 2
export const DLL_THREAD_DETACH: int = 3
export const DLL_PROCESS_DETACH: int = 0
export const MAXLOGICALLOGNAMESIZE: int = 256
export const REG_STANDARD_FORMAT: int = 1
export const REG_LATEST_FORMAT: int = 2
export const REG_NO_COMPRESSION: int = 4
export const REG_FORCE_UNLOAD: int = 1
export const KTM_MARSHAL_BLOB_VERSION_MAJOR: int = 1
export const KTM_MARSHAL_BLOB_VERSION_MINOR: int = 1
export const MAX_TRANSACTION_DESCRIPTION_LENGTH: int = 64
export const MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH: int = 64
export const APP_LOCAL_DEVICE_ID_SIZE: int = 32
export const DM_UPDATE: int = 1
export const DM_COPY: int = 2
export const DM_PROMPT: int = 4
export const DM_MODIFY: int = 8
export const DC_FIELDS: int = 1
export const DC_PAPERS: int = 2
export const DC_PAPERSIZE: int = 3
export const DC_MINEXTENT: int = 4
export const DC_MAXEXTENT: int = 5
export const DC_BINS: int = 6
export const DC_DUPLEX: int = 7
export const DC_SIZE: int = 8
export const DC_EXTRA: int = 9
export const DC_VERSION: int = 10
export const DC_DRIVER: int = 11
export const DC_BINNAMES: int = 12
export const DC_ENUMRESOLUTIONS: int = 13
export const DC_FILEDEPENDENCIES: int = 14
export const DC_TRUETYPE: int = 15
export const DC_PAPERNAMES: int = 16
export const DC_ORIENTATION: int = 17
export const DC_COPIES: int = 18
export const EXCEPTION_DEBUG_EVENT: int = 1
export const CREATE_THREAD_DEBUG_EVENT: int = 2
export const CREATE_PROCESS_DEBUG_EVENT: int = 3
export const EXIT_THREAD_DEBUG_EVENT: int = 4
export const EXIT_PROCESS_DEBUG_EVENT: int = 5
export const LOAD_DLL_DEBUG_EVENT: int = 6
export const UNLOAD_DLL_DEBUG_EVENT: int = 7
export const OUTPUT_DEBUG_STRING_EVENT: int = 8
export const RIP_EVENT: int = 9
export const CREATE_NEW: int = 1
export const CREATE_ALWAYS: int = 2
export const OPEN_EXISTING: int = 3
export const OPEN_ALWAYS: int = 4
export const TRUNCATE_EXISTING: int = 5
export const THREAD_POWER_THROTTLING_CURRENT_VERSION: int = 1
export const PME_CURRENT_VERSION: int = 1
export const PROCESS_POWER_THROTTLING_CURRENT_VERSION: int = 1
export const SUPPORT_LANG_NUMBER: int = 32
export const CURRENT_IMPORT_REDIRECTION_VERSION: int = 1
export const FILE_BEGIN: int = 0
export const FILE_CURRENT: int = 1
export const FILE_END: int = 2
export const PROGRESS_CONTINUE: int = 0
export const PROGRESS_CANCEL: int = 1
export const PROGRESS_STOP: int = 2
export const PROGRESS_QUIET: int = 3
export const PIPE_UNLIMITED_INSTANCES: int = 255
export const THREAD_PRIORITY_NORMAL: int = 0
export const DRIVE_UNKNOWN: int = 0
export const DRIVE_NO_ROOT_DIR: int = 1
export const DRIVE_REMOVABLE: int = 2
export const DRIVE_FIXED: int = 3
export const DRIVE_REMOTE: int = 4
export const DRIVE_CDROM: int = 5
export const DRIVE_RAMDISK: int = 6
export const NOPARITY: int = 0
export const ODDPARITY: int = 1
export const EVENPARITY: int = 2
export const MARKPARITY: int = 3
export const SPACEPARITY: int = 4
export const ONESTOPBIT: int = 0
export const ONE5STOPBITS: int = 1
export const TWOSTOPBITS: int = 2
export const IGNORE: int = 0
export const CBR_110: int = 110
export const CBR_300: int = 300
export const CBR_600: int = 600
export const CBR_1200: int = 1200
export const CBR_2400: int = 2400
export const CBR_4800: int = 4800
export const CBR_9600: int = 9600
export const CBR_14400: int = 14400
export const CBR_19200: int = 19200
export const CBR_38400: int = 38400
export const CBR_56000: int = 56000
export const CBR_57600: int = 57600
export const CBR_115200: int = 115200
export const CBR_128000: int = 128000
export const CBR_256000: int = 256000
export const SETXOFF: int = 1
export const SETXON: int = 2
export const SETRTS: int = 3
export const CLRRTS: int = 4
export const SETDTR: int = 5
export const CLRDTR: int = 6
export const RESETDEV: int = 7
export const SETBREAK: int = 8
export const CLRBREAK: int = 9
export const S_QUEUEEMPTY: int = 0
export const S_THRESHOLD: int = 1
export const S_ALLTHRESHOLD: int = 2
export const S_NORMAL: int = 0
export const S_LEGATO: int = 1
export const S_STACCATO: int = 2
export const S_PERIOD512: int = 0
export const S_PERIOD1024: int = 1
export const S_PERIOD2048: int = 2
export const S_PERIODVOICE: int = 3
export const S_WHITE512: int = 4
export const S_WHITE1024: int = 5
export const S_WHITE2048: int = 6
export const S_WHITEVOICE: int = 7
export const OFS_MAXPATHNAME: int = 128
export const SCS_32BIT_BINARY: int = 0
export const SCS_DOS_BINARY: int = 1
export const SCS_WOW_BINARY: int = 2
export const SCS_PIF_BINARY: int = 3
export const SCS_POSIX_BINARY: int = 4
export const SCS_OS216_BINARY: int = 5
export const SCS_64BIT_BINARY: int = 6
export const HINSTANCE_ERROR: int = 32
export const GET_TAPE_MEDIA_INFORMATION: int = 0
export const GET_TAPE_DRIVE_INFORMATION: int = 1
export const SET_TAPE_MEDIA_INFORMATION: int = 0
export const SET_TAPE_DRIVE_INFORMATION: int = 1
export const FILE_ENCRYPTABLE: int = 0
export const FILE_IS_ENCRYPTED: int = 1
export const FILE_SYSTEM_ATTR: int = 2
export const FILE_ROOT_DIR: int = 3
export const FILE_SYSTEM_DIR: int = 4
export const FILE_UNKNOWN: int = 5
export const FILE_SYSTEM_NOT_SUPPORT: int = 6
export const FILE_USER_DISALLOWED: int = 7
export const FILE_READ_ONLY: int = 8
export const FILE_DIR_DISALLOWED: int = 9
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A: [char] = "GetSystemWow64DirectoryA"
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A: [char] = "GetSystemWow64DirectoryW"
export const COPYFILE2_IO_CYCLE_SIZE_MIN: int = 4096
export const COPYFILE2_IO_RATE_MIN: int = 512
export const EVENTLOG_FULL_INFO: int = 0
export const OPERATION_API_VERSION: int = 1
export const MAX_COMPUTERNAME_LENGTH: int = 15
export const LOGON32_LOGON_INTERACTIVE: int = 2
export const LOGON32_LOGON_NETWORK: int = 3
export const LOGON32_LOGON_BATCH: int = 4
export const LOGON32_LOGON_SERVICE: int = 5
export const LOGON32_LOGON_UNLOCK: int = 7
export const LOGON32_LOGON_NETWORK_CLEARTEXT: int = 8
export const LOGON32_LOGON_NEW_CREDENTIALS: int = 9
export const LOGON32_PROVIDER_DEFAULT: int = 0
export const LOGON32_PROVIDER_WINNT35: int = 1
export const LOGON32_PROVIDER_WINNT40: int = 2
export const LOGON32_PROVIDER_WINNT50: int = 3
export const LOGON32_PROVIDER_VIRTUAL: int = 4
export const HW_PROFILE_GUIDLEN: int = 39
export const MAX_PROFILE_LEN: int = 80
export const FACILITY_NULL: int = 0
export const FACILITY_RPC: int = 1
export const FACILITY_DISPATCH: int = 2
export const FACILITY_STORAGE: int = 3
export const FACILITY_ITF: int = 4
export const FACILITY_WIN32: int = 7
export const FACILITY_WINDOWS: int = 8
export const FACILITY_SSPI: int = 9
export const FACILITY_SECURITY: int = 9
export const FACILITY_CONTROL: int = 10
export const FACILITY_CERT: int = 11
export const FACILITY_INTERNET: int = 12
export const FACILITY_MEDIASERVER: int = 13
export const FACILITY_MSMQ: int = 14
export const FACILITY_SETUPAPI: int = 15
export const FACILITY_SCARD: int = 16
export const FACILITY_COMPLUS: int = 17
export const FACILITY_AAF: int = 18
export const FACILITY_URT: int = 19
export const FACILITY_ACS: int = 20
export const FACILITY_DPLAY: int = 21
export const FACILITY_UMI: int = 22
export const FACILITY_SXS: int = 23
export const FACILITY_WINDOWS_CE: int = 24
export const FACILITY_HTTP: int = 25
export const FACILITY_USERMODE_COMMONLOG: int = 26
export const FACILITY_WER: int = 27
export const FACILITY_USERMODE_FILTER_MANAGER: int = 31
export const FACILITY_BACKGROUNDCOPY: int = 32
export const FACILITY_CONFIGURATION: int = 33
export const FACILITY_WIA: int = 33
export const FACILITY_STATE_MANAGEMENT: int = 34
export const FACILITY_METADIRECTORY: int = 35
export const FACILITY_WINDOWSUPDATE: int = 36
export const FACILITY_DIRECTORYSERVICE: int = 37
export const FACILITY_GRAPHICS: int = 38
export const FACILITY_SHELL: int = 39
export const FACILITY_NAP: int = 39
export const FACILITY_TPM_SERVICES: int = 40
export const FACILITY_TPM_SOFTWARE: int = 41
export const FACILITY_UI: int = 42
export const FACILITY_XAML: int = 43
export const FACILITY_ACTION_QUEUE: int = 44
export const FACILITY_PLA: int = 48
export const FACILITY_WINDOWS_SETUP: int = 48
export const FACILITY_FVE: int = 49
export const FACILITY_FWP: int = 50
export const FACILITY_WINRM: int = 51
export const FACILITY_NDIS: int = 52
export const FACILITY_USERMODE_HYPERVISOR: int = 53
export const FACILITY_CMI: int = 54
export const FACILITY_USERMODE_VIRTUALIZATION: int = 55
export const FACILITY_USERMODE_VOLMGR: int = 56
export const FACILITY_BCD: int = 57
export const FACILITY_USERMODE_VHD: int = 58
export const FACILITY_USERMODE_HNS: int = 59
export const FACILITY_SDIAG: int = 60
export const FACILITY_WEBSERVICES: int = 61
export const FACILITY_WINPE: int = 61
export const FACILITY_WPN: int = 62
export const FACILITY_WINDOWS_STORE: int = 63
export const FACILITY_INPUT: int = 64
export const FACILITY_QUIC: int = 65
export const FACILITY_EAP: int = 66
export const FACILITY_IORING: int = 70
export const FACILITY_WINDOWS_DEFENDER: int = 80
export const FACILITY_OPC: int = 81
export const FACILITY_XPS: int = 82
export const FACILITY_MBN: int = 84
export const FACILITY_POWERSHELL: int = 84
export const FACILITY_RAS: int = 83
export const FACILITY_P2P_INT: int = 98
export const FACILITY_P2P: int = 99
export const FACILITY_DAF: int = 100
export const FACILITY_BLUETOOTH_ATT: int = 101
export const FACILITY_AUDIO: int = 102
export const FACILITY_STATEREPOSITORY: int = 103
export const FACILITY_VISUALCPP: int = 109
export const FACILITY_SCRIPT: int = 112
export const FACILITY_PARSE: int = 113
export const FACILITY_BLB: int = 120
export const FACILITY_BLB_CLI: int = 121
export const FACILITY_WSBAPP: int = 122
export const FACILITY_BLBUI: int = 128
export const FACILITY_USN: int = 129
export const FACILITY_USERMODE_VOLSNAP: int = 130
export const FACILITY_TIERING: int = 131
export const FACILITY_WSB_ONLINE: int = 133
export const FACILITY_ONLINE_ID: int = 134
export const FACILITY_DEVICE_UPDATE_AGENT: int = 135
export const FACILITY_DRVSERVICING: int = 136
export const FACILITY_DLS: int = 153
export const FACILITY_DELIVERY_OPTIMIZATION: int = 208
export const FACILITY_USERMODE_SPACES: int = 231
export const FACILITY_USER_MODE_SECURITY_CORE: int = 232
export const FACILITY_USERMODE_LICENSING: int = 234
export const FACILITY_SOS: int = 160
export const FACILITY_OCP_UPDATE_AGENT: int = 173
export const FACILITY_DEBUGGERS: int = 176
export const FACILITY_SPP: int = 256
export const FACILITY_RESTORE: int = 256
export const FACILITY_DMSERVER: int = 256
export const FACILITY_DEPLOYMENT_SERVICES_SERVER: int = 257
export const FACILITY_DEPLOYMENT_SERVICES_IMAGING: int = 258
export const FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT: int = 259
export const FACILITY_DEPLOYMENT_SERVICES_UTIL: int = 260
export const FACILITY_DEPLOYMENT_SERVICES_BINLSVC: int = 261
export const FACILITY_DEPLOYMENT_SERVICES_PXE: int = 263
export const FACILITY_DEPLOYMENT_SERVICES_TFTP: int = 264
export const FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT: int = 272
export const FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING: int = 278
export const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER: int = 289
export const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT: int = 290
export const FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER: int = 293
export const FACILITY_HSP_SERVICES: int = 296
export const FACILITY_HSP_SOFTWARE: int = 297
export const FACILITY_LINGUISTIC_SERVICES: int = 305
export const FACILITY_AUDIOSTREAMING: int = 1094
export const FACILITY_TTD: int = 1490
export const FACILITY_ACCELERATOR: int = 1536
export const FACILITY_WMAAECMA: int = 1996
export const FACILITY_DIRECTMUSIC: int = 2168
export const FACILITY_DIRECT3D10: int = 2169
export const FACILITY_DXGI: int = 2170
export const FACILITY_DXGI_DDI: int = 2171
export const FACILITY_DIRECT3D11: int = 2172
export const FACILITY_DIRECT3D11_DEBUG: int = 2173
export const FACILITY_DIRECT3D12: int = 2174
export const FACILITY_DIRECT3D12_DEBUG: int = 2175
export const FACILITY_DXCORE: int = 2176
export const FACILITY_PRESENTATION: int = 2177
export const FACILITY_LEAP: int = 2184
export const FACILITY_AUDCLNT: int = 2185
export const FACILITY_WINCODEC_DWRITE_DWM: int = 2200
export const FACILITY_WINML: int = 2192
export const FACILITY_DIRECT2D: int = 2201
export const FACILITY_DEFRAG: int = 2304
export const FACILITY_USERMODE_SDBUS: int = 2305
export const FACILITY_JSCRIPT: int = 2306
export const FACILITY_PIDGENX: int = 2561
export const FACILITY_EAS: int = 85
export const FACILITY_WEB: int = 885
export const FACILITY_WEB_SOCKET: int = 886
export const FACILITY_MOBILE: int = 1793
export const FACILITY_SQLITE: int = 1967
export const FACILITY_SERVICE_FABRIC: int = 1968
export const FACILITY_UTC: int = 1989
export const FACILITY_WEP: int = 2049
export const FACILITY_SYNCENGINE: int = 2050
export const FACILITY_XBOX: int = 2339
export const FACILITY_GAME: int = 2340
export const FACILITY_PIX: int = 2748
export const DNS_ERROR_RESPONSE_CODES_BASE: int = 9000
export const DNS_ERROR_DNSSEC_BASE: int = 9100
export const DNS_ERROR_PACKET_FMT_BASE: int = 9500
export const DNS_ERROR_GENERAL_API_BASE: int = 9550
export const DNS_ERROR_ZONE_BASE: int = 9600
export const DNS_ERROR_DATAFILE_BASE: int = 9650
export const DNS_ERROR_DATABASE_BASE: int = 9700
export const DNS_ERROR_OPERATION_BASE: int = 9750
export const DNS_ERROR_SECURE_BASE: int = 9800
export const DNS_ERROR_SETUP_BASE: int = 9850
export const DNS_ERROR_DP_BASE: int = 9900
export const WSABASEERR: int = 10000
export const SEVERITY_SUCCESS: int = 0
export const SEVERITY_ERROR: int = 1
export const NOERROR: int = 0
export const NTE_OP_OK: int = 0
export const TC_NORMAL: int = 0
export const TC_HARDERR: int = 1
export const TC_GP_TRAP: int = 2
export const TC_SIGNAL: int = 3
export const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED: int = 1
export const RESTART_MAX_CMD_LINE: int = 1024
export const RESTART_NO_CRASH: int = 1
export const RESTART_NO_HANG: int = 2
export const RESTART_NO_PATCH: int = 4
export const RESTART_NO_REBOOT: int = 8
export const RECOVERY_DEFAULT_PING_INTERVAL: int = 5000
export const MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: int = 1
export const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: int = 0
export const R2_BLACK: int = 1
export const R2_NOTMERGEPEN: int = 2
export const R2_MASKNOTPEN: int = 3
export const R2_NOTCOPYPEN: int = 4
export const R2_MASKPENNOT: int = 5
export const R2_NOT: int = 6
export const R2_XORPEN: int = 7
export const R2_NOTMASKPEN: int = 8
export const R2_MASKPEN: int = 9
export const R2_NOTXORPEN: int = 10
export const R2_NOP: int = 11
export const R2_MERGENOTPEN: int = 12
export const R2_COPYPEN: int = 13
export const R2_MERGEPENNOT: int = 14
export const R2_MERGEPEN: int = 15
export const R2_WHITE: int = 16
export const R2_LAST: int = 16
export const ERROR: int = 0
export const NULLREGION: int = 1
export const SIMPLEREGION: int = 2
export const COMPLEXREGION: int = 3
export const RGN_AND: int = 1
export const RGN_OR: int = 2
export const RGN_XOR: int = 3
export const RGN_DIFF: int = 4
export const RGN_COPY: int = 5
export const BLACKONWHITE: int = 1
export const WHITEONBLACK: int = 2
export const COLORONCOLOR: int = 3
export const HALFTONE: int = 4
export const MAXSTRETCHBLTMODE: int = 4
export const ALTERNATE: int = 1
export const WINDING: int = 2
export const POLYFILL_LAST: int = 2
export const TA_NOUPDATECP: int = 0
export const TA_UPDATECP: int = 1
export const TA_LEFT: int = 0
export const TA_RIGHT: int = 2
export const TA_CENTER: int = 6
export const TA_TOP: int = 0
export const TA_BOTTOM: int = 8
export const TA_BASELINE: int = 24
export const TA_RTLREADING: int = 256
export const NEWFRAME: int = 1
export const ABORTDOC: int = 2
export const NEXTBAND: int = 3
export const SETCOLORTABLE: int = 4
export const GETCOLORTABLE: int = 5
export const FLUSHOUTPUT: int = 6
export const DRAFTMODE: int = 7
export const QUERYESCSUPPORT: int = 8
export const SETABORTPROC: int = 9
export const STARTDOC: int = 10
export const ENDDOC: int = 11
export const GETPHYSPAGESIZE: int = 12
export const GETPRINTINGOFFSET: int = 13
export const GETSCALINGFACTOR: int = 14
export const MFCOMMENT: int = 15
export const GETPENWIDTH: int = 16
export const SETCOPYCOUNT: int = 17
export const SELECTPAPERSOURCE: int = 18
export const DEVICEDATA: int = 19
export const PASSTHROUGH: int = 19
export const GETTECHNOLGY: int = 20
export const GETTECHNOLOGY: int = 20
export const SETLINECAP: int = 21
export const SETLINEJOIN: int = 22
export const SETMITERLIMIT: int = 23
export const BANDINFO: int = 24
export const DRAWPATTERNRECT: int = 25
export const GETVECTORPENSIZE: int = 26
export const GETVECTORBRUSHSIZE: int = 27
export const ENABLEDUPLEX: int = 28
export const GETSETPAPERBINS: int = 29
export const GETSETPRINTORIENT: int = 30
export const ENUMPAPERBINS: int = 31
export const SETDIBSCALING: int = 32
export const EPSPRINTING: int = 33
export const ENUMPAPERMETRICS: int = 34
export const GETSETPAPERMETRICS: int = 35
export const POSTSCRIPT_DATA: int = 37
export const POSTSCRIPT_IGNORE: int = 38
export const MOUSETRAILS: int = 39
export const GETDEVICEUNITS: int = 42
export const GETEXTENDEDTEXTMETRICS: int = 256
export const GETEXTENTTABLE: int = 257
export const GETPAIRKERNTABLE: int = 258
export const GETTRACKKERNTABLE: int = 259
export const EXTTEXTOUT: int = 512
export const GETFACENAME: int = 513
export const DOWNLOADFACE: int = 514
export const ENABLERELATIVEWIDTHS: int = 768
export const ENABLEPAIRKERNING: int = 769
export const SETKERNTRACK: int = 770
export const SETALLJUSTVALUES: int = 771
export const SETCHARSET: int = 772
export const STRETCHBLT: int = 2048
export const METAFILE_DRIVER: int = 2049
export const GETSETSCREENPARAMS: int = 3072
export const QUERYDIBSUPPORT: int = 3073
export const BEGIN_PATH: int = 4096
export const CLIP_TO_PATH: int = 4097
export const END_PATH: int = 4098
export const EXT_DEVICE_CAPS: int = 4099
export const RESTORE_CTM: int = 4100
export const SAVE_CTM: int = 4101
export const SET_ARC_DIRECTION: int = 4102
export const SET_BACKGROUND_COLOR: int = 4103
export const SET_POLY_MODE: int = 4104
export const SET_SCREEN_ANGLE: int = 4105
export const SET_SPREAD: int = 4106
export const TRANSFORM_CTM: int = 4107
export const SET_CLIP_BOX: int = 4108
export const SET_BOUNDS: int = 4109
export const SET_MIRROR_MODE: int = 4110
export const OPENCHANNEL: int = 4110
export const DOWNLOADHEADER: int = 4111
export const CLOSECHANNEL: int = 4112
export const POSTSCRIPT_PASSTHROUGH: int = 4115
export const ENCAPSULATED_POSTSCRIPT: int = 4116
export const POSTSCRIPT_IDENTIFY: int = 4117
export const POSTSCRIPT_INJECTION: int = 4118
export const CHECKJPEGFORMAT: int = 4119
export const CHECKPNGFORMAT: int = 4120
export const GET_PS_FEATURESETTING: int = 4121
export const GDIPLUS_TS_QUERYVER: int = 4122
export const GDIPLUS_TS_RECORD: int = 4123
export const SPCLPASSTHROUGH2: int = 4568
export const PSIDENT_GDICENTRIC: int = 0
export const PSIDENT_PSCENTRIC: int = 1
export const PSINJECT_BEGINSTREAM: int = 1
export const PSINJECT_PSADOBE: int = 2
export const PSINJECT_PAGESATEND: int = 3
export const PSINJECT_PAGES: int = 4
export const PSINJECT_DOCNEEDEDRES: int = 5
export const PSINJECT_DOCSUPPLIEDRES: int = 6
export const PSINJECT_PAGEORDER: int = 7
export const PSINJECT_ORIENTATION: int = 8
export const PSINJECT_BOUNDINGBOX: int = 9
export const PSINJECT_DOCUMENTPROCESSCOLORS: int = 10
export const PSINJECT_COMMENTS: int = 11
export const PSINJECT_BEGINDEFAULTS: int = 12
export const PSINJECT_ENDDEFAULTS: int = 13
export const PSINJECT_BEGINPROLOG: int = 14
export const PSINJECT_ENDPROLOG: int = 15
export const PSINJECT_BEGINSETUP: int = 16
export const PSINJECT_ENDSETUP: int = 17
export const PSINJECT_TRAILER: int = 18
export const PSINJECT_EOF: int = 19
export const PSINJECT_ENDSTREAM: int = 20
export const PSINJECT_DOCUMENTPROCESSCOLORSATEND: int = 21
export const PSINJECT_PAGENUMBER: int = 100
export const PSINJECT_BEGINPAGESETUP: int = 101
export const PSINJECT_ENDPAGESETUP: int = 102
export const PSINJECT_PAGETRAILER: int = 103
export const PSINJECT_PLATECOLOR: int = 104
export const PSINJECT_SHOWPAGE: int = 105
export const PSINJECT_PAGEBBOX: int = 106
export const PSINJECT_ENDPAGECOMMENTS: int = 107
export const PSINJECT_VMSAVE: int = 200
export const PSINJECT_VMRESTORE: int = 201
export const FEATURESETTING_NUP: int = 0
export const FEATURESETTING_OUTPUT: int = 1
export const FEATURESETTING_PSLEVEL: int = 2
export const FEATURESETTING_CUSTPAPER: int = 3
export const FEATURESETTING_MIRROR: int = 4
export const FEATURESETTING_NEGATIVE: int = 5
export const FEATURESETTING_PROTOCOL: int = 6
export const PSPROTOCOL_ASCII: int = 0
export const PSPROTOCOL_BCP: int = 1
export const PSPROTOCOL_TBCP: int = 2
export const PSPROTOCOL_BINARY: int = 3
export const QDI_SETDIBITS: int = 1
export const QDI_GETDIBITS: int = 2
export const QDI_DIBTOSCREEN: int = 4
export const QDI_STRETCHDIB: int = 8
export const OBJ_PEN: int = 1
export const OBJ_BRUSH: int = 2
export const OBJ_DC: int = 3
export const OBJ_METADC: int = 4
export const OBJ_PAL: int = 5
export const OBJ_FONT: int = 6
export const OBJ_BITMAP: int = 7
export const OBJ_REGION: int = 8
export const OBJ_METAFILE: int = 9
export const OBJ_MEMDC: int = 10
export const OBJ_EXTPEN: int = 11
export const OBJ_ENHMETADC: int = 12
export const OBJ_ENHMETAFILE: int = 13
export const OBJ_COLORSPACE: int = 14
export const MWT_IDENTITY: int = 1
export const MWT_LEFTMULTIPLY: int = 2
export const MWT_RIGHTMULTIPLY: int = 3
export const CM_OUT_OF_GAMUT: int = 255
export const CM_IN_GAMUT: int = 0
export const ICM_ADDPROFILE: int = 1
export const ICM_DELETEPROFILE: int = 2
export const ICM_QUERYPROFILE: int = 3
export const ICM_SETDEFAULTPROFILE: int = 4
export const ICM_REGISTERICMATCHER: int = 5
export const ICM_UNREGISTERICMATCHER: int = 6
export const ICM_QUERYMATCH: int = 7
export const TCI_SRCCHARSET: int = 1
export const TCI_SRCCODEPAGE: int = 2
export const TCI_SRCFONTSIG: int = 3
export const LF_FACESIZE: int = 32
export const LF_FULLFACESIZE: int = 64
export const OUT_DEFAULT_PRECIS: int = 0
export const OUT_STRING_PRECIS: int = 1
export const OUT_CHARACTER_PRECIS: int = 2
export const OUT_STROKE_PRECIS: int = 3
export const OUT_TT_PRECIS: int = 4
export const OUT_DEVICE_PRECIS: int = 5
export const OUT_RASTER_PRECIS: int = 6
export const OUT_TT_ONLY_PRECIS: int = 7
export const OUT_OUTLINE_PRECIS: int = 8
export const OUT_SCREEN_OUTLINE_PRECIS: int = 9
export const OUT_PS_ONLY_PRECIS: int = 10
export const CLIP_DEFAULT_PRECIS: int = 0
export const CLIP_CHARACTER_PRECIS: int = 1
export const CLIP_STROKE_PRECIS: int = 2
export const DEFAULT_QUALITY: int = 0
export const DRAFT_QUALITY: int = 1
export const PROOF_QUALITY: int = 2
export const NONANTIALIASED_QUALITY: int = 3
export const ANTIALIASED_QUALITY: int = 4
export const CLEARTYPE_QUALITY: int = 5
export const CLEARTYPE_NATURAL_QUALITY: int = 6
export const DEFAULT_PITCH: int = 0
export const FIXED_PITCH: int = 1
export const VARIABLE_PITCH: int = 2
export const MONO_FONT: int = 8
export const ANSI_CHARSET: int = 0
export const DEFAULT_CHARSET: int = 1
export const SYMBOL_CHARSET: int = 2
export const SHIFTJIS_CHARSET: int = 128
export const HANGEUL_CHARSET: int = 129
export const HANGUL_CHARSET: int = 129
export const GB2312_CHARSET: int = 134
export const CHINESEBIG5_CHARSET: int = 136
export const OEM_CHARSET: int = 255
export const JOHAB_CHARSET: int = 130
export const HEBREW_CHARSET: int = 177
export const ARABIC_CHARSET: int = 178
export const GREEK_CHARSET: int = 161
export const TURKISH_CHARSET: int = 162
export const VIETNAMESE_CHARSET: int = 163
export const THAI_CHARSET: int = 222
export const EASTEUROPE_CHARSET: int = 238
export const RUSSIAN_CHARSET: int = 204
export const MAC_CHARSET: int = 77
export const BALTIC_CHARSET: int = 186
export const FW_DONTCARE: int = 0
export const FW_THIN: int = 100
export const FW_EXTRALIGHT: int = 200
export const FW_LIGHT: int = 300
export const FW_NORMAL: int = 400
export const FW_MEDIUM: int = 500
export const FW_SEMIBOLD: int = 600
export const FW_BOLD: int = 700
export const FW_EXTRABOLD: int = 800
export const FW_HEAVY: int = 900
export const PANOSE_COUNT: int = 10
export const PAN_FAMILYTYPE_INDEX: int = 0
export const PAN_SERIFSTYLE_INDEX: int = 1
export const PAN_WEIGHT_INDEX: int = 2
export const PAN_PROPORTION_INDEX: int = 3
export const PAN_CONTRAST_INDEX: int = 4
export const PAN_STROKEVARIATION_INDEX: int = 5
export const PAN_ARMSTYLE_INDEX: int = 6
export const PAN_LETTERFORM_INDEX: int = 7
export const PAN_MIDLINE_INDEX: int = 8
export const PAN_XHEIGHT_INDEX: int = 9
export const PAN_CULTURE_LATIN: int = 0
export const PAN_ANY: int = 0
export const PAN_NO_FIT: int = 1
export const PAN_FAMILY_TEXT_DISPLAY: int = 2
export const PAN_FAMILY_SCRIPT: int = 3
export const PAN_FAMILY_DECORATIVE: int = 4
export const PAN_FAMILY_PICTORIAL: int = 5
export const PAN_SERIF_COVE: int = 2
export const PAN_SERIF_OBTUSE_COVE: int = 3
export const PAN_SERIF_SQUARE_COVE: int = 4
export const PAN_SERIF_OBTUSE_SQUARE_COVE: int = 5
export const PAN_SERIF_SQUARE: int = 6
export const PAN_SERIF_THIN: int = 7
export const PAN_SERIF_BONE: int = 8
export const PAN_SERIF_EXAGGERATED: int = 9
export const PAN_SERIF_TRIANGLE: int = 10
export const PAN_SERIF_NORMAL_SANS: int = 11
export const PAN_SERIF_OBTUSE_SANS: int = 12
export const PAN_SERIF_PERP_SANS: int = 13
export const PAN_SERIF_FLARED: int = 14
export const PAN_SERIF_ROUNDED: int = 15
export const PAN_WEIGHT_VERY_LIGHT: int = 2
export const PAN_WEIGHT_LIGHT: int = 3
export const PAN_WEIGHT_THIN: int = 4
export const PAN_WEIGHT_BOOK: int = 5
export const PAN_WEIGHT_MEDIUM: int = 6
export const PAN_WEIGHT_DEMI: int = 7
export const PAN_WEIGHT_BOLD: int = 8
export const PAN_WEIGHT_HEAVY: int = 9
export const PAN_WEIGHT_BLACK: int = 10
export const PAN_WEIGHT_NORD: int = 11
export const PAN_PROP_OLD_STYLE: int = 2
export const PAN_PROP_MODERN: int = 3
export const PAN_PROP_EVEN_WIDTH: int = 4
export const PAN_PROP_EXPANDED: int = 5
export const PAN_PROP_CONDENSED: int = 6
export const PAN_PROP_VERY_EXPANDED: int = 7
export const PAN_PROP_VERY_CONDENSED: int = 8
export const PAN_PROP_MONOSPACED: int = 9
export const PAN_CONTRAST_NONE: int = 2
export const PAN_CONTRAST_VERY_LOW: int = 3
export const PAN_CONTRAST_LOW: int = 4
export const PAN_CONTRAST_MEDIUM_LOW: int = 5
export const PAN_CONTRAST_MEDIUM: int = 6
export const PAN_CONTRAST_MEDIUM_HIGH: int = 7
export const PAN_CONTRAST_HIGH: int = 8
export const PAN_CONTRAST_VERY_HIGH: int = 9
export const PAN_STROKE_GRADUAL_DIAG: int = 2
export const PAN_STROKE_GRADUAL_TRAN: int = 3
export const PAN_STROKE_GRADUAL_VERT: int = 4
export const PAN_STROKE_GRADUAL_HORZ: int = 5
export const PAN_STROKE_RAPID_VERT: int = 6
export const PAN_STROKE_RAPID_HORZ: int = 7
export const PAN_STROKE_INSTANT_VERT: int = 8
export const PAN_STRAIGHT_ARMS_HORZ: int = 2
export const PAN_STRAIGHT_ARMS_WEDGE: int = 3
export const PAN_STRAIGHT_ARMS_VERT: int = 4
export const PAN_STRAIGHT_ARMS_SINGLE_SERIF: int = 5
export const PAN_STRAIGHT_ARMS_DOUBLE_SERIF: int = 6
export const PAN_BENT_ARMS_HORZ: int = 7
export const PAN_BENT_ARMS_WEDGE: int = 8
export const PAN_BENT_ARMS_VERT: int = 9
export const PAN_BENT_ARMS_SINGLE_SERIF: int = 10
export const PAN_BENT_ARMS_DOUBLE_SERIF: int = 11
export const PAN_LETT_NORMAL_CONTACT: int = 2
export const PAN_LETT_NORMAL_WEIGHTED: int = 3
export const PAN_LETT_NORMAL_BOXED: int = 4
export const PAN_LETT_NORMAL_FLATTENED: int = 5
export const PAN_LETT_NORMAL_ROUNDED: int = 6
export const PAN_LETT_NORMAL_OFF_CENTER: int = 7
export const PAN_LETT_NORMAL_SQUARE: int = 8
export const PAN_LETT_OBLIQUE_CONTACT: int = 9
export const PAN_LETT_OBLIQUE_WEIGHTED: int = 10
export const PAN_LETT_OBLIQUE_BOXED: int = 11
export const PAN_LETT_OBLIQUE_FLATTENED: int = 12
export const PAN_LETT_OBLIQUE_ROUNDED: int = 13
export const PAN_LETT_OBLIQUE_OFF_CENTER: int = 14
export const PAN_LETT_OBLIQUE_SQUARE: int = 15
export const PAN_MIDLINE_STANDARD_TRIMMED: int = 2
export const PAN_MIDLINE_STANDARD_POINTED: int = 3
export const PAN_MIDLINE_STANDARD_SERIFED: int = 4
export const PAN_MIDLINE_HIGH_TRIMMED: int = 5
export const PAN_MIDLINE_HIGH_POINTED: int = 6
export const PAN_MIDLINE_HIGH_SERIFED: int = 7
export const PAN_MIDLINE_CONSTANT_TRIMMED: int = 8
export const PAN_MIDLINE_CONSTANT_POINTED: int = 9
export const PAN_MIDLINE_CONSTANT_SERIFED: int = 10
export const PAN_MIDLINE_LOW_TRIMMED: int = 11
export const PAN_MIDLINE_LOW_POINTED: int = 12
export const PAN_MIDLINE_LOW_SERIFED: int = 13
export const PAN_XHEIGHT_CONSTANT_SMALL: int = 2
export const PAN_XHEIGHT_CONSTANT_STD: int = 3
export const PAN_XHEIGHT_CONSTANT_LARGE: int = 4
export const PAN_XHEIGHT_DUCKING_SMALL: int = 5
export const PAN_XHEIGHT_DUCKING_STD: int = 6
export const PAN_XHEIGHT_DUCKING_LARGE: int = 7
export const ELF_VENDOR_SIZE: int = 4
export const ELF_VERSION: int = 0
export const ELF_CULTURE_LATIN: int = 0
export const TRANSPARENT: int = 1
export const OPAQUE: int = 2
export const BKMODE_LAST: int = 2
export const GM_COMPATIBLE: int = 1
export const GM_ADVANCED: int = 2
export const GM_LAST: int = 2
export const MM_TEXT: int = 1
export const MM_LOMETRIC: int = 2
export const MM_HIMETRIC: int = 3
export const MM_LOENGLISH: int = 4
export const MM_HIENGLISH: int = 5
export const MM_TWIPS: int = 6
export const MM_ISOTROPIC: int = 7
export const MM_ANISOTROPIC: int = 8
export const ABSOLUTE: int = 1
export const RELATIVE: int = 2
export const WHITE_BRUSH: int = 0
export const LTGRAY_BRUSH: int = 1
export const GRAY_BRUSH: int = 2
export const DKGRAY_BRUSH: int = 3
export const BLACK_BRUSH: int = 4
export const NULL_BRUSH: int = 5
export const WHITE_PEN: int = 6
export const BLACK_PEN: int = 7
export const NULL_PEN: int = 8
export const OEM_FIXED_FONT: int = 10
export const ANSI_FIXED_FONT: int = 11
export const ANSI_VAR_FONT: int = 12
export const SYSTEM_FONT: int = 13
export const DEVICE_DEFAULT_FONT: int = 14
export const DEFAULT_PALETTE: int = 15
export const SYSTEM_FIXED_FONT: int = 16
export const DEFAULT_GUI_FONT: int = 17
export const DC_BRUSH: int = 18
export const DC_PEN: int = 19
export const STOCK_LAST: int = 19
export const BS_SOLID: int = 0
export const BS_NULL: int = 1
export const BS_HATCHED: int = 2
export const BS_PATTERN: int = 3
export const BS_INDEXED: int = 4
export const BS_DIBPATTERN: int = 5
export const BS_DIBPATTERNPT: int = 6
export const BS_PATTERN8X8: int = 7
export const BS_DIBPATTERN8X8: int = 8
export const BS_MONOPATTERN: int = 9
export const HS_HORIZONTAL: int = 0
export const HS_VERTICAL: int = 1
export const HS_FDIAGONAL: int = 2
export const HS_BDIAGONAL: int = 3
export const HS_CROSS: int = 4
export const HS_DIAGCROSS: int = 5
export const HS_API_MAX: int = 12
export const PS_SOLID: int = 0
export const PS_DASH: int = 1
export const PS_DOT: int = 2
export const PS_DASHDOT: int = 3
export const PS_DASHDOTDOT: int = 4
export const PS_NULL: int = 5
export const PS_INSIDEFRAME: int = 6
export const PS_USERSTYLE: int = 7
export const PS_ALTERNATE: int = 8
export const AD_COUNTERCLOCKWISE: int = 1
export const AD_CLOCKWISE: int = 2
export const DRIVERVERSION: int = 0
export const TECHNOLOGY: int = 2
export const HORZSIZE: int = 4
export const VERTSIZE: int = 6
export const HORZRES: int = 8
export const VERTRES: int = 10
export const BITSPIXEL: int = 12
export const PLANES: int = 14
export const NUMBRUSHES: int = 16
export const NUMPENS: int = 18
export const NUMMARKERS: int = 20
export const NUMFONTS: int = 22
export const NUMCOLORS: int = 24
export const PDEVICESIZE: int = 26
export const CURVECAPS: int = 28
export const LINECAPS: int = 30
export const POLYGONALCAPS: int = 32
export const TEXTCAPS: int = 34
export const CLIPCAPS: int = 36
export const RASTERCAPS: int = 38
export const ASPECTX: int = 40
export const ASPECTY: int = 42
export const ASPECTXY: int = 44
export const LOGPIXELSX: int = 88
export const LOGPIXELSY: int = 90
export const SIZEPALETTE: int = 104
export const NUMRESERVED: int = 106
export const COLORRES: int = 108
export const PHYSICALWIDTH: int = 110
export const PHYSICALHEIGHT: int = 111
export const PHYSICALOFFSETX: int = 112
export const PHYSICALOFFSETY: int = 113
export const SCALINGFACTORX: int = 114
export const SCALINGFACTORY: int = 115
export const VREFRESH: int = 116
export const DESKTOPVERTRES: int = 117
export const DESKTOPHORZRES: int = 118
export const BLTALIGNMENT: int = 119
export const SHADEBLENDCAPS: int = 120
export const COLORMGMTCAPS: int = 121
export const DT_PLOTTER: int = 0
export const DT_RASDISPLAY: int = 1
export const DT_RASPRINTER: int = 2
export const DT_RASCAMERA: int = 3
export const DT_CHARSTREAM: int = 4
export const DT_METAFILE: int = 5
export const DT_DISPFILE: int = 6
export const CC_NONE: int = 0
export const CC_CIRCLES: int = 1
export const CC_PIE: int = 2
export const CC_CHORD: int = 4
export const CC_ELLIPSES: int = 8
export const CC_WIDE: int = 16
export const CC_STYLED: int = 32
export const CC_WIDESTYLED: int = 64
export const CC_INTERIORS: int = 128
export const CC_ROUNDRECT: int = 256
export const LC_NONE: int = 0
export const LC_POLYLINE: int = 2
export const LC_MARKER: int = 4
export const LC_POLYMARKER: int = 8
export const LC_WIDE: int = 16
export const LC_STYLED: int = 32
export const LC_WIDESTYLED: int = 64
export const LC_INTERIORS: int = 128
export const PC_NONE: int = 0
export const PC_POLYGON: int = 1
export const PC_RECTANGLE: int = 2
export const PC_WINDPOLYGON: int = 4
export const PC_TRAPEZOID: int = 4
export const PC_SCANLINE: int = 8
export const PC_WIDE: int = 16
export const PC_STYLED: int = 32
export const PC_WIDESTYLED: int = 64
export const PC_INTERIORS: int = 128
export const PC_POLYPOLYGON: int = 256
export const PC_PATHS: int = 512
export const CP_NONE: int = 0
export const CP_RECTANGLE: int = 1
export const CP_REGION: int = 2
export const RC_BITBLT: int = 1
export const RC_BANDING: int = 2
export const RC_SCALING: int = 4
export const RC_BITMAP64: int = 8
export const DIB_RGB_COLORS: int = 0
export const DIB_PAL_COLORS: int = 1
export const SYSPAL_ERROR: int = 0
export const SYSPAL_STATIC: int = 1
export const SYSPAL_NOSTATIC: int = 2
export const SYSPAL_NOSTATIC256: int = 3
export const FLOODFILLBORDER: int = 0
export const FLOODFILLSURFACE: int = 1
export const CCHDEVICENAME: int = 32
export const CCHFORMNAME: int = 32
export const DMORIENT_PORTRAIT: int = 1
export const DMORIENT_LANDSCAPE: int = 2
export const DMPAPER_LETTER: int = 1
export const DMPAPER_LETTERSMALL: int = 2
export const DMPAPER_TABLOID: int = 3
export const DMPAPER_LEDGER: int = 4
export const DMPAPER_LEGAL: int = 5
export const DMPAPER_STATEMENT: int = 6
export const DMPAPER_EXECUTIVE: int = 7
export const DMPAPER_A3: int = 8
export const DMPAPER_A4: int = 9
export const DMPAPER_A4SMALL: int = 10
export const DMPAPER_A5: int = 11
export const DMPAPER_B4: int = 12
export const DMPAPER_B5: int = 13
export const DMPAPER_FOLIO: int = 14
export const DMPAPER_QUARTO: int = 15
export const DMPAPER_10X14: int = 16
export const DMPAPER_11X17: int = 17
export const DMPAPER_NOTE: int = 18
export const DMPAPER_ENV_9: int = 19
export const DMPAPER_ENV_10: int = 20
export const DMPAPER_ENV_11: int = 21
export const DMPAPER_ENV_12: int = 22
export const DMPAPER_ENV_14: int = 23
export const DMPAPER_CSHEET: int = 24
export const DMPAPER_DSHEET: int = 25
export const DMPAPER_ESHEET: int = 26
export const DMPAPER_ENV_DL: int = 27
export const DMPAPER_ENV_C5: int = 28
export const DMPAPER_ENV_C3: int = 29
export const DMPAPER_ENV_C4: int = 30
export const DMPAPER_ENV_C6: int = 31
export const DMPAPER_ENV_C65: int = 32
export const DMPAPER_ENV_B4: int = 33
export const DMPAPER_ENV_B5: int = 34
export const DMPAPER_ENV_B6: int = 35
export const DMPAPER_ENV_ITALY: int = 36
export const DMPAPER_ENV_MONARCH: int = 37
export const DMPAPER_ENV_PERSONAL: int = 38
export const DMPAPER_FANFOLD_US: int = 39
export const DMPAPER_FANFOLD_STD_GERMAN: int = 40
export const DMPAPER_FANFOLD_LGL_GERMAN: int = 41
export const DMPAPER_ISO_B4: int = 42
export const DMPAPER_JAPANESE_POSTCARD: int = 43
export const DMPAPER_9X11: int = 44
export const DMPAPER_10X11: int = 45
export const DMPAPER_15X11: int = 46
export const DMPAPER_ENV_INVITE: int = 47
export const DMPAPER_RESERVED_48: int = 48
export const DMPAPER_RESERVED_49: int = 49
export const DMPAPER_LETTER_EXTRA: int = 50
export const DMPAPER_LEGAL_EXTRA: int = 51
export const DMPAPER_TABLOID_EXTRA: int = 52
export const DMPAPER_A4_EXTRA: int = 53
export const DMPAPER_LETTER_TRANSVERSE: int = 54
export const DMPAPER_A4_TRANSVERSE: int = 55
export const DMPAPER_LETTER_EXTRA_TRANSVERSE: int = 56
export const DMPAPER_A_PLUS: int = 57
export const DMPAPER_B_PLUS: int = 58
export const DMPAPER_LETTER_PLUS: int = 59
export const DMPAPER_A4_PLUS: int = 60
export const DMPAPER_A5_TRANSVERSE: int = 61
export const DMPAPER_B5_TRANSVERSE: int = 62
export const DMPAPER_A3_EXTRA: int = 63
export const DMPAPER_A5_EXTRA: int = 64
export const DMPAPER_B5_EXTRA: int = 65
export const DMPAPER_A2: int = 66
export const DMPAPER_A3_TRANSVERSE: int = 67
export const DMPAPER_A3_EXTRA_TRANSVERSE: int = 68
export const DMPAPER_DBL_JAPANESE_POSTCARD: int = 69
export const DMPAPER_A6: int = 70
export const DMPAPER_JENV_KAKU2: int = 71
export const DMPAPER_JENV_KAKU3: int = 72
export const DMPAPER_JENV_CHOU3: int = 73
export const DMPAPER_JENV_CHOU4: int = 74
export const DMPAPER_LETTER_ROTATED: int = 75
export const DMPAPER_A3_ROTATED: int = 76
export const DMPAPER_A4_ROTATED: int = 77
export const DMPAPER_A5_ROTATED: int = 78
export const DMPAPER_B4_JIS_ROTATED: int = 79
export const DMPAPER_B5_JIS_ROTATED: int = 80
export const DMPAPER_JAPANESE_POSTCARD_ROTATED: int = 81
export const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED: int = 82
export const DMPAPER_A6_ROTATED: int = 83
export const DMPAPER_JENV_KAKU2_ROTATED: int = 84
export const DMPAPER_JENV_KAKU3_ROTATED: int = 85
export const DMPAPER_JENV_CHOU3_ROTATED: int = 86
export const DMPAPER_JENV_CHOU4_ROTATED: int = 87
export const DMPAPER_B6_JIS: int = 88
export const DMPAPER_B6_JIS_ROTATED: int = 89
export const DMPAPER_12X11: int = 90
export const DMPAPER_JENV_YOU4: int = 91
export const DMPAPER_JENV_YOU4_ROTATED: int = 92
export const DMPAPER_P16K: int = 93
export const DMPAPER_P32K: int = 94
export const DMPAPER_P32KBIG: int = 95
export const DMPAPER_PENV_1: int = 96
export const DMPAPER_PENV_2: int = 97
export const DMPAPER_PENV_3: int = 98
export const DMPAPER_PENV_4: int = 99
export const DMPAPER_PENV_5: int = 100
export const DMPAPER_PENV_6: int = 101
export const DMPAPER_PENV_7: int = 102
export const DMPAPER_PENV_8: int = 103
export const DMPAPER_PENV_9: int = 104
export const DMPAPER_PENV_10: int = 105
export const DMPAPER_P16K_ROTATED: int = 106
export const DMPAPER_P32K_ROTATED: int = 107
export const DMPAPER_P32KBIG_ROTATED: int = 108
export const DMPAPER_PENV_1_ROTATED: int = 109
export const DMPAPER_PENV_2_ROTATED: int = 110
export const DMPAPER_PENV_3_ROTATED: int = 111
export const DMPAPER_PENV_4_ROTATED: int = 112
export const DMPAPER_PENV_5_ROTATED: int = 113
export const DMPAPER_PENV_6_ROTATED: int = 114
export const DMPAPER_PENV_7_ROTATED: int = 115
export const DMPAPER_PENV_8_ROTATED: int = 116
export const DMPAPER_PENV_9_ROTATED: int = 117
export const DMPAPER_PENV_10_ROTATED: int = 118
export const DMPAPER_USER: int = 256
export const DMBIN_UPPER: int = 1
export const DMBIN_ONLYONE: int = 1
export const DMBIN_LOWER: int = 2
export const DMBIN_MIDDLE: int = 3
export const DMBIN_MANUAL: int = 4
export const DMBIN_ENVELOPE: int = 5
export const DMBIN_ENVMANUAL: int = 6
export const DMBIN_AUTO: int = 7
export const DMBIN_TRACTOR: int = 8
export const DMBIN_SMALLFMT: int = 9
export const DMBIN_LARGEFMT: int = 10
export const DMBIN_LARGECAPACITY: int = 11
export const DMBIN_CASSETTE: int = 14
export const DMBIN_FORMSOURCE: int = 15
export const DMBIN_USER: int = 256
export const DMCOLOR_MONOCHROME: int = 1
export const DMCOLOR_COLOR: int = 2
export const DMDUP_SIMPLEX: int = 1
export const DMDUP_VERTICAL: int = 2
export const DMDUP_HORIZONTAL: int = 3
export const DMTT_BITMAP: int = 1
export const DMTT_DOWNLOAD: int = 2
export const DMTT_SUBDEV: int = 3
export const DMTT_DOWNLOAD_OUTLINE: int = 4
export const DMCOLLATE_FALSE: int = 0
export const DMCOLLATE_TRUE: int = 1
export const DMDO_DEFAULT: int = 0
export const DMDO_90: int = 1
export const DMDO_180: int = 2
export const DMDO_270: int = 3
export const DMDFO_DEFAULT: int = 0
export const DMDFO_STRETCH: int = 1
export const DMDFO_CENTER: int = 2
export const DMNUP_SYSTEM: int = 1
export const DMNUP_ONEUP: int = 2
export const DMICMMETHOD_NONE: int = 1
export const DMICMMETHOD_SYSTEM: int = 2
export const DMICMMETHOD_DRIVER: int = 3
export const DMICMMETHOD_DEVICE: int = 4
export const DMICMMETHOD_USER: int = 256
export const DMICM_SATURATE: int = 1
export const DMICM_CONTRAST: int = 2
export const DMICM_COLORIMETRIC: int = 3
export const DMICM_ABS_COLORIMETRIC: int = 4
export const DMICM_USER: int = 256
export const DMMEDIA_STANDARD: int = 1
export const DMMEDIA_TRANSPARENCY: int = 2
export const DMMEDIA_GLOSSY: int = 3
export const DMMEDIA_USER: int = 256
export const DMDITHER_NONE: int = 1
export const DMDITHER_COARSE: int = 2
export const DMDITHER_FINE: int = 3
export const DMDITHER_LINEART: int = 4
export const DMDITHER_ERRORDIFFUSION: int = 5
export const DMDITHER_RESERVED6: int = 6
export const DMDITHER_RESERVED7: int = 7
export const DMDITHER_RESERVED8: int = 8
export const DMDITHER_RESERVED9: int = 9
export const DMDITHER_GRAYSCALE: int = 10
export const DMDITHER_USER: int = 256
export const DISPLAYCONFIG_MAXPATH: int = 1024
export const RDH_RECTANGLES: int = 1
export const SYSRGN: int = 4
export const GGO_METRICS: int = 0
export const GGO_BITMAP: int = 1
export const GGO_NATIVE: int = 2
export const GGO_BEZIER: int = 3
export const GGO_GRAY2_BITMAP: int = 4
export const GGO_GRAY4_BITMAP: int = 5
export const GGO_GRAY8_BITMAP: int = 6
export const TT_POLYGON_TYPE: int = 24
export const TT_PRIM_LINE: int = 1
export const TT_PRIM_QSPLINE: int = 2
export const TT_PRIM_CSPLINE: int = 3
export const GCPCLASS_LATIN: int = 1
export const GCPCLASS_HEBREW: int = 2
export const GCPCLASS_ARABIC: int = 2
export const GCPCLASS_NEUTRAL: int = 3
export const GCPCLASS_LOCALNUMBER: int = 4
export const GCPCLASS_LATINNUMBER: int = 5
export const GCPCLASS_LATINNUMERICTERMINATOR: int = 6
export const GCPCLASS_LATINNUMERICSEPARATOR: int = 7
export const GCPCLASS_NUMERICSEPARATOR: int = 8
export const PFD_TYPE_RGBA: int = 0
export const PFD_TYPE_COLORINDEX: int = 1
export const PFD_MAIN_PLANE: int = 0
export const PFD_OVERLAY_PLANE: int = 1
export const DC_BINADJUST: int = 19
export const DC_EMF_COMPLIANT: int = 20
export const DC_DATATYPE_PRODUCED: int = 21
export const DC_COLLATE: int = 22
export const DC_MANUFACTURER: int = 23
export const DC_MODEL: int = 24
export const DC_PERSONALITY: int = 25
export const DC_PRINTRATE: int = 26
export const DC_PRINTRATEUNIT: int = 27
export const PRINTRATEUNIT_PPM: int = 1
export const PRINTRATEUNIT_CPS: int = 2
export const PRINTRATEUNIT_LPM: int = 3
export const PRINTRATEUNIT_IPM: int = 4
export const DC_PRINTERMEM: int = 28
export const DC_MEDIAREADY: int = 29
export const DC_STAPLE: int = 30
export const DC_PRINTRATEPPM: int = 31
export const DC_COLORDEVICE: int = 32
export const DC_NUP: int = 33
export const DC_MEDIATYPENAMES: int = 34
export const DC_MEDIATYPES: int = 35
export const MM_MAX_NUMAXES: int = 16
export const MM_MAX_AXES_NAMELEN: int = 16
export const ILLUMINANT_DEVICE_DEFAULT: int = 0
export const ILLUMINANT_A: int = 1
export const ILLUMINANT_B: int = 2
export const ILLUMINANT_C: int = 3
export const ILLUMINANT_D50: int = 4
export const ILLUMINANT_D55: int = 5
export const ILLUMINANT_D65: int = 6
export const ILLUMINANT_D75: int = 7
export const ILLUMINANT_F2: int = 8
export const FONTMAPPER_MAX: int = 10
export const ICM_OFF: int = 1
export const ICM_ON: int = 2
export const ICM_QUERY: int = 3
export const ICM_DONE_OUTSIDEDC: int = 4
export const EMR_HEADER: int = 1
export const EMR_POLYBEZIER: int = 2
export const EMR_POLYGON: int = 3
export const EMR_POLYLINE: int = 4
export const EMR_POLYBEZIERTO: int = 5
export const EMR_POLYLINETO: int = 6
export const EMR_POLYPOLYLINE: int = 7
export const EMR_POLYPOLYGON: int = 8
export const EMR_SETWINDOWEXTEX: int = 9
export const EMR_SETWINDOWORGEX: int = 10
export const EMR_SETVIEWPORTEXTEX: int = 11
export const EMR_SETVIEWPORTORGEX: int = 12
export const EMR_SETBRUSHORGEX: int = 13
export const EMR_EOF: int = 14
export const EMR_SETPIXELV: int = 15
export const EMR_SETMAPPERFLAGS: int = 16
export const EMR_SETMAPMODE: int = 17
export const EMR_SETBKMODE: int = 18
export const EMR_SETPOLYFILLMODE: int = 19
export const EMR_SETROP2: int = 20
export const EMR_SETSTRETCHBLTMODE: int = 21
export const EMR_SETTEXTALIGN: int = 22
export const EMR_SETCOLORADJUSTMENT: int = 23
export const EMR_SETTEXTCOLOR: int = 24
export const EMR_SETBKCOLOR: int = 25
export const EMR_OFFSETCLIPRGN: int = 26
export const EMR_MOVETOEX: int = 27
export const EMR_SETMETARGN: int = 28
export const EMR_EXCLUDECLIPRECT: int = 29
export const EMR_INTERSECTCLIPRECT: int = 30
export const EMR_SCALEVIEWPORTEXTEX: int = 31
export const EMR_SCALEWINDOWEXTEX: int = 32
export const EMR_SAVEDC: int = 33
export const EMR_RESTOREDC: int = 34
export const EMR_SETWORLDTRANSFORM: int = 35
export const EMR_MODIFYWORLDTRANSFORM: int = 36
export const EMR_SELECTOBJECT: int = 37
export const EMR_CREATEPEN: int = 38
export const EMR_CREATEBRUSHINDIRECT: int = 39
export const EMR_DELETEOBJECT: int = 40
export const EMR_ANGLEARC: int = 41
export const EMR_ELLIPSE: int = 42
export const EMR_RECTANGLE: int = 43
export const EMR_ROUNDRECT: int = 44
export const EMR_ARC: int = 45
export const EMR_CHORD: int = 46
export const EMR_PIE: int = 47
export const EMR_SELECTPALETTE: int = 48
export const EMR_CREATEPALETTE: int = 49
export const EMR_SETPALETTEENTRIES: int = 50
export const EMR_RESIZEPALETTE: int = 51
export const EMR_REALIZEPALETTE: int = 52
export const EMR_EXTFLOODFILL: int = 53
export const EMR_LINETO: int = 54
export const EMR_ARCTO: int = 55
export const EMR_POLYDRAW: int = 56
export const EMR_SETARCDIRECTION: int = 57
export const EMR_SETMITERLIMIT: int = 58
export const EMR_BEGINPATH: int = 59
export const EMR_ENDPATH: int = 60
export const EMR_CLOSEFIGURE: int = 61
export const EMR_FILLPATH: int = 62
export const EMR_STROKEANDFILLPATH: int = 63
export const EMR_STROKEPATH: int = 64
export const EMR_FLATTENPATH: int = 65
export const EMR_WIDENPATH: int = 66
export const EMR_SELECTCLIPPATH: int = 67
export const EMR_ABORTPATH: int = 68
export const EMR_GDICOMMENT: int = 70
export const EMR_FILLRGN: int = 71
export const EMR_FRAMERGN: int = 72
export const EMR_INVERTRGN: int = 73
export const EMR_PAINTRGN: int = 74
export const EMR_EXTSELECTCLIPRGN: int = 75
export const EMR_BITBLT: int = 76
export const EMR_STRETCHBLT: int = 77
export const EMR_MASKBLT: int = 78
export const EMR_PLGBLT: int = 79
export const EMR_SETDIBITSTODEVICE: int = 80
export const EMR_STRETCHDIBITS: int = 81
export const EMR_EXTCREATEFONTINDIRECTW: int = 82
export const EMR_EXTTEXTOUTA: int = 83
export const EMR_EXTTEXTOUTW: int = 84
export const EMR_POLYBEZIER16: int = 85
export const EMR_POLYGON16: int = 86
export const EMR_POLYLINE16: int = 87
export const EMR_POLYBEZIERTO16: int = 88
export const EMR_POLYLINETO16: int = 89
export const EMR_POLYPOLYLINE16: int = 90
export const EMR_POLYPOLYGON16: int = 91
export const EMR_POLYDRAW16: int = 92
export const EMR_CREATEMONOBRUSH: int = 93
export const EMR_CREATEDIBPATTERNBRUSHPT: int = 94
export const EMR_EXTCREATEPEN: int = 95
export const EMR_POLYTEXTOUTA: int = 96
export const EMR_POLYTEXTOUTW: int = 97
export const EMR_SETICMMODE: int = 98
export const EMR_CREATECOLORSPACE: int = 99
export const EMR_SETCOLORSPACE: int = 100
export const EMR_DELETECOLORSPACE: int = 101
export const EMR_GLSRECORD: int = 102
export const EMR_GLSBOUNDEDRECORD: int = 103
export const EMR_PIXELFORMAT: int = 104
export const EMR_RESERVED_105: int = 105
export const EMR_RESERVED_106: int = 106
export const EMR_RESERVED_107: int = 107
export const EMR_RESERVED_108: int = 108
export const EMR_RESERVED_109: int = 109
export const EMR_RESERVED_110: int = 110
export const EMR_COLORCORRECTPALETTE: int = 111
export const EMR_SETICMPROFILEA: int = 112
export const EMR_SETICMPROFILEW: int = 113
export const EMR_ALPHABLEND: int = 114
export const EMR_SETLAYOUT: int = 115
export const EMR_TRANSPARENTBLT: int = 116
export const EMR_RESERVED_117: int = 117
export const EMR_GRADIENTFILL: int = 118
export const EMR_RESERVED_119: int = 119
export const EMR_RESERVED_120: int = 120
export const EMR_COLORMATCHTOTARGETW: int = 121
export const EMR_CREATECOLORSPACEW: int = 122
export const EMR_MIN: int = 1
export const EMR_MAX: int = 122
export const WGL_FONT_LINES: int = 0
export const WGL_FONT_POLYGONS: int = 1
export const LPD_TYPE_RGBA: int = 0
export const LPD_TYPE_COLORINDEX: int = 1
export const WGL_SWAPMULTIPLE_MAX: int = 16
export const DIFFERENCE: int = 11
export const SB_HORZ: int = 0
export const SB_VERT: int = 1
export const SB_CTL: int = 2
export const SB_BOTH: int = 3
export const SB_LINEUP: int = 0
export const SB_LINELEFT: int = 0
export const SB_LINEDOWN: int = 1
export const SB_LINERIGHT: int = 1
export const SB_PAGEUP: int = 2
export const SB_PAGELEFT: int = 2
export const SB_PAGEDOWN: int = 3
export const SB_PAGERIGHT: int = 3
export const SB_THUMBPOSITION: int = 4
export const SB_THUMBTRACK: int = 5
export const SB_TOP: int = 6
export const SB_LEFT: int = 6
export const SB_BOTTOM: int = 7
export const SB_RIGHT: int = 7
export const SB_ENDSCROLL: int = 8
export const SW_HIDE: int = 0
export const SW_SHOWNORMAL: int = 1
export const SW_NORMAL: int = 1
export const SW_SHOWMINIMIZED: int = 2
export const SW_SHOWMAXIMIZED: int = 3
export const SW_MAXIMIZE: int = 3
export const SW_SHOWNOACTIVATE: int = 4
export const SW_SHOW: int = 5
export const SW_MINIMIZE: int = 6
export const SW_SHOWMINNOACTIVE: int = 7
export const SW_SHOWNA: int = 8
export const SW_RESTORE: int = 9
export const SW_SHOWDEFAULT: int = 10
export const SW_FORCEMINIMIZE: int = 11
export const SW_MAX: int = 11
export const HIDE_WINDOW: int = 0
export const SHOW_OPENWINDOW: int = 1
export const SHOW_ICONWINDOW: int = 2
export const SHOW_FULLSCREEN: int = 3
export const SHOW_OPENNOACTIVATE: int = 4
export const SW_PARENTCLOSING: int = 1
export const SW_OTHERZOOM: int = 2
export const SW_PARENTOPENING: int = 3
export const SW_OTHERUNZOOM: int = 4
export const WH_JOURNALRECORD: int = 0
export const WH_JOURNALPLAYBACK: int = 1
export const WH_KEYBOARD: int = 2
export const WH_GETMESSAGE: int = 3
export const WH_CALLWNDPROC: int = 4
export const WH_CBT: int = 5
export const WH_SYSMSGFILTER: int = 6
export const WH_MOUSE: int = 7
export const WH_DEBUG: int = 9
export const WH_SHELL: int = 10
export const WH_FOREGROUNDIDLE: int = 11
export const WH_CALLWNDPROCRET: int = 12
export const WH_KEYBOARD_LL: int = 13
export const WH_MOUSE_LL: int = 14
export const WH_MAX: int = 14
export const HC_ACTION: int = 0
export const HC_GETNEXT: int = 1
export const HC_SKIP: int = 2
export const HC_NOREMOVE: int = 3
export const HC_SYSMODALON: int = 4
export const HC_SYSMODALOFF: int = 5
export const HCBT_MOVESIZE: int = 0
export const HCBT_MINMAX: int = 1
export const HCBT_QS: int = 2
export const HCBT_CREATEWND: int = 3
export const HCBT_DESTROYWND: int = 4
export const HCBT_ACTIVATE: int = 5
export const HCBT_CLICKSKIPPED: int = 6
export const HCBT_KEYSKIPPED: int = 7
export const HCBT_SYSCOMMAND: int = 8
export const HCBT_SETFOCUS: int = 9
export const MSGF_DIALOGBOX: int = 0
export const MSGF_MESSAGEBOX: int = 1
export const MSGF_MENU: int = 2
export const MSGF_SCROLLBAR: int = 5
export const MSGF_NEXTWINDOW: int = 6
export const MSGF_MAX: int = 8
export const MSGF_USER: int = 4096
export const HSHELL_WINDOWCREATED: int = 1
export const HSHELL_WINDOWDESTROYED: int = 2
export const HSHELL_ACTIVATESHELLWINDOW: int = 3
export const HSHELL_WINDOWACTIVATED: int = 4
export const HSHELL_GETMINRECT: int = 5
export const HSHELL_REDRAW: int = 6
export const HSHELL_TASKMAN: int = 7
export const HSHELL_LANGUAGE: int = 8
export const HSHELL_SYSMENU: int = 9
export const HSHELL_ENDTASK: int = 10
export const HSHELL_ACCESSIBILITYSTATE: int = 11
export const HSHELL_APPCOMMAND: int = 12
export const HSHELL_WINDOWREPLACED: int = 13
export const HSHELL_WINDOWREPLACING: int = 14
export const HSHELL_MONITORCHANGED: int = 16
export const APPCOMMAND_BROWSER_BACKWARD: int = 1
export const APPCOMMAND_BROWSER_FORWARD: int = 2
export const APPCOMMAND_BROWSER_REFRESH: int = 3
export const APPCOMMAND_BROWSER_STOP: int = 4
export const APPCOMMAND_BROWSER_SEARCH: int = 5
export const APPCOMMAND_BROWSER_FAVORITES: int = 6
export const APPCOMMAND_BROWSER_HOME: int = 7
export const APPCOMMAND_VOLUME_MUTE: int = 8
export const APPCOMMAND_VOLUME_DOWN: int = 9
export const APPCOMMAND_VOLUME_UP: int = 10
export const APPCOMMAND_MEDIA_NEXTTRACK: int = 11
export const APPCOMMAND_MEDIA_PREVIOUSTRACK: int = 12
export const APPCOMMAND_MEDIA_STOP: int = 13
export const APPCOMMAND_MEDIA_PLAY_PAUSE: int = 14
export const APPCOMMAND_LAUNCH_MAIL: int = 15
export const APPCOMMAND_LAUNCH_MEDIA_SELECT: int = 16
export const APPCOMMAND_LAUNCH_APP1: int = 17
export const APPCOMMAND_LAUNCH_APP2: int = 18
export const APPCOMMAND_BASS_DOWN: int = 19
export const APPCOMMAND_BASS_BOOST: int = 20
export const APPCOMMAND_BASS_UP: int = 21
export const APPCOMMAND_TREBLE_DOWN: int = 22
export const APPCOMMAND_TREBLE_UP: int = 23
export const APPCOMMAND_MICROPHONE_VOLUME_MUTE: int = 24
export const APPCOMMAND_MICROPHONE_VOLUME_DOWN: int = 25
export const APPCOMMAND_MICROPHONE_VOLUME_UP: int = 26
export const APPCOMMAND_HELP: int = 27
export const APPCOMMAND_FIND: int = 28
export const APPCOMMAND_NEW: int = 29
export const APPCOMMAND_OPEN: int = 30
export const APPCOMMAND_CLOSE: int = 31
export const APPCOMMAND_SAVE: int = 32
export const APPCOMMAND_PRINT: int = 33
export const APPCOMMAND_UNDO: int = 34
export const APPCOMMAND_REDO: int = 35
export const APPCOMMAND_COPY: int = 36
export const APPCOMMAND_CUT: int = 37
export const APPCOMMAND_PASTE: int = 38
export const APPCOMMAND_REPLY_TO_MAIL: int = 39
export const APPCOMMAND_FORWARD_MAIL: int = 40
export const APPCOMMAND_SEND_MAIL: int = 41
export const APPCOMMAND_SPELL_CHECK: int = 42
export const APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE: int = 43
export const APPCOMMAND_MIC_ON_OFF_TOGGLE: int = 44
export const APPCOMMAND_CORRECTION_LIST: int = 45
export const APPCOMMAND_MEDIA_PLAY: int = 46
export const APPCOMMAND_MEDIA_PAUSE: int = 47
export const APPCOMMAND_MEDIA_RECORD: int = 48
export const APPCOMMAND_MEDIA_FAST_FORWARD: int = 49
export const APPCOMMAND_MEDIA_REWIND: int = 50
export const APPCOMMAND_MEDIA_CHANNEL_UP: int = 51
export const APPCOMMAND_MEDIA_CHANNEL_DOWN: int = 52
export const APPCOMMAND_DELETE: int = 53
export const APPCOMMAND_DWM_FLIP3D: int = 54
export const FAPPCOMMAND_KEY: int = 0
export const HKL_PREV: int = 0
export const HKL_NEXT: int = 1
export const KL_NAMELENGTH: int = 9
export const GMMP_USE_DISPLAY_POINTS: int = 1
export const GMMP_USE_HIGH_RESOLUTION_POINTS: int = 2
export const UOI_FLAGS: int = 1
export const UOI_NAME: int = 2
export const UOI_TYPE: int = 3
export const UOI_USER_SID: int = 4
export const UOI_HEAPSIZE: int = 5
export const UOI_IO: int = 6
export const UOI_TIMERPROC_EXCEPTION_SUPPRESSION: int = 7
export const WA_INACTIVE: int = 0
export const WA_ACTIVE: int = 1
export const WA_CLICKACTIVE: int = 2
export const PWR_OK: int = 1
export const PWR_SUSPENDREQUEST: int = 1
export const PWR_SUSPENDRESUME: int = 2
export const PWR_CRITICALRESUME: int = 3
export const NFR_ANSI: int = 1
export const NFR_UNICODE: int = 2
export const NF_QUERY: int = 3
export const NF_REQUERY: int = 4
export const UIS_SET: int = 1
export const UIS_CLEAR: int = 2
export const UIS_INITIALIZE: int = 3
export const WHEEL_DELTA: int = 120
export const WMSZ_LEFT: int = 1
export const WMSZ_RIGHT: int = 2
export const WMSZ_TOP: int = 3
export const WMSZ_TOPLEFT: int = 4
export const WMSZ_TOPRIGHT: int = 5
export const WMSZ_BOTTOM: int = 6
export const WMSZ_BOTTOMLEFT: int = 7
export const WMSZ_BOTTOMRIGHT: int = 8
export const HTNOWHERE: int = 0
export const HTCLIENT: int = 1
export const HTCAPTION: int = 2
export const HTSYSMENU: int = 3
export const HTGROWBOX: int = 4
export const HTMENU: int = 5
export const HTHSCROLL: int = 6
export const HTVSCROLL: int = 7
export const HTMINBUTTON: int = 8
export const HTMAXBUTTON: int = 9
export const HTLEFT: int = 10
export const HTRIGHT: int = 11
export const HTTOP: int = 12
export const HTTOPLEFT: int = 13
export const HTTOPRIGHT: int = 14
export const HTBOTTOM: int = 15
export const HTBOTTOMLEFT: int = 16
export const HTBOTTOMRIGHT: int = 17
export const HTBORDER: int = 18
export const HTOBJECT: int = 19
export const HTCLOSE: int = 20
export const HTHELP: int = 21
export const MA_ACTIVATE: int = 1
export const MA_ACTIVATEANDEAT: int = 2
export const MA_NOACTIVATE: int = 3
export const MA_NOACTIVATEANDEAT: int = 4
export const ICON_SMALL: int = 0
export const ICON_BIG: int = 1
export const ICON_SMALL2: int = 2
export const SIZE_RESTORED: int = 0
export const SIZE_MINIMIZED: int = 1
export const SIZE_MAXIMIZED: int = 2
export const SIZE_MAXSHOW: int = 3
export const SIZE_MAXHIDE: int = 4
export const DFC_CAPTION: int = 1
export const DFC_MENU: int = 2
export const DFC_SCROLL: int = 3
export const DFC_BUTTON: int = 4
export const DFC_POPUPMENU: int = 5
export const IDANI_OPEN: int = 1
export const IDANI_CAPTION: int = 3
export const CF_TEXT: int = 1
export const CF_BITMAP: int = 2
export const CF_METAFILEPICT: int = 3
export const CF_SYLK: int = 4
export const CF_DIF: int = 5
export const CF_TIFF: int = 6
export const CF_OEMTEXT: int = 7
export const CF_DIB: int = 8
export const CF_PALETTE: int = 9
export const CF_PENDATA: int = 10
export const CF_RIFF: int = 11
export const CF_WAVE: int = 12
export const CF_UNICODETEXT: int = 13
export const CF_ENHMETAFILE: int = 14
export const CF_HDROP: int = 15
export const CF_LOCALE: int = 16
export const CF_DIBV5: int = 17
export const CF_MAX: int = 18
export const ODT_MENU: int = 1
export const ODT_LISTBOX: int = 2
export const ODT_COMBOBOX: int = 3
export const ODT_BUTTON: int = 4
export const ODT_STATIC: int = 5
export const FLASHW_STOP: int = 0
export const DLGWINDOWEXTRA: int = 30
export const INPUT_MOUSE: int = 0
export const INPUT_KEYBOARD: int = 1
export const INPUT_HARDWARE: int = 2
export const MAX_TOUCH_COUNT: int = 256
export const SM_CXSCREEN: int = 0
export const SM_CYSCREEN: int = 1
export const SM_CXVSCROLL: int = 2
export const SM_CYHSCROLL: int = 3
export const SM_CYCAPTION: int = 4
export const SM_CXBORDER: int = 5
export const SM_CYBORDER: int = 6
export const SM_CXDLGFRAME: int = 7
export const SM_CYDLGFRAME: int = 8
export const SM_CYVTHUMB: int = 9
export const SM_CXHTHUMB: int = 10
export const SM_CXICON: int = 11
export const SM_CYICON: int = 12
export const SM_CXCURSOR: int = 13
export const SM_CYCURSOR: int = 14
export const SM_CYMENU: int = 15
export const SM_CXFULLSCREEN: int = 16
export const SM_CYFULLSCREEN: int = 17
export const SM_CYKANJIWINDOW: int = 18
export const SM_MOUSEPRESENT: int = 19
export const SM_CYVSCROLL: int = 20
export const SM_CXHSCROLL: int = 21
export const SM_DEBUG: int = 22
export const SM_SWAPBUTTON: int = 23
export const SM_RESERVED1: int = 24
export const SM_RESERVED2: int = 25
export const SM_RESERVED3: int = 26
export const SM_RESERVED4: int = 27
export const SM_CXMIN: int = 28
export const SM_CYMIN: int = 29
export const SM_CXSIZE: int = 30
export const SM_CYSIZE: int = 31
export const SM_CXFRAME: int = 32
export const SM_CYFRAME: int = 33
export const SM_CXMINTRACK: int = 34
export const SM_CYMINTRACK: int = 35
export const SM_CXDOUBLECLK: int = 36
export const SM_CYDOUBLECLK: int = 37
export const SM_CXICONSPACING: int = 38
export const SM_CYICONSPACING: int = 39
export const SM_MENUDROPALIGNMENT: int = 40
export const SM_PENWINDOWS: int = 41
export const SM_DBCSENABLED: int = 42
export const SM_CMOUSEBUTTONS: int = 43
export const SM_SECURE: int = 44
export const SM_CXEDGE: int = 45
export const SM_CYEDGE: int = 46
export const SM_CXMINSPACING: int = 47
export const SM_CYMINSPACING: int = 48
export const SM_CXSMICON: int = 49
export const SM_CYSMICON: int = 50
export const SM_CYSMCAPTION: int = 51
export const SM_CXSMSIZE: int = 52
export const SM_CYSMSIZE: int = 53
export const SM_CXMENUSIZE: int = 54
export const SM_CYMENUSIZE: int = 55
export const SM_ARRANGE: int = 56
export const SM_CXMINIMIZED: int = 57
export const SM_CYMINIMIZED: int = 58
export const SM_CXMAXTRACK: int = 59
export const SM_CYMAXTRACK: int = 60
export const SM_CXMAXIMIZED: int = 61
export const SM_CYMAXIMIZED: int = 62
export const SM_NETWORK: int = 63
export const SM_CLEANBOOT: int = 67
export const SM_CXDRAG: int = 68
export const SM_CYDRAG: int = 69
export const SM_SHOWSOUNDS: int = 70
export const SM_CXMENUCHECK: int = 71
export const SM_CYMENUCHECK: int = 72
export const SM_SLOWMACHINE: int = 73
export const SM_MIDEASTENABLED: int = 74
export const SM_MOUSEWHEELPRESENT: int = 75
export const SM_XVIRTUALSCREEN: int = 76
export const SM_YVIRTUALSCREEN: int = 77
export const SM_CXVIRTUALSCREEN: int = 78
export const SM_CYVIRTUALSCREEN: int = 79
export const SM_CMONITORS: int = 80
export const SM_SAMEDISPLAYFORMAT: int = 81
export const SM_IMMENABLED: int = 82
export const SM_CXFOCUSBORDER: int = 83
export const SM_CYFOCUSBORDER: int = 84
export const SM_TABLETPC: int = 86
export const SM_MEDIACENTER: int = 87
export const SM_STARTER: int = 88
export const SM_SERVERR2: int = 89
export const SM_MOUSEHORIZONTALWHEELPRESENT: int = 91
export const SM_CXPADDEDBORDER: int = 92
export const SM_DIGITIZER: int = 94
export const SM_MAXIMUMTOUCHES: int = 95
export const SM_CMETRICS: int = 97
export const MNC_IGNORE: int = 0
export const MNC_CLOSE: int = 1
export const MNC_EXECUTE: int = 2
export const MNC_SELECT: int = 3
export const MND_CONTINUE: int = 0
export const MND_ENDMENU: int = 1
export const LSFW_LOCK: int = 1
export const LSFW_UNLOCK: int = 2
export const CTLCOLOR_MSGBOX: int = 0
export const CTLCOLOR_EDIT: int = 1
export const CTLCOLOR_LISTBOX: int = 2
export const CTLCOLOR_BTN: int = 3
export const CTLCOLOR_DLG: int = 4
export const CTLCOLOR_SCROLLBAR: int = 5
export const CTLCOLOR_STATIC: int = 6
export const CTLCOLOR_MAX: int = 7
export const COLOR_SCROLLBAR: int = 0
export const COLOR_BACKGROUND: int = 1
export const COLOR_ACTIVECAPTION: int = 2
export const COLOR_INACTIVECAPTION: int = 3
export const COLOR_MENU: int = 4
export const COLOR_WINDOW: int = 5
export const COLOR_WINDOWFRAME: int = 6
export const COLOR_MENUTEXT: int = 7
export const COLOR_WINDOWTEXT: int = 8
export const COLOR_CAPTIONTEXT: int = 9
export const COLOR_ACTIVEBORDER: int = 10
export const COLOR_INACTIVEBORDER: int = 11
export const COLOR_APPWORKSPACE: int = 12
export const COLOR_HIGHLIGHT: int = 13
export const COLOR_HIGHLIGHTTEXT: int = 14
export const COLOR_BTNFACE: int = 15
export const COLOR_BTNSHADOW: int = 16
export const COLOR_GRAYTEXT: int = 17
export const COLOR_BTNTEXT: int = 18
export const COLOR_INACTIVECAPTIONTEXT: int = 19
export const COLOR_BTNHIGHLIGHT: int = 20
export const COLOR_3DDKSHADOW: int = 21
export const COLOR_3DLIGHT: int = 22
export const COLOR_INFOTEXT: int = 23
export const COLOR_INFOBK: int = 24
export const COLOR_HOTLIGHT: int = 26
export const COLOR_GRADIENTACTIVECAPTION: int = 27
export const COLOR_GRADIENTINACTIVECAPTION: int = 28
export const COLOR_MENUHILIGHT: int = 29
export const COLOR_MENUBAR: int = 30
export const GW_HWNDFIRST: int = 0
export const GW_HWNDLAST: int = 1
export const GW_HWNDNEXT: int = 2
export const GW_HWNDPREV: int = 3
export const GW_OWNER: int = 4
export const GW_CHILD: int = 5
export const GW_ENABLEDPOPUP: int = 6
export const GW_MAX: int = 6
export const CURSOR_CREATION_SCALING_NONE: int = 1
export const CURSOR_CREATION_SCALING_DEFAULT: int = 2
export const IMAGE_BITMAP: int = 0
export const IMAGE_ICON: int = 1
export const IMAGE_CURSOR: int = 2
export const IMAGE_ENHMETAFILE: int = 3
export const RES_ICON: int = 1
export const RES_CURSOR: int = 2
export const ORD_LANGDRIVER: int = 1
export const IDOK: int = 1
export const IDCANCEL: int = 2
export const IDABORT: int = 3
export const IDRETRY: int = 4
export const IDIGNORE: int = 5
export const IDYES: int = 6
export const IDNO: int = 7
export const IDCLOSE: int = 8
export const IDHELP: int = 9
export const IDTRYAGAIN: int = 10
export const IDCONTINUE: int = 11
export const IDTIMEOUT: int = 32000
export const WB_LEFT: int = 0
export const WB_RIGHT: int = 1
export const WB_ISDELIMITER: int = 2
export const BN_CLICKED: int = 0
export const BN_PAINT: int = 1
export const BN_HILITE: int = 2
export const BN_UNHILITE: int = 3
export const BN_DISABLE: int = 4
export const BN_DOUBLECLICKED: int = 5
export const BN_SETFOCUS: int = 6
export const BN_KILLFOCUS: int = 7
export const STN_CLICKED: int = 0
export const STN_DBLCLK: int = 1
export const STN_ENABLE: int = 2
export const STN_DISABLE: int = 3
export const DWL_MSGRESULT: int = 0
export const DWL_DLGPROC: int = 4
export const DWL_USER: int = 8
export const DWLP_MSGRESULT: int = 0
export const LB_OKAY: int = 0
export const LBN_SELCHANGE: int = 1
export const LBN_DBLCLK: int = 2
export const LBN_SELCANCEL: int = 3
export const LBN_SETFOCUS: int = 4
export const LBN_KILLFOCUS: int = 5
export const CB_OKAY: int = 0
export const CBN_SELCHANGE: int = 1
export const CBN_DBLCLK: int = 2
export const CBN_SETFOCUS: int = 3
export const CBN_KILLFOCUS: int = 4
export const CBN_EDITCHANGE: int = 5
export const CBN_EDITUPDATE: int = 6
export const CBN_DROPDOWN: int = 7
export const CBN_CLOSEUP: int = 8
export const CBN_SELENDOK: int = 9
export const CBN_SELENDCANCEL: int = 10
export const IDH_NO_HELP: int = 28440
export const IDH_MISSING_CONTEXT: int = 28441
export const IDH_GENERIC_HELP_BUTTON: int = 28442
export const IDH_OK: int = 28443
export const IDH_CANCEL: int = 28444
export const IDH_HELP: int = 28445
export const GR_GDIOBJECTS: int = 0
export const GR_USEROBJECTS: int = 1
export const GR_GDIOBJECTS_PEAK: int = 2
export const GR_USEROBJECTS_PEAK: int = 4
export const MAX_TOUCH_PREDICTION_FILTER_TAPS: int = 3
export const TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY: int = 8
export const TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME: int = 8
export const TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP: int = 1
export const MAX_LOGICALDPIOVERRIDE: int = 2
export const MOUSEWHEEL_ROUTING_FOCUS: int = 0
export const MOUSEWHEEL_ROUTING_HYBRID: int = 1
export const MOUSEWHEEL_ROUTING_MOUSE_POS: int = 2
export const DISP_CHANGE_SUCCESSFUL: int = 0
export const DISP_CHANGE_RESTART: int = 1
export const SSGF_NONE: int = 0
export const SSGF_DISPLAY: int = 3
export const SSTF_NONE: int = 0
export const SSTF_CHARS: int = 1
export const SSTF_BORDER: int = 2
export const SSTF_DISPLAY: int = 3
export const SSWF_NONE: int = 0
export const SSWF_TITLE: int = 1
export const SSWF_WINDOW: int = 2
export const SSWF_DISPLAY: int = 3
export const SSWF_CUSTOM: int = 4
export const CHILDID_SELF: int = 0
export const INDEXID_OBJECT: int = 0
export const INDEXID_CONTAINER: int = 0
export const SOUND_SYSTEM_STARTUP: int = 1
export const SOUND_SYSTEM_SHUTDOWN: int = 2
export const SOUND_SYSTEM_BEEP: int = 3
export const SOUND_SYSTEM_ERROR: int = 4
export const SOUND_SYSTEM_QUESTION: int = 5
export const SOUND_SYSTEM_WARNING: int = 6
export const SOUND_SYSTEM_INFORMATION: int = 7
export const SOUND_SYSTEM_MAXIMIZE: int = 8
export const SOUND_SYSTEM_MINIMIZE: int = 9
export const SOUND_SYSTEM_RESTOREUP: int = 10
export const SOUND_SYSTEM_RESTOREDOWN: int = 11
export const SOUND_SYSTEM_APPSTART: int = 12
export const SOUND_SYSTEM_FAULT: int = 13
export const SOUND_SYSTEM_APPEND: int = 14
export const SOUND_SYSTEM_MENUCOMMAND: int = 15
export const SOUND_SYSTEM_MENUPOPUP: int = 16
export const CSOUND_SYSTEM: int = 16
export const ALERT_SYSTEM_INFORMATIONAL: int = 1
export const ALERT_SYSTEM_WARNING: int = 2
export const ALERT_SYSTEM_ERROR: int = 3
export const ALERT_SYSTEM_QUERY: int = 4
export const ALERT_SYSTEM_CRITICAL: int = 5
export const CALERT_SYSTEM: int = 6
export const USER_DEFAULT_SCREEN_DPI: int = 96
export const CCHILDREN_TITLEBAR: int = 5
export const CCHILDREN_SCROLLBAR: int = 5
export const GA_PARENT: int = 1
export const GA_ROOT: int = 2
export const GA_ROOTOWNER: int = 3
export const RIM_INPUT: int = 0
export const RIM_INPUTSINK: int = 1
export const RIM_TYPEMOUSE: int = 0
export const RIM_TYPEKEYBOARD: int = 1
export const RIM_TYPEHID: int = 2
export const RIM_TYPEMAX: int = 2
export const MOUSE_MOVE_RELATIVE: int = 0
export const MOUSE_MOVE_ABSOLUTE: int = 1
export const RI_KEY_MAKE: int = 0
export const RI_KEY_BREAK: int = 1
export const RI_KEY_E0: int = 2
export const RI_KEY_E1: int = 4
export const RI_KEY_TERMSRV_SET_LED: int = 8
export const GIDC_ARRIVAL: int = 1
export const GIDC_REMOVAL: int = 2
export const POINTER_DEVICE_PRODUCT_STRING_MAX: int = 520
export const MSGFLT_ADD: int = 1
export const MSGFLT_REMOVE: int = 2
export const GID_BEGIN: int = 1
export const GID_END: int = 2
export const GID_ZOOM: int = 3
export const GID_PAN: int = 4
export const GID_ROTATE: int = 5
export const GID_TWOFINGERTAP: int = 6
export const GID_PRESSANDTAP: int = 7
export const GESTURECONFIGMAXCOUNT: int = 256
export const MAX_STR_BLOCKREASON: int = 256
export const MAX_LEADBYTES: int = 12
export const MAX_DEFAULTCHAR: int = 2
export const LOCALE_ALL: int = 0
export const CSTR_LESS_THAN: int = 1
export const CSTR_EQUAL: int = 2
export const CSTR_GREATER_THAN: int = 3
export const CP_ACP: int = 0
export const CP_OEMCP: int = 1
export const CP_MACCP: int = 2
export const CP_THREAD_ACP: int = 3
export const CP_SYMBOL: int = 42
export const CP_UTF7: int = 65000
export const CP_UTF8: int = 65001
export const CTRY_DEFAULT: int = 0
export const CTRY_ALBANIA: int = 355
export const CTRY_ALGERIA: int = 213
export const CTRY_ARGENTINA: int = 54
export const CTRY_ARMENIA: int = 374
export const CTRY_AUSTRALIA: int = 61
export const CTRY_AUSTRIA: int = 43
export const CTRY_AZERBAIJAN: int = 994
export const CTRY_BAHRAIN: int = 973
export const CTRY_BELARUS: int = 375
export const CTRY_BELGIUM: int = 32
export const CTRY_BELIZE: int = 501
export const CTRY_BOLIVIA: int = 591
export const CTRY_BRAZIL: int = 55
export const CTRY_BRUNEI_DARUSSALAM: int = 673
export const CTRY_BULGARIA: int = 359
export const CTRY_CANADA: int = 2
export const CTRY_CARIBBEAN: int = 1
export const CTRY_CHILE: int = 56
export const CTRY_COLOMBIA: int = 57
export const CTRY_COSTA_RICA: int = 506
export const CTRY_CROATIA: int = 385
export const CTRY_CZECH: int = 420
export const CTRY_DENMARK: int = 45
export const CTRY_DOMINICAN_REPUBLIC: int = 1
export const CTRY_ECUADOR: int = 593
export const CTRY_EGYPT: int = 20
export const CTRY_EL_SALVADOR: int = 503
export const CTRY_ESTONIA: int = 372
export const CTRY_FAEROE_ISLANDS: int = 298
export const CTRY_FINLAND: int = 358
export const CTRY_FRANCE: int = 33
export const CTRY_GEORGIA: int = 995
export const CTRY_GERMANY: int = 49
export const CTRY_GREECE: int = 30
export const CTRY_GUATEMALA: int = 502
export const CTRY_HONDURAS: int = 504
export const CTRY_HONG_KONG: int = 852
export const CTRY_HUNGARY: int = 36
export const CTRY_ICELAND: int = 354
export const CTRY_INDIA: int = 91
export const CTRY_INDONESIA: int = 62
export const CTRY_IRAN: int = 981
export const CTRY_IRAQ: int = 964
export const CTRY_IRELAND: int = 353
export const CTRY_ISRAEL: int = 972
export const CTRY_ITALY: int = 39
export const CTRY_JAMAICA: int = 1
export const CTRY_JAPAN: int = 81
export const CTRY_JORDAN: int = 962
export const CTRY_KAZAKSTAN: int = 7
export const CTRY_KENYA: int = 254
export const CTRY_KUWAIT: int = 965
export const CTRY_KYRGYZSTAN: int = 996
export const CTRY_LATVIA: int = 371
export const CTRY_LEBANON: int = 961
export const CTRY_LIBYA: int = 218
export const CTRY_LIECHTENSTEIN: int = 41
export const CTRY_LITHUANIA: int = 370
export const CTRY_LUXEMBOURG: int = 352
export const CTRY_MACAU: int = 853
export const CTRY_MACEDONIA: int = 389
export const CTRY_MALAYSIA: int = 60
export const CTRY_MALDIVES: int = 960
export const CTRY_MEXICO: int = 52
export const CTRY_MONACO: int = 33
export const CTRY_MONGOLIA: int = 976
export const CTRY_MOROCCO: int = 212
export const CTRY_NETHERLANDS: int = 31
export const CTRY_NEW_ZEALAND: int = 64
export const CTRY_NICARAGUA: int = 505
export const CTRY_NORWAY: int = 47
export const CTRY_OMAN: int = 968
export const CTRY_PAKISTAN: int = 92
export const CTRY_PANAMA: int = 507
export const CTRY_PARAGUAY: int = 595
export const CTRY_PERU: int = 51
export const CTRY_PHILIPPINES: int = 63
export const CTRY_POLAND: int = 48
export const CTRY_PORTUGAL: int = 351
export const CTRY_PRCHINA: int = 86
export const CTRY_PUERTO_RICO: int = 1
export const CTRY_QATAR: int = 974
export const CTRY_ROMANIA: int = 40
export const CTRY_RUSSIA: int = 7
export const CTRY_SAUDI_ARABIA: int = 966
export const CTRY_SERBIA: int = 381
export const CTRY_SINGAPORE: int = 65
export const CTRY_SLOVAK: int = 421
export const CTRY_SLOVENIA: int = 386
export const CTRY_SOUTH_AFRICA: int = 27
export const CTRY_SOUTH_KOREA: int = 82
export const CTRY_SPAIN: int = 34
export const CTRY_SWEDEN: int = 46
export const CTRY_SWITZERLAND: int = 41
export const CTRY_SYRIA: int = 963
export const CTRY_TAIWAN: int = 886
export const CTRY_TATARSTAN: int = 7
export const CTRY_THAILAND: int = 66
export const CTRY_TRINIDAD_Y_TOBAGO: int = 1
export const CTRY_TUNISIA: int = 216
export const CTRY_TURKEY: int = 90
export const CTRY_UAE: int = 971
export const CTRY_UKRAINE: int = 380
export const CTRY_UNITED_KINGDOM: int = 44
export const CTRY_UNITED_STATES: int = 1
export const CTRY_URUGUAY: int = 598
export const CTRY_UZBEKISTAN: int = 7
export const CTRY_VENEZUELA: int = 58
export const CTRY_VIET_NAM: int = 84
export const CTRY_YEMEN: int = 967
export const CTRY_ZIMBABWE: int = 263
export const CAL_GREGORIAN: int = 1
export const CAL_GREGORIAN_US: int = 2
export const CAL_JAPAN: int = 3
export const CAL_TAIWAN: int = 4
export const CAL_KOREA: int = 5
export const CAL_HIJRI: int = 6
export const CAL_THAI: int = 7
export const CAL_HEBREW: int = 8
export const CAL_GREGORIAN_ME_FRENCH: int = 9
export const CAL_GREGORIAN_ARABIC: int = 10
export const CAL_GREGORIAN_XLIT_ENGLISH: int = 11
export const CAL_GREGORIAN_XLIT_FRENCH: int = 12
export const CAL_PERSIAN: int = 22
export const CAL_UMALQURA: int = 23
export const CTRL_C_EVENT: int = 0
export const CTRL_BREAK_EVENT: int = 1
export const CTRL_CLOSE_EVENT: int = 2
export const CTRL_LOGOFF_EVENT: int = 5
export const CTRL_SHUTDOWN_EVENT: int = 6
export const CONSOLE_FULLSCREEN: int = 1
export const CONSOLE_FULLSCREEN_HARDWARE: int = 2
export const CONSOLE_FULLSCREEN_MODE: int = 1
export const CONSOLE_WINDOWED_MODE: int = 2
export const CONSOLE_TEXTMODE_BUFFER: int = 1
export const VS_VERSION_INFO: int = 1
export const VS_USER_DEFINED: int = 100
export const REG_SECURE_CONNECTION: int = 1
export const MAX_REASON_NAME_LEN: int = 64
export const MAX_REASON_DESC_LEN: int = 256
export const MAX_REASON_BUGID_LEN: int = 32
export const MAX_REASON_COMMENT_LEN: int = 512
export const SHUTDOWN_TYPE_LEN: int = 32
export const POLICY_SHOWREASONUI_NEVER: int = 0
export const POLICY_SHOWREASONUI_ALWAYS: int = 1
export const POLICY_SHOWREASONUI_WORKSTATIONONLY: int = 2
export const POLICY_SHOWREASONUI_SERVERONLY: int = 3
export const SNAPSHOT_POLICY_NEVER: int = 0
export const SNAPSHOT_POLICY_ALWAYS: int = 1
export const SNAPSHOT_POLICY_UNPLANNED: int = 2
export const MAX_NUM_REASONS: int = 256
export const NETPROPERTY_PERSISTENT: int = 1
export const XST_NULL: int = 0
export const XST_INCOMPLETE: int = 1
export const XST_CONNECTED: int = 2
export const XST_INIT1: int = 3
export const XST_INIT2: int = 4
export const XST_REQSENT: int = 5
export const XST_DATARCVD: int = 6
export const XST_POKESENT: int = 7
export const XST_POKEACKRCVD: int = 8
export const XST_EXECSENT: int = 9
export const XST_EXECACKRCVD: int = 10
export const XST_ADVSENT: int = 11
export const XST_UNADVSENT: int = 12
export const XST_ADVACKRCVD: int = 13
export const XST_UNADVACKRCVD: int = 14
export const XST_ADVDATASENT: int = 15
export const XST_ADVDATAACKRCVD: int = 16
export const CP_WINANSI: int = 1004
export const CP_WINUNICODE: int = 1200
export const XTYP_SHIFT: int = 4
export const SZDDESYS_TOPIC: [char] = "System"
export const SZDDESYS_ITEM_TOPICS: [char] = "Topics"
export const SZDDESYS_ITEM_SYSITEMS: [char] = "SysItems"
export const SZDDESYS_ITEM_RTNMSG: [char] = "ReturnMessage"
export const SZDDESYS_ITEM_STATUS: [char] = "Status"
export const SZDDESYS_ITEM_FORMATS: [char] = "Formats"
export const SZDDESYS_ITEM_HELP: [char] = "Help"
export const SZDDE_ITEM_ITEMLIST: [char] = "TopicItemList"
export const EC_ENABLEALL: int = 0
export const EC_QUERYWAITING: int = 2
export const DMLERR_NO_ERROR: int = 0
export const MH_CREATE: int = 1
export const MH_KEEP: int = 2
export const MH_DELETE: int = 3
export const MH_CLEANUP: int = 4
export const MAX_MONITORS: int = 4
export const FILEOPENORD: int = 1536
export const MULTIFILEOPENORD: int = 1537
export const PRINTDLGORD: int = 1538
export const PRNSETUPDLGORD: int = 1539
export const FINDDLGORD: int = 1540
export const REPLACEDLGORD: int = 1541
export const FONTDLGORD: int = 1542
export const FORMATDLGORD31: int = 1543
export const FORMATDLGORD30: int = 1544
export const RUNDLGORD: int = 1545
export const PAGESETUPDLGORD: int = 1546
export const NEWFILEOPENORD: int = 1547
export const PRINTDLGEXORD: int = 1549
export const PAGESETUPDLGORDMOTIF: int = 1550
export const COLORMGMTDLGORD: int = 1551
export const NEWFILEOPENV2ORD: int = 1552
export const NEWFILEOPENV3ORD: int = 1553
export const NEWFORMATDLGWITHLINK: int = 1591
export const IDC_MANAGE_LINK: int = 1592
export const MAXPNAMELEN: int = 32
export const MAXERRORLENGTH: int = 256
export const MAX_JOYSTICKOEMVXDNAME: int = 260
export const MMSYSERR_BASE: int = 0
export const WAVERR_BASE: int = 32
export const MIDIERR_BASE: int = 64
export const TIMERR_BASE: int = 96
export const JOYERR_BASE: int = 160
export const MCIERR_BASE: int = 256
export const MIXERR_BASE: int = 1024
export const MCI_STRING_OFFSET: int = 512
export const MCI_VD_OFFSET: int = 1024
export const MCI_CD_OFFSET: int = 1088
export const MCI_WAVE_OFFSET: int = 1152
export const MCI_SEQ_OFFSET: int = 1216
export const MMSYSERR_NOERROR: int = 0
export const MCI_DEVTYPE_VCR: int = 513
export const MCI_DEVTYPE_VIDEODISC: int = 514
export const MCI_DEVTYPE_OVERLAY: int = 515
export const MCI_DEVTYPE_CD_AUDIO: int = 516
export const MCI_DEVTYPE_DAT: int = 517
export const MCI_DEVTYPE_SCANNER: int = 518
export const MCI_DEVTYPE_ANIMATION: int = 519
export const MCI_DEVTYPE_DIGITAL_VIDEO: int = 520
export const MCI_DEVTYPE_OTHER: int = 521
export const MCI_DEVTYPE_WAVEFORM_AUDIO: int = 522
export const MCI_DEVTYPE_SEQUENCER: int = 523
export const MCI_FORMAT_MILLISECONDS: int = 0
export const MCI_FORMAT_HMS: int = 1
export const MCI_FORMAT_MSF: int = 2
export const MCI_FORMAT_FRAMES: int = 3
export const MCI_FORMAT_SMPTE_24: int = 4
export const MCI_FORMAT_SMPTE_25: int = 5
export const MCI_FORMAT_SMPTE_30: int = 6
export const MCI_FORMAT_SMPTE_30DROP: int = 7
export const MCI_FORMAT_BYTES: int = 8
export const MCI_FORMAT_SAMPLES: int = 9
export const MCI_FORMAT_TMSF: int = 10
export const MCI_SEQ_NONE: int = 65533
export const MCI_SEQ_MAPPER: int = 65535
export const MMIOERR_BASE: int = 256
export const MMIOM_SEEK: int = 2
export const MMIOM_OPEN: int = 3
export const MMIOM_CLOSE: int = 4
export const MMIOM_WRITEFLUSH: int = 5
export const MMIOM_RENAME: int = 6
export const SEEK_SET: int = 0
export const SEEK_CUR: int = 1
export const SEEK_END: int = 2
export const MMIO_DEFAULTBUFFER: int = 8192
export const SND_ALIAS_START: int = 0
export const WAVE_FORMAT_PCM: int = 1
export const MIDIPATCHSIZE: int = 128
export const MIDI_CACHE_ALL: int = 1
export const MIDI_CACHE_BESTFIT: int = 2
export const MIDI_CACHE_QUERY: int = 3
export const MIDI_UNCACHE: int = 4
export const MOD_MIDIPORT: int = 1
export const MOD_SYNTH: int = 2
export const MOD_SQSYNTH: int = 3
export const MOD_FMSYNTH: int = 4
export const MOD_MAPPER: int = 5
export const MOD_WAVETABLE: int = 6
export const MOD_SWSYNTH: int = 7
export const AUXCAPS_CDAUDIO: int = 1
export const AUXCAPS_AUXIN: int = 2
export const MIXER_SHORT_NAME_CHARS: int = 16
export const MIXER_LONG_NAME_CHARS: int = 64
export const MIXERLINE_TARGETTYPE_UNDEFINED: int = 0
export const MIXERLINE_TARGETTYPE_WAVEOUT: int = 1
export const MIXERLINE_TARGETTYPE_WAVEIN: int = 2
export const MIXERLINE_TARGETTYPE_MIDIOUT: int = 3
export const MIXERLINE_TARGETTYPE_MIDIIN: int = 4
export const MIXERLINE_TARGETTYPE_AUX: int = 5
export const JOY_POVFORWARD: int = 0
export const JOY_POVRIGHT: int = 9000
export const JOY_POVBACKWARD: int = 18000
export const JOY_POVLEFT: int = 27000
export const JOYSTICKID1: int = 0
export const JOYSTICKID2: int = 1
export const NEWTRANSPARENT: int = 3
export const QUERYROPSUPPORT: int = 40
export const SELECTDIB: int = 41
export const NCBNAMSZ: int = 16
export const MAX_LANA: int = 254
export const ALL_TRANSPORTS: [char] = "M\x00\x00\x00"
export const MS_NBF: [char] = "MNBF"
export const RPC_C_BINDING_INFINITE_TIMEOUT: int = 10
export const RPC_C_BINDING_MIN_TIMEOUT: int = 0
export const RPC_C_BINDING_DEFAULT_TIMEOUT: int = 5
export const RPC_C_BINDING_MAX_TIMEOUT: int = 9
export const RPC_C_LISTEN_MAX_CALLS_DEFAULT: int = 1234
export const RPC_C_PROTSEQ_MAX_REQS_DEFAULT: int = 10
export const RPC_C_BIND_TO_ALL_NICS: int = 1
export const RPC_C_OPT_BINDING_NONCAUSAL: int = 9
export const RPC_C_OPT_SECURITY_CALLBACK: int = 10
export const RPC_C_OPT_UNIQUE_BINDING: int = 11
export const RPC_C_OPT_TRANS_SEND_BUFFER_SIZE: int = 5
export const RPC_C_OPT_CALL_TIMEOUT: int = 12
export const RPC_C_OPT_DONT_LINGER: int = 13
export const RPC_C_OPT_TRUST_PEER: int = 14
export const RPC_C_OPT_ASYNC_BLOCK: int = 15
export const RPC_C_OPT_OPTIMIZE_TIME: int = 16
export const RPC_C_OPT_MAX_OPTIONS: int = 17
export const RPC_C_STATS_CALLS_IN: int = 0
export const RPC_C_STATS_CALLS_OUT: int = 1
export const RPC_C_STATS_PKTS_IN: int = 2
export const RPC_C_STATS_PKTS_OUT: int = 3
export const RPC_C_AUTHN_LEVEL_DEFAULT: int = 0
export const RPC_C_AUTHN_LEVEL_NONE: int = 1
export const RPC_C_AUTHN_LEVEL_CONNECT: int = 2
export const RPC_C_AUTHN_LEVEL_CALL: int = 3
export const RPC_C_AUTHN_LEVEL_PKT: int = 4
export const RPC_C_AUTHN_LEVEL_PKT_INTEGRITY: int = 5
export const RPC_C_AUTHN_LEVEL_PKT_PRIVACY: int = 6
export const RPC_C_IMP_LEVEL_DEFAULT: int = 0
export const RPC_C_IMP_LEVEL_ANONYMOUS: int = 1
export const RPC_C_IMP_LEVEL_IDENTIFY: int = 2
export const RPC_C_IMP_LEVEL_IMPERSONATE: int = 3
export const RPC_C_IMP_LEVEL_DELEGATE: int = 4
export const RPC_C_QOS_IDENTITY_STATIC: int = 0
export const RPC_C_QOS_IDENTITY_DYNAMIC: int = 1
export const RPC_C_AUTHN_NONE: int = 0
export const RPC_C_AUTHN_DCE_PRIVATE: int = 1
export const RPC_C_AUTHN_DCE_PUBLIC: int = 2
export const RPC_C_AUTHN_DEC_PUBLIC: int = 4
export const RPC_C_AUTHN_GSS_NEGOTIATE: int = 9
export const RPC_C_AUTHN_WINNT: int = 10
export const RPC_C_AUTHN_GSS_SCHANNEL: int = 14
export const RPC_C_AUTHN_GSS_KERBEROS: int = 16
export const RPC_C_AUTHN_DPA: int = 17
export const RPC_C_AUTHN_MSN: int = 18
export const RPC_C_AUTHN_DIGEST: int = 21
export const RPC_C_AUTHN_KERNEL: int = 20
export const RPC_C_AUTHN_NEGO_EXTENDER: int = 30
export const RPC_C_AUTHN_PKU2U: int = 31
export const RPC_C_AUTHN_LIVE_SSP: int = 32
export const RPC_C_AUTHN_LIVEXP_SSP: int = 35
export const RPC_C_AUTHN_CLOUD_AP: int = 36
export const RPC_C_AUTHN_MSONLINE: int = 82
export const RPC_C_AUTHN_MQ: int = 100
export const RPC_C_AUTHN_INFO_TYPE_HTTP: int = 1
export const RPC_C_HTTP_AUTHN_TARGET_SERVER: int = 1
export const RPC_C_HTTP_AUTHN_TARGET_PROXY: int = 2
export const RPC_C_HTTP_FLAG_USE_SSL: int = 1
export const RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME: int = 2
export const RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID: int = 8
export const RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK: int = 16
export const RPC_C_AUTHZ_NONE: int = 0
export const RPC_C_AUTHZ_NAME: int = 1
export const RPC_C_AUTHZ_DCE: int = 2
export const DCE_C_ERROR_STRING_LEN: int = 256
export const RPC_C_EP_ALL_ELTS: int = 0
export const RPC_C_EP_MATCH_BY_IF: int = 1
export const RPC_C_EP_MATCH_BY_OBJ: int = 2
export const RPC_C_EP_MATCH_BY_BOTH: int = 3
export const RPC_C_VERS_ALL: int = 1
export const RPC_C_VERS_COMPATIBLE: int = 2
export const RPC_C_VERS_EXACT: int = 3
export const RPC_C_VERS_MAJOR_ONLY: int = 4
export const RPC_C_VERS_UPTO: int = 5
export const RPC_C_MGMT_INQ_IF_IDS: int = 0
export const RPC_C_MGMT_INQ_PRINC_NAME: int = 1
export const RPC_C_MGMT_INQ_STATS: int = 2
export const RPC_C_MGMT_IS_SERVER_LISTEN: int = 3
export const RPC_C_MGMT_STOP_SERVER_LISTEN: int = 4
export const RPC_C_PARM_MAX_PACKET_LENGTH: int = 1
export const RPC_C_PARM_BUFFER_LENGTH: int = 2
export const RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED: int = 1
export const RPC_SYSTEM_HANDLE_FREE_RETRIEVED: int = 2
export const RPC_SYSTEM_HANDLE_FREE_ALL: int = 3
export const RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE: int = 4
export const RPC_P_ADDR_FORMAT_TCP_IPV4: int = 1
export const RPC_P_ADDR_FORMAT_TCP_IPV6: int = 2
export const RPC_PROXY_CONNECTION_TYPE_IN_PROXY: int = 0
export const RPC_PROXY_CONNECTION_TYPE_OUT_PROXY: int = 1
export const RPC_C_OPT_PRIVATE_SUPPRESS_WAKE: int = 1
export const RPC_C_OPT_PRIVATE_DO_NOT_DISTURB: int = 2
export const RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND: int = 3
export const RPC_C_NS_SYNTAX_DEFAULT: int = 0
export const RPC_C_NS_SYNTAX_DCE: int = 3
export const RPC_C_PROFILE_DEFAULT_ELT: int = 0
export const RPC_C_PROFILE_ALL_ELT: int = 1
export const RPC_C_PROFILE_MATCH_BY_IF: int = 2
export const RPC_C_PROFILE_MATCH_BY_MBR: int = 3
export const RPC_C_PROFILE_MATCH_BY_BOTH: int = 4
export const MaxNumberOfEEInfoParams: int = 4
export const RPC_EEINFO_VERSION: int = 1
export const EEInfoPreviousRecordsMissing: int = 1
export const EEInfoNextRecordsMissing: int = 2
export const EEInfoUseFileTime: int = 4
export const EEInfoGCCOM: int = 11
export const EEInfoGCFRS: int = 12
export const ABE_LEFT: int = 0
export const ABE_TOP: int = 1
export const ABE_RIGHT: int = 2
export const ABE_BOTTOM: int = 3
export const SE_ERR_FNF: int = 2
export const SE_ERR_PNF: int = 3
export const SE_ERR_ACCESSDENIED: int = 5
export const SE_ERR_OOM: int = 8
export const SE_ERR_DLLNOTFOUND: int = 32
export const SE_ERR_SHARE: int = 26
export const SE_ERR_ASSOCINCOMPLETE: int = 27
export const SE_ERR_DDETIMEOUT: int = 28
export const SE_ERR_DDEFAIL: int = 29
export const SE_ERR_DDEBUSY: int = 30
export const SE_ERR_NOASSOC: int = 31
export const NOTIFYICON_VERSION: int = 3
export const NOTIFYICON_VERSION_4: int = 4
export const SHGSI_ICONLOCATION: int = 0
export const PRINTACTION_OPEN: int = 0
export const PRINTACTION_PROPERTIES: int = 1
export const PRINTACTION_NETINSTALL: int = 2
export const PRINTACTION_NETINSTALLLINK: int = 3
export const PRINTACTION_TESTPAGE: int = 4
export const PRINTACTION_OPENNETPRN: int = 5
export const PRINTACTION_DOCUMENTDEFAULTS: int = 6
export const PRINTACTION_SERVERPROPERTIES: int = 7
export const SHIL_LARGE: int = 0
export const SHIL_SMALL: int = 1
export const SHIL_EXTRALARGE: int = 2
export const SHIL_SYSSMALL: int = 3
export const SHIL_JUMBO: int = 4
export const PERF_DATA_VERSION: int = 1
export const PERF_DATA_REVISION: int = 1
export const PERF_DETAIL_NOVICE: int = 100
export const PERF_DETAIL_ADVANCED: int = 200
export const PERF_DETAIL_EXPERT: int = 300
export const PERF_DETAIL_WIZARD: int = 400
export const WINPERF_LOG_NONE: int = 0
export const WINPERF_LOG_USER: int = 1
export const WINPERF_LOG_DEBUG: int = 2
export const WINPERF_LOG_VERBOSE: int = 3
export const FD_SETSIZE: int = 64
export const IPPROTO_IP: int = 0
export const IPPROTO_ICMP: int = 1
export const IPPROTO_IGMP: int = 2
export const IPPROTO_GGP: int = 3
export const IPPROTO_TCP: int = 6
export const IPPROTO_PUP: int = 12
export const IPPROTO_UDP: int = 17
export const IPPROTO_IDP: int = 22
export const IPPROTO_ND: int = 77
export const IPPROTO_RAW: int = 255
export const IPPROTO_MAX: int = 256
export const IPPORT_ECHO: int = 7
export const IPPORT_DISCARD: int = 9
export const IPPORT_SYSTAT: int = 11
export const IPPORT_DAYTIME: int = 13
export const IPPORT_NETSTAT: int = 15
export const IPPORT_FTP: int = 21
export const IPPORT_TELNET: int = 23
export const IPPORT_SMTP: int = 25
export const IPPORT_TIMESERVER: int = 37
export const IPPORT_NAMESERVER: int = 42
export const IPPORT_WHOIS: int = 43
export const IPPORT_MTP: int = 57
export const IPPORT_TFTP: int = 69
export const IPPORT_RJE: int = 77
export const IPPORT_FINGER: int = 79
export const IPPORT_TTYLINK: int = 87
export const IPPORT_SUPDUP: int = 95
export const IPPORT_EXECSERVER: int = 512
export const IPPORT_LOGINSERVER: int = 513
export const IPPORT_CMDSERVER: int = 514
export const IPPORT_EFSSERVER: int = 520
export const IPPORT_BIFFUDP: int = 512
export const IPPORT_WHOSERVER: int = 513
export const IPPORT_ROUTESERVER: int = 520
export const IPPORT_RESERVED: int = 1024
export const IMPLINK_IP: int = 155
export const IMPLINK_LOWEXPER: int = 156
export const IMPLINK_HIGHEXPER: int = 158
export const IN_CLASSA_NSHIFT: int = 24
export const IN_CLASSA_MAX: int = 128
export const IN_CLASSB_NSHIFT: int = 16
export const IN_CLASSB_MAX: int = 65536
export const IN_CLASSC_NSHIFT: int = 8
export const WSADESCRIPTION_LEN: int = 256
export const WSASYS_STATUS_LEN: int = 128
export const IP_OPTIONS: int = 1
export const IP_MULTICAST_IF: int = 2
export const IP_MULTICAST_TTL: int = 3
export const IP_MULTICAST_LOOP: int = 4
export const IP_ADD_MEMBERSHIP: int = 5
export const IP_DROP_MEMBERSHIP: int = 6
export const IP_TTL: int = 7
export const IP_TOS: int = 8
export const IP_DONTFRAGMENT: int = 9
export const IP_DEFAULT_MULTICAST_TTL: int = 1
export const IP_DEFAULT_MULTICAST_LOOP: int = 1
export const IP_MAX_MEMBERSHIPS: int = 20
export const SOCK_STREAM: int = 1
export const SOCK_DGRAM: int = 2
export const SOCK_RAW: int = 3
export const SOCK_RDM: int = 4
export const SOCK_SEQPACKET: int = 5
export const AF_UNSPEC: int = 0
export const AF_UNIX: int = 1
export const AF_INET: int = 2
export const AF_IMPLINK: int = 3
export const AF_PUP: int = 4
export const AF_CHAOS: int = 5
export const AF_IPX: int = 6
export const AF_NS: int = 6
export const AF_ISO: int = 7
export const AF_ECMA: int = 8
export const AF_DATAKIT: int = 9
export const AF_CCITT: int = 10
export const AF_SNA: int = 11
export const AF_DECnet: int = 12
export const AF_DLI: int = 13
export const AF_LAT: int = 14
export const AF_HYLINK: int = 15
export const AF_APPLETALK: int = 16
export const AF_NETBIOS: int = 17
export const AF_VOICEVIEW: int = 18
export const AF_FIREFOX: int = 19
export const AF_UNKNOWN1: int = 20
export const AF_BAN: int = 21
export const AF_MAX: int = 22
export const SOMAXCONN: int = 5
export const MSG_MAXIOVLEN: int = 16
export const MAXGETHOSTSTRUCT: int = 1024
export const ALG_SID_RSA_ANY: int = 0
export const ALG_SID_RSA_PKCS: int = 1
export const ALG_SID_RSA_MSATWORK: int = 2
export const ALG_SID_RSA_ENTRUST: int = 3
export const ALG_SID_RSA_PGP: int = 4
export const ALG_SID_DSS_ANY: int = 0
export const ALG_SID_DSS_PKCS: int = 1
export const ALG_SID_DSS_DMS: int = 2
export const ALG_SID_ECDSA: int = 3
export const ALG_SID_DES: int = 1
export const ALG_SID_3DES: int = 3
export const ALG_SID_DESX: int = 4
export const ALG_SID_IDEA: int = 5
export const ALG_SID_CAST: int = 6
export const ALG_SID_SAFERSK64: int = 7
export const ALG_SID_SAFERSK128: int = 8
export const ALG_SID_3DES_112: int = 9
export const ALG_SID_CYLINK_MEK: int = 12
export const ALG_SID_RC5: int = 13
export const ALG_SID_AES_128: int = 14
export const ALG_SID_AES_192: int = 15
export const ALG_SID_AES_256: int = 16
export const ALG_SID_AES: int = 17
export const ALG_SID_SKIPJACK: int = 10
export const ALG_SID_TEK: int = 11
export const CRYPT_MODE_CBCI: int = 6
export const CRYPT_MODE_CFBP: int = 7
export const CRYPT_MODE_OFBP: int = 8
export const CRYPT_MODE_CBCOFM: int = 9
export const CRYPT_MODE_CBCOFMI: int = 10
export const ALG_SID_RC2: int = 2
export const ALG_SID_RC4: int = 1
export const ALG_SID_SEAL: int = 2
export const ALG_SID_DH_SANDF: int = 1
export const ALG_SID_DH_EPHEM: int = 2
export const ALG_SID_AGREED_KEY_ANY: int = 3
export const ALG_SID_KEA: int = 4
export const ALG_SID_ECDH: int = 5
export const ALG_SID_ECDH_EPHEM: int = 6
export const ALG_SID_MD2: int = 1
export const ALG_SID_MD4: int = 2
export const ALG_SID_MD5: int = 3
export const ALG_SID_SHA: int = 4
export const ALG_SID_SHA1: int = 4
export const ALG_SID_MAC: int = 5
export const ALG_SID_RIPEMD: int = 6
export const ALG_SID_RIPEMD160: int = 7
export const ALG_SID_SSL3SHAMD5: int = 8
export const ALG_SID_HMAC: int = 9
export const ALG_SID_TLS1PRF: int = 10
export const ALG_SID_HASH_REPLACE_OWF: int = 11
export const ALG_SID_SHA_256: int = 12
export const ALG_SID_SHA_384: int = 13
export const ALG_SID_SHA_512: int = 14
export const ALG_SID_SSL3_MASTER: int = 1
export const ALG_SID_SCHANNEL_MASTER_HASH: int = 2
export const ALG_SID_SCHANNEL_MAC_KEY: int = 3
export const ALG_SID_PCT1_MASTER: int = 4
export const ALG_SID_SSL2_MASTER: int = 5
export const ALG_SID_TLS1_MASTER: int = 6
export const ALG_SID_SCHANNEL_ENC_KEY: int = 7
export const ALG_SID_ECMQV: int = 1
export const ALG_SID_EXAMPLE: int = 80
export const AT_KEYEXCHANGE: int = 1
export const AT_SIGNATURE: int = 2
export const CRYPT_USERDATA: int = 1
export const KP_IV: int = 1
export const KP_SALT: int = 2
export const KP_PADDING: int = 3
export const KP_MODE: int = 4
export const KP_MODE_BITS: int = 5
export const KP_PERMISSIONS: int = 6
export const KP_ALGID: int = 7
export const KP_BLOCKLEN: int = 8
export const KP_KEYLEN: int = 9
export const KP_SALT_EX: int = 10
export const KP_P: int = 11
export const KP_G: int = 12
export const KP_Q: int = 13
export const KP_X: int = 14
export const KP_Y: int = 15
export const KP_RA: int = 16
export const KP_RB: int = 17
export const KP_INFO: int = 18
export const KP_EFFECTIVE_KEYLEN: int = 19
export const KP_SCHANNEL_ALG: int = 20
export const KP_CLIENT_RANDOM: int = 21
export const KP_SERVER_RANDOM: int = 22
export const KP_RP: int = 23
export const KP_PRECOMP_MD5: int = 24
export const KP_PRECOMP_SHA: int = 25
export const KP_CERTIFICATE: int = 26
export const KP_CLEAR_KEY: int = 27
export const KP_PUB_EX_LEN: int = 28
export const KP_PUB_EX_VAL: int = 29
export const KP_KEYVAL: int = 30
export const KP_ADMIN_PIN: int = 31
export const KP_KEYEXCHANGE_PIN: int = 32
export const KP_SIGNATURE_PIN: int = 33
export const KP_PREHASH: int = 34
export const KP_ROUNDS: int = 35
export const KP_OAEP_PARAMS: int = 36
export const KP_CMS_KEY_INFO: int = 37
export const KP_CMS_DH_KEY_INFO: int = 38
export const KP_PUB_PARAMS: int = 39
export const KP_VERIFY_PARAMS: int = 40
export const KP_HIGHEST_VERSION: int = 41
export const KP_GET_USE_COUNT: int = 42
export const KP_PIN_ID: int = 43
export const KP_PIN_INFO: int = 44
export const PKCS5_PADDING: int = 1
export const RANDOM_PADDING: int = 2
export const ZERO_PADDING: int = 3
export const CRYPT_MODE_CBC: int = 1
export const CRYPT_MODE_ECB: int = 2
export const CRYPT_MODE_OFB: int = 3
export const CRYPT_MODE_CFB: int = 4
export const CRYPT_MODE_CTS: int = 5
export const PP_ENUMALGS: int = 1
export const PP_ENUMCONTAINERS: int = 2
export const PP_IMPTYPE: int = 3
export const PP_NAME: int = 4
export const PP_VERSION: int = 5
export const PP_CONTAINER: int = 6
export const PP_CHANGE_PASSWORD: int = 7
export const PP_KEYSET_SEC_DESCR: int = 8
export const PP_CERTCHAIN: int = 9
export const PP_KEY_TYPE_SUBTYPE: int = 10
export const PP_PROVTYPE: int = 16
export const PP_KEYSTORAGE: int = 17
export const PP_APPLI_CERT: int = 18
export const PP_SYM_KEYSIZE: int = 19
export const PP_SESSION_KEYSIZE: int = 20
export const PP_UI_PROMPT: int = 21
export const PP_ENUMALGS_EX: int = 22
export const PP_ENUMMANDROOTS: int = 25
export const PP_ENUMELECTROOTS: int = 26
export const PP_KEYSET_TYPE: int = 27
export const PP_ADMIN_PIN: int = 31
export const PP_KEYEXCHANGE_PIN: int = 32
export const PP_SIGNATURE_PIN: int = 33
export const PP_SIG_KEYSIZE_INC: int = 34
export const PP_KEYX_KEYSIZE_INC: int = 35
export const PP_UNIQUE_CONTAINER: int = 36
export const PP_SGC_INFO: int = 37
export const PP_USE_HARDWARE_RNG: int = 38
export const PP_KEYSPEC: int = 39
export const PP_ENUMEX_SIGNING_PROT: int = 40
export const PP_CRYPT_COUNT_KEY_USE: int = 41
export const PP_USER_CERTSTORE: int = 42
export const PP_SMARTCARD_READER: int = 43
export const PP_SMARTCARD_GUID: int = 45
export const PP_ROOT_CERTSTORE: int = 46
export const PP_SMARTCARD_READER_ICON: int = 47
export const CRYPT_FIRST: int = 1
export const CRYPT_NEXT: int = 2
export const CRYPT_SGC_ENUM: int = 4
export const CRYPT_IMPL_HARDWARE: int = 1
export const CRYPT_IMPL_SOFTWARE: int = 2
export const CRYPT_IMPL_MIXED: int = 3
export const CRYPT_IMPL_UNKNOWN: int = 4
export const CRYPT_IMPL_REMOVABLE: int = 8
export const PP_CLIENT_HWND: int = 1
export const PP_CONTEXT_INFO: int = 11
export const PP_KEYEXCHANGE_KEYSIZE: int = 12
export const PP_SIGNATURE_KEYSIZE: int = 13
export const PP_KEYEXCHANGE_ALG: int = 14
export const PP_SIGNATURE_ALG: int = 15
export const PP_DELETEKEY: int = 24
export const PP_PIN_PROMPT_STRING: int = 44
export const PP_SECURE_KEYEXCHANGE_PIN: int = 47
export const PP_SECURE_SIGNATURE_PIN: int = 48
export const PP_DISMISS_PIN_UI_SEC: int = 49
export const PP_IS_PFX_EPHEMERAL: int = 50
export const PROV_RSA_FULL: int = 1
export const PROV_RSA_SIG: int = 2
export const PROV_DSS: int = 3
export const PROV_FORTEZZA: int = 4
export const PROV_MS_EXCHANGE: int = 5
export const PROV_SSL: int = 6
export const PROV_RSA_SCHANNEL: int = 12
export const PROV_DSS_DH: int = 13
export const PROV_EC_ECDSA_SIG: int = 14
export const PROV_EC_ECNRA_SIG: int = 15
export const PROV_EC_ECDSA_FULL: int = 16
export const PROV_EC_ECNRA_FULL: int = 17
export const PROV_DH_SCHANNEL: int = 18
export const PROV_SPYRUS_LYNKS: int = 20
export const PROV_RNG: int = 21
export const PROV_INTEL_SEC: int = 22
export const PROV_REPLACE_OWF: int = 23
export const PROV_RSA_AES: int = 24
export const MS_DEF_PROV_A: [char] = "Microsoft Base Cryptographic Provider v1.0"
export const MS_ENHANCED_PROV_A: [char] = "Microsoft Enhanced Cryptographic Provider v1.0"
export const MS_STRONG_PROV_A: [char] = "Microsoft Strong Cryptographic Provider"
export const MS_DEF_RSA_SIG_PROV_A: [char] = "Microsoft RSA Signature Cryptographic Provider"
export const MS_DEF_RSA_SCHANNEL_PROV_A: [char] = "Microsoft RSA SChannel Cryptographic Provider"
export const MS_DEF_DSS_PROV_A: [char] = "Microsoft Base DSS Cryptographic Provider"
export const MS_DEF_DSS_DH_PROV_A: [char] = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
export const MS_ENH_DSS_DH_PROV_A: [char] = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
export const MS_DEF_DH_SCHANNEL_PROV_A: [char] = "Microsoft DH SChannel Cryptographic Provider"
export const MS_SCARD_PROV_A: [char] = "Microsoft Base Smart Card Crypto Provider"
export const MS_ENH_RSA_AES_PROV_A: [char] = "Microsoft Enhanced RSA and AES Cryptographic Provider"
export const MS_ENH_RSA_AES_PROV_XP_A: [char] = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"
export const MAXUIDLEN: int = 64
export const EXPO_OFFLOAD_REG_VALUE: [char] = "ExpoOffload"
export const EXPO_OFFLOAD_FUNC_NAME: [char] = "OffloadModExpo"
export const szKEY_CRYPTOAPI_PRIVATE_KEY_OPTIONS: [char] = "Software\\Policies\\Microsoft\\Cryptography"
export const szKEY_CACHE_ENABLED: [char] = "CachePrivateKeys"
export const szKEY_CACHE_SECONDS: [char] = "PrivateKeyLifetimeSeconds"
export const szPRIV_KEY_CACHE_MAX_ITEMS: [char] = "PrivKeyCacheMaxItems"
export const cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT: int = 20
export const szPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS: [char] = "PrivKeyCachePurgeIntervalSeconds"
export const cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT: int = 86400
export const CUR_BLOB_VERSION: int = 2
export const BCRYPT_OBJECT_ALIGNMENT: int = 16
export const BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION: int = 1
export const BCRYPTBUFFER_VERSION: int = 0
export const BCRYPT_HASH_INTERFACE_MAJORVERSION_2: int = 2
export const NCRYPT_MAX_KEY_NAME_LENGTH: int = 512
export const NCRYPT_MAX_ALG_ID_LENGTH: int = 512
export const NCRYPTBUFFER_VERSION: int = 0
export const NCRYPTBUFFER_EMPTY: int = 0
export const NCRYPTBUFFER_DATA: int = 1
export const NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING: int = 3
export const NCRYPTBUFFER_PROTECTION_FLAGS: int = 4
export const NCRYPTBUFFER_SSL_CLIENT_RANDOM: int = 20
export const NCRYPTBUFFER_SSL_SERVER_RANDOM: int = 21
export const NCRYPTBUFFER_SSL_HIGHEST_VERSION: int = 22
export const NCRYPTBUFFER_SSL_CLEAR_KEY: int = 23
export const NCRYPTBUFFER_SSL_KEY_ARG_DATA: int = 24
export const NCRYPTBUFFER_SSL_SESSION_HASH: int = 25
export const NCRYPTBUFFER_PKCS_OID: int = 40
export const NCRYPTBUFFER_PKCS_ALG_OID: int = 41
export const NCRYPTBUFFER_PKCS_ALG_PARAM: int = 42
export const NCRYPTBUFFER_PKCS_ALG_ID: int = 43
export const NCRYPTBUFFER_PKCS_ATTRS: int = 44
export const NCRYPTBUFFER_PKCS_KEY_NAME: int = 45
export const NCRYPTBUFFER_PKCS_SECRET: int = 46
export const NCRYPTBUFFER_CERT_BLOB: int = 47
export const NCRYPTBUFFER_CLAIM_IDBINDING_NONCE: int = 48
export const NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE: int = 49
export const NCRYPTBUFFER_KEY_PROPERTY_FLAGS: int = 50
export const NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB: int = 51
export const NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE: int = 52
export const NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED: int = 53
export const NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS: int = 54
export const NCRYPTBUFFER_ECC_CURVE_NAME: int = 60
export const NCRYPTBUFFER_ECC_PARAMETERS: int = 61
export const NCRYPTBUFFER_TPM_SEAL_PASSWORD: int = 70
export const NCRYPTBUFFER_TPM_SEAL_POLICYINFO: int = 71
export const NCRYPTBUFFER_TPM_SEAL_TICKET: int = 72
export const NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION: int = 73
export const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK: int = 80
export const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE: int = 81
export const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE: int = 82
export const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0: int = 0
export const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0: int = 0
export const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0: int = 0
export const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0: int = 0
export const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0: int = 0
export const IFX_RSA_KEYGEN_VUL_NOT_AFFECTED: int = 0
export const IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1: int = 1
export const IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2: int = 2
export const NCRYPT_MAX_PROPERTY_NAME: int = 64
export const NCRYPT_PIN_CACHE_PIN_BYTE_LENGTH: int = 90
export const NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH: int = 90
export const NCRYPT_KEY_ACCESS_POLICY_VERSION: int = 1
export const szOID_RSA: [char] = "1.2.840.113549"
export const szOID_PKCS: [char] = "1.2.840.113549.1"
export const szOID_RSA_HASH: [char] = "1.2.840.113549.2"
export const szOID_RSA_ENCRYPT: [char] = "1.2.840.113549.3"
export const szOID_PKCS_1: [char] = "1.2.840.113549.1.1"
export const szOID_PKCS_2: [char] = "1.2.840.113549.1.2"
export const szOID_PKCS_3: [char] = "1.2.840.113549.1.3"
export const szOID_PKCS_4: [char] = "1.2.840.113549.1.4"
export const szOID_PKCS_5: [char] = "1.2.840.113549.1.5"
export const szOID_PKCS_6: [char] = "1.2.840.113549.1.6"
export const szOID_PKCS_7: [char] = "1.2.840.113549.1.7"
export const szOID_PKCS_8: [char] = "1.2.840.113549.1.8"
export const szOID_PKCS_9: [char] = "1.2.840.113549.1.9"
export const szOID_PKCS_10: [char] = "1.2.840.113549.1.10"
export const szOID_PKCS_12: [char] = "1.2.840.113549.1.12"
export const szOID_RSA_RSA: [char] = "1.2.840.113549.1.1.1"
export const szOID_RSA_MD2RSA: [char] = "1.2.840.113549.1.1.2"
export const szOID_RSA_MD4RSA: [char] = "1.2.840.113549.1.1.3"
export const szOID_RSA_MD5RSA: [char] = "1.2.840.113549.1.1.4"
export const szOID_RSA_SHA1RSA: [char] = "1.2.840.113549.1.1.5"
export const szOID_RSA_SETOAEP_RSA: [char] = "1.2.840.113549.1.1.6"
export const szOID_RSAES_OAEP: [char] = "1.2.840.113549.1.1.7"
export const szOID_RSA_MGF1: [char] = "1.2.840.113549.1.1.8"
export const szOID_RSA_PSPECIFIED: [char] = "1.2.840.113549.1.1.9"
export const szOID_RSA_SSA_PSS: [char] = "1.2.840.113549.1.1.10"
export const szOID_RSA_SHA256RSA: [char] = "1.2.840.113549.1.1.11"
export const szOID_RSA_SHA384RSA: [char] = "1.2.840.113549.1.1.12"
export const szOID_RSA_SHA512RSA: [char] = "1.2.840.113549.1.1.13"
export const szOID_RSA_DH: [char] = "1.2.840.113549.1.3.1"
export const szOID_RSA_data: [char] = "1.2.840.113549.1.7.1"
export const szOID_RSA_signedData: [char] = "1.2.840.113549.1.7.2"
export const szOID_RSA_envelopedData: [char] = "1.2.840.113549.1.7.3"
export const szOID_RSA_signEnvData: [char] = "1.2.840.113549.1.7.4"
export const szOID_RSA_digestedData: [char] = "1.2.840.113549.1.7.5"
export const szOID_RSA_hashedData: [char] = "1.2.840.113549.1.7.5"
export const szOID_RSA_encryptedData: [char] = "1.2.840.113549.1.7.6"
export const szOID_RSA_emailAddr: [char] = "1.2.840.113549.1.9.1"
export const szOID_RSA_unstructName: [char] = "1.2.840.113549.1.9.2"
export const szOID_RSA_contentType: [char] = "1.2.840.113549.1.9.3"
export const szOID_RSA_messageDigest: [char] = "1.2.840.113549.1.9.4"
export const szOID_RSA_signingTime: [char] = "1.2.840.113549.1.9.5"
export const szOID_RSA_counterSign: [char] = "1.2.840.113549.1.9.6"
export const szOID_RSA_challengePwd: [char] = "1.2.840.113549.1.9.7"
export const szOID_RSA_unstructAddr: [char] = "1.2.840.113549.1.9.8"
export const szOID_RSA_extCertAttrs: [char] = "1.2.840.113549.1.9.9"
export const szOID_RSA_certExtensions: [char] = "1.2.840.113549.1.9.14"
export const szOID_RSA_SMIMECapabilities: [char] = "1.2.840.113549.1.9.15"
export const szOID_RSA_preferSignedData: [char] = "1.2.840.113549.1.9.15.1"
export const szOID_TIMESTAMP_TOKEN: [char] = "1.2.840.113549.1.9.16.1.4"
export const szOID_RFC3161_counterSign: [char] = "1.3.6.1.4.1.311.3.3.1"
export const szOID_RFC3161v21_counterSign: [char] = "1.3.6.1.4.1.311.3.3.2"
export const szOID_RFC3161v21_thumbprints: [char] = "1.3.6.1.4.1.311.3.3.3"
export const szOID_RSA_SMIMEalg: [char] = "1.2.840.113549.1.9.16.3"
export const szOID_RSA_SMIMEalgESDH: [char] = "1.2.840.113549.1.9.16.3.5"
export const szOID_RSA_SMIMEalgCMS3DESwrap: [char] = "1.2.840.113549.1.9.16.3.6"
export const szOID_RSA_SMIMEalgCMSRC2wrap: [char] = "1.2.840.113549.1.9.16.3.7"
export const szOID_RSA_MD2: [char] = "1.2.840.113549.2.2"
export const szOID_RSA_MD4: [char] = "1.2.840.113549.2.4"
export const szOID_RSA_MD5: [char] = "1.2.840.113549.2.5"
export const szOID_RSA_RC2CBC: [char] = "1.2.840.113549.3.2"
export const szOID_RSA_RC4: [char] = "1.2.840.113549.3.4"
export const szOID_RSA_DES_EDE3_CBC: [char] = "1.2.840.113549.3.7"
export const szOID_RSA_RC5_CBCPad: [char] = "1.2.840.113549.3.9"
export const szOID_ANSI_X942: [char] = "1.2.840.10046"
export const szOID_ANSI_X942_DH: [char] = "1.2.840.10046.2.1"
export const szOID_X957: [char] = "1.2.840.10040"
export const szOID_X957_DSA: [char] = "1.2.840.10040.4.1"
export const szOID_X957_SHA1DSA: [char] = "1.2.840.10040.4.3"
export const szOID_ECC_PUBLIC_KEY: [char] = "1.2.840.10045.2.1"
export const szOID_ECC_CURVE_P256: [char] = "1.2.840.10045.3.1.7"
export const szOID_ECC_CURVE_P384: [char] = "1.3.132.0.34"
export const szOID_ECC_CURVE_P521: [char] = "1.3.132.0.35"
export const szOID_ECC_CURVE_BRAINPOOLP160R1: [char] = "1.3.36.3.3.2.8.1.1.1"
export const szOID_ECC_CURVE_BRAINPOOLP160T1: [char] = "1.3.36.3.3.2.8.1.1.2"
export const szOID_ECC_CURVE_BRAINPOOLP192R1: [char] = "1.3.36.3.3.2.8.1.1.3"
export const szOID_ECC_CURVE_BRAINPOOLP192T1: [char] = "1.3.36.3.3.2.8.1.1.4"
export const szOID_ECC_CURVE_BRAINPOOLP224R1: [char] = "1.3.36.3.3.2.8.1.1.5"
export const szOID_ECC_CURVE_BRAINPOOLP224T1: [char] = "1.3.36.3.3.2.8.1.1.6"
export const szOID_ECC_CURVE_BRAINPOOLP256R1: [char] = "1.3.36.3.3.2.8.1.1.7"
export const szOID_ECC_CURVE_BRAINPOOLP256T1: [char] = "1.3.36.3.3.2.8.1.1.8"
export const szOID_ECC_CURVE_BRAINPOOLP320R1: [char] = "1.3.36.3.3.2.8.1.1.9"
export const szOID_ECC_CURVE_BRAINPOOLP320T1: [char] = "1.3.36.3.3.2.8.1.1.10"
export const szOID_ECC_CURVE_BRAINPOOLP384R1: [char] = "1.3.36.3.3.2.8.1.1.11"
export const szOID_ECC_CURVE_BRAINPOOLP384T1: [char] = "1.3.36.3.3.2.8.1.1.12"
export const szOID_ECC_CURVE_BRAINPOOLP512R1: [char] = "1.3.36.3.3.2.8.1.1.13"
export const szOID_ECC_CURVE_BRAINPOOLP512T1: [char] = "1.3.36.3.3.2.8.1.1.14"
export const szOID_ECC_CURVE_EC192WAPI: [char] = "1.2.156.11235.1.1.2.1"
export const szOID_CN_ECDSA_SHA256: [char] = "1.2.156.11235.1.1.1"
export const szOID_ECC_CURVE_NISTP192: [char] = "1.2.840.10045.3.1.1"
export const szOID_ECC_CURVE_NISTP224: [char] = "1.3.132.0.33"
export const szOID_ECC_CURVE_SECP160K1: [char] = "1.3.132.0.9"
export const szOID_ECC_CURVE_SECP160R1: [char] = "1.3.132.0.8"
export const szOID_ECC_CURVE_SECP160R2: [char] = "1.3.132.0.30"
export const szOID_ECC_CURVE_SECP192K1: [char] = "1.3.132.0.31"
export const szOID_ECC_CURVE_SECP224K1: [char] = "1.3.132.0.32"
export const szOID_ECC_CURVE_SECP256K1: [char] = "1.3.132.0.10"
export const szOID_ECC_CURVE_WTLS9: [char] = "2.23.43.1.4.9"
export const szOID_ECC_CURVE_X962P192V1: [char] = "1.2.840.10045.3.1.1"
export const szOID_ECC_CURVE_X962P192V2: [char] = "1.2.840.10045.3.1.2"
export const szOID_ECC_CURVE_X962P192V3: [char] = "1.2.840.10045.3.1.3"
export const szOID_ECC_CURVE_X962P239V1: [char] = "1.2.840.10045.3.1.4"
export const szOID_ECC_CURVE_X962P239V2: [char] = "1.2.840.10045.3.1.5"
export const szOID_ECC_CURVE_X962P239V3: [char] = "1.2.840.10045.3.1.6"
export const szOID_ECDSA_SHA1: [char] = "1.2.840.10045.4.1"
export const szOID_ECDSA_SPECIFIED: [char] = "1.2.840.10045.4.3"
export const szOID_ECDSA_SHA256: [char] = "1.2.840.10045.4.3.2"
export const szOID_ECDSA_SHA384: [char] = "1.2.840.10045.4.3.3"
export const szOID_ECDSA_SHA512: [char] = "1.2.840.10045.4.3.4"
export const szOID_NIST_AES128_CBC: [char] = "2.16.840.1.101.3.4.1.2"
export const szOID_NIST_AES192_CBC: [char] = "2.16.840.1.101.3.4.1.22"
export const szOID_NIST_AES256_CBC: [char] = "2.16.840.1.101.3.4.1.42"
export const szOID_NIST_AES128_WRAP: [char] = "2.16.840.1.101.3.4.1.5"
export const szOID_NIST_AES192_WRAP: [char] = "2.16.840.1.101.3.4.1.25"
export const szOID_NIST_AES256_WRAP: [char] = "2.16.840.1.101.3.4.1.45"
export const szOID_DH_SINGLE_PASS_STDDH_SHA1_KDF: [char] = "1.3.133.16.840.63.0.2"
export const szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF: [char] = "1.3.132.1.11.1"
export const szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF: [char] = "1.3.132.1.11.2"
export const szOID_DS: [char] = "2.5"
export const szOID_DSALG: [char] = "2.5.8"
export const szOID_DSALG_CRPT: [char] = "2.5.8.1"
export const szOID_DSALG_HASH: [char] = "2.5.8.2"
export const szOID_DSALG_SIGN: [char] = "2.5.8.3"
export const szOID_DSALG_RSA: [char] = "2.5.8.1.1"
export const szOID_OIW: [char] = "1.3.14"
export const szOID_OIWSEC: [char] = "1.3.14.3.2"
export const szOID_OIWSEC_md4RSA: [char] = "1.3.14.3.2.2"
export const szOID_OIWSEC_md5RSA: [char] = "1.3.14.3.2.3"
export const szOID_OIWSEC_md4RSA2: [char] = "1.3.14.3.2.4"
export const szOID_OIWSEC_desECB: [char] = "1.3.14.3.2.6"
export const szOID_OIWSEC_desCBC: [char] = "1.3.14.3.2.7"
export const szOID_OIWSEC_desOFB: [char] = "1.3.14.3.2.8"
export const szOID_OIWSEC_desCFB: [char] = "1.3.14.3.2.9"
export const szOID_OIWSEC_desMAC: [char] = "1.3.14.3.2.10"
export const szOID_OIWSEC_rsaSign: [char] = "1.3.14.3.2.11"
export const szOID_OIWSEC_dsa: [char] = "1.3.14.3.2.12"
export const szOID_OIWSEC_shaDSA: [char] = "1.3.14.3.2.13"
export const szOID_OIWSEC_mdc2RSA: [char] = "1.3.14.3.2.14"
export const szOID_OIWSEC_shaRSA: [char] = "1.3.14.3.2.15"
export const szOID_OIWSEC_dhCommMod: [char] = "1.3.14.3.2.16"
export const szOID_OIWSEC_desEDE: [char] = "1.3.14.3.2.17"
export const szOID_OIWSEC_sha: [char] = "1.3.14.3.2.18"
export const szOID_OIWSEC_mdc2: [char] = "1.3.14.3.2.19"
export const szOID_OIWSEC_dsaComm: [char] = "1.3.14.3.2.20"
export const szOID_OIWSEC_dsaCommSHA: [char] = "1.3.14.3.2.21"
export const szOID_OIWSEC_rsaXchg: [char] = "1.3.14.3.2.22"
export const szOID_OIWSEC_keyHashSeal: [char] = "1.3.14.3.2.23"
export const szOID_OIWSEC_md2RSASign: [char] = "1.3.14.3.2.24"
export const szOID_OIWSEC_md5RSASign: [char] = "1.3.14.3.2.25"
export const szOID_OIWSEC_sha1: [char] = "1.3.14.3.2.26"
export const szOID_OIWSEC_dsaSHA1: [char] = "1.3.14.3.2.27"
export const szOID_OIWSEC_dsaCommSHA1: [char] = "1.3.14.3.2.28"
export const szOID_OIWSEC_sha1RSASign: [char] = "1.3.14.3.2.29"
export const szOID_OIWDIR: [char] = "1.3.14.7.2"
export const szOID_OIWDIR_CRPT: [char] = "1.3.14.7.2.1"
export const szOID_OIWDIR_HASH: [char] = "1.3.14.7.2.2"
export const szOID_OIWDIR_SIGN: [char] = "1.3.14.7.2.3"
export const szOID_OIWDIR_md2: [char] = "1.3.14.7.2.2.1"
export const szOID_OIWDIR_md2RSA: [char] = "1.3.14.7.2.3.1"
export const szOID_INFOSEC: [char] = "2.16.840.1.101.2.1"
export const szOID_INFOSEC_sdnsSignature: [char] = "2.16.840.1.101.2.1.1.1"
export const szOID_INFOSEC_mosaicSignature: [char] = "2.16.840.1.101.2.1.1.2"
export const szOID_INFOSEC_sdnsConfidentiality: [char] = "2.16.840.1.101.2.1.1.3"
export const szOID_INFOSEC_mosaicConfidentiality: [char] = "2.16.840.1.101.2.1.1.4"
export const szOID_INFOSEC_sdnsIntegrity: [char] = "2.16.840.1.101.2.1.1.5"
export const szOID_INFOSEC_mosaicIntegrity: [char] = "2.16.840.1.101.2.1.1.6"
export const szOID_INFOSEC_sdnsTokenProtection: [char] = "2.16.840.1.101.2.1.1.7"
export const szOID_INFOSEC_mosaicTokenProtection: [char] = "2.16.840.1.101.2.1.1.8"
export const szOID_INFOSEC_sdnsKeyManagement: [char] = "2.16.840.1.101.2.1.1.9"
export const szOID_INFOSEC_mosaicKeyManagement: [char] = "2.16.840.1.101.2.1.1.10"
export const szOID_INFOSEC_sdnsKMandSig: [char] = "2.16.840.1.101.2.1.1.11"
export const szOID_INFOSEC_mosaicKMandSig: [char] = "2.16.840.1.101.2.1.1.12"
export const szOID_INFOSEC_SuiteASignature: [char] = "2.16.840.1.101.2.1.1.13"
export const szOID_INFOSEC_SuiteAConfidentiality: [char] = "2.16.840.1.101.2.1.1.14"
export const szOID_INFOSEC_SuiteAIntegrity: [char] = "2.16.840.1.101.2.1.1.15"
export const szOID_INFOSEC_SuiteATokenProtection: [char] = "2.16.840.1.101.2.1.1.16"
export const szOID_INFOSEC_SuiteAKeyManagement: [char] = "2.16.840.1.101.2.1.1.17"
export const szOID_INFOSEC_SuiteAKMandSig: [char] = "2.16.840.1.101.2.1.1.18"
export const szOID_INFOSEC_mosaicUpdatedSig: [char] = "2.16.840.1.101.2.1.1.19"
export const szOID_INFOSEC_mosaicKMandUpdSig: [char] = "2.16.840.1.101.2.1.1.20"
export const szOID_INFOSEC_mosaicUpdatedInteg: [char] = "2.16.840.1.101.2.1.1.21"
export const szOID_NIST_sha256: [char] = "2.16.840.1.101.3.4.2.1"
export const szOID_NIST_sha384: [char] = "2.16.840.1.101.3.4.2.2"
export const szOID_NIST_sha512: [char] = "2.16.840.1.101.3.4.2.3"
export const szOID_COMMON_NAME: [char] = "2.5.4.3"
export const szOID_SUR_NAME: [char] = "2.5.4.4"
export const szOID_DEVICE_SERIAL_NUMBER: [char] = "2.5.4.5"
export const szOID_COUNTRY_NAME: [char] = "2.5.4.6"
export const szOID_LOCALITY_NAME: [char] = "2.5.4.7"
export const szOID_STATE_OR_PROVINCE_NAME: [char] = "2.5.4.8"
export const szOID_STREET_ADDRESS: [char] = "2.5.4.9"
export const szOID_ORGANIZATION_NAME: [char] = "2.5.4.10"
export const szOID_ORGANIZATIONAL_UNIT_NAME: [char] = "2.5.4.11"
export const szOID_TITLE: [char] = "2.5.4.12"
export const szOID_DESCRIPTION: [char] = "2.5.4.13"
export const szOID_SEARCH_GUIDE: [char] = "2.5.4.14"
export const szOID_BUSINESS_CATEGORY: [char] = "2.5.4.15"
export const szOID_POSTAL_ADDRESS: [char] = "2.5.4.16"
export const szOID_POSTAL_CODE: [char] = "2.5.4.17"
export const szOID_POST_OFFICE_BOX: [char] = "2.5.4.18"
export const szOID_PHYSICAL_DELIVERY_OFFICE_NAME: [char] = "2.5.4.19"
export const szOID_TELEPHONE_NUMBER: [char] = "2.5.4.20"
export const szOID_TELEX_NUMBER: [char] = "2.5.4.21"
export const szOID_TELETEXT_TERMINAL_IDENTIFIER: [char] = "2.5.4.22"
export const szOID_FACSIMILE_TELEPHONE_NUMBER: [char] = "2.5.4.23"
export const szOID_X21_ADDRESS: [char] = "2.5.4.24"
export const szOID_INTERNATIONAL_ISDN_NUMBER: [char] = "2.5.4.25"
export const szOID_REGISTERED_ADDRESS: [char] = "2.5.4.26"
export const szOID_DESTINATION_INDICATOR: [char] = "2.5.4.27"
export const szOID_PREFERRED_DELIVERY_METHOD: [char] = "2.5.4.28"
export const szOID_PRESENTATION_ADDRESS: [char] = "2.5.4.29"
export const szOID_SUPPORTED_APPLICATION_CONTEXT: [char] = "2.5.4.30"
export const szOID_MEMBER: [char] = "2.5.4.31"
export const szOID_OWNER: [char] = "2.5.4.32"
export const szOID_ROLE_OCCUPANT: [char] = "2.5.4.33"
export const szOID_SEE_ALSO: [char] = "2.5.4.34"
export const szOID_USER_PASSWORD: [char] = "2.5.4.35"
export const szOID_USER_CERTIFICATE: [char] = "2.5.4.36"
export const szOID_CA_CERTIFICATE: [char] = "2.5.4.37"
export const szOID_AUTHORITY_REVOCATION_LIST: [char] = "2.5.4.38"
export const szOID_CERTIFICATE_REVOCATION_LIST: [char] = "2.5.4.39"
export const szOID_CROSS_CERTIFICATE_PAIR: [char] = "2.5.4.40"
export const szOID_GIVEN_NAME: [char] = "2.5.4.42"
export const szOID_INITIALS: [char] = "2.5.4.43"
export const szOID_DN_QUALIFIER: [char] = "2.5.4.46"
export const szOID_DOMAIN_COMPONENT: [char] = "0.9.2342.19200300.100.1.25"
export const szOID_PKCS_12_FRIENDLY_NAME_ATTR: [char] = "1.2.840.113549.1.9.20"
export const szOID_PKCS_12_LOCAL_KEY_ID: [char] = "1.2.840.113549.1.9.21"
export const szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR: [char] = "1.3.6.1.4.1.311.17.1"
export const szOID_LOCAL_MACHINE_KEYSET: [char] = "1.3.6.1.4.1.311.17.2"
export const szOID_PKCS_12_EXTENDED_ATTRIBUTES: [char] = "1.3.6.1.4.1.311.17.3"
export const szOID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID: [char] = "1.3.6.1.4.1.311.17.4"
export const szOID_KEYID_RDN: [char] = "1.3.6.1.4.1.311.10.7.1"
export const szOID_EV_RDN_LOCALE: [char] = "1.3.6.1.4.1.311.60.2.1.1"
export const szOID_EV_RDN_STATE_OR_PROVINCE: [char] = "1.3.6.1.4.1.311.60.2.1.2"
export const szOID_EV_RDN_COUNTRY: [char] = "1.3.6.1.4.1.311.60.2.1.3"
export const CERT_RDN_ANY_TYPE: int = 0
export const CERT_RDN_ENCODED_BLOB: int = 1
export const CERT_RDN_OCTET_STRING: int = 2
export const CERT_RDN_NUMERIC_STRING: int = 3
export const CERT_RDN_PRINTABLE_STRING: int = 4
export const CERT_RDN_TELETEX_STRING: int = 5
export const CERT_RDN_T61_STRING: int = 5
export const CERT_RDN_VIDEOTEX_STRING: int = 6
export const CERT_RDN_IA5_STRING: int = 7
export const CERT_RDN_GRAPHIC_STRING: int = 8
export const CERT_RDN_VISIBLE_STRING: int = 9
export const CERT_RDN_ISO646_STRING: int = 9
export const CERT_RDN_GENERAL_STRING: int = 10
export const CERT_RDN_UNIVERSAL_STRING: int = 11
export const CERT_RDN_INT4_STRING: int = 11
export const CERT_RDN_BMP_STRING: int = 12
export const CERT_RDN_UNICODE_STRING: int = 12
export const CERT_RDN_UTF8_STRING: int = 13
export const CRYPT_ECC_PRIVATE_KEY_INFO_v1: int = 1
export const CERT_V1: int = 0
export const CERT_V2: int = 1
export const CERT_V3: int = 2
export const CERT_INFO_VERSION_FLAG: int = 1
export const CERT_INFO_SERIAL_NUMBER_FLAG: int = 2
export const CERT_INFO_SIGNATURE_ALGORITHM_FLAG: int = 3
export const CERT_INFO_ISSUER_FLAG: int = 4
export const CERT_INFO_NOT_BEFORE_FLAG: int = 5
export const CERT_INFO_NOT_AFTER_FLAG: int = 6
export const CERT_INFO_SUBJECT_FLAG: int = 7
export const CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG: int = 8
export const CERT_INFO_ISSUER_UNIQUE_ID_FLAG: int = 9
export const CERT_INFO_SUBJECT_UNIQUE_ID_FLAG: int = 10
export const CERT_INFO_EXTENSION_FLAG: int = 11
export const CRL_V1: int = 0
export const CRL_V2: int = 1
export const CERT_BUNDLE_CERTIFICATE: int = 0
export const CERT_BUNDLE_CRL: int = 1
export const CERT_REQUEST_V1: int = 0
export const CERT_KEYGEN_REQUEST_V1: int = 0
export const CTL_V1: int = 0
export const CRYPT_ENCODE_DECODE_NONE: int = 0
export const szOID_AUTHORITY_KEY_IDENTIFIER: [char] = "2.5.29.1"
export const szOID_KEY_ATTRIBUTES: [char] = "2.5.29.2"
export const szOID_CERT_POLICIES_95: [char] = "2.5.29.3"
export const szOID_KEY_USAGE_RESTRICTION: [char] = "2.5.29.4"
export const szOID_SUBJECT_ALT_NAME: [char] = "2.5.29.7"
export const szOID_ISSUER_ALT_NAME: [char] = "2.5.29.8"
export const szOID_BASIC_CONSTRAINTS: [char] = "2.5.29.10"
export const szOID_KEY_USAGE: [char] = "2.5.29.15"
export const szOID_PRIVATEKEY_USAGE_PERIOD: [char] = "2.5.29.16"
export const szOID_BASIC_CONSTRAINTS2: [char] = "2.5.29.19"
export const szOID_CERT_POLICIES: [char] = "2.5.29.32"
export const szOID_ANY_CERT_POLICY: [char] = "2.5.29.32.0"
export const szOID_INHIBIT_ANY_POLICY: [char] = "2.5.29.54"
export const szOID_AUTHORITY_KEY_IDENTIFIER2: [char] = "2.5.29.35"
export const szOID_SUBJECT_KEY_IDENTIFIER: [char] = "2.5.29.14"
export const szOID_SUBJECT_ALT_NAME2: [char] = "2.5.29.17"
export const szOID_ISSUER_ALT_NAME2: [char] = "2.5.29.18"
export const szOID_CRL_REASON_CODE: [char] = "2.5.29.21"
export const szOID_REASON_CODE_HOLD: [char] = "2.5.29.23"
export const szOID_CRL_DIST_POINTS: [char] = "2.5.29.31"
export const szOID_ENHANCED_KEY_USAGE: [char] = "2.5.29.37"
export const szOID_ANY_ENHANCED_KEY_USAGE: [char] = "2.5.29.37.0"
export const szOID_CRL_NUMBER: [char] = "2.5.29.20"
export const szOID_DELTA_CRL_INDICATOR: [char] = "2.5.29.27"
export const szOID_ISSUING_DIST_POINT: [char] = "2.5.29.28"
export const szOID_FRESHEST_CRL: [char] = "2.5.29.46"
export const szOID_NAME_CONSTRAINTS: [char] = "2.5.29.30"
export const szOID_POLICY_MAPPINGS: [char] = "2.5.29.33"
export const szOID_LEGACY_POLICY_MAPPINGS: [char] = "2.5.29.5"
export const szOID_POLICY_CONSTRAINTS: [char] = "2.5.29.36"
export const szOID_RENEWAL_CERTIFICATE: [char] = "1.3.6.1.4.1.311.13.1"
export const szOID_ENROLLMENT_NAME_VALUE_PAIR: [char] = "1.3.6.1.4.1.311.13.2.1"
export const szOID_ENROLLMENT_CSP_PROVIDER: [char] = "1.3.6.1.4.1.311.13.2.2"
export const szOID_OS_VERSION: [char] = "1.3.6.1.4.1.311.13.2.3"
export const szOID_ENROLLMENT_AGENT: [char] = "1.3.6.1.4.1.311.20.2.1"
export const szOID_PKIX: [char] = "1.3.6.1.5.5.7"
export const szOID_PKIX_PE: [char] = "1.3.6.1.5.5.7.1"
export const szOID_AUTHORITY_INFO_ACCESS: [char] = "1.3.6.1.5.5.7.1.1"
export const szOID_SUBJECT_INFO_ACCESS: [char] = "1.3.6.1.5.5.7.1.11"
export const szOID_BIOMETRIC_EXT: [char] = "1.3.6.1.5.5.7.1.2"
export const szOID_QC_STATEMENTS_EXT: [char] = "1.3.6.1.5.5.7.1.3"
export const szOID_LOGOTYPE_EXT: [char] = "1.3.6.1.5.5.7.1.12"
export const szOID_TLS_FEATURES_EXT: [char] = "1.3.6.1.5.5.7.1.24"
export const szOID_CERT_EXTENSIONS: [char] = "1.3.6.1.4.1.311.2.1.14"
export const szOID_NEXT_UPDATE_LOCATION: [char] = "1.3.6.1.4.1.311.10.2"
export const szOID_REMOVE_CERTIFICATE: [char] = "1.3.6.1.4.1.311.10.8.1"
export const szOID_CROSS_CERT_DIST_POINTS: [char] = "1.3.6.1.4.1.311.10.9.1"
export const szOID_CTL: [char] = "1.3.6.1.4.1.311.10.1"
export const szOID_SORTED_CTL: [char] = "1.3.6.1.4.1.311.10.1.1"
export const szOID_SERIALIZED: [char] = "1.3.6.1.4.1.311.10.3.3.1"
export const szOID_NT_PRINCIPAL_NAME: [char] = "1.3.6.1.4.1.311.20.2.3"
export const szOID_INTERNATIONALIZED_EMAIL_ADDRESS: [char] = "1.3.6.1.4.1.311.20.2.4"
export const szOID_PRODUCT_UPDATE: [char] = "1.3.6.1.4.1.311.31.1"
export const szOID_ANY_APPLICATION_POLICY: [char] = "1.3.6.1.4.1.311.10.12.1"
export const szOID_AUTO_ENROLL_CTL_USAGE: [char] = "1.3.6.1.4.1.311.20.1"
export const szOID_ENROLL_CERTTYPE_EXTENSION: [char] = "1.3.6.1.4.1.311.20.2"
export const szOID_CERT_MANIFOLD: [char] = "1.3.6.1.4.1.311.20.3"
export const szOID_CERTSRV_CA_VERSION: [char] = "1.3.6.1.4.1.311.21.1"
export const szOID_CERTSRV_PREVIOUS_CERT_HASH: [char] = "1.3.6.1.4.1.311.21.2"
export const szOID_CRL_VIRTUAL_BASE: [char] = "1.3.6.1.4.1.311.21.3"
export const szOID_CRL_NEXT_PUBLISH: [char] = "1.3.6.1.4.1.311.21.4"
export const szOID_KP_CA_EXCHANGE: [char] = "1.3.6.1.4.1.311.21.5"
export const szOID_KP_PRIVACY_CA: [char] = "1.3.6.1.4.1.311.21.36"
export const szOID_KP_KEY_RECOVERY_AGENT: [char] = "1.3.6.1.4.1.311.21.6"
export const szOID_CERTIFICATE_TEMPLATE: [char] = "1.3.6.1.4.1.311.21.7"
export const szOID_ENTERPRISE_OID_ROOT: [char] = "1.3.6.1.4.1.311.21.8"
export const szOID_RDN_DUMMY_SIGNER: [char] = "1.3.6.1.4.1.311.21.9"
export const szOID_APPLICATION_CERT_POLICIES: [char] = "1.3.6.1.4.1.311.21.10"
export const szOID_APPLICATION_POLICY_MAPPINGS: [char] = "1.3.6.1.4.1.311.21.11"
export const szOID_APPLICATION_POLICY_CONSTRAINTS: [char] = "1.3.6.1.4.1.311.21.12"
export const szOID_ARCHIVED_KEY_ATTR: [char] = "1.3.6.1.4.1.311.21.13"
export const szOID_CRL_SELF_CDP: [char] = "1.3.6.1.4.1.311.21.14"
export const szOID_REQUIRE_CERT_CHAIN_POLICY: [char] = "1.3.6.1.4.1.311.21.15"
export const szOID_ARCHIVED_KEY_CERT_HASH: [char] = "1.3.6.1.4.1.311.21.16"
export const szOID_ISSUED_CERT_HASH: [char] = "1.3.6.1.4.1.311.21.17"
export const szOID_DS_EMAIL_REPLICATION: [char] = "1.3.6.1.4.1.311.21.19"
export const szOID_REQUEST_CLIENT_INFO: [char] = "1.3.6.1.4.1.311.21.20"
export const szOID_ENCRYPTED_KEY_HASH: [char] = "1.3.6.1.4.1.311.21.21"
export const szOID_CERTSRV_CROSSCA_VERSION: [char] = "1.3.6.1.4.1.311.21.22"
export const szOID_NTDS_REPLICATION: [char] = "1.3.6.1.4.1.311.25.1"
export const szOID_NTDS_CA_SECURITY_EXT: [char] = "1.3.6.1.4.1.311.25.2"
export const szOID_NTDS_OBJECTSID: [char] = "1.3.6.1.4.1.311.25.2.1"
export const szOID_SUBJECT_DIR_ATTRS: [char] = "2.5.29.9"
export const szOID_PKIX_KP: [char] = "1.3.6.1.5.5.7.3"
export const szOID_PKIX_KP_SERVER_AUTH: [char] = "1.3.6.1.5.5.7.3.1"
export const szOID_PKIX_KP_CLIENT_AUTH: [char] = "1.3.6.1.5.5.7.3.2"
export const szOID_PKIX_KP_CODE_SIGNING: [char] = "1.3.6.1.5.5.7.3.3"
export const szOID_PKIX_KP_EMAIL_PROTECTION: [char] = "1.3.6.1.5.5.7.3.4"
export const szOID_PKIX_KP_IPSEC_END_SYSTEM: [char] = "1.3.6.1.5.5.7.3.5"
export const szOID_PKIX_KP_IPSEC_TUNNEL: [char] = "1.3.6.1.5.5.7.3.6"
export const szOID_PKIX_KP_IPSEC_USER: [char] = "1.3.6.1.5.5.7.3.7"
export const szOID_PKIX_KP_TIMESTAMP_SIGNING: [char] = "1.3.6.1.5.5.7.3.8"
export const szOID_PKIX_KP_OCSP_SIGNING: [char] = "1.3.6.1.5.5.7.3.9"
export const szOID_PKIX_OCSP_NOCHECK: [char] = "1.3.6.1.5.5.7.48.1.5"
export const szOID_PKIX_OCSP_NONCE: [char] = "1.3.6.1.5.5.7.48.1.2"
export const szOID_IPSEC_KP_IKE_INTERMEDIATE: [char] = "1.3.6.1.5.5.8.2.2"
export const szOID_PKINIT_KP_KDC: [char] = "1.3.6.1.5.2.3.5"
export const szOID_KP_CTL_USAGE_SIGNING: [char] = "1.3.6.1.4.1.311.10.3.1"
export const szOID_KP_TIME_STAMP_SIGNING: [char] = "1.3.6.1.4.1.311.10.3.2"
export const szOID_SERVER_GATED_CRYPTO: [char] = "1.3.6.1.4.1.311.10.3.3"
export const szOID_SGC_NETSCAPE: [char] = "2.16.840.1.113730.4.1"
export const szOID_KP_EFS: [char] = "1.3.6.1.4.1.311.10.3.4"
export const szOID_EFS_RECOVERY: [char] = "1.3.6.1.4.1.311.10.3.4.1"
export const szOID_WHQL_CRYPTO: [char] = "1.3.6.1.4.1.311.10.3.5"
export const szOID_ATTEST_WHQL_CRYPTO: [char] = "1.3.6.1.4.1.311.10.3.5.1"
export const szOID_NT5_CRYPTO: [char] = "1.3.6.1.4.1.311.10.3.6"
export const szOID_OEM_WHQL_CRYPTO: [char] = "1.3.6.1.4.1.311.10.3.7"
export const szOID_EMBEDDED_NT_CRYPTO: [char] = "1.3.6.1.4.1.311.10.3.8"
export const szOID_ROOT_LIST_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.9"
export const szOID_KP_QUALIFIED_SUBORDINATION: [char] = "1.3.6.1.4.1.311.10.3.10"
export const szOID_KP_KEY_RECOVERY: [char] = "1.3.6.1.4.1.311.10.3.11"
export const szOID_KP_DOCUMENT_SIGNING: [char] = "1.3.6.1.4.1.311.10.3.12"
export const szOID_KP_LIFETIME_SIGNING: [char] = "1.3.6.1.4.1.311.10.3.13"
export const szOID_KP_MOBILE_DEVICE_SOFTWARE: [char] = "1.3.6.1.4.1.311.10.3.14"
export const szOID_KP_SMART_DISPLAY: [char] = "1.3.6.1.4.1.311.10.3.15"
export const szOID_KP_CSP_SIGNATURE: [char] = "1.3.6.1.4.1.311.10.3.16"
export const szOID_KP_FLIGHT_SIGNING: [char] = "1.3.6.1.4.1.311.10.3.27"
export const szOID_PLATFORM_MANIFEST_BINARY_ID: [char] = "1.3.6.1.4.1.311.10.3.28"
export const szOID_DRM: [char] = "1.3.6.1.4.1.311.10.5.1"
export const szOID_DRM_INDIVIDUALIZATION: [char] = "1.3.6.1.4.1.311.10.5.2"
export const szOID_LICENSES: [char] = "1.3.6.1.4.1.311.10.6.1"
export const szOID_LICENSE_SERVER: [char] = "1.3.6.1.4.1.311.10.6.2"
export const szOID_KP_SMARTCARD_LOGON: [char] = "1.3.6.1.4.1.311.20.2.2"
export const szOID_KP_KERNEL_MODE_CODE_SIGNING: [char] = "1.3.6.1.4.1.311.61.1.1"
export const szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING: [char] = "1.3.6.1.4.1.311.61.4.1"
export const szOID_REVOKED_LIST_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.19"
export const szOID_WINDOWS_KITS_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.20"
export const szOID_WINDOWS_RT_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.21"
export const szOID_PROTECTED_PROCESS_LIGHT_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.22"
export const szOID_WINDOWS_TCB_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.23"
export const szOID_PROTECTED_PROCESS_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.24"
export const szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.25"
export const szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.26"
export const szOID_DISALLOWED_LIST: [char] = "1.3.6.1.4.1.311.10.3.30"
export const szOID_PIN_RULES_SIGNER: [char] = "1.3.6.1.4.1.311.10.3.31"
export const szOID_PIN_RULES_CTL: [char] = "1.3.6.1.4.1.311.10.3.32"
export const szOID_PIN_RULES_EXT: [char] = "1.3.6.1.4.1.311.10.3.33"
export const szOID_PIN_RULES_DOMAIN_NAME: [char] = "1.3.6.1.4.1.311.10.3.34"
export const szOID_PIN_RULES_LOG_END_DATE_EXT: [char] = "1.3.6.1.4.1.311.10.3.35"
export const szOID_IUM_SIGNING: [char] = "1.3.6.1.4.1.311.10.3.37"
export const szOID_EV_WHQL_CRYPTO: [char] = "1.3.6.1.4.1.311.10.3.39"
export const szOID_BIOMETRIC_SIGNING: [char] = "1.3.6.1.4.1.311.10.3.41"
export const szOID_ENCLAVE_SIGNING: [char] = "1.3.6.1.4.1.311.10.3.42"
export const szOID_SYNC_ROOT_CTL_EXT: [char] = "1.3.6.1.4.1.311.10.3.50"
export const szOID_HPKP_DOMAIN_NAME_CTL: [char] = "1.3.6.1.4.1.311.10.3.60"
export const szOID_HPKP_HEADER_VALUE_CTL: [char] = "1.3.6.1.4.1.311.10.3.61"
export const szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING: [char] = "1.3.6.1.4.1.311.61.5.1"
export const szOID_WINDOWS_STORE_SIGNER: [char] = "1.3.6.1.4.1.311.76.3.1"
export const szOID_DYNAMIC_CODE_GEN_SIGNER: [char] = "1.3.6.1.4.1.311.76.5.1"
export const szOID_MICROSOFT_PUBLISHER_SIGNER: [char] = "1.3.6.1.4.1.311.76.8.1"
export const szOID_YESNO_TRUST_ATTR: [char] = "1.3.6.1.4.1.311.10.4.1"
export const szOID_SITE_PIN_RULES_INDEX_ATTR: [char] = "1.3.6.1.4.1.311.10.4.2"
export const szOID_SITE_PIN_RULES_FLAGS_ATTR: [char] = "1.3.6.1.4.1.311.10.4.3"
export const szOID_PKIX_POLICY_QUALIFIER_CPS: [char] = "1.3.6.1.5.5.7.2.1"
export const szOID_PKIX_POLICY_QUALIFIER_USERNOTICE: [char] = "1.3.6.1.5.5.7.2.2"
export const szOID_ROOT_PROGRAM_FLAGS: [char] = "1.3.6.1.4.1.311.60.1.1"
export const szOID_CERT_POLICIES_95_QUALIFIER1: [char] = "2.16.840.1.113733.1.7.1.1"
export const szOID_RDN_TPM_MANUFACTURER: [char] = "2.23.133.2.1"
export const szOID_RDN_TPM_MODEL: [char] = "2.23.133.2.2"
export const szOID_RDN_TPM_VERSION: [char] = "2.23.133.2.3"
export const szOID_RDN_TCG_PLATFORM_MANUFACTURER: [char] = "2.23.133.2.4"
export const szOID_RDN_TCG_PLATFORM_MODEL: [char] = "2.23.133.2.5"
export const szOID_RDN_TCG_PLATFORM_VERSION: [char] = "2.23.133.2.6"
export const szOID_CT_CERT_SCTLIST: [char] = "1.3.6.1.4.1.11129.2.4.2"
export const szOID_ENROLL_EK_INFO: [char] = "1.3.6.1.4.1.311.21.23"
export const szOID_ENROLL_AIK_INFO: [char] = "1.3.6.1.4.1.311.21.39"
export const szOID_ENROLL_ATTESTATION_STATEMENT: [char] = "1.3.6.1.4.1.311.21.24"
export const szOID_ENROLL_KSP_NAME: [char] = "1.3.6.1.4.1.311.21.25"
export const szOID_ENROLL_EKPUB_CHALLENGE: [char] = "1.3.6.1.4.1.311.21.26"
export const szOID_ENROLL_CAXCHGCERT_HASH: [char] = "1.3.6.1.4.1.311.21.27"
export const szOID_ENROLL_ATTESTATION_CHALLENGE: [char] = "1.3.6.1.4.1.311.21.28"
export const szOID_ENROLL_ENCRYPTION_ALGORITHM: [char] = "1.3.6.1.4.1.311.21.29"
export const szOID_KP_TPM_EK_CERTIFICATE: [char] = "2.23.133.8.1"
export const szOID_KP_TPM_PLATFORM_CERTIFICATE: [char] = "2.23.133.8.2"
export const szOID_KP_TPM_AIK_CERTIFICATE: [char] = "2.23.133.8.3"
export const szOID_ENROLL_EKVERIFYKEY: [char] = "1.3.6.1.4.1.311.21.30"
export const szOID_ENROLL_EKVERIFYCERT: [char] = "1.3.6.1.4.1.311.21.31"
export const szOID_ENROLL_EKVERIFYCREDS: [char] = "1.3.6.1.4.1.311.21.32"
export const szOID_ENROLL_SCEP_ERROR: [char] = "1.3.6.1.4.1.311.21.33"
export const szOID_ENROLL_SCEP_SERVER_STATE: [char] = "1.3.6.1.4.1.311.21.34"
export const szOID_ENROLL_SCEP_CHALLENGE_ANSWER: [char] = "1.3.6.1.4.1.311.21.35"
export const szOID_ENROLL_SCEP_CLIENT_REQUEST: [char] = "1.3.6.1.4.1.311.21.37"
export const szOID_ENROLL_SCEP_SERVER_MESSAGE: [char] = "1.3.6.1.4.1.311.21.38"
export const szOID_ENROLL_SCEP_SERVER_SECRET: [char] = "1.3.6.1.4.1.311.21.40"
export const szOID_ENROLL_KEY_AFFINITY: [char] = "1.3.6.1.4.1.311.21.41"
export const szOID_ENROLL_SCEP_SIGNER_HASH: [char] = "1.3.6.1.4.1.311.21.42"
export const szOID_ENROLL_EK_CA_KEYID: [char] = "1.3.6.1.4.1.311.21.43"
export const szOID_ATTR_SUPPORTED_ALGORITHMS: [char] = "2.5.4.52"
export const szOID_ATTR_TPM_SPECIFICATION: [char] = "2.23.133.2.16"
export const szOID_ATTR_PLATFORM_SPECIFICATION: [char] = "2.23.133.2.17"
export const szOID_ATTR_TPM_SECURITY_ASSERTIONS: [char] = "2.23.133.2.18"
export const CERT_UNICODE_RDN_ERR_INDEX_SHIFT: int = 22
export const CERT_UNICODE_ATTR_ERR_INDEX_SHIFT: int = 16
export const CERT_UNICODE_VALUE_ERR_INDEX_SHIFT: int = 0
export const CERT_ALT_NAME_OTHER_NAME: int = 1
export const CERT_ALT_NAME_RFC822_NAME: int = 2
export const CERT_ALT_NAME_DNS_NAME: int = 3
export const CERT_ALT_NAME_X400_ADDRESS: int = 4
export const CERT_ALT_NAME_DIRECTORY_NAME: int = 5
export const CERT_ALT_NAME_EDI_PARTY_NAME: int = 6
export const CERT_ALT_NAME_URL: int = 7
export const CERT_ALT_NAME_IP_ADDRESS: int = 8
export const CERT_ALT_NAME_REGISTERED_ID: int = 9
export const CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT: int = 16
export const CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT: int = 0
export const szOID_PKIX_ACC_DESCR: [char] = "1.3.6.1.5.5.7.48"
export const szOID_PKIX_OCSP: [char] = "1.3.6.1.5.5.7.48.1"
export const szOID_PKIX_CA_ISSUERS: [char] = "1.3.6.1.5.5.7.48.2"
export const szOID_PKIX_TIME_STAMPING: [char] = "1.3.6.1.5.5.7.48.3"
export const szOID_PKIX_CA_REPOSITORY: [char] = "1.3.6.1.5.5.7.48.5"
export const CRL_REASON_UNSPECIFIED: int = 0
export const CRL_REASON_KEY_COMPROMISE: int = 1
export const CRL_REASON_CA_COMPROMISE: int = 2
export const CRL_REASON_AFFILIATION_CHANGED: int = 3
export const CRL_REASON_SUPERSEDED: int = 4
export const CRL_REASON_CESSATION_OF_OPERATION: int = 5
export const CRL_REASON_CERTIFICATE_HOLD: int = 6
export const CRL_REASON_REMOVE_FROM_CRL: int = 8
export const CRL_REASON_PRIVILEGE_WITHDRAWN: int = 9
export const CRL_REASON_AA_COMPROMISE: int = 10
export const CRL_DIST_POINT_NO_NAME: int = 0
export const CRL_DIST_POINT_FULL_NAME: int = 1
export const CRL_DIST_POINT_ISSUER_RDN_NAME: int = 2
export const CRL_DIST_POINT_ERR_INDEX_SHIFT: int = 24
export const CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT: int = 24
export const CERT_DSS_R_LEN: int = 20
export const CERT_DSS_S_LEN: int = 20
export const CRYPT_X942_COUNTER_BYTE_LENGTH: int = 4
export const CRYPT_X942_KEY_LENGTH_BYTE_LENGTH: int = 4
export const CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH: int = 4
export const CRYPT_RC2_40BIT_VERSION: int = 160
export const CRYPT_RC2_56BIT_VERSION: int = 52
export const CRYPT_RC2_64BIT_VERSION: int = 120
export const CRYPT_RC2_128BIT_VERSION: int = 58
export const szOID_QC_EU_COMPLIANCE: [char] = "0.4.0.1862.1.1"
export const szOID_QC_SSCD: [char] = "0.4.0.1862.1.4"
export const PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC: int = 1
export const szOID_VERISIGN_PRIVATE_6_9: [char] = "2.16.840.1.113733.1.6.9"
export const szOID_VERISIGN_ONSITE_JURISDICTION_HASH: [char] = "2.16.840.1.113733.1.6.11"
export const szOID_VERISIGN_BITSTRING_6_13: [char] = "2.16.840.1.113733.1.6.13"
export const szOID_VERISIGN_ISS_STRONG_CRYPTO: [char] = "2.16.840.1.113733.1.8.1"
export const szOIDVerisign_MessageType: [char] = "2.16.840.1.113733.1.9.2"
export const szOIDVerisign_PkiStatus: [char] = "2.16.840.1.113733.1.9.3"
export const szOIDVerisign_FailInfo: [char] = "2.16.840.1.113733.1.9.4"
export const szOIDVerisign_SenderNonce: [char] = "2.16.840.1.113733.1.9.5"
export const szOIDVerisign_RecipientNonce: [char] = "2.16.840.1.113733.1.9.6"
export const szOIDVerisign_TransactionID: [char] = "2.16.840.1.113733.1.9.7"
export const szOID_NETSCAPE: [char] = "2.16.840.1.113730"
export const szOID_NETSCAPE_CERT_EXTENSION: [char] = "2.16.840.1.113730.1"
export const szOID_NETSCAPE_CERT_TYPE: [char] = "2.16.840.1.113730.1.1"
export const szOID_NETSCAPE_BASE_URL: [char] = "2.16.840.1.113730.1.2"
export const szOID_NETSCAPE_REVOCATION_URL: [char] = "2.16.840.1.113730.1.3"
export const szOID_NETSCAPE_CA_REVOCATION_URL: [char] = "2.16.840.1.113730.1.4"
export const szOID_NETSCAPE_CERT_RENEWAL_URL: [char] = "2.16.840.1.113730.1.7"
export const szOID_NETSCAPE_CA_POLICY_URL: [char] = "2.16.840.1.113730.1.8"
export const szOID_NETSCAPE_SSL_SERVER_NAME: [char] = "2.16.840.1.113730.1.12"
export const szOID_NETSCAPE_COMMENT: [char] = "2.16.840.1.113730.1.13"
export const szOID_NETSCAPE_DATA_TYPE: [char] = "2.16.840.1.113730.2"
export const szOID_NETSCAPE_CERT_SEQUENCE: [char] = "2.16.840.1.113730.2.5"
export const szOID_CT_PKI_DATA: [char] = "1.3.6.1.5.5.7.12.2"
export const szOID_CT_PKI_RESPONSE: [char] = "1.3.6.1.5.5.7.12.3"
export const szOID_PKIX_NO_SIGNATURE: [char] = "1.3.6.1.5.5.7.6.2"
export const szOID_CMC: [char] = "1.3.6.1.5.5.7.7"
export const szOID_CMC_STATUS_INFO: [char] = "1.3.6.1.5.5.7.7.1"
export const szOID_CMC_IDENTIFICATION: [char] = "1.3.6.1.5.5.7.7.2"
export const szOID_CMC_IDENTITY_PROOF: [char] = "1.3.6.1.5.5.7.7.3"
export const szOID_CMC_DATA_RETURN: [char] = "1.3.6.1.5.5.7.7.4"
export const szOID_CMC_TRANSACTION_ID: [char] = "1.3.6.1.5.5.7.7.5"
export const szOID_CMC_SENDER_NONCE: [char] = "1.3.6.1.5.5.7.7.6"
export const szOID_CMC_RECIPIENT_NONCE: [char] = "1.3.6.1.5.5.7.7.7"
export const szOID_CMC_ADD_EXTENSIONS: [char] = "1.3.6.1.5.5.7.7.8"
export const szOID_CMC_ENCRYPTED_POP: [char] = "1.3.6.1.5.5.7.7.9"
export const szOID_CMC_DECRYPTED_POP: [char] = "1.3.6.1.5.5.7.7.10"
export const szOID_CMC_LRA_POP_WITNESS: [char] = "1.3.6.1.5.5.7.7.11"
export const szOID_CMC_GET_CERT: [char] = "1.3.6.1.5.5.7.7.15"
export const szOID_CMC_GET_CRL: [char] = "1.3.6.1.5.5.7.7.16"
export const szOID_CMC_REVOKE_REQUEST: [char] = "1.3.6.1.5.5.7.7.17"
export const szOID_CMC_REG_INFO: [char] = "1.3.6.1.5.5.7.7.18"
export const szOID_CMC_RESPONSE_INFO: [char] = "1.3.6.1.5.5.7.7.19"
export const szOID_CMC_QUERY_PENDING: [char] = "1.3.6.1.5.5.7.7.21"
export const szOID_CMC_ID_POP_LINK_RANDOM: [char] = "1.3.6.1.5.5.7.7.22"
export const szOID_CMC_ID_POP_LINK_WITNESS: [char] = "1.3.6.1.5.5.7.7.23"
export const szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE: [char] = "1.3.6.1.5.5.7.7.24"
export const szOID_CMC_ADD_ATTRIBUTES: [char] = "1.3.6.1.4.1.311.10.10.1"
export const CMC_TAGGED_CERT_REQUEST_CHOICE: int = 1
export const CMC_OTHER_INFO_NO_CHOICE: int = 0
export const CMC_OTHER_INFO_FAIL_CHOICE: int = 1
export const CMC_OTHER_INFO_PEND_CHOICE: int = 2
export const CMC_STATUS_SUCCESS: int = 0
export const CMC_STATUS_FAILED: int = 2
export const CMC_STATUS_PENDING: int = 3
export const CMC_STATUS_NO_SUPPORT: int = 4
export const CMC_STATUS_CONFIRM_REQUIRED: int = 5
export const CMC_FAIL_BAD_ALG: int = 0
export const CMC_FAIL_BAD_MESSAGE_CHECK: int = 1
export const CMC_FAIL_BAD_REQUEST: int = 2
export const CMC_FAIL_BAD_TIME: int = 3
export const CMC_FAIL_BAD_CERT_ID: int = 4
export const CMC_FAIL_UNSUPORTED_EXT: int = 5
export const CMC_FAIL_MUST_ARCHIVE_KEYS: int = 6
export const CMC_FAIL_BAD_IDENTITY: int = 7
export const CMC_FAIL_POP_REQUIRED: int = 8
export const CMC_FAIL_POP_FAILED: int = 9
export const CMC_FAIL_NO_KEY_REUSE: int = 10
export const CMC_FAIL_INTERNAL_CA_ERROR: int = 11
export const CMC_FAIL_TRY_LATER: int = 12
export const CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE: int = 1
export const CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE: int = 2
export const CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE: int = 0
export const CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE: int = 1
export const CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE: int = 2
export const CERT_LOGOTYPE_DIRECT_INFO_CHOICE: int = 1
export const CERT_LOGOTYPE_INDIRECT_INFO_CHOICE: int = 2
export const szOID_LOYALTY_OTHER_LOGOTYPE: [char] = "1.3.6.1.5.5.7.20.1"
export const szOID_BACKGROUND_OTHER_LOGOTYPE: [char] = "1.3.6.1.5.5.7.20.2"
export const CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE: int = 1
export const CERT_BIOMETRIC_OID_DATA_CHOICE: int = 2
export const CERT_BIOMETRIC_PICTURE_TYPE: int = 0
export const CERT_BIOMETRIC_SIGNATURE_TYPE: int = 1
export const OCSP_REQUEST_V1: int = 0
export const OCSP_SUCCESSFUL_RESPONSE: int = 0
export const OCSP_MALFORMED_REQUEST_RESPONSE: int = 1
export const OCSP_INTERNAL_ERROR_RESPONSE: int = 2
export const OCSP_TRY_LATER_RESPONSE: int = 3
export const OCSP_SIG_REQUIRED_RESPONSE: int = 5
export const OCSP_UNAUTHORIZED_RESPONSE: int = 6
export const szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE: [char] = "1.3.6.1.5.5.7.48.1.1"
export const OCSP_BASIC_GOOD_CERT_STATUS: int = 0
export const OCSP_BASIC_REVOKED_CERT_STATUS: int = 1
export const OCSP_BASIC_UNKNOWN_CERT_STATUS: int = 2
export const OCSP_BASIC_RESPONSE_V1: int = 0
export const OCSP_BASIC_BY_NAME_RESPONDER_ID: int = 1
export const OCSP_BASIC_BY_KEY_RESPONDER_ID: int = 2
export const CRYPT_OID_ENCODE_OBJECT_FUNC: [char] = "CryptDllEncodeObject"
export const CRYPT_OID_DECODE_OBJECT_FUNC: [char] = "CryptDllDecodeObject"
export const CRYPT_OID_ENCODE_OBJECT_EX_FUNC: [char] = "CryptDllEncodeObjectEx"
export const CRYPT_OID_DECODE_OBJECT_EX_FUNC: [char] = "CryptDllDecodeObjectEx"
export const CRYPT_OID_CREATE_COM_OBJECT_FUNC: [char] = "CryptDllCreateCOMObject"
export const CRYPT_OID_VERIFY_REVOCATION_FUNC: [char] = "CertDllVerifyRevocation"
export const CRYPT_OID_VERIFY_CTL_USAGE_FUNC: [char] = "CertDllVerifyCTLUsage"
export const CRYPT_OID_FORMAT_OBJECT_FUNC: [char] = "CryptDllFormatObject"
export const CRYPT_OID_FIND_OID_INFO_FUNC: [char] = "CryptDllFindOIDInfo"
export const CRYPT_OID_FIND_LOCALIZED_NAME_FUNC: [char] = "CryptDllFindLocalizedName"
export const CRYPT_OID_REGPATH: [char] = "Software\\Microsoft\\Cryptography\\OID"
export const CRYPT_OID_REG_ENCODING_TYPE_PREFIX: [char] = "EncodingType "
export const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A: [char] = "FuncName"
export const CRYPT_DEFAULT_OID: [char] = "DEFAULT"
export const CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG: int = 1
export const CRYPT_REGISTER_FIRST_INDEX: int = 0
export const CRYPT_HASH_ALG_OID_GROUP_ID: int = 1
export const CRYPT_ENCRYPT_ALG_OID_GROUP_ID: int = 2
export const CRYPT_PUBKEY_ALG_OID_GROUP_ID: int = 3
export const CRYPT_SIGN_ALG_OID_GROUP_ID: int = 4
export const CRYPT_RDN_ATTR_OID_GROUP_ID: int = 5
export const CRYPT_EXT_OR_ATTR_OID_GROUP_ID: int = 6
export const CRYPT_ENHKEY_USAGE_OID_GROUP_ID: int = 7
export const CRYPT_POLICY_OID_GROUP_ID: int = 8
export const CRYPT_TEMPLATE_OID_GROUP_ID: int = 9
export const CRYPT_KDF_OID_GROUP_ID: int = 10
export const CRYPT_LAST_OID_GROUP_ID: int = 10
export const CRYPT_OID_INFO_OID_KEY: int = 1
export const CRYPT_OID_INFO_NAME_KEY: int = 2
export const CRYPT_OID_INFO_ALGID_KEY: int = 3
export const CRYPT_OID_INFO_SIGN_KEY: int = 4
export const CRYPT_OID_INFO_CNG_ALGID_KEY: int = 5
export const CRYPT_OID_INFO_CNG_SIGN_KEY: int = 6
export const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT: int = 16
export const CRYPT_INSTALL_OID_INFO_BEFORE_FLAG: int = 1
export const CRYPT_LOCALIZED_NAME_ENCODING_TYPE: int = 0
export const CRYPT_LOCALIZED_NAME_OID: [char] = "LocalizedNames"
export const CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE: int = 1
export const CERT_STRONG_SIGN_OID_INFO_CHOICE: int = 2
export const szOID_CERT_STRONG_SIGN_OS_PREFIX: [char] = "1.3.6.1.4.1.311.72.1."
export const szOID_CERT_STRONG_SIGN_OS_1: [char] = "1.3.6.1.4.1.311.72.1.1"
export const szOID_CERT_STRONG_KEY_OS_PREFIX: [char] = "1.3.6.1.4.1.311.72.2."
export const szOID_CERT_STRONG_KEY_OS_1: [char] = "1.3.6.1.4.1.311.72.2.1"
export const szOID_PKCS_7_DATA: [char] = "1.2.840.113549.1.7.1"
export const szOID_PKCS_7_SIGNED: [char] = "1.2.840.113549.1.7.2"
export const szOID_PKCS_7_ENVELOPED: [char] = "1.2.840.113549.1.7.3"
export const szOID_PKCS_7_SIGNEDANDENVELOPED: [char] = "1.2.840.113549.1.7.4"
export const szOID_PKCS_7_DIGESTED: [char] = "1.2.840.113549.1.7.5"
export const szOID_PKCS_7_ENCRYPTED: [char] = "1.2.840.113549.1.7.6"
export const szOID_PKCS_9_CONTENT_TYPE: [char] = "1.2.840.113549.1.9.3"
export const szOID_PKCS_9_MESSAGE_DIGEST: [char] = "1.2.840.113549.1.9.4"
export const CMSG_DATA: int = 1
export const CMSG_SIGNED: int = 2
export const CMSG_ENVELOPED: int = 3
export const CMSG_SIGNED_AND_ENVELOPED: int = 4
export const CMSG_HASHED: int = 5
export const CMSG_ENCRYPTED: int = 6
export const CERT_ID_ISSUER_SERIAL_NUMBER: int = 1
export const CERT_ID_KEY_IDENTIFIER: int = 2
export const CERT_ID_SHA1_HASH: int = 3
export const CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE: int = 1
export const CMSG_KEY_AGREE_STATIC_KEY_CHOICE: int = 2
export const CMSG_MAIL_LIST_HANDLE_KEY_CHOICE: int = 1
export const CMSG_KEY_TRANS_RECIPIENT: int = 1
export const CMSG_KEY_AGREE_RECIPIENT: int = 2
export const CMSG_MAIL_LIST_RECIPIENT: int = 3
export const CMSG_TYPE_PARAM: int = 1
export const CMSG_CONTENT_PARAM: int = 2
export const CMSG_BARE_CONTENT_PARAM: int = 3
export const CMSG_INNER_CONTENT_TYPE_PARAM: int = 4
export const CMSG_SIGNER_COUNT_PARAM: int = 5
export const CMSG_SIGNER_INFO_PARAM: int = 6
export const CMSG_SIGNER_CERT_INFO_PARAM: int = 7
export const CMSG_SIGNER_HASH_ALGORITHM_PARAM: int = 8
export const CMSG_SIGNER_AUTH_ATTR_PARAM: int = 9
export const CMSG_SIGNER_UNAUTH_ATTR_PARAM: int = 10
export const CMSG_CERT_COUNT_PARAM: int = 11
export const CMSG_CERT_PARAM: int = 12
export const CMSG_CRL_COUNT_PARAM: int = 13
export const CMSG_CRL_PARAM: int = 14
export const CMSG_ENVELOPE_ALGORITHM_PARAM: int = 15
export const CMSG_RECIPIENT_COUNT_PARAM: int = 17
export const CMSG_RECIPIENT_INDEX_PARAM: int = 18
export const CMSG_RECIPIENT_INFO_PARAM: int = 19
export const CMSG_HASH_ALGORITHM_PARAM: int = 20
export const CMSG_HASH_DATA_PARAM: int = 21
export const CMSG_COMPUTED_HASH_PARAM: int = 22
export const CMSG_ENCRYPT_PARAM: int = 26
export const CMSG_ENCRYPTED_DIGEST: int = 27
export const CMSG_ENCODED_SIGNER: int = 28
export const CMSG_ENCODED_MESSAGE: int = 29
export const CMSG_VERSION_PARAM: int = 30
export const CMSG_ATTR_CERT_COUNT_PARAM: int = 31
export const CMSG_ATTR_CERT_PARAM: int = 32
export const CMSG_CMS_RECIPIENT_COUNT_PARAM: int = 33
export const CMSG_CMS_RECIPIENT_INDEX_PARAM: int = 34
export const CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM: int = 35
export const CMSG_CMS_RECIPIENT_INFO_PARAM: int = 36
export const CMSG_UNPROTECTED_ATTR_PARAM: int = 37
export const CMSG_SIGNER_CERT_ID_PARAM: int = 38
export const CMSG_CMS_SIGNER_INFO_PARAM: int = 39
export const CMSG_SIGNED_DATA_V1: int = 1
export const CMSG_SIGNED_DATA_V3: int = 3
export const CMSG_SIGNER_INFO_V1: int = 1
export const CMSG_SIGNER_INFO_V3: int = 3
export const CMSG_HASHED_DATA_V0: int = 0
export const CMSG_HASHED_DATA_V2: int = 2
export const CMSG_ENVELOPED_DATA_V0: int = 0
export const CMSG_ENVELOPED_DATA_V2: int = 2
export const CMSG_KEY_AGREE_ORIGINATOR_CERT: int = 1
export const CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY: int = 2
export const CMSG_ENVELOPED_RECIPIENT_V0: int = 0
export const CMSG_ENVELOPED_RECIPIENT_V2: int = 2
export const CMSG_ENVELOPED_RECIPIENT_V3: int = 3
export const CMSG_ENVELOPED_RECIPIENT_V4: int = 4
export const CMSG_CTRL_VERIFY_SIGNATURE: int = 1
export const CMSG_CTRL_DECRYPT: int = 2
export const CMSG_CTRL_VERIFY_HASH: int = 5
export const CMSG_CTRL_ADD_SIGNER: int = 6
export const CMSG_CTRL_DEL_SIGNER: int = 7
export const CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR: int = 8
export const CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR: int = 9
export const CMSG_CTRL_ADD_CERT: int = 10
export const CMSG_CTRL_DEL_CERT: int = 11
export const CMSG_CTRL_ADD_CRL: int = 12
export const CMSG_CTRL_DEL_CRL: int = 13
export const CMSG_CTRL_ADD_ATTR_CERT: int = 14
export const CMSG_CTRL_DEL_ATTR_CERT: int = 15
export const CMSG_CTRL_KEY_TRANS_DECRYPT: int = 16
export const CMSG_CTRL_KEY_AGREE_DECRYPT: int = 17
export const CMSG_CTRL_MAIL_LIST_DECRYPT: int = 18
export const CMSG_CTRL_VERIFY_SIGNATURE_EX: int = 19
export const CMSG_CTRL_ADD_CMS_SIGNER_INFO: int = 20
export const CMSG_CTRL_ENABLE_STRONG_SIGNATURE: int = 21
export const CMSG_VERIFY_SIGNER_PUBKEY: int = 1
export const CMSG_VERIFY_SIGNER_CERT: int = 2
export const CMSG_VERIFY_SIGNER_CHAIN: int = 3
export const CMSG_VERIFY_SIGNER_NULL: int = 4
export const CMSG_OID_GEN_ENCRYPT_KEY_FUNC: [char] = "CryptMsgDllGenEncryptKey"
export const CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC: [char] = "CryptMsgDllExportEncryptKey"
export const CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC: [char] = "CryptMsgDllImportEncryptKey"
export const CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC: [char] = "CryptMsgDllGenContentEncryptKey"
export const CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC: [char] = "CryptMsgDllCNGGenContentEncryptKey"
export const CMSG_OID_EXPORT_KEY_TRANS_FUNC: [char] = "CryptMsgDllExportKeyTrans"
export const CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC: [char] = "CryptMsgDllCNGExportKeyTrans"
export const CMSG_OID_EXPORT_KEY_AGREE_FUNC: [char] = "CryptMsgDllExportKeyAgree"
export const CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC: [char] = "CryptMsgDllCNGExportKeyAgree"
export const CMSG_OID_EXPORT_MAIL_LIST_FUNC: [char] = "CryptMsgDllExportMailList"
export const CMSG_OID_IMPORT_KEY_TRANS_FUNC: [char] = "CryptMsgDllImportKeyTrans"
export const CMSG_OID_IMPORT_KEY_AGREE_FUNC: [char] = "CryptMsgDllImportKeyAgree"
export const CMSG_OID_IMPORT_MAIL_LIST_FUNC: [char] = "CryptMsgDllImportMailList"
export const CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC: [char] = "CryptMsgDllCNGImportKeyTrans"
export const CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC: [char] = "CryptMsgDllCNGImportKeyAgree"
export const CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC: [char] = "CryptMsgDllCNGImportContentEncryptKey"
export const CERT_KEY_PROV_HANDLE_PROP_ID: int = 1
export const CERT_KEY_PROV_INFO_PROP_ID: int = 2
export const CERT_SHA1_HASH_PROP_ID: int = 3
export const CERT_MD5_HASH_PROP_ID: int = 4
export const CERT_KEY_CONTEXT_PROP_ID: int = 5
export const CERT_KEY_SPEC_PROP_ID: int = 6
export const CERT_IE30_RESERVED_PROP_ID: int = 7
export const CERT_PUBKEY_HASH_RESERVED_PROP_ID: int = 8
export const CERT_ENHKEY_USAGE_PROP_ID: int = 9
export const CERT_NEXT_UPDATE_LOCATION_PROP_ID: int = 10
export const CERT_FRIENDLY_NAME_PROP_ID: int = 11
export const CERT_PVK_FILE_PROP_ID: int = 12
export const CERT_DESCRIPTION_PROP_ID: int = 13
export const CERT_ACCESS_STATE_PROP_ID: int = 14
export const CERT_SIGNATURE_HASH_PROP_ID: int = 15
export const CERT_SMART_CARD_DATA_PROP_ID: int = 16
export const CERT_EFS_PROP_ID: int = 17
export const CERT_FORTEZZA_DATA_PROP_ID: int = 18
export const CERT_ARCHIVED_PROP_ID: int = 19
export const CERT_KEY_IDENTIFIER_PROP_ID: int = 20
export const CERT_AUTO_ENROLL_PROP_ID: int = 21
export const CERT_PUBKEY_ALG_PARA_PROP_ID: int = 22
export const CERT_CROSS_CERT_DIST_POINTS_PROP_ID: int = 23
export const CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID: int = 24
export const CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID: int = 25
export const CERT_ENROLLMENT_PROP_ID: int = 26
export const CERT_DATE_STAMP_PROP_ID: int = 27
export const CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: int = 28
export const CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: int = 29
export const CERT_EXTENDED_ERROR_INFO_PROP_ID: int = 30
export const CERT_RENEWAL_PROP_ID: int = 64
export const CERT_ARCHIVED_KEY_HASH_PROP_ID: int = 65
export const CERT_AUTO_ENROLL_RETRY_PROP_ID: int = 66
export const CERT_AIA_URL_RETRIEVED_PROP_ID: int = 67
export const CERT_AUTHORITY_INFO_ACCESS_PROP_ID: int = 68
export const CERT_BACKED_UP_PROP_ID: int = 69
export const CERT_OCSP_RESPONSE_PROP_ID: int = 70
export const CERT_REQUEST_ORIGINATOR_PROP_ID: int = 71
export const CERT_SOURCE_LOCATION_PROP_ID: int = 72
export const CERT_SOURCE_URL_PROP_ID: int = 73
export const CERT_NEW_KEY_PROP_ID: int = 74
export const CERT_OCSP_CACHE_PREFIX_PROP_ID: int = 75
export const CERT_SMART_CARD_ROOT_INFO_PROP_ID: int = 76
export const CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID: int = 77
export const CERT_NCRYPT_KEY_HANDLE_PROP_ID: int = 78
export const CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID: int = 79
export const CERT_SUBJECT_INFO_ACCESS_PROP_ID: int = 80
export const CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: int = 81
export const CERT_CA_DISABLE_CRL_PROP_ID: int = 82
export const CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID: int = 83
export const CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID: int = 84
export const CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: int = 85
export const CERT_SUBJECT_DISABLE_CRL_PROP_ID: int = 86
export const CERT_CEP_PROP_ID: int = 87
export const CERT_SIGN_HASH_CNG_ALG_PROP_ID: int = 89
export const CERT_SCARD_PIN_ID_PROP_ID: int = 90
export const CERT_SCARD_PIN_INFO_PROP_ID: int = 91
export const CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID: int = 92
export const CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: int = 93
export const CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID: int = 94
export const CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID: int = 95
export const CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: int = 96
export const CERT_NO_EXPIRE_NOTIFICATION_PROP_ID: int = 97
export const CERT_AUTH_ROOT_SHA256_HASH_PROP_ID: int = 98
export const CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID: int = 99
export const CERT_HCRYPTPROV_TRANSFER_PROP_ID: int = 100
export const CERT_SMART_CARD_READER_PROP_ID: int = 101
export const CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID: int = 102
export const CERT_KEY_REPAIR_ATTEMPTED_PROP_ID: int = 103
export const CERT_DISALLOWED_FILETIME_PROP_ID: int = 104
export const CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID: int = 105
export const CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID: int = 106
export const CERT_SHA256_HASH_PROP_ID: int = 107
export const CERT_SCEP_SERVER_CERTS_PROP_ID: int = 108
export const CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID: int = 109
export const CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID: int = 110
export const CERT_SCEP_CA_CERT_PROP_ID: int = 111
export const CERT_SCEP_SIGNER_CERT_PROP_ID: int = 112
export const CERT_SCEP_NONCE_PROP_ID: int = 113
export const CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID: int = 114
export const CERT_SCEP_FLAGS_PROP_ID: int = 115
export const CERT_SCEP_GUID_PROP_ID: int = 116
export const CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID: int = 117
export const CERT_ISOLATED_KEY_PROP_ID: int = 118
export const CERT_SERIAL_CHAIN_PROP_ID: int = 119
export const CERT_KEY_CLASSIFICATION_PROP_ID: int = 120
export const CERT_OCSP_MUST_STAPLE_PROP_ID: int = 121
export const CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID: int = 122
export const CERT_NONCOMPLIANT_ROOT_URL_PROP_ID: int = 123
export const CERT_PIN_SHA256_HASH_PROP_ID: int = 124
export const CERT_CLR_DELETE_KEY_PROP_ID: int = 125
export const CERT_NOT_BEFORE_FILETIME_PROP_ID: int = 126
export const CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID: int = 127
export const CERT_DISALLOWED_CA_FILETIME_PROP_ID: int = 128
export const CERT_FIRST_RESERVED_PROP_ID: int = 129
export const szOID_CERT_PROP_ID_PREFIX: [char] = "1.3.6.1.4.1.311.10.11."
export const szOID_CERT_KEY_IDENTIFIER_PROP_ID: [char] = "1.3.6.1.4.1.311.10.11.20"
export const szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: [char] = "1.3.6.1.4.1.311.10.11.28"
export const szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: [char] = "1.3.6.1.4.1.311.10.11.29"
export const szOID_CERT_MD5_HASH_PROP_ID: [char] = "1.3.6.1.4.1.311.10.11.4"
export const szOID_CERT_SIGNATURE_HASH_PROP_ID: [char] = "1.3.6.1.4.1.311.10.11.15"
export const szOID_CERT_DISALLOWED_FILETIME_PROP_ID: [char] = "1.3.6.1.4.1.311.10.11.104"
export const szOID_CERT_DISALLOWED_CA_FILETIME_PROP_ID: [char] = "1.3.6.1.4.1.311.10.11.128"
export const szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION: [char] = "1.3.6.1.4.1.311.60.3.1"
export const szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION: [char] = "1.3.6.1.4.1.311.60.3.2"
export const szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL: [char] = "1.3.6.1.4.1.311.60.3.3"
export const sz_CERT_STORE_PROV_MEMORY: [char] = "Memory"
export const sz_CERT_STORE_PROV_FILENAME_W: [char] = "File"
export const sz_CERT_STORE_PROV_SYSTEM_W: [char] = "System"
export const sz_CERT_STORE_PROV_PKCS7: [char] = "PKCS7"
export const sz_CERT_STORE_PROV_PKCS12: [char] = "PKCS12"
export const sz_CERT_STORE_PROV_SERIALIZED: [char] = "Serialized"
export const sz_CERT_STORE_PROV_COLLECTION: [char] = "Collection"
export const sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W: [char] = "SystemRegistry"
export const sz_CERT_STORE_PROV_PHYSICAL_W: [char] = "Physical"
export const sz_CERT_STORE_PROV_SMART_CARD_W: [char] = "SmartCard"
export const sz_CERT_STORE_PROV_LDAP_W: [char] = "Ldap"
export const CERT_SYSTEM_STORE_LOCATION_SHIFT: int = 16
export const CERT_SYSTEM_STORE_CURRENT_USER_ID: int = 1
export const CERT_SYSTEM_STORE_LOCAL_MACHINE_ID: int = 2
export const CERT_SYSTEM_STORE_CURRENT_SERVICE_ID: int = 4
export const CERT_SYSTEM_STORE_SERVICES_ID: int = 5
export const CERT_SYSTEM_STORE_USERS_ID: int = 6
export const CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID: int = 7
export const CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID: int = 8
export const CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID: int = 9
export const CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID: int = 10
export const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A: [char] = "PeerUsages"
export const CERT_AUTH_ROOT_CTL_FILENAME_A: [char] = "authroot.stl"
export const CERT_DISALLOWED_CERT_CTL_FILENAME_A: [char] = "disallowedcert.stl"
export const CERT_PIN_RULES_CTL_FILENAME_A: [char] = "pinrules.stl"
export const CRYPT_OID_OPEN_STORE_PROV_FUNC: [char] = "CertDllOpenStoreProv"
export const CERT_STORE_PROV_CLOSE_FUNC: int = 0
export const CERT_STORE_PROV_READ_CERT_FUNC: int = 1
export const CERT_STORE_PROV_WRITE_CERT_FUNC: int = 2
export const CERT_STORE_PROV_DELETE_CERT_FUNC: int = 3
export const CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC: int = 4
export const CERT_STORE_PROV_READ_CRL_FUNC: int = 5
export const CERT_STORE_PROV_WRITE_CRL_FUNC: int = 6
export const CERT_STORE_PROV_DELETE_CRL_FUNC: int = 7
export const CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC: int = 8
export const CERT_STORE_PROV_READ_CTL_FUNC: int = 9
export const CERT_STORE_PROV_WRITE_CTL_FUNC: int = 10
export const CERT_STORE_PROV_DELETE_CTL_FUNC: int = 11
export const CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC: int = 12
export const CERT_STORE_PROV_CONTROL_FUNC: int = 13
export const CERT_STORE_PROV_FIND_CERT_FUNC: int = 14
export const CERT_STORE_PROV_FREE_FIND_CERT_FUNC: int = 15
export const CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC: int = 16
export const CERT_STORE_PROV_FIND_CRL_FUNC: int = 17
export const CERT_STORE_PROV_FREE_FIND_CRL_FUNC: int = 18
export const CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC: int = 19
export const CERT_STORE_PROV_FIND_CTL_FUNC: int = 20
export const CERT_STORE_PROV_FREE_FIND_CTL_FUNC: int = 21
export const CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC: int = 22
export const CERT_STORE_SAVE_AS_STORE: int = 1
export const CERT_STORE_SAVE_AS_PKCS7: int = 2
export const CERT_STORE_SAVE_AS_PKCS12: int = 3
export const CERT_STORE_SAVE_TO_FILE: int = 1
export const CERT_STORE_SAVE_TO_MEMORY: int = 2
export const CERT_STORE_SAVE_TO_FILENAME_A: int = 3
export const CERT_STORE_SAVE_TO_FILENAME_W: int = 4
export const CERT_COMPARE_SHIFT: int = 16
export const CERT_COMPARE_ANY: int = 0
export const CERT_COMPARE_SHA1_HASH: int = 1
export const CERT_COMPARE_NAME: int = 2
export const CERT_COMPARE_ATTR: int = 3
export const CERT_COMPARE_MD5_HASH: int = 4
export const CERT_COMPARE_PROPERTY: int = 5
export const CERT_COMPARE_PUBLIC_KEY: int = 6
export const CERT_COMPARE_NAME_STR_A: int = 7
export const CERT_COMPARE_NAME_STR_W: int = 8
export const CERT_COMPARE_KEY_SPEC: int = 9
export const CERT_COMPARE_ENHKEY_USAGE: int = 10
export const CERT_COMPARE_SUBJECT_CERT: int = 11
export const CERT_COMPARE_ISSUER_OF: int = 12
export const CERT_COMPARE_EXISTING: int = 13
export const CERT_COMPARE_SIGNATURE_HASH: int = 14
export const CERT_COMPARE_KEY_IDENTIFIER: int = 15
export const CERT_COMPARE_CERT_ID: int = 16
export const CERT_COMPARE_CROSS_CERT_DIST_POINTS: int = 17
export const CERT_COMPARE_PUBKEY_MD5_HASH: int = 18
export const CERT_COMPARE_SUBJECT_INFO_ACCESS: int = 19
export const CERT_COMPARE_HASH_STR: int = 20
export const CERT_COMPARE_HAS_PRIVATE_KEY: int = 21
export const CRL_FIND_ANY: int = 0
export const CRL_FIND_ISSUED_BY: int = 1
export const CRL_FIND_EXISTING: int = 2
export const CRL_FIND_ISSUED_FOR: int = 3
export const CERT_STORE_ADD_NEW: int = 1
export const CERT_STORE_ADD_USE_EXISTING: int = 2
export const CERT_STORE_ADD_REPLACE_EXISTING: int = 3
export const CERT_STORE_ADD_ALWAYS: int = 4
export const CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES: int = 5
export const CERT_STORE_ADD_NEWER: int = 6
export const CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES: int = 7
export const CERT_STORE_CERTIFICATE_CONTEXT: int = 1
export const CERT_STORE_CRL_CONTEXT: int = 2
export const CERT_STORE_CTL_CONTEXT: int = 3
export const CTL_ANY_SUBJECT_TYPE: int = 1
export const CTL_CERT_SUBJECT_TYPE: int = 2
export const CTL_FIND_ANY: int = 0
export const CTL_FIND_SHA1_HASH: int = 1
export const CTL_FIND_MD5_HASH: int = 2
export const CTL_FIND_USAGE: int = 3
export const CTL_FIND_SUBJECT: int = 4
export const CTL_FIND_EXISTING: int = 5
export const CERT_STORE_CTRL_RESYNC: int = 1
export const CERT_STORE_CTRL_NOTIFY_CHANGE: int = 2
export const CERT_STORE_CTRL_COMMIT: int = 3
export const CERT_STORE_CTRL_AUTO_RESYNC: int = 4
export const CERT_STORE_CTRL_CANCEL_NOTIFY: int = 5
export const CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC: [char] = "CertDllOpenSystemStoreProv"
export const CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC: [char] = "CertDllRegisterSystemStore"
export const CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC: [char] = "CertDllUnregisterSystemStore"
export const CRYPT_OID_ENUM_SYSTEM_STORE_FUNC: [char] = "CertDllEnumSystemStore"
export const CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC: [char] = "CertDllRegisterPhysicalStore"
export const CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC: [char] = "CertDllUnregisterPhysicalStore"
export const CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC: [char] = "CertDllEnumPhysicalStore"
export const CERT_CONTEXT_REVOCATION_TYPE: int = 1
export const CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB: int = 1
export const CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT: int = 2
export const CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL: int = 3
export const CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE: int = 4
export const CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY: int = 1
export const CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT: int = 2
export const CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN: int = 3
export const CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL: int = 4
export const CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC: [char] = "CryptDllExtractEncodedSignatureParameters"
export const CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC: [char] = "CryptDllSignAndEncodeHash"
export const CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC: [char] = "CryptDllVerifyEncodedSignature"
export const CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID: int = 1
export const CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID: int = 2
export const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC: [char] = "CryptDllExportPublicKeyInfoEx"
export const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC: [char] = "CryptDllExportPublicKeyInfoEx2"
export const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC: [char] = "CryptDllExportPublicKeyInfoFromBCryptKeyHandle"
export const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC: [char] = "CryptDllImportPublicKeyInfoEx"
export const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC: [char] = "CryptDllImportPublicKeyInfoEx2"
export const CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC: [char] = "CryptDllImportPrivateKeyInfoEx"
export const CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC: [char] = "CryptDllExportPrivateKeyInfoEx"
export const CERT_SIMPLE_NAME_STR: int = 1
export const CERT_OID_NAME_STR: int = 2
export const CERT_X500_NAME_STR: int = 3
export const CERT_XML_NAME_STR: int = 4
export const CERT_NAME_EMAIL_TYPE: int = 1
export const CERT_NAME_RDN_TYPE: int = 2
export const CERT_NAME_ATTR_TYPE: int = 3
export const CERT_NAME_SIMPLE_DISPLAY_TYPE: int = 4
export const CERT_NAME_FRIENDLY_DISPLAY_TYPE: int = 5
export const CERT_NAME_DNS_TYPE: int = 6
export const CERT_NAME_URL_TYPE: int = 7
export const CERT_NAME_UPN_TYPE: int = 8
export const CERT_QUERY_CONTENT_CERT: int = 1
export const CERT_QUERY_CONTENT_CTL: int = 2
export const CERT_QUERY_CONTENT_CRL: int = 3
export const CERT_QUERY_CONTENT_SERIALIZED_STORE: int = 4
export const CERT_QUERY_CONTENT_SERIALIZED_CERT: int = 5
export const CERT_QUERY_CONTENT_SERIALIZED_CTL: int = 6
export const CERT_QUERY_CONTENT_SERIALIZED_CRL: int = 7
export const CERT_QUERY_CONTENT_PKCS7_SIGNED: int = 8
export const CERT_QUERY_CONTENT_PKCS7_UNSIGNED: int = 9
export const CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED: int = 10
export const CERT_QUERY_CONTENT_PKCS10: int = 11
export const CERT_QUERY_CONTENT_PFX: int = 12
export const CERT_QUERY_CONTENT_CERT_PAIR: int = 13
export const CERT_QUERY_CONTENT_PFX_AND_LOAD: int = 14
export const CERT_QUERY_FORMAT_BINARY: int = 1
export const CERT_QUERY_FORMAT_BASE64_ENCODED: int = 2
export const CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED: int = 3
export const SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC: [char] = "SchemeDllRetrieveEncodedObject"
export const SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC: [char] = "SchemeDllRetrieveEncodedObjectW"
export const CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC: [char] = "ContextDllCreateObjectContext"
export const CRYPTNET_URL_CACHE_PRE_FETCH_NONE: int = 0
export const CRYPTNET_URL_CACHE_PRE_FETCH_BLOB: int = 1
export const CRYPTNET_URL_CACHE_PRE_FETCH_CRL: int = 2
export const CRYPTNET_URL_CACHE_PRE_FETCH_OCSP: int = 3
export const CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB: int = 5
export const CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB: int = 6
export const CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB: int = 7
export const CRYPTNET_URL_CACHE_DEFAULT_FLUSH: int = 0
export const CRYPTNET_URL_CACHE_RESPONSE_NONE: int = 0
export const CRYPTNET_URL_CACHE_RESPONSE_HTTP: int = 1
export const URL_OID_GET_OBJECT_URL_FUNC: [char] = "UrlDllGetObjectUrl"
export const TIME_VALID_OID_GET_OBJECT_FUNC: [char] = "TimeValidDllGetObject"
export const TIME_VALID_OID_FLUSH_OBJECT_FUNC: [char] = "TimeValidDllFlushObject"
export const CERT_CREATE_SELFSIGN_NO_SIGN: int = 1
export const CERT_CREATE_SELFSIGN_NO_KEY_INFO: int = 2
export const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT: int = 5
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT: int = 3
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT: int = 100000
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT: int = 10
export const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT: int = 5
export const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT: int = 1023
export const CERT_CHAIN_AUTO_CURRENT_USER: int = 1
export const CERT_CHAIN_AUTO_LOCAL_MACHINE: int = 2
export const CERT_CHAIN_AUTO_IMPERSONATED: int = 3
export const CERT_CHAIN_AUTO_PROCESS_INFO: int = 4
export const CERT_CHAIN_AUTO_PINRULE_INFO: int = 5
export const CERT_CHAIN_AUTO_NETWORK_INFO: int = 6
export const CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE: int = 7
export const CERT_CHAIN_AUTO_HPKP_RULE_INFO: int = 8
export const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT: int = 5
export const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT: int = 500
export const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT: int = 10
export const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT: int = 20
export const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT: int = 10
export const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT: int = 60
export const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT: int = 50
export const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT: int = 12
export const CERT_CHAIN_FIND_BY_ISSUER: int = 1
export const CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC: [char] = "CertDllVerifyCertificateChainPolicy"
export const AUTHTYPE_CLIENT: int = 1
export const AUTHTYPE_SERVER: int = 2
export const SSL_F12_ERROR_TEXT_LENGTH: int = 256
export const CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL: int = 0
export const CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL: int = 1
export const CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL: int = 2
export const CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY: int = 0
export const CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY: int = 1
export const CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY: int = 2
export const SSL_HPKP_PKP_HEADER_INDEX: int = 0
export const SSL_HPKP_PKP_RO_HEADER_INDEX: int = 1
export const SSL_HPKP_HEADER_COUNT: int = 2
export const SSL_KEY_PIN_ERROR_TEXT_LENGTH: int = 512
export const CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS: int = 0
export const CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING: int = 1
export const CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING: int = 2
export const szOID_PKCS_12_PbeIds: [char] = "1.2.840.113549.1.12.1"
export const szOID_PKCS_12_pbeWithSHA1And128BitRC4: [char] = "1.2.840.113549.1.12.1.1"
export const szOID_PKCS_12_pbeWithSHA1And40BitRC4: [char] = "1.2.840.113549.1.12.1.2"
export const szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES: [char] = "1.2.840.113549.1.12.1.3"
export const szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES: [char] = "1.2.840.113549.1.12.1.4"
export const szOID_PKCS_12_pbeWithSHA1And128BitRC2: [char] = "1.2.840.113549.1.12.1.5"
export const szOID_PKCS_12_pbeWithSHA1And40BitRC2: [char] = "1.2.840.113549.1.12.1.6"
export const szOID_PKCS_5_PBKDF2: [char] = "1.2.840.113549.1.5.12"
export const szOID_PKCS_5_PBES2: [char] = "1.2.840.113549.1.5.13"
export const PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE: int = 0
export const PKCS12_PBKDF2_ID_HMAC_SHA1: [char] = "1.2.840.113549.2.7"
export const PKCS12_PBKDF2_ID_HMAC_SHA256: [char] = "1.2.840.113549.2.9"
export const PKCS12_PBKDF2_ID_HMAC_SHA384: [char] = "1.2.840.113549.2.10"
export const PKCS12_PBKDF2_ID_HMAC_SHA512: [char] = "1.2.840.113549.2.11"
export const CERT_SELECT_MAX_PARA: int = 500
export const CERT_SELECT_BY_ENHKEY_USAGE: int = 1
export const CERT_SELECT_BY_KEY_USAGE: int = 2
export const CERT_SELECT_BY_POLICY_OID: int = 3
export const CERT_SELECT_BY_PROV_NAME: int = 4
export const CERT_SELECT_BY_EXTENSION: int = 5
export const CERT_SELECT_BY_SUBJECT_HOST_NAME: int = 6
export const CERT_SELECT_BY_ISSUER_ATTR: int = 7
export const CERT_SELECT_BY_SUBJECT_ATTR: int = 8
export const CERT_SELECT_BY_ISSUER_NAME: int = 9
export const CERT_SELECT_BY_PUBLIC_KEY: int = 10
export const CERT_SELECT_BY_TLS_SIGNATURES: int = 11
export const CERT_SELECT_BY_ISSUER_DISPLAYNAME: int = 12
export const CERT_SELECT_BY_FRIENDLYNAME: int = 13
export const CERT_SELECT_BY_THUMBPRINT: int = 14
export const TIMESTAMP_VERSION: int = 1
export const TIMESTAMP_STATUS_GRANTED: int = 0
export const TIMESTAMP_STATUS_GRANTED_WITH_MODS: int = 1
export const TIMESTAMP_STATUS_REJECTED: int = 2
export const TIMESTAMP_STATUS_WAITING: int = 3
export const TIMESTAMP_STATUS_REVOCATION_WARNING: int = 4
export const TIMESTAMP_STATUS_REVOKED: int = 5
export const TIMESTAMP_FAILURE_BAD_ALG: int = 0
export const TIMESTAMP_FAILURE_BAD_REQUEST: int = 2
export const TIMESTAMP_FAILURE_BAD_FORMAT: int = 5
export const TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE: int = 14
export const TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED: int = 15
export const TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED: int = 16
export const TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE: int = 17
export const TIMESTAMP_FAILURE_SYSTEM_FAILURE: int = 25
export const CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE: int = 1
export const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE: int = 32
export const CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE: int = 33
export const SSL_OBJECT_LOCATOR_PFX_FUNC: [char] = "SslObjectLocatorInitializePfx"
export const SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC: [char] = "SslObjectLocatorInitializeIssuerList"
export const SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC: [char] = "SslObjectLocatorInitializeCertValidationConfig"
export const CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN: int = 1
export const CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP: int = 2
export const CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT: int = 3
export const CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD: int = 4
export const CERT_FILE_HASH_USE_TYPE: int = 1
export const CERT_TIMESTAMP_HASH_USE_TYPE: int = 2
export const szFORCE_KEY_PROTECTION: [char] = "ForceKeyProtection"
export const CRYPTPROTECTMEMORY_BLOCK_SIZE: int = 16
export const EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR: int = 5
export const EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR: int = 6
export const EFS_SUBVER_UNKNOWN: int = 0
export const EFS_EFS_SUBVER_EFS_CERT: int = 1
export const EFS_PFILE_SUBVER_RMS: int = 2
export const EFS_PFILE_SUBVER_APPX: int = 3
export const MAX_SID_SIZE: int = 256
export const __REQUIRED_RPCNDR_H_VERSION__: int = 501
export const __REQUIRED_RPCSAL_H_VERSION__: int = 100
export const TARGET_IS_NT1012_OR_LATER: int = 1
export const TARGET_IS_NT102_OR_LATER: int = 1
export const TARGET_IS_NT100_OR_LATER: int = 1
export const TARGET_IS_NT63_OR_LATER: int = 1
export const TARGET_IS_NT62_OR_LATER: int = 1
export const TARGET_IS_NT61_OR_LATER: int = 1
export const TARGET_IS_NT60_OR_LATER: int = 1
export const TARGET_IS_NT51_OR_LATER: int = 1
export const TARGET_IS_NT50_OR_LATER: int = 1
export const TARGET_IS_NT40_OR_LATER: int = 1
export const TARGET_IS_NT351_OR_WIN95_OR_LATER: int = 1
export const cbNDRContext: int = 20
export const USER_MARSHAL_FC_BYTE: int = 1
export const USER_MARSHAL_FC_CHAR: int = 2
export const USER_MARSHAL_FC_SMALL: int = 3
export const USER_MARSHAL_FC_USMALL: int = 4
export const USER_MARSHAL_FC_WCHAR: int = 5
export const USER_MARSHAL_FC_SHORT: int = 6
export const USER_MARSHAL_FC_USHORT: int = 7
export const USER_MARSHAL_FC_LONG: int = 8
export const USER_MARSHAL_FC_ULONG: int = 9
export const USER_MARSHAL_FC_FLOAT: int = 10
export const USER_MARSHAL_FC_HYPER: int = 11
export const USER_MARSHAL_FC_DOUBLE: int = 12
export const ROT_COMPARE_MAX: int = 2048
export const METHOD_BUFFERED: int = 0
export const METHOD_IN_DIRECT: int = 1
export const METHOD_OUT_DIRECT: int = 2
export const METHOD_NEITHER: int = 3
export const FILE_ANY_ACCESS: int = 0
export const STORAGE_FAILURE_PREDICTION_CONFIG_V1: int = 1
export const SRB_TYPE_SCSI_REQUEST_BLOCK: int = 0
export const SRB_TYPE_STORAGE_REQUEST_BLOCK: int = 1
export const STORAGE_ADDRESS_TYPE_BTL8: int = 0
export const STORAGE_RPMB_DESCRIPTOR_VERSION_1: int = 1
export const STORAGE_RPMB_MINIMUM_RELIABLE_WRITE_SIZE: int = 512
export const STORAGE_CRYPTO_CAPABILITY_VERSION_1: int = 1
export const STORAGE_CRYPTO_DESCRIPTOR_VERSION_1: int = 1
export const STORAGE_DEVICE_MAX_OPERATIONAL_STATUS: int = 16
export const STORAGE_OFFLOAD_MAX_TOKEN_LENGTH: int = 512
export const DEVICE_DSM_PARAMETERS_V1: int = 1
export const DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1: int = 1
export const DEVICE_DSM_RANGE_ERROR_OUTPUT_V1: int = 1
export const IOCTL_STORAGE_BC_VERSION: int = 1
export const ERROR_HISTORY_DIRECTORY_ENTRY_DEFAULT_COUNT: int = 8
export const DEVICEDUMP_STRUCTURE_VERSION_V1: int = 1
export const DEVICEDUMP_MAX_IDSTRING: int = 32
export const MAX_FW_BUCKET_ID_LENGTH: int = 132
export const TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX: int = 16
export const TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH: int = 16
export const TC_PUBLIC_DATA_TYPE_ATAGP: [char] = "ATAGPLogPages"
export const TC_PUBLIC_DATA_TYPE_ATASMART: [char] = "ATASMARTPages"
export const CDB_SIZE: int = 16
export const TELEMETRY_COMMAND_SIZE: int = 16
export const STORAGE_IDLE_POWERUP_REASON_VERSION_V1: int = 1
export const STORAGE_DEVICE_POWER_CAP_VERSION_V1: int = 1
export const STORAGE_EVENT_NOTIFICATION_VERSION_V1: int = 1
export const STORAGE_HW_FIRMWARE_REVISION_LENGTH: int = 16
export const STORATTRIBUTE_NONE: int = 0
export const STORATTRIBUTE_MANAGEMENT_STATE: int = 1
export const SCM_MAX_SYMLINK_LEN_IN_CHARS: int = 256
export const MAX_INTERFACE_CODES: int = 8
export const SCM_PD_FIRMWARE_REVISION_LENGTH_BYTES: int = 32
export const SCM_PD_PROPERTY_NAME_LENGTH_IN_CHARS: int = 128
export const SCM_PD_MAX_OPERATIONAL_STATUS: int = 16
export const HIST_NO_OF_BUCKETS: int = 24
export const DISK_LOGGING_START: int = 0
export const DISK_LOGGING_STOP: int = 1
export const DISK_LOGGING_DUMP: int = 2
export const DISK_BINNING: int = 3
export const CAP_ATA_ID_CMD: int = 1
export const CAP_ATAPI_ID_CMD: int = 2
export const CAP_SMART_CMD: int = 4
export const SMART_NO_ERROR: int = 0
export const SMART_IDE_ERROR: int = 1
export const SMART_INVALID_FLAG: int = 2
export const SMART_INVALID_COMMAND: int = 3
export const SMART_INVALID_BUFFER: int = 4
export const SMART_INVALID_DRIVE: int = 5
export const SMART_INVALID_IOCTL: int = 6
export const SMART_ERROR_NO_MEM: int = 7
export const SMART_INVALID_REGISTER: int = 8
export const SMART_NOT_SUPPORTED: int = 9
export const SMART_NO_IDE_DEVICE: int = 10
export const SMART_OFFLINE_ROUTINE_OFFLINE: int = 0
export const SMART_SHORT_SELFTEST_OFFLINE: int = 1
export const SMART_EXTENDED_SELFTEST_OFFLINE: int = 2
export const SMART_ABORT_OFFLINE_SELFTEST: int = 127
export const SMART_SHORT_SELFTEST_CAPTIVE: int = 129
export const SMART_EXTENDED_SELFTEST_CAPTIVE: int = 130
export const READ_ATTRIBUTE_BUFFER_SIZE: int = 512
export const IDENTIFY_BUFFER_SIZE: int = 512
export const READ_THRESHOLD_BUFFER_SIZE: int = 512
export const SMART_LOG_SECTOR_SIZE: int = 512
export const MAX_VOLUME_ID_SIZE: int = 36
export const MAX_VOLUME_TEMPLATE_SIZE: int = 40
export const VENDOR_ID_LENGTH: int = 8
export const PRODUCT_ID_LENGTH: int = 16
export const REVISION_LENGTH: int = 4
export const SERIAL_NUMBER_LENGTH: int = 32
export const LOCK_ELEMENT: int = 0
export const UNLOCK_ELEMENT: int = 1
export const EXTEND_IEPORT: int = 2
export const RETRACT_IEPORT: int = 3
export const FILESYSTEM_STATISTICS_TYPE_NTFS: int = 1
export const FILESYSTEM_STATISTICS_TYPE_FAT: int = 2
export const FILESYSTEM_STATISTICS_TYPE_EXFAT: int = 3
export const FILESYSTEM_STATISTICS_TYPE_REFS: int = 4
export const ENCRYPTED_DATA_INFO_SPARSE_FILE: int = 1
export const TXFS_RM_STATE_NOT_STARTED: int = 0
export const TXFS_RM_STATE_STARTING: int = 1
export const TXFS_RM_STATE_ACTIVE: int = 2
export const TXFS_RM_STATE_SHUTTING_DOWN: int = 3
export const REQUEST_OPLOCK_CURRENT_VERSION: int = 1
export const SD_GLOBAL_CHANGE_TYPE_MACHINE_SID: int = 1
export const CSV_QUERY_MDS_PATH_V2_VERSION_1: int = 1
export const REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V0: int = 0
export const REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1: int = 1
export const REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1: int = 1
export const WIM_PROVIDER_HASH_SIZE: int = 20
export const PROJFS_PROTOCOL_VERSION: int = 3
export const SCARD_ATR_LENGTH: int = 33
export const SCARD_POWER_DOWN: int = 0
export const SCARD_COLD_RESET: int = 1
export const SCARD_WARM_RESET: int = 2
export const MAXIMUM_ATTR_STRING_LENGTH: int = 32
export const MAXIMUM_SMARTCARD_READERS: int = 10
export const SCARD_CLASS_VENDOR_INFO: int = 1
export const SCARD_CLASS_COMMUNICATIONS: int = 2
export const SCARD_CLASS_PROTOCOL: int = 3
export const SCARD_CLASS_POWER_MGMT: int = 4
export const SCARD_CLASS_SECURITY: int = 5
export const SCARD_CLASS_MECHANICAL: int = 6
export const SCARD_CLASS_VENDOR_DEFINED: int = 7
export const SCARD_CLASS_IFD_PROTOCOL: int = 8
export const SCARD_CLASS_ICC_STATE: int = 9
export const SCARD_T0_HEADER_LENGTH: int = 7
export const SCARD_T0_CMD_LENGTH: int = 5
export const SCARD_T1_PROLOGUE_LENGTH: int = 3
export const SCARD_T1_EPILOGUE_LENGTH: int = 2
export const SCARD_T1_EPILOGUE_LENGTH_LRC: int = 1
export const SCARD_T1_MAX_IFS: int = 254
export const SCARD_UNKNOWN: int = 0
export const SCARD_ABSENT: int = 1
export const SCARD_PRESENT: int = 2
export const SCARD_SWALLOWED: int = 3
export const SCARD_POWERED: int = 4
export const SCARD_NEGOTIABLE: int = 5
export const SCARD_SPECIFIC: int = 6
export const SCARD_SCOPE_USER: int = 0
export const SCARD_SCOPE_TERMINAL: int = 1
export const SCARD_SCOPE_SYSTEM: int = 2
export const SCARD_PROVIDER_PRIMARY: int = 1
export const SCARD_PROVIDER_CSP: int = 2
export const SCARD_PROVIDER_KSP: int = 3
export const SCARD_SHARE_EXCLUSIVE: int = 1
export const SCARD_SHARE_SHARED: int = 2
export const SCARD_SHARE_DIRECT: int = 3
export const SCARD_LEAVE_CARD: int = 0
export const SCARD_RESET_CARD: int = 1
export const SCARD_UNPOWER_CARD: int = 2
export const SCARD_EJECT_CARD: int = 3
export const MAXPROPPAGES: int = 100
export const PSPCB_ADDREF: int = 0
export const PSPCB_RELEASE: int = 1
export const PSPCB_CREATE: int = 2
export const PSCB_INITIALIZED: int = 1
export const PSCB_PRECREATE: int = 2
export const PSCB_BUTTONPRESSED: int = 3
export const PSNRET_NOERROR: int = 0
export const PSNRET_INVALID: int = 1
export const PSNRET_INVALID_NOCHANGEPAGE: int = 2
export const PSNRET_MESSAGEHANDLED: int = 3
export const PSBTN_BACK: int = 0
export const PSBTN_NEXT: int = 1
export const PSBTN_FINISH: int = 2
export const PSBTN_OK: int = 3
export const PSBTN_APPLYNOW: int = 4
export const PSBTN_CANCEL: int = 5
export const PSBTN_HELP: int = 6
export const PSBTN_MAX: int = 6
export const PSWIZB_SHOW: int = 0
export const PSWIZB_RESTORE: int = 1
export const WIZ_CXDLG: int = 276
export const WIZ_CYDLG: int = 140
export const WIZ_CXBMP: int = 80
export const WIZ_BODYX: int = 92
export const WIZ_BODYCX: int = 184
export const PROP_SM_CXDLG: int = 212
export const PROP_SM_CYDLG: int = 188
export const PROP_MED_CXDLG: int = 227
export const PROP_MED_CYDLG: int = 215
export const PROP_LG_CXDLG: int = 252
export const PROP_LG_CYDLG: int = 218
export const PRINTER_CONTROL_PAUSE: int = 1
export const PRINTER_CONTROL_RESUME: int = 2
export const PRINTER_CONTROL_PURGE: int = 3
export const PRINTER_CONTROL_SET_STATUS: int = 4
export const NO_PRIORITY: int = 0
export const MAX_PRIORITY: int = 99
export const MIN_PRIORITY: int = 1
export const DEF_PRIORITY: int = 1
export const JOB_CONTROL_PAUSE: int = 1
export const JOB_CONTROL_RESUME: int = 2
export const JOB_CONTROL_CANCEL: int = 3
export const JOB_CONTROL_RESTART: int = 4
export const JOB_CONTROL_DELETE: int = 5
export const JOB_CONTROL_SENT_TO_PRINTER: int = 6
export const JOB_CONTROL_LAST_PAGE_EJECTED: int = 7
export const JOB_CONTROL_RETAIN: int = 8
export const JOB_CONTROL_RELEASE: int = 9
export const JOB_CONTROL_SEND_TOAST: int = 10
export const JOB_POSITION_UNSPECIFIED: int = 0
export const DI_CHANNEL: int = 1
export const DI_READ_SPOOL_JOB: int = 3
export const PORT_STATUS_TYPE_ERROR: int = 1
export const PORT_STATUS_TYPE_WARNING: int = 2
export const PORT_STATUS_TYPE_INFO: int = 3
export const PORT_STATUS_OFFLINE: int = 1
export const PORT_STATUS_PAPER_JAM: int = 2
export const PORT_STATUS_PAPER_OUT: int = 3
export const PORT_STATUS_OUTPUT_BIN_FULL: int = 4
export const PORT_STATUS_PAPER_PROBLEM: int = 5
export const PORT_STATUS_NO_TONER: int = 6
export const PORT_STATUS_DOOR_OPEN: int = 7
export const PORT_STATUS_USER_INTERVENTION: int = 8
export const PORT_STATUS_OUT_OF_MEMORY: int = 9
export const PORT_STATUS_TONER_LOW: int = 10
export const PORT_STATUS_WARMING_UP: int = 11
export const PORT_STATUS_POWER_SAVE: int = 12
export const ERROR_BIDI_STATUS_OK: int = 0
export const ERROR_BIDI_ERROR_BASE: int = 13000
export const CHAR_BIT: int = 8
export const SCHAR_MAX: int = 127
export const MB_LEN_MAX: int = 5
export const SHRT_MAX: int = 32767
export const INT_MAX: int = 2147483647
export const EXIT_SUCCESS: int = 0
export const EXIT_FAILURE: int = 1
export const _OUT_TO_DEFAULT: int = 0
export const _OUT_TO_STDERR: int = 1
export const _OUT_TO_MSGBOX: int = 2
export const _REPORT_ERRMODE: int = 3
export const _MAX_PATH: int = 260
export const _MAX_DRIVE: int = 3
export const _MAX_DIR: int = 256
export const _MAX_FNAME: int = 256
export const _MAX_EXT: int = 256
export const _MAX_ENV: int = 32767
export const _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX: [char] = ""
export const COM_RIGHTS_EXECUTE: int = 1
export const COM_RIGHTS_EXECUTE_LOCAL: int = 2
export const COM_RIGHTS_EXECUTE_REMOTE: int = 4
export const COM_RIGHTS_ACTIVATE_LOCAL: int = 8
export const COM_RIGHTS_ACTIVATE_REMOTE: int = 16
export const COM_RIGHTS_RESERVED1: int = 32
export const COM_RIGHTS_RESERVED2: int = 64
export const CWMO_MAX_HANDLES: int = 56
export const CWCSTORAGENAME: int = 32
export const STGFMT_STORAGE: int = 0
export const STGFMT_NATIVE: int = 1
export const STGFMT_FILE: int = 3
export const STGFMT_ANY: int = 4
export const STGFMT_DOCFILE: int = 5
export const STGFMT_DOCUMENT: int = 0
export const STGOPTIONS_VERSION: int = 2
export const CCH_MAX_PROPSTG_NAME: int = 31
export const MARSHALINTERFACE_MIN: int = 500
export const MKSYS_URLMONIKER: int = 6
export const URL_MK_LEGACY: int = 0
export const URL_MK_UNIFORM: int = 1
export const URL_MK_NO_CANONICALIZE: int = 2
export const CF_NULL: int = 0
export const WININETINFO_OPTION_LOCK_HANDLE: int = 65534
export const MAX_SIZE_SECURITY_ID: int = 512
export const VTDATEGRE_MAX: int = 2958465
export const VARCMP_LT: int = 0
export const VARCMP_EQ: int = 1
export const VARCMP_GT: int = 2
export const VARCMP_NULL: int = 3
export const OFN_SHAREFALLTHROUGH: int = 2
export const OFN_SHARENOWARN: int = 1
export const OFN_SHAREWARN: int = 0
export const LBSELCHSTRINGA: [char] = "commdlg_LBSelChangedNotify"
export const SHAREVISTRINGA: [char] = "commdlg_ShareViolation"
export const FILEOKSTRINGA: [char] = "commdlg_FileNameOK"
export const COLOROKSTRINGA: [char] = "commdlg_ColorOK"
export const SETRGBSTRINGA: [char] = "commdlg_SetRGBColor"
export const HELPMSGSTRINGA: [char] = "commdlg_help"
export const FINDMSGSTRINGA: [char] = "commdlg_FindReplace"
export const CD_LBSELCHANGE: int = 0
export const CD_LBSELSUB: int = 1
export const CD_LBSELADD: int = 2
export const PD_RESULT_CANCEL: int = 0
export const PD_RESULT_PRINT: int = 1
export const PD_RESULT_APPLY: int = 2
export const _STRALIGN_USE_SECURE_CRT: int = 1
export const SERVICES_ACTIVE_DATABASEA: [char] = "ServicesActive"
export const SERVICES_FAILED_DATABASEA: [char] = "ServicesFailed"
export const SERVICE_CONFIG_DESCRIPTION: int = 1
export const SERVICE_CONFIG_FAILURE_ACTIONS: int = 2
export const SERVICE_CONFIG_DELAYED_AUTO_START_INFO: int = 3
export const SERVICE_CONFIG_FAILURE_ACTIONS_FLAG: int = 4
export const SERVICE_CONFIG_SERVICE_SID_INFO: int = 5
export const SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO: int = 6
export const SERVICE_CONFIG_PRESHUTDOWN_INFO: int = 7
export const SERVICE_CONFIG_TRIGGER_INFO: int = 8
export const SERVICE_CONFIG_PREFERRED_NODE: int = 9
export const SERVICE_CONFIG_LAUNCH_PROTECTED: int = 12
export const SERVICE_NOTIFY_STATUS_CHANGE_1: int = 1
export const SERVICE_NOTIFY_STATUS_CHANGE_2: int = 2
export const SERVICE_CONTROL_STATUS_REASON_INFO: int = 1
export const SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL: int = 1
export const SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY: int = 2
export const SERVICE_TRIGGER_TYPE_DOMAIN_JOIN: int = 3
export const SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT: int = 4
export const SERVICE_TRIGGER_TYPE_GROUP_POLICY: int = 5
export const SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT: int = 6
export const SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE: int = 7
export const SERVICE_TRIGGER_TYPE_CUSTOM: int = 20
export const SERVICE_TRIGGER_TYPE_AGGREGATE: int = 30
export const SERVICE_TRIGGER_DATA_TYPE_BINARY: int = 1
export const SERVICE_TRIGGER_DATA_TYPE_STRING: int = 2
export const SERVICE_TRIGGER_DATA_TYPE_LEVEL: int = 3
export const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY: int = 4
export const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL: int = 5
export const SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON: int = 1
export const SERVICE_LAUNCH_PROTECTED_NONE: int = 0
export const SERVICE_LAUNCH_PROTECTED_WINDOWS: int = 1
export const SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT: int = 2
export const SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT: int = 3
export const SERVICE_TRIGGER_ACTION_SERVICE_START: int = 1
export const SERVICE_TRIGGER_ACTION_SERVICE_STOP: int = 2
export const MDM_SHIFT_BEARERMODE: int = 12
export const MDM_SHIFT_PROTOCOLID: int = 16
export const MDM_SHIFT_PROTOCOLDATA: int = 20
export const MDM_PIAFS_INCOMING: int = 0
export const MDM_PIAFS_OUTGOING: int = 1
export const STYLE_DESCRIPTION_SIZE: int = 32
export const IMEMENUITEM_STRING_SIZE: int = 80
export const IME_CONFIG_GENERAL: int = 1
export const IME_CONFIG_REGISTERWORD: int = 2
export const IME_CONFIG_SELECTDICTIONARY: int = 3
export const MAX_SYM_NAME: int = 2000
export const INLINE_FRAME_CONTEXT_INIT: int = 0
export const API_VERSION_NUMBER: int = 12
export const EVENT_SRCSPEW_START: int = 100
export const EVENT_SRCSPEW: int = 100
export const EVENT_SRCSPEW_END: int = 199
export const SYM_INLINE_COMP_ERROR: int = 0
export const SYM_INLINE_COMP_IDENTICAL: int = 1
export const SYM_INLINE_COMP_STEPIN: int = 2
export const SYM_INLINE_COMP_STEPOUT: int = 3
export const SYM_INLINE_COMP_STEPOVER: int = 4
export const SYM_INLINE_COMP_DIFFERENT: int = 5
export const EXT_OUTPUT_VER: int = 1
export const SYMSRV_VERSION: int = 2
export const NUM_SSRVOPTS: int = 32
export const SSRVACTION_TRACE: int = 1
export const SSRVACTION_QUERYCANCEL: int = 2
export const SSRVACTION_EVENT: int = 3
export const SSRVACTION_EVENTW: int = 4
export const SSRVACTION_SIZE: int = 5
export const SSRVACTION_HTTPSTATUS: int = 6
export const SSRVACTION_XMLOUTPUT: int = 7
export const SSRVACTION_CHECKSUMSTATUS: int = 8
export const IMAGEHLP_SYMBOL_INFO_VALUEPRESENT: int = 1
export import def #extern __va_start(_0: **char, ...)
export import def #extern __security_init_cookie()
export import def #extern __security_check_cookie(_StackCookie: uint64)
export import def #extern __report_gsfailure(_StackCookie: uint64)
export import var #extern __security_cookie: uint64
export const ExceptionContinueExecution: int = 0
export const ExceptionContinueSearch: int = 1
export const ExceptionNestedException: int = 2
export const ExceptionCollidedUnwind: int = 3
export import def #extern __C_specific_handler(ExceptionRecord: *s__EXCEPTION_RECORD, EstablisherFrame: *, ContextRecord: *s__CONTEXT, DispatcherContext: *s__DISPATCHER_CONTEXT) -> e__EXCEPTION_DISPOSITION
export import def #extern _exception_code() -> ulong
export import def #extern _exception_info() -> *
export import def #extern _abnormal_termination() -> int
export import def #extern _invalid_parameter_noinfo()
export import def #extern _invalid_parameter_noinfo_noreturn()
export import def #extern _invoke_watson(_Expression: *ushort, _FunctionName: *ushort, _FileName: *ushort, _LineNo: uint, _Reserved: uint64)
export import def #extern __pctype_func() -> *ushort
export import def #extern __pwctype_func() -> *ushort
export import def #extern iswalnum(_C: ushort) -> int
export import def #extern iswalpha(_C: ushort) -> int
export import def #extern iswascii(_C: ushort) -> int
export import def #extern iswblank(_C: ushort) -> int
export import def #extern iswcntrl(_C: ushort) -> int
export import def #extern iswdigit(_C: ushort) -> int
export import def #extern iswgraph(_C: ushort) -> int
export import def #extern iswlower(_C: ushort) -> int
export import def #extern iswprint(_C: ushort) -> int
export import def #extern iswpunct(_C: ushort) -> int
export import def #extern iswspace(_C: ushort) -> int
export import def #extern iswupper(_C: ushort) -> int
export import def #extern iswxdigit(_C: ushort) -> int
export import def #extern __iswcsymf(_C: ushort) -> int
export import def #extern __iswcsym(_C: ushort) -> int
export import def #extern _iswalnum_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswalpha_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswblank_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswcntrl_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswdigit_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswgraph_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswlower_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswprint_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswpunct_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswspace_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswupper_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswxdigit_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswcsymf_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _iswcsym_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern towupper(_C: ushort) -> ushort
export import def #extern towlower(_C: ushort) -> ushort
export import def #extern iswctype(_C: ushort, _Type: ushort) -> int
export import def #extern _towupper_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> ushort
export import def #extern _towlower_l(_C: ushort, _Locale: *s___crt_locale_pointers) -> ushort
export import def #extern _iswctype_l(_C: ushort, _Type: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isleadbyte(_C: int) -> int
export import def #extern _isleadbyte_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern is_wctype(_C: ushort, _Type: ushort) -> int
export import def #extern _isctype(_C: int, _Type: int) -> int
export import def #extern _isctype_l(_C: int, _Type: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isalpha(_C: int) -> int
export import def #extern _isalpha_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isupper(_C: int) -> int
export import def #extern _isupper_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern islower(_C: int) -> int
export import def #extern _islower_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isdigit(_C: int) -> int
export import def #extern _isdigit_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isxdigit(_C: int) -> int
export import def #extern _isxdigit_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isspace(_C: int) -> int
export import def #extern _isspace_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern ispunct(_C: int) -> int
export import def #extern _ispunct_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isblank(_C: int) -> int
export import def #extern _isblank_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isalnum(_C: int) -> int
export import def #extern _isalnum_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isprint(_C: int) -> int
export import def #extern _isprint_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern isgraph(_C: int) -> int
export import def #extern _isgraph_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern iscntrl(_C: int) -> int
export import def #extern _iscntrl_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern toupper(_C: int) -> int
export import def #extern tolower(_C: int) -> int
export import def #extern _tolower(_C: int) -> int
export import def #extern _tolower_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _toupper(_C: int) -> int
export import def #extern _toupper_l(_C: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern __isascii(_C: int) -> int
export import def #extern __toascii(_C: int) -> int
export import def #extern __iscsymf(_C: int) -> int
export import def #extern __iscsym(_C: int) -> int
export import def #extern __acrt_locale_get_ctype_array_value(_Locale_pctype_array: *ushort, _Char_value: int, _Mask: int) -> int
export import def #extern ___mb_cur_max_func() -> int
export import def #extern ___mb_cur_max_l_func(_Locale: *s___crt_locale_pointers) -> int
export import def #extern __ascii_tolower(_C: int) -> int
export import def #extern __ascii_toupper(_C: int) -> int
export import def #extern __ascii_iswalpha(_C: int) -> int
export import def #extern __ascii_iswdigit(_C: int) -> int
export import def #extern __ascii_towlower(_C: int) -> int
export import def #extern __ascii_towupper(_C: int) -> int
export import def #extern __acrt_get_locale_data_prefix(_LocalePointers: *) -> *s___crt_locale_data_public
export import def #extern _chvalidchk_l(_C: int, _Mask: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _ischartype_l(_C: int, _Mask: int, _Locale: *s___crt_locale_pointers) -> int
export import def #extern HandleToULong(h: *) -> ulong
export import def #extern HandleToLong(h: *) -> long
export import def #extern ULongToHandle(h: ulong) -> *
export import def #extern LongToHandle(h: long) -> *
export import def #extern PtrToUlong(p: *) -> ulong
export import def #extern PtrToUint(p: *) -> uint
export import def #extern PtrToUshort(p: *) -> ushort
export import def #extern PtrToLong(p: *) -> long
export import def #extern PtrToInt(p: *) -> int
export import def #extern PtrToShort(p: *) -> short
export import def #extern IntToPtr(i: int) -> *
export import def #extern UIntToPtr(ui: uint) -> *
export import def #extern LongToPtr(l: long) -> *
export import def #extern ULongToPtr(ul: ulong) -> *
export import def #extern Ptr32ToPtr(p: *) -> *
export import def #extern Handle32ToHandle(h: *) -> *
export import def #extern PtrToPtr32(p: *) -> *
export const UNSPECIFIED_COMPARTMENT_ID: int = 0
export const DEFAULT_COMPARTMENT_ID: int = 1
export import def #extern _rotl8(Value: uint8, Shift: uint8) -> uint8
export import def #extern _rotl16(Value: ushort, Shift: uint8) -> ushort
export import def #extern _rotr8(Value: uint8, Shift: uint8) -> uint8
export import def #extern _rotr16(Value: ushort, Shift: uint8) -> ushort
export import def #extern _rotl(_Value: uint, _Shift: int) -> uint
export import def #extern _rotl64(_Value: uint64, _Shift: int) -> uint64
export import def #extern _rotr(_Value: uint, _Shift: int) -> uint
export import def #extern _rotr64(_Value: uint64, _Shift: int) -> uint64
export import def #extern _errno() -> *int
export import def #extern _set_errno(_Value: int) -> int
export import def #extern _get_errno(_Value: *int) -> int
export import def #extern __doserrno() -> *ulong
export import def #extern _set_doserrno(_Value: ulong) -> int
export import def #extern _get_doserrno(_Value: *ulong) -> int
export import def #extern memchr(_Buf: *, _Val: int, _MaxCount: uint64) -> *
export import def #extern memcmp(_Buf1: *, _Buf2: *, _Size: uint64) -> int
export import def #extern memcpy(_Dst: *, _Src: *, _Size: uint64) -> *
export import def #extern memmove(_Dst: *, _Src: *, _Size: uint64) -> *
export import def #extern memset(_Dst: *, _Val: int, _Size: uint64) -> *
export import def #extern strchr(_Str: *char, _Val: int) -> *char
export import def #extern strrchr(_Str: *char, _Ch: int) -> *char
export import def #extern strstr(_Str: *char, _SubStr: *char) -> *char
export import def #extern wcschr(_Str: *ushort, _Ch: ushort) -> *ushort
export import def #extern wcsrchr(_Str: *ushort, _Ch: ushort) -> *ushort
export import def #extern wcsstr(_Str: *ushort, _SubStr: *ushort) -> *ushort
export import def #extern memcpy_s(_Destination: *, _DestinationSize: uint64, _Source: *, _SourceSize: uint64) -> int
export import def #extern memmove_s(_Destination: *, _DestinationSize: uint64, _Source: *, _SourceSize: uint64) -> int
export import def #extern _memicmp(_Buf1: *, _Buf2: *, _Size: uint64) -> int
export import def #extern _memicmp_l(_Buf1: *, _Buf2: *, _Size: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern memccpy(_Dst: *, _Src: *, _Val: int, _Size: uint64) -> *
export import def #extern memicmp(_Buf1: *, _Buf2: *, _Size: uint64) -> int
export import def #extern wcscat_s(_Destination: *ushort, _SizeInWords: uint64, _Source: *ushort) -> int
export import def #extern wcscpy_s(_Destination: *ushort, _SizeInWords: uint64, _Source: *ushort) -> int
export import def #extern wcsncat_s(_Destination: *ushort, _SizeInWords: uint64, _Source: *ushort, _MaxCount: uint64) -> int
export import def #extern wcsncpy_s(_Destination: *ushort, _SizeInWords: uint64, _Source: *ushort, _MaxCount: uint64) -> int
export import def #extern wcstok_s(_String: *ushort, _Delimiter: *ushort, _Context: **ushort) -> *ushort
export import def #extern _wcsdup(_String: *ushort) -> *ushort
export import def #extern wcscat(_Destination: *ushort, _Source: *ushort) -> *ushort
export import def #extern wcscmp(_String1: *ushort, _String2: *ushort) -> int
export import def #extern wcscpy(_Destination: *ushort, _Source: *ushort) -> *ushort
export import def #extern wcscspn(_String: *ushort, _Control: *ushort) -> uint64
export import def #extern wcslen(_String: *ushort) -> uint64
export import def #extern wcsnlen(_Source: *ushort, _MaxCount: uint64) -> uint64
export import def #extern wcsnlen_s(_Source: *ushort, _MaxCount: uint64) -> uint64
export import def #extern wcsncat(_Destination: *ushort, _Source: *ushort, _Count: uint64) -> *ushort
export import def #extern wcsncmp(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern wcsncpy(_Destination: *ushort, _Source: *ushort, _Count: uint64) -> *ushort
export import def #extern wcspbrk(_String: *ushort, _Control: *ushort) -> *ushort
export import def #extern wcsspn(_String: *ushort, _Control: *ushort) -> uint64
export import def #extern wcstok(_String: *ushort, _Delimiter: *ushort, _Context: **ushort) -> *ushort
export import def #extern _wcstok(_String: *ushort, _Delimiter: *ushort) -> *ushort
export import def #extern _wcserror(_ErrorNumber: int) -> *ushort
export import def #extern _wcserror_s(_Buffer: *ushort, _SizeInWords: uint64, _ErrorNumber: int) -> int
export import def #extern __wcserror(_String: *ushort) -> *ushort
export import def #extern __wcserror_s(_Buffer: *ushort, _SizeInWords: uint64, _ErrorMessage: *ushort) -> int
export import def #extern _wcsicmp(_String1: *ushort, _String2: *ushort) -> int
export import def #extern _wcsicmp_l(_String1: *ushort, _String2: *ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsnicmp(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern _wcsnicmp_l(_String1: *ushort, _String2: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsnset_s(_Destination: *ushort, _SizeInWords: uint64, _Value: ushort, _MaxCount: uint64) -> int
export import def #extern _wcsnset(_String: *ushort, _Value: ushort, _MaxCount: uint64) -> *ushort
export import def #extern _wcsrev(_String: *ushort) -> *ushort
export import def #extern _wcsset_s(_Destination: *ushort, _SizeInWords: uint64, _Value: ushort) -> int
export import def #extern _wcsset(_String: *ushort, _Value: ushort) -> *ushort
export import def #extern _wcslwr_s(_String: *ushort, _SizeInWords: uint64) -> int
export import def #extern _wcslwr(_String: *ushort) -> *ushort
export import def #extern _wcslwr_s_l(_String: *ushort, _SizeInWords: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcslwr_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> *ushort
export import def #extern _wcsupr_s(_String: *ushort, _Size: uint64) -> int
export import def #extern _wcsupr(_String: *ushort) -> *ushort
export import def #extern _wcsupr_s_l(_String: *ushort, _Size: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsupr_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> *ushort
export import def #extern wcsxfrm(_Destination: *ushort, _Source: *ushort, _MaxCount: uint64) -> uint64
export import def #extern _wcsxfrm_l(_Destination: *ushort, _Source: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern wcscoll(_String1: *ushort, _String2: *ushort) -> int
export import def #extern _wcscoll_l(_String1: *ushort, _String2: *ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsicoll(_String1: *ushort, _String2: *ushort) -> int
export import def #extern _wcsicoll_l(_String1: *ushort, _String2: *ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsncoll(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern _wcsncoll_l(_String1: *ushort, _String2: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcsnicoll(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern _wcsnicoll_l(_String1: *ushort, _String2: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern wcsdup(_String: *ushort) -> *ushort
export import def #extern wcsicmp(_String1: *ushort, _String2: *ushort) -> int
export import def #extern wcsnicmp(_String1: *ushort, _String2: *ushort, _MaxCount: uint64) -> int
export import def #extern wcsnset(_String: *ushort, _Value: ushort, _MaxCount: uint64) -> *ushort
export import def #extern wcsrev(_String: *ushort) -> *ushort
export import def #extern wcsset(_String: *ushort, _Value: ushort) -> *ushort
export import def #extern wcslwr(_String: *ushort) -> *ushort
export import def #extern wcsupr(_String: *ushort) -> *ushort
export import def #extern wcsicoll(_String1: *ushort, _String2: *ushort) -> int
export import def #extern strcpy_s(_Destination: *char, _SizeInBytes: uint64, _Source: *char) -> int
export import def #extern strcat_s(_Destination: *char, _SizeInBytes: uint64, _Source: *char) -> int
export import def #extern strerror_s(_Buffer: *char, _SizeInBytes: uint64, _ErrorNumber: int) -> int
export import def #extern strncat_s(_Destination: *char, _SizeInBytes: uint64, _Source: *char, _MaxCount: uint64) -> int
export import def #extern strncpy_s(_Destination: *char, _SizeInBytes: uint64, _Source: *char, _MaxCount: uint64) -> int
export import def #extern strtok_s(_String: *char, _Delimiter: *char, _Context: **char) -> *char
export import def #extern _memccpy(_Dst: *, _Src: *, _Val: int, _MaxCount: uint64) -> *
export import def #extern strcat(_Destination: *char, _Source: *char) -> *char
export import def #extern strcmp(_Str1: *char, _Str2: *char) -> int
export import def #extern _strcmpi(_String1: *char, _String2: *char) -> int
export import def #extern strcoll(_String1: *char, _String2: *char) -> int
export import def #extern _strcoll_l(_String1: *char, _String2: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern strcpy(_Destination: *char, _Source: *char) -> *char
export import def #extern strcspn(_Str: *char, _Control: *char) -> uint64
export import def #extern _strdup(_Source: *char) -> *char
export import def #extern _strerror(_ErrorMessage: *char) -> *char
export import def #extern _strerror_s(_Buffer: *char, _SizeInBytes: uint64, _ErrorMessage: *char) -> int
export import def #extern strerror(_ErrorMessage: int) -> *char
export import def #extern _stricmp(_String1: *char, _String2: *char) -> int
export import def #extern _stricoll(_String1: *char, _String2: *char) -> int
export import def #extern _stricoll_l(_String1: *char, _String2: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _stricmp_l(_String1: *char, _String2: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern strlen(_Str: *char) -> uint64
export import def #extern _strlwr_s(_String: *char, _Size: uint64) -> int
export import def #extern _strlwr(_String: *char) -> *char
export import def #extern _strlwr_s_l(_String: *char, _Size: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _strlwr_l(_String: *char, _Locale: *s___crt_locale_pointers) -> *char
export import def #extern strncat(_Destination: *char, _Source: *char, _Count: uint64) -> *char
export import def #extern strncmp(_Str1: *char, _Str2: *char, _MaxCount: uint64) -> int
export import def #extern _strnicmp(_String1: *char, _String2: *char, _MaxCount: uint64) -> int
export import def #extern _strnicmp_l(_String1: *char, _String2: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _strnicoll(_String1: *char, _String2: *char, _MaxCount: uint64) -> int
export import def #extern _strnicoll_l(_String1: *char, _String2: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _strncoll(_String1: *char, _String2: *char, _MaxCount: uint64) -> int
export import def #extern _strncoll_l(_String1: *char, _String2: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern __strncnt(_String: *char, _Count: uint64) -> uint64
export import def #extern strncpy(_Destination: *char, _Source: *char, _Count: uint64) -> *char
export import def #extern strnlen(_String: *char, _MaxCount: uint64) -> uint64
export import def #extern strnlen_s(_String: *char, _MaxCount: uint64) -> uint64
export import def #extern _strnset_s(_String: *char, _SizeInBytes: uint64, _Value: int, _MaxCount: uint64) -> int
export import def #extern _strnset(_Destination: *char, _Value: int, _Count: uint64) -> *char
export import def #extern strpbrk(_Str: *char, _Control: *char) -> *char
export import def #extern _strrev(_Str: *char) -> *char
export import def #extern _strset_s(_Destination: *char, _DestinationSize: uint64, _Value: int) -> int
export import def #extern _strset(_Destination: *char, _Value: int) -> *char
export import def #extern strspn(_Str: *char, _Control: *char) -> uint64
export import def #extern strtok(_String: *char, _Delimiter: *char) -> *char
export import def #extern _strupr_s(_String: *char, _Size: uint64) -> int
export import def #extern _strupr(_String: *char) -> *char
export import def #extern _strupr_s_l(_String: *char, _Size: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _strupr_l(_String: *char, _Locale: *s___crt_locale_pointers) -> *char
export import def #extern strxfrm(_Destination: *char, _Source: *char, _MaxCount: uint64) -> uint64
export import def #extern _strxfrm_l(_Destination: *char, _Source: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern strdup(_String: *char) -> *char
export import def #extern strcmpi(_String1: *char, _String2: *char) -> int
export import def #extern stricmp(_String1: *char, _String2: *char) -> int
export import def #extern strlwr(_String: *char) -> *char
export import def #extern strnicmp(_String1: *char, _String2: *char, _MaxCount: uint64) -> int
export import def #extern strnset(_String: *char, _Value: int, _MaxCount: uint64) -> *char
export import def #extern strrev(_String: *char) -> *char
export import def #extern strset(_String: *char, _Value: int) -> *char
export import def #extern strupr(_String: *char) -> *char
export import def #extern _bittest(Base: *long, Offset: long) -> uint8
export import def #extern _bittestandcomplement(Base: *long, Offset: long) -> uint8
export import def #extern _bittestandset(Base: *long, Offset: long) -> uint8
export import def #extern _bittestandreset(Base: *long, Offset: long) -> uint8
export import def #extern _interlockedbittestandset(Base: *long, Offset: long) -> uint8
export import def #extern _interlockedbittestandreset(Base: *long, Offset: long) -> uint8
export import def #extern _bittest64(Base: *int64, Offset: int64) -> uint8
export import def #extern _bittestandcomplement64(Base: *int64, Offset: int64) -> uint8
export import def #extern _bittestandset64(Base: *int64, Offset: int64) -> uint8
export import def #extern _bittestandreset64(Base: *int64, Offset: int64) -> uint8
export import def #extern _interlockedbittestandset64(Base: *int64, Offset: int64) -> uint8
export import def #extern _interlockedbittestandreset64(Base: *int64, Offset: int64) -> uint8
export import def #extern _BitScanForward(Index: *ulong, Mask: ulong) -> uint8
export import def #extern _BitScanReverse(Index: *ulong, Mask: ulong) -> uint8
export import def #extern _BitScanForward64(Index: *ulong, Mask: uint64) -> uint8
export import def #extern _BitScanReverse64(Index: *ulong, Mask: uint64) -> uint8
export import def #extern _InterlockedIncrement16(Addend: *short) -> short
export import def #extern _InterlockedDecrement16(Addend: *short) -> short
export import def #extern _InterlockedCompareExchange16(Destination: *short, ExChange: short, Comperand: short) -> short
export import def #extern _InterlockedAnd(Destination: *long, Value: long) -> long
export import def #extern _InterlockedOr(Destination: *long, Value: long) -> long
export import def #extern _InterlockedXor(Destination: *long, Value: long) -> long
export import def #extern _InterlockedAnd64(Destination: *int64, Value: int64) -> int64
export import def #extern _InterlockedOr64(Destination: *int64, Value: int64) -> int64
export import def #extern _InterlockedXor64(Destination: *int64, Value: int64) -> int64
export import def #extern _InterlockedIncrement(Addend: *long) -> long
export import def #extern _InterlockedDecrement(Addend: *long) -> long
export import def #extern _InterlockedExchange(Target: *long, Value: long) -> long
export import def #extern _InterlockedExchangeAdd(Addend: *long, Value: long) -> long
export import def #extern _InlineInterlockedAdd(Addend: *long, Value: long) -> long
export import def #extern _InterlockedCompareExchange(Destination: *long, ExChange: long, Comperand: long) -> long
export import def #extern _InterlockedIncrement64(Addend: *int64) -> int64
export import def #extern _InterlockedDecrement64(Addend: *int64) -> int64
export import def #extern _InterlockedExchange64(Target: *int64, Value: int64) -> int64
export import def #extern _InterlockedExchangeAdd64(Addend: *int64, Value: int64) -> int64
export import def #extern _InlineInterlockedAdd64(Addend: *int64, Value: int64) -> int64
export import def #extern _InterlockedCompareExchange64(Destination: *int64, ExChange: int64, Comperand: int64) -> int64
export import def #extern _InterlockedCompareExchange128(Destination: *int64, ExchangeHigh: int64, ExchangeLow: int64, ComparandResult: *int64) -> uint8
export import def #extern _InterlockedCompareExchangePointer(Destination: **, Exchange: *, Comperand: *) -> *
export import def #extern _InterlockedExchangePointer(Target: **, Value: *) -> *
export import def #extern _InterlockedExchange8(Target: *char, Value: char) -> char
export import def #extern _InterlockedExchange16(Destination: *short, ExChange: short) -> short
export import def #extern _InterlockedExchangeAdd8(_Addend: *char, _Value: char) -> char
export import def #extern _InterlockedAnd8(Destination: *char, Value: char) -> char
export import def #extern _InterlockedOr8(Destination: *char, Value: char) -> char
export import def #extern _InterlockedXor8(Destination: *char, Value: char) -> char
export import def #extern _InterlockedAnd16(Destination: *short, Value: short) -> short
export import def #extern _InterlockedOr16(Destination: *short, Value: short) -> short
export import def #extern _InterlockedXor16(Destination: *short, Value: short) -> short
export import def #extern __cpuidex(CPUInfo: *int, Function: int, SubLeaf: int)
export import def #extern _mm_clflush(Address: *)
export import def #extern _ReadWriteBarrier()
export import def #extern __faststorefence()
export import def #extern _mm_lfence()
export import def #extern _mm_mfence()
export import def #extern _mm_sfence()
export import def #extern _mm_pause()
export import def #extern _mm_prefetch(a: *char, sel: int)
export import def #extern _m_prefetchw(Source: *)
export import def #extern _mm_getcsr() -> uint
export import def #extern _mm_setcsr(MxCsr: uint)
export import def #extern __getcallerseflags() -> uint
export import def #extern __segmentlimit(Selector: ulong) -> ulong
export import def #extern __readpmc(Counter: ulong) -> uint64
export import def #extern __rdtsc() -> uint64
export import def #extern __movsb(Destination: *uint8, Source: *uint8, Count: uint64)
export import def #extern __movsw(Destination: *ushort, Source: *ushort, Count: uint64)
export import def #extern __movsd(Destination: *ulong, Source: *ulong, Count: uint64)
export import def #extern __movsq(Destination: *uint64, Source: *uint64, Count: uint64)
export import def #extern __stosb(Destination: *uint8, Value: uint8, Count: uint64)
export import def #extern __stosw(Destination: *ushort, Value: ushort, Count: uint64)
export import def #extern __stosd(Destination: *ulong, Value: ulong, Count: uint64)
export import def #extern __stosq(Destination: *uint64, Value: uint64, Count: uint64)
export import def #extern __mulh(Multiplier: int64, Multiplicand: int64) -> int64
export import def #extern __umulh(Multiplier: uint64, Multiplicand: uint64) -> uint64
export import def #extern __popcnt64(operand: uint64) -> uint64
export import def #extern __shiftleft128(LowPart: uint64, HighPart: uint64, Shift: uint8) -> uint64
export import def #extern __shiftright128(LowPart: uint64, HighPart: uint64, Shift: uint8) -> uint64
export import def #extern _mul128(Multiplier: int64, Multiplicand: int64, HighProduct: *int64) -> int64
export import def #extern UnsignedMultiply128(Multiplier: uint64, Multiplicand: uint64, HighProduct: *uint64) -> uint64
export import def #extern _umul128(Multiplier: uint64, Multiplicand: uint64, HighProduct: *uint64) -> uint64
export import def #extern MultiplyExtract128(Multiplier: int64, Multiplicand: int64, Shift: uint8) -> int64
export import def #extern UnsignedMultiplyExtract128(Multiplier: uint64, Multiplicand: uint64, Shift: uint8) -> uint64
export import def #extern __readgsbyte(Offset: ulong) -> uint8
export import def #extern __readgsword(Offset: ulong) -> ushort
export import def #extern __readgsdword(Offset: ulong) -> ulong
export import def #extern __readgsqword(Offset: ulong) -> uint64
export import def #extern __writegsbyte(Offset: ulong, Data: uint8)
export import def #extern __writegsword(Offset: ulong, Data: ushort)
export import def #extern __writegsdword(Offset: ulong, Data: ulong)
export import def #extern __writegsqword(Offset: ulong, Data: uint64)
export import def #extern __incgsbyte(Offset: ulong)
export import def #extern __addgsbyte(Offset: ulong, Value: uint8)
export import def #extern __incgsword(Offset: ulong)
export import def #extern __addgsword(Offset: ulong, Value: ushort)
export import def #extern __incgsdword(Offset: ulong)
export import def #extern __addgsdword(Offset: ulong, Value: ulong)
export import def #extern __incgsqword(Offset: ulong)
export import def #extern __addgsqword(Offset: ulong, Value: uint64)
export import def #extern __int2c()
export import def #extern ReadAcquire8(Source: *char) -> char
export import def #extern ReadNoFence8(Source: *char) -> char
export import def #extern WriteRelease8(Destination: *char, Value: char)
export import def #extern WriteNoFence8(Destination: *char, Value: char)
export import def #extern ReadAcquire16(Source: *short) -> short
export import def #extern ReadNoFence16(Source: *short) -> short
export import def #extern WriteRelease16(Destination: *short, Value: short)
export import def #extern WriteNoFence16(Destination: *short, Value: short)
export import def #extern ReadAcquire(Source: *long) -> long
export import def #extern ReadNoFence(Source: *long) -> long
export import def #extern WriteRelease(Destination: *long, Value: long)
export import def #extern WriteNoFence(Destination: *long, Value: long)
export import def #extern ReadAcquire64(Source: *int64) -> int64
export import def #extern ReadNoFence64(Source: *int64) -> int64
export import def #extern WriteRelease64(Destination: *int64, Value: int64)
export import def #extern WriteNoFence64(Destination: *int64, Value: int64)
export import def #extern BarrierAfterRead()
export import def #extern ReadRaw8(Source: *char) -> char
export import def #extern WriteRaw8(Destination: *char, Value: char)
export import def #extern ReadRaw16(Source: *short) -> short
export import def #extern WriteRaw16(Destination: *short, Value: short)
export import def #extern ReadRaw(Source: *long) -> long
export import def #extern WriteRaw(Destination: *long, Value: long)
export import def #extern ReadRaw64(Source: *int64) -> int64
export import def #extern WriteRaw64(Destination: *int64, Value: int64)
export import def #extern ReadUCharAcquire(Source: *uint8) -> uint8
export import def #extern ReadUCharNoFence(Source: *uint8) -> uint8
export import def #extern ReadBooleanAcquire(Source: *uint8) -> uint8
export import def #extern ReadBooleanNoFence(Source: *uint8) -> uint8
export import def #extern ReadBooleanRaw(Source: *uint8) -> uint8
export import def #extern ReadUCharRaw(Source: *uint8) -> uint8
export import def #extern WriteUCharRelease(Destination: *uint8, Value: uint8)
export import def #extern WriteUCharNoFence(Destination: *uint8, Value: uint8)
export import def #extern WriteBooleanRelease(Destination: *uint8, Value: uint8)
export import def #extern WriteBooleanNoFence(Destination: *uint8, Value: uint8)
export import def #extern WriteUCharRaw(Destination: *uint8, Value: uint8)
export import def #extern ReadUShortAcquire(Source: *ushort) -> ushort
export import def #extern ReadUShortNoFence(Source: *ushort) -> ushort
export import def #extern ReadUShortRaw(Source: *ushort) -> ushort
export import def #extern WriteUShortRelease(Destination: *ushort, Value: ushort)
export import def #extern WriteUShortNoFence(Destination: *ushort, Value: ushort)
export import def #extern WriteUShortRaw(Destination: *ushort, Value: ushort)
export import def #extern ReadULongAcquire(Source: *ulong) -> ulong
export import def #extern ReadULongNoFence(Source: *ulong) -> ulong
export import def #extern ReadULongRaw(Source: *ulong) -> ulong
export import def #extern WriteULongRelease(Destination: *ulong, Value: ulong)
export import def #extern WriteULongNoFence(Destination: *ulong, Value: ulong)
export import def #extern WriteULongRaw(Destination: *ulong, Value: ulong)
export import def #extern ReadInt32Acquire(Source: *int) -> int
export import def #extern ReadInt32NoFence(Source: *int) -> int
export import def #extern ReadInt32Raw(Source: *int) -> int
export import def #extern WriteInt32Release(Destination: *int, Value: int)
export import def #extern WriteInt32NoFence(Destination: *int, Value: int)
export import def #extern WriteInt32Raw(Destination: *int, Value: int)
export import def #extern ReadUInt32Acquire(Source: *uint) -> uint
export import def #extern ReadUInt32NoFence(Source: *uint) -> uint
export import def #extern ReadUInt32Raw(Source: *uint) -> uint
export import def #extern WriteUInt32Release(Destination: *uint, Value: uint)
export import def #extern WriteUInt32NoFence(Destination: *uint, Value: uint)
export import def #extern WriteUInt32Raw(Destination: *uint, Value: uint)
export import def #extern ReadULong64Acquire(Source: *uint64) -> uint64
export import def #extern ReadULong64NoFence(Source: *uint64) -> uint64
export import def #extern ReadULong64Raw(Source: *uint64) -> uint64
export import def #extern WriteULong64Release(Destination: *uint64, Value: uint64)
export import def #extern WriteULong64NoFence(Destination: *uint64, Value: uint64)
export import def #extern WriteULong64Raw(Destination: *uint64, Value: uint64)
export import def #extern ReadPointerAcquire(Source: **) -> *
export import def #extern ReadPointerNoFence(Source: **) -> *
export import def #extern ReadPointerRaw(Source: **) -> *
export import def #extern WritePointerRelease(Destination: **, Value: *)
export import def #extern WritePointerNoFence(Destination: **, Value: *)
export import def #extern WritePointerRaw(Destination: **, Value: *)
export const SidTypeUser: int = 1
export const SidTypeGroup: int = 2
export const SidTypeDomain: int = 3
export const SidTypeAlias: int = 4
export const SidTypeWellKnownGroup: int = 5
export const SidTypeDeletedAccount: int = 6
export const SidTypeInvalid: int = 7
export const SidTypeUnknown: int = 8
export const SidTypeComputer: int = 9
export const SidTypeLabel: int = 10
export const SidTypeLogonSession: int = 11
export const WinNullSid: int = 0
export const WinWorldSid: int = 1
export const WinLocalSid: int = 2
export const WinCreatorOwnerSid: int = 3
export const WinCreatorGroupSid: int = 4
export const WinCreatorOwnerServerSid: int = 5
export const WinCreatorGroupServerSid: int = 6
export const WinNtAuthoritySid: int = 7
export const WinDialupSid: int = 8
export const WinNetworkSid: int = 9
export const WinBatchSid: int = 10
export const WinInteractiveSid: int = 11
export const WinServiceSid: int = 12
export const WinAnonymousSid: int = 13
export const WinProxySid: int = 14
export const WinEnterpriseControllersSid: int = 15
export const WinSelfSid: int = 16
export const WinAuthenticatedUserSid: int = 17
export const WinRestrictedCodeSid: int = 18
export const WinTerminalServerSid: int = 19
export const WinRemoteLogonIdSid: int = 20
export const WinLogonIdsSid: int = 21
export const WinLocalSystemSid: int = 22
export const WinLocalServiceSid: int = 23
export const WinNetworkServiceSid: int = 24
export const WinBuiltinDomainSid: int = 25
export const WinBuiltinAdministratorsSid: int = 26
export const WinBuiltinUsersSid: int = 27
export const WinBuiltinGuestsSid: int = 28
export const WinBuiltinPowerUsersSid: int = 29
export const WinBuiltinAccountOperatorsSid: int = 30
export const WinBuiltinSystemOperatorsSid: int = 31
export const WinBuiltinPrintOperatorsSid: int = 32
export const WinBuiltinBackupOperatorsSid: int = 33
export const WinBuiltinReplicatorSid: int = 34
export const WinBuiltinPreWindows2000CompatibleAccessSid: int = 35
export const WinBuiltinRemoteDesktopUsersSid: int = 36
export const WinBuiltinNetworkConfigurationOperatorsSid: int = 37
export const WinAccountAdministratorSid: int = 38
export const WinAccountGuestSid: int = 39
export const WinAccountKrbtgtSid: int = 40
export const WinAccountDomainAdminsSid: int = 41
export const WinAccountDomainUsersSid: int = 42
export const WinAccountDomainGuestsSid: int = 43
export const WinAccountComputersSid: int = 44
export const WinAccountControllersSid: int = 45
export const WinAccountCertAdminsSid: int = 46
export const WinAccountSchemaAdminsSid: int = 47
export const WinAccountEnterpriseAdminsSid: int = 48
export const WinAccountPolicyAdminsSid: int = 49
export const WinAccountRasAndIasServersSid: int = 50
export const WinNTLMAuthenticationSid: int = 51
export const WinDigestAuthenticationSid: int = 52
export const WinSChannelAuthenticationSid: int = 53
export const WinThisOrganizationSid: int = 54
export const WinOtherOrganizationSid: int = 55
export const WinBuiltinIncomingForestTrustBuildersSid: int = 56
export const WinBuiltinPerfMonitoringUsersSid: int = 57
export const WinBuiltinPerfLoggingUsersSid: int = 58
export const WinBuiltinAuthorizationAccessSid: int = 59
export const WinBuiltinTerminalServerLicenseServersSid: int = 60
export const WinBuiltinDCOMUsersSid: int = 61
export const WinBuiltinIUsersSid: int = 62
export const WinIUserSid: int = 63
export const WinBuiltinCryptoOperatorsSid: int = 64
export const WinUntrustedLabelSid: int = 65
export const WinLowLabelSid: int = 66
export const WinMediumLabelSid: int = 67
export const WinHighLabelSid: int = 68
export const WinSystemLabelSid: int = 69
export const WinWriteRestrictedCodeSid: int = 70
export const WinCreatorOwnerRightsSid: int = 71
export const WinCacheablePrincipalsGroupSid: int = 72
export const WinNonCacheablePrincipalsGroupSid: int = 73
export const WinEnterpriseReadonlyControllersSid: int = 74
export const WinAccountReadonlyControllersSid: int = 75
export const WinBuiltinEventLogReadersGroup: int = 76
export const WinNewEnterpriseReadonlyControllersSid: int = 77
export const WinBuiltinCertSvcDComAccessGroup: int = 78
export const WinMediumPlusLabelSid: int = 79
export const WinLocalLogonSid: int = 80
export const WinConsoleLogonSid: int = 81
export const WinThisOrganizationCertificateSid: int = 82
export const WinApplicationPackageAuthoritySid: int = 83
export const WinBuiltinAnyPackageSid: int = 84
export const WinCapabilityInternetClientSid: int = 85
export const WinCapabilityInternetClientServerSid: int = 86
export const WinCapabilityPrivateNetworkClientServerSid: int = 87
export const WinCapabilityPicturesLibrarySid: int = 88
export const WinCapabilityVideosLibrarySid: int = 89
export const WinCapabilityMusicLibrarySid: int = 90
export const WinCapabilityDocumentsLibrarySid: int = 91
export const WinCapabilitySharedUserCertificatesSid: int = 92
export const WinCapabilityEnterpriseAuthenticationSid: int = 93
export const WinCapabilityRemovableStorageSid: int = 94
export const WinBuiltinRDSRemoteAccessServersSid: int = 95
export const WinBuiltinRDSEndpointServersSid: int = 96
export const WinBuiltinRDSManagementServersSid: int = 97
export const WinUserModeDriversSid: int = 98
export const WinBuiltinHyperVAdminsSid: int = 99
export const WinAccountCloneableControllersSid: int = 100
export const WinBuiltinAccessControlAssistanceOperatorsSid: int = 101
export const WinBuiltinRemoteManagementUsersSid: int = 102
export const WinAuthenticationAuthorityAssertedSid: int = 103
export const WinAuthenticationServiceAssertedSid: int = 104
export const WinLocalAccountSid: int = 105
export const WinLocalAccountAndAdministratorSid: int = 106
export const WinAccountProtectedUsersSid: int = 107
export const WinCapabilityAppointmentsSid: int = 108
export const WinCapabilityContactsSid: int = 109
export const WinAccountDefaultSystemManagedSid: int = 110
export const WinBuiltinDefaultSystemManagedGroupSid: int = 111
export const WinBuiltinStorageReplicaAdminsSid: int = 112
export const WinAccountKeyAdminsSid: int = 113
export const WinAccountEnterpriseKeyAdminsSid: int = 114
export const WinAuthenticationKeyTrustSid: int = 115
export const WinAuthenticationKeyPropertyMFASid: int = 116
export const WinAuthenticationKeyPropertyAttestationSid: int = 117
export const WinAuthenticationFreshKeyAuthSid: int = 118
export const WinBuiltinDeviceOwnersSid: int = 119
export const AclRevisionInformation: int = 1
export const AclSizeInformation: int = 2
export const AuditEventObjectAccess: int = 0
export const AuditEventDirectoryServiceAccess: int = 1
export const AccessReasonNone: int = 0
export const AccessReasonAllowedAce: int = 65536
export const AccessReasonDeniedAce: int = 131072
export const AccessReasonAllowedParentAce: int = 196608
export const AccessReasonDeniedParentAce: int = 262144
export const AccessReasonNotGrantedByCape: int = 327680
export const AccessReasonNotGrantedByParentCape: int = 393216
export const AccessReasonNotGrantedToAppContainer: int = 458752
export const AccessReasonMissingPrivilege: int = 1048576
export const AccessReasonFromPrivilege: int = 2097152
export const AccessReasonIntegrityLevel: int = 3145728
export const AccessReasonOwnership: int = 4194304
export const AccessReasonNullDacl: int = 5242880
export const AccessReasonEmptyDacl: int = 6291456
export const AccessReasonNoSD: int = 7340032
export const AccessReasonNoGrant: int = 8388608
export const AccessReasonTrustLabel: int = 9437184
export const AccessReasonFilterAce: int = 10485760
export const SecurityAnonymous: int = 0
export const SecurityIdentification: int = 1
export const SecurityImpersonation: int = 2
export const SecurityDelegation: int = 3
export const TokenPrimary: int = 1
export const TokenImpersonation: int = 2
export const TokenElevationTypeDefault: int = 1
export const TokenElevationTypeFull: int = 2
export const TokenElevationTypeLimited: int = 3
export const TokenUser: int = 1
export const TokenGroups: int = 2
export const TokenPrivileges: int = 3
export const TokenOwner: int = 4
export const TokenPrimaryGroup: int = 5
export const TokenDefaultDacl: int = 6
export const TokenSource: int = 7
export const TokenType: int = 8
export const TokenImpersonationLevel: int = 9
export const TokenStatistics: int = 10
export const TokenRestrictedSids: int = 11
export const TokenSessionId: int = 12
export const TokenGroupsAndPrivileges: int = 13
export const TokenSessionReference: int = 14
export const TokenSandBoxInert: int = 15
export const TokenAuditPolicy: int = 16
export const TokenOrigin: int = 17
export const TokenElevationType: int = 18
export const TokenLinkedToken: int = 19
export const TokenElevation: int = 20
export const TokenHasRestrictions: int = 21
export const TokenAccessInformation: int = 22
export const TokenVirtualizationAllowed: int = 23
export const TokenVirtualizationEnabled: int = 24
export const TokenIntegrityLevel: int = 25
export const TokenUIAccess: int = 26
export const TokenMandatoryPolicy: int = 27
export const TokenLogonSid: int = 28
export const TokenIsAppContainer: int = 29
export const TokenCapabilities: int = 30
export const TokenAppContainerSid: int = 31
export const TokenAppContainerNumber: int = 32
export const TokenUserClaimAttributes: int = 33
export const TokenDeviceClaimAttributes: int = 34
export const TokenRestrictedUserClaimAttributes: int = 35
export const TokenRestrictedDeviceClaimAttributes: int = 36
export const TokenDeviceGroups: int = 37
export const TokenRestrictedDeviceGroups: int = 38
export const TokenSecurityAttributes: int = 39
export const TokenIsRestricted: int = 40
export const TokenProcessTrustLevel: int = 41
export const TokenPrivateNameSpace: int = 42
export const TokenSingletonAttributes: int = 43
export const TokenBnoIsolation: int = 44
export const TokenChildProcessFlags: int = 45
export const TokenIsLessPrivilegedAppContainer: int = 46
export const TokenIsSandboxed: int = 47
export const TokenIsAppSilo: int = 48
export const MaxTokenInfoClass: int = 49
export const MandatoryLevelUntrusted: int = 0
export const MandatoryLevelLow: int = 1
export const MandatoryLevelMedium: int = 2
export const MandatoryLevelHigh: int = 3
export const MandatoryLevelSystem: int = 4
export const MandatoryLevelSecureProcess: int = 5
export const MandatoryLevelCount: int = 6
export const SeImageSignatureNone: int = 0
export const SeImageSignatureEmbedded: int = 1
export const SeImageSignatureCache: int = 2
export const SeImageSignatureCatalogCached: int = 3
export const SeImageSignatureCatalogNotCached: int = 4
export const SeImageSignatureCatalogHint: int = 5
export const SeImageSignaturePackageCatalog: int = 6
export const SeImageSignaturePplMitigated: int = 7
export const PMCCounter: int = 0
export const MaxHardwareCounterType: int = 1
export const ProcessDEPPolicy: int = 0
export const ProcessASLRPolicy: int = 1
export const ProcessDynamicCodePolicy: int = 2
export const ProcessStrictHandleCheckPolicy: int = 3
export const ProcessSystemCallDisablePolicy: int = 4
export const ProcessMitigationOptionsMask: int = 5
export const ProcessExtensionPointDisablePolicy: int = 6
export const ProcessControlFlowGuardPolicy: int = 7
export const ProcessSignaturePolicy: int = 8
export const ProcessFontDisablePolicy: int = 9
export const ProcessImageLoadPolicy: int = 10
export const ProcessSystemCallFilterPolicy: int = 11
export const ProcessPayloadRestrictionPolicy: int = 12
export const ProcessChildProcessPolicy: int = 13
export const ProcessSideChannelIsolationPolicy: int = 14
export const ProcessUserShadowStackPolicy: int = 15
export const ProcessRedirectionTrustPolicy: int = 16
export const ProcessUserPointerAuthPolicy: int = 17
export const ProcessSEHOPPolicy: int = 18
export const MaxProcessMitigationPolicy: int = 19
export const ToleranceLow: int = 1
export const ToleranceMedium: int = 2
export const ToleranceHigh: int = 3
export const ToleranceIntervalShort: int = 1
export const ToleranceIntervalMedium: int = 2
export const ToleranceIntervalLong: int = 3
export const JOB_OBJECT_NET_RATE_CONTROL_ENABLE: int = 1
export const JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH: int = 2
export const JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG: int = 4
export const JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS: int = 7
export const JOB_OBJECT_IO_RATE_CONTROL_ENABLE: int = 1
export const JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME: int = 2
export const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL: int = 4
export const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP: int = 8
export const JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS: int = 15
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE: int = 1
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE: int = 2
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS: int = 3
export const JobObjectBasicAccountingInformation: int = 1
export const JobObjectBasicLimitInformation: int = 2
export const JobObjectBasicProcessIdList: int = 3
export const JobObjectBasicUIRestrictions: int = 4
export const JobObjectSecurityLimitInformation: int = 5
export const JobObjectEndOfJobTimeInformation: int = 6
export const JobObjectAssociateCompletionPortInformation: int = 7
export const JobObjectBasicAndIoAccountingInformation: int = 8
export const JobObjectExtendedLimitInformation: int = 9
export const JobObjectJobSetInformation: int = 10
export const JobObjectGroupInformation: int = 11
export const JobObjectNotificationLimitInformation: int = 12
export const JobObjectLimitViolationInformation: int = 13
export const JobObjectGroupInformationEx: int = 14
export const JobObjectCpuRateControlInformation: int = 15
export const JobObjectCompletionFilter: int = 16
export const JobObjectCompletionCounter: int = 17
export const JobObjectReserved1Information: int = 18
export const JobObjectReserved2Information: int = 19
export const JobObjectReserved3Information: int = 20
export const JobObjectReserved4Information: int = 21
export const JobObjectReserved5Information: int = 22
export const JobObjectReserved6Information: int = 23
export const JobObjectReserved7Information: int = 24
export const JobObjectReserved8Information: int = 25
export const JobObjectReserved9Information: int = 26
export const JobObjectReserved10Information: int = 27
export const JobObjectReserved11Information: int = 28
export const JobObjectReserved12Information: int = 29
export const JobObjectReserved13Information: int = 30
export const JobObjectReserved14Information: int = 31
export const JobObjectNetRateControlInformation: int = 32
export const JobObjectNotificationLimitInformation2: int = 33
export const JobObjectLimitViolationInformation2: int = 34
export const JobObjectCreateSilo: int = 35
export const JobObjectSiloBasicInformation: int = 36
export const JobObjectReserved15Information: int = 37
export const JobObjectReserved16Information: int = 38
export const JobObjectReserved17Information: int = 39
export const JobObjectReserved18Information: int = 40
export const JobObjectReserved19Information: int = 41
export const JobObjectReserved20Information: int = 42
export const JobObjectReserved21Information: int = 43
export const JobObjectReserved22Information: int = 44
export const JobObjectReserved23Information: int = 45
export const JobObjectReserved24Information: int = 46
export const JobObjectReserved25Information: int = 47
export const JobObjectReserved26Information: int = 48
export const JobObjectReserved27Information: int = 49
export const MaxJobObjectInfoClass: int = 50
export const SERVERSILO_INITING: int = 0
export const SERVERSILO_STARTED: int = 1
export const SERVERSILO_SHUTTING_DOWN: int = 2
export const SERVERSILO_TERMINATING: int = 3
export const SERVERSILO_TERMINATED: int = 4
export const FirmwareTypeUnknown: int = 0
export const FirmwareTypeBios: int = 1
export const FirmwareTypeUefi: int = 2
export const FirmwareTypeMax: int = 3
export const RelationProcessorCore: int = 0
export const RelationNumaNode: int = 1
export const RelationCache: int = 2
export const RelationProcessorPackage: int = 3
export const RelationGroup: int = 4
export const RelationProcessorDie: int = 5
export const RelationNumaNodeEx: int = 6
export const RelationProcessorModule: int = 7
export const RelationAll: int = 65535
export const CacheUnified: int = 0
export const CacheInstruction: int = 1
export const CacheData: int = 2
export const CacheTrace: int = 3
export const CpuSetInformation: int = 0
export const MemExtendedParameterInvalidType: int = 0
export const MemExtendedParameterAddressRequirements: int = 1
export const MemExtendedParameterNumaNode: int = 2
export const MemExtendedParameterPartitionHandle: int = 3
export const MemExtendedParameterUserPhysicalHandle: int = 4
export const MemExtendedParameterAttributeFlags: int = 5
export const MemExtendedParameterImageMachine: int = 6
export const MemExtendedParameterMax: int = 7
export const MemDedicatedAttributeReadBandwidth: int = 0
export const MemDedicatedAttributeReadLatency: int = 1
export const MemDedicatedAttributeWriteBandwidth: int = 2
export const MemDedicatedAttributeWriteLatency: int = 3
export const MemDedicatedAttributeMax: int = 4
export const MemSectionExtendedParameterInvalidType: int = 0
export const MemSectionExtendedParameterUserPhysicalFlags: int = 1
export const MemSectionExtendedParameterNumaNode: int = 2
export const MemSectionExtendedParameterSigningLevel: int = 3
export const MemSectionExtendedParameterMax: int = 4
export const SharedVirtualDisksUnsupported: int = 0
export const SharedVirtualDisksSupported: int = 1
export const SharedVirtualDiskSnapshotsSupported: int = 3
export const SharedVirtualDiskCDPSnapshotsSupported: int = 7
export const SharedVirtualDiskHandleStateNone: int = 0
export const SharedVirtualDiskHandleStateFileShared: int = 1
export const SharedVirtualDiskHandleStateHandleShared: int = 3
export import var #extern GUID_MAX_POWER_SAVINGS: s__GUID
export import var #extern GUID_MIN_POWER_SAVINGS: s__GUID
export import var #extern GUID_TYPICAL_POWER_SAVINGS: s__GUID
export import var #extern NO_SUBGROUP_GUID: s__GUID
export import var #extern ALL_POWERSCHEMES_GUID: s__GUID
export import var #extern GUID_POWERSCHEME_PERSONALITY: s__GUID
export import var #extern GUID_ACTIVE_POWERSCHEME: s__GUID
export import var #extern GUID_IDLE_RESILIENCY_SUBGROUP: s__GUID
export import var #extern GUID_IDLE_RESILIENCY_PERIOD: s__GUID
export import var #extern GUID_DEEP_SLEEP_ENABLED: s__GUID
export import var #extern GUID_DEEP_SLEEP_PLATFORM_STATE: s__GUID
export import var #extern GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: s__GUID
export import var #extern GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: s__GUID
export import var #extern GUID_VIDEO_SUBGROUP: s__GUID
export import var #extern GUID_VIDEO_POWERDOWN_TIMEOUT: s__GUID
export import var #extern GUID_VIDEO_ANNOYANCE_TIMEOUT: s__GUID
export import var #extern GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: s__GUID
export import var #extern GUID_VIDEO_DIM_TIMEOUT: s__GUID
export import var #extern GUID_VIDEO_ADAPTIVE_POWERDOWN: s__GUID
export import var #extern GUID_MONITOR_POWER_ON: s__GUID
export import var #extern GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: s__GUID
export import var #extern GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: s__GUID
export import var #extern GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: s__GUID
export import var #extern GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: s__GUID
export import var #extern GUID_CONSOLE_DISPLAY_STATE: s__GUID
export import var #extern GUID_ALLOW_DISPLAY_REQUIRED: s__GUID
export import var #extern GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: s__GUID
export import var #extern GUID_ADVANCED_COLOR_QUALITY_BIAS: s__GUID
export import var #extern GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: s__GUID
export import var #extern GUID_NON_ADAPTIVE_INPUT_TIMEOUT: s__GUID
export import var #extern GUID_ADAPTIVE_INPUT_CONTROLLER_STATE: s__GUID
export import var #extern GUID_DISK_SUBGROUP: s__GUID
export import var #extern GUID_DISK_MAX_POWER: s__GUID
export import var #extern GUID_DISK_POWERDOWN_TIMEOUT: s__GUID
export import var #extern GUID_DISK_IDLE_TIMEOUT: s__GUID
export import var #extern GUID_DISK_BURST_IGNORE_THRESHOLD: s__GUID
export import var #extern GUID_DISK_ADAPTIVE_POWERDOWN: s__GUID
export import var #extern GUID_DISK_NVME_NOPPME: s__GUID
export import var #extern GUID_SLEEP_SUBGROUP: s__GUID
export import var #extern GUID_SLEEP_IDLE_THRESHOLD: s__GUID
export import var #extern GUID_STANDBY_TIMEOUT: s__GUID
export import var #extern GUID_UNATTEND_SLEEP_TIMEOUT: s__GUID
export import var #extern GUID_HIBERNATE_TIMEOUT: s__GUID
export import var #extern GUID_HIBERNATE_FASTS4_POLICY: s__GUID
export import var #extern GUID_CRITICAL_POWER_TRANSITION: s__GUID
export import var #extern GUID_SYSTEM_AWAYMODE: s__GUID
export import var #extern GUID_ALLOW_AWAYMODE: s__GUID
export import var #extern GUID_USER_PRESENCE_PREDICTION: s__GUID
export import var #extern GUID_STANDBY_BUDGET_GRACE_PERIOD: s__GUID
export import var #extern GUID_STANDBY_BUDGET_PERCENT: s__GUID
export import var #extern GUID_STANDBY_RESERVE_GRACE_PERIOD: s__GUID
export import var #extern GUID_STANDBY_RESERVE_TIME: s__GUID
export import var #extern GUID_STANDBY_RESET_PERCENT: s__GUID
export import var #extern GUID_HUPR_ADAPTIVE_DISPLAY_TIMEOUT: s__GUID
export import var #extern GUID_HUPR_ADAPTIVE_DIM_TIMEOUT: s__GUID
export import var #extern GUID_ALLOW_STANDBY_STATES: s__GUID
export import var #extern GUID_ALLOW_RTC_WAKE: s__GUID
export import var #extern GUID_LEGACY_RTC_MITIGATION: s__GUID
export import var #extern GUID_ALLOW_SYSTEM_REQUIRED: s__GUID
export import var #extern GUID_POWER_SAVING_STATUS: s__GUID
export import var #extern GUID_ENERGY_SAVER_SUBGROUP: s__GUID
export import var #extern GUID_ENERGY_SAVER_BATTERY_THRESHOLD: s__GUID
export import var #extern GUID_ENERGY_SAVER_BRIGHTNESS: s__GUID
export import var #extern GUID_ENERGY_SAVER_POLICY: s__GUID
export import var #extern GUID_SYSTEM_BUTTON_SUBGROUP: s__GUID
export import var #extern GUID_POWERBUTTON_ACTION: s__GUID
export import var #extern GUID_SLEEPBUTTON_ACTION: s__GUID
export import var #extern GUID_USERINTERFACEBUTTON_ACTION: s__GUID
export import var #extern GUID_LIDCLOSE_ACTION: s__GUID
export import var #extern GUID_LIDOPEN_POWERSTATE: s__GUID
export import var #extern GUID_BATTERY_SUBGROUP: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_ACTION_0: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_LEVEL_0: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_FLAGS_0: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_ACTION_1: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_LEVEL_1: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_FLAGS_1: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_ACTION_2: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_LEVEL_2: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_FLAGS_2: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_ACTION_3: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_LEVEL_3: s__GUID
export import var #extern GUID_BATTERY_DISCHARGE_FLAGS_3: s__GUID
export import var #extern GUID_PROCESSOR_SETTINGS_SUBGROUP: s__GUID
export import var #extern GUID_PROCESSOR_THROTTLE_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_THROTTLE_MAXIMUM: s__GUID
export import var #extern GUID_PROCESSOR_THROTTLE_MAXIMUM_1: s__GUID
export import var #extern GUID_PROCESSOR_THROTTLE_MINIMUM: s__GUID
export import var #extern GUID_PROCESSOR_THROTTLE_MINIMUM_1: s__GUID
export import var #extern GUID_PROCESSOR_FREQUENCY_LIMIT: s__GUID
export import var #extern GUID_PROCESSOR_FREQUENCY_LIMIT_1: s__GUID
export import var #extern GUID_PROCESSOR_ALLOW_THROTTLING: s__GUID
export import var #extern GUID_PROCESSOR_IDLESTATE_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_PERFSTATE_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1: s__GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1: s__GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_POLICY_1: s__GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_POLICY_1: s__GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_TIME: s__GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_TIME_1: s__GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_TIME: s__GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_TIME_1: s__GUID
export import var #extern GUID_PROCESSOR_PERF_TIME_CHECK: s__GUID
export import var #extern GUID_PROCESSOR_PERF_BOOST_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_BOOST_MODE: s__GUID
export import var #extern GUID_PROCESSOR_PERF_AUTONOMOUS_MODE: s__GUID
export import var #extern GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE: s__GUID
export import var #extern GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1: s__GUID
export import var #extern GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW: s__GUID
export import var #extern GUID_PROCESSOR_DUTY_CYCLING: s__GUID
export import var #extern GUID_PROCESSOR_IDLE_ALLOW_SCALING: s__GUID
export import var #extern GUID_PROCESSOR_IDLE_DISABLE: s__GUID
export import var #extern GUID_PROCESSOR_IDLE_STATE_MAXIMUM: s__GUID
export import var #extern GUID_PROCESSOR_IDLE_TIME_CHECK: s__GUID
export import var #extern GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_MAX_CORES: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_MIN_CORES: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: s__GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_PARKING_CORE_OVERRIDE: s__GUID
export import var #extern GUID_PROCESSOR_PARKING_PERF_STATE: s__GUID
export import var #extern GUID_PROCESSOR_PARKING_PERF_STATE_1: s__GUID
export import var #extern GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_SOFT_PARKING_LATENCY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_HISTORY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_HISTORY_1: s__GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_HISTORY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_HISTORY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: s__GUID
export import var #extern GUID_PROCESSOR_PERF_LATENCY_HINT: s__GUID
export import var #extern GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: s__GUID
export import var #extern GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1: s__GUID
export import var #extern GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK: s__GUID
export import var #extern GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1: s__GUID
export import var #extern GUID_PROCESSOR_MODULE_PARKING_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_COMPLEX_PARKING_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_SMT_UNPARKING_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_DISTRIBUTE_UTILITY: s__GUID
export import var #extern GUID_PROCESSOR_HETEROGENEOUS_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_HETERO_DECREASE_TIME: s__GUID
export import var #extern GUID_PROCESSOR_HETERO_INCREASE_TIME: s__GUID
export import var #extern GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD_1: s__GUID
export import var #extern GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD_1: s__GUID
export import var #extern GUID_PROCESSOR_CLASS0_FLOOR_PERF: s__GUID
export import var #extern GUID_PROCESSOR_CLASS1_INITIAL_PERF: s__GUID
export import var #extern GUID_PROCESSOR_THREAD_SCHEDULING_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_UPPER_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_LOWER_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_UPPER_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_LOWER_THRESHOLD: s__GUID
export import var #extern GUID_SYSTEM_COOLING_POLICY: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR: s__GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1: s__GUID
export import var #extern GUID_LOCK_CONSOLE_ON_WAKE: s__GUID
export import var #extern GUID_DEVICE_IDLE_POLICY: s__GUID
export import var #extern GUID_CONNECTIVITY_IN_STANDBY: s__GUID
export import var #extern GUID_DISCONNECTED_STANDBY_MODE: s__GUID
export import var #extern GUID_ACDC_POWER_SOURCE: s__GUID
export import var #extern GUID_LIDSWITCH_STATE_CHANGE: s__GUID
export import var #extern GUID_LIDSWITCH_STATE_RELIABILITY: s__GUID
export import var #extern GUID_BATTERY_PERCENTAGE_REMAINING: s__GUID
export import var #extern GUID_BATTERY_COUNT: s__GUID
export import var #extern GUID_GLOBAL_USER_PRESENCE: s__GUID
export import var #extern GUID_SESSION_DISPLAY_STATUS: s__GUID
export import var #extern GUID_SESSION_USER_PRESENCE: s__GUID
export import var #extern GUID_IDLE_BACKGROUND_TASK: s__GUID
export import var #extern GUID_BACKGROUND_TASK_NOTIFICATION: s__GUID
export import var #extern GUID_APPLAUNCH_BUTTON: s__GUID
export import var #extern GUID_PCIEXPRESS_SETTINGS_SUBGROUP: s__GUID
export import var #extern GUID_PCIEXPRESS_ASPM_POLICY: s__GUID
export import var #extern GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: s__GUID
export import var #extern GUID_INTSTEER_SUBGROUP: s__GUID
export import var #extern GUID_INTSTEER_MODE: s__GUID
export import var #extern GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: s__GUID
export import var #extern GUID_INTSTEER_TIME_UNPARK_TRIGGER: s__GUID
export import var #extern GUID_GRAPHICS_SUBGROUP: s__GUID
export import var #extern GUID_GPU_PREFERENCE_POLICY: s__GUID
export import var #extern GUID_MIXED_REALITY_MODE: s__GUID
export import var #extern GUID_SPR_ACTIVE_SESSION_CHANGE: s__GUID
export const PowerSystemUnspecified: int = 0
export const PowerSystemWorking: int = 1
export const PowerSystemSleeping1: int = 2
export const PowerSystemSleeping2: int = 3
export const PowerSystemSleeping3: int = 4
export const PowerSystemHibernate: int = 5
export const PowerSystemShutdown: int = 6
export const PowerSystemMaximum: int = 7
export const PowerActionNone: int = 0
export const PowerActionReserved: int = 1
export const PowerActionSleep: int = 2
export const PowerActionHibernate: int = 3
export const PowerActionShutdown: int = 4
export const PowerActionShutdownReset: int = 5
export const PowerActionShutdownOff: int = 6
export const PowerActionWarmEject: int = 7
export const PowerActionDisplayOff: int = 8
export const PowerDeviceUnspecified: int = 0
export const PowerDeviceD0: int = 1
export const PowerDeviceD1: int = 2
export const PowerDeviceD2: int = 3
export const PowerDeviceD3: int = 4
export const PowerDeviceMaximum: int = 5
export const PowerMonitorOff: int = 0
export const PowerMonitorOn: int = 1
export const PowerMonitorDim: int = 2
export const PowerUserPresent: int = 0
export const PowerUserNotPresent: int = 1
export const PowerUserInactive: int = 2
export const PowerUserMaximum: int = 3
export const PowerUserInvalid: int = 3
export const LT_DONT_CARE: int = 0
export const LT_LOWEST_LATENCY: int = 1
export const PowerRequestDisplayRequired: int = 0
export const PowerRequestSystemRequired: int = 1
export const PowerRequestAwayModeRequired: int = 2
export const PowerRequestExecutionRequired: int = 3
export const SystemPowerPolicyAc: int = 0
export const SystemPowerPolicyDc: int = 1
export const VerifySystemPolicyAc: int = 2
export const VerifySystemPolicyDc: int = 3
export const SystemPowerCapabilities: int = 4
export const SystemBatteryState: int = 5
export const SystemPowerStateHandler: int = 6
export const ProcessorStateHandler: int = 7
export const SystemPowerPolicyCurrent: int = 8
export const AdministratorPowerPolicy: int = 9
export const SystemReserveHiberFile: int = 10
export const ProcessorInformation: int = 11
export const SystemPowerInformation: int = 12
export const ProcessorStateHandler2: int = 13
export const LastWakeTime: int = 14
export const LastSleepTime: int = 15
export const SystemExecutionState: int = 16
export const SystemPowerStateNotifyHandler: int = 17
export const ProcessorPowerPolicyAc: int = 18
export const ProcessorPowerPolicyDc: int = 19
export const VerifyProcessorPowerPolicyAc: int = 20
export const VerifyProcessorPowerPolicyDc: int = 21
export const ProcessorPowerPolicyCurrent: int = 22
export const SystemPowerStateLogging: int = 23
export const SystemPowerLoggingEntry: int = 24
export const SetPowerSettingValue: int = 25
export const NotifyUserPowerSetting: int = 26
export const PowerInformationLevelUnused0: int = 27
export const SystemMonitorHiberBootPowerOff: int = 28
export const SystemVideoState: int = 29
export const TraceApplicationPowerMessage: int = 30
export const TraceApplicationPowerMessageEnd: int = 31
export const ProcessorPerfStates: int = 32
export const ProcessorIdleStates: int = 33
export const ProcessorCap: int = 34
export const SystemWakeSource: int = 35
export const SystemHiberFileInformation: int = 36
export const TraceServicePowerMessage: int = 37
export const ProcessorLoad: int = 38
export const PowerShutdownNotification: int = 39
export const MonitorCapabilities: int = 40
export const SessionPowerInit: int = 41
export const SessionDisplayState: int = 42
export const PowerRequestCreate: int = 43
export const PowerRequestAction: int = 44
export const GetPowerRequestList: int = 45
export const ProcessorInformationEx: int = 46
export const NotifyUserModeLegacyPowerEvent: int = 47
export const GroupPark: int = 48
export const ProcessorIdleDomains: int = 49
export const WakeTimerList: int = 50
export const SystemHiberFileSize: int = 51
export const ProcessorIdleStatesHv: int = 52
export const ProcessorPerfStatesHv: int = 53
export const ProcessorPerfCapHv: int = 54
export const ProcessorSetIdle: int = 55
export const LogicalProcessorIdling: int = 56
export const UserPresence: int = 57
export const PowerSettingNotificationName: int = 58
export const GetPowerSettingValue: int = 59
export const IdleResiliency: int = 60
export const SessionRITState: int = 61
export const SessionConnectNotification: int = 62
export const SessionPowerCleanup: int = 63
export const SessionLockState: int = 64
export const SystemHiberbootState: int = 65
export const PlatformInformation: int = 66
export const PdcInvocation: int = 67
export const MonitorInvocation: int = 68
export const FirmwareTableInformationRegistered: int = 69
export const SetShutdownSelectedTime: int = 70
export const SuspendResumeInvocation: int = 71
export const PlmPowerRequestCreate: int = 72
export const ScreenOff: int = 73
export const CsDeviceNotification: int = 74
export const PlatformRole: int = 75
export const LastResumePerformance: int = 76
export const DisplayBurst: int = 77
export const ExitLatencySamplingPercentage: int = 78
export const RegisterSpmPowerSettings: int = 79
export const PlatformIdleStates: int = 80
export const ProcessorIdleVeto: int = 81
export const PlatformIdleVeto: int = 82
export const SystemBatteryStatePrecise: int = 83
export const ThermalEvent: int = 84
export const PowerRequestActionInternal: int = 85
export const BatteryDeviceState: int = 86
export const PowerInformationInternal: int = 87
export const ThermalStandby: int = 88
export const SystemHiberFileType: int = 89
export const PhysicalPowerButtonPress: int = 90
export const QueryPotentialDripsConstraint: int = 91
export const EnergyTrackerCreate: int = 92
export const EnergyTrackerQuery: int = 93
export const UpdateBlackBoxRecorder: int = 94
export const SessionAllowExternalDmaDevices: int = 95
export const SendSuspendResumeNotification: int = 96
export const BlackBoxRecorderDirectAccessBuffer: int = 97
export const PowerInformationLevelMaximum: int = 98
export const UserNotPresent: int = 0
export const UserPresent: int = 1
export const UserUnknown: int = 255
export const MonitorRequestReasonUnknown: int = 0
export const MonitorRequestReasonPowerButton: int = 1
export const MonitorRequestReasonRemoteConnection: int = 2
export const MonitorRequestReasonScMonitorpower: int = 3
export const MonitorRequestReasonUserInput: int = 4
export const MonitorRequestReasonAcDcDisplayBurst: int = 5
export const MonitorRequestReasonUserDisplayBurst: int = 6
export const MonitorRequestReasonPoSetSystemState: int = 7
export const MonitorRequestReasonSetThreadExecutionState: int = 8
export const MonitorRequestReasonFullWake: int = 9
export const MonitorRequestReasonSessionUnlock: int = 10
export const MonitorRequestReasonScreenOffRequest: int = 11
export const MonitorRequestReasonIdleTimeout: int = 12
export const MonitorRequestReasonPolicyChange: int = 13
export const MonitorRequestReasonSleepButton: int = 14
export const MonitorRequestReasonLid: int = 15
export const MonitorRequestReasonBatteryCountChange: int = 16
export const MonitorRequestReasonGracePeriod: int = 17
export const MonitorRequestReasonPnP: int = 18
export const MonitorRequestReasonDP: int = 19
export const MonitorRequestReasonSxTransition: int = 20
export const MonitorRequestReasonSystemIdle: int = 21
export const MonitorRequestReasonNearProximity: int = 22
export const MonitorRequestReasonThermalStandby: int = 23
export const MonitorRequestReasonResumePdc: int = 24
export const MonitorRequestReasonResumeS4: int = 25
export const MonitorRequestReasonTerminal: int = 26
export const MonitorRequestReasonPdcSignal: int = 27
export const MonitorRequestReasonAcDcDisplayBurstSuppressed: int = 28
export const MonitorRequestReasonSystemStateEntered: int = 29
export const MonitorRequestReasonWinrt: int = 30
export const MonitorRequestReasonUserInputKeyboard: int = 31
export const MonitorRequestReasonUserInputMouse: int = 32
export const MonitorRequestReasonUserInputTouchpad: int = 33
export const MonitorRequestReasonUserInputPen: int = 34
export const MonitorRequestReasonUserInputAccelerometer: int = 35
export const MonitorRequestReasonUserInputHid: int = 36
export const MonitorRequestReasonUserInputPoUserPresent: int = 37
export const MonitorRequestReasonUserInputSessionSwitch: int = 38
export const MonitorRequestReasonUserInputInitialization: int = 39
export const MonitorRequestReasonPdcSignalWindowsMobilePwrNotif: int = 40
export const MonitorRequestReasonPdcSignalWindowsMobileShell: int = 41
export const MonitorRequestReasonPdcSignalHeyCortana: int = 42
export const MonitorRequestReasonPdcSignalHolographicShell: int = 43
export const MonitorRequestReasonPdcSignalFingerprint: int = 44
export const MonitorRequestReasonDirectedDrips: int = 45
export const MonitorRequestReasonDim: int = 46
export const MonitorRequestReasonBuiltinPanel: int = 47
export const MonitorRequestReasonDisplayRequiredUnDim: int = 48
export const MonitorRequestReasonBatteryCountChangeSuppressed: int = 49
export const MonitorRequestReasonResumeModernStandby: int = 50
export const MonitorRequestReasonTerminalInit: int = 51
export const MonitorRequestReasonPdcSignalSensorsHumanPresence: int = 52
export const MonitorRequestReasonBatteryPreCritical: int = 53
export const MonitorRequestReasonUserInputTouch: int = 54
export const MonitorRequestReasonMax: int = 55
export const MonitorRequestTypeOff: int = 0
export const MonitorRequestTypeOnAndPresent: int = 1
export const MonitorRequestTypeToggleOn: int = 2
export const PoAc: int = 0
export const PoDc: int = 1
export const PoHot: int = 2
export const PoConditionMaximum: int = 3
export const PlatformRoleUnspecified: int = 0
export const PlatformRoleDesktop: int = 1
export const PlatformRoleMobile: int = 2
export const PlatformRoleWorkstation: int = 3
export const PlatformRoleEnterpriseServer: int = 4
export const PlatformRoleSOHOServer: int = 5
export const PlatformRoleAppliancePC: int = 6
export const PlatformRolePerformanceServer: int = 7
export const PlatformRoleSlate: int = 8
export const PlatformRoleMaximum: int = 9
export const ALTITUDE_GROUP_POLICY: int = 0
export const ALTITUDE_USER: int = 1
export const ALTITUDE_RUNTIME_OVERRIDE: int = 2
export const ALTITUDE_PROVISIONING: int = 3
export const ALTITUDE_OEM_CUSTOMIZATION: int = 4
export const ALTITUDE_INTERNAL_OVERRIDE: int = 5
export const ALTITUDE_OS_DEFAULT: int = 6
export import var #extern PPM_PERFSTATE_CHANGE_GUID: s__GUID
export import var #extern PPM_PERFSTATE_DOMAIN_CHANGE_GUID: s__GUID
export import var #extern PPM_IDLESTATE_CHANGE_GUID: s__GUID
export import var #extern PPM_PERFSTATES_DATA_GUID: s__GUID
export import var #extern PPM_IDLESTATES_DATA_GUID: s__GUID
export import var #extern PPM_IDLE_ACCOUNTING_GUID: s__GUID
export import var #extern PPM_IDLE_ACCOUNTING_EX_GUID: s__GUID
export import var #extern PPM_THERMALCONSTRAINT_GUID: s__GUID
export import var #extern PPM_PERFMON_PERFSTATE_GUID: s__GUID
export import var #extern PPM_THERMAL_POLICY_CHANGE_GUID: s__GUID
export const HiberFileBucket1GB: int = 0
export const HiberFileBucket2GB: int = 1
export const HiberFileBucket4GB: int = 2
export const HiberFileBucket8GB: int = 3
export const HiberFileBucket16GB: int = 4
export const HiberFileBucket32GB: int = 5
export const HiberFileBucketUnlimited: int = 6
export const HiberFileBucketMax: int = 7
export const IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF: int = 1
export const PdataRefToFullXdata: int = 0
export const PdataPackedUnwindFunction: int = 1
export const PdataPackedUnwindFragment: int = 2
export const PdataCrUnchained: int = 0
export const PdataCrUnchainedSavedLr: int = 1
export const PdataCrChainedWithPac: int = 2
export const PdataCrChained: int = 3
export const IMPORT_OBJECT_CODE: int = 0
export const IMPORT_OBJECT_DATA: int = 1
export const IMPORT_OBJECT_CONST: int = 2
export const IMPORT_OBJECT_ORDINAL: int = 0
export const IMPORT_OBJECT_NAME: int = 1
export const IMPORT_OBJECT_NAME_NO_PREFIX: int = 2
export const IMPORT_OBJECT_NAME_UNDECORATE: int = 3
export const IMPORT_OBJECT_NAME_EXPORTAS: int = 4
export const COMIMAGE_FLAGS_ILONLY: int = 1
export const COMIMAGE_FLAGS_32BITREQUIRED: int = 2
export const COMIMAGE_FLAGS_IL_LIBRARY: int = 4
export const COMIMAGE_FLAGS_STRONGNAMESIGNED: int = 8
export const COMIMAGE_FLAGS_NATIVE_ENTRYPOINT: int = 16
export const COMIMAGE_FLAGS_TRACKDEBUGDATA: int = 65536
export const COMIMAGE_FLAGS_32BITPREFERRED: int = 131072
export const COR_VERSION_MAJOR_V2: int = 2
export const COR_VERSION_MAJOR: int = 2
export const COR_VERSION_MINOR: int = 5
export const COR_DELETED_NAME_LENGTH: int = 8
export const COR_VTABLEGAP_NAME_LENGTH: int = 8
export const NATIVE_TYPE_MAX_CB: int = 1
export const COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE: int = 255
export const IMAGE_COR_MIH_METHODRVA: int = 1
export const IMAGE_COR_MIH_EHRVA: int = 2
export const IMAGE_COR_MIH_BASICBLOCK: int = 8
export const COR_VTABLE_32BIT: int = 1
export const COR_VTABLE_64BIT: int = 2
export const COR_VTABLE_FROM_UNMANAGED: int = 4
export const COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN: int = 8
export const COR_VTABLE_CALL_MOST_DERIVED: int = 16
export const IMAGE_COR_EATJ_THUNK_SIZE: int = 32
export const MAX_CLASS_NAME: int = 1024
export const MAX_PACKAGE_NAME: int = 1024
export import def #extern #dllimport RtlCaptureStackBackTrace(FramesToSkip: ulong, FramesToCapture: ulong, BackTrace: **, BackTraceHash: *ulong) -> ushort
export import def #extern #dllimport RtlCaptureContext(ContextRecord: *s__CONTEXT)
export import def #extern #dllimport RtlCaptureContext2(ContextRecord: *s__CONTEXT)
export import def #extern #dllimport RtlUnwind(TargetFrame: *, TargetIp: *, ExceptionRecord: *s__EXCEPTION_RECORD, ReturnValue: *)
export import def #extern #dllimport RtlAddFunctionTable(FunctionTable: *s__IMAGE_RUNTIME_FUNCTION_ENTRY, EntryCount: ulong, BaseAddress: uint64) -> uint8
export import def #extern #dllimport RtlDeleteFunctionTable(FunctionTable: *s__IMAGE_RUNTIME_FUNCTION_ENTRY) -> uint8
export import def #extern #dllimport RtlInstallFunctionTableCallback(TableIdentifier: uint64, BaseAddress: uint64, Length: ulong, Callback: def (uint64, *) -> (*s__IMAGE_RUNTIME_FUNCTION_ENTRY), Context: *, OutOfProcessCallbackDll: *ushort) -> uint8
export import def #extern #dllimport RtlAddGrowableFunctionTable(DynamicTable: **, FunctionTable: *s__IMAGE_RUNTIME_FUNCTION_ENTRY, EntryCount: ulong, MaximumEntryCount: ulong, RangeBase: uint64, RangeEnd: uint64) -> ulong
export import def #extern #dllimport RtlGrowFunctionTable(DynamicTable: *, NewEntryCount: ulong)
export import def #extern #dllimport RtlDeleteGrowableFunctionTable(DynamicTable: *)
export import def #extern #dllimport RtlLookupFunctionEntry(ControlPc: uint64, ImageBase: *uint64, HistoryTable: *s__UNWIND_HISTORY_TABLE) -> *s__IMAGE_RUNTIME_FUNCTION_ENTRY
export import def #extern #dllimport RtlRestoreContext(ContextRecord: *s__CONTEXT, ExceptionRecord: *s__EXCEPTION_RECORD)
export import def #extern #dllimport RtlUnwindEx(TargetFrame: *, TargetIp: *, ExceptionRecord: *s__EXCEPTION_RECORD, ReturnValue: *, ContextRecord: *s__CONTEXT, HistoryTable: *s__UNWIND_HISTORY_TABLE)
export import def #extern #dllimport RtlVirtualUnwind(HandlerType: ulong, ImageBase: uint64, ControlPc: uint64, FunctionEntry: *s__IMAGE_RUNTIME_FUNCTION_ENTRY, ContextRecord: *s__CONTEXT, HandlerData: **, EstablisherFrame: *uint64, ContextPointers: *s__KNONVOLATILE_CONTEXT_POINTERS) -> def (*s__EXCEPTION_RECORD, *, *s__CONTEXT, *) -> (e__EXCEPTION_DISPOSITION)
export import def #extern #dllimport RtlRaiseException(ExceptionRecord: *s__EXCEPTION_RECORD)
export import def #extern #dllimport RtlPcToFileHeader(PcValue: *, BaseOfImage: **) -> *
export import def #extern #dllimport RtlCompareMemory(Source1: *, Source2: *, Length: uint64) -> uint64
export import def #extern #dllimport RtlInitializeSListHead(ListHead: *u__SLIST_HEADER)
export import def #extern #dllimport RtlFirstEntrySList(ListHead: *u__SLIST_HEADER) -> *s__SLIST_ENTRY
export import def #extern #dllimport RtlInterlockedPopEntrySList(ListHead: *u__SLIST_HEADER) -> *s__SLIST_ENTRY
export import def #extern #dllimport RtlInterlockedPushEntrySList(ListHead: *u__SLIST_HEADER, ListEntry: *s__SLIST_ENTRY) -> *s__SLIST_ENTRY
export import def #extern #dllimport RtlInterlockedPushListSListEx(ListHead: *u__SLIST_HEADER, List: *s__SLIST_ENTRY, ListEnd: *s__SLIST_ENTRY, Count: ulong) -> *s__SLIST_ENTRY
export import def #extern #dllimport RtlInterlockedFlushSList(ListHead: *u__SLIST_HEADER) -> *s__SLIST_ENTRY
export import def #extern #dllimport RtlQueryDepthSList(ListHead: *u__SLIST_HEADER) -> ushort
export import def #extern #dllimport RtlGetReturnAddressHijackTarget() -> uint64
export import def #extern __fastfail(Code: uint)
export import def #extern HEAP_MAKE_TAG_FLAGS(TagBase: ulong, Tag: ulong) -> ulong
export import def #extern RtlConstantTimeEqualMemory(v1: *, v2: *, len: ulong) -> int
export import def #extern RtlSecureZeroMemory(ptr: *, cnt: uint64) -> *
export import def #extern #dllimport VerSetConditionMask(ConditionMask: uint64, TypeMask: ulong, Condition: uint8) -> uint64
export import def #extern #dllimport RtlGetProductInfo(OSMajorVersion: ulong, OSMinorVersion: ulong, SpMajorVersion: ulong, SpMinorVersion: ulong, ReturnedProductType: *ulong) -> uint8
export const UmsThreadInvalidInfoClass: int = 0
export const UmsThreadUserContext: int = 1
export const UmsThreadPriority: int = 2
export const UmsThreadAffinity: int = 3
export const UmsThreadTeb: int = 4
export const UmsThreadIsSuspended: int = 5
export const UmsThreadIsTerminated: int = 6
export const UmsThreadMaxInfoClass: int = 7
export const UmsSchedulerStartup: int = 0
export const UmsSchedulerThreadBlocked: int = 1
export const UmsSchedulerThreadYield: int = 2
export import def #extern #dllimport RtlCrc32(Buffer: *, Size: uint64, InitialCrc: ulong) -> ulong
export import def #extern #dllimport RtlCrc64(Buffer: *, Size: uint64, InitialCrc: uint64) -> uint64
export const OS_DEPLOYMENT_STANDARD: int = 1
export const OS_DEPLOYMENT_COMPACT: int = 2
export import def #extern #dllimport RtlOsDeploymentState(Flags: ulong) -> e__OS_DEPLOYEMENT_STATE_VALUES
export import def #extern #dllimport RtlGetNonVolatileToken(NvBuffer: *, Size: uint64, NvToken: **) -> ulong
export import def #extern #dllimport RtlFreeNonVolatileToken(NvToken: *) -> ulong
export import def #extern #dllimport RtlFlushNonVolatileMemory(NvToken: *, NvBuffer: *, Size: uint64, Flags: ulong) -> ulong
export import def #extern #dllimport RtlDrainNonVolatileFlush(NvToken: *) -> ulong
export import def #extern #dllimport RtlWriteNonVolatileMemory(NvToken: *, NvDestination: *, Source: *, Size: uint64, Flags: ulong) -> ulong
export import def #extern #dllimport RtlFillNonVolatileMemory(NvToken: *, NvDestination: *, Size: uint64, Value: uint8, Flags: ulong) -> ulong
export import def #extern #dllimport RtlFlushNonVolatileMemoryRanges(NvToken: *, NvRanges: *s__NV_MEMORY_RANGE, NumRanges: uint64, Flags: ulong) -> ulong
export import def #extern #dllimport RtlInitializeCorrelationVector(CorrelationVector: *s_CORRELATION_VECTOR, Version: int, Guid: *s__GUID) -> ulong
export import def #extern #dllimport RtlIncrementCorrelationVector(CorrelationVector: *s_CORRELATION_VECTOR) -> ulong
export import def #extern #dllimport RtlExtendCorrelationVector(CorrelationVector: *s_CORRELATION_VECTOR) -> ulong
export import def #extern #dllimport RtlValidateCorrelationVector(Vector: *s_CORRELATION_VECTOR) -> ulong
export import def #extern CUSTOM_SYSTEM_EVENT_TRIGGER_INIT(Config: *s__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, TriggerId: *ushort)
export import def #extern RtlRaiseCustomSystemEventTrigger(TriggerConfig: *s__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG) -> ulong
export const ImagePolicyEntryTypeNone: int = 0
export const ImagePolicyEntryTypeBool: int = 1
export const ImagePolicyEntryTypeInt8: int = 2
export const ImagePolicyEntryTypeUInt8: int = 3
export const ImagePolicyEntryTypeInt16: int = 4
export const ImagePolicyEntryTypeUInt16: int = 5
export const ImagePolicyEntryTypeInt32: int = 6
export const ImagePolicyEntryTypeUInt32: int = 7
export const ImagePolicyEntryTypeInt64: int = 8
export const ImagePolicyEntryTypeUInt64: int = 9
export const ImagePolicyEntryTypeAnsiString: int = 10
export const ImagePolicyEntryTypeUnicodeString: int = 11
export const ImagePolicyEntryTypeOverride: int = 12
export const ImagePolicyEntryTypeMaximum: int = 13
export const ImagePolicyIdNone: int = 0
export const ImagePolicyIdEtw: int = 1
export const ImagePolicyIdDebug: int = 2
export const ImagePolicyIdCrashDump: int = 3
export const ImagePolicyIdCrashDumpKey: int = 4
export const ImagePolicyIdCrashDumpKeyGuid: int = 5
export const ImagePolicyIdParentSd: int = 6
export const ImagePolicyIdParentSdRev: int = 7
export const ImagePolicyIdSvn: int = 8
export const ImagePolicyIdDeviceId: int = 9
export const ImagePolicyIdCapability: int = 10
export const ImagePolicyIdScenarioId: int = 11
export const ImagePolicyIdMaximum: int = 12
export import def #extern #dllimport RtlIsZeroMemory(Buffer: *, Length: uint64) -> uint8
export import def #extern #dllimport RtlNormalizeSecurityDescriptor(SecurityDescriptor: **, SecurityDescriptorLength: ulong, NewSecurityDescriptor: **, NewSecurityDescriptorLength: *ulong, CheckOnly: uint8) -> uint8
export const GlobalDataIdUnknown: int = 0
export const GlobalDataIdRngSeedVersion: int = 1
export const GlobalDataIdInterruptTime: int = 2
export const GlobalDataIdTimeZoneBias: int = 3
export const GlobalDataIdImageNumberLow: int = 4
export const GlobalDataIdImageNumberHigh: int = 5
export const GlobalDataIdTimeZoneId: int = 6
export const GlobalDataIdNtMajorVersion: int = 7
export const GlobalDataIdNtMinorVersion: int = 8
export const GlobalDataIdSystemExpirationDate: int = 9
export const GlobalDataIdKdDebuggerEnabled: int = 10
export const GlobalDataIdCyclesPerYield: int = 11
export const GlobalDataIdSafeBootMode: int = 12
export const GlobalDataIdLastSystemRITEventTickCount: int = 13
export const GlobalDataIdConsoleSharedDataFlags: int = 14
export const GlobalDataIdNtSystemRootDrive: int = 15
export const GlobalDataIdQpcShift: int = 16
export const GlobalDataIdQpcBypassEnabled: int = 17
export const GlobalDataIdQpcData: int = 18
export const GlobalDataIdQpcBias: int = 19
export import def #extern #dllimport RtlGetSystemGlobalData(DataId: e__RTL_SYSTEM_GLOBAL_DATA_ID, Buffer: *, Size: ulong) -> ulong
export import def #extern #dllimport RtlSetSystemGlobalData(DataId: e__RTL_SYSTEM_GLOBAL_DATA_ID, Buffer: *, Size: ulong) -> ulong
export const HeapCompatibilityInformation: int = 0
export const HeapEnableTerminationOnCorruption: int = 1
export const HeapOptimizeResources: int = 3
export const HeapTag: int = 7
export const ActivationContextBasicInformation: int = 1
export const ActivationContextDetailedInformation: int = 2
export const AssemblyDetailedInformationInActivationContext: int = 3
export const FileInformationInAssemblyOfAssemblyInActivationContext: int = 4
export const RunlevelInformationInActivationContext: int = 5
export const CompatibilityInformationInActivationContext: int = 6
export const ActivationContextManifestResourceName: int = 7
export const MaxActivationContextInfoClass: int = 8
export const AssemblyDetailedInformationInActivationContxt: int = 3
export const FileInformationInAssemblyOfAssemblyInActivationContxt: int = 4
export const ACTCTX_RUN_LEVEL_UNSPECIFIED: int = 0
export const ACTCTX_RUN_LEVEL_AS_INVOKER: int = 1
export const ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE: int = 2
export const ACTCTX_RUN_LEVEL_REQUIRE_ADMIN: int = 3
export const ACTCTX_RUN_LEVEL_NUMBERS: int = 4
export const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN: int = 0
export const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS: int = 1
export const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION: int = 2
export const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED: int = 3
export import def #extern RtlGetDeviceFamilyInfoEnum(pullUAPInfo: *uint64, pulDeviceFamily: *ulong, pulDeviceForm: *ulong)
export import def #extern RtlConvertDeviceFamilyInfoToString(pulDeviceFamilyBufferSize: *ulong, pulDeviceFormBufferSize: *ulong, DeviceFamily: *ushort, DeviceForm: *ushort) -> ulong
export import def #extern RtlSwitchedVVI(VersionInfo: *s__OSVERSIONINFOEXW, TypeMask: ulong, ConditionMask: uint64) -> ulong
export const DriverType: int = 1
export const FileSystemType: int = 2
export const Win32ServiceOwnProcess: int = 16
export const Win32ServiceShareProcess: int = 32
export const AdapterType: int = 4
export const RecognizerType: int = 8
export const BootLoad: int = 0
export const SystemLoad: int = 1
export const AutoLoad: int = 2
export const DemandLoad: int = 3
export const DisableLoad: int = 4
export const IgnoreError: int = 0
export const NormalError: int = 1
export const SevereError: int = 2
export const CriticalError: int = 3
export const TapeDriveProblemNone: int = 0
export const TapeDriveReadWriteWarning: int = 1
export const TapeDriveReadWriteError: int = 2
export const TapeDriveReadWarning: int = 3
export const TapeDriveWriteWarning: int = 4
export const TapeDriveReadError: int = 5
export const TapeDriveWriteError: int = 6
export const TapeDriveHardwareError: int = 7
export const TapeDriveUnsupportedMedia: int = 8
export const TapeDriveScsiConnectionError: int = 9
export const TapeDriveTimetoClean: int = 10
export const TapeDriveCleanDriveNow: int = 11
export const TapeDriveMediaLifeExpired: int = 12
export const TapeDriveSnappedTape: int = 13
export const TransactionOutcomeUndetermined: int = 1
export const TransactionOutcomeCommitted: int = 2
export const TransactionOutcomeAborted: int = 3
export const TransactionStateNormal: int = 1
export const TransactionStateIndoubt: int = 2
export const TransactionStateCommittedNotify: int = 3
export const TransactionBasicInformation: int = 0
export const TransactionPropertiesInformation: int = 1
export const TransactionEnlistmentInformation: int = 2
export const TransactionSuperiorEnlistmentInformation: int = 3
export const TransactionBindInformation: int = 4
export const TransactionDTCPrivateInformation: int = 5
export const TransactionManagerBasicInformation: int = 0
export const TransactionManagerLogInformation: int = 1
export const TransactionManagerLogPathInformation: int = 2
export const TransactionManagerRecoveryInformation: int = 4
export const TransactionManagerOnlineProbeInformation: int = 3
export const TransactionManagerOldestTransactionInformation: int = 5
export const ResourceManagerBasicInformation: int = 0
export const ResourceManagerCompletionInformation: int = 1
export const EnlistmentBasicInformation: int = 0
export const EnlistmentRecoveryInformation: int = 1
export const EnlistmentCrmInformation: int = 2
export const KTMOBJECT_TRANSACTION: int = 0
export const KTMOBJECT_TRANSACTION_MANAGER: int = 1
export const KTMOBJECT_RESOURCE_MANAGER: int = 2
export const KTMOBJECT_ENLISTMENT: int = 3
export const KTMOBJECT_INVALID: int = 4
export const TP_CALLBACK_PRIORITY_HIGH: int = 0
export const TP_CALLBACK_PRIORITY_NORMAL: int = 1
export const TP_CALLBACK_PRIORITY_LOW: int = 2
export const TP_CALLBACK_PRIORITY_INVALID: int = 3
export const TP_CALLBACK_PRIORITY_COUNT: int = 3
export import def #extern TpInitializeCallbackEnviron(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern TpSetCallbackThreadpool(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3, Pool: *s__TP_POOL)
export import def #extern TpSetCallbackCleanupGroup(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3, CleanupGroup: *s__TP_CLEANUP_GROUP, CleanupGroupCancelCallback: def (*, *) -> ())
export import def #extern TpSetCallbackActivationContext(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3, ActivationContext: *s__ACTIVATION_CONTEXT)
export import def #extern TpSetCallbackNoActivationContext(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern TpSetCallbackLongFunction(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern TpSetCallbackRaceWithDll(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3, DllHandle: *)
export import def #extern TpSetCallbackFinalizationCallback(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3, FinalizationCallback: def (*s__TP_CALLBACK_INSTANCE, *) -> ())
export import def #extern TpSetCallbackPriority(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3, Priority: e__TP_CALLBACK_PRIORITY)
export import def #extern TpSetCallbackPersistent(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern TpDestroyCallbackEnviron(CallbackEnviron: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern NtCurrentTeb() -> *s__TEB
export import def #extern GetCurrentFiber() -> *
export import def #extern GetFiberData() -> *
export const DPI_AWARENESS_INVALID: int = -1
export const DPI_AWARENESS_UNAWARE: int = 0
export const DPI_AWARENESS_SYSTEM_AWARE: int = 1
export const DPI_AWARENESS_PER_MONITOR_AWARE: int = 2
export const DPI_HOSTING_BEHAVIOR_INVALID: int = -1
export const DPI_HOSTING_BEHAVIOR_DEFAULT: int = 0
export const DPI_HOSTING_BEHAVIOR_MIXED: int = 1
export const FindExInfoStandard: int = 0
export const FindExInfoBasic: int = 1
export const FindExInfoMaxInfoLevel: int = 2
export const FindExSearchNameMatch: int = 0
export const FindExSearchLimitToDirectories: int = 1
export const FindExSearchLimitToDevices: int = 2
export const FindExSearchMaxSearchOp: int = 3
export const ReadDirectoryNotifyInformation: int = 1
export const ReadDirectoryNotifyExtendedInformation: int = 2
export const ReadDirectoryNotifyFullInformation: int = 3
export const ReadDirectoryNotifyMaximumInformation: int = 4
export const GetFileExInfoStandard: int = 0
export const GetFileExMaxInfoLevel: int = 1
export const FileBasicInfo: int = 0
export const FileStandardInfo: int = 1
export const FileNameInfo: int = 2
export const FileRenameInfo: int = 3
export const FileDispositionInfo: int = 4
export const FileAllocationInfo: int = 5
export const FileEndOfFileInfo: int = 6
export const FileStreamInfo: int = 7
export const FileCompressionInfo: int = 8
export const FileAttributeTagInfo: int = 9
export const FileIdBothDirectoryInfo: int = 10
export const FileIdBothDirectoryRestartInfo: int = 11
export const FileIoPriorityHintInfo: int = 12
export const FileRemoteProtocolInfo: int = 13
export const FileFullDirectoryInfo: int = 14
export const FileFullDirectoryRestartInfo: int = 15
export const FileStorageInfo: int = 16
export const FileAlignmentInfo: int = 17
export const FileIdInfo: int = 18
export const FileIdExtdDirectoryInfo: int = 19
export const FileIdExtdDirectoryRestartInfo: int = 20
export const FileDispositionInfoEx: int = 21
export const FileRenameInfoEx: int = 22
export const FileCaseSensitiveInfo: int = 23
export const FileNormalizedNameInfo: int = 24
export const MaximumFileInfoByHandleClass: int = 25
export import def #extern IsApiSetImplemented(Contract: *char) -> int
export import def #extern #dllimport SetEnvironmentStringsW(NewEnvironment: *ushort) -> int
export import def #extern #dllimport GetStdHandle(nStdHandle: ulong) -> *
export import def #extern #dllimport SetStdHandle(nStdHandle: ulong, hHandle: *) -> int
export import def #extern #dllimport SetStdHandleEx(nStdHandle: ulong, hHandle: *, phPrevValue: **) -> int
export import def #extern #dllimport GetCommandLineA() -> *char
export import def #extern #dllimport GetCommandLineW() -> *ushort
export import def #extern #dllimport GetEnvironmentStrings() -> *char
export import def #extern #dllimport GetEnvironmentStringsW() -> *ushort
export import def #extern #dllimport FreeEnvironmentStringsA(penv: *char) -> int
export import def #extern #dllimport FreeEnvironmentStringsW(penv: *ushort) -> int
export import def #extern #dllimport GetEnvironmentVariableA(lpName: *char, lpBuffer: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetEnvironmentVariableW(lpName: *ushort, lpBuffer: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport SetEnvironmentVariableA(lpName: *char, lpValue: *char) -> int
export import def #extern #dllimport SetEnvironmentVariableW(lpName: *ushort, lpValue: *ushort) -> int
export import def #extern #dllimport ExpandEnvironmentStringsA(lpSrc: *char, lpDst: *char, nSize: ulong) -> ulong
export import def #extern #dllimport ExpandEnvironmentStringsW(lpSrc: *ushort, lpDst: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport SetCurrentDirectoryA(lpPathName: *char) -> int
export import def #extern #dllimport SetCurrentDirectoryW(lpPathName: *ushort) -> int
export import def #extern #dllimport GetCurrentDirectoryA(nBufferLength: ulong, lpBuffer: *char) -> ulong
export import def #extern #dllimport GetCurrentDirectoryW(nBufferLength: ulong, lpBuffer: *ushort) -> ulong
export import def #extern #dllimport SearchPathW(lpPath: *ushort, lpFileName: *ushort, lpExtension: *ushort, nBufferLength: ulong, lpBuffer: *ushort, lpFilePart: **ushort) -> ulong
export import def #extern #dllimport SearchPathA(lpPath: *char, lpFileName: *char, lpExtension: *char, nBufferLength: ulong, lpBuffer: *char, lpFilePart: **char) -> ulong
export import def #extern #dllimport NeedCurrentDirectoryForExePathA(ExeName: *char) -> int
export import def #extern #dllimport NeedCurrentDirectoryForExePathW(ExeName: *ushort) -> int
export import def #extern #dllimport CompareFileTime(lpFileTime1: *s__FILETIME, lpFileTime2: *s__FILETIME) -> long
export import def #extern #dllimport CreateDirectoryA(lpPathName: *char, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateDirectoryW(lpPathName: *ushort, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateFileA(lpFileName: *char, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *) -> *
export import def #extern #dllimport CreateFileW(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *) -> *
export import def #extern #dllimport DefineDosDeviceW(dwFlags: ulong, lpDeviceName: *ushort, lpTargetPath: *ushort) -> int
export import def #extern #dllimport DeleteFileA(lpFileName: *char) -> int
export import def #extern #dllimport DeleteFileW(lpFileName: *ushort) -> int
export import def #extern #dllimport DeleteVolumeMountPointW(lpszVolumeMountPoint: *ushort) -> int
export import def #extern #dllimport FileTimeToLocalFileTime(lpFileTime: *s__FILETIME, lpLocalFileTime: *s__FILETIME) -> int
export import def #extern #dllimport FindClose(hFindFile: *) -> int
export import def #extern #dllimport FindCloseChangeNotification(hChangeHandle: *) -> int
export import def #extern #dllimport FindFirstChangeNotificationA(lpPathName: *char, bWatchSubtree: int, dwNotifyFilter: ulong) -> *
export import def #extern #dllimport FindFirstChangeNotificationW(lpPathName: *ushort, bWatchSubtree: int, dwNotifyFilter: ulong) -> *
export import def #extern #dllimport FindFirstFileA(lpFileName: *char, lpFindFileData: *s__WIN32_FIND_DATAA) -> *
export import def #extern #dllimport FindFirstFileW(lpFileName: *ushort, lpFindFileData: *s__WIN32_FIND_DATAW) -> *
export import def #extern #dllimport FindFirstFileExA(lpFileName: *char, fInfoLevelId: e__FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: e__FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong) -> *
export import def #extern #dllimport FindFirstFileExW(lpFileName: *ushort, fInfoLevelId: e__FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: e__FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong) -> *
export import def #extern #dllimport FindFirstVolumeW(lpszVolumeName: *ushort, cchBufferLength: ulong) -> *
export import def #extern #dllimport FindNextChangeNotification(hChangeHandle: *) -> int
export import def #extern #dllimport FindNextFileA(hFindFile: *, lpFindFileData: *s__WIN32_FIND_DATAA) -> int
export import def #extern #dllimport FindNextFileW(hFindFile: *, lpFindFileData: *s__WIN32_FIND_DATAW) -> int
export import def #extern #dllimport FindNextVolumeW(hFindVolume: *, lpszVolumeName: *ushort, cchBufferLength: ulong) -> int
export import def #extern #dllimport FindVolumeClose(hFindVolume: *) -> int
export import def #extern #dllimport FlushFileBuffers(hFile: *) -> int
export import def #extern #dllimport GetDiskFreeSpaceA(lpRootPathName: *char, lpSectorsPerCluster: *ulong, lpBytesPerSector: *ulong, lpNumberOfFreeClusters: *ulong, lpTotalNumberOfClusters: *ulong) -> int
export import def #extern #dllimport GetDiskFreeSpaceW(lpRootPathName: *ushort, lpSectorsPerCluster: *ulong, lpBytesPerSector: *ulong, lpNumberOfFreeClusters: *ulong, lpTotalNumberOfClusters: *ulong) -> int
export import def #extern #dllimport GetDiskFreeSpaceExA(lpDirectoryName: *char, lpFreeBytesAvailableToCaller: *u__ULARGE_INTEGER, lpTotalNumberOfBytes: *u__ULARGE_INTEGER, lpTotalNumberOfFreeBytes: *u__ULARGE_INTEGER) -> int
export import def #extern #dllimport GetDiskFreeSpaceExW(lpDirectoryName: *ushort, lpFreeBytesAvailableToCaller: *u__ULARGE_INTEGER, lpTotalNumberOfBytes: *u__ULARGE_INTEGER, lpTotalNumberOfFreeBytes: *u__ULARGE_INTEGER) -> int
export import def #extern #dllimport GetDiskSpaceInformationA(rootPath: *char, diskSpaceInfo: *s_DISK_SPACE_INFORMATION) -> long
export import def #extern #dllimport GetDiskSpaceInformationW(rootPath: *ushort, diskSpaceInfo: *s_DISK_SPACE_INFORMATION) -> long
export import def #extern #dllimport GetDriveTypeA(lpRootPathName: *char) -> uint
export import def #extern #dllimport GetDriveTypeW(lpRootPathName: *ushort) -> uint
export import def #extern #dllimport GetFileAttributesA(lpFileName: *char) -> ulong
export import def #extern #dllimport GetFileAttributesW(lpFileName: *ushort) -> ulong
export import def #extern #dllimport GetFileAttributesExA(lpFileName: *char, fInfoLevelId: e__GET_FILEEX_INFO_LEVELS, lpFileInformation: *) -> int
export import def #extern #dllimport GetFileAttributesExW(lpFileName: *ushort, fInfoLevelId: e__GET_FILEEX_INFO_LEVELS, lpFileInformation: *) -> int
export import def #extern #dllimport GetFileInformationByHandle(hFile: *, lpFileInformation: *s__BY_HANDLE_FILE_INFORMATION) -> int
export import def #extern #dllimport GetFileSize(hFile: *, lpFileSizeHigh: *ulong) -> ulong
export import def #extern #dllimport GetFileSizeEx(hFile: *, lpFileSize: *u__LARGE_INTEGER) -> int
export import def #extern #dllimport GetFileType(hFile: *) -> ulong
export import def #extern #dllimport GetFinalPathNameByHandleA(hFile: *, lpszFilePath: *char, cchFilePath: ulong, dwFlags: ulong) -> ulong
export import def #extern #dllimport GetFinalPathNameByHandleW(hFile: *, lpszFilePath: *ushort, cchFilePath: ulong, dwFlags: ulong) -> ulong
export import def #extern #dllimport GetFileTime(hFile: *, lpCreationTime: *s__FILETIME, lpLastAccessTime: *s__FILETIME, lpLastWriteTime: *s__FILETIME) -> int
export import def #extern #dllimport GetFullPathNameW(lpFileName: *ushort, nBufferLength: ulong, lpBuffer: *ushort, lpFilePart: **ushort) -> ulong
export import def #extern #dllimport GetFullPathNameA(lpFileName: *char, nBufferLength: ulong, lpBuffer: *char, lpFilePart: **char) -> ulong
export import def #extern #dllimport GetLogicalDrives() -> ulong
export import def #extern #dllimport GetLogicalDriveStringsW(nBufferLength: ulong, lpBuffer: *ushort) -> ulong
export import def #extern #dllimport GetLongPathNameA(lpszShortPath: *char, lpszLongPath: *char, cchBuffer: ulong) -> ulong
export import def #extern #dllimport GetLongPathNameW(lpszShortPath: *ushort, lpszLongPath: *ushort, cchBuffer: ulong) -> ulong
export import def #extern #dllimport GetShortPathNameW(lpszLongPath: *ushort, lpszShortPath: *ushort, cchBuffer: ulong) -> ulong
export import def #extern #dllimport GetTempFileNameW(lpPathName: *ushort, lpPrefixString: *ushort, uUnique: uint, lpTempFileName: *ushort) -> uint
export import def #extern #dllimport GetVolumeInformationByHandleW(hFile: *, lpVolumeNameBuffer: *ushort, nVolumeNameSize: ulong, lpVolumeSerialNumber: *ulong, lpMaximumComponentLength: *ulong, lpFileSystemFlags: *ulong, lpFileSystemNameBuffer: *ushort, nFileSystemNameSize: ulong) -> int
export import def #extern #dllimport GetVolumeInformationW(lpRootPathName: *ushort, lpVolumeNameBuffer: *ushort, nVolumeNameSize: ulong, lpVolumeSerialNumber: *ulong, lpMaximumComponentLength: *ulong, lpFileSystemFlags: *ulong, lpFileSystemNameBuffer: *ushort, nFileSystemNameSize: ulong) -> int
export import def #extern #dllimport GetVolumePathNameW(lpszFileName: *ushort, lpszVolumePathName: *ushort, cchBufferLength: ulong) -> int
export import def #extern #dllimport LocalFileTimeToFileTime(lpLocalFileTime: *s__FILETIME, lpFileTime: *s__FILETIME) -> int
export import def #extern #dllimport LockFile(hFile: *, dwFileOffsetLow: ulong, dwFileOffsetHigh: ulong, nNumberOfBytesToLockLow: ulong, nNumberOfBytesToLockHigh: ulong) -> int
export import def #extern #dllimport LockFileEx(hFile: *, dwFlags: ulong, dwReserved: ulong, nNumberOfBytesToLockLow: ulong, nNumberOfBytesToLockHigh: ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport QueryDosDeviceW(lpDeviceName: *ushort, lpTargetPath: *ushort, ucchMax: ulong) -> ulong
export import def #extern #dllimport ReadFile(hFile: *, lpBuffer: *, nNumberOfBytesToRead: ulong, lpNumberOfBytesRead: *ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport ReadFileEx(hFile: *, lpBuffer: *, nNumberOfBytesToRead: ulong, lpOverlapped: *s__OVERLAPPED, lpCompletionRoutine: def (ulong, ulong, *s__OVERLAPPED) -> ()) -> int
export import def #extern #dllimport ReadFileScatter(hFile: *, aSegmentArray: *u__FILE_SEGMENT_ELEMENT, nNumberOfBytesToRead: ulong, lpReserved: *ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport RemoveDirectoryA(lpPathName: *char) -> int
export import def #extern #dllimport RemoveDirectoryW(lpPathName: *ushort) -> int
export import def #extern #dllimport SetEndOfFile(hFile: *) -> int
export import def #extern #dllimport SetFileAttributesA(lpFileName: *char, dwFileAttributes: ulong) -> int
export import def #extern #dllimport SetFileAttributesW(lpFileName: *ushort, dwFileAttributes: ulong) -> int
export import def #extern #dllimport SetFileInformationByHandle(hFile: *, FileInformationClass: e__FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: *, dwBufferSize: ulong) -> int
export import def #extern #dllimport SetFilePointer(hFile: *, lDistanceToMove: long, lpDistanceToMoveHigh: *long, dwMoveMethod: ulong) -> ulong
export import def #extern #dllimport SetFilePointerEx(hFile: *, liDistanceToMove: u__LARGE_INTEGER, lpNewFilePointer: *u__LARGE_INTEGER, dwMoveMethod: ulong) -> int
export import def #extern #dllimport SetFileTime(hFile: *, lpCreationTime: *s__FILETIME, lpLastAccessTime: *s__FILETIME, lpLastWriteTime: *s__FILETIME) -> int
export import def #extern #dllimport SetFileValidData(hFile: *, ValidDataLength: int64) -> int
export import def #extern #dllimport UnlockFile(hFile: *, dwFileOffsetLow: ulong, dwFileOffsetHigh: ulong, nNumberOfBytesToUnlockLow: ulong, nNumberOfBytesToUnlockHigh: ulong) -> int
export import def #extern #dllimport UnlockFileEx(hFile: *, dwReserved: ulong, nNumberOfBytesToUnlockLow: ulong, nNumberOfBytesToUnlockHigh: ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport WriteFile(hFile: *, lpBuffer: *, nNumberOfBytesToWrite: ulong, lpNumberOfBytesWritten: *ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport WriteFileEx(hFile: *, lpBuffer: *, nNumberOfBytesToWrite: ulong, lpOverlapped: *s__OVERLAPPED, lpCompletionRoutine: def (ulong, ulong, *s__OVERLAPPED) -> ()) -> int
export import def #extern #dllimport WriteFileGather(hFile: *, aSegmentArray: *u__FILE_SEGMENT_ELEMENT, nNumberOfBytesToWrite: ulong, lpReserved: *ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport GetTempPathW(nBufferLength: ulong, lpBuffer: *ushort) -> ulong
export import def #extern #dllimport GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint: *ushort, lpszVolumeName: *ushort, cchBufferLength: ulong) -> int
export import def #extern #dllimport GetVolumePathNamesForVolumeNameW(lpszVolumeName: *ushort, lpszVolumePathNames: *ushort, cchBufferLength: ulong, lpcchReturnLength: *ulong) -> int
export import def #extern #dllimport CreateFile2(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, dwCreationDisposition: ulong, pCreateExParams: *s__CREATEFILE2_EXTENDED_PARAMETERS) -> *
export import def #extern #dllimport SetFileIoOverlappedRange(FileHandle: *, OverlappedRangeStart: *uint8, Length: ulong) -> int
export import def #extern #dllimport GetCompressedFileSizeA(lpFileName: *char, lpFileSizeHigh: *ulong) -> ulong
export import def #extern #dllimport GetCompressedFileSizeW(lpFileName: *ushort, lpFileSizeHigh: *ulong) -> ulong
export const FindStreamInfoStandard: int = 0
export const FindStreamInfoMaxInfoLevel: int = 1
export import def #extern #dllimport FindFirstStreamW(lpFileName: *ushort, InfoLevel: e__STREAM_INFO_LEVELS, lpFindStreamData: *, dwFlags: ulong) -> *
export import def #extern #dllimport FindNextStreamW(hFindStream: *, lpFindStreamData: *) -> int
export import def #extern #dllimport AreFileApisANSI() -> int
export import def #extern #dllimport GetTempPathA(nBufferLength: ulong, lpBuffer: *char) -> ulong
export import def #extern #dllimport FindFirstFileNameW(lpFileName: *ushort, dwFlags: ulong, StringLength: *ulong, LinkName: *ushort) -> *
export import def #extern #dllimport FindNextFileNameW(hFindStream: *, StringLength: *ulong, LinkName: *ushort) -> int
export import def #extern #dllimport GetVolumeInformationA(lpRootPathName: *char, lpVolumeNameBuffer: *char, nVolumeNameSize: ulong, lpVolumeSerialNumber: *ulong, lpMaximumComponentLength: *ulong, lpFileSystemFlags: *ulong, lpFileSystemNameBuffer: *char, nFileSystemNameSize: ulong) -> int
export import def #extern #dllimport GetTempFileNameA(lpPathName: *char, lpPrefixString: *char, uUnique: uint, lpTempFileName: *char) -> uint
export import def #extern #dllimport SetFileApisToOEM()
export import def #extern #dllimport SetFileApisToANSI()
export import def #extern #dllimport CopyFileFromAppW(lpExistingFileName: *ushort, lpNewFileName: *ushort, bFailIfExists: int) -> int
export import def #extern #dllimport CreateDirectoryFromAppW(lpPathName: *ushort, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateFileFromAppW(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *) -> *
export import def #extern #dllimport CreateFile2FromAppW(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, dwCreationDisposition: ulong, pCreateExParams: *s__CREATEFILE2_EXTENDED_PARAMETERS) -> *
export import def #extern #dllimport DeleteFileFromAppW(lpFileName: *ushort) -> int
export import def #extern #dllimport FindFirstFileExFromAppW(lpFileName: *ushort, fInfoLevelId: e__FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: e__FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong) -> *
export import def #extern #dllimport GetFileAttributesExFromAppW(lpFileName: *ushort, fInfoLevelId: e__GET_FILEEX_INFO_LEVELS, lpFileInformation: *) -> int
export import def #extern #dllimport MoveFileFromAppW(lpExistingFileName: *ushort, lpNewFileName: *ushort) -> int
export import def #extern #dllimport RemoveDirectoryFromAppW(lpPathName: *ushort) -> int
export import def #extern #dllimport ReplaceFileFromAppW(lpReplacedFileName: *ushort, lpReplacementFileName: *ushort, lpBackupFileName: *ushort, dwReplaceFlags: ulong, lpExclude: *, lpReserved: *) -> int
export import def #extern #dllimport SetFileAttributesFromAppW(lpFileName: *ushort, dwFileAttributes: ulong) -> int
export import def #extern #dllimport IsDebuggerPresent() -> int
export import def #extern #dllimport DebugBreak()
export import def #extern #dllimport OutputDebugStringA(lpOutputString: *char)
export import def #extern #dllimport OutputDebugStringW(lpOutputString: *ushort)
export import def #extern #dllimport ContinueDebugEvent(dwProcessId: ulong, dwThreadId: ulong, dwContinueStatus: ulong) -> int
export import def #extern #dllimport WaitForDebugEvent(lpDebugEvent: *s__DEBUG_EVENT, dwMilliseconds: ulong) -> int
export import def #extern #dllimport DebugActiveProcess(dwProcessId: ulong) -> int
export import def #extern #dllimport DebugActiveProcessStop(dwProcessId: ulong) -> int
export import def #extern #dllimport CheckRemoteDebuggerPresent(hProcess: *, pbDebuggerPresent: *int) -> int
export import def #extern #dllimport WaitForDebugEventEx(lpDebugEvent: *s__DEBUG_EVENT, dwMilliseconds: ulong) -> int
export import def #extern #dllimport EncodePointer(Ptr: *) -> *
export import def #extern #dllimport DecodePointer(Ptr: *) -> *
export import def #extern #dllimport EncodeSystemPointer(Ptr: *) -> *
export import def #extern #dllimport DecodeSystemPointer(Ptr: *) -> *
export import def #extern #dllimport EncodeRemotePointer(ProcessHandle: *, Ptr: *, EncodedPtr: **) -> long
export import def #extern #dllimport DecodeRemotePointer(ProcessHandle: *, Ptr: *, DecodedPtr: **) -> long
export import def #extern #dllimport Beep(dwFreq: ulong, dwDuration: ulong) -> int
export import def #extern #dllimport CloseHandle(hObject: *) -> int
export import def #extern #dllimport DuplicateHandle(hSourceProcessHandle: *, hSourceHandle: *, hTargetProcessHandle: *, lpTargetHandle: **, dwDesiredAccess: ulong, bInheritHandle: int, dwOptions: ulong) -> int
export import def #extern #dllimport CompareObjectHandles(hFirstObjectHandle: *, hSecondObjectHandle: *) -> int
export import def #extern #dllimport GetHandleInformation(hObject: *, lpdwFlags: *ulong) -> int
export import def #extern #dllimport SetHandleInformation(hObject: *, dwMask: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport RaiseException(dwExceptionCode: ulong, dwExceptionFlags: ulong, nNumberOfArguments: ulong, lpArguments: *uint64)
export import def #extern #dllimport UnhandledExceptionFilter(ExceptionInfo: *s__EXCEPTION_POINTERS) -> long
export import def #extern #dllimport SetUnhandledExceptionFilter(lpTopLevelExceptionFilter: def (*s__EXCEPTION_POINTERS) -> (long)) -> def (*s__EXCEPTION_POINTERS) -> (long)
export import def #extern #dllimport GetLastError() -> ulong
export import def #extern #dllimport SetLastError(dwErrCode: ulong)
export import def #extern #dllimport GetErrorMode() -> uint
export import def #extern #dllimport SetErrorMode(uMode: uint) -> uint
export import def #extern #dllimport AddVectoredExceptionHandler(First: ulong, Handler: def (*s__EXCEPTION_POINTERS) -> (long)) -> *
export import def #extern #dllimport RemoveVectoredExceptionHandler(Handle: *) -> ulong
export import def #extern #dllimport AddVectoredContinueHandler(First: ulong, Handler: def (*s__EXCEPTION_POINTERS) -> (long)) -> *
export import def #extern #dllimport RemoveVectoredContinueHandler(Handle: *) -> ulong
export import def #extern #dllimport RaiseFailFastException(pExceptionRecord: *s__EXCEPTION_RECORD, pContextRecord: *s__CONTEXT, dwFlags: ulong)
export import def #extern #dllimport FatalAppExitA(uAction: uint, lpMessageText: *char)
export import def #extern #dllimport FatalAppExitW(uAction: uint, lpMessageText: *ushort)
export import def #extern #dllimport GetThreadErrorMode() -> ulong
export import def #extern #dllimport SetThreadErrorMode(dwNewMode: ulong, lpOldMode: *ulong) -> int
export import def #extern #dllimport TerminateProcessOnMemoryExhaustion(FailedAllocationSize: uint64)
export import def #extern #dllimport FlsAlloc(lpCallback: def (*) -> ()) -> ulong
export import def #extern #dllimport FlsGetValue(dwFlsIndex: ulong) -> *
export import def #extern #dllimport FlsSetValue(dwFlsIndex: ulong, lpFlsData: *) -> int
export import def #extern #dllimport FlsFree(dwFlsIndex: ulong) -> int
export import def #extern #dllimport IsThreadAFiber() -> int
export import def #extern #dllimport CreatePipe(hReadPipe: **, hWritePipe: **, lpPipeAttributes: *s__SECURITY_ATTRIBUTES, nSize: ulong) -> int
export import def #extern #dllimport ConnectNamedPipe(hNamedPipe: *, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport DisconnectNamedPipe(hNamedPipe: *) -> int
export import def #extern #dllimport SetNamedPipeHandleState(hNamedPipe: *, lpMode: *ulong, lpMaxCollectionCount: *ulong, lpCollectDataTimeout: *ulong) -> int
export import def #extern #dllimport PeekNamedPipe(hNamedPipe: *, lpBuffer: *, nBufferSize: ulong, lpBytesRead: *ulong, lpTotalBytesAvail: *ulong, lpBytesLeftThisMessage: *ulong) -> int
export import def #extern #dllimport TransactNamedPipe(hNamedPipe: *, lpInBuffer: *, nInBufferSize: ulong, lpOutBuffer: *, nOutBufferSize: ulong, lpBytesRead: *ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport CreateNamedPipeW(lpName: *ushort, dwOpenMode: ulong, dwPipeMode: ulong, nMaxInstances: ulong, nOutBufferSize: ulong, nInBufferSize: ulong, nDefaultTimeOut: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> *
export import def #extern #dllimport WaitNamedPipeW(lpNamedPipeName: *ushort, nTimeOut: ulong) -> int
export import def #extern #dllimport GetNamedPipeClientComputerNameW(Pipe: *, ClientComputerName: *ushort, ClientComputerNameLength: ulong) -> int
export import def #extern #dllimport ImpersonateNamedPipeClient(hNamedPipe: *) -> int
export import def #extern #dllimport GetNamedPipeInfo(hNamedPipe: *, lpFlags: *ulong, lpOutBufferSize: *ulong, lpInBufferSize: *ulong, lpMaxInstances: *ulong) -> int
export import def #extern #dllimport GetNamedPipeHandleStateW(hNamedPipe: *, lpState: *ulong, lpCurInstances: *ulong, lpMaxCollectionCount: *ulong, lpCollectDataTimeout: *ulong, lpUserName: *ushort, nMaxUserNameSize: ulong) -> int
export import def #extern #dllimport CallNamedPipeW(lpNamedPipeName: *ushort, lpInBuffer: *, nInBufferSize: ulong, lpOutBuffer: *, nOutBufferSize: ulong, lpBytesRead: *ulong, nTimeOut: ulong) -> int
export import def #extern #dllimport QueryPerformanceCounter(lpPerformanceCount: *u__LARGE_INTEGER) -> int
export import def #extern #dllimport QueryPerformanceFrequency(lpFrequency: *u__LARGE_INTEGER) -> int
export import def #extern #dllimport HeapCreate(flOptions: ulong, dwInitialSize: uint64, dwMaximumSize: uint64) -> *
export import def #extern #dllimport HeapDestroy(hHeap: *) -> int
export import def #extern #dllimport HeapAlloc(hHeap: *, dwFlags: ulong, dwBytes: uint64) -> *
export import def #extern #dllimport HeapReAlloc(hHeap: *, dwFlags: ulong, lpMem: *, dwBytes: uint64) -> *
export import def #extern #dllimport HeapFree(hHeap: *, dwFlags: ulong, lpMem: *) -> int
export import def #extern #dllimport HeapSize(hHeap: *, dwFlags: ulong, lpMem: *) -> uint64
export import def #extern #dllimport GetProcessHeap() -> *
export import def #extern #dllimport HeapCompact(hHeap: *, dwFlags: ulong) -> uint64
export import def #extern #dllimport HeapSetInformation(HeapHandle: *, HeapInformationClass: e__HEAP_INFORMATION_CLASS, HeapInformation: *, HeapInformationLength: uint64) -> int
export import def #extern #dllimport HeapValidate(hHeap: *, dwFlags: ulong, lpMem: *) -> int
export import def #extern HeapSummary(hHeap: *, dwFlags: ulong, lpSummary: *s__HEAP_SUMMARY) -> int
export import def #extern #dllimport GetProcessHeaps(NumberOfHeaps: ulong, ProcessHeaps: **) -> ulong
export import def #extern #dllimport HeapLock(hHeap: *) -> int
export import def #extern #dllimport HeapUnlock(hHeap: *) -> int
export import def #extern #dllimport HeapWalk(hHeap: *, lpEntry: *s__PROCESS_HEAP_ENTRY) -> int
export import def #extern #dllimport HeapQueryInformation(HeapHandle: *, HeapInformationClass: e__HEAP_INFORMATION_CLASS, HeapInformation: *, HeapInformationLength: uint64, ReturnLength: *uint64) -> int
export import def #extern #dllimport CreateIoCompletionPort(FileHandle: *, ExistingCompletionPort: *, CompletionKey: uint64, NumberOfConcurrentThreads: ulong) -> *
export import def #extern #dllimport GetQueuedCompletionStatus(CompletionPort: *, lpNumberOfBytesTransferred: *ulong, lpCompletionKey: *uint64, lpOverlapped: **s__OVERLAPPED, dwMilliseconds: ulong) -> int
export import def #extern #dllimport GetQueuedCompletionStatusEx(CompletionPort: *, lpCompletionPortEntries: *s__OVERLAPPED_ENTRY, ulCount: ulong, ulNumEntriesRemoved: *ulong, dwMilliseconds: ulong, fAlertable: int) -> int
export import def #extern #dllimport PostQueuedCompletionStatus(CompletionPort: *, dwNumberOfBytesTransferred: ulong, dwCompletionKey: uint64, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport DeviceIoControl(hDevice: *, dwIoControlCode: ulong, lpInBuffer: *, nInBufferSize: ulong, lpOutBuffer: *, nOutBufferSize: ulong, lpBytesReturned: *ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport GetOverlappedResult(hFile: *, lpOverlapped: *s__OVERLAPPED, lpNumberOfBytesTransferred: *ulong, bWait: int) -> int
export import def #extern #dllimport CancelIoEx(hFile: *, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport CancelIo(hFile: *) -> int
export import def #extern #dllimport GetOverlappedResultEx(hFile: *, lpOverlapped: *s__OVERLAPPED, lpNumberOfBytesTransferred: *ulong, dwMilliseconds: ulong, bAlertable: int) -> int
export import def #extern #dllimport CancelSynchronousIo(hThread: *) -> int
export import def #extern #dllimport InitializeSRWLock(SRWLock: *s__RTL_SRWLOCK)
export import def #extern #dllimport ReleaseSRWLockExclusive(SRWLock: *s__RTL_SRWLOCK)
export import def #extern #dllimport ReleaseSRWLockShared(SRWLock: *s__RTL_SRWLOCK)
export import def #extern #dllimport AcquireSRWLockExclusive(SRWLock: *s__RTL_SRWLOCK)
export import def #extern #dllimport AcquireSRWLockShared(SRWLock: *s__RTL_SRWLOCK)
export import def #extern #dllimport TryAcquireSRWLockExclusive(SRWLock: *s__RTL_SRWLOCK) -> uint8
export import def #extern #dllimport TryAcquireSRWLockShared(SRWLock: *s__RTL_SRWLOCK) -> uint8
export import def #extern #dllimport InitializeCriticalSection(lpCriticalSection: *s__RTL_CRITICAL_SECTION)
export import def #extern #dllimport EnterCriticalSection(lpCriticalSection: *s__RTL_CRITICAL_SECTION)
export import def #extern #dllimport LeaveCriticalSection(lpCriticalSection: *s__RTL_CRITICAL_SECTION)
export import def #extern #dllimport InitializeCriticalSectionAndSpinCount(lpCriticalSection: *s__RTL_CRITICAL_SECTION, dwSpinCount: ulong) -> int
export import def #extern #dllimport InitializeCriticalSectionEx(lpCriticalSection: *s__RTL_CRITICAL_SECTION, dwSpinCount: ulong, Flags: ulong) -> int
export import def #extern #dllimport SetCriticalSectionSpinCount(lpCriticalSection: *s__RTL_CRITICAL_SECTION, dwSpinCount: ulong) -> ulong
export import def #extern #dllimport TryEnterCriticalSection(lpCriticalSection: *s__RTL_CRITICAL_SECTION) -> int
export import def #extern #dllimport DeleteCriticalSection(lpCriticalSection: *s__RTL_CRITICAL_SECTION)
export import def #extern #dllimport InitOnceInitialize(InitOnce: *u__RTL_RUN_ONCE)
export import def #extern #dllimport InitOnceExecuteOnce(InitOnce: *u__RTL_RUN_ONCE, InitFn: def (*u__RTL_RUN_ONCE, *, **) -> (int), Parameter: *, Context: **) -> int
export import def #extern #dllimport InitOnceBeginInitialize(lpInitOnce: *u__RTL_RUN_ONCE, dwFlags: ulong, fPending: *int, lpContext: **) -> int
export import def #extern #dllimport InitOnceComplete(lpInitOnce: *u__RTL_RUN_ONCE, dwFlags: ulong, lpContext: *) -> int
export import def #extern #dllimport InitializeConditionVariable(ConditionVariable: *s__RTL_CONDITION_VARIABLE)
export import def #extern #dllimport WakeConditionVariable(ConditionVariable: *s__RTL_CONDITION_VARIABLE)
export import def #extern #dllimport WakeAllConditionVariable(ConditionVariable: *s__RTL_CONDITION_VARIABLE)
export import def #extern #dllimport SleepConditionVariableCS(ConditionVariable: *s__RTL_CONDITION_VARIABLE, CriticalSection: *s__RTL_CRITICAL_SECTION, dwMilliseconds: ulong) -> int
export import def #extern #dllimport SleepConditionVariableSRW(ConditionVariable: *s__RTL_CONDITION_VARIABLE, SRWLock: *s__RTL_SRWLOCK, dwMilliseconds: ulong, Flags: ulong) -> int
export import def #extern #dllimport SetEvent(hEvent: *) -> int
export import def #extern #dllimport ResetEvent(hEvent: *) -> int
export import def #extern #dllimport ReleaseSemaphore(hSemaphore: *, lReleaseCount: long, lpPreviousCount: *long) -> int
export import def #extern #dllimport ReleaseMutex(hMutex: *) -> int
export import def #extern #dllimport WaitForSingleObject(hHandle: *, dwMilliseconds: ulong) -> ulong
export import def #extern #dllimport SleepEx(dwMilliseconds: ulong, bAlertable: int) -> ulong
export import def #extern #dllimport WaitForSingleObjectEx(hHandle: *, dwMilliseconds: ulong, bAlertable: int) -> ulong
export import def #extern #dllimport WaitForMultipleObjectsEx(nCount: ulong, lpHandles: **, bWaitAll: int, dwMilliseconds: ulong, bAlertable: int) -> ulong
export import def #extern #dllimport CreateMutexA(lpMutexAttributes: *s__SECURITY_ATTRIBUTES, bInitialOwner: int, lpName: *char) -> *
export import def #extern #dllimport CreateMutexW(lpMutexAttributes: *s__SECURITY_ATTRIBUTES, bInitialOwner: int, lpName: *ushort) -> *
export import def #extern #dllimport OpenMutexW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport CreateEventA(lpEventAttributes: *s__SECURITY_ATTRIBUTES, bManualReset: int, bInitialState: int, lpName: *char) -> *
export import def #extern #dllimport CreateEventW(lpEventAttributes: *s__SECURITY_ATTRIBUTES, bManualReset: int, bInitialState: int, lpName: *ushort) -> *
export import def #extern #dllimport OpenEventA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport OpenEventW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport OpenSemaphoreW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport OpenWaitableTimerW(dwDesiredAccess: ulong, bInheritHandle: int, lpTimerName: *ushort) -> *
export import def #extern SetWaitableTimerEx(hTimer: *, lpDueTime: *u__LARGE_INTEGER, lPeriod: long, pfnCompletionRoutine: def (*, ulong, ulong) -> (), lpArgToCompletionRoutine: *, WakeContext: *s__REASON_CONTEXT, TolerableDelay: ulong) -> int
export import def #extern #dllimport SetWaitableTimer(hTimer: *, lpDueTime: *u__LARGE_INTEGER, lPeriod: long, pfnCompletionRoutine: def (*, ulong, ulong) -> (), lpArgToCompletionRoutine: *, fResume: int) -> int
export import def #extern #dllimport CancelWaitableTimer(hTimer: *) -> int
export import def #extern #dllimport CreateMutexExA(lpMutexAttributes: *s__SECURITY_ATTRIBUTES, lpName: *char, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateMutexExW(lpMutexAttributes: *s__SECURITY_ATTRIBUTES, lpName: *ushort, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateEventExA(lpEventAttributes: *s__SECURITY_ATTRIBUTES, lpName: *char, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateEventExW(lpEventAttributes: *s__SECURITY_ATTRIBUTES, lpName: *ushort, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateSemaphoreExW(lpSemaphoreAttributes: *s__SECURITY_ATTRIBUTES, lInitialCount: long, lMaximumCount: long, lpName: *ushort, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateWaitableTimerExW(lpTimerAttributes: *s__SECURITY_ATTRIBUTES, lpTimerName: *ushort, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern EnterSynchronizationBarrier(lpBarrier: *s__RTL_BARRIER, dwFlags: ulong) -> int
export import def #extern InitializeSynchronizationBarrier(lpBarrier: *s__RTL_BARRIER, lTotalThreads: long, lSpinCount: long) -> int
export import def #extern DeleteSynchronizationBarrier(lpBarrier: *s__RTL_BARRIER) -> int
export import def #extern #dllimport Sleep(dwMilliseconds: ulong)
export import def #extern WaitOnAddress(Address: *, CompareAddress: *, AddressSize: uint64, dwMilliseconds: ulong) -> int
export import def #extern WakeByAddressSingle(Address: *)
export import def #extern WakeByAddressAll(Address: *)
export import def #extern #dllimport SignalObjectAndWait(hObjectToSignal: *, hObjectToWaitOn: *, dwMilliseconds: ulong, bAlertable: int) -> ulong
export import def #extern #dllimport WaitForMultipleObjects(nCount: ulong, lpHandles: **, bWaitAll: int, dwMilliseconds: ulong) -> ulong
export import def #extern #dllimport CreateSemaphoreW(lpSemaphoreAttributes: *s__SECURITY_ATTRIBUTES, lInitialCount: long, lMaximumCount: long, lpName: *ushort) -> *
export import def #extern #dllimport CreateWaitableTimerW(lpTimerAttributes: *s__SECURITY_ATTRIBUTES, bManualReset: int, lpTimerName: *ushort) -> *
export import def #extern #dllimport InitializeSListHead(ListHead: *u__SLIST_HEADER)
export import def #extern #dllimport InterlockedPopEntrySList(ListHead: *u__SLIST_HEADER) -> *s__SLIST_ENTRY
export import def #extern #dllimport InterlockedPushEntrySList(ListHead: *u__SLIST_HEADER, ListEntry: *s__SLIST_ENTRY) -> *s__SLIST_ENTRY
export import def #extern #dllimport InterlockedPushListSListEx(ListHead: *u__SLIST_HEADER, List: *s__SLIST_ENTRY, ListEnd: *s__SLIST_ENTRY, Count: ulong) -> *s__SLIST_ENTRY
export import def #extern #dllimport InterlockedFlushSList(ListHead: *u__SLIST_HEADER) -> *s__SLIST_ENTRY
export import def #extern #dllimport QueryDepthSList(ListHead: *u__SLIST_HEADER) -> ushort
export import def #extern #dllimport QueueUserAPC(pfnAPC: def (uint64) -> (), hThread: *, dwData: uint64) -> ulong
export const QUEUE_USER_APC_FLAGS_NONE: int = 0
export const QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC: int = 1
export const QUEUE_USER_APC_CALLBACK_DATA_CONTEXT: int = 65536
export import def #extern #dllimport GetProcessTimes(hProcess: *, lpCreationTime: *s__FILETIME, lpExitTime: *s__FILETIME, lpKernelTime: *s__FILETIME, lpUserTime: *s__FILETIME) -> int
export import def #extern #dllimport GetCurrentProcess() -> *
export import def #extern #dllimport GetCurrentProcessId() -> ulong
export import def #extern #dllimport ExitProcess(uExitCode: uint)
export import def #extern #dllimport TerminateProcess(hProcess: *, uExitCode: uint) -> int
export import def #extern #dllimport GetExitCodeProcess(hProcess: *, lpExitCode: *ulong) -> int
export import def #extern #dllimport SwitchToThread() -> int
export import def #extern #dllimport CreateThread(lpThreadAttributes: *s__SECURITY_ATTRIBUTES, dwStackSize: uint64, lpStartAddress: def (*) -> (ulong), lpParameter: *, dwCreationFlags: ulong, lpThreadId: *ulong) -> *
export import def #extern #dllimport CreateRemoteThread(hProcess: *, lpThreadAttributes: *s__SECURITY_ATTRIBUTES, dwStackSize: uint64, lpStartAddress: def (*) -> (ulong), lpParameter: *, dwCreationFlags: ulong, lpThreadId: *ulong) -> *
export import def #extern #dllimport GetCurrentThread() -> *
export import def #extern #dllimport GetCurrentThreadId() -> ulong
export import def #extern #dllimport OpenThread(dwDesiredAccess: ulong, bInheritHandle: int, dwThreadId: ulong) -> *
export import def #extern #dllimport SetThreadPriority(hThread: *, nPriority: int) -> int
export import def #extern #dllimport SetThreadPriorityBoost(hThread: *, bDisablePriorityBoost: int) -> int
export import def #extern #dllimport GetThreadPriorityBoost(hThread: *, pDisablePriorityBoost: *int) -> int
export import def #extern #dllimport GetThreadPriority(hThread: *) -> int
export import def #extern #dllimport ExitThread(dwExitCode: ulong)
export import def #extern #dllimport TerminateThread(hThread: *, dwExitCode: ulong) -> int
export import def #extern #dllimport GetExitCodeThread(hThread: *, lpExitCode: *ulong) -> int
export import def #extern #dllimport SuspendThread(hThread: *) -> ulong
export import def #extern #dllimport ResumeThread(hThread: *) -> ulong
export import def #extern #dllimport TlsAlloc() -> ulong
export import def #extern #dllimport TlsGetValue(dwTlsIndex: ulong) -> *
export import def #extern #dllimport TlsSetValue(dwTlsIndex: ulong, lpTlsValue: *) -> int
export import def #extern #dllimport TlsFree(dwTlsIndex: ulong) -> int
export import def #extern #dllimport CreateProcessA(lpApplicationName: *char, lpCommandLine: *char, lpProcessAttributes: *s__SECURITY_ATTRIBUTES, lpThreadAttributes: *s__SECURITY_ATTRIBUTES, bInheritHandles: int, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *char, lpStartupInfo: *s__STARTUPINFOA, lpProcessInformation: *s__PROCESS_INFORMATION) -> int
export import def #extern #dllimport CreateProcessW(lpApplicationName: *ushort, lpCommandLine: *ushort, lpProcessAttributes: *s__SECURITY_ATTRIBUTES, lpThreadAttributes: *s__SECURITY_ATTRIBUTES, bInheritHandles: int, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *ushort, lpStartupInfo: *s__STARTUPINFOW, lpProcessInformation: *s__PROCESS_INFORMATION) -> int
export import def #extern #dllimport SetProcessShutdownParameters(dwLevel: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport GetProcessVersion(ProcessId: ulong) -> ulong
export import def #extern #dllimport GetStartupInfoW(lpStartupInfo: *s__STARTUPINFOW)
export import def #extern #dllimport CreateProcessAsUserW(hToken: *, lpApplicationName: *ushort, lpCommandLine: *ushort, lpProcessAttributes: *s__SECURITY_ATTRIBUTES, lpThreadAttributes: *s__SECURITY_ATTRIBUTES, bInheritHandles: int, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *ushort, lpStartupInfo: *s__STARTUPINFOW, lpProcessInformation: *s__PROCESS_INFORMATION) -> int
export import def #extern GetCurrentProcessToken() -> *
export import def #extern GetCurrentThreadToken() -> *
export import def #extern GetCurrentThreadEffectiveToken() -> *
export import def #extern #dllimport SetThreadToken(Thread: **, Token: *) -> int
export import def #extern #dllimport OpenProcessToken(ProcessHandle: *, DesiredAccess: ulong, TokenHandle: **) -> int
export import def #extern #dllimport OpenThreadToken(ThreadHandle: *, DesiredAccess: ulong, OpenAsSelf: int, TokenHandle: **) -> int
export import def #extern #dllimport SetPriorityClass(hProcess: *, dwPriorityClass: ulong) -> int
export import def #extern #dllimport GetPriorityClass(hProcess: *) -> ulong
export import def #extern #dllimport SetThreadStackGuarantee(StackSizeInBytes: *ulong) -> int
export import def #extern #dllimport ProcessIdToSessionId(dwProcessId: ulong, pSessionId: *ulong) -> int
export import def #extern #dllimport GetProcessId(Process: *) -> ulong
export import def #extern #dllimport GetThreadId(Thread: *) -> ulong
export import def #extern #dllimport FlushProcessWriteBuffers()
export import def #extern #dllimport GetProcessIdOfThread(Thread: *) -> ulong
export import def #extern #dllimport InitializeProcThreadAttributeList(lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST, dwAttributeCount: ulong, dwFlags: ulong, lpSize: *uint64) -> int
export import def #extern #dllimport DeleteProcThreadAttributeList(lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST)
export import def #extern #dllimport UpdateProcThreadAttribute(lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST, dwFlags: ulong, Attribute: uint64, lpValue: *, cbSize: uint64, lpPreviousValue: *, lpReturnSize: *uint64) -> int
export import def #extern #dllimport SetProcessDynamicEHContinuationTargets(Process: *, NumberOfTargets: ushort, Targets: *s__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET) -> int
export import def #extern #dllimport SetProcessDynamicEnforcedCetCompatibleRanges(Process: *, NumberOfRanges: ushort, Ranges: *s__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE) -> int
export import def #extern #dllimport SetProcessAffinityUpdateMode(hProcess: *, dwFlags: ulong) -> int
export import def #extern #dllimport QueryProcessAffinityUpdateMode(hProcess: *, lpdwFlags: *ulong) -> int
export import def #extern #dllimport CreateRemoteThreadEx(hProcess: *, lpThreadAttributes: *s__SECURITY_ATTRIBUTES, dwStackSize: uint64, lpStartAddress: def (*) -> (ulong), lpParameter: *, dwCreationFlags: ulong, lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST, lpThreadId: *ulong) -> *
export import def #extern #dllimport GetCurrentThreadStackLimits(LowLimit: *uint64, HighLimit: *uint64)
export import def #extern #dllimport GetThreadContext(hThread: *, lpContext: *s__CONTEXT) -> int
export import def #extern #dllimport GetProcessMitigationPolicy(hProcess: *, MitigationPolicy: e__PROCESS_MITIGATION_POLICY, lpBuffer: *, dwLength: uint64) -> int
export import def #extern #dllimport SetThreadContext(hThread: *, lpContext: *s__CONTEXT) -> int
export import def #extern #dllimport SetProcessMitigationPolicy(MitigationPolicy: e__PROCESS_MITIGATION_POLICY, lpBuffer: *, dwLength: uint64) -> int
export import def #extern #dllimport FlushInstructionCache(hProcess: *, lpBaseAddress: *, dwSize: uint64) -> int
export import def #extern #dllimport GetThreadTimes(hThread: *, lpCreationTime: *s__FILETIME, lpExitTime: *s__FILETIME, lpKernelTime: *s__FILETIME, lpUserTime: *s__FILETIME) -> int
export import def #extern #dllimport OpenProcess(dwDesiredAccess: ulong, bInheritHandle: int, dwProcessId: ulong) -> *
export import def #extern #dllimport IsProcessorFeaturePresent(ProcessorFeature: ulong) -> int
export import def #extern #dllimport GetProcessHandleCount(hProcess: *, pdwHandleCount: *ulong) -> int
export import def #extern #dllimport GetCurrentProcessorNumber() -> ulong
export import def #extern #dllimport SetThreadIdealProcessorEx(hThread: *, lpIdealProcessor: *s__PROCESSOR_NUMBER, lpPreviousIdealProcessor: *s__PROCESSOR_NUMBER) -> int
export import def #extern #dllimport GetThreadIdealProcessorEx(hThread: *, lpIdealProcessor: *s__PROCESSOR_NUMBER) -> int
export import def #extern #dllimport GetCurrentProcessorNumberEx(ProcNumber: *s__PROCESSOR_NUMBER)
export import def #extern #dllimport GetProcessPriorityBoost(hProcess: *, pDisablePriorityBoost: *int) -> int
export import def #extern #dllimport SetProcessPriorityBoost(hProcess: *, bDisablePriorityBoost: int) -> int
export import def #extern #dllimport GetThreadIOPendingFlag(hThread: *, lpIOIsPending: *int) -> int
export import def #extern #dllimport GetSystemTimes(lpIdleTime: *s__FILETIME, lpKernelTime: *s__FILETIME, lpUserTime: *s__FILETIME) -> int
export const ThreadMemoryPriority: int = 0
export const ThreadAbsoluteCpuPriority: int = 1
export const ThreadDynamicCodePolicy: int = 2
export const ThreadPowerThrottling: int = 3
export const ThreadInformationClassMax: int = 4
export import def #extern #dllimport GetThreadInformation(hThread: *, ThreadInformationClass: e__THREAD_INFORMATION_CLASS, ThreadInformation: *, ThreadInformationSize: ulong) -> int
export import def #extern #dllimport SetThreadInformation(hThread: *, ThreadInformationClass: e__THREAD_INFORMATION_CLASS, ThreadInformation: *, ThreadInformationSize: ulong) -> int
export import def #extern #dllimport IsProcessCritical(hProcess: *, Critical: *int) -> int
export import def #extern #dllimport SetProtectedPolicy(PolicyGuid: *s__GUID, PolicyValue: uint64, OldPolicyValue: *uint64) -> int
export import def #extern #dllimport QueryProtectedPolicy(PolicyGuid: *s__GUID, PolicyValue: *uint64) -> int
export import def #extern #dllimport SetThreadIdealProcessor(hThread: *, dwIdealProcessor: ulong) -> ulong
export const ProcessMemoryPriority: int = 0
export const ProcessMemoryExhaustionInfo: int = 1
export const ProcessAppMemoryInfo: int = 2
export const ProcessInPrivateInfo: int = 3
export const ProcessPowerThrottling: int = 4
export const ProcessReservedValue1: int = 5
export const ProcessTelemetryCoverageInfo: int = 6
export const ProcessProtectionLevelInfo: int = 7
export const ProcessLeapSecondInfo: int = 8
export const ProcessMachineTypeInfo: int = 9
export const ProcessInformationClassMax: int = 10
export const UserEnabled: int = 1
export const KernelEnabled: int = 2
export const Wow64Container: int = 4
export const PMETypeFailFastOnCommitFailure: int = 0
export const PMETypeMax: int = 1
export import def #extern #dllimport SetProcessInformation(hProcess: *, ProcessInformationClass: e__PROCESS_INFORMATION_CLASS, ProcessInformation: *, ProcessInformationSize: ulong) -> int
export import def #extern #dllimport GetProcessInformation(hProcess: *, ProcessInformationClass: e__PROCESS_INFORMATION_CLASS, ProcessInformation: *, ProcessInformationSize: ulong) -> int
export import def #extern GetSystemCpuSetInformation(Information: *s__SYSTEM_CPU_SET_INFORMATION, BufferLength: ulong, ReturnedLength: *ulong, Process: *, Flags: ulong) -> int
export import def #extern GetProcessDefaultCpuSets(Process: *, CpuSetIds: *ulong, CpuSetIdCount: ulong, RequiredIdCount: *ulong) -> int
export import def #extern SetProcessDefaultCpuSets(Process: *, CpuSetIds: *ulong, CpuSetIdCount: ulong) -> int
export import def #extern GetThreadSelectedCpuSets(Thread: *, CpuSetIds: *ulong, CpuSetIdCount: ulong, RequiredIdCount: *ulong) -> int
export import def #extern SetThreadSelectedCpuSets(Thread: *, CpuSetIds: *ulong, CpuSetIdCount: ulong) -> int
export import def #extern #dllimport CreateProcessAsUserA(hToken: *, lpApplicationName: *char, lpCommandLine: *char, lpProcessAttributes: *s__SECURITY_ATTRIBUTES, lpThreadAttributes: *s__SECURITY_ATTRIBUTES, bInheritHandles: int, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *char, lpStartupInfo: *s__STARTUPINFOA, lpProcessInformation: *s__PROCESS_INFORMATION) -> int
export import def #extern #dllimport GetProcessShutdownParameters(lpdwLevel: *ulong, lpdwFlags: *ulong) -> int
export import def #extern #dllimport SetThreadDescription(hThread: *, lpThreadDescription: *ushort) -> long
export import def #extern #dllimport GetThreadDescription(hThread: *, ppszThreadDescription: **ushort) -> long
export import def #extern #dllimport GlobalMemoryStatusEx(lpBuffer: *s__MEMORYSTATUSEX) -> int
export import def #extern #dllimport GetSystemInfo(lpSystemInfo: *s__SYSTEM_INFO)
export import def #extern #dllimport GetSystemTime(lpSystemTime: *s__SYSTEMTIME)
export import def #extern #dllimport GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: *s__FILETIME)
export import def #extern #dllimport GetLocalTime(lpSystemTime: *s__SYSTEMTIME)
export import def #extern #dllimport IsUserCetAvailableInEnvironment(UserCetEnvironment: ulong) -> int
export import def #extern #dllimport GetSystemLeapSecondInformation(Enabled: *int, Flags: *ulong) -> int
export import def #extern #dllimport GetVersion() -> ulong
export import def #extern #dllimport SetLocalTime(lpSystemTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport GetTickCount() -> ulong
export import def #extern #dllimport GetTickCount64() -> uint64
export import def #extern #dllimport GetSystemTimeAdjustment(lpTimeAdjustment: *ulong, lpTimeIncrement: *ulong, lpTimeAdjustmentDisabled: *int) -> int
export import def #extern #dllimport GetSystemTimeAdjustmentPrecise(lpTimeAdjustment: *uint64, lpTimeIncrement: *uint64, lpTimeAdjustmentDisabled: *int) -> int
export import def #extern #dllimport GetSystemDirectoryA(lpBuffer: *char, uSize: uint) -> uint
export import def #extern #dllimport GetSystemDirectoryW(lpBuffer: *ushort, uSize: uint) -> uint
export import def #extern #dllimport GetWindowsDirectoryA(lpBuffer: *char, uSize: uint) -> uint
export import def #extern #dllimport GetWindowsDirectoryW(lpBuffer: *ushort, uSize: uint) -> uint
export import def #extern #dllimport GetSystemWindowsDirectoryA(lpBuffer: *char, uSize: uint) -> uint
export import def #extern #dllimport GetSystemWindowsDirectoryW(lpBuffer: *ushort, uSize: uint) -> uint
export const ComputerNameNetBIOS: int = 0
export const ComputerNameDnsHostname: int = 1
export const ComputerNameDnsDomain: int = 2
export const ComputerNameDnsFullyQualified: int = 3
export const ComputerNamePhysicalNetBIOS: int = 4
export const ComputerNamePhysicalDnsHostname: int = 5
export const ComputerNamePhysicalDnsDomain: int = 6
export const ComputerNamePhysicalDnsFullyQualified: int = 7
export const ComputerNameMax: int = 8
export import def #extern #dllimport GetComputerNameExA(NameType: e__COMPUTER_NAME_FORMAT, lpBuffer: *char, nSize: *ulong) -> int
export import def #extern #dllimport GetComputerNameExW(NameType: e__COMPUTER_NAME_FORMAT, lpBuffer: *ushort, nSize: *ulong) -> int
export import def #extern #dllimport SetComputerNameExW(NameType: e__COMPUTER_NAME_FORMAT, lpBuffer: *ushort) -> int
export import def #extern #dllimport SetSystemTime(lpSystemTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport GetVersionExA(lpVersionInformation: *s__OSVERSIONINFOA) -> int
export import def #extern #dllimport GetVersionExW(lpVersionInformation: *s__OSVERSIONINFOW) -> int
export import def #extern #dllimport GetLogicalProcessorInformation(Buffer: *s__SYSTEM_LOGICAL_PROCESSOR_INFORMATION, ReturnedLength: *ulong) -> int
export import def #extern #dllimport GetLogicalProcessorInformationEx(RelationshipType: e__LOGICAL_PROCESSOR_RELATIONSHIP, Buffer: *s__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, ReturnedLength: *ulong) -> int
export import def #extern #dllimport GetNativeSystemInfo(lpSystemInfo: *s__SYSTEM_INFO)
export import def #extern #dllimport GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime: *s__FILETIME)
export import def #extern #dllimport GetProductInfo(dwOSMajorVersion: ulong, dwOSMinorVersion: ulong, dwSpMajorVersion: ulong, dwSpMinorVersion: ulong, pdwReturnedProductType: *ulong) -> int
export import def #extern #dllimport GetOsSafeBootMode(Flags: *ulong) -> int
export import def #extern #dllimport EnumSystemFirmwareTables(FirmwareTableProviderSignature: ulong, pFirmwareTableEnumBuffer: *, BufferSize: ulong) -> uint
export import def #extern #dllimport GetSystemFirmwareTable(FirmwareTableProviderSignature: ulong, FirmwareTableID: ulong, pFirmwareTableBuffer: *, BufferSize: ulong) -> uint
export import def #extern #dllimport DnsHostnameToComputerNameExW(Hostname: *ushort, ComputerName: *ushort, nSize: *ulong) -> int
export import def #extern #dllimport GetPhysicallyInstalledSystemMemory(TotalMemoryInKilobytes: *uint64) -> int
export import def #extern #dllimport SetComputerNameEx2W(NameType: e__COMPUTER_NAME_FORMAT, Flags: ulong, lpBuffer: *ushort) -> int
export import def #extern #dllimport SetSystemTimeAdjustment(dwTimeAdjustment: ulong, bTimeAdjustmentDisabled: int) -> int
export import def #extern #dllimport SetSystemTimeAdjustmentPrecise(dwTimeAdjustment: uint64, bTimeAdjustmentDisabled: int) -> int
export import def #extern #dllimport InstallELAMCertificateInfo(ELAMFile: *) -> int
export import def #extern #dllimport GetProcessorSystemCycleTime(Group: ushort, Buffer: *s__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, ReturnedLength: *ulong) -> int
export import def #extern #dllimport GetOsManufacturingMode(pbEnabled: *int) -> int
export import def #extern #dllimport GetIntegratedDisplaySize(sizeInInches: *double) -> long
export import def #extern #dllimport SetComputerNameA(lpComputerName: *char) -> int
export import def #extern #dllimport SetComputerNameW(lpComputerName: *ushort) -> int
export import def #extern #dllimport SetComputerNameExA(NameType: e__COMPUTER_NAME_FORMAT, lpBuffer: *char) -> int
export import def #extern #dllimport VirtualAlloc(lpAddress: *, dwSize: uint64, flAllocationType: ulong, flProtect: ulong) -> *
export import def #extern #dllimport VirtualProtect(lpAddress: *, dwSize: uint64, flNewProtect: ulong, lpflOldProtect: *ulong) -> int
export import def #extern #dllimport VirtualFree(lpAddress: *, dwSize: uint64, dwFreeType: ulong) -> int
export import def #extern #dllimport VirtualQuery(lpAddress: *, lpBuffer: *s__MEMORY_BASIC_INFORMATION, dwLength: uint64) -> uint64
export import def #extern #dllimport VirtualAllocEx(hProcess: *, lpAddress: *, dwSize: uint64, flAllocationType: ulong, flProtect: ulong) -> *
export import def #extern #dllimport VirtualProtectEx(hProcess: *, lpAddress: *, dwSize: uint64, flNewProtect: ulong, lpflOldProtect: *ulong) -> int
export import def #extern #dllimport VirtualQueryEx(hProcess: *, lpAddress: *, lpBuffer: *s__MEMORY_BASIC_INFORMATION, dwLength: uint64) -> uint64
export import def #extern #dllimport ReadProcessMemory(hProcess: *, lpBaseAddress: *, lpBuffer: *, nSize: uint64, lpNumberOfBytesRead: *uint64) -> int
export import def #extern #dllimport WriteProcessMemory(hProcess: *, lpBaseAddress: *, lpBuffer: *, nSize: uint64, lpNumberOfBytesWritten: *uint64) -> int
export import def #extern #dllimport CreateFileMappingW(hFile: *, lpFileMappingAttributes: *s__SECURITY_ATTRIBUTES, flProtect: ulong, dwMaximumSizeHigh: ulong, dwMaximumSizeLow: ulong, lpName: *ushort) -> *
export import def #extern #dllimport OpenFileMappingW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport MapViewOfFile(hFileMappingObject: *, dwDesiredAccess: ulong, dwFileOffsetHigh: ulong, dwFileOffsetLow: ulong, dwNumberOfBytesToMap: uint64) -> *
export import def #extern #dllimport MapViewOfFileEx(hFileMappingObject: *, dwDesiredAccess: ulong, dwFileOffsetHigh: ulong, dwFileOffsetLow: ulong, dwNumberOfBytesToMap: uint64, lpBaseAddress: *) -> *
export import def #extern #dllimport VirtualFreeEx(hProcess: *, lpAddress: *, dwSize: uint64, dwFreeType: ulong) -> int
export import def #extern #dllimport FlushViewOfFile(lpBaseAddress: *, dwNumberOfBytesToFlush: uint64) -> int
export import def #extern #dllimport UnmapViewOfFile(lpBaseAddress: *) -> int
export import def #extern #dllimport GetLargePageMinimum() -> uint64
export import def #extern #dllimport GetProcessWorkingSetSize(hProcess: *, lpMinimumWorkingSetSize: *uint64, lpMaximumWorkingSetSize: *uint64) -> int
export import def #extern #dllimport GetProcessWorkingSetSizeEx(hProcess: *, lpMinimumWorkingSetSize: *uint64, lpMaximumWorkingSetSize: *uint64, Flags: *ulong) -> int
export import def #extern #dllimport SetProcessWorkingSetSize(hProcess: *, dwMinimumWorkingSetSize: uint64, dwMaximumWorkingSetSize: uint64) -> int
export import def #extern #dllimport SetProcessWorkingSetSizeEx(hProcess: *, dwMinimumWorkingSetSize: uint64, dwMaximumWorkingSetSize: uint64, Flags: ulong) -> int
export import def #extern #dllimport VirtualLock(lpAddress: *, dwSize: uint64) -> int
export import def #extern #dllimport VirtualUnlock(lpAddress: *, dwSize: uint64) -> int
export import def #extern #dllimport GetWriteWatch(dwFlags: ulong, lpBaseAddress: *, dwRegionSize: uint64, lpAddresses: **, lpdwCount: *uint64, lpdwGranularity: *ulong) -> uint
export import def #extern #dllimport ResetWriteWatch(lpBaseAddress: *, dwRegionSize: uint64) -> uint
export const LowMemoryResourceNotification: int = 0
export const HighMemoryResourceNotification: int = 1
export import def #extern #dllimport CreateMemoryResourceNotification(NotificationType: e__MEMORY_RESOURCE_NOTIFICATION_TYPE) -> *
export import def #extern #dllimport QueryMemoryResourceNotification(ResourceNotificationHandle: *, ResourceState: *int) -> int
export import def #extern #dllimport GetSystemFileCacheSize(lpMinimumFileCacheSize: *uint64, lpMaximumFileCacheSize: *uint64, lpFlags: *ulong) -> int
export import def #extern #dllimport SetSystemFileCacheSize(MinimumFileCacheSize: uint64, MaximumFileCacheSize: uint64, Flags: ulong) -> int
export import def #extern #dllimport CreateFileMappingNumaW(hFile: *, lpFileMappingAttributes: *s__SECURITY_ATTRIBUTES, flProtect: ulong, dwMaximumSizeHigh: ulong, dwMaximumSizeLow: ulong, lpName: *ushort, nndPreferred: ulong) -> *
export import def #extern #dllimport PrefetchVirtualMemory(hProcess: *, NumberOfEntries: uint64, VirtualAddresses: *s__WIN32_MEMORY_RANGE_ENTRY, Flags: ulong) -> int
export import def #extern #dllimport CreateFileMappingFromApp(hFile: *, SecurityAttributes: *s__SECURITY_ATTRIBUTES, PageProtection: ulong, MaximumSize: uint64, Name: *ushort) -> *
export import def #extern #dllimport MapViewOfFileFromApp(hFileMappingObject: *, DesiredAccess: ulong, FileOffset: uint64, NumberOfBytesToMap: uint64) -> *
export import def #extern #dllimport UnmapViewOfFileEx(BaseAddress: *, UnmapFlags: ulong) -> int
export import def #extern #dllimport AllocateUserPhysicalPages(hProcess: *, NumberOfPages: *uint64, PageArray: *uint64) -> int
export import def #extern #dllimport FreeUserPhysicalPages(hProcess: *, NumberOfPages: *uint64, PageArray: *uint64) -> int
export import def #extern #dllimport MapUserPhysicalPages(VirtualAddress: *, NumberOfPages: uint64, PageArray: *uint64) -> int
export import def #extern #dllimport AllocateUserPhysicalPagesNuma(hProcess: *, NumberOfPages: *uint64, PageArray: *uint64, nndPreferred: ulong) -> int
export import def #extern #dllimport VirtualAllocExNuma(hProcess: *, lpAddress: *, dwSize: uint64, flAllocationType: ulong, flProtect: ulong, nndPreferred: ulong) -> *
export import def #extern #dllimport GetMemoryErrorHandlingCapabilities(Capabilities: *ulong) -> int
export import def #extern #dllimport RegisterBadMemoryNotification(Callback: def () -> ()) -> *
export import def #extern #dllimport UnregisterBadMemoryNotification(RegistrationHandle: *) -> int
export const VmOfferPriorityVeryLow: int = 1
export const VmOfferPriorityLow: int = 2
export const VmOfferPriorityBelowNormal: int = 3
export const VmOfferPriorityNormal: int = 4
export import def #extern OfferVirtualMemory(VirtualAddress: *, Size: uint64, Priority: e_OFFER_PRIORITY) -> ulong
export import def #extern ReclaimVirtualMemory(VirtualAddress: *, Size: uint64) -> ulong
export import def #extern DiscardVirtualMemory(VirtualAddress: *, Size: uint64) -> ulong
export import def #extern #dllimport SetProcessValidCallTargets(hProcess: *, VirtualAddress: *, RegionSize: uint64, NumberOfOffsets: ulong, OffsetInformation: *s__CFG_CALL_TARGET_INFO) -> int
export import def #extern #dllimport SetProcessValidCallTargetsForMappedView(Process: *, VirtualAddress: *, RegionSize: uint64, NumberOfOffsets: ulong, OffsetInformation: *s__CFG_CALL_TARGET_INFO, Section: *, ExpectedFileOffset: uint64) -> int
export import def #extern #dllimport VirtualAllocFromApp(BaseAddress: *, Size: uint64, AllocationType: ulong, Protection: ulong) -> *
export import def #extern #dllimport VirtualProtectFromApp(Address: *, Size: uint64, NewProtection: ulong, OldProtection: *ulong) -> int
export import def #extern #dllimport OpenFileMappingFromApp(DesiredAccess: ulong, InheritHandle: int, Name: *ushort) -> *
export const MemoryRegionInfo: int = 0
export import def #extern #dllimport QueryVirtualMemoryInformation(Process: *, VirtualAddress: *, MemoryInformationClass: e_WIN32_MEMORY_INFORMATION_CLASS, MemoryInformation: *, MemoryInformationSize: uint64, ReturnSize: *uint64) -> int
export import def #extern #dllimport MapViewOfFileNuma2(FileMappingHandle: *, ProcessHandle: *, Offset: uint64, BaseAddress: *, ViewSize: uint64, AllocationType: ulong, PageProtection: ulong, PreferredNode: ulong) -> *
export import def #extern MapViewOfFile2(FileMappingHandle: *, ProcessHandle: *, Offset: uint64, BaseAddress: *, ViewSize: uint64, AllocationType: ulong, PageProtection: ulong) -> *
export import def #extern #dllimport UnmapViewOfFile2(Process: *, BaseAddress: *, UnmapFlags: ulong) -> int
export import def #extern #dllimport VirtualUnlockEx(Process: *, Address: *, Size: uint64) -> int
export import def #extern #dllimport VirtualAlloc2(Process: *, BaseAddress: *, Size: uint64, AllocationType: ulong, PageProtection: ulong, ExtendedParameters: *s_MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport MapViewOfFile3(FileMapping: *, Process: *, BaseAddress: *, Offset: uint64, ViewSize: uint64, AllocationType: ulong, PageProtection: ulong, ExtendedParameters: *s_MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport VirtualAlloc2FromApp(Process: *, BaseAddress: *, Size: uint64, AllocationType: ulong, PageProtection: ulong, ExtendedParameters: *s_MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport MapViewOfFile3FromApp(FileMapping: *, Process: *, BaseAddress: *, Offset: uint64, ViewSize: uint64, AllocationType: ulong, PageProtection: ulong, ExtendedParameters: *s_MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport CreateFileMapping2(File: *, SecurityAttributes: *s__SECURITY_ATTRIBUTES, DesiredAccess: ulong, PageProtection: ulong, AllocationAttributes: ulong, MaximumSize: uint64, Name: *ushort, ExtendedParameters: *s_MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport AllocateUserPhysicalPages2(ObjectHandle: *, NumberOfPages: *uint64, PageArray: *uint64, ExtendedParameters: *s_MEM_EXTENDED_PARAMETER, ExtendedParameterCount: ulong) -> int
export const MemoryPartitionInfo: int = 0
export const MemoryPartitionDedicatedMemoryInfo: int = 1
export import def #extern #dllimport OpenDedicatedMemoryPartition(Partition: *, DedicatedMemoryTypeId: uint64, DesiredAccess: ulong, InheritHandle: int) -> *
export import def #extern #dllimport QueryPartitionInformation(Partition: *, PartitionInformationClass: e_WIN32_MEMORY_PARTITION_INFORMATION_CLASS, PartitionInformation: *, PartitionInformationLength: ulong) -> int
export import def #extern #dllimport IsEnclaveTypeSupported(flEnclaveType: ulong) -> int
export import def #extern #dllimport CreateEnclave(hProcess: *, lpAddress: *, dwSize: uint64, dwInitialCommitment: uint64, flEnclaveType: ulong, lpEnclaveInformation: *, dwInfoLength: ulong, lpEnclaveError: *ulong) -> *
export import def #extern #dllimport LoadEnclaveData(hProcess: *, lpAddress: *, lpBuffer: *, nSize: uint64, flProtect: ulong, lpPageInformation: *, dwInfoLength: ulong, lpNumberOfBytesWritten: *uint64, lpEnclaveError: *ulong) -> int
export import def #extern #dllimport InitializeEnclave(hProcess: *, lpAddress: *, lpEnclaveInformation: *, dwInfoLength: ulong, lpEnclaveError: *ulong) -> int
export import def #extern #dllimport LoadEnclaveImageA(lpEnclaveAddress: *, lpImageName: *char) -> int
export import def #extern #dllimport LoadEnclaveImageW(lpEnclaveAddress: *, lpImageName: *ushort) -> int
export import def #extern #dllimport CallEnclave(lpRoutine: def (*) -> (*), lpParameter: *, fWaitForThread: int, lpReturnValue: **) -> int
export import def #extern #dllimport TerminateEnclave(lpAddress: *, fWait: int) -> int
export import def #extern #dllimport DeleteEnclave(lpAddress: *) -> int
export import def #extern #dllimport QueueUserWorkItem(Function: def (*) -> (ulong), Context: *, Flags: ulong) -> int
export import def #extern #dllimport UnregisterWaitEx(WaitHandle: *, CompletionEvent: *) -> int
export import def #extern #dllimport CreateTimerQueue() -> *
export import def #extern #dllimport CreateTimerQueueTimer(phNewTimer: **, TimerQueue: *, Callback: def (*, uint8) -> (), Parameter: *, DueTime: ulong, Period: ulong, Flags: ulong) -> int
export import def #extern #dllimport ChangeTimerQueueTimer(TimerQueue: *, Timer: *, DueTime: ulong, Period: ulong) -> int
export import def #extern #dllimport DeleteTimerQueueTimer(TimerQueue: *, Timer: *, CompletionEvent: *) -> int
export import def #extern #dllimport DeleteTimerQueue(TimerQueue: *) -> int
export import def #extern #dllimport DeleteTimerQueueEx(TimerQueue: *, CompletionEvent: *) -> int
export import def #extern #dllimport CreateThreadpool(reserved: *) -> *s__TP_POOL
export import def #extern #dllimport SetThreadpoolThreadMaximum(ptpp: *s__TP_POOL, cthrdMost: ulong)
export import def #extern #dllimport SetThreadpoolThreadMinimum(ptpp: *s__TP_POOL, cthrdMic: ulong) -> int
export import def #extern #dllimport SetThreadpoolStackInformation(ptpp: *s__TP_POOL, ptpsi: *s__TP_POOL_STACK_INFORMATION) -> int
export import def #extern #dllimport QueryThreadpoolStackInformation(ptpp: *s__TP_POOL, ptpsi: *s__TP_POOL_STACK_INFORMATION) -> int
export import def #extern #dllimport CloseThreadpool(ptpp: *s__TP_POOL)
export import def #extern #dllimport CreateThreadpoolCleanupGroup() -> *s__TP_CLEANUP_GROUP
export import def #extern #dllimport CloseThreadpoolCleanupGroupMembers(ptpcg: *s__TP_CLEANUP_GROUP, fCancelPendingCallbacks: int, pvCleanupContext: *)
export import def #extern #dllimport CloseThreadpoolCleanupGroup(ptpcg: *s__TP_CLEANUP_GROUP)
export import def #extern #dllimport SetEventWhenCallbackReturns(pci: *s__TP_CALLBACK_INSTANCE, evt: *)
export import def #extern #dllimport ReleaseSemaphoreWhenCallbackReturns(pci: *s__TP_CALLBACK_INSTANCE, sem: *, crel: ulong)
export import def #extern #dllimport ReleaseMutexWhenCallbackReturns(pci: *s__TP_CALLBACK_INSTANCE, mut: *)
export import def #extern #dllimport LeaveCriticalSectionWhenCallbackReturns(pci: *s__TP_CALLBACK_INSTANCE, pcs: *s__RTL_CRITICAL_SECTION)
export import def #extern #dllimport FreeLibraryWhenCallbackReturns(pci: *s__TP_CALLBACK_INSTANCE, mod: *s_HINSTANCE__)
export import def #extern #dllimport CallbackMayRunLong(pci: *s__TP_CALLBACK_INSTANCE) -> int
export import def #extern #dllimport DisassociateCurrentThreadFromCallback(pci: *s__TP_CALLBACK_INSTANCE)
export import def #extern #dllimport TrySubmitThreadpoolCallback(pfns: def (*s__TP_CALLBACK_INSTANCE, *) -> (), pv: *, pcbe: *s__TP_CALLBACK_ENVIRON_V3) -> int
export import def #extern #dllimport CreateThreadpoolWork(pfnwk: def (*s__TP_CALLBACK_INSTANCE, *, *s__TP_WORK) -> (), pv: *, pcbe: *s__TP_CALLBACK_ENVIRON_V3) -> *s__TP_WORK
export import def #extern #dllimport SubmitThreadpoolWork(pwk: *s__TP_WORK)
export import def #extern #dllimport WaitForThreadpoolWorkCallbacks(pwk: *s__TP_WORK, fCancelPendingCallbacks: int)
export import def #extern #dllimport CloseThreadpoolWork(pwk: *s__TP_WORK)
export import def #extern #dllimport CreateThreadpoolTimer(pfnti: def (*s__TP_CALLBACK_INSTANCE, *, *s__TP_TIMER) -> (), pv: *, pcbe: *s__TP_CALLBACK_ENVIRON_V3) -> *s__TP_TIMER
export import def #extern #dllimport SetThreadpoolTimer(pti: *s__TP_TIMER, pftDueTime: *s__FILETIME, msPeriod: ulong, msWindowLength: ulong)
export import def #extern #dllimport IsThreadpoolTimerSet(pti: *s__TP_TIMER) -> int
export import def #extern #dllimport WaitForThreadpoolTimerCallbacks(pti: *s__TP_TIMER, fCancelPendingCallbacks: int)
export import def #extern #dllimport CloseThreadpoolTimer(pti: *s__TP_TIMER)
export import def #extern #dllimport CreateThreadpoolWait(pfnwa: def (*s__TP_CALLBACK_INSTANCE, *, *s__TP_WAIT, ulong) -> (), pv: *, pcbe: *s__TP_CALLBACK_ENVIRON_V3) -> *s__TP_WAIT
export import def #extern #dllimport SetThreadpoolWait(pwa: *s__TP_WAIT, h: *, pftTimeout: *s__FILETIME)
export import def #extern #dllimport WaitForThreadpoolWaitCallbacks(pwa: *s__TP_WAIT, fCancelPendingCallbacks: int)
export import def #extern #dllimport CloseThreadpoolWait(pwa: *s__TP_WAIT)
export import def #extern #dllimport CreateThreadpoolIo(fl: *, pfnio: def (*s__TP_CALLBACK_INSTANCE, *, *, ulong, uint64, *s__TP_IO) -> (), pv: *, pcbe: *s__TP_CALLBACK_ENVIRON_V3) -> *s__TP_IO
export import def #extern #dllimport StartThreadpoolIo(pio: *s__TP_IO)
export import def #extern #dllimport CancelThreadpoolIo(pio: *s__TP_IO)
export import def #extern #dllimport WaitForThreadpoolIoCallbacks(pio: *s__TP_IO, fCancelPendingCallbacks: int)
export import def #extern #dllimport CloseThreadpoolIo(pio: *s__TP_IO)
export import def #extern #dllimport SetThreadpoolTimerEx(pti: *s__TP_TIMER, pftDueTime: *s__FILETIME, msPeriod: ulong, msWindowLength: ulong) -> int
export import def #extern #dllimport SetThreadpoolWaitEx(pwa: *s__TP_WAIT, h: *, pftTimeout: *s__FILETIME, Reserved: *) -> int
export import def #extern #dllimport IsProcessInJob(ProcessHandle: *, JobHandle: *, Result: *int) -> int
export import def #extern #dllimport CreateJobObjectW(lpJobAttributes: *s__SECURITY_ATTRIBUTES, lpName: *ushort) -> *
export import def #extern #dllimport FreeMemoryJobObject(Buffer: *)
export import def #extern #dllimport OpenJobObjectW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport AssignProcessToJobObject(hJob: *, hProcess: *) -> int
export import def #extern #dllimport TerminateJobObject(hJob: *, uExitCode: uint) -> int
export import def #extern #dllimport SetInformationJobObject(hJob: *, JobObjectInformationClass: e__JOBOBJECTINFOCLASS, lpJobObjectInformation: *, cbJobObjectInformationLength: ulong) -> int
export import def #extern #dllimport SetIoRateControlInformationJobObject(hJob: *, IoRateControlInfo: *s_JOBOBJECT_IO_RATE_CONTROL_INFORMATION) -> ulong
export import def #extern #dllimport QueryInformationJobObject(hJob: *, JobObjectInformationClass: e__JOBOBJECTINFOCLASS, lpJobObjectInformation: *, cbJobObjectInformationLength: ulong, lpReturnLength: *ulong) -> int
export import def #extern #dllimport QueryIoRateControlInformationJobObject(hJob: *, VolumeName: *ushort, InfoBlocks: **s_JOBOBJECT_IO_RATE_CONTROL_INFORMATION, InfoBlockCount: *ulong) -> ulong
export import def #extern #dllimport Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: uint8) -> uint8
export import def #extern #dllimport Wow64DisableWow64FsRedirection(OldValue: **) -> int
export import def #extern #dllimport Wow64RevertWow64FsRedirection(OlValue: *) -> int
export import def #extern #dllimport IsWow64Process(hProcess: *, Wow64Process: *int) -> int
export import def #extern #dllimport GetSystemWow64DirectoryA(lpBuffer: *char, uSize: uint) -> uint
export import def #extern #dllimport GetSystemWow64DirectoryW(lpBuffer: *ushort, uSize: uint) -> uint
export import def #extern #dllimport Wow64SetThreadDefaultGuestMachine(Machine: ushort) -> ushort
export import def #extern #dllimport IsWow64Process2(hProcess: *, pProcessMachine: *ushort, pNativeMachine: *ushort) -> int
export import def #extern #dllimport GetSystemWow64Directory2A(lpBuffer: *char, uSize: uint, ImageFileMachineType: ushort) -> uint
export import def #extern #dllimport GetSystemWow64Directory2W(lpBuffer: *ushort, uSize: uint, ImageFileMachineType: ushort) -> uint
export import def #extern #dllimport IsWow64GuestMachineSupported(WowGuestMachine: ushort, MachineIsSupported: *int) -> long
export import def #extern #dllimport Wow64GetThreadContext(hThread: *, lpContext: *s__WOW64_CONTEXT) -> int
export import def #extern #dllimport Wow64SetThreadContext(hThread: *, lpContext: *s__WOW64_CONTEXT) -> int
export import def #extern #dllimport Wow64SuspendThread(hThread: *) -> ulong
export import def #extern #dllimport DisableThreadLibraryCalls(hLibModule: *s_HINSTANCE__) -> int
export import def #extern #dllimport FindResourceExW(hModule: *s_HINSTANCE__, lpType: *ushort, lpName: *ushort, wLanguage: ushort) -> *s_HRSRC__
export import def #extern #dllimport FindStringOrdinal(dwFindStringOrdinalFlags: ulong, lpStringSource: *ushort, cchSource: int, lpStringValue: *ushort, cchValue: int, bIgnoreCase: int) -> int
export import def #extern #dllimport FreeLibrary(hLibModule: *s_HINSTANCE__) -> int
export import def #extern #dllimport FreeLibraryAndExitThread(hLibModule: *s_HINSTANCE__, dwExitCode: ulong)
export import def #extern #dllimport FreeResource(hResData: *) -> int
export import def #extern #dllimport GetModuleFileNameA(hModule: *s_HINSTANCE__, lpFilename: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetModuleFileNameW(hModule: *s_HINSTANCE__, lpFilename: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport GetModuleHandleA(lpModuleName: *char) -> *s_HINSTANCE__
export import def #extern #dllimport GetModuleHandleW(lpModuleName: *ushort) -> *s_HINSTANCE__
export import def #extern #dllimport GetModuleHandleExA(dwFlags: ulong, lpModuleName: *char, phModule: **s_HINSTANCE__) -> int
export import def #extern #dllimport GetModuleHandleExW(dwFlags: ulong, lpModuleName: *ushort, phModule: **s_HINSTANCE__) -> int
export import def #extern #dllimport GetProcAddress(hModule: *s_HINSTANCE__, lpProcName: *char) -> *INT_PTR ()
export import def #extern #dllimport LoadLibraryExA(lpLibFileName: *char, hFile: *, dwFlags: ulong) -> *s_HINSTANCE__
export import def #extern #dllimport LoadLibraryExW(lpLibFileName: *ushort, hFile: *, dwFlags: ulong) -> *s_HINSTANCE__
export import def #extern #dllimport LoadResource(hModule: *s_HINSTANCE__, hResInfo: *s_HRSRC__) -> *
export import def #extern #dllimport LoadStringA(hInstance: *s_HINSTANCE__, uID: uint, lpBuffer: *char, cchBufferMax: int) -> int
export import def #extern #dllimport LoadStringW(hInstance: *s_HINSTANCE__, uID: uint, lpBuffer: *ushort, cchBufferMax: int) -> int
export import def #extern #dllimport LockResource(hResData: *) -> *
export import def #extern #dllimport SizeofResource(hModule: *s_HINSTANCE__, hResInfo: *s_HRSRC__) -> ulong
export import def #extern #dllimport AddDllDirectory(NewDirectory: *ushort) -> *
export import def #extern #dllimport RemoveDllDirectory(Cookie: *) -> int
export import def #extern #dllimport SetDefaultDllDirectories(DirectoryFlags: ulong) -> int
export import def #extern #dllimport EnumResourceLanguagesExA(hModule: *s_HINSTANCE__, lpType: *char, lpName: *char, lpEnumFunc: def (*s_HINSTANCE__, *char, *char, ushort, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceLanguagesExW(hModule: *s_HINSTANCE__, lpType: *ushort, lpName: *ushort, lpEnumFunc: def (*s_HINSTANCE__, *ushort, *ushort, ushort, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceNamesExA(hModule: *s_HINSTANCE__, lpType: *char, lpEnumFunc: def (*s_HINSTANCE__, *char, *char, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceNamesExW(hModule: *s_HINSTANCE__, lpType: *ushort, lpEnumFunc: def (*s_HINSTANCE__, *ushort, *ushort, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceTypesExA(hModule: *s_HINSTANCE__, lpEnumFunc: def (*s_HINSTANCE__, *char, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceTypesExW(hModule: *s_HINSTANCE__, lpEnumFunc: def (*s_HINSTANCE__, *ushort, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport FindResourceW(hModule: *s_HINSTANCE__, lpName: *ushort, lpType: *ushort) -> *s_HRSRC__
export import def #extern #dllimport LoadLibraryA(lpLibFileName: *char) -> *s_HINSTANCE__
export import def #extern #dllimport LoadLibraryW(lpLibFileName: *ushort) -> *s_HINSTANCE__
export import def #extern #dllimport EnumResourceNamesW(hModule: *s_HINSTANCE__, lpType: *ushort, lpEnumFunc: def (*s_HINSTANCE__, *ushort, *ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumResourceNamesA(hModule: *s_HINSTANCE__, lpType: *char, lpEnumFunc: def (*s_HINSTANCE__, *char, *char, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport AccessCheck(pSecurityDescriptor: *, ClientToken: *, DesiredAccess: ulong, GenericMapping: *s__GENERIC_MAPPING, PrivilegeSet: *s__PRIVILEGE_SET, PrivilegeSetLength: *ulong, GrantedAccess: *ulong, AccessStatus: *int) -> int
export import def #extern #dllimport AccessCheckAndAuditAlarmW(SubsystemName: *ushort, HandleId: *, ObjectTypeName: *ushort, ObjectName: *ushort, SecurityDescriptor: *, DesiredAccess: ulong, GenericMapping: *s__GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatus: *int, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByType(pSecurityDescriptor: *, PrincipalSelfSid: *, ClientToken: *, DesiredAccess: ulong, ObjectTypeList: *s__OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *s__GENERIC_MAPPING, PrivilegeSet: *s__PRIVILEGE_SET, PrivilegeSetLength: *ulong, GrantedAccess: *ulong, AccessStatus: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultList(pSecurityDescriptor: *, PrincipalSelfSid: *, ClientToken: *, DesiredAccess: ulong, ObjectTypeList: *s__OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *s__GENERIC_MAPPING, PrivilegeSet: *s__PRIVILEGE_SET, PrivilegeSetLength: *ulong, GrantedAccessList: *ulong, AccessStatusList: *ulong) -> int
export import def #extern #dllimport AccessCheckByTypeAndAuditAlarmW(SubsystemName: *ushort, HandleId: *, ObjectTypeName: *ushort, ObjectName: *ushort, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: e__AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *s__OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *s__GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatus: *int, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultListAndAuditAlarmW(SubsystemName: *ushort, HandleId: *, ObjectTypeName: *ushort, ObjectName: *ushort, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: e__AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *s__OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *s__GENERIC_MAPPING, ObjectCreation: int, GrantedAccessList: *ulong, AccessStatusList: *ulong, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultListAndAuditAlarmByHandleW(SubsystemName: *ushort, HandleId: *, ClientToken: *, ObjectTypeName: *ushort, ObjectName: *ushort, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: e__AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *s__OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *s__GENERIC_MAPPING, ObjectCreation: int, GrantedAccessList: *ulong, AccessStatusList: *ulong, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AddAccessAllowedAce(pAcl: *s__ACL, dwAceRevision: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AddAccessAllowedAceEx(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AddAccessAllowedObjectAce(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, ObjectTypeGuid: *s__GUID, InheritedObjectTypeGuid: *s__GUID, pSid: *) -> int
export import def #extern #dllimport AddAccessDeniedAce(pAcl: *s__ACL, dwAceRevision: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AddAccessDeniedAceEx(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AddAccessDeniedObjectAce(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, ObjectTypeGuid: *s__GUID, InheritedObjectTypeGuid: *s__GUID, pSid: *) -> int
export import def #extern #dllimport AddAce(pAcl: *s__ACL, dwAceRevision: ulong, dwStartingAceIndex: ulong, pAceList: *, nAceListLength: ulong) -> int
export import def #extern #dllimport AddAuditAccessAce(pAcl: *s__ACL, dwAceRevision: ulong, dwAccessMask: ulong, pSid: *, bAuditSuccess: int, bAuditFailure: int) -> int
export import def #extern #dllimport AddAuditAccessAceEx(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, dwAccessMask: ulong, pSid: *, bAuditSuccess: int, bAuditFailure: int) -> int
export import def #extern #dllimport AddAuditAccessObjectAce(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, ObjectTypeGuid: *s__GUID, InheritedObjectTypeGuid: *s__GUID, pSid: *, bAuditSuccess: int, bAuditFailure: int) -> int
export import def #extern #dllimport AddMandatoryAce(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, MandatoryPolicy: ulong, pLabelSid: *) -> int
export import def #extern #dllimport AddResourceAttributeAce(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, pSid: *, pAttributeInfo: *s__CLAIM_SECURITY_ATTRIBUTES_INFORMATION, pReturnLength: *ulong) -> int
export import def #extern #dllimport AddScopedPolicyIDAce(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AdjustTokenGroups(TokenHandle: *, ResetToDefault: int, NewState: *s__TOKEN_GROUPS, BufferLength: ulong, PreviousState: *s__TOKEN_GROUPS, ReturnLength: *ulong) -> int
export import def #extern #dllimport AdjustTokenPrivileges(TokenHandle: *, DisableAllPrivileges: int, NewState: *s__TOKEN_PRIVILEGES, BufferLength: ulong, PreviousState: *s__TOKEN_PRIVILEGES, ReturnLength: *ulong) -> int
export import def #extern #dllimport AllocateAndInitializeSid(pIdentifierAuthority: *s__SID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: uint8, nSubAuthority0: ulong, nSubAuthority1: ulong, nSubAuthority2: ulong, nSubAuthority3: ulong, nSubAuthority4: ulong, nSubAuthority5: ulong, nSubAuthority6: ulong, nSubAuthority7: ulong, pSid: **) -> int
export import def #extern #dllimport AllocateLocallyUniqueId(Luid: *s__LUID) -> int
export import def #extern #dllimport AreAllAccessesGranted(GrantedAccess: ulong, DesiredAccess: ulong) -> int
export import def #extern #dllimport AreAnyAccessesGranted(GrantedAccess: ulong, DesiredAccess: ulong) -> int
export import def #extern #dllimport CheckTokenMembership(TokenHandle: *, SidToCheck: *, IsMember: *int) -> int
export import def #extern #dllimport CheckTokenCapability(TokenHandle: *, CapabilitySidToCheck: *, HasCapability: *int) -> int
export import def #extern #dllimport GetAppContainerAce(Acl: *s__ACL, StartingAceIndex: ulong, AppContainerAce: **, AppContainerAceIndex: *ulong) -> int
export import def #extern #dllimport CheckTokenMembershipEx(TokenHandle: *, SidToCheck: *, Flags: ulong, IsMember: *int) -> int
export import def #extern #dllimport ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor: *, CurrentSecurityDescriptor: *, NewSecurityDescriptor: **, ObjectType: *s__GUID, IsDirectoryObject: uint8, GenericMapping: *s__GENERIC_MAPPING) -> int
export import def #extern #dllimport CopySid(nDestinationSidLength: ulong, pDestinationSid: *, pSourceSid: *) -> int
export import def #extern #dllimport CreatePrivateObjectSecurity(ParentDescriptor: *, CreatorDescriptor: *, NewDescriptor: **, IsDirectoryObject: int, Token: *, GenericMapping: *s__GENERIC_MAPPING) -> int
export import def #extern #dllimport CreatePrivateObjectSecurityEx(ParentDescriptor: *, CreatorDescriptor: *, NewDescriptor: **, ObjectType: *s__GUID, IsContainerObject: int, AutoInheritFlags: ulong, Token: *, GenericMapping: *s__GENERIC_MAPPING) -> int
export import def #extern #dllimport CreatePrivateObjectSecurityWithMultipleInheritance(ParentDescriptor: *, CreatorDescriptor: *, NewDescriptor: **, ObjectTypes: **s__GUID, GuidCount: ulong, IsContainerObject: int, AutoInheritFlags: ulong, Token: *, GenericMapping: *s__GENERIC_MAPPING) -> int
export import def #extern #dllimport CreateRestrictedToken(ExistingTokenHandle: *, Flags: ulong, DisableSidCount: ulong, SidsToDisable: *s__SID_AND_ATTRIBUTES, DeletePrivilegeCount: ulong, PrivilegesToDelete: *s__LUID_AND_ATTRIBUTES, RestrictedSidCount: ulong, SidsToRestrict: *s__SID_AND_ATTRIBUTES, NewTokenHandle: **) -> int
export import def #extern #dllimport CreateWellKnownSid(WellKnownSidType: e_WELL_KNOWN_SID_TYPE, DomainSid: *, pSid: *, cbSid: *ulong) -> int
export import def #extern #dllimport EqualDomainSid(pSid1: *, pSid2: *, pfEqual: *int) -> int
export import def #extern #dllimport DeleteAce(pAcl: *s__ACL, dwAceIndex: ulong) -> int
export import def #extern #dllimport DestroyPrivateObjectSecurity(ObjectDescriptor: **) -> int
export import def #extern #dllimport DuplicateToken(ExistingTokenHandle: *, ImpersonationLevel: e__SECURITY_IMPERSONATION_LEVEL, DuplicateTokenHandle: **) -> int
export import def #extern #dllimport DuplicateTokenEx(hExistingToken: *, dwDesiredAccess: ulong, lpTokenAttributes: *s__SECURITY_ATTRIBUTES, ImpersonationLevel: e__SECURITY_IMPERSONATION_LEVEL, TokenType: e__TOKEN_TYPE, phNewToken: **) -> int
export import def #extern #dllimport EqualPrefixSid(pSid1: *, pSid2: *) -> int
export import def #extern #dllimport EqualSid(pSid1: *, pSid2: *) -> int
export import def #extern #dllimport FindFirstFreeAce(pAcl: *s__ACL, pAce: **) -> int
export import def #extern #dllimport FreeSid(pSid: *) -> *
export import def #extern #dllimport GetAce(pAcl: *s__ACL, dwAceIndex: ulong, pAce: **) -> int
export import def #extern #dllimport GetAclInformation(pAcl: *s__ACL, pAclInformation: *, nAclInformationLength: ulong, dwAclInformationClass: e__ACL_INFORMATION_CLASS) -> int
export import def #extern #dllimport GetFileSecurityW(lpFileName: *ushort, RequestedInformation: ulong, pSecurityDescriptor: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport GetKernelObjectSecurity(Handle: *, RequestedInformation: ulong, pSecurityDescriptor: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport GetLengthSid(pSid: *) -> ulong
export import def #extern #dllimport GetPrivateObjectSecurity(ObjectDescriptor: *, SecurityInformation: ulong, ResultantDescriptor: *, DescriptorLength: ulong, ReturnLength: *ulong) -> int
export import def #extern #dllimport GetSecurityDescriptorControl(pSecurityDescriptor: *, pControl: *ushort, lpdwRevision: *ulong) -> int
export import def #extern #dllimport GetSecurityDescriptorDacl(pSecurityDescriptor: *, lpbDaclPresent: *int, pDacl: **s__ACL, lpbDaclDefaulted: *int) -> int
export import def #extern #dllimport GetSecurityDescriptorGroup(pSecurityDescriptor: *, pGroup: **, lpbGroupDefaulted: *int) -> int
export import def #extern #dllimport GetSecurityDescriptorLength(pSecurityDescriptor: *) -> ulong
export import def #extern #dllimport GetSecurityDescriptorOwner(pSecurityDescriptor: *, pOwner: **, lpbOwnerDefaulted: *int) -> int
export import def #extern #dllimport GetSecurityDescriptorRMControl(SecurityDescriptor: *, RMControl: *uint8) -> ulong
export import def #extern #dllimport GetSecurityDescriptorSacl(pSecurityDescriptor: *, lpbSaclPresent: *int, pSacl: **s__ACL, lpbSaclDefaulted: *int) -> int
export import def #extern #dllimport GetSidIdentifierAuthority(pSid: *) -> *s__SID_IDENTIFIER_AUTHORITY
export import def #extern #dllimport GetSidLengthRequired(nSubAuthorityCount: uint8) -> ulong
export import def #extern #dllimport GetSidSubAuthority(pSid: *, nSubAuthority: ulong) -> *ulong
export import def #extern #dllimport GetSidSubAuthorityCount(pSid: *) -> *uint8
export import def #extern #dllimport GetTokenInformation(TokenHandle: *, TokenInformationClass: e__TOKEN_INFORMATION_CLASS, TokenInformation: *, TokenInformationLength: ulong, ReturnLength: *ulong) -> int
export import def #extern #dllimport GetWindowsAccountDomainSid(pSid: *, pDomainSid: *, cbDomainSid: *ulong) -> int
export import def #extern #dllimport ImpersonateAnonymousToken(ThreadHandle: *) -> int
export import def #extern #dllimport ImpersonateLoggedOnUser(hToken: *) -> int
export import def #extern #dllimport ImpersonateSelf(ImpersonationLevel: e__SECURITY_IMPERSONATION_LEVEL) -> int
export import def #extern #dllimport InitializeAcl(pAcl: *s__ACL, nAclLength: ulong, dwAclRevision: ulong) -> int
export import def #extern #dllimport InitializeSecurityDescriptor(pSecurityDescriptor: *, dwRevision: ulong) -> int
export import def #extern #dllimport InitializeSid(Sid: *, pIdentifierAuthority: *s__SID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: uint8) -> int
export import def #extern #dllimport IsTokenRestricted(TokenHandle: *) -> int
export import def #extern #dllimport IsValidAcl(pAcl: *s__ACL) -> int
export import def #extern #dllimport IsValidSecurityDescriptor(pSecurityDescriptor: *) -> int
export import def #extern #dllimport IsValidSid(pSid: *) -> int
export import def #extern #dllimport IsWellKnownSid(pSid: *, WellKnownSidType: e_WELL_KNOWN_SID_TYPE) -> int
export import def #extern #dllimport MakeAbsoluteSD(pSelfRelativeSecurityDescriptor: *, pAbsoluteSecurityDescriptor: *, lpdwAbsoluteSecurityDescriptorSize: *ulong, pDacl: *s__ACL, lpdwDaclSize: *ulong, pSacl: *s__ACL, lpdwSaclSize: *ulong, pOwner: *, lpdwOwnerSize: *ulong, pPrimaryGroup: *, lpdwPrimaryGroupSize: *ulong) -> int
export import def #extern #dllimport MakeSelfRelativeSD(pAbsoluteSecurityDescriptor: *, pSelfRelativeSecurityDescriptor: *, lpdwBufferLength: *ulong) -> int
export import def #extern #dllimport MapGenericMask(AccessMask: *ulong, GenericMapping: *s__GENERIC_MAPPING)
export import def #extern #dllimport ObjectCloseAuditAlarmW(SubsystemName: *ushort, HandleId: *, GenerateOnClose: int) -> int
export import def #extern #dllimport ObjectDeleteAuditAlarmW(SubsystemName: *ushort, HandleId: *, GenerateOnClose: int) -> int
export import def #extern #dllimport ObjectOpenAuditAlarmW(SubsystemName: *ushort, HandleId: *, ObjectTypeName: *ushort, ObjectName: *ushort, pSecurityDescriptor: *, ClientToken: *, DesiredAccess: ulong, GrantedAccess: ulong, Privileges: *s__PRIVILEGE_SET, ObjectCreation: int, AccessGranted: int, GenerateOnClose: *int) -> int
export import def #extern #dllimport ObjectPrivilegeAuditAlarmW(SubsystemName: *ushort, HandleId: *, ClientToken: *, DesiredAccess: ulong, Privileges: *s__PRIVILEGE_SET, AccessGranted: int) -> int
export import def #extern #dllimport PrivilegeCheck(ClientToken: *, RequiredPrivileges: *s__PRIVILEGE_SET, pfResult: *int) -> int
export import def #extern #dllimport PrivilegedServiceAuditAlarmW(SubsystemName: *ushort, ServiceName: *ushort, ClientToken: *, Privileges: *s__PRIVILEGE_SET, AccessGranted: int) -> int
export import def #extern #dllimport QuerySecurityAccessMask(SecurityInformation: ulong, DesiredAccess: *ulong)
export import def #extern #dllimport RevertToSelf() -> int
export import def #extern #dllimport SetAclInformation(pAcl: *s__ACL, pAclInformation: *, nAclInformationLength: ulong, dwAclInformationClass: e__ACL_INFORMATION_CLASS) -> int
export import def #extern #dllimport SetFileSecurityW(lpFileName: *ushort, SecurityInformation: ulong, pSecurityDescriptor: *) -> int
export import def #extern #dllimport SetKernelObjectSecurity(Handle: *, SecurityInformation: ulong, SecurityDescriptor: *) -> int
export import def #extern #dllimport SetPrivateObjectSecurity(SecurityInformation: ulong, ModificationDescriptor: *, ObjectsSecurityDescriptor: **, GenericMapping: *s__GENERIC_MAPPING, Token: *) -> int
export import def #extern #dllimport SetPrivateObjectSecurityEx(SecurityInformation: ulong, ModificationDescriptor: *, ObjectsSecurityDescriptor: **, AutoInheritFlags: ulong, GenericMapping: *s__GENERIC_MAPPING, Token: *) -> int
export import def #extern #dllimport SetSecurityAccessMask(SecurityInformation: ulong, DesiredAccess: *ulong)
export import def #extern #dllimport SetSecurityDescriptorControl(pSecurityDescriptor: *, ControlBitsOfInterest: ushort, ControlBitsToSet: ushort) -> int
export import def #extern #dllimport SetSecurityDescriptorDacl(pSecurityDescriptor: *, bDaclPresent: int, pDacl: *s__ACL, bDaclDefaulted: int) -> int
export import def #extern #dllimport SetSecurityDescriptorGroup(pSecurityDescriptor: *, pGroup: *, bGroupDefaulted: int) -> int
export import def #extern #dllimport SetSecurityDescriptorOwner(pSecurityDescriptor: *, pOwner: *, bOwnerDefaulted: int) -> int
export import def #extern #dllimport SetSecurityDescriptorRMControl(SecurityDescriptor: *, RMControl: *uint8) -> ulong
export import def #extern #dllimport SetSecurityDescriptorSacl(pSecurityDescriptor: *, bSaclPresent: int, pSacl: *s__ACL, bSaclDefaulted: int) -> int
export import def #extern #dllimport SetTokenInformation(TokenHandle: *, TokenInformationClass: e__TOKEN_INFORMATION_CLASS, TokenInformation: *, TokenInformationLength: ulong) -> int
export import def #extern #dllimport SetCachedSigningLevel(SourceFiles: **, SourceFileCount: ulong, Flags: ulong, TargetFile: *) -> int
export import def #extern #dllimport GetCachedSigningLevel(File: *, Flags: *ulong, SigningLevel: *ulong, Thumbprint: *uint8, ThumbprintSize: *ulong, ThumbprintAlgorithm: *ulong) -> int
export import def #extern #dllimport CveEventWrite(CveId: *ushort, AdditionalDetails: *ushort) -> long
export import def #extern #dllimport DeriveCapabilitySidsFromName(CapName: *ushort, CapabilityGroupSids: ***, CapabilityGroupSidCount: *ulong, CapabilitySids: ***, CapabilitySidCount: *ulong) -> int
export import def #extern #dllimport CreatePrivateNamespaceW(lpPrivateNamespaceAttributes: *s__SECURITY_ATTRIBUTES, lpBoundaryDescriptor: *, lpAliasPrefix: *ushort) -> *
export import def #extern #dllimport OpenPrivateNamespaceW(lpBoundaryDescriptor: *, lpAliasPrefix: *ushort) -> *
export import def #extern #dllimport ClosePrivateNamespace(Handle: *, Flags: ulong) -> uint8
export import def #extern #dllimport CreateBoundaryDescriptorW(Name: *ushort, Flags: ulong) -> *
export import def #extern #dllimport AddSIDToBoundaryDescriptor(BoundaryDescriptor: **, RequiredSid: *) -> int
export import def #extern #dllimport DeleteBoundaryDescriptor(BoundaryDescriptor: *)
export import def #extern #dllimport GetNumaHighestNodeNumber(HighestNodeNumber: *ulong) -> int
export import def #extern #dllimport GetNumaNodeProcessorMaskEx(Node: ushort, ProcessorMask: *s__GROUP_AFFINITY) -> int
export import def #extern #dllimport GetNumaProximityNodeEx(ProximityId: ulong, NodeNumber: *ushort) -> int
export import def #extern #dllimport GetProcessGroupAffinity(hProcess: *, GroupCount: *ushort, GroupArray: *ushort) -> int
export import def #extern #dllimport GetThreadGroupAffinity(hThread: *, GroupAffinity: *s__GROUP_AFFINITY) -> int
export import def #extern #dllimport SetThreadGroupAffinity(hThread: *, GroupAffinity: *s__GROUP_AFFINITY, PreviousGroupAffinity: *s__GROUP_AFFINITY) -> int
export import def #extern GetAppContainerNamedObjectPath(Token: *, AppContainerSid: *, ObjectPathLength: ulong, ObjectPath: *ushort, ReturnLength: *ulong) -> int
export import def #extern #dllimport QueryThreadCycleTime(ThreadHandle: *, CycleTime: *uint64) -> int
export import def #extern #dllimport QueryProcessCycleTime(ProcessHandle: *, CycleTime: *uint64) -> int
export import def #extern #dllimport QueryIdleProcessorCycleTime(BufferLength: *ulong, ProcessorIdleCycleTime: *uint64) -> int
export import def #extern #dllimport QueryIdleProcessorCycleTimeEx(Group: ushort, BufferLength: *ulong, ProcessorIdleCycleTime: *uint64) -> int
export import def #extern #dllimport QueryInterruptTimePrecise(lpInterruptTimePrecise: *uint64)
export import def #extern #dllimport QueryUnbiasedInterruptTimePrecise(lpUnbiasedInterruptTimePrecise: *uint64)
export import def #extern #dllimport QueryInterruptTime(lpInterruptTime: *uint64)
export import def #extern #dllimport QueryUnbiasedInterruptTime(UnbiasedTime: *uint64) -> int
export import def #extern #dllimport QueryAuxiliaryCounterFrequency(lpAuxiliaryCounterFrequency: *uint64) -> long
export import def #extern #dllimport ConvertAuxiliaryCounterToPerformanceCounter(ullAuxiliaryCounterValue: uint64, lpPerformanceCounterValue: *uint64, lpConversionError: *uint64) -> long
export import def #extern #dllimport ConvertPerformanceCounterToAuxiliaryCounter(ullPerformanceCounterValue: uint64, lpAuxiliaryCounterValue: *uint64, lpConversionError: *uint64) -> long
export const FILE_WRITE_FLAGS_NONE: int = 0
export const FILE_WRITE_FLAGS_WRITE_THROUGH: int = 1
export const FILE_FLUSH_DEFAULT: int = 0
export const FILE_FLUSH_DATA: int = 1
export const FILE_FLUSH_MIN_METADATA: int = 2
export const FILE_FLUSH_NO_SYNC: int = 3
export import def #extern #dllimport GlobalAlloc(uFlags: uint, dwBytes: uint64) -> *
export import def #extern #dllimport GlobalReAlloc(hMem: *, dwBytes: uint64, uFlags: uint) -> *
export import def #extern #dllimport GlobalSize(hMem: *) -> uint64
export import def #extern #dllimport GlobalUnlock(hMem: *) -> int
export import def #extern #dllimport GlobalLock(hMem: *) -> *
export import def #extern #dllimport GlobalFlags(hMem: *) -> uint
export import def #extern #dllimport GlobalHandle(pMem: *) -> *
export import def #extern #dllimport GlobalFree(hMem: *) -> *
export import def #extern #dllimport GlobalCompact(dwMinFree: ulong) -> uint64
export import def #extern #dllimport GlobalFix(hMem: *)
export import def #extern #dllimport GlobalUnfix(hMem: *)
export import def #extern #dllimport GlobalWire(hMem: *) -> *
export import def #extern #dllimport GlobalUnWire(hMem: *) -> int
export import def #extern #dllimport GlobalMemoryStatus(lpBuffer: *s__MEMORYSTATUS)
export import def #extern #dllimport LocalAlloc(uFlags: uint, uBytes: uint64) -> *
export import def #extern #dllimport LocalReAlloc(hMem: *, uBytes: uint64, uFlags: uint) -> *
export import def #extern #dllimport LocalLock(hMem: *) -> *
export import def #extern #dllimport LocalHandle(pMem: *) -> *
export import def #extern #dllimport LocalUnlock(hMem: *) -> int
export import def #extern #dllimport LocalSize(hMem: *) -> uint64
export import def #extern #dllimport LocalFlags(hMem: *) -> uint
export import def #extern #dllimport LocalFree(hMem: *) -> *
export import def #extern #dllimport LocalShrink(hMem: *, cbNewSize: uint) -> uint64
export import def #extern #dllimport LocalCompact(uMinFree: uint) -> uint64
export import def #extern #dllimport GetBinaryTypeA(lpApplicationName: *char, lpBinaryType: *ulong) -> int
export import def #extern #dllimport GetBinaryTypeW(lpApplicationName: *ushort, lpBinaryType: *ulong) -> int
export import def #extern #dllimport GetShortPathNameA(lpszLongPath: *char, lpszShortPath: *char, cchBuffer: ulong) -> ulong
export import def #extern #dllimport GetLongPathNameTransactedA(lpszShortPath: *char, lpszLongPath: *char, cchBuffer: ulong, hTransaction: *) -> ulong
export import def #extern #dllimport GetLongPathNameTransactedW(lpszShortPath: *ushort, lpszLongPath: *ushort, cchBuffer: ulong, hTransaction: *) -> ulong
export import def #extern #dllimport GetProcessAffinityMask(hProcess: *, lpProcessAffinityMask: *uint64, lpSystemAffinityMask: *uint64) -> int
export import def #extern #dllimport SetProcessAffinityMask(hProcess: *, dwProcessAffinityMask: uint64) -> int
export import def #extern #dllimport GetProcessIoCounters(hProcess: *, lpIoCounters: *s__IO_COUNTERS) -> int
export import def #extern #dllimport FatalExit(ExitCode: int)
export import def #extern #dllimport SetEnvironmentStringsA(NewEnvironment: *char) -> int
export import def #extern #dllimport SwitchToFiber(lpFiber: *)
export import def #extern #dllimport DeleteFiber(lpFiber: *)
export import def #extern #dllimport ConvertFiberToThread() -> int
export import def #extern #dllimport CreateFiberEx(dwStackCommitSize: uint64, dwStackReserveSize: uint64, dwFlags: ulong, lpStartAddress: def (*) -> (), lpParameter: *) -> *
export import def #extern #dllimport ConvertThreadToFiberEx(lpParameter: *, dwFlags: ulong) -> *
export import def #extern #dllimport CreateFiber(dwStackSize: uint64, lpStartAddress: def (*) -> (), lpParameter: *) -> *
export import def #extern #dllimport ConvertThreadToFiber(lpParameter: *) -> *
export import def #extern #dllimport CreateUmsCompletionList(UmsCompletionList: **) -> int
export import def #extern #dllimport DequeueUmsCompletionListItems(UmsCompletionList: *, WaitTimeOut: ulong, UmsThreadList: **) -> int
export import def #extern #dllimport GetUmsCompletionListEvent(UmsCompletionList: *, UmsCompletionEvent: **) -> int
export import def #extern #dllimport ExecuteUmsThread(UmsThread: *) -> int
export import def #extern #dllimport UmsThreadYield(SchedulerParam: *) -> int
export import def #extern #dllimport DeleteUmsCompletionList(UmsCompletionList: *) -> int
export import def #extern #dllimport GetCurrentUmsThread() -> *
export import def #extern #dllimport GetNextUmsListItem(UmsContext: *) -> *
export import def #extern #dllimport QueryUmsThreadInformation(UmsThread: *, UmsThreadInfoClass: e__RTL_UMS_THREAD_INFO_CLASS, UmsThreadInformation: *, UmsThreadInformationLength: ulong, ReturnLength: *ulong) -> int
export import def #extern #dllimport SetUmsThreadInformation(UmsThread: *, UmsThreadInfoClass: e__RTL_UMS_THREAD_INFO_CLASS, UmsThreadInformation: *, UmsThreadInformationLength: ulong) -> int
export import def #extern #dllimport DeleteUmsThreadContext(UmsThread: *) -> int
export import def #extern #dllimport CreateUmsThreadContext(lpUmsThread: **) -> int
export import def #extern #dllimport EnterUmsSchedulingMode(SchedulerStartupInfo: *s__UMS_SCHEDULER_STARTUP_INFO) -> int
export import def #extern #dllimport GetUmsSystemThreadInformation(ThreadHandle: *, SystemThreadInfo: *s__UMS_SYSTEM_THREAD_INFORMATION) -> int
export import def #extern #dllimport SetThreadAffinityMask(hThread: *, dwThreadAffinityMask: uint64) -> uint64
export import def #extern #dllimport SetProcessDEPPolicy(dwFlags: ulong) -> int
export import def #extern #dllimport GetProcessDEPPolicy(hProcess: *, lpFlags: *ulong, lpPermanent: *int) -> int
export import def #extern #dllimport RequestWakeupLatency(latency: e_LATENCY_TIME) -> int
export import def #extern #dllimport IsSystemResumeAutomatic() -> int
export import def #extern #dllimport GetThreadSelectorEntry(hThread: *, dwSelector: ulong, lpSelectorEntry: *) -> int
export import def #extern #dllimport SetThreadExecutionState(esFlags: ulong) -> ulong
export import def #extern #dllimport PowerCreateRequest(Context: *s__REASON_CONTEXT) -> *
export import def #extern #dllimport PowerSetRequest(PowerRequest: *, RequestType: e__POWER_REQUEST_TYPE) -> int
export import def #extern #dllimport PowerClearRequest(PowerRequest: *, RequestType: e__POWER_REQUEST_TYPE) -> int
export import def #extern #dllimport SetFileCompletionNotificationModes(FileHandle: *, Flags: uint8) -> int
export import def #extern #dllimport Wow64GetThreadSelectorEntry(hThread: *, dwSelector: ulong, lpSelectorEntry: *s__WOW64_LDT_ENTRY) -> int
export import def #extern #dllimport DebugSetProcessKillOnExit(KillOnExit: int) -> int
export import def #extern #dllimport DebugBreakProcess(Process: *) -> int
export import def #extern #dllimport PulseEvent(hEvent: *) -> int
export import def #extern #dllimport GlobalDeleteAtom(nAtom: ushort) -> ushort
export import def #extern #dllimport InitAtomTable(nSize: ulong) -> int
export import def #extern #dllimport DeleteAtom(nAtom: ushort) -> ushort
export import def #extern #dllimport SetHandleCount(uNumber: uint) -> uint
export import def #extern #dllimport RequestDeviceWakeup(hDevice: *) -> int
export import def #extern #dllimport CancelDeviceWakeupRequest(hDevice: *) -> int
export import def #extern #dllimport GetDevicePowerState(hDevice: *, pfOn: *int) -> int
export import def #extern #dllimport SetMessageWaitingIndicator(hMsgIndicator: *, ulMsgCount: ulong) -> int
export import def #extern #dllimport SetFileShortNameA(hFile: *, lpShortName: *char) -> int
export import def #extern #dllimport SetFileShortNameW(hFile: *, lpShortName: *ushort) -> int
export import def #extern #dllimport LoadModule(lpModuleName: *char, lpParameterBlock: *) -> ulong
export import def #extern #dllimport WinExec(lpCmdLine: *char, uCmdShow: uint) -> uint
export import def #extern #dllimport ClearCommBreak(hFile: *) -> int
export import def #extern #dllimport ClearCommError(hFile: *, lpErrors: *ulong, lpStat: *s__COMSTAT) -> int
export import def #extern #dllimport SetupComm(hFile: *, dwInQueue: ulong, dwOutQueue: ulong) -> int
export import def #extern #dllimport EscapeCommFunction(hFile: *, dwFunc: ulong) -> int
export import def #extern #dllimport GetCommConfig(hCommDev: *, lpCC: *s__COMMCONFIG, lpdwSize: *ulong) -> int
export import def #extern #dllimport GetCommMask(hFile: *, lpEvtMask: *ulong) -> int
export import def #extern #dllimport GetCommProperties(hFile: *, lpCommProp: *s__COMMPROP) -> int
export import def #extern #dllimport GetCommModemStatus(hFile: *, lpModemStat: *ulong) -> int
export import def #extern #dllimport GetCommState(hFile: *, lpDCB: *s__DCB) -> int
export import def #extern #dllimport GetCommTimeouts(hFile: *, lpCommTimeouts: *s__COMMTIMEOUTS) -> int
export import def #extern #dllimport PurgeComm(hFile: *, dwFlags: ulong) -> int
export import def #extern #dllimport SetCommBreak(hFile: *) -> int
export import def #extern #dllimport SetCommConfig(hCommDev: *, lpCC: *s__COMMCONFIG, dwSize: ulong) -> int
export import def #extern #dllimport SetCommMask(hFile: *, dwEvtMask: ulong) -> int
export import def #extern #dllimport SetCommState(hFile: *, lpDCB: *s__DCB) -> int
export import def #extern #dllimport SetCommTimeouts(hFile: *, lpCommTimeouts: *s__COMMTIMEOUTS) -> int
export import def #extern #dllimport TransmitCommChar(hFile: *, cChar: char) -> int
export import def #extern #dllimport WaitCommEvent(hFile: *, lpEvtMask: *ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern #dllimport OpenCommPort(uPortNumber: ulong, dwDesiredAccess: ulong, dwFlagsAndAttributes: ulong) -> *
export import def #extern #dllimport GetCommPorts(lpPortNumbers: *ulong, uPortNumbersCount: ulong, puPortNumbersFound: *ulong) -> ulong
export import def #extern #dllimport SetTapePosition(hDevice: *, dwPositionMethod: ulong, dwPartition: ulong, dwOffsetLow: ulong, dwOffsetHigh: ulong, bImmediate: int) -> ulong
export import def #extern #dllimport GetTapePosition(hDevice: *, dwPositionType: ulong, lpdwPartition: *ulong, lpdwOffsetLow: *ulong, lpdwOffsetHigh: *ulong) -> ulong
export import def #extern #dllimport PrepareTape(hDevice: *, dwOperation: ulong, bImmediate: int) -> ulong
export import def #extern #dllimport EraseTape(hDevice: *, dwEraseType: ulong, bImmediate: int) -> ulong
export import def #extern #dllimport CreateTapePartition(hDevice: *, dwPartitionMethod: ulong, dwCount: ulong, dwSize: ulong) -> ulong
export import def #extern #dllimport WriteTapemark(hDevice: *, dwTapemarkType: ulong, dwTapemarkCount: ulong, bImmediate: int) -> ulong
export import def #extern #dllimport GetTapeStatus(hDevice: *) -> ulong
export import def #extern #dllimport GetTapeParameters(hDevice: *, dwOperation: ulong, lpdwSize: *ulong, lpTapeInformation: *) -> ulong
export import def #extern #dllimport SetTapeParameters(hDevice: *, dwOperation: ulong, lpTapeInformation: *) -> ulong
export import def #extern #dllimport MulDiv(nNumber: int, nNumerator: int, nDenominator: int) -> int
export const DEPPolicyAlwaysOff: int = 0
export const DEPPolicyAlwaysOn: int = 1
export const DEPPolicyOptIn: int = 2
export const DEPPolicyOptOut: int = 3
export const DEPTotalPolicyCount: int = 4
export import def #extern #dllimport GetSystemDEPPolicy() -> e__DEP_SYSTEM_POLICY_TYPE
export import def #extern #dllimport GetSystemRegistryQuota(pdwQuotaAllowed: *ulong, pdwQuotaUsed: *ulong) -> int
export import def #extern #dllimport FileTimeToDosDateTime(lpFileTime: *s__FILETIME, lpFatDate: *ushort, lpFatTime: *ushort) -> int
export import def #extern #dllimport DosDateTimeToFileTime(wFatDate: ushort, wFatTime: ushort, lpFileTime: *s__FILETIME) -> int
export import def #extern #dllimport FormatMessageA(dwFlags: ulong, lpSource: *, dwMessageId: ulong, dwLanguageId: ulong, lpBuffer: *char, nSize: ulong, Arguments: **char) -> ulong
export import def #extern #dllimport FormatMessageW(dwFlags: ulong, lpSource: *, dwMessageId: ulong, dwLanguageId: ulong, lpBuffer: *ushort, nSize: ulong, Arguments: **char) -> ulong
export import def #extern #dllimport CreateMailslotA(lpName: *char, nMaxMessageSize: ulong, lReadTimeout: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> *
export import def #extern #dllimport CreateMailslotW(lpName: *ushort, nMaxMessageSize: ulong, lReadTimeout: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> *
export import def #extern #dllimport GetMailslotInfo(hMailslot: *, lpMaxMessageSize: *ulong, lpNextSize: *ulong, lpMessageCount: *ulong, lpReadTimeout: *ulong) -> int
export import def #extern #dllimport SetMailslotInfo(hMailslot: *, lReadTimeout: ulong) -> int
export import def #extern #dllimport EncryptFileA(lpFileName: *char) -> int
export import def #extern #dllimport EncryptFileW(lpFileName: *ushort) -> int
export import def #extern #dllimport DecryptFileA(lpFileName: *char, dwReserved: ulong) -> int
export import def #extern #dllimport DecryptFileW(lpFileName: *ushort, dwReserved: ulong) -> int
export import def #extern #dllimport FileEncryptionStatusA(lpFileName: *char, lpStatus: *ulong) -> int
export import def #extern #dllimport FileEncryptionStatusW(lpFileName: *ushort, lpStatus: *ulong) -> int
export import def #extern #dllimport OpenEncryptedFileRawA(lpFileName: *char, ulFlags: ulong, pvContext: **) -> ulong
export import def #extern #dllimport OpenEncryptedFileRawW(lpFileName: *ushort, ulFlags: ulong, pvContext: **) -> ulong
export import def #extern #dllimport ReadEncryptedFileRaw(pfExportCallback: def (*uint8, *, ulong) -> (ulong), pvCallbackContext: *, pvContext: *) -> ulong
export import def #extern #dllimport WriteEncryptedFileRaw(pfImportCallback: def (*uint8, *, *ulong) -> (ulong), pvCallbackContext: *, pvContext: *) -> ulong
export import def #extern #dllimport CloseEncryptedFileRaw(pvContext: *)
export import def #extern #dllimport lstrcmpA(lpString1: *char, lpString2: *char) -> int
export import def #extern #dllimport lstrcmpW(lpString1: *ushort, lpString2: *ushort) -> int
export import def #extern #dllimport lstrcmpiA(lpString1: *char, lpString2: *char) -> int
export import def #extern #dllimport lstrcmpiW(lpString1: *ushort, lpString2: *ushort) -> int
export import def #extern #dllimport lstrcpynA(lpString1: *char, lpString2: *char, iMaxLength: int) -> *char
export import def #extern #dllimport lstrcpynW(lpString1: *ushort, lpString2: *ushort, iMaxLength: int) -> *ushort
export import def #extern #dllimport lstrcpyA(lpString1: *char, lpString2: *char) -> *char
export import def #extern #dllimport lstrcpyW(lpString1: *ushort, lpString2: *ushort) -> *ushort
export import def #extern #dllimport lstrcatA(lpString1: *char, lpString2: *char) -> *char
export import def #extern #dllimport lstrcatW(lpString1: *ushort, lpString2: *ushort) -> *ushort
export import def #extern #dllimport lstrlenA(lpString: *char) -> int
export import def #extern #dllimport lstrlenW(lpString: *ushort) -> int
export import def #extern #dllimport OpenFile(lpFileName: *char, lpReOpenBuff: *s__OFSTRUCT, uStyle: uint) -> int
export import def #extern #dllimport _lopen(lpPathName: *char, iReadWrite: int) -> int
export import def #extern #dllimport _lcreat(lpPathName: *char, iAttribute: int) -> int
export import def #extern #dllimport _lread(hFile: int, lpBuffer: *, uBytes: uint) -> uint
export import def #extern #dllimport _lwrite(hFile: int, lpBuffer: *char, uBytes: uint) -> uint
export import def #extern #dllimport _hread(hFile: int, lpBuffer: *, lBytes: long) -> long
export import def #extern #dllimport _hwrite(hFile: int, lpBuffer: *char, lBytes: long) -> long
export import def #extern #dllimport _lclose(hFile: int) -> int
export import def #extern #dllimport _llseek(hFile: int, lOffset: long, iOrigin: int) -> long
export import def #extern #dllimport IsTextUnicode(lpv: *, iSize: int, lpiResult: *int) -> int
export import def #extern #dllimport BackupRead(hFile: *, lpBuffer: *uint8, nNumberOfBytesToRead: ulong, lpNumberOfBytesRead: *ulong, bAbort: int, bProcessSecurity: int, lpContext: **) -> int
export import def #extern #dllimport BackupSeek(hFile: *, dwLowBytesToSeek: ulong, dwHighBytesToSeek: ulong, lpdwLowByteSeeked: *ulong, lpdwHighByteSeeked: *ulong, lpContext: **) -> int
export import def #extern #dllimport BackupWrite(hFile: *, lpBuffer: *uint8, nNumberOfBytesToWrite: ulong, lpNumberOfBytesWritten: *ulong, bAbort: int, bProcessSecurity: int, lpContext: **) -> int
export import def #extern #dllimport OpenMutexA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport CreateSemaphoreA(lpSemaphoreAttributes: *s__SECURITY_ATTRIBUTES, lInitialCount: long, lMaximumCount: long, lpName: *char) -> *
export import def #extern #dllimport OpenSemaphoreA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport CreateWaitableTimerA(lpTimerAttributes: *s__SECURITY_ATTRIBUTES, bManualReset: int, lpTimerName: *char) -> *
export import def #extern #dllimport OpenWaitableTimerA(dwDesiredAccess: ulong, bInheritHandle: int, lpTimerName: *char) -> *
export import def #extern #dllimport CreateSemaphoreExA(lpSemaphoreAttributes: *s__SECURITY_ATTRIBUTES, lInitialCount: long, lMaximumCount: long, lpName: *char, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateWaitableTimerExA(lpTimerAttributes: *s__SECURITY_ATTRIBUTES, lpTimerName: *char, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateFileMappingA(hFile: *, lpFileMappingAttributes: *s__SECURITY_ATTRIBUTES, flProtect: ulong, dwMaximumSizeHigh: ulong, dwMaximumSizeLow: ulong, lpName: *char) -> *
export import def #extern #dllimport CreateFileMappingNumaA(hFile: *, lpFileMappingAttributes: *s__SECURITY_ATTRIBUTES, flProtect: ulong, dwMaximumSizeHigh: ulong, dwMaximumSizeLow: ulong, lpName: *char, nndPreferred: ulong) -> *
export import def #extern #dllimport OpenFileMappingA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport GetLogicalDriveStringsA(nBufferLength: ulong, lpBuffer: *char) -> ulong
export import def #extern #dllimport LoadPackagedLibrary(lpwLibFileName: *ushort, Reserved: ulong) -> *s_HINSTANCE__
export import def #extern #dllimport QueryFullProcessImageNameA(hProcess: *, dwFlags: ulong, lpExeName: *char, lpdwSize: *ulong) -> int
export import def #extern #dllimport QueryFullProcessImageNameW(hProcess: *, dwFlags: ulong, lpExeName: *ushort, lpdwSize: *ulong) -> int
export const ProcThreadAttributeParentProcess: int = 0
export const ProcThreadAttributeHandleList: int = 2
export const ProcThreadAttributeGroupAffinity: int = 3
export const ProcThreadAttributePreferredNode: int = 4
export const ProcThreadAttributeIdealProcessor: int = 5
export const ProcThreadAttributeUmsThread: int = 6
export const ProcThreadAttributeMitigationPolicy: int = 7
export const ProcThreadAttributeSecurityCapabilities: int = 9
export const ProcThreadAttributeProtectionLevel: int = 11
export const ProcThreadAttributeJobList: int = 13
export const ProcThreadAttributeChildProcessPolicy: int = 14
export const ProcThreadAttributeAllApplicationPackagesPolicy: int = 15
export const ProcThreadAttributeWin32kFilter: int = 16
export const ProcThreadAttributeSafeOpenPromptOriginClaim: int = 17
export const ProcThreadAttributeDesktopAppPolicy: int = 18
export const ProcThreadAttributePseudoConsole: int = 22
export const ProcThreadAttributeMitigationAuditPolicy: int = 24
export const ProcThreadAttributeMachineType: int = 25
export const ProcThreadAttributeComponentFilter: int = 26
export const ProcThreadAttributeEnableOptionalXStateFeatures: int = 27
export const ProcThreadAttributeTrustedApp: int = 29
export import def #extern #dllimport GetStartupInfoA(lpStartupInfo: *s__STARTUPINFOA)
export import def #extern #dllimport GetFirmwareEnvironmentVariableA(lpName: *char, lpGuid: *char, pBuffer: *, nSize: ulong) -> ulong
export import def #extern #dllimport GetFirmwareEnvironmentVariableW(lpName: *ushort, lpGuid: *ushort, pBuffer: *, nSize: ulong) -> ulong
export import def #extern #dllimport GetFirmwareEnvironmentVariableExA(lpName: *char, lpGuid: *char, pBuffer: *, nSize: ulong, pdwAttribubutes: *ulong) -> ulong
export import def #extern #dllimport GetFirmwareEnvironmentVariableExW(lpName: *ushort, lpGuid: *ushort, pBuffer: *, nSize: ulong, pdwAttribubutes: *ulong) -> ulong
export import def #extern #dllimport SetFirmwareEnvironmentVariableA(lpName: *char, lpGuid: *char, pValue: *, nSize: ulong) -> int
export import def #extern #dllimport SetFirmwareEnvironmentVariableW(lpName: *ushort, lpGuid: *ushort, pValue: *, nSize: ulong) -> int
export import def #extern #dllimport SetFirmwareEnvironmentVariableExA(lpName: *char, lpGuid: *char, pValue: *, nSize: ulong, dwAttributes: ulong) -> int
export import def #extern #dllimport SetFirmwareEnvironmentVariableExW(lpName: *ushort, lpGuid: *ushort, pValue: *, nSize: ulong, dwAttributes: ulong) -> int
export import def #extern #dllimport GetFirmwareType(FirmwareType: *e__FIRMWARE_TYPE) -> int
export import def #extern #dllimport IsNativeVhdBoot(NativeVhdBoot: *int) -> int
export import def #extern #dllimport FindResourceA(hModule: *s_HINSTANCE__, lpName: *char, lpType: *char) -> *s_HRSRC__
export import def #extern #dllimport FindResourceExA(hModule: *s_HINSTANCE__, lpType: *char, lpName: *char, wLanguage: ushort) -> *s_HRSRC__
export import def #extern #dllimport EnumResourceTypesA(hModule: *s_HINSTANCE__, lpEnumFunc: def (*s_HINSTANCE__, *char, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumResourceTypesW(hModule: *s_HINSTANCE__, lpEnumFunc: def (*s_HINSTANCE__, *ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumResourceLanguagesA(hModule: *s_HINSTANCE__, lpType: *char, lpName: *char, lpEnumFunc: def (*s_HINSTANCE__, *char, *char, ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumResourceLanguagesW(hModule: *s_HINSTANCE__, lpType: *ushort, lpName: *ushort, lpEnumFunc: def (*s_HINSTANCE__, *ushort, *ushort, ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport BeginUpdateResourceA(pFileName: *char, bDeleteExistingResources: int) -> *
export import def #extern #dllimport BeginUpdateResourceW(pFileName: *ushort, bDeleteExistingResources: int) -> *
export import def #extern #dllimport UpdateResourceA(hUpdate: *, lpType: *char, lpName: *char, wLanguage: ushort, lpData: *, cb: ulong) -> int
export import def #extern #dllimport UpdateResourceW(hUpdate: *, lpType: *ushort, lpName: *ushort, wLanguage: ushort, lpData: *, cb: ulong) -> int
export import def #extern #dllimport EndUpdateResourceA(hUpdate: *, fDiscard: int) -> int
export import def #extern #dllimport EndUpdateResourceW(hUpdate: *, fDiscard: int) -> int
export import def #extern #dllimport GlobalAddAtomA(lpString: *char) -> ushort
export import def #extern #dllimport GlobalAddAtomW(lpString: *ushort) -> ushort
export import def #extern #dllimport GlobalAddAtomExA(lpString: *char, Flags: ulong) -> ushort
export import def #extern #dllimport GlobalAddAtomExW(lpString: *ushort, Flags: ulong) -> ushort
export import def #extern #dllimport GlobalFindAtomA(lpString: *char) -> ushort
export import def #extern #dllimport GlobalFindAtomW(lpString: *ushort) -> ushort
export import def #extern #dllimport GlobalGetAtomNameA(nAtom: ushort, lpBuffer: *char, nSize: int) -> uint
export import def #extern #dllimport GlobalGetAtomNameW(nAtom: ushort, lpBuffer: *ushort, nSize: int) -> uint
export import def #extern #dllimport AddAtomA(lpString: *char) -> ushort
export import def #extern #dllimport AddAtomW(lpString: *ushort) -> ushort
export import def #extern #dllimport FindAtomA(lpString: *char) -> ushort
export import def #extern #dllimport FindAtomW(lpString: *ushort) -> ushort
export import def #extern #dllimport GetAtomNameA(nAtom: ushort, lpBuffer: *char, nSize: int) -> uint
export import def #extern #dllimport GetAtomNameW(nAtom: ushort, lpBuffer: *ushort, nSize: int) -> uint
export import def #extern #dllimport GetProfileIntA(lpAppName: *char, lpKeyName: *char, nDefault: int) -> uint
export import def #extern #dllimport GetProfileIntW(lpAppName: *ushort, lpKeyName: *ushort, nDefault: int) -> uint
export import def #extern #dllimport GetProfileStringA(lpAppName: *char, lpKeyName: *char, lpDefault: *char, lpReturnedString: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetProfileStringW(lpAppName: *ushort, lpKeyName: *ushort, lpDefault: *ushort, lpReturnedString: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport WriteProfileStringA(lpAppName: *char, lpKeyName: *char, lpString: *char) -> int
export import def #extern #dllimport WriteProfileStringW(lpAppName: *ushort, lpKeyName: *ushort, lpString: *ushort) -> int
export import def #extern #dllimport GetProfileSectionA(lpAppName: *char, lpReturnedString: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetProfileSectionW(lpAppName: *ushort, lpReturnedString: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport WriteProfileSectionA(lpAppName: *char, lpString: *char) -> int
export import def #extern #dllimport WriteProfileSectionW(lpAppName: *ushort, lpString: *ushort) -> int
export import def #extern #dllimport GetPrivateProfileIntA(lpAppName: *char, lpKeyName: *char, nDefault: int, lpFileName: *char) -> uint
export import def #extern #dllimport GetPrivateProfileIntW(lpAppName: *ushort, lpKeyName: *ushort, nDefault: int, lpFileName: *ushort) -> uint
export import def #extern #dllimport GetPrivateProfileStringA(lpAppName: *char, lpKeyName: *char, lpDefault: *char, lpReturnedString: *char, nSize: ulong, lpFileName: *char) -> ulong
export import def #extern #dllimport GetPrivateProfileStringW(lpAppName: *ushort, lpKeyName: *ushort, lpDefault: *ushort, lpReturnedString: *ushort, nSize: ulong, lpFileName: *ushort) -> ulong
export import def #extern #dllimport WritePrivateProfileStringA(lpAppName: *char, lpKeyName: *char, lpString: *char, lpFileName: *char) -> int
export import def #extern #dllimport WritePrivateProfileStringW(lpAppName: *ushort, lpKeyName: *ushort, lpString: *ushort, lpFileName: *ushort) -> int
export import def #extern #dllimport GetPrivateProfileSectionA(lpAppName: *char, lpReturnedString: *char, nSize: ulong, lpFileName: *char) -> ulong
export import def #extern #dllimport GetPrivateProfileSectionW(lpAppName: *ushort, lpReturnedString: *ushort, nSize: ulong, lpFileName: *ushort) -> ulong
export import def #extern #dllimport WritePrivateProfileSectionA(lpAppName: *char, lpString: *char, lpFileName: *char) -> int
export import def #extern #dllimport WritePrivateProfileSectionW(lpAppName: *ushort, lpString: *ushort, lpFileName: *ushort) -> int
export import def #extern #dllimport GetPrivateProfileSectionNamesA(lpszReturnBuffer: *char, nSize: ulong, lpFileName: *char) -> ulong
export import def #extern #dllimport GetPrivateProfileSectionNamesW(lpszReturnBuffer: *ushort, nSize: ulong, lpFileName: *ushort) -> ulong
export import def #extern #dllimport GetPrivateProfileStructA(lpszSection: *char, lpszKey: *char, lpStruct: *, uSizeStruct: uint, szFile: *char) -> int
export import def #extern #dllimport GetPrivateProfileStructW(lpszSection: *ushort, lpszKey: *ushort, lpStruct: *, uSizeStruct: uint, szFile: *ushort) -> int
export import def #extern #dllimport WritePrivateProfileStructA(lpszSection: *char, lpszKey: *char, lpStruct: *, uSizeStruct: uint, szFile: *char) -> int
export import def #extern #dllimport WritePrivateProfileStructW(lpszSection: *ushort, lpszKey: *ushort, lpStruct: *, uSizeStruct: uint, szFile: *ushort) -> int
export import def #extern #dllimport SetDllDirectoryA(lpPathName: *char) -> int
export import def #extern #dllimport SetDllDirectoryW(lpPathName: *ushort) -> int
export import def #extern #dllimport GetDllDirectoryA(nBufferLength: ulong, lpBuffer: *char) -> ulong
export import def #extern #dllimport GetDllDirectoryW(nBufferLength: ulong, lpBuffer: *ushort) -> ulong
export import def #extern #dllimport SetSearchPathMode(Flags: ulong) -> int
export import def #extern #dllimport CreateDirectoryExA(lpTemplateDirectory: *char, lpNewDirectory: *char, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateDirectoryExW(lpTemplateDirectory: *ushort, lpNewDirectory: *ushort, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateDirectoryTransactedA(lpTemplateDirectory: *char, lpNewDirectory: *char, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, hTransaction: *) -> int
export import def #extern #dllimport CreateDirectoryTransactedW(lpTemplateDirectory: *ushort, lpNewDirectory: *ushort, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, hTransaction: *) -> int
export import def #extern #dllimport RemoveDirectoryTransactedA(lpPathName: *char, hTransaction: *) -> int
export import def #extern #dllimport RemoveDirectoryTransactedW(lpPathName: *ushort, hTransaction: *) -> int
export import def #extern #dllimport GetFullPathNameTransactedA(lpFileName: *char, nBufferLength: ulong, lpBuffer: *char, lpFilePart: **char, hTransaction: *) -> ulong
export import def #extern #dllimport GetFullPathNameTransactedW(lpFileName: *ushort, nBufferLength: ulong, lpBuffer: *ushort, lpFilePart: **ushort, hTransaction: *) -> ulong
export import def #extern #dllimport DefineDosDeviceA(dwFlags: ulong, lpDeviceName: *char, lpTargetPath: *char) -> int
export import def #extern #dllimport QueryDosDeviceA(lpDeviceName: *char, lpTargetPath: *char, ucchMax: ulong) -> ulong
export import def #extern #dllimport CreateFileTransactedA(lpFileName: *char, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *, hTransaction: *, pusMiniVersion: *ushort, lpExtendedParameter: *) -> *
export import def #extern #dllimport CreateFileTransactedW(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *, hTransaction: *, pusMiniVersion: *ushort, lpExtendedParameter: *) -> *
export import def #extern #dllimport ReOpenFile(hOriginalFile: *, dwDesiredAccess: ulong, dwShareMode: ulong, dwFlagsAndAttributes: ulong) -> *
export import def #extern #dllimport SetFileAttributesTransactedA(lpFileName: *char, dwFileAttributes: ulong, hTransaction: *) -> int
export import def #extern #dllimport SetFileAttributesTransactedW(lpFileName: *ushort, dwFileAttributes: ulong, hTransaction: *) -> int
export import def #extern #dllimport GetFileAttributesTransactedA(lpFileName: *char, fInfoLevelId: e__GET_FILEEX_INFO_LEVELS, lpFileInformation: *, hTransaction: *) -> int
export import def #extern #dllimport GetFileAttributesTransactedW(lpFileName: *ushort, fInfoLevelId: e__GET_FILEEX_INFO_LEVELS, lpFileInformation: *, hTransaction: *) -> int
export import def #extern #dllimport GetCompressedFileSizeTransactedA(lpFileName: *char, lpFileSizeHigh: *ulong, hTransaction: *) -> ulong
export import def #extern #dllimport GetCompressedFileSizeTransactedW(lpFileName: *ushort, lpFileSizeHigh: *ulong, hTransaction: *) -> ulong
export import def #extern #dllimport DeleteFileTransactedA(lpFileName: *char, hTransaction: *) -> int
export import def #extern #dllimport DeleteFileTransactedW(lpFileName: *ushort, hTransaction: *) -> int
export import def #extern #dllimport CheckNameLegalDOS8Dot3A(lpName: *char, lpOemName: *char, OemNameSize: ulong, pbNameContainsSpaces: *int, pbNameLegal: *int) -> int
export import def #extern #dllimport CheckNameLegalDOS8Dot3W(lpName: *ushort, lpOemName: *char, OemNameSize: ulong, pbNameContainsSpaces: *int, pbNameLegal: *int) -> int
export import def #extern #dllimport FindFirstFileTransactedA(lpFileName: *char, fInfoLevelId: e__FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: e__FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong, hTransaction: *) -> *
export import def #extern #dllimport FindFirstFileTransactedW(lpFileName: *ushort, fInfoLevelId: e__FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: e__FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong, hTransaction: *) -> *
export import def #extern #dllimport CopyFileA(lpExistingFileName: *char, lpNewFileName: *char, bFailIfExists: int) -> int
export import def #extern #dllimport CopyFileW(lpExistingFileName: *ushort, lpNewFileName: *ushort, bFailIfExists: int) -> int
export import def #extern #dllimport CopyFileExA(lpExistingFileName: *char, lpNewFileName: *char, lpProgressRoutine: def (u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, pbCancel: *int, dwCopyFlags: ulong) -> int
export import def #extern #dllimport CopyFileExW(lpExistingFileName: *ushort, lpNewFileName: *ushort, lpProgressRoutine: def (u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, pbCancel: *int, dwCopyFlags: ulong) -> int
export import def #extern #dllimport CopyFileTransactedA(lpExistingFileName: *char, lpNewFileName: *char, lpProgressRoutine: def (u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, pbCancel: *int, dwCopyFlags: ulong, hTransaction: *) -> int
export import def #extern #dllimport CopyFileTransactedW(lpExistingFileName: *ushort, lpNewFileName: *ushort, lpProgressRoutine: def (u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, pbCancel: *int, dwCopyFlags: ulong, hTransaction: *) -> int
export const COPYFILE2_CALLBACK_NONE: int = 0
export const COPYFILE2_CALLBACK_CHUNK_STARTED: int = 1
export const COPYFILE2_CALLBACK_CHUNK_FINISHED: int = 2
export const COPYFILE2_CALLBACK_STREAM_STARTED: int = 3
export const COPYFILE2_CALLBACK_STREAM_FINISHED: int = 4
export const COPYFILE2_CALLBACK_POLL_CONTINUE: int = 5
export const COPYFILE2_CALLBACK_ERROR: int = 6
export const COPYFILE2_CALLBACK_MAX: int = 7
export const COPYFILE2_PROGRESS_CONTINUE: int = 0
export const COPYFILE2_PROGRESS_CANCEL: int = 1
export const COPYFILE2_PROGRESS_STOP: int = 2
export const COPYFILE2_PROGRESS_QUIET: int = 3
export const COPYFILE2_PROGRESS_PAUSE: int = 4
export const COPYFILE2_PHASE_NONE: int = 0
export const COPYFILE2_PHASE_PREPARE_SOURCE: int = 1
export const COPYFILE2_PHASE_PREPARE_DEST: int = 2
export const COPYFILE2_PHASE_READ_SOURCE: int = 3
export const COPYFILE2_PHASE_WRITE_DESTINATION: int = 4
export const COPYFILE2_PHASE_SERVER_COPY: int = 5
export const COPYFILE2_PHASE_NAMEGRAFT_COPY: int = 6
export const COPYFILE2_PHASE_MAX: int = 7
export import def #extern #dllimport CopyFile2(pwszExistingFileName: *ushort, pwszNewFileName: *ushort, pExtendedParameters: *s_COPYFILE2_EXTENDED_PARAMETERS) -> long
export import def #extern #dllimport MoveFileA(lpExistingFileName: *char, lpNewFileName: *char) -> int
export import def #extern #dllimport MoveFileW(lpExistingFileName: *ushort, lpNewFileName: *ushort) -> int
export import def #extern #dllimport MoveFileExA(lpExistingFileName: *char, lpNewFileName: *char, dwFlags: ulong) -> int
export import def #extern #dllimport MoveFileExW(lpExistingFileName: *ushort, lpNewFileName: *ushort, dwFlags: ulong) -> int
export import def #extern #dllimport MoveFileWithProgressA(lpExistingFileName: *char, lpNewFileName: *char, lpProgressRoutine: def (u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, dwFlags: ulong) -> int
export import def #extern #dllimport MoveFileWithProgressW(lpExistingFileName: *ushort, lpNewFileName: *ushort, lpProgressRoutine: def (u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, dwFlags: ulong) -> int
export import def #extern #dllimport MoveFileTransactedA(lpExistingFileName: *char, lpNewFileName: *char, lpProgressRoutine: def (u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, dwFlags: ulong, hTransaction: *) -> int
export import def #extern #dllimport MoveFileTransactedW(lpExistingFileName: *ushort, lpNewFileName: *ushort, lpProgressRoutine: def (u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, u__LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, dwFlags: ulong, hTransaction: *) -> int
export import def #extern #dllimport ReplaceFileA(lpReplacedFileName: *char, lpReplacementFileName: *char, lpBackupFileName: *char, dwReplaceFlags: ulong, lpExclude: *, lpReserved: *) -> int
export import def #extern #dllimport ReplaceFileW(lpReplacedFileName: *ushort, lpReplacementFileName: *ushort, lpBackupFileName: *ushort, dwReplaceFlags: ulong, lpExclude: *, lpReserved: *) -> int
export import def #extern #dllimport CreateHardLinkA(lpFileName: *char, lpExistingFileName: *char, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateHardLinkW(lpFileName: *ushort, lpExistingFileName: *ushort, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateHardLinkTransactedA(lpFileName: *char, lpExistingFileName: *char, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, hTransaction: *) -> int
export import def #extern #dllimport CreateHardLinkTransactedW(lpFileName: *ushort, lpExistingFileName: *ushort, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, hTransaction: *) -> int
export import def #extern #dllimport FindFirstStreamTransactedW(lpFileName: *ushort, InfoLevel: e__STREAM_INFO_LEVELS, lpFindStreamData: *, dwFlags: ulong, hTransaction: *) -> *
export import def #extern #dllimport FindFirstFileNameTransactedW(lpFileName: *ushort, dwFlags: ulong, StringLength: *ulong, LinkName: *ushort, hTransaction: *) -> *
export import def #extern #dllimport CreateNamedPipeA(lpName: *char, dwOpenMode: ulong, dwPipeMode: ulong, nMaxInstances: ulong, nOutBufferSize: ulong, nInBufferSize: ulong, nDefaultTimeOut: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> *
export import def #extern #dllimport GetNamedPipeHandleStateA(hNamedPipe: *, lpState: *ulong, lpCurInstances: *ulong, lpMaxCollectionCount: *ulong, lpCollectDataTimeout: *ulong, lpUserName: *char, nMaxUserNameSize: ulong) -> int
export import def #extern #dllimport CallNamedPipeA(lpNamedPipeName: *char, lpInBuffer: *, nInBufferSize: ulong, lpOutBuffer: *, nOutBufferSize: ulong, lpBytesRead: *ulong, nTimeOut: ulong) -> int
export import def #extern #dllimport WaitNamedPipeA(lpNamedPipeName: *char, nTimeOut: ulong) -> int
export import def #extern #dllimport GetNamedPipeClientComputerNameA(Pipe: *, ClientComputerName: *char, ClientComputerNameLength: ulong) -> int
export import def #extern #dllimport GetNamedPipeClientProcessId(Pipe: *, ClientProcessId: *ulong) -> int
export import def #extern #dllimport GetNamedPipeClientSessionId(Pipe: *, ClientSessionId: *ulong) -> int
export import def #extern #dllimport GetNamedPipeServerProcessId(Pipe: *, ServerProcessId: *ulong) -> int
export import def #extern #dllimport GetNamedPipeServerSessionId(Pipe: *, ServerSessionId: *ulong) -> int
export import def #extern #dllimport SetVolumeLabelA(lpRootPathName: *char, lpVolumeName: *char) -> int
export import def #extern #dllimport SetVolumeLabelW(lpRootPathName: *ushort, lpVolumeName: *ushort) -> int
export import def #extern #dllimport SetFileBandwidthReservation(hFile: *, nPeriodMilliseconds: ulong, nBytesPerPeriod: ulong, bDiscardable: int, lpTransferSize: *ulong, lpNumOutstandingRequests: *ulong) -> int
export import def #extern #dllimport GetFileBandwidthReservation(hFile: *, lpPeriodMilliseconds: *ulong, lpBytesPerPeriod: *ulong, pDiscardable: *int, lpTransferSize: *ulong, lpNumOutstandingRequests: *ulong) -> int
export import def #extern #dllimport ClearEventLogA(hEventLog: *, lpBackupFileName: *char) -> int
export import def #extern #dllimport ClearEventLogW(hEventLog: *, lpBackupFileName: *ushort) -> int
export import def #extern #dllimport BackupEventLogA(hEventLog: *, lpBackupFileName: *char) -> int
export import def #extern #dllimport BackupEventLogW(hEventLog: *, lpBackupFileName: *ushort) -> int
export import def #extern #dllimport CloseEventLog(hEventLog: *) -> int
export import def #extern #dllimport DeregisterEventSource(hEventLog: *) -> int
export import def #extern #dllimport NotifyChangeEventLog(hEventLog: *, hEvent: *) -> int
export import def #extern #dllimport GetNumberOfEventLogRecords(hEventLog: *, NumberOfRecords: *ulong) -> int
export import def #extern #dllimport GetOldestEventLogRecord(hEventLog: *, OldestRecord: *ulong) -> int
export import def #extern #dllimport OpenEventLogA(lpUNCServerName: *char, lpSourceName: *char) -> *
export import def #extern #dllimport OpenEventLogW(lpUNCServerName: *ushort, lpSourceName: *ushort) -> *
export import def #extern #dllimport RegisterEventSourceA(lpUNCServerName: *char, lpSourceName: *char) -> *
export import def #extern #dllimport RegisterEventSourceW(lpUNCServerName: *ushort, lpSourceName: *ushort) -> *
export import def #extern #dllimport OpenBackupEventLogA(lpUNCServerName: *char, lpFileName: *char) -> *
export import def #extern #dllimport OpenBackupEventLogW(lpUNCServerName: *ushort, lpFileName: *ushort) -> *
export import def #extern #dllimport ReadEventLogA(hEventLog: *, dwReadFlags: ulong, dwRecordOffset: ulong, lpBuffer: *, nNumberOfBytesToRead: ulong, pnBytesRead: *ulong, pnMinNumberOfBytesNeeded: *ulong) -> int
export import def #extern #dllimport ReadEventLogW(hEventLog: *, dwReadFlags: ulong, dwRecordOffset: ulong, lpBuffer: *, nNumberOfBytesToRead: ulong, pnBytesRead: *ulong, pnMinNumberOfBytesNeeded: *ulong) -> int
export import def #extern #dllimport ReportEventA(hEventLog: *, wType: ushort, wCategory: ushort, dwEventID: ulong, lpUserSid: *, wNumStrings: ushort, dwDataSize: ulong, lpStrings: **char, lpRawData: *) -> int
export import def #extern #dllimport ReportEventW(hEventLog: *, wType: ushort, wCategory: ushort, dwEventID: ulong, lpUserSid: *, wNumStrings: ushort, dwDataSize: ulong, lpStrings: **ushort, lpRawData: *) -> int
export import def #extern #dllimport GetEventLogInformation(hEventLog: *, dwInfoLevel: ulong, lpBuffer: *, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport OperationStart(OperationStartParams: *s__OPERATION_START_PARAMETERS) -> int
export import def #extern #dllimport OperationEnd(OperationEndParams: *s__OPERATION_END_PARAMETERS) -> int
export import def #extern #dllimport AccessCheckAndAuditAlarmA(SubsystemName: *char, HandleId: *, ObjectTypeName: *char, ObjectName: *char, SecurityDescriptor: *, DesiredAccess: ulong, GenericMapping: *s__GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatus: *int, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeAndAuditAlarmA(SubsystemName: *char, HandleId: *, ObjectTypeName: *char, ObjectName: *char, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: e__AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *s__OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *s__GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatus: *int, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName: *char, HandleId: *, ObjectTypeName: *char, ObjectName: *char, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: e__AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *s__OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *s__GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatusList: *ulong, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName: *char, HandleId: *, ClientToken: *, ObjectTypeName: *char, ObjectName: *char, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: e__AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *s__OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *s__GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatusList: *ulong, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport ObjectOpenAuditAlarmA(SubsystemName: *char, HandleId: *, ObjectTypeName: *char, ObjectName: *char, pSecurityDescriptor: *, ClientToken: *, DesiredAccess: ulong, GrantedAccess: ulong, Privileges: *s__PRIVILEGE_SET, ObjectCreation: int, AccessGranted: int, GenerateOnClose: *int) -> int
export import def #extern #dllimport ObjectPrivilegeAuditAlarmA(SubsystemName: *char, HandleId: *, ClientToken: *, DesiredAccess: ulong, Privileges: *s__PRIVILEGE_SET, AccessGranted: int) -> int
export import def #extern #dllimport ObjectCloseAuditAlarmA(SubsystemName: *char, HandleId: *, GenerateOnClose: int) -> int
export import def #extern #dllimport ObjectDeleteAuditAlarmA(SubsystemName: *char, HandleId: *, GenerateOnClose: int) -> int
export import def #extern #dllimport PrivilegedServiceAuditAlarmA(SubsystemName: *char, ServiceName: *char, ClientToken: *, Privileges: *s__PRIVILEGE_SET, AccessGranted: int) -> int
export import def #extern #dllimport AddConditionalAce(pAcl: *s__ACL, dwAceRevision: ulong, AceFlags: ulong, AceType: uint8, AccessMask: ulong, pSid: *, ConditionStr: *ushort, ReturnLength: *ulong) -> int
export import def #extern #dllimport SetFileSecurityA(lpFileName: *char, SecurityInformation: ulong, pSecurityDescriptor: *) -> int
export import def #extern #dllimport GetFileSecurityA(lpFileName: *char, RequestedInformation: ulong, pSecurityDescriptor: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport ReadDirectoryChangesW(hDirectory: *, lpBuffer: *, nBufferLength: ulong, bWatchSubtree: int, dwNotifyFilter: ulong, lpBytesReturned: *ulong, lpOverlapped: *s__OVERLAPPED, lpCompletionRoutine: def (ulong, ulong, *s__OVERLAPPED) -> ()) -> int
export import def #extern #dllimport ReadDirectoryChangesExW(hDirectory: *, lpBuffer: *, nBufferLength: ulong, bWatchSubtree: int, dwNotifyFilter: ulong, lpBytesReturned: *ulong, lpOverlapped: *s__OVERLAPPED, lpCompletionRoutine: def (ulong, ulong, *s__OVERLAPPED) -> (), ReadDirectoryNotifyInformationClass: e__READ_DIRECTORY_NOTIFY_INFORMATION_CLASS) -> int
export import def #extern #dllimport MapViewOfFileExNuma(hFileMappingObject: *, dwDesiredAccess: ulong, dwFileOffsetHigh: ulong, dwFileOffsetLow: ulong, dwNumberOfBytesToMap: uint64, lpBaseAddress: *, nndPreferred: ulong) -> *
export import def #extern #dllimport IsBadReadPtr(lp: *, ucb: uint64) -> int
export import def #extern #dllimport IsBadWritePtr(lp: *, ucb: uint64) -> int
export import def #extern #dllimport IsBadHugeReadPtr(lp: *, ucb: uint64) -> int
export import def #extern #dllimport IsBadHugeWritePtr(lp: *, ucb: uint64) -> int
export import def #extern #dllimport IsBadCodePtr(lpfn: *INT_PTR ()) -> int
export import def #extern #dllimport IsBadStringPtrA(lpsz: *char, ucchMax: uint64) -> int
export import def #extern #dllimport IsBadStringPtrW(lpsz: *ushort, ucchMax: uint64) -> int
export import def #extern #dllimport LookupAccountSidA(lpSystemName: *char, Sid: *, Name: *char, cchName: *ulong, ReferencedDomainName: *char, cchReferencedDomainName: *ulong, peUse: *e__SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountSidW(lpSystemName: *ushort, Sid: *, Name: *ushort, cchName: *ulong, ReferencedDomainName: *ushort, cchReferencedDomainName: *ulong, peUse: *e__SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountNameA(lpSystemName: *char, lpAccountName: *char, Sid: *, cbSid: *ulong, ReferencedDomainName: *char, cchReferencedDomainName: *ulong, peUse: *e__SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountNameW(lpSystemName: *ushort, lpAccountName: *ushort, Sid: *, cbSid: *ulong, ReferencedDomainName: *ushort, cchReferencedDomainName: *ulong, peUse: *e__SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountNameLocalA(lpAccountName: *char, Sid: *, cbSid: *ulong, ReferencedDomainName: *char, cchReferencedDomainName: *ulong, peUse: *e__SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountNameLocalW(lpAccountName: *ushort, Sid: *, cbSid: *ulong, ReferencedDomainName: *ushort, cchReferencedDomainName: *ulong, peUse: *e__SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountSidLocalA(Sid: *, Name: *char, cchName: *ulong, ReferencedDomainName: *char, cchReferencedDomainName: *ulong, peUse: *e__SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountSidLocalW(Sid: *, Name: *ushort, cchName: *ulong, ReferencedDomainName: *ushort, cchReferencedDomainName: *ulong, peUse: *e__SID_NAME_USE) -> int
export import def #extern #dllimport LookupPrivilegeValueA(lpSystemName: *char, lpName: *char, lpLuid: *s__LUID) -> int
export import def #extern #dllimport LookupPrivilegeValueW(lpSystemName: *ushort, lpName: *ushort, lpLuid: *s__LUID) -> int
export import def #extern #dllimport LookupPrivilegeNameA(lpSystemName: *char, lpLuid: *s__LUID, lpName: *char, cchName: *ulong) -> int
export import def #extern #dllimport LookupPrivilegeNameW(lpSystemName: *ushort, lpLuid: *s__LUID, lpName: *ushort, cchName: *ulong) -> int
export import def #extern #dllimport LookupPrivilegeDisplayNameA(lpSystemName: *char, lpName: *char, lpDisplayName: *char, cchDisplayName: *ulong, lpLanguageId: *ulong) -> int
export import def #extern #dllimport LookupPrivilegeDisplayNameW(lpSystemName: *ushort, lpName: *ushort, lpDisplayName: *ushort, cchDisplayName: *ulong, lpLanguageId: *ulong) -> int
export import def #extern #dllimport BuildCommDCBA(lpDef: *char, lpDCB: *s__DCB) -> int
export import def #extern #dllimport BuildCommDCBW(lpDef: *ushort, lpDCB: *s__DCB) -> int
export import def #extern #dllimport BuildCommDCBAndTimeoutsA(lpDef: *char, lpDCB: *s__DCB, lpCommTimeouts: *s__COMMTIMEOUTS) -> int
export import def #extern #dllimport BuildCommDCBAndTimeoutsW(lpDef: *ushort, lpDCB: *s__DCB, lpCommTimeouts: *s__COMMTIMEOUTS) -> int
export import def #extern #dllimport CommConfigDialogA(lpszName: *char, hWnd: *s_HWND__, lpCC: *s__COMMCONFIG) -> int
export import def #extern #dllimport CommConfigDialogW(lpszName: *ushort, hWnd: *s_HWND__, lpCC: *s__COMMCONFIG) -> int
export import def #extern #dllimport GetDefaultCommConfigA(lpszName: *char, lpCC: *s__COMMCONFIG, lpdwSize: *ulong) -> int
export import def #extern #dllimport GetDefaultCommConfigW(lpszName: *ushort, lpCC: *s__COMMCONFIG, lpdwSize: *ulong) -> int
export import def #extern #dllimport SetDefaultCommConfigA(lpszName: *char, lpCC: *s__COMMCONFIG, dwSize: ulong) -> int
export import def #extern #dllimport SetDefaultCommConfigW(lpszName: *ushort, lpCC: *s__COMMCONFIG, dwSize: ulong) -> int
export import def #extern #dllimport GetComputerNameA(lpBuffer: *char, nSize: *ulong) -> int
export import def #extern #dllimport GetComputerNameW(lpBuffer: *ushort, nSize: *ulong) -> int
export import def #extern #dllimport DnsHostnameToComputerNameA(Hostname: *char, ComputerName: *char, nSize: *ulong) -> int
export import def #extern #dllimport DnsHostnameToComputerNameW(Hostname: *ushort, ComputerName: *ushort, nSize: *ulong) -> int
export import def #extern #dllimport GetUserNameA(lpBuffer: *char, pcbBuffer: *ulong) -> int
export import def #extern #dllimport GetUserNameW(lpBuffer: *ushort, pcbBuffer: *ulong) -> int
export import def #extern #dllimport LogonUserA(lpszUsername: *char, lpszDomain: *char, lpszPassword: *char, dwLogonType: ulong, dwLogonProvider: ulong, phToken: **) -> int
export import def #extern #dllimport LogonUserW(lpszUsername: *ushort, lpszDomain: *ushort, lpszPassword: *ushort, dwLogonType: ulong, dwLogonProvider: ulong, phToken: **) -> int
export import def #extern #dllimport LogonUserExA(lpszUsername: *char, lpszDomain: *char, lpszPassword: *char, dwLogonType: ulong, dwLogonProvider: ulong, phToken: **, ppLogonSid: **, ppProfileBuffer: **, pdwProfileLength: *ulong, pQuotaLimits: *s__QUOTA_LIMITS) -> int
export import def #extern #dllimport LogonUserExW(lpszUsername: *ushort, lpszDomain: *ushort, lpszPassword: *ushort, dwLogonType: ulong, dwLogonProvider: ulong, phToken: **, ppLogonSid: **, ppProfileBuffer: **, pdwProfileLength: *ulong, pQuotaLimits: *s__QUOTA_LIMITS) -> int
export import def #extern #dllimport CreateProcessWithLogonW(lpUsername: *ushort, lpDomain: *ushort, lpPassword: *ushort, dwLogonFlags: ulong, lpApplicationName: *ushort, lpCommandLine: *ushort, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *ushort, lpStartupInfo: *s__STARTUPINFOW, lpProcessInformation: *s__PROCESS_INFORMATION) -> int
export import def #extern #dllimport CreateProcessWithTokenW(hToken: *, dwLogonFlags: ulong, lpApplicationName: *ushort, lpCommandLine: *ushort, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *ushort, lpStartupInfo: *s__STARTUPINFOW, lpProcessInformation: *s__PROCESS_INFORMATION) -> int
export import def #extern #dllimport IsTokenUntrusted(TokenHandle: *) -> int
export import def #extern #dllimport RegisterWaitForSingleObject(phNewWaitObject: **, hObject: *, Callback: def (*, uint8) -> (), Context: *, dwMilliseconds: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport UnregisterWait(WaitHandle: *) -> int
export import def #extern #dllimport BindIoCompletionCallback(FileHandle: *, Function: def (ulong, ulong, *s__OVERLAPPED) -> (), Flags: ulong) -> int
export import def #extern #dllimport SetTimerQueueTimer(TimerQueue: *, Callback: def (*, uint8) -> (), Parameter: *, DueTime: ulong, Period: ulong, PreferIo: int) -> *
export import def #extern #dllimport CancelTimerQueueTimer(TimerQueue: *, Timer: *) -> int
export import def #extern InitializeThreadpoolEnvironment(pcbe: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern SetThreadpoolCallbackPool(pcbe: *s__TP_CALLBACK_ENVIRON_V3, ptpp: *s__TP_POOL)
export import def #extern SetThreadpoolCallbackCleanupGroup(pcbe: *s__TP_CALLBACK_ENVIRON_V3, ptpcg: *s__TP_CLEANUP_GROUP, pfng: def (*, *) -> ())
export import def #extern SetThreadpoolCallbackRunsLong(pcbe: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern SetThreadpoolCallbackLibrary(pcbe: *s__TP_CALLBACK_ENVIRON_V3, mod: *)
export import def #extern SetThreadpoolCallbackPriority(pcbe: *s__TP_CALLBACK_ENVIRON_V3, Priority: e__TP_CALLBACK_PRIORITY)
export import def #extern DestroyThreadpoolEnvironment(pcbe: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern SetThreadpoolCallbackPersistent(pcbe: *s__TP_CALLBACK_ENVIRON_V3)
export import def #extern #dllimport CreatePrivateNamespaceA(lpPrivateNamespaceAttributes: *s__SECURITY_ATTRIBUTES, lpBoundaryDescriptor: *, lpAliasPrefix: *char) -> *
export import def #extern #dllimport OpenPrivateNamespaceA(lpBoundaryDescriptor: *, lpAliasPrefix: *char) -> *
export import def #extern #dllimport CreateBoundaryDescriptorA(Name: *char, Flags: ulong) -> *
export import def #extern #dllimport AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor: **, IntegrityLabel: *) -> int
export import def #extern #dllimport GetCurrentHwProfileA(lpHwProfileInfo: *s_tagHW_PROFILE_INFOA) -> int
export import def #extern #dllimport GetCurrentHwProfileW(lpHwProfileInfo: *s_tagHW_PROFILE_INFOW) -> int
export import def #extern #dllimport VerifyVersionInfoA(lpVersionInformation: *s__OSVERSIONINFOEXA, dwTypeMask: ulong, dwlConditionMask: uint64) -> int
export import def #extern #dllimport VerifyVersionInfoW(lpVersionInformation: *s__OSVERSIONINFOEXW, dwTypeMask: ulong, dwlConditionMask: uint64) -> int
export import def #extern HRESULT_FROM_WIN32(x: ulong) -> long
export import def #extern HRESULT_FROM_SETUPAPI(x: ulong) -> long
export import def #extern #dllimport SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation: *s__TIME_ZONE_INFORMATION, lpUniversalTime: *s__SYSTEMTIME, lpLocalTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport TzSpecificLocalTimeToSystemTime(lpTimeZoneInformation: *s__TIME_ZONE_INFORMATION, lpLocalTime: *s__SYSTEMTIME, lpUniversalTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport FileTimeToSystemTime(lpFileTime: *s__FILETIME, lpSystemTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport SystemTimeToFileTime(lpSystemTime: *s__SYSTEMTIME, lpFileTime: *s__FILETIME) -> int
export import def #extern #dllimport GetTimeZoneInformation(lpTimeZoneInformation: *s__TIME_ZONE_INFORMATION) -> ulong
export import def #extern #dllimport SetTimeZoneInformation(lpTimeZoneInformation: *s__TIME_ZONE_INFORMATION) -> int
export import def #extern #dllimport SetDynamicTimeZoneInformation(lpTimeZoneInformation: *s__TIME_DYNAMIC_ZONE_INFORMATION) -> int
export import def #extern #dllimport GetDynamicTimeZoneInformation(pTimeZoneInformation: *s__TIME_DYNAMIC_ZONE_INFORMATION) -> ulong
export import def #extern GetTimeZoneInformationForYear(wYear: ushort, pdtzi: *s__TIME_DYNAMIC_ZONE_INFORMATION, ptzi: *s__TIME_ZONE_INFORMATION) -> int
export import def #extern #dllimport EnumDynamicTimeZoneInformation(dwIndex: ulong, lpTimeZoneInformation: *s__TIME_DYNAMIC_ZONE_INFORMATION) -> ulong
export import def #extern #dllimport GetDynamicTimeZoneInformationEffectiveYears(lpTimeZoneInformation: *s__TIME_DYNAMIC_ZONE_INFORMATION, FirstYear: *ulong, LastYear: *ulong) -> ulong
export import def #extern #dllimport SystemTimeToTzSpecificLocalTimeEx(lpTimeZoneInformation: *s__TIME_DYNAMIC_ZONE_INFORMATION, lpUniversalTime: *s__SYSTEMTIME, lpLocalTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport TzSpecificLocalTimeToSystemTimeEx(lpTimeZoneInformation: *s__TIME_DYNAMIC_ZONE_INFORMATION, lpLocalTime: *s__SYSTEMTIME, lpUniversalTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport LocalFileTimeToLocalSystemTime(timeZoneInformation: *s__TIME_ZONE_INFORMATION, localFileTime: *s__FILETIME, localSystemTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport LocalSystemTimeToLocalFileTime(timeZoneInformation: *s__TIME_ZONE_INFORMATION, localSystemTime: *s__SYSTEMTIME, localFileTime: *s__FILETIME) -> int
export import def #extern #dllimport SetSystemPowerState(fSuspend: int, fForce: int) -> int
export import def #extern #dllimport GetSystemPowerStatus(lpSystemPowerStatus: *s__SYSTEM_POWER_STATUS) -> int
export import def #extern #dllimport MapUserPhysicalPagesScatter(VirtualAddresses: **, NumberOfPages: uint64, PageArray: *uint64) -> int
export import def #extern #dllimport CreateJobObjectA(lpJobAttributes: *s__SECURITY_ATTRIBUTES, lpName: *char) -> *
export import def #extern #dllimport OpenJobObjectA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport CreateJobSet(NumJob: ulong, UserJobSet: *s__JOB_SET_ARRAY, Flags: ulong) -> int
export import def #extern #dllimport FindFirstVolumeA(lpszVolumeName: *char, cchBufferLength: ulong) -> *
export import def #extern #dllimport FindNextVolumeA(hFindVolume: *, lpszVolumeName: *char, cchBufferLength: ulong) -> int
export import def #extern #dllimport FindFirstVolumeMountPointA(lpszRootPathName: *char, lpszVolumeMountPoint: *char, cchBufferLength: ulong) -> *
export import def #extern #dllimport FindFirstVolumeMountPointW(lpszRootPathName: *ushort, lpszVolumeMountPoint: *ushort, cchBufferLength: ulong) -> *
export import def #extern #dllimport FindNextVolumeMountPointA(hFindVolumeMountPoint: *, lpszVolumeMountPoint: *char, cchBufferLength: ulong) -> int
export import def #extern #dllimport FindNextVolumeMountPointW(hFindVolumeMountPoint: *, lpszVolumeMountPoint: *ushort, cchBufferLength: ulong) -> int
export import def #extern #dllimport FindVolumeMountPointClose(hFindVolumeMountPoint: *) -> int
export import def #extern #dllimport SetVolumeMountPointA(lpszVolumeMountPoint: *char, lpszVolumeName: *char) -> int
export import def #extern #dllimport SetVolumeMountPointW(lpszVolumeMountPoint: *ushort, lpszVolumeName: *ushort) -> int
export import def #extern #dllimport DeleteVolumeMountPointA(lpszVolumeMountPoint: *char) -> int
export import def #extern #dllimport GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint: *char, lpszVolumeName: *char, cchBufferLength: ulong) -> int
export import def #extern #dllimport GetVolumePathNameA(lpszFileName: *char, lpszVolumePathName: *char, cchBufferLength: ulong) -> int
export import def #extern #dllimport GetVolumePathNamesForVolumeNameA(lpszVolumeName: *char, lpszVolumePathNames: *char, cchBufferLength: ulong, lpcchReturnLength: *ulong) -> int
export import def #extern #dllimport CreateActCtxA(pActCtx: *s_tagACTCTXA) -> *
export import def #extern #dllimport CreateActCtxW(pActCtx: *s_tagACTCTXW) -> *
export import def #extern #dllimport AddRefActCtx(hActCtx: *)
export import def #extern #dllimport ReleaseActCtx(hActCtx: *)
export import def #extern #dllimport ZombifyActCtx(hActCtx: *) -> int
export import def #extern #dllimport ActivateActCtx(hActCtx: *, lpCookie: *uint64) -> int
export import def #extern #dllimport DeactivateActCtx(dwFlags: ulong, ulCookie: uint64) -> int
export import def #extern #dllimport GetCurrentActCtx(lphActCtx: **) -> int
export import def #extern #dllimport FindActCtxSectionStringA(dwFlags: ulong, lpExtensionGuid: *s__GUID, ulSectionId: ulong, lpStringToFind: *char, ReturnedData: *s_tagACTCTX_SECTION_KEYED_DATA) -> int
export import def #extern #dllimport FindActCtxSectionStringW(dwFlags: ulong, lpExtensionGuid: *s__GUID, ulSectionId: ulong, lpStringToFind: *ushort, ReturnedData: *s_tagACTCTX_SECTION_KEYED_DATA) -> int
export import def #extern #dllimport FindActCtxSectionGuid(dwFlags: ulong, lpExtensionGuid: *s__GUID, ulSectionId: ulong, lpGuidToFind: *s__GUID, ReturnedData: *s_tagACTCTX_SECTION_KEYED_DATA) -> int
export import def #extern #dllimport QueryActCtxW(dwFlags: ulong, hActCtx: *, pvSubInstance: *, ulInfoClass: ulong, pvBuffer: *, cbBuffer: uint64, pcbWrittenOrRequired: *uint64) -> int
export import def #extern #dllimport WTSGetActiveConsoleSessionId() -> ulong
export import def #extern #dllimport WTSGetServiceSessionId() -> ulong
export import def #extern #dllimport WTSIsServerContainer() -> uint8
export import def #extern #dllimport GetActiveProcessorGroupCount() -> ushort
export import def #extern #dllimport GetMaximumProcessorGroupCount() -> ushort
export import def #extern #dllimport GetActiveProcessorCount(GroupNumber: ushort) -> ulong
export import def #extern #dllimport GetMaximumProcessorCount(GroupNumber: ushort) -> ulong
export import def #extern #dllimport GetNumaProcessorNode(Processor: uint8, NodeNumber: *uint8) -> int
export import def #extern #dllimport GetNumaNodeNumberFromHandle(hFile: *, NodeNumber: *ushort) -> int
export import def #extern #dllimport GetNumaProcessorNodeEx(Processor: *s__PROCESSOR_NUMBER, NodeNumber: *ushort) -> int
export import def #extern #dllimport GetNumaNodeProcessorMask(Node: uint8, ProcessorMask: *uint64) -> int
export import def #extern #dllimport GetNumaAvailableMemoryNode(Node: uint8, AvailableBytes: *uint64) -> int
export import def #extern #dllimport GetNumaAvailableMemoryNodeEx(Node: ushort, AvailableBytes: *uint64) -> int
export import def #extern #dllimport GetNumaProximityNode(ProximityId: ulong, NodeNumber: *uint8) -> int
export import def #extern #dllimport RegisterApplicationRecoveryCallback(pRecoveyCallback: def (*) -> (ulong), pvParameter: *, dwPingInterval: ulong, dwFlags: ulong) -> long
export import def #extern #dllimport UnregisterApplicationRecoveryCallback() -> long
export import def #extern #dllimport RegisterApplicationRestart(pwzCommandline: *ushort, dwFlags: ulong) -> long
export import def #extern #dllimport UnregisterApplicationRestart() -> long
export import def #extern #dllimport GetApplicationRecoveryCallback(hProcess: *, pRecoveryCallback: def (*) -> (ulong), ppvParameter: **, pdwPingInterval: *ulong, pdwFlags: *ulong) -> long
export import def #extern #dllimport GetApplicationRestartSettings(hProcess: *, pwzCommandline: *ushort, pcchSize: *ulong, pdwFlags: *ulong) -> long
export import def #extern #dllimport ApplicationRecoveryInProgress(pbCancelled: *int) -> long
export import def #extern #dllimport ApplicationRecoveryFinished(bSuccess: int)
export const IoPriorityHintVeryLow: int = 0
export const IoPriorityHintLow: int = 1
export const IoPriorityHintNormal: int = 2
export const MaximumIoPriorityHintType: int = 3
export import def #extern #dllimport GetFileInformationByHandleEx(hFile: *, FileInformationClass: e__FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: *, dwBufferSize: ulong) -> int
export const FileIdType: int = 0
export const ObjectIdType: int = 1
export const ExtendedFileIdType: int = 2
export const MaximumFileIdType: int = 3
export import def #extern #dllimport OpenFileById(hVolumeHint: *, lpFileId: *s_FILE_ID_DESCRIPTOR, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, dwFlagsAndAttributes: ulong) -> *
export import def #extern #dllimport CreateSymbolicLinkA(lpSymlinkFileName: *char, lpTargetFileName: *char, dwFlags: ulong) -> uint8
export import def #extern #dllimport CreateSymbolicLinkW(lpSymlinkFileName: *ushort, lpTargetFileName: *ushort, dwFlags: ulong) -> uint8
export import def #extern #dllimport QueryActCtxSettingsW(dwFlags: ulong, hActCtx: *, settingsNameSpace: *ushort, settingName: *ushort, pvBuffer: *ushort, dwBuffer: uint64, pdwWrittenOrRequired: *uint64) -> int
export import def #extern #dllimport CreateSymbolicLinkTransactedA(lpSymlinkFileName: *char, lpTargetFileName: *char, dwFlags: ulong, hTransaction: *) -> uint8
export import def #extern #dllimport CreateSymbolicLinkTransactedW(lpSymlinkFileName: *ushort, lpTargetFileName: *ushort, dwFlags: ulong, hTransaction: *) -> uint8
export import def #extern #dllimport ReplacePartitionUnit(TargetPartition: *ushort, SparePartition: *ushort, Flags: ulong) -> int
export import def #extern #dllimport AddSecureMemoryCacheCallback(pfnCallBack: def (*, uint64) -> (uint8)) -> int
export import def #extern #dllimport RemoveSecureMemoryCacheCallback(pfnCallBack: def (*, uint64) -> (uint8)) -> int
export import def #extern #dllimport CopyContext(Destination: *s__CONTEXT, ContextFlags: ulong, Source: *s__CONTEXT) -> int
export import def #extern #dllimport InitializeContext(Buffer: *, ContextFlags: ulong, Context: **s__CONTEXT, ContextLength: *ulong) -> int
export import def #extern #dllimport InitializeContext2(Buffer: *, ContextFlags: ulong, Context: **s__CONTEXT, ContextLength: *ulong, XStateCompactionMask: uint64) -> int
export import def #extern #dllimport GetEnabledXStateFeatures() -> uint64
export import def #extern #dllimport GetXStateFeaturesMask(Context: *s__CONTEXT, FeatureMask: *uint64) -> int
export import def #extern #dllimport LocateXStateFeature(Context: *s__CONTEXT, FeatureId: ulong, Length: *ulong) -> *
export import def #extern #dllimport SetXStateFeaturesMask(Context: *s__CONTEXT, FeatureMask: uint64) -> int
export import def #extern #dllimport EnableThreadProfiling(ThreadHandle: *, Flags: ulong, HardwareCounters: uint64, PerformanceDataHandle: **) -> ulong
export import def #extern #dllimport DisableThreadProfiling(PerformanceDataHandle: *) -> ulong
export import def #extern #dllimport QueryThreadProfiling(ThreadHandle: *, Enabled: *uint8) -> ulong
export import def #extern #dllimport ReadThreadProfilingData(PerformanceDataHandle: *, Flags: ulong, PerformanceData: *s__PERFORMANCE_DATA) -> ulong
export import def #extern #dllimport RaiseCustomSystemEventTrigger(CustomSystemEventTriggerConfig: *s__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG) -> ulong
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER: int = -1
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15: int = 0
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO: int = 1
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO: int = 2
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO: int = 3
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI: int = 4
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI: int = 5
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS: int = 6
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN: int = 8
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI: int = 9
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL: int = 10
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED: int = 11
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL: int = 12
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED: int = 13
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE: int = 14
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST: int = 15
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED: int = 16
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL: int = 17
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL: int = 18
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL: int = -2147483648
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32: int = -1
export const DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED: int = 0
export const DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE: int = 1
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED: int = 2
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST: int = 2
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST: int = 3
export const DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32: int = -1
export const DISPLAYCONFIG_SCALING_IDENTITY: int = 1
export const DISPLAYCONFIG_SCALING_CENTERED: int = 2
export const DISPLAYCONFIG_SCALING_STRETCHED: int = 3
export const DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX: int = 4
export const DISPLAYCONFIG_SCALING_CUSTOM: int = 5
export const DISPLAYCONFIG_SCALING_PREFERRED: int = 128
export const DISPLAYCONFIG_SCALING_FORCE_UINT32: int = -1
export const DISPLAYCONFIG_ROTATION_IDENTITY: int = 1
export const DISPLAYCONFIG_ROTATION_ROTATE90: int = 2
export const DISPLAYCONFIG_ROTATION_ROTATE180: int = 3
export const DISPLAYCONFIG_ROTATION_ROTATE270: int = 4
export const DISPLAYCONFIG_ROTATION_FORCE_UINT32: int = -1
export const DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE: int = 1
export const DISPLAYCONFIG_MODE_INFO_TYPE_TARGET: int = 2
export const DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE: int = 3
export const DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32: int = -1
export const DISPLAYCONFIG_PIXELFORMAT_8BPP: int = 1
export const DISPLAYCONFIG_PIXELFORMAT_16BPP: int = 2
export const DISPLAYCONFIG_PIXELFORMAT_24BPP: int = 3
export const DISPLAYCONFIG_PIXELFORMAT_32BPP: int = 4
export const DISPLAYCONFIG_PIXELFORMAT_NONGDI: int = 5
export const DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32: int = -1
export const DISPLAYCONFIG_TOPOLOGY_INTERNAL: int = 1
export const DISPLAYCONFIG_TOPOLOGY_CLONE: int = 2
export const DISPLAYCONFIG_TOPOLOGY_EXTEND: int = 4
export const DISPLAYCONFIG_TOPOLOGY_EXTERNAL: int = 8
export const DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32: int = -1
export const DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME: int = 1
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME: int = 2
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE: int = 3
export const DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME: int = 4
export const DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE: int = 5
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE: int = 6
export const DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION: int = 7
export const DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION: int = 8
export const DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO: int = 9
export const DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE: int = 10
export const DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL: int = 11
export const DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION: int = 12
export const DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION: int = 13
export const DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32: int = -1
export const DISPLAYCONFIG_COLOR_ENCODING_RGB: int = 0
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR444: int = 1
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR422: int = 2
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR420: int = 3
export const DISPLAYCONFIG_COLOR_ENCODING_INTENSITY: int = 4
export const DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32: int = -1
export import def #extern #dllimport AddFontResourceA(_0: *char) -> int
export import def #extern #dllimport AddFontResourceW(_0: *ushort) -> int
export import def #extern #dllimport AnimatePalette(hPal: *s_HPALETTE__, iStartIndex: uint, cEntries: uint, ppe: *s_tagPALETTEENTRY) -> int
export import def #extern #dllimport Arc(hdc: *s_HDC__, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int) -> int
export import def #extern #dllimport BitBlt(hdc: *s_HDC__, x: int, y: int, cx: int, cy: int, hdcSrc: *s_HDC__, x1: int, y1: int, rop: ulong) -> int
export import def #extern #dllimport CancelDC(hdc: *s_HDC__) -> int
export import def #extern #dllimport Chord(hdc: *s_HDC__, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int) -> int
export import def #extern #dllimport ChoosePixelFormat(hdc: *s_HDC__, ppfd: *s_tagPIXELFORMATDESCRIPTOR) -> int
export import def #extern #dllimport CloseMetaFile(hdc: *s_HDC__) -> *s_HMETAFILE__
export import def #extern #dllimport CombineRgn(hrgnDst: *s_HRGN__, hrgnSrc1: *s_HRGN__, hrgnSrc2: *s_HRGN__, iMode: int) -> int
export import def #extern #dllimport CopyMetaFileA(_0: *s_HMETAFILE__, _1: *char) -> *s_HMETAFILE__
export import def #extern #dllimport CopyMetaFileW(_0: *s_HMETAFILE__, _1: *ushort) -> *s_HMETAFILE__
export import def #extern #dllimport CreateBitmap(nWidth: int, nHeight: int, nPlanes: uint, nBitCount: uint, lpBits: *) -> *s_HBITMAP__
export import def #extern #dllimport CreateBitmapIndirect(pbm: *s_tagBITMAP) -> *s_HBITMAP__
export import def #extern #dllimport CreateBrushIndirect(plbrush: *s_tagLOGBRUSH) -> *s_HBRUSH__
export import def #extern #dllimport CreateCompatibleBitmap(hdc: *s_HDC__, cx: int, cy: int) -> *s_HBITMAP__
export import def #extern #dllimport CreateDiscardableBitmap(hdc: *s_HDC__, cx: int, cy: int) -> *s_HBITMAP__
export import def #extern #dllimport CreateCompatibleDC(hdc: *s_HDC__) -> *s_HDC__
export import def #extern #dllimport CreateDCA(pwszDriver: *char, pwszDevice: *char, pszPort: *char, pdm: *s__devicemodeA) -> *s_HDC__
export import def #extern #dllimport CreateDCW(pwszDriver: *ushort, pwszDevice: *ushort, pszPort: *ushort, pdm: *s__devicemodeW) -> *s_HDC__
export import def #extern #dllimport CreateDIBitmap(hdc: *s_HDC__, pbmih: *s_tagBITMAPINFOHEADER, flInit: ulong, pjBits: *, pbmi: *s_tagBITMAPINFO, iUsage: uint) -> *s_HBITMAP__
export import def #extern #dllimport CreateDIBPatternBrush(h: *, iUsage: uint) -> *s_HBRUSH__
export import def #extern #dllimport CreateDIBPatternBrushPt(lpPackedDIB: *, iUsage: uint) -> *s_HBRUSH__
export import def #extern #dllimport CreateEllipticRgn(x1: int, y1: int, x2: int, y2: int) -> *s_HRGN__
export import def #extern #dllimport CreateEllipticRgnIndirect(lprect: *s_tagRECT) -> *s_HRGN__
export import def #extern #dllimport CreateFontIndirectA(lplf: *s_tagLOGFONTA) -> *s_HFONT__
export import def #extern #dllimport CreateFontIndirectW(lplf: *s_tagLOGFONTW) -> *s_HFONT__
export import def #extern #dllimport CreateFontA(cHeight: int, cWidth: int, cEscapement: int, cOrientation: int, cWeight: int, bItalic: ulong, bUnderline: ulong, bStrikeOut: ulong, iCharSet: ulong, iOutPrecision: ulong, iClipPrecision: ulong, iQuality: ulong, iPitchAndFamily: ulong, pszFaceName: *char) -> *s_HFONT__
export import def #extern #dllimport CreateFontW(cHeight: int, cWidth: int, cEscapement: int, cOrientation: int, cWeight: int, bItalic: ulong, bUnderline: ulong, bStrikeOut: ulong, iCharSet: ulong, iOutPrecision: ulong, iClipPrecision: ulong, iQuality: ulong, iPitchAndFamily: ulong, pszFaceName: *ushort) -> *s_HFONT__
export import def #extern #dllimport CreateHatchBrush(iHatch: int, color: ulong) -> *s_HBRUSH__
export import def #extern #dllimport CreateICA(pszDriver: *char, pszDevice: *char, pszPort: *char, pdm: *s__devicemodeA) -> *s_HDC__
export import def #extern #dllimport CreateICW(pszDriver: *ushort, pszDevice: *ushort, pszPort: *ushort, pdm: *s__devicemodeW) -> *s_HDC__
export import def #extern #dllimport CreateMetaFileA(pszFile: *char) -> *s_HDC__
export import def #extern #dllimport CreateMetaFileW(pszFile: *ushort) -> *s_HDC__
export import def #extern #dllimport CreatePalette(plpal: *s_tagLOGPALETTE) -> *s_HPALETTE__
export import def #extern #dllimport CreatePen(iStyle: int, cWidth: int, color: ulong) -> *s_HPEN__
export import def #extern #dllimport CreatePenIndirect(plpen: *s_tagLOGPEN) -> *s_HPEN__
export import def #extern #dllimport CreatePolyPolygonRgn(pptl: *s_tagPOINT, pc: *int, cPoly: int, iMode: int) -> *s_HRGN__
export import def #extern #dllimport CreatePatternBrush(hbm: *s_HBITMAP__) -> *s_HBRUSH__
export import def #extern #dllimport CreateRectRgn(x1: int, y1: int, x2: int, y2: int) -> *s_HRGN__
export import def #extern #dllimport CreateRectRgnIndirect(lprect: *s_tagRECT) -> *s_HRGN__
export import def #extern #dllimport CreateRoundRectRgn(x1: int, y1: int, x2: int, y2: int, w: int, h: int) -> *s_HRGN__
export import def #extern #dllimport CreateScalableFontResourceA(fdwHidden: ulong, lpszFont: *char, lpszFile: *char, lpszPath: *char) -> int
export import def #extern #dllimport CreateScalableFontResourceW(fdwHidden: ulong, lpszFont: *ushort, lpszFile: *ushort, lpszPath: *ushort) -> int
export import def #extern #dllimport CreateSolidBrush(color: ulong) -> *s_HBRUSH__
export import def #extern #dllimport DeleteDC(hdc: *s_HDC__) -> int
export import def #extern #dllimport DeleteMetaFile(hmf: *s_HMETAFILE__) -> int
export import def #extern #dllimport DeleteObject(ho: *) -> int
export import def #extern #dllimport DescribePixelFormat(hdc: *s_HDC__, iPixelFormat: int, nBytes: uint, ppfd: *s_tagPIXELFORMATDESCRIPTOR) -> int
export import def #extern #dllimport DeviceCapabilitiesA(pDevice: *char, pPort: *char, fwCapability: ushort, pOutput: *char, pDevMode: *s__devicemodeA) -> int
export import def #extern #dllimport DeviceCapabilitiesW(pDevice: *ushort, pPort: *ushort, fwCapability: ushort, pOutput: *ushort, pDevMode: *s__devicemodeW) -> int
export import def #extern #dllimport DrawEscape(hdc: *s_HDC__, iEscape: int, cjIn: int, lpIn: *char) -> int
export import def #extern #dllimport Ellipse(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport EnumFontFamiliesExA(hdc: *s_HDC__, lpLogfont: *s_tagLOGFONTA, lpProc: def (*s_tagLOGFONTA, *s_tagTEXTMETRICA, ulong, int64) -> (int), lParam: int64, dwFlags: ulong) -> int
export import def #extern #dllimport EnumFontFamiliesExW(hdc: *s_HDC__, lpLogfont: *s_tagLOGFONTW, lpProc: def (*s_tagLOGFONTW, *s_tagTEXTMETRICW, ulong, int64) -> (int), lParam: int64, dwFlags: ulong) -> int
export import def #extern #dllimport EnumFontFamiliesA(hdc: *s_HDC__, lpLogfont: *char, lpProc: def (*s_tagLOGFONTA, *s_tagTEXTMETRICA, ulong, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumFontFamiliesW(hdc: *s_HDC__, lpLogfont: *ushort, lpProc: def (*s_tagLOGFONTW, *s_tagTEXTMETRICW, ulong, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumFontsA(hdc: *s_HDC__, lpLogfont: *char, lpProc: def (*s_tagLOGFONTA, *s_tagTEXTMETRICA, ulong, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumFontsW(hdc: *s_HDC__, lpLogfont: *ushort, lpProc: def (*s_tagLOGFONTW, *s_tagTEXTMETRICW, ulong, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumObjects(hdc: *s_HDC__, nType: int, lpFunc: def (*, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EqualRgn(hrgn1: *s_HRGN__, hrgn2: *s_HRGN__) -> int
export import def #extern #dllimport Escape(hdc: *s_HDC__, iEscape: int, cjIn: int, pvIn: *char, pvOut: *) -> int
export import def #extern #dllimport ExtEscape(hdc: *s_HDC__, iEscape: int, cjInput: int, lpInData: *char, cjOutput: int, lpOutData: *char) -> int
export import def #extern #dllimport ExcludeClipRect(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport ExtCreateRegion(lpx: *s_tagXFORM, nCount: ulong, lpData: *s__RGNDATA) -> *s_HRGN__
export import def #extern #dllimport ExtFloodFill(hdc: *s_HDC__, x: int, y: int, color: ulong, type_: uint) -> int
export import def #extern #dllimport FillRgn(hdc: *s_HDC__, hrgn: *s_HRGN__, hbr: *s_HBRUSH__) -> int
export import def #extern #dllimport FloodFill(hdc: *s_HDC__, x: int, y: int, color: ulong) -> int
export import def #extern #dllimport FrameRgn(hdc: *s_HDC__, hrgn: *s_HRGN__, hbr: *s_HBRUSH__, w: int, h: int) -> int
export import def #extern #dllimport GetROP2(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetAspectRatioFilterEx(hdc: *s_HDC__, lpsize: *s_tagSIZE) -> int
export import def #extern #dllimport GetBkColor(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetDCBrushColor(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetDCPenColor(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetBkMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetBitmapBits(hbit: *s_HBITMAP__, cb: long, lpvBits: *) -> long
export import def #extern #dllimport GetBitmapDimensionEx(hbit: *s_HBITMAP__, lpsize: *s_tagSIZE) -> int
export import def #extern #dllimport GetBoundsRect(hdc: *s_HDC__, lprect: *s_tagRECT, flags: uint) -> uint
export import def #extern #dllimport GetBrushOrgEx(hdc: *s_HDC__, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport GetCharWidthA(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *int) -> int
export import def #extern #dllimport GetCharWidthW(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *int) -> int
export import def #extern #dllimport GetCharWidth32A(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *int) -> int
export import def #extern #dllimport GetCharWidth32W(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *int) -> int
export import def #extern #dllimport GetCharWidthFloatA(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *float) -> int
export import def #extern #dllimport GetCharWidthFloatW(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *float) -> int
export import def #extern #dllimport GetCharABCWidthsA(hdc: *s_HDC__, wFirst: uint, wLast: uint, lpABC: *s__ABC) -> int
export import def #extern #dllimport GetCharABCWidthsW(hdc: *s_HDC__, wFirst: uint, wLast: uint, lpABC: *s__ABC) -> int
export import def #extern #dllimport GetCharABCWidthsFloatA(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpABC: *s__ABCFLOAT) -> int
export import def #extern #dllimport GetCharABCWidthsFloatW(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpABC: *s__ABCFLOAT) -> int
export import def #extern #dllimport GetClipBox(hdc: *s_HDC__, lprect: *s_tagRECT) -> int
export import def #extern #dllimport GetClipRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport GetMetaRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport GetCurrentObject(hdc: *s_HDC__, type_: uint) -> *
export import def #extern #dllimport GetCurrentPositionEx(hdc: *s_HDC__, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport GetDeviceCaps(hdc: *s_HDC__, index: int) -> int
export import def #extern #dllimport GetDIBits(hdc: *s_HDC__, hbm: *s_HBITMAP__, start: uint, cLines: uint, lpvBits: *, lpbmi: *s_tagBITMAPINFO, usage: uint) -> int
export import def #extern #dllimport GetFontData(hdc: *s_HDC__, dwTable: ulong, dwOffset: ulong, pvBuffer: *, cjBuffer: ulong) -> ulong
export import def #extern #dllimport GetGlyphOutlineA(hdc: *s_HDC__, uChar: uint, fuFormat: uint, lpgm: *s__GLYPHMETRICS, cjBuffer: ulong, pvBuffer: *, lpmat2: *s__MAT2) -> ulong
export import def #extern #dllimport GetGlyphOutlineW(hdc: *s_HDC__, uChar: uint, fuFormat: uint, lpgm: *s__GLYPHMETRICS, cjBuffer: ulong, pvBuffer: *, lpmat2: *s__MAT2) -> ulong
export import def #extern #dllimport GetGraphicsMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetMapMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetMetaFileBitsEx(hMF: *s_HMETAFILE__, cbBuffer: uint, lpData: *) -> uint
export import def #extern #dllimport GetMetaFileA(lpName: *char) -> *s_HMETAFILE__
export import def #extern #dllimport GetMetaFileW(lpName: *ushort) -> *s_HMETAFILE__
export import def #extern #dllimport GetNearestColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport GetNearestPaletteIndex(h: *s_HPALETTE__, color: ulong) -> uint
export import def #extern #dllimport GetObjectType(h: *) -> ulong
export import def #extern #dllimport GetOutlineTextMetricsA(hdc: *s_HDC__, cjCopy: uint, potm: *s__OUTLINETEXTMETRICA) -> uint
export import def #extern #dllimport GetOutlineTextMetricsW(hdc: *s_HDC__, cjCopy: uint, potm: *s__OUTLINETEXTMETRICW) -> uint
export import def #extern #dllimport GetPaletteEntries(hpal: *s_HPALETTE__, iStart: uint, cEntries: uint, pPalEntries: *s_tagPALETTEENTRY) -> uint
export import def #extern #dllimport GetPixel(hdc: *s_HDC__, x: int, y: int) -> ulong
export import def #extern #dllimport GetPixelFormat(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetPolyFillMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetRasterizerCaps(lpraststat: *s__RASTERIZER_STATUS, cjBytes: uint) -> int
export import def #extern #dllimport GetRandomRgn(hdc: *s_HDC__, hrgn: *s_HRGN__, i: int) -> int
export import def #extern #dllimport GetRegionData(hrgn: *s_HRGN__, nCount: ulong, lpRgnData: *s__RGNDATA) -> ulong
export import def #extern #dllimport GetRgnBox(hrgn: *s_HRGN__, lprc: *s_tagRECT) -> int
export import def #extern #dllimport GetStockObject(i: int) -> *
export import def #extern #dllimport GetStretchBltMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetSystemPaletteEntries(hdc: *s_HDC__, iStart: uint, cEntries: uint, pPalEntries: *s_tagPALETTEENTRY) -> uint
export import def #extern #dllimport GetSystemPaletteUse(hdc: *s_HDC__) -> uint
export import def #extern #dllimport GetTextCharacterExtra(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetTextAlign(hdc: *s_HDC__) -> uint
export import def #extern #dllimport GetTextColor(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetTextExtentPointA(hdc: *s_HDC__, lpString: *char, c: int, lpsz: *s_tagSIZE) -> int
export import def #extern #dllimport GetTextExtentPointW(hdc: *s_HDC__, lpString: *ushort, c: int, lpsz: *s_tagSIZE) -> int
export import def #extern #dllimport GetTextExtentPoint32A(hdc: *s_HDC__, lpString: *char, c: int, psizl: *s_tagSIZE) -> int
export import def #extern #dllimport GetTextExtentPoint32W(hdc: *s_HDC__, lpString: *ushort, c: int, psizl: *s_tagSIZE) -> int
export import def #extern #dllimport GetTextExtentExPointA(hdc: *s_HDC__, lpszString: *char, cchString: int, nMaxExtent: int, lpnFit: *int, lpnDx: *int, lpSize: *s_tagSIZE) -> int
export import def #extern #dllimport GetTextExtentExPointW(hdc: *s_HDC__, lpszString: *ushort, cchString: int, nMaxExtent: int, lpnFit: *int, lpnDx: *int, lpSize: *s_tagSIZE) -> int
export import def #extern #dllimport GetTextCharset(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetTextCharsetInfo(hdc: *s_HDC__, lpSig: *s_tagFONTSIGNATURE, dwFlags: ulong) -> int
export import def #extern #dllimport TranslateCharsetInfo(lpSrc: *ulong, lpCs: *s_tagCHARSETINFO, dwFlags: ulong) -> int
export import def #extern #dllimport GetFontLanguageInfo(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetCharacterPlacementA(hdc: *s_HDC__, lpString: *char, nCount: int, nMexExtent: int, lpResults: *s_tagGCP_RESULTSA, dwFlags: ulong) -> ulong
export import def #extern #dllimport GetCharacterPlacementW(hdc: *s_HDC__, lpString: *ushort, nCount: int, nMexExtent: int, lpResults: *s_tagGCP_RESULTSW, dwFlags: ulong) -> ulong
export import def #extern #dllimport GetFontUnicodeRanges(hdc: *s_HDC__, lpgs: *s_tagGLYPHSET) -> ulong
export import def #extern #dllimport GetGlyphIndicesA(hdc: *s_HDC__, lpstr: *char, c: int, pgi: *ushort, fl: ulong) -> ulong
export import def #extern #dllimport GetGlyphIndicesW(hdc: *s_HDC__, lpstr: *ushort, c: int, pgi: *ushort, fl: ulong) -> ulong
export import def #extern #dllimport GetTextExtentPointI(hdc: *s_HDC__, pgiIn: *ushort, cgi: int, psize: *s_tagSIZE) -> int
export import def #extern #dllimport GetTextExtentExPointI(hdc: *s_HDC__, lpwszString: *ushort, cwchString: int, nMaxExtent: int, lpnFit: *int, lpnDx: *int, lpSize: *s_tagSIZE) -> int
export import def #extern #dllimport GetCharWidthI(hdc: *s_HDC__, giFirst: uint, cgi: uint, pgi: *ushort, piWidths: *int) -> int
export import def #extern #dllimport GetCharABCWidthsI(hdc: *s_HDC__, giFirst: uint, cgi: uint, pgi: *ushort, pabc: *s__ABC) -> int
export import def #extern #dllimport AddFontResourceExA(name: *char, fl: ulong, res: *) -> int
export import def #extern #dllimport AddFontResourceExW(name: *ushort, fl: ulong, res: *) -> int
export import def #extern #dllimport RemoveFontResourceExA(name: *char, fl: ulong, pdv: *) -> int
export import def #extern #dllimport RemoveFontResourceExW(name: *ushort, fl: ulong, pdv: *) -> int
export import def #extern #dllimport AddFontMemResourceEx(pFileView: *, cjSize: ulong, pvResrved: *, pNumFonts: *ulong) -> *
export import def #extern #dllimport RemoveFontMemResourceEx(h: *) -> int
export import def #extern #dllimport CreateFontIndirectExA(_0: *s_tagENUMLOGFONTEXDVA) -> *s_HFONT__
export import def #extern #dllimport CreateFontIndirectExW(_0: *s_tagENUMLOGFONTEXDVW) -> *s_HFONT__
export import def #extern #dllimport GetViewportExtEx(hdc: *s_HDC__, lpsize: *s_tagSIZE) -> int
export import def #extern #dllimport GetViewportOrgEx(hdc: *s_HDC__, lppoint: *s_tagPOINT) -> int
export import def #extern #dllimport GetWindowExtEx(hdc: *s_HDC__, lpsize: *s_tagSIZE) -> int
export import def #extern #dllimport GetWindowOrgEx(hdc: *s_HDC__, lppoint: *s_tagPOINT) -> int
export import def #extern #dllimport IntersectClipRect(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport InvertRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport LineDDA(xStart: int, yStart: int, xEnd: int, yEnd: int, lpProc: def (int, int, int64) -> (), data: int64) -> int
export import def #extern #dllimport LineTo(hdc: *s_HDC__, x: int, y: int) -> int
export import def #extern #dllimport MaskBlt(hdcDest: *s_HDC__, xDest: int, yDest: int, width: int, height: int, hdcSrc: *s_HDC__, xSrc: int, ySrc: int, hbmMask: *s_HBITMAP__, xMask: int, yMask: int, rop: ulong) -> int
export import def #extern #dllimport PlgBlt(hdcDest: *s_HDC__, lpPoint: *s_tagPOINT, hdcSrc: *s_HDC__, xSrc: int, ySrc: int, width: int, height: int, hbmMask: *s_HBITMAP__, xMask: int, yMask: int) -> int
export import def #extern #dllimport OffsetClipRgn(hdc: *s_HDC__, x: int, y: int) -> int
export import def #extern #dllimport OffsetRgn(hrgn: *s_HRGN__, x: int, y: int) -> int
export import def #extern #dllimport PatBlt(hdc: *s_HDC__, x: int, y: int, w: int, h: int, rop: ulong) -> int
export import def #extern #dllimport Pie(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int, xr1: int, yr1: int, xr2: int, yr2: int) -> int
export import def #extern #dllimport PlayMetaFile(hdc: *s_HDC__, hmf: *s_HMETAFILE__) -> int
export import def #extern #dllimport PaintRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport PolyPolygon(hdc: *s_HDC__, apt: *s_tagPOINT, asz: *int, csz: int) -> int
export import def #extern #dllimport PtInRegion(hrgn: *s_HRGN__, x: int, y: int) -> int
export import def #extern #dllimport PtVisible(hdc: *s_HDC__, x: int, y: int) -> int
export import def #extern #dllimport RectInRegion(hrgn: *s_HRGN__, lprect: *s_tagRECT) -> int
export import def #extern #dllimport RectVisible(hdc: *s_HDC__, lprect: *s_tagRECT) -> int
export import def #extern #dllimport Rectangle(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport RestoreDC(hdc: *s_HDC__, nSavedDC: int) -> int
export import def #extern #dllimport ResetDCA(hdc: *s_HDC__, lpdm: *s__devicemodeA) -> *s_HDC__
export import def #extern #dllimport ResetDCW(hdc: *s_HDC__, lpdm: *s__devicemodeW) -> *s_HDC__
export import def #extern #dllimport RealizePalette(hdc: *s_HDC__) -> uint
export import def #extern #dllimport RemoveFontResourceA(lpFileName: *char) -> int
export import def #extern #dllimport RemoveFontResourceW(lpFileName: *ushort) -> int
export import def #extern #dllimport RoundRect(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int, width: int, height: int) -> int
export import def #extern #dllimport ResizePalette(hpal: *s_HPALETTE__, n: uint) -> int
export import def #extern #dllimport SaveDC(hdc: *s_HDC__) -> int
export import def #extern #dllimport SelectClipRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport ExtSelectClipRgn(hdc: *s_HDC__, hrgn: *s_HRGN__, mode: int) -> int
export import def #extern #dllimport SetMetaRgn(hdc: *s_HDC__) -> int
export import def #extern #dllimport SelectObject(hdc: *s_HDC__, h: *) -> *
export import def #extern #dllimport SelectPalette(hdc: *s_HDC__, hPal: *s_HPALETTE__, bForceBkgd: int) -> *s_HPALETTE__
export import def #extern #dllimport SetBkColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport SetDCBrushColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport SetDCPenColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport SetBkMode(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport SetBitmapBits(hbm: *s_HBITMAP__, cb: ulong, pvBits: *) -> long
export import def #extern #dllimport SetBoundsRect(hdc: *s_HDC__, lprect: *s_tagRECT, flags: uint) -> uint
export import def #extern #dllimport SetDIBits(hdc: *s_HDC__, hbm: *s_HBITMAP__, start: uint, cLines: uint, lpBits: *, lpbmi: *s_tagBITMAPINFO, ColorUse: uint) -> int
export import def #extern #dllimport SetDIBitsToDevice(hdc: *s_HDC__, xDest: int, yDest: int, w: ulong, h: ulong, xSrc: int, ySrc: int, StartScan: uint, cLines: uint, lpvBits: *, lpbmi: *s_tagBITMAPINFO, ColorUse: uint) -> int
export import def #extern #dllimport SetMapperFlags(hdc: *s_HDC__, flags: ulong) -> ulong
export import def #extern #dllimport SetGraphicsMode(hdc: *s_HDC__, iMode: int) -> int
export import def #extern #dllimport SetMapMode(hdc: *s_HDC__, iMode: int) -> int
export import def #extern #dllimport SetLayout(hdc: *s_HDC__, l: ulong) -> ulong
export import def #extern #dllimport GetLayout(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport SetMetaFileBitsEx(cbBuffer: uint, lpData: *uint8) -> *s_HMETAFILE__
export import def #extern #dllimport SetPaletteEntries(hpal: *s_HPALETTE__, iStart: uint, cEntries: uint, pPalEntries: *s_tagPALETTEENTRY) -> uint
export import def #extern #dllimport SetPixel(hdc: *s_HDC__, x: int, y: int, color: ulong) -> ulong
export import def #extern #dllimport SetPixelV(hdc: *s_HDC__, x: int, y: int, color: ulong) -> int
export import def #extern #dllimport SetPixelFormat(hdc: *s_HDC__, format: int, ppfd: *s_tagPIXELFORMATDESCRIPTOR) -> int
export import def #extern #dllimport SetPolyFillMode(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport StretchBlt(hdcDest: *s_HDC__, xDest: int, yDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xSrc: int, ySrc: int, wSrc: int, hSrc: int, rop: ulong) -> int
export import def #extern #dllimport SetRectRgn(hrgn: *s_HRGN__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport StretchDIBits(hdc: *s_HDC__, xDest: int, yDest: int, DestWidth: int, DestHeight: int, xSrc: int, ySrc: int, SrcWidth: int, SrcHeight: int, lpBits: *, lpbmi: *s_tagBITMAPINFO, iUsage: uint, rop: ulong) -> int
export import def #extern #dllimport SetROP2(hdc: *s_HDC__, rop2: int) -> int
export import def #extern #dllimport SetStretchBltMode(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport SetSystemPaletteUse(hdc: *s_HDC__, use: uint) -> uint
export import def #extern #dllimport SetTextCharacterExtra(hdc: *s_HDC__, extra: int) -> int
export import def #extern #dllimport SetTextColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport SetTextAlign(hdc: *s_HDC__, align: uint) -> uint
export import def #extern #dllimport SetTextJustification(hdc: *s_HDC__, extra: int, count: int) -> int
export import def #extern #dllimport UpdateColors(hdc: *s_HDC__) -> int
export import def #extern #dllimport AlphaBlend(hdcDest: *s_HDC__, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, ftn: s__BLENDFUNCTION) -> int
export import def #extern #dllimport TransparentBlt(hdcDest: *s_HDC__, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, crTransparent: uint) -> int
export import def #extern #dllimport GradientFill(hdc: *s_HDC__, pVertex: *s__TRIVERTEX, nVertex: ulong, pMesh: *, nMesh: ulong, ulMode: ulong) -> int
export import def #extern #dllimport GdiAlphaBlend(hdcDest: *s_HDC__, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, ftn: s__BLENDFUNCTION) -> int
export import def #extern #dllimport GdiTransparentBlt(hdcDest: *s_HDC__, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, crTransparent: uint) -> int
export import def #extern #dllimport GdiGradientFill(hdc: *s_HDC__, pVertex: *s__TRIVERTEX, nVertex: ulong, pMesh: *, nCount: ulong, ulMode: ulong) -> int
export import def #extern #dllimport PlayMetaFileRecord(hdc: *s_HDC__, lpHandleTable: *s_tagHANDLETABLE, lpMR: *s_tagMETARECORD, noObjs: uint) -> int
export import def #extern #dllimport EnumMetaFile(hdc: *s_HDC__, hmf: *s_HMETAFILE__, proc: def (*s_HDC__, *s_tagHANDLETABLE, *s_tagMETARECORD, int, int64) -> (int), param: int64) -> int
export import def #extern #dllimport CloseEnhMetaFile(hdc: *s_HDC__) -> *s_HENHMETAFILE__
export import def #extern #dllimport CopyEnhMetaFileA(hEnh: *s_HENHMETAFILE__, lpFileName: *char) -> *s_HENHMETAFILE__
export import def #extern #dllimport CopyEnhMetaFileW(hEnh: *s_HENHMETAFILE__, lpFileName: *ushort) -> *s_HENHMETAFILE__
export import def #extern #dllimport CreateEnhMetaFileA(hdc: *s_HDC__, lpFilename: *char, lprc: *s_tagRECT, lpDesc: *char) -> *s_HDC__
export import def #extern #dllimport CreateEnhMetaFileW(hdc: *s_HDC__, lpFilename: *ushort, lprc: *s_tagRECT, lpDesc: *ushort) -> *s_HDC__
export import def #extern #dllimport DeleteEnhMetaFile(hmf: *s_HENHMETAFILE__) -> int
export import def #extern #dllimport EnumEnhMetaFile(hdc: *s_HDC__, hmf: *s_HENHMETAFILE__, proc: def (*s_HDC__, *s_tagHANDLETABLE, *s_tagENHMETARECORD, int, int64) -> (int), param: *, lpRect: *s_tagRECT) -> int
export import def #extern #dllimport GetEnhMetaFileA(lpName: *char) -> *s_HENHMETAFILE__
export import def #extern #dllimport GetEnhMetaFileW(lpName: *ushort) -> *s_HENHMETAFILE__
export import def #extern #dllimport GetEnhMetaFileBits(hEMF: *s_HENHMETAFILE__, nSize: uint, lpData: *uint8) -> uint
export import def #extern #dllimport GetEnhMetaFileDescriptionA(hemf: *s_HENHMETAFILE__, cchBuffer: uint, lpDescription: *char) -> uint
export import def #extern #dllimport GetEnhMetaFileDescriptionW(hemf: *s_HENHMETAFILE__, cchBuffer: uint, lpDescription: *ushort) -> uint
export import def #extern #dllimport GetEnhMetaFileHeader(hemf: *s_HENHMETAFILE__, nSize: uint, lpEnhMetaHeader: *s_tagENHMETAHEADER) -> uint
export import def #extern #dllimport GetEnhMetaFilePaletteEntries(hemf: *s_HENHMETAFILE__, nNumEntries: uint, lpPaletteEntries: *s_tagPALETTEENTRY) -> uint
export import def #extern #dllimport GetEnhMetaFilePixelFormat(hemf: *s_HENHMETAFILE__, cbBuffer: uint, ppfd: *s_tagPIXELFORMATDESCRIPTOR) -> uint
export import def #extern #dllimport GetWinMetaFileBits(hemf: *s_HENHMETAFILE__, cbData16: uint, pData16: *uint8, iMapMode: int, hdcRef: *s_HDC__) -> uint
export import def #extern #dllimport PlayEnhMetaFile(hdc: *s_HDC__, hmf: *s_HENHMETAFILE__, lprect: *s_tagRECT) -> int
export import def #extern #dllimport PlayEnhMetaFileRecord(hdc: *s_HDC__, pht: *s_tagHANDLETABLE, pmr: *s_tagENHMETARECORD, cht: uint) -> int
export import def #extern #dllimport SetEnhMetaFileBits(nSize: uint, pb: *uint8) -> *s_HENHMETAFILE__
export import def #extern #dllimport SetWinMetaFileBits(nSize: uint, lpMeta16Data: *uint8, hdcRef: *s_HDC__, lpMFP: *s_tagMETAFILEPICT) -> *s_HENHMETAFILE__
export import def #extern #dllimport GdiComment(hdc: *s_HDC__, nSize: uint, lpData: *uint8) -> int
export import def #extern #dllimport GetTextMetricsA(hdc: *s_HDC__, lptm: *s_tagTEXTMETRICA) -> int
export import def #extern #dllimport GetTextMetricsW(hdc: *s_HDC__, lptm: *s_tagTEXTMETRICW) -> int
export import def #extern #dllimport AngleArc(hdc: *s_HDC__, x: int, y: int, r: ulong, StartAngle: float, SweepAngle: float) -> int
export import def #extern #dllimport PolyPolyline(hdc: *s_HDC__, apt: *s_tagPOINT, asz: *ulong, csz: ulong) -> int
export import def #extern #dllimport GetWorldTransform(hdc: *s_HDC__, lpxf: *s_tagXFORM) -> int
export import def #extern #dllimport SetWorldTransform(hdc: *s_HDC__, lpxf: *s_tagXFORM) -> int
export import def #extern #dllimport ModifyWorldTransform(hdc: *s_HDC__, lpxf: *s_tagXFORM, mode: ulong) -> int
export import def #extern #dllimport CombineTransform(lpxfOut: *s_tagXFORM, lpxf1: *s_tagXFORM, lpxf2: *s_tagXFORM) -> int
export import def #extern #dllimport CreateDIBSection(hdc: *s_HDC__, pbmi: *s_tagBITMAPINFO, usage: uint, ppvBits: **, hSection: *, offset: ulong) -> *s_HBITMAP__
export import def #extern #dllimport GetDIBColorTable(hdc: *s_HDC__, iStart: uint, cEntries: uint, prgbq: *s_tagRGBQUAD) -> uint
export import def #extern #dllimport SetDIBColorTable(hdc: *s_HDC__, iStart: uint, cEntries: uint, prgbq: *s_tagRGBQUAD) -> uint
export import def #extern #dllimport SetColorAdjustment(hdc: *s_HDC__, lpca: *s_tagCOLORADJUSTMENT) -> int
export import def #extern #dllimport GetColorAdjustment(hdc: *s_HDC__, lpca: *s_tagCOLORADJUSTMENT) -> int
export import def #extern #dllimport CreateHalftonePalette(hdc: *s_HDC__) -> *s_HPALETTE__
export import def #extern #dllimport StartDocA(hdc: *s_HDC__, lpdi: *s__DOCINFOA) -> int
export import def #extern #dllimport StartDocW(hdc: *s_HDC__, lpdi: *s__DOCINFOW) -> int
export import def #extern #dllimport EndDoc(hdc: *s_HDC__) -> int
export import def #extern #dllimport StartPage(hdc: *s_HDC__) -> int
export import def #extern #dllimport EndPage(hdc: *s_HDC__) -> int
export import def #extern #dllimport AbortDoc(hdc: *s_HDC__) -> int
export import def #extern #dllimport SetAbortProc(hdc: *s_HDC__, proc: def (*s_HDC__, int) -> (int)) -> int
export import def #extern #dllimport AbortPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport ArcTo(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int, xr1: int, yr1: int, xr2: int, yr2: int) -> int
export import def #extern #dllimport BeginPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport CloseFigure(hdc: *s_HDC__) -> int
export import def #extern #dllimport EndPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport FillPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport FlattenPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetPath(hdc: *s_HDC__, apt: *s_tagPOINT, aj: *uint8, cpt: int) -> int
export import def #extern #dllimport PathToRegion(hdc: *s_HDC__) -> *s_HRGN__
export import def #extern #dllimport PolyDraw(hdc: *s_HDC__, apt: *s_tagPOINT, aj: *uint8, cpt: int) -> int
export import def #extern #dllimport SelectClipPath(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport SetArcDirection(hdc: *s_HDC__, dir: int) -> int
export import def #extern #dllimport SetMiterLimit(hdc: *s_HDC__, limit: float, old: *float) -> int
export import def #extern #dllimport StrokeAndFillPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport StrokePath(hdc: *s_HDC__) -> int
export import def #extern #dllimport WidenPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport ExtCreatePen(iPenStyle: ulong, cWidth: ulong, plbrush: *s_tagLOGBRUSH, cStyle: ulong, pstyle: *ulong) -> *s_HPEN__
export import def #extern #dllimport GetMiterLimit(hdc: *s_HDC__, plimit: *float) -> int
export import def #extern #dllimport GetArcDirection(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetObjectA(h: *, c: int, pv: *) -> int
export import def #extern #dllimport GetObjectW(h: *, c: int, pv: *) -> int
export import def #extern #dllimport MoveToEx(hdc: *s_HDC__, x: int, y: int, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport TextOutA(hdc: *s_HDC__, x: int, y: int, lpString: *char, c: int) -> int
export import def #extern #dllimport TextOutW(hdc: *s_HDC__, x: int, y: int, lpString: *ushort, c: int) -> int
export import def #extern #dllimport ExtTextOutA(hdc: *s_HDC__, x: int, y: int, options: uint, lprect: *s_tagRECT, lpString: *char, c: uint, lpDx: *int) -> int
export import def #extern #dllimport ExtTextOutW(hdc: *s_HDC__, x: int, y: int, options: uint, lprect: *s_tagRECT, lpString: *ushort, c: uint, lpDx: *int) -> int
export import def #extern #dllimport PolyTextOutA(hdc: *s_HDC__, ppt: *s_tagPOLYTEXTA, nstrings: int) -> int
export import def #extern #dllimport PolyTextOutW(hdc: *s_HDC__, ppt: *s_tagPOLYTEXTW, nstrings: int) -> int
export import def #extern #dllimport CreatePolygonRgn(pptl: *s_tagPOINT, cPoint: int, iMode: int) -> *s_HRGN__
export import def #extern #dllimport DPtoLP(hdc: *s_HDC__, lppt: *s_tagPOINT, c: int) -> int
export import def #extern #dllimport LPtoDP(hdc: *s_HDC__, lppt: *s_tagPOINT, c: int) -> int
export import def #extern #dllimport Polygon(hdc: *s_HDC__, apt: *s_tagPOINT, cpt: int) -> int
export import def #extern #dllimport Polyline(hdc: *s_HDC__, apt: *s_tagPOINT, cpt: int) -> int
export import def #extern #dllimport PolyBezier(hdc: *s_HDC__, apt: *s_tagPOINT, cpt: ulong) -> int
export import def #extern #dllimport PolyBezierTo(hdc: *s_HDC__, apt: *s_tagPOINT, cpt: ulong) -> int
export import def #extern #dllimport PolylineTo(hdc: *s_HDC__, apt: *s_tagPOINT, cpt: ulong) -> int
export import def #extern #dllimport SetViewportExtEx(hdc: *s_HDC__, x: int, y: int, lpsz: *s_tagSIZE) -> int
export import def #extern #dllimport SetViewportOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport SetWindowExtEx(hdc: *s_HDC__, x: int, y: int, lpsz: *s_tagSIZE) -> int
export import def #extern #dllimport SetWindowOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport OffsetViewportOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport OffsetWindowOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport ScaleViewportExtEx(hdc: *s_HDC__, xn: int, dx: int, yn: int, yd: int, lpsz: *s_tagSIZE) -> int
export import def #extern #dllimport ScaleWindowExtEx(hdc: *s_HDC__, xn: int, xd: int, yn: int, yd: int, lpsz: *s_tagSIZE) -> int
export import def #extern #dllimport SetBitmapDimensionEx(hbm: *s_HBITMAP__, w: int, h: int, lpsz: *s_tagSIZE) -> int
export import def #extern #dllimport SetBrushOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport GetTextFaceA(hdc: *s_HDC__, c: int, lpName: *char) -> int
export import def #extern #dllimport GetTextFaceW(hdc: *s_HDC__, c: int, lpName: *ushort) -> int
export import def #extern #dllimport GetKerningPairsA(hdc: *s_HDC__, nPairs: ulong, lpKernPair: *s_tagKERNINGPAIR) -> ulong
export import def #extern #dllimport GetKerningPairsW(hdc: *s_HDC__, nPairs: ulong, lpKernPair: *s_tagKERNINGPAIR) -> ulong
export import def #extern #dllimport GetDCOrgEx(hdc: *s_HDC__, lppt: *s_tagPOINT) -> int
export import def #extern #dllimport FixBrushOrgEx(hdc: *s_HDC__, x: int, y: int, ptl: *s_tagPOINT) -> int
export import def #extern #dllimport UnrealizeObject(h: *) -> int
export import def #extern #dllimport GdiFlush() -> int
export import def #extern #dllimport GdiSetBatchLimit(dw: ulong) -> ulong
export import def #extern #dllimport GdiGetBatchLimit() -> ulong
export import def #extern #dllimport SetICMMode(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport CheckColorsInGamut(hdc: *s_HDC__, lpRGBTriple: *s_tagRGBTRIPLE, dlpBuffer: *, nCount: ulong) -> int
export import def #extern #dllimport GetColorSpace(hdc: *s_HDC__) -> *s_HCOLORSPACE__
export import def #extern #dllimport GetLogColorSpaceA(hColorSpace: *s_HCOLORSPACE__, lpBuffer: *s_tagLOGCOLORSPACEA, nSize: ulong) -> int
export import def #extern #dllimport GetLogColorSpaceW(hColorSpace: *s_HCOLORSPACE__, lpBuffer: *s_tagLOGCOLORSPACEW, nSize: ulong) -> int
export import def #extern #dllimport CreateColorSpaceA(lplcs: *s_tagLOGCOLORSPACEA) -> *s_HCOLORSPACE__
export import def #extern #dllimport CreateColorSpaceW(lplcs: *s_tagLOGCOLORSPACEW) -> *s_HCOLORSPACE__
export import def #extern #dllimport SetColorSpace(hdc: *s_HDC__, hcs: *s_HCOLORSPACE__) -> *s_HCOLORSPACE__
export import def #extern #dllimport DeleteColorSpace(hcs: *s_HCOLORSPACE__) -> int
export import def #extern #dllimport GetICMProfileA(hdc: *s_HDC__, pBufSize: *ulong, pszFilename: *char) -> int
export import def #extern #dllimport GetICMProfileW(hdc: *s_HDC__, pBufSize: *ulong, pszFilename: *ushort) -> int
export import def #extern #dllimport SetICMProfileA(hdc: *s_HDC__, lpFileName: *char) -> int
export import def #extern #dllimport SetICMProfileW(hdc: *s_HDC__, lpFileName: *ushort) -> int
export import def #extern #dllimport GetDeviceGammaRamp(hdc: *s_HDC__, lpRamp: *) -> int
export import def #extern #dllimport SetDeviceGammaRamp(hdc: *s_HDC__, lpRamp: *) -> int
export import def #extern #dllimport ColorMatchToTarget(hdc: *s_HDC__, hdcTarget: *s_HDC__, action: ulong) -> int
export import def #extern #dllimport EnumICMProfilesA(hdc: *s_HDC__, proc: def (*char, int64) -> (int), param: int64) -> int
export import def #extern #dllimport EnumICMProfilesW(hdc: *s_HDC__, proc: def (*ushort, int64) -> (int), param: int64) -> int
export import def #extern #dllimport UpdateICMRegKeyA(reserved: ulong, lpszCMID: *char, lpszFileName: *char, command: uint) -> int
export import def #extern #dllimport UpdateICMRegKeyW(reserved: ulong, lpszCMID: *ushort, lpszFileName: *ushort, command: uint) -> int
export import def #extern #dllimport ColorCorrectPalette(hdc: *s_HDC__, hPal: *s_HPALETTE__, deFirst: ulong, num: ulong) -> int
export import def #extern #dllimport wglCopyContext(_0: *s_HGLRC__, _1: *s_HGLRC__, _2: uint) -> int
export import def #extern #dllimport wglCreateContext(_0: *s_HDC__) -> *s_HGLRC__
export import def #extern #dllimport wglCreateLayerContext(_0: *s_HDC__, _1: int) -> *s_HGLRC__
export import def #extern #dllimport wglDeleteContext(_0: *s_HGLRC__) -> int
export import def #extern #dllimport wglGetCurrentContext() -> *s_HGLRC__
export import def #extern #dllimport wglGetCurrentDC() -> *s_HDC__
export import def #extern #dllimport wglGetProcAddress(_0: *char) -> *INT_PTR ()
export import def #extern #dllimport wglMakeCurrent(_0: *s_HDC__, _1: *s_HGLRC__) -> int
export import def #extern #dllimport wglShareLists(_0: *s_HGLRC__, _1: *s_HGLRC__) -> int
export import def #extern #dllimport wglUseFontBitmapsA(_0: *s_HDC__, _1: ulong, _2: ulong, _3: ulong) -> int
export import def #extern #dllimport wglUseFontBitmapsW(_0: *s_HDC__, _1: ulong, _2: ulong, _3: ulong) -> int
export import def #extern #dllimport SwapBuffers(_0: *s_HDC__) -> int
export import def #extern #dllimport wglUseFontOutlinesA(_0: *s_HDC__, _1: ulong, _2: ulong, _3: ulong, _4: float, _5: float, _6: int, _7: *s__GLYPHMETRICSFLOAT) -> int
export import def #extern #dllimport wglUseFontOutlinesW(_0: *s_HDC__, _1: ulong, _2: ulong, _3: ulong, _4: float, _5: float, _6: int, _7: *s__GLYPHMETRICSFLOAT) -> int
export import def #extern #dllimport wglDescribeLayerPlane(_0: *s_HDC__, _1: int, _2: int, _3: uint, _4: *s_tagLAYERPLANEDESCRIPTOR) -> int
export import def #extern #dllimport wglSetLayerPaletteEntries(_0: *s_HDC__, _1: int, _2: int, _3: int, _4: *ulong) -> int
export import def #extern #dllimport wglGetLayerPaletteEntries(_0: *s_HDC__, _1: int, _2: int, _3: int, _4: *ulong) -> int
export import def #extern #dllimport wglRealizeLayerPalette(_0: *s_HDC__, _1: int, _2: int) -> int
export import def #extern #dllimport wglSwapLayerBuffers(_0: *s_HDC__, _1: uint) -> int
export import def #extern #dllimport wglSwapMultipleBuffers(_0: uint, _1: *s__WGLSWAP) -> ulong
export import def #extern #dllimport wvsprintfA(_0: *char, _1: *char, arglist: *char) -> int
export import def #extern #dllimport wvsprintfW(_0: *ushort, _1: *ushort, arglist: *char) -> int
export import def #extern #dllimport wsprintfA(_0: *char, _1: *char, ...) -> int
export import def #extern #dllimport wsprintfW(_0: *ushort, _1: *ushort, ...) -> int
export import def #extern #dllimport LoadKeyboardLayoutA(pwszKLID: *char, Flags: uint) -> *s_HKL__
export import def #extern #dllimport LoadKeyboardLayoutW(pwszKLID: *ushort, Flags: uint) -> *s_HKL__
export import def #extern #dllimport ActivateKeyboardLayout(hkl: *s_HKL__, Flags: uint) -> *s_HKL__
export import def #extern #dllimport ToUnicodeEx(wVirtKey: uint, wScanCode: uint, lpKeyState: *uint8, pwszBuff: *ushort, cchBuff: int, wFlags: uint, dwhkl: *s_HKL__) -> int
export import def #extern #dllimport UnloadKeyboardLayout(hkl: *s_HKL__) -> int
export import def #extern #dllimport GetKeyboardLayoutNameA(pwszKLID: *char) -> int
export import def #extern #dllimport GetKeyboardLayoutNameW(pwszKLID: *ushort) -> int
export import def #extern #dllimport GetKeyboardLayoutList(nBuff: int, lpList: **s_HKL__) -> int
export import def #extern #dllimport GetKeyboardLayout(idThread: ulong) -> *s_HKL__
export import def #extern #dllimport GetMouseMovePointsEx(cbSize: uint, lppt: *s_tagMOUSEMOVEPOINT, lpptBuf: *s_tagMOUSEMOVEPOINT, nBufPoints: int, resolution: ulong) -> int
export import def #extern #dllimport CreateDesktopA(lpszDesktop: *char, lpszDevice: *char, pDevmode: *s__devicemodeA, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *s__SECURITY_ATTRIBUTES) -> *s_HDESK__
export import def #extern #dllimport CreateDesktopW(lpszDesktop: *ushort, lpszDevice: *ushort, pDevmode: *s__devicemodeW, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *s__SECURITY_ATTRIBUTES) -> *s_HDESK__
export import def #extern #dllimport CreateDesktopExA(lpszDesktop: *char, lpszDevice: *char, pDevmode: *s__devicemodeA, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *s__SECURITY_ATTRIBUTES, ulHeapSize: ulong, pvoid: *) -> *s_HDESK__
export import def #extern #dllimport CreateDesktopExW(lpszDesktop: *ushort, lpszDevice: *ushort, pDevmode: *s__devicemodeW, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *s__SECURITY_ATTRIBUTES, ulHeapSize: ulong, pvoid: *) -> *s_HDESK__
export import def #extern #dllimport OpenDesktopA(lpszDesktop: *char, dwFlags: ulong, fInherit: int, dwDesiredAccess: ulong) -> *s_HDESK__
export import def #extern #dllimport OpenDesktopW(lpszDesktop: *ushort, dwFlags: ulong, fInherit: int, dwDesiredAccess: ulong) -> *s_HDESK__
export import def #extern #dllimport OpenInputDesktop(dwFlags: ulong, fInherit: int, dwDesiredAccess: ulong) -> *s_HDESK__
export import def #extern #dllimport EnumDesktopsA(hwinsta: *s_HWINSTA__, lpEnumFunc: def (*char, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumDesktopsW(hwinsta: *s_HWINSTA__, lpEnumFunc: def (*ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumDesktopWindows(hDesktop: *s_HDESK__, lpfn: def (*s_HWND__, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport SwitchDesktop(hDesktop: *s_HDESK__) -> int
export import def #extern #dllimport SetThreadDesktop(hDesktop: *s_HDESK__) -> int
export import def #extern #dllimport CloseDesktop(hDesktop: *s_HDESK__) -> int
export import def #extern #dllimport GetThreadDesktop(dwThreadId: ulong) -> *s_HDESK__
export import def #extern #dllimport CreateWindowStationA(lpwinsta: *char, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *s__SECURITY_ATTRIBUTES) -> *s_HWINSTA__
export import def #extern #dllimport CreateWindowStationW(lpwinsta: *ushort, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *s__SECURITY_ATTRIBUTES) -> *s_HWINSTA__
export import def #extern #dllimport OpenWindowStationA(lpszWinSta: *char, fInherit: int, dwDesiredAccess: ulong) -> *s_HWINSTA__
export import def #extern #dllimport OpenWindowStationW(lpszWinSta: *ushort, fInherit: int, dwDesiredAccess: ulong) -> *s_HWINSTA__
export import def #extern #dllimport EnumWindowStationsA(lpEnumFunc: def (*char, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumWindowStationsW(lpEnumFunc: def (*ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport CloseWindowStation(hWinSta: *s_HWINSTA__) -> int
export import def #extern #dllimport SetProcessWindowStation(hWinSta: *s_HWINSTA__) -> int
export import def #extern #dllimport GetProcessWindowStation() -> *s_HWINSTA__
export import def #extern #dllimport SetUserObjectSecurity(hObj: *, pSIRequested: *ulong, pSID: *) -> int
export import def #extern #dllimport GetUserObjectSecurity(hObj: *, pSIRequested: *ulong, pSID: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport GetUserObjectInformationA(hObj: *, nIndex: int, pvInfo: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport GetUserObjectInformationW(hObj: *, nIndex: int, pvInfo: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport SetUserObjectInformationA(hObj: *, nIndex: int, pvInfo: *, nLength: ulong) -> int
export import def #extern #dllimport SetUserObjectInformationW(hObj: *, nIndex: int, pvInfo: *, nLength: ulong) -> int
export import def #extern #dllimport IsHungAppWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport DisableProcessWindowsGhosting()
export import def #extern #dllimport RegisterWindowMessageA(lpString: *char) -> uint
export import def #extern #dllimport RegisterWindowMessageW(lpString: *ushort) -> uint
export import def #extern #dllimport TrackMouseEvent(lpEventTrack: *s_tagTRACKMOUSEEVENT) -> int
export import def #extern #dllimport DrawEdge(hdc: *s_HDC__, qrc: *s_tagRECT, edge: uint, grfFlags: uint) -> int
export import def #extern #dllimport DrawFrameControl(_0: *s_HDC__, _1: *s_tagRECT, _2: uint, _3: uint) -> int
export import def #extern #dllimport DrawCaption(hwnd: *s_HWND__, hdc: *s_HDC__, lprect: *s_tagRECT, flags: uint) -> int
export import def #extern #dllimport DrawAnimatedRects(hwnd: *s_HWND__, idAni: int, lprcFrom: *s_tagRECT, lprcTo: *s_tagRECT) -> int
export import def #extern #dllimport GetMessageA(lpMsg: *s_tagMSG, hWnd: *s_HWND__, wMsgFilterMin: uint, wMsgFilterMax: uint) -> int
export import def #extern #dllimport GetMessageW(lpMsg: *s_tagMSG, hWnd: *s_HWND__, wMsgFilterMin: uint, wMsgFilterMax: uint) -> int
export import def #extern #dllimport TranslateMessage(lpMsg: *s_tagMSG) -> int
export import def #extern #dllimport DispatchMessageA(lpMsg: *s_tagMSG) -> int64
export import def #extern #dllimport DispatchMessageW(lpMsg: *s_tagMSG) -> int64
export import def #extern #dllimport SetMessageQueue(cMessagesMax: int) -> int
export import def #extern #dllimport PeekMessageA(lpMsg: *s_tagMSG, hWnd: *s_HWND__, wMsgFilterMin: uint, wMsgFilterMax: uint, wRemoveMsg: uint) -> int
export import def #extern #dllimport PeekMessageW(lpMsg: *s_tagMSG, hWnd: *s_HWND__, wMsgFilterMin: uint, wMsgFilterMax: uint, wRemoveMsg: uint) -> int
export import def #extern #dllimport RegisterHotKey(hWnd: *s_HWND__, id: int, fsModifiers: uint, vk: uint) -> int
export import def #extern #dllimport UnregisterHotKey(hWnd: *s_HWND__, id: int) -> int
export import def #extern #dllimport ExitWindowsEx(uFlags: uint, dwReason: ulong) -> int
export import def #extern #dllimport SwapMouseButton(fSwap: int) -> int
export import def #extern #dllimport GetMessagePos() -> ulong
export import def #extern #dllimport GetMessageTime() -> long
export import def #extern #dllimport GetMessageExtraInfo() -> int64
export import def #extern #dllimport GetUnpredictedMessagePos() -> ulong
export import def #extern #dllimport IsWow64Message() -> int
export import def #extern #dllimport SetMessageExtraInfo(lParam: int64) -> int64
export import def #extern #dllimport SendMessageA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport SendMessageW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport SendMessageTimeoutA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64, fuFlags: uint, uTimeout: uint, lpdwResult: *uint64) -> int64
export import def #extern #dllimport SendMessageTimeoutW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64, fuFlags: uint, uTimeout: uint, lpdwResult: *uint64) -> int64
export import def #extern #dllimport SendNotifyMessageA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport SendNotifyMessageW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport SendMessageCallbackA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64, lpResultCallBack: def (*s_HWND__, uint, uint64, int64) -> (), dwData: uint64) -> int
export import def #extern #dllimport SendMessageCallbackW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64, lpResultCallBack: def (*s_HWND__, uint, uint64, int64) -> (), dwData: uint64) -> int
export import def #extern #dllimport BroadcastSystemMessageExA(flags: ulong, lpInfo: *ulong, Msg: uint, wParam: uint64, lParam: int64, pbsmInfo: *BSMINFO) -> long
export import def #extern #dllimport BroadcastSystemMessageExW(flags: ulong, lpInfo: *ulong, Msg: uint, wParam: uint64, lParam: int64, pbsmInfo: *BSMINFO) -> long
export import def #extern #dllimport BroadcastSystemMessageA(flags: ulong, lpInfo: *ulong, Msg: uint, wParam: uint64, lParam: int64) -> long
export import def #extern #dllimport BroadcastSystemMessageW(flags: ulong, lpInfo: *ulong, Msg: uint, wParam: uint64, lParam: int64) -> long
export import def #extern #dllimport RegisterDeviceNotificationA(hRecipient: *, NotificationFilter: *, Flags: ulong) -> *
export import def #extern #dllimport RegisterDeviceNotificationW(hRecipient: *, NotificationFilter: *, Flags: ulong) -> *
export import def #extern #dllimport UnregisterDeviceNotification(Handle: *) -> int
export import def #extern #dllimport RegisterPowerSettingNotification(hRecipient: *, PowerSettingGuid: *s__GUID, Flags: ulong) -> *
export import def #extern #dllimport UnregisterPowerSettingNotification(Handle: *) -> int
export import def #extern #dllimport RegisterSuspendResumeNotification(hRecipient: *, Flags: ulong) -> *
export import def #extern #dllimport UnregisterSuspendResumeNotification(Handle: *) -> int
export import def #extern #dllimport PostMessageA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport PostMessageW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport PostThreadMessageA(idThread: ulong, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport PostThreadMessageW(idThread: ulong, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport AttachThreadInput(idAttach: ulong, idAttachTo: ulong, fAttach: int) -> int
export import def #extern #dllimport ReplyMessage(lResult: int64) -> int
export import def #extern #dllimport WaitMessage() -> int
export import def #extern #dllimport WaitForInputIdle(hProcess: *, dwMilliseconds: ulong) -> ulong
export import def #extern #dllimport DefWindowProcA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefWindowProcW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport PostQuitMessage(nExitCode: int)
export import def #extern #dllimport CallWindowProcA(lpPrevWndFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport CallWindowProcW(lpPrevWndFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport InSendMessage() -> int
export import def #extern #dllimport InSendMessageEx(lpReserved: *) -> ulong
export import def #extern #dllimport GetDoubleClickTime() -> uint
export import def #extern #dllimport SetDoubleClickTime(_0: uint) -> int
export import def #extern #dllimport RegisterClassA(lpWndClass: *s_tagWNDCLASSA) -> ushort
export import def #extern #dllimport RegisterClassW(lpWndClass: *s_tagWNDCLASSW) -> ushort
export import def #extern #dllimport UnregisterClassA(lpClassName: *char, hInstance: *s_HINSTANCE__) -> int
export import def #extern #dllimport UnregisterClassW(lpClassName: *ushort, hInstance: *s_HINSTANCE__) -> int
export import def #extern #dllimport GetClassInfoA(hInstance: *s_HINSTANCE__, lpClassName: *char, lpWndClass: *s_tagWNDCLASSA) -> int
export import def #extern #dllimport GetClassInfoW(hInstance: *s_HINSTANCE__, lpClassName: *ushort, lpWndClass: *s_tagWNDCLASSW) -> int
export import def #extern #dllimport RegisterClassExA(_0: *s_tagWNDCLASSEXA) -> ushort
export import def #extern #dllimport RegisterClassExW(_0: *s_tagWNDCLASSEXW) -> ushort
export import def #extern #dllimport GetClassInfoExA(hInstance: *s_HINSTANCE__, lpszClass: *char, lpwcx: *s_tagWNDCLASSEXA) -> int
export import def #extern #dllimport GetClassInfoExW(hInstance: *s_HINSTANCE__, lpszClass: *ushort, lpwcx: *s_tagWNDCLASSEXW) -> int
export import def #extern #dllimport CreateWindowExA(dwExStyle: ulong, lpClassName: *char, lpWindowName: *char, dwStyle: ulong, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: *s_HWND__, hMenu: *s_HMENU__, hInstance: *s_HINSTANCE__, lpParam: *) -> *s_HWND__
export import def #extern #dllimport CreateWindowExW(dwExStyle: ulong, lpClassName: *ushort, lpWindowName: *ushort, dwStyle: ulong, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: *s_HWND__, hMenu: *s_HMENU__, hInstance: *s_HINSTANCE__, lpParam: *) -> *s_HWND__
export import def #extern #dllimport IsWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport IsMenu(hMenu: *s_HMENU__) -> int
export import def #extern #dllimport IsChild(hWndParent: *s_HWND__, hWnd: *s_HWND__) -> int
export import def #extern #dllimport DestroyWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport ShowWindow(hWnd: *s_HWND__, nCmdShow: int) -> int
export import def #extern #dllimport AnimateWindow(hWnd: *s_HWND__, dwTime: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport UpdateLayeredWindow(hWnd: *s_HWND__, hdcDst: *s_HDC__, pptDst: *s_tagPOINT, psize: *s_tagSIZE, hdcSrc: *s_HDC__, pptSrc: *s_tagPOINT, crKey: ulong, pblend: *s__BLENDFUNCTION, dwFlags: ulong) -> int
export import def #extern #dllimport UpdateLayeredWindowIndirect(hWnd: *s_HWND__, pULWInfo: *s_tagUPDATELAYEREDWINDOWINFO) -> int
export import def #extern #dllimport GetLayeredWindowAttributes(hwnd: *s_HWND__, pcrKey: *ulong, pbAlpha: *uint8, pdwFlags: *ulong) -> int
export import def #extern #dllimport PrintWindow(hwnd: *s_HWND__, hdcBlt: *s_HDC__, nFlags: uint) -> int
export import def #extern #dllimport SetLayeredWindowAttributes(hwnd: *s_HWND__, crKey: ulong, bAlpha: uint8, dwFlags: ulong) -> int
export import def #extern #dllimport ShowWindowAsync(hWnd: *s_HWND__, nCmdShow: int) -> int
export import def #extern #dllimport FlashWindow(hWnd: *s_HWND__, bInvert: int) -> int
export import def #extern #dllimport FlashWindowEx(pfwi: *FLASHWINFO) -> int
export import def #extern #dllimport ShowOwnedPopups(hWnd: *s_HWND__, fShow: int) -> int
export import def #extern #dllimport OpenIcon(hWnd: *s_HWND__) -> int
export import def #extern #dllimport CloseWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport MoveWindow(hWnd: *s_HWND__, X: int, Y: int, nWidth: int, nHeight: int, bRepaint: int) -> int
export import def #extern #dllimport SetWindowPos(hWnd: *s_HWND__, hWndInsertAfter: *s_HWND__, X: int, Y: int, cx: int, cy: int, uFlags: uint) -> int
export import def #extern #dllimport GetWindowPlacement(hWnd: *s_HWND__, lpwndpl: *s_tagWINDOWPLACEMENT) -> int
export import def #extern #dllimport SetWindowPlacement(hWnd: *s_HWND__, lpwndpl: *s_tagWINDOWPLACEMENT) -> int
export import def #extern #dllimport GetWindowDisplayAffinity(hWnd: *s_HWND__, pdwAffinity: *ulong) -> int
export import def #extern #dllimport SetWindowDisplayAffinity(hWnd: *s_HWND__, dwAffinity: ulong) -> int
export import def #extern #dllimport BeginDeferWindowPos(nNumWindows: int) -> *
export import def #extern #dllimport DeferWindowPos(hWinPosInfo: *, hWnd: *s_HWND__, hWndInsertAfter: *s_HWND__, x: int, y: int, cx: int, cy: int, uFlags: uint) -> *
export import def #extern #dllimport EndDeferWindowPos(hWinPosInfo: *) -> int
export import def #extern #dllimport IsWindowVisible(hWnd: *s_HWND__) -> int
export import def #extern #dllimport IsIconic(hWnd: *s_HWND__) -> int
export import def #extern #dllimport AnyPopup() -> int
export import def #extern #dllimport BringWindowToTop(hWnd: *s_HWND__) -> int
export import def #extern #dllimport IsZoomed(hWnd: *s_HWND__) -> int
export import def #extern #dllimport CreateDialogParamA(hInstance: *s_HINSTANCE__, lpTemplateName: *char, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> *s_HWND__
export import def #extern #dllimport CreateDialogParamW(hInstance: *s_HINSTANCE__, lpTemplateName: *ushort, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> *s_HWND__
export import def #extern #dllimport CreateDialogIndirectParamA(hInstance: *s_HINSTANCE__, lpTemplate: *s_DLGTEMPLATE, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> *s_HWND__
export import def #extern #dllimport CreateDialogIndirectParamW(hInstance: *s_HINSTANCE__, lpTemplate: *s_DLGTEMPLATE, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> *s_HWND__
export import def #extern #dllimport DialogBoxParamA(hInstance: *s_HINSTANCE__, lpTemplateName: *char, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> int64
export import def #extern #dllimport DialogBoxParamW(hInstance: *s_HINSTANCE__, lpTemplateName: *ushort, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> int64
export import def #extern #dllimport DialogBoxIndirectParamA(hInstance: *s_HINSTANCE__, hDialogTemplate: *s_DLGTEMPLATE, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> int64
export import def #extern #dllimport DialogBoxIndirectParamW(hInstance: *s_HINSTANCE__, hDialogTemplate: *s_DLGTEMPLATE, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> int64
export import def #extern #dllimport EndDialog(hDlg: *s_HWND__, nResult: int64) -> int
export import def #extern #dllimport GetDlgItem(hDlg: *s_HWND__, nIDDlgItem: int) -> *s_HWND__
export import def #extern #dllimport SetDlgItemInt(hDlg: *s_HWND__, nIDDlgItem: int, uValue: uint, bSigned: int) -> int
export import def #extern #dllimport GetDlgItemInt(hDlg: *s_HWND__, nIDDlgItem: int, lpTranslated: *int, bSigned: int) -> uint
export import def #extern #dllimport SetDlgItemTextA(hDlg: *s_HWND__, nIDDlgItem: int, lpString: *char) -> int
export import def #extern #dllimport SetDlgItemTextW(hDlg: *s_HWND__, nIDDlgItem: int, lpString: *ushort) -> int
export import def #extern #dllimport GetDlgItemTextA(hDlg: *s_HWND__, nIDDlgItem: int, lpString: *char, cchMax: int) -> uint
export import def #extern #dllimport GetDlgItemTextW(hDlg: *s_HWND__, nIDDlgItem: int, lpString: *ushort, cchMax: int) -> uint
export import def #extern #dllimport CheckDlgButton(hDlg: *s_HWND__, nIDButton: int, uCheck: uint) -> int
export import def #extern #dllimport CheckRadioButton(hDlg: *s_HWND__, nIDFirstButton: int, nIDLastButton: int, nIDCheckButton: int) -> int
export import def #extern #dllimport IsDlgButtonChecked(hDlg: *s_HWND__, nIDButton: int) -> uint
export import def #extern #dllimport SendDlgItemMessageA(hDlg: *s_HWND__, nIDDlgItem: int, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport SendDlgItemMessageW(hDlg: *s_HWND__, nIDDlgItem: int, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport GetNextDlgGroupItem(hDlg: *s_HWND__, hCtl: *s_HWND__, bPrevious: int) -> *s_HWND__
export import def #extern #dllimport GetNextDlgTabItem(hDlg: *s_HWND__, hCtl: *s_HWND__, bPrevious: int) -> *s_HWND__
export import def #extern #dllimport GetDlgCtrlID(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetDialogBaseUnits() -> long
export import def #extern #dllimport DefDlgProcA(hDlg: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefDlgProcW(hDlg: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export const DCDC_DEFAULT: int = 0
export const DCDC_DISABLE_FONT_UPDATE: int = 1
export const DCDC_DISABLE_RELAYOUT: int = 2
export import def #extern SetDialogControlDpiChangeBehavior(hWnd: *s_HWND__, mask: e_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS, values: e_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS) -> int
export import def #extern GetDialogControlDpiChangeBehavior(hWnd: *s_HWND__) -> e_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
export const DDC_DEFAULT: int = 0
export const DDC_DISABLE_ALL: int = 1
export const DDC_DISABLE_RESIZE: int = 2
export const DDC_DISABLE_CONTROL_RELAYOUT: int = 4
export import def #extern SetDialogDpiChangeBehavior(hDlg: *s_HWND__, mask: e_DIALOG_DPI_CHANGE_BEHAVIORS, values: e_DIALOG_DPI_CHANGE_BEHAVIORS) -> int
export import def #extern GetDialogDpiChangeBehavior(hDlg: *s_HWND__) -> e_DIALOG_DPI_CHANGE_BEHAVIORS
export import def #extern #dllimport CallMsgFilterA(lpMsg: *s_tagMSG, nCode: int) -> int
export import def #extern #dllimport CallMsgFilterW(lpMsg: *s_tagMSG, nCode: int) -> int
export import def #extern #dllimport OpenClipboard(hWndNewOwner: *s_HWND__) -> int
export import def #extern #dllimport CloseClipboard() -> int
export import def #extern #dllimport GetClipboardSequenceNumber() -> ulong
export import def #extern #dllimport GetClipboardOwner() -> *s_HWND__
export import def #extern #dllimport SetClipboardViewer(hWndNewViewer: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetClipboardViewer() -> *s_HWND__
export import def #extern #dllimport ChangeClipboardChain(hWndRemove: *s_HWND__, hWndNewNext: *s_HWND__) -> int
export import def #extern #dllimport SetClipboardData(uFormat: uint, hMem: *) -> *
export import def #extern #dllimport GetClipboardData(uFormat: uint) -> *
export import def #extern #dllimport GetClipboardMetadata(format: uint, metadata: *s_tagGETCLIPBMETADATA) -> int
export import def #extern #dllimport RegisterClipboardFormatA(lpszFormat: *char) -> uint
export import def #extern #dllimport RegisterClipboardFormatW(lpszFormat: *ushort) -> uint
export import def #extern #dllimport CountClipboardFormats() -> int
export import def #extern #dllimport EnumClipboardFormats(format: uint) -> uint
export import def #extern #dllimport GetClipboardFormatNameA(format: uint, lpszFormatName: *char, cchMaxCount: int) -> int
export import def #extern #dllimport GetClipboardFormatNameW(format: uint, lpszFormatName: *ushort, cchMaxCount: int) -> int
export import def #extern #dllimport EmptyClipboard() -> int
export import def #extern #dllimport IsClipboardFormatAvailable(format: uint) -> int
export import def #extern #dllimport GetPriorityClipboardFormat(paFormatPriorityList: *uint, cFormats: int) -> int
export import def #extern #dllimport GetOpenClipboardWindow() -> *s_HWND__
export import def #extern #dllimport AddClipboardFormatListener(hwnd: *s_HWND__) -> int
export import def #extern #dllimport RemoveClipboardFormatListener(hwnd: *s_HWND__) -> int
export import def #extern #dllimport GetUpdatedClipboardFormats(lpuiFormats: *uint, cFormats: uint, pcFormatsOut: *uint) -> int
export import def #extern #dllimport CharToOemA(pSrc: *char, pDst: *char) -> int
export import def #extern #dllimport CharToOemW(pSrc: *ushort, pDst: *char) -> int
export import def #extern #dllimport OemToCharA(pSrc: *char, pDst: *char) -> int
export import def #extern #dllimport OemToCharW(pSrc: *char, pDst: *ushort) -> int
export import def #extern #dllimport CharToOemBuffA(lpszSrc: *char, lpszDst: *char, cchDstLength: ulong) -> int
export import def #extern #dllimport CharToOemBuffW(lpszSrc: *ushort, lpszDst: *char, cchDstLength: ulong) -> int
export import def #extern #dllimport OemToCharBuffA(lpszSrc: *char, lpszDst: *char, cchDstLength: ulong) -> int
export import def #extern #dllimport OemToCharBuffW(lpszSrc: *char, lpszDst: *ushort, cchDstLength: ulong) -> int
export import def #extern #dllimport CharUpperA(lpsz: *char) -> *char
export import def #extern #dllimport CharUpperW(lpsz: *ushort) -> *ushort
export import def #extern #dllimport CharUpperBuffA(lpsz: *char, cchLength: ulong) -> ulong
export import def #extern #dllimport CharUpperBuffW(lpsz: *ushort, cchLength: ulong) -> ulong
export import def #extern #dllimport CharLowerA(lpsz: *char) -> *char
export import def #extern #dllimport CharLowerW(lpsz: *ushort) -> *ushort
export import def #extern #dllimport CharLowerBuffA(lpsz: *char, cchLength: ulong) -> ulong
export import def #extern #dllimport CharLowerBuffW(lpsz: *ushort, cchLength: ulong) -> ulong
export import def #extern #dllimport CharNextA(lpsz: *char) -> *char
export import def #extern #dllimport CharNextW(lpsz: *ushort) -> *ushort
export import def #extern #dllimport CharPrevA(lpszStart: *char, lpszCurrent: *char) -> *char
export import def #extern #dllimport CharPrevW(lpszStart: *ushort, lpszCurrent: *ushort) -> *ushort
export import def #extern #dllimport CharNextExA(CodePage: ushort, lpCurrentChar: *char, dwFlags: ulong) -> *char
export import def #extern #dllimport CharPrevExA(CodePage: ushort, lpStart: *char, lpCurrentChar: *char, dwFlags: ulong) -> *char
export import def #extern #dllimport IsCharAlphaA(ch: char) -> int
export import def #extern #dllimport IsCharAlphaW(ch: ushort) -> int
export import def #extern #dllimport IsCharAlphaNumericA(ch: char) -> int
export import def #extern #dllimport IsCharAlphaNumericW(ch: ushort) -> int
export import def #extern #dllimport IsCharUpperA(ch: char) -> int
export import def #extern #dllimport IsCharUpperW(ch: ushort) -> int
export import def #extern #dllimport IsCharLowerA(ch: char) -> int
export import def #extern #dllimport IsCharLowerW(ch: ushort) -> int
export import def #extern #dllimport SetFocus(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetActiveWindow() -> *s_HWND__
export import def #extern #dllimport GetFocus() -> *s_HWND__
export import def #extern #dllimport GetKBCodePage() -> uint
export import def #extern #dllimport GetKeyState(nVirtKey: int) -> short
export import def #extern #dllimport GetAsyncKeyState(vKey: int) -> short
export import def #extern #dllimport GetKeyboardState(lpKeyState: *uint8) -> int
export import def #extern #dllimport SetKeyboardState(lpKeyState: *uint8) -> int
export import def #extern #dllimport GetKeyNameTextA(lParam: long, lpString: *char, cchSize: int) -> int
export import def #extern #dllimport GetKeyNameTextW(lParam: long, lpString: *ushort, cchSize: int) -> int
export import def #extern #dllimport GetKeyboardType(nTypeFlag: int) -> int
export import def #extern #dllimport ToAscii(uVirtKey: uint, uScanCode: uint, lpKeyState: *uint8, lpChar: *ushort, uFlags: uint) -> int
export import def #extern #dllimport ToAsciiEx(uVirtKey: uint, uScanCode: uint, lpKeyState: *uint8, lpChar: *ushort, uFlags: uint, dwhkl: *s_HKL__) -> int
export import def #extern #dllimport ToUnicode(wVirtKey: uint, wScanCode: uint, lpKeyState: *uint8, pwszBuff: *ushort, cchBuff: int, wFlags: uint) -> int
export import def #extern #dllimport OemKeyScan(wOemChar: ushort) -> ulong
export import def #extern #dllimport VkKeyScanA(ch: char) -> short
export import def #extern #dllimport VkKeyScanW(ch: ushort) -> short
export import def #extern #dllimport VkKeyScanExA(ch: char, dwhkl: *s_HKL__) -> short
export import def #extern #dllimport VkKeyScanExW(ch: ushort, dwhkl: *s_HKL__) -> short
export import def #extern #dllimport keybd_event(bVk: uint8, bScan: uint8, dwFlags: ulong, dwExtraInfo: uint64)
export import def #extern #dllimport mouse_event(dwFlags: ulong, dx: ulong, dy: ulong, dwData: ulong, dwExtraInfo: uint64)
export import def #extern #dllimport SendInput(cInputs: uint, pInputs: *s_tagINPUT, cbSize: int) -> uint
export import def #extern #dllimport GetTouchInputInfo(hTouchInput: *s_HTOUCHINPUT__, cInputs: uint, pInputs: *s_tagTOUCHINPUT, cbSize: int) -> int
export import def #extern #dllimport CloseTouchInputHandle(hTouchInput: *s_HTOUCHINPUT__) -> int
export import def #extern #dllimport RegisterTouchWindow(hwnd: *s_HWND__, ulFlags: ulong) -> int
export import def #extern #dllimport UnregisterTouchWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport IsTouchWindow(hwnd: *s_HWND__, pulFlags: *ulong) -> int
export const PT_POINTER: int = 1
export const PT_TOUCH: int = 2
export const PT_PEN: int = 3
export const PT_MOUSE: int = 4
export const PT_TOUCHPAD: int = 5
export const POINTER_CHANGE_NONE: int = 0
export const POINTER_CHANGE_FIRSTBUTTON_DOWN: int = 1
export const POINTER_CHANGE_FIRSTBUTTON_UP: int = 2
export const POINTER_CHANGE_SECONDBUTTON_DOWN: int = 3
export const POINTER_CHANGE_SECONDBUTTON_UP: int = 4
export const POINTER_CHANGE_THIRDBUTTON_DOWN: int = 5
export const POINTER_CHANGE_THIRDBUTTON_UP: int = 6
export const POINTER_CHANGE_FOURTHBUTTON_DOWN: int = 7
export const POINTER_CHANGE_FOURTHBUTTON_UP: int = 8
export const POINTER_CHANGE_FIFTHBUTTON_DOWN: int = 9
export const POINTER_CHANGE_FIFTHBUTTON_UP: int = 10
export const POINTER_FEEDBACK_DEFAULT: int = 1
export const POINTER_FEEDBACK_INDIRECT: int = 2
export const POINTER_FEEDBACK_NONE: int = 3
export import def #extern #dllimport InitializeTouchInjection(maxCount: uint, dwMode: ulong) -> int
export import def #extern #dllimport InjectTouchInput(count: uint, contacts: *s_tagPOINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerType(pointerId: uint, pointerType: *ulong) -> int
export import def #extern #dllimport GetPointerCursorId(pointerId: uint, cursorId: *uint) -> int
export import def #extern #dllimport GetPointerInfo(pointerId: uint, pointerInfo: *s_tagPOINTER_INFO) -> int
export import def #extern #dllimport GetPointerInfoHistory(pointerId: uint, entriesCount: *uint, pointerInfo: *s_tagPOINTER_INFO) -> int
export import def #extern #dllimport GetPointerFrameInfo(pointerId: uint, pointerCount: *uint, pointerInfo: *s_tagPOINTER_INFO) -> int
export import def #extern #dllimport GetPointerFrameInfoHistory(pointerId: uint, entriesCount: *uint, pointerCount: *uint, pointerInfo: *s_tagPOINTER_INFO) -> int
export import def #extern #dllimport GetPointerTouchInfo(pointerId: uint, touchInfo: *s_tagPOINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerTouchInfoHistory(pointerId: uint, entriesCount: *uint, touchInfo: *s_tagPOINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerFrameTouchInfo(pointerId: uint, pointerCount: *uint, touchInfo: *s_tagPOINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerFrameTouchInfoHistory(pointerId: uint, entriesCount: *uint, pointerCount: *uint, touchInfo: *s_tagPOINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerPenInfo(pointerId: uint, penInfo: *s_tagPOINTER_PEN_INFO) -> int
export import def #extern #dllimport GetPointerPenInfoHistory(pointerId: uint, entriesCount: *uint, penInfo: *s_tagPOINTER_PEN_INFO) -> int
export import def #extern #dllimport GetPointerFramePenInfo(pointerId: uint, pointerCount: *uint, penInfo: *s_tagPOINTER_PEN_INFO) -> int
export import def #extern #dllimport GetPointerFramePenInfoHistory(pointerId: uint, entriesCount: *uint, pointerCount: *uint, penInfo: *s_tagPOINTER_PEN_INFO) -> int
export import def #extern #dllimport SkipPointerFrameMessages(pointerId: uint) -> int
export import def #extern #dllimport RegisterPointerInputTarget(hwnd: *s_HWND__, pointerType: ulong) -> int
export import def #extern #dllimport UnregisterPointerInputTarget(hwnd: *s_HWND__, pointerType: ulong) -> int
export import def #extern #dllimport RegisterPointerInputTargetEx(hwnd: *s_HWND__, pointerType: ulong, fObserve: int) -> int
export import def #extern #dllimport UnregisterPointerInputTargetEx(hwnd: *s_HWND__, pointerType: ulong) -> int
export import def #extern #dllimport CreateSyntheticPointerDevice(pointerType: ulong, maxCount: ulong, mode: e_POINTER_FEEDBACK_MODE) -> *s_HSYNTHETICPOINTERDEVICE__
export import def #extern #dllimport InjectSyntheticPointerInput(device: *s_HSYNTHETICPOINTERDEVICE__, pointerInfo: *s_tagPOINTER_TYPE_INFO, count: uint) -> int
export import def #extern #dllimport DestroySyntheticPointerDevice(device: *s_HSYNTHETICPOINTERDEVICE__)
export import def #extern #dllimport EnableMouseInPointer(fEnable: int) -> int
export import def #extern #dllimport IsMouseInPointerEnabled() -> int
export import def #extern #dllimport EnableMouseInPointerForThread() -> int
export import def #extern #dllimport RegisterTouchHitTestingWindow(hwnd: *s_HWND__, value: ulong) -> int
export import def #extern #dllimport EvaluateProximityToRect(controlBoundingBox: *s_tagRECT, pHitTestingInput: *s_tagTOUCH_HIT_TESTING_INPUT, pProximityEval: *s_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION) -> int
export import def #extern #dllimport EvaluateProximityToPolygon(numVertices: uint, controlPolygon: *s_tagPOINT, pHitTestingInput: *s_tagTOUCH_HIT_TESTING_INPUT, pProximityEval: *s_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION) -> int
export import def #extern #dllimport PackTouchHitTestingProximityEvaluation(pHitTestingInput: *s_tagTOUCH_HIT_TESTING_INPUT, pProximityEval: *s_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION) -> int64
export const FEEDBACK_TOUCH_CONTACTVISUALIZATION: int = 1
export const FEEDBACK_PEN_BARRELVISUALIZATION: int = 2
export const FEEDBACK_PEN_TAP: int = 3
export const FEEDBACK_PEN_DOUBLETAP: int = 4
export const FEEDBACK_PEN_PRESSANDHOLD: int = 5
export const FEEDBACK_PEN_RIGHTTAP: int = 6
export const FEEDBACK_TOUCH_TAP: int = 7
export const FEEDBACK_TOUCH_DOUBLETAP: int = 8
export const FEEDBACK_TOUCH_PRESSANDHOLD: int = 9
export const FEEDBACK_TOUCH_RIGHTTAP: int = 10
export const FEEDBACK_GESTURE_PRESSANDTAP: int = 11
export const FEEDBACK_MAX: int = -1
export import def #extern #dllimport GetWindowFeedbackSetting(hwnd: *s_HWND__, feedback: e_tagFEEDBACK_TYPE, dwFlags: ulong, pSize: *uint, config: *) -> int
export import def #extern #dllimport SetWindowFeedbackSetting(hwnd: *s_HWND__, feedback: e_tagFEEDBACK_TYPE, dwFlags: ulong, size: uint, configuration: *) -> int
export import def #extern #dllimport GetPointerInputTransform(pointerId: uint, historyCount: uint, inputTransform: *s_tagINPUT_TRANSFORM) -> int
export import def #extern #dllimport GetLastInputInfo(plii: *s_tagLASTINPUTINFO) -> int
export import def #extern #dllimport MapVirtualKeyA(uCode: uint, uMapType: uint) -> uint
export import def #extern #dllimport MapVirtualKeyW(uCode: uint, uMapType: uint) -> uint
export import def #extern #dllimport MapVirtualKeyExA(uCode: uint, uMapType: uint, dwhkl: *s_HKL__) -> uint
export import def #extern #dllimport MapVirtualKeyExW(uCode: uint, uMapType: uint, dwhkl: *s_HKL__) -> uint
export import def #extern #dllimport GetInputState() -> int
export import def #extern #dllimport GetQueueStatus(flags: uint) -> ulong
export import def #extern #dllimport GetCapture() -> *s_HWND__
export import def #extern #dllimport SetCapture(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport ReleaseCapture() -> int
export import def #extern #dllimport MsgWaitForMultipleObjects(nCount: ulong, pHandles: **, fWaitAll: int, dwMilliseconds: ulong, dwWakeMask: ulong) -> ulong
export import def #extern #dllimport MsgWaitForMultipleObjectsEx(nCount: ulong, pHandles: **, dwMilliseconds: ulong, dwWakeMask: ulong, dwFlags: ulong) -> ulong
export import def #extern #dllimport SetTimer(hWnd: *s_HWND__, nIDEvent: uint64, uElapse: uint, lpTimerFunc: def (*s_HWND__, uint, uint64, ulong) -> ()) -> uint64
export import def #extern #dllimport SetCoalescableTimer(hWnd: *s_HWND__, nIDEvent: uint64, uElapse: uint, lpTimerFunc: def (*s_HWND__, uint, uint64, ulong) -> (), uToleranceDelay: ulong) -> uint64
export import def #extern #dllimport KillTimer(hWnd: *s_HWND__, uIDEvent: uint64) -> int
export import def #extern #dllimport IsWindowUnicode(hWnd: *s_HWND__) -> int
export import def #extern #dllimport EnableWindow(hWnd: *s_HWND__, bEnable: int) -> int
export import def #extern #dllimport IsWindowEnabled(hWnd: *s_HWND__) -> int
export import def #extern #dllimport LoadAcceleratorsA(hInstance: *s_HINSTANCE__, lpTableName: *char) -> *s_HACCEL__
export import def #extern #dllimport LoadAcceleratorsW(hInstance: *s_HINSTANCE__, lpTableName: *ushort) -> *s_HACCEL__
export import def #extern #dllimport CreateAcceleratorTableA(paccel: *s_tagACCEL, cAccel: int) -> *s_HACCEL__
export import def #extern #dllimport CreateAcceleratorTableW(paccel: *s_tagACCEL, cAccel: int) -> *s_HACCEL__
export import def #extern #dllimport DestroyAcceleratorTable(hAccel: *s_HACCEL__) -> int
export import def #extern #dllimport CopyAcceleratorTableA(hAccelSrc: *s_HACCEL__, lpAccelDst: *s_tagACCEL, cAccelEntries: int) -> int
export import def #extern #dllimport CopyAcceleratorTableW(hAccelSrc: *s_HACCEL__, lpAccelDst: *s_tagACCEL, cAccelEntries: int) -> int
export import def #extern #dllimport TranslateAcceleratorA(hWnd: *s_HWND__, hAccTable: *s_HACCEL__, lpMsg: *s_tagMSG) -> int
export import def #extern #dllimport TranslateAcceleratorW(hWnd: *s_HWND__, hAccTable: *s_HACCEL__, lpMsg: *s_tagMSG) -> int
export import def #extern #dllimport GetSystemMetrics(nIndex: int) -> int
export import def #extern #dllimport GetSystemMetricsForDpi(nIndex: int, dpi: uint) -> int
export import def #extern #dllimport LoadMenuA(hInstance: *s_HINSTANCE__, lpMenuName: *char) -> *s_HMENU__
export import def #extern #dllimport LoadMenuW(hInstance: *s_HINSTANCE__, lpMenuName: *ushort) -> *s_HMENU__
export import def #extern #dllimport LoadMenuIndirectA(lpMenuTemplate: *) -> *s_HMENU__
export import def #extern #dllimport LoadMenuIndirectW(lpMenuTemplate: *) -> *s_HMENU__
export import def #extern #dllimport GetMenu(hWnd: *s_HWND__) -> *s_HMENU__
export import def #extern #dllimport SetMenu(hWnd: *s_HWND__, hMenu: *s_HMENU__) -> int
export import def #extern #dllimport ChangeMenuA(hMenu: *s_HMENU__, cmd: uint, lpszNewItem: *char, cmdInsert: uint, flags: uint) -> int
export import def #extern #dllimport ChangeMenuW(hMenu: *s_HMENU__, cmd: uint, lpszNewItem: *ushort, cmdInsert: uint, flags: uint) -> int
export import def #extern #dllimport HiliteMenuItem(hWnd: *s_HWND__, hMenu: *s_HMENU__, uIDHiliteItem: uint, uHilite: uint) -> int
export import def #extern #dllimport GetMenuStringA(hMenu: *s_HMENU__, uIDItem: uint, lpString: *char, cchMax: int, flags: uint) -> int
export import def #extern #dllimport GetMenuStringW(hMenu: *s_HMENU__, uIDItem: uint, lpString: *ushort, cchMax: int, flags: uint) -> int
export import def #extern #dllimport GetMenuState(hMenu: *s_HMENU__, uId: uint, uFlags: uint) -> uint
export import def #extern #dllimport DrawMenuBar(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetSystemMenu(hWnd: *s_HWND__, bRevert: int) -> *s_HMENU__
export import def #extern #dllimport CreateMenu() -> *s_HMENU__
export import def #extern #dllimport CreatePopupMenu() -> *s_HMENU__
export import def #extern #dllimport DestroyMenu(hMenu: *s_HMENU__) -> int
export import def #extern #dllimport CheckMenuItem(hMenu: *s_HMENU__, uIDCheckItem: uint, uCheck: uint) -> ulong
export import def #extern #dllimport EnableMenuItem(hMenu: *s_HMENU__, uIDEnableItem: uint, uEnable: uint) -> int
export import def #extern #dllimport GetSubMenu(hMenu: *s_HMENU__, nPos: int) -> *s_HMENU__
export import def #extern #dllimport GetMenuItemID(hMenu: *s_HMENU__, nPos: int) -> uint
export import def #extern #dllimport GetMenuItemCount(hMenu: *s_HMENU__) -> int
export import def #extern #dllimport InsertMenuA(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint, uIDNewItem: uint64, lpNewItem: *char) -> int
export import def #extern #dllimport InsertMenuW(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint, uIDNewItem: uint64, lpNewItem: *ushort) -> int
export import def #extern #dllimport AppendMenuA(hMenu: *s_HMENU__, uFlags: uint, uIDNewItem: uint64, lpNewItem: *char) -> int
export import def #extern #dllimport AppendMenuW(hMenu: *s_HMENU__, uFlags: uint, uIDNewItem: uint64, lpNewItem: *ushort) -> int
export import def #extern #dllimport ModifyMenuA(hMnu: *s_HMENU__, uPosition: uint, uFlags: uint, uIDNewItem: uint64, lpNewItem: *char) -> int
export import def #extern #dllimport ModifyMenuW(hMnu: *s_HMENU__, uPosition: uint, uFlags: uint, uIDNewItem: uint64, lpNewItem: *ushort) -> int
export import def #extern #dllimport RemoveMenu(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint) -> int
export import def #extern #dllimport DeleteMenu(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint) -> int
export import def #extern #dllimport SetMenuItemBitmaps(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint, hBitmapUnchecked: *s_HBITMAP__, hBitmapChecked: *s_HBITMAP__) -> int
export import def #extern #dllimport GetMenuCheckMarkDimensions() -> long
export import def #extern #dllimport TrackPopupMenu(hMenu: *s_HMENU__, uFlags: uint, x: int, y: int, nReserved: int, hWnd: *s_HWND__, prcRect: *s_tagRECT) -> int
export import def #extern #dllimport TrackPopupMenuEx(hMenu: *s_HMENU__, uFlags: uint, x: int, y: int, hwnd: *s_HWND__, lptpm: *s_tagTPMPARAMS) -> int
export import def #extern #dllimport CalculatePopupWindowPosition(anchorPoint: *s_tagPOINT, windowSize: *s_tagSIZE, flags: uint, excludeRect: *s_tagRECT, popupWindowPosition: *s_tagRECT) -> int
export import def #extern #dllimport GetMenuInfo(_0: *s_HMENU__, _1: *s_tagMENUINFO) -> int
export import def #extern #dllimport SetMenuInfo(_0: *s_HMENU__, _1: *s_tagMENUINFO) -> int
export import def #extern #dllimport EndMenu() -> int
export import def #extern #dllimport InsertMenuItemA(hmenu: *s_HMENU__, item: uint, fByPosition: int, lpmi: *s_tagMENUITEMINFOA) -> int
export import def #extern #dllimport InsertMenuItemW(hmenu: *s_HMENU__, item: uint, fByPosition: int, lpmi: *s_tagMENUITEMINFOW) -> int
export import def #extern #dllimport GetMenuItemInfoA(hmenu: *s_HMENU__, item: uint, fByPosition: int, lpmii: *s_tagMENUITEMINFOA) -> int
export import def #extern #dllimport GetMenuItemInfoW(hmenu: *s_HMENU__, item: uint, fByPosition: int, lpmii: *s_tagMENUITEMINFOW) -> int
export import def #extern #dllimport SetMenuItemInfoA(hmenu: *s_HMENU__, item: uint, fByPositon: int, lpmii: *s_tagMENUITEMINFOA) -> int
export import def #extern #dllimport SetMenuItemInfoW(hmenu: *s_HMENU__, item: uint, fByPositon: int, lpmii: *s_tagMENUITEMINFOW) -> int
export import def #extern #dllimport GetMenuDefaultItem(hMenu: *s_HMENU__, fByPos: uint, gmdiFlags: uint) -> uint
export import def #extern #dllimport SetMenuDefaultItem(hMenu: *s_HMENU__, uItem: uint, fByPos: uint) -> int
export import def #extern #dllimport GetMenuItemRect(hWnd: *s_HWND__, hMenu: *s_HMENU__, uItem: uint, lprcItem: *s_tagRECT) -> int
export import def #extern #dllimport MenuItemFromPoint(hWnd: *s_HWND__, hMenu: *s_HMENU__, ptScreen: s_tagPOINT) -> int
export import def #extern #dllimport DragObject(hwndParent: *s_HWND__, hwndFrom: *s_HWND__, fmt: uint, data: uint64, hcur: *s_HICON__) -> ulong
export import def #extern #dllimport DragDetect(hwnd: *s_HWND__, pt: s_tagPOINT) -> int
export import def #extern #dllimport DrawIcon(hDC: *s_HDC__, X: int, Y: int, hIcon: *s_HICON__) -> int
export import def #extern #dllimport DrawTextA(hdc: *s_HDC__, lpchText: *char, cchText: int, lprc: *s_tagRECT, format: uint) -> int
export import def #extern #dllimport DrawTextW(hdc: *s_HDC__, lpchText: *ushort, cchText: int, lprc: *s_tagRECT, format: uint) -> int
export import def #extern #dllimport DrawTextExA(hdc: *s_HDC__, lpchText: *char, cchText: int, lprc: *s_tagRECT, format: uint, lpdtp: *s_tagDRAWTEXTPARAMS) -> int
export import def #extern #dllimport DrawTextExW(hdc: *s_HDC__, lpchText: *ushort, cchText: int, lprc: *s_tagRECT, format: uint, lpdtp: *s_tagDRAWTEXTPARAMS) -> int
export import def #extern #dllimport GrayStringA(hDC: *s_HDC__, hBrush: *s_HBRUSH__, lpOutputFunc: def (*s_HDC__, int64, int) -> (int), lpData: int64, nCount: int, X: int, Y: int, nWidth: int, nHeight: int) -> int
export import def #extern #dllimport GrayStringW(hDC: *s_HDC__, hBrush: *s_HBRUSH__, lpOutputFunc: def (*s_HDC__, int64, int) -> (int), lpData: int64, nCount: int, X: int, Y: int, nWidth: int, nHeight: int) -> int
export import def #extern #dllimport DrawStateA(hdc: *s_HDC__, hbrFore: *s_HBRUSH__, qfnCallBack: def (*s_HDC__, int64, uint64, int, int) -> (int), lData: int64, wData: uint64, x: int, y: int, cx: int, cy: int, uFlags: uint) -> int
export import def #extern #dllimport DrawStateW(hdc: *s_HDC__, hbrFore: *s_HBRUSH__, qfnCallBack: def (*s_HDC__, int64, uint64, int, int) -> (int), lData: int64, wData: uint64, x: int, y: int, cx: int, cy: int, uFlags: uint) -> int
export import def #extern #dllimport TabbedTextOutA(hdc: *s_HDC__, x: int, y: int, lpString: *char, chCount: int, nTabPositions: int, lpnTabStopPositions: *int, nTabOrigin: int) -> long
export import def #extern #dllimport TabbedTextOutW(hdc: *s_HDC__, x: int, y: int, lpString: *ushort, chCount: int, nTabPositions: int, lpnTabStopPositions: *int, nTabOrigin: int) -> long
export import def #extern #dllimport GetTabbedTextExtentA(hdc: *s_HDC__, lpString: *char, chCount: int, nTabPositions: int, lpnTabStopPositions: *int) -> ulong
export import def #extern #dllimport GetTabbedTextExtentW(hdc: *s_HDC__, lpString: *ushort, chCount: int, nTabPositions: int, lpnTabStopPositions: *int) -> ulong
export import def #extern #dllimport UpdateWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport SetActiveWindow(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetForegroundWindow() -> *s_HWND__
export import def #extern #dllimport PaintDesktop(hdc: *s_HDC__) -> int
export import def #extern #dllimport SwitchToThisWindow(hwnd: *s_HWND__, fUnknown: int)
export import def #extern #dllimport SetForegroundWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport AllowSetForegroundWindow(dwProcessId: ulong) -> int
export import def #extern #dllimport LockSetForegroundWindow(uLockCode: uint) -> int
export import def #extern #dllimport WindowFromDC(hDC: *s_HDC__) -> *s_HWND__
export import def #extern #dllimport GetDC(hWnd: *s_HWND__) -> *s_HDC__
export import def #extern #dllimport GetDCEx(hWnd: *s_HWND__, hrgnClip: *s_HRGN__, flags: ulong) -> *s_HDC__
export import def #extern #dllimport GetWindowDC(hWnd: *s_HWND__) -> *s_HDC__
export import def #extern #dllimport ReleaseDC(hWnd: *s_HWND__, hDC: *s_HDC__) -> int
export import def #extern #dllimport BeginPaint(hWnd: *s_HWND__, lpPaint: *s_tagPAINTSTRUCT) -> *s_HDC__
export import def #extern #dllimport EndPaint(hWnd: *s_HWND__, lpPaint: *s_tagPAINTSTRUCT) -> int
export import def #extern #dllimport GetUpdateRect(hWnd: *s_HWND__, lpRect: *s_tagRECT, bErase: int) -> int
export import def #extern #dllimport GetUpdateRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__, bErase: int) -> int
export import def #extern #dllimport SetWindowRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__, bRedraw: int) -> int
export import def #extern #dllimport GetWindowRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__) -> int
export import def #extern #dllimport GetWindowRgnBox(hWnd: *s_HWND__, lprc: *s_tagRECT) -> int
export import def #extern #dllimport ExcludeUpdateRgn(hDC: *s_HDC__, hWnd: *s_HWND__) -> int
export import def #extern #dllimport InvalidateRect(hWnd: *s_HWND__, lpRect: *s_tagRECT, bErase: int) -> int
export import def #extern #dllimport ValidateRect(hWnd: *s_HWND__, lpRect: *s_tagRECT) -> int
export import def #extern #dllimport InvalidateRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__, bErase: int) -> int
export import def #extern #dllimport ValidateRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__) -> int
export import def #extern #dllimport RedrawWindow(hWnd: *s_HWND__, lprcUpdate: *s_tagRECT, hrgnUpdate: *s_HRGN__, flags: uint) -> int
export import def #extern #dllimport LockWindowUpdate(hWndLock: *s_HWND__) -> int
export import def #extern #dllimport ScrollWindow(hWnd: *s_HWND__, XAmount: int, YAmount: int, lpRect: *s_tagRECT, lpClipRect: *s_tagRECT) -> int
export import def #extern #dllimport ScrollDC(hDC: *s_HDC__, dx: int, dy: int, lprcScroll: *s_tagRECT, lprcClip: *s_tagRECT, hrgnUpdate: *s_HRGN__, lprcUpdate: *s_tagRECT) -> int
export import def #extern #dllimport ScrollWindowEx(hWnd: *s_HWND__, dx: int, dy: int, prcScroll: *s_tagRECT, prcClip: *s_tagRECT, hrgnUpdate: *s_HRGN__, prcUpdate: *s_tagRECT, flags: uint) -> int
export import def #extern #dllimport SetScrollPos(hWnd: *s_HWND__, nBar: int, nPos: int, bRedraw: int) -> int
export import def #extern #dllimport GetScrollPos(hWnd: *s_HWND__, nBar: int) -> int
export import def #extern #dllimport SetScrollRange(hWnd: *s_HWND__, nBar: int, nMinPos: int, nMaxPos: int, bRedraw: int) -> int
export import def #extern #dllimport GetScrollRange(hWnd: *s_HWND__, nBar: int, lpMinPos: *int, lpMaxPos: *int) -> int
export import def #extern #dllimport ShowScrollBar(hWnd: *s_HWND__, wBar: int, bShow: int) -> int
export import def #extern #dllimport EnableScrollBar(hWnd: *s_HWND__, wSBflags: uint, wArrows: uint) -> int
export import def #extern #dllimport SetPropA(hWnd: *s_HWND__, lpString: *char, hData: *) -> int
export import def #extern #dllimport SetPropW(hWnd: *s_HWND__, lpString: *ushort, hData: *) -> int
export import def #extern #dllimport GetPropA(hWnd: *s_HWND__, lpString: *char) -> *
export import def #extern #dllimport GetPropW(hWnd: *s_HWND__, lpString: *ushort) -> *
export import def #extern #dllimport RemovePropA(hWnd: *s_HWND__, lpString: *char) -> *
export import def #extern #dllimport RemovePropW(hWnd: *s_HWND__, lpString: *ushort) -> *
export import def #extern #dllimport EnumPropsExA(hWnd: *s_HWND__, lpEnumFunc: def (*s_HWND__, *char, *, uint64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumPropsExW(hWnd: *s_HWND__, lpEnumFunc: def (*s_HWND__, *ushort, *, uint64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumPropsA(hWnd: *s_HWND__, lpEnumFunc: def (*s_HWND__, *char, *) -> (int)) -> int
export import def #extern #dllimport EnumPropsW(hWnd: *s_HWND__, lpEnumFunc: def (*s_HWND__, *ushort, *) -> (int)) -> int
export import def #extern #dllimport SetWindowTextA(hWnd: *s_HWND__, lpString: *char) -> int
export import def #extern #dllimport SetWindowTextW(hWnd: *s_HWND__, lpString: *ushort) -> int
export import def #extern #dllimport GetWindowTextA(hWnd: *s_HWND__, lpString: *char, nMaxCount: int) -> int
export import def #extern #dllimport GetWindowTextW(hWnd: *s_HWND__, lpString: *ushort, nMaxCount: int) -> int
export import def #extern #dllimport GetWindowTextLengthA(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetWindowTextLengthW(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetClientRect(hWnd: *s_HWND__, lpRect: *s_tagRECT) -> int
export import def #extern #dllimport GetWindowRect(hWnd: *s_HWND__, lpRect: *s_tagRECT) -> int
export import def #extern #dllimport AdjustWindowRect(lpRect: *s_tagRECT, dwStyle: ulong, bMenu: int) -> int
export import def #extern #dllimport AdjustWindowRectEx(lpRect: *s_tagRECT, dwStyle: ulong, bMenu: int, dwExStyle: ulong) -> int
export import def #extern #dllimport AdjustWindowRectExForDpi(lpRect: *s_tagRECT, dwStyle: ulong, bMenu: int, dwExStyle: ulong, dpi: uint) -> int
export import def #extern #dllimport SetWindowContextHelpId(_0: *s_HWND__, _1: ulong) -> int
export import def #extern #dllimport GetWindowContextHelpId(_0: *s_HWND__) -> ulong
export import def #extern #dllimport SetMenuContextHelpId(_0: *s_HMENU__, _1: ulong) -> int
export import def #extern #dllimport GetMenuContextHelpId(_0: *s_HMENU__) -> ulong
export import def #extern #dllimport MessageBoxA(hWnd: *s_HWND__, lpText: *char, lpCaption: *char, uType: uint) -> int
export import def #extern #dllimport MessageBoxW(hWnd: *s_HWND__, lpText: *ushort, lpCaption: *ushort, uType: uint) -> int
export import def #extern #dllimport MessageBoxExA(hWnd: *s_HWND__, lpText: *char, lpCaption: *char, uType: uint, wLanguageId: ushort) -> int
export import def #extern #dllimport MessageBoxExW(hWnd: *s_HWND__, lpText: *ushort, lpCaption: *ushort, uType: uint, wLanguageId: ushort) -> int
export import def #extern #dllimport MessageBoxIndirectA(lpmbp: *s_tagMSGBOXPARAMSA) -> int
export import def #extern #dllimport MessageBoxIndirectW(lpmbp: *s_tagMSGBOXPARAMSW) -> int
export import def #extern #dllimport MessageBeep(uType: uint) -> int
export import def #extern #dllimport ShowCursor(bShow: int) -> int
export import def #extern #dllimport SetCursorPos(X: int, Y: int) -> int
export import def #extern #dllimport SetPhysicalCursorPos(X: int, Y: int) -> int
export import def #extern #dllimport SetCursor(hCursor: *s_HICON__) -> *s_HICON__
export import def #extern #dllimport GetCursorPos(lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport GetPhysicalCursorPos(lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport GetClipCursor(lpRect: *s_tagRECT) -> int
export import def #extern #dllimport GetCursor() -> *s_HICON__
export import def #extern #dllimport CreateCaret(hWnd: *s_HWND__, hBitmap: *s_HBITMAP__, nWidth: int, nHeight: int) -> int
export import def #extern #dllimport GetCaretBlinkTime() -> uint
export import def #extern #dllimport SetCaretBlinkTime(uMSeconds: uint) -> int
export import def #extern #dllimport DestroyCaret() -> int
export import def #extern #dllimport HideCaret(hWnd: *s_HWND__) -> int
export import def #extern #dllimport ShowCaret(hWnd: *s_HWND__) -> int
export import def #extern #dllimport SetCaretPos(X: int, Y: int) -> int
export import def #extern #dllimport GetCaretPos(lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport ClientToScreen(hWnd: *s_HWND__, lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport ScreenToClient(hWnd: *s_HWND__, lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport LogicalToPhysicalPoint(hWnd: *s_HWND__, lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport PhysicalToLogicalPoint(hWnd: *s_HWND__, lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport LogicalToPhysicalPointForPerMonitorDPI(hWnd: *s_HWND__, lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport PhysicalToLogicalPointForPerMonitorDPI(hWnd: *s_HWND__, lpPoint: *s_tagPOINT) -> int
export import def #extern #dllimport MapWindowPoints(hWndFrom: *s_HWND__, hWndTo: *s_HWND__, lpPoints: *s_tagPOINT, cPoints: uint) -> int
export import def #extern #dllimport WindowFromPoint(Point: s_tagPOINT) -> *s_HWND__
export import def #extern #dllimport WindowFromPhysicalPoint(Point: s_tagPOINT) -> *s_HWND__
export import def #extern #dllimport ChildWindowFromPoint(hWndParent: *s_HWND__, Point: s_tagPOINT) -> *s_HWND__
export import def #extern #dllimport ClipCursor(lpRect: *s_tagRECT) -> int
export import def #extern #dllimport ChildWindowFromPointEx(hwnd: *s_HWND__, pt: s_tagPOINT, flags: uint) -> *s_HWND__
export import def #extern #dllimport GetSysColor(nIndex: int) -> ulong
export import def #extern #dllimport GetSysColorBrush(nIndex: int) -> *s_HBRUSH__
export import def #extern #dllimport SetSysColors(cElements: int, lpaElements: *int, lpaRgbValues: *ulong) -> int
export import def #extern #dllimport DrawFocusRect(hDC: *s_HDC__, lprc: *s_tagRECT) -> int
export import def #extern #dllimport FillRect(hDC: *s_HDC__, lprc: *s_tagRECT, hbr: *s_HBRUSH__) -> int
export import def #extern #dllimport FrameRect(hDC: *s_HDC__, lprc: *s_tagRECT, hbr: *s_HBRUSH__) -> int
export import def #extern #dllimport InvertRect(hDC: *s_HDC__, lprc: *s_tagRECT) -> int
export import def #extern #dllimport SetRect(lprc: *s_tagRECT, xLeft: int, yTop: int, xRight: int, yBottom: int) -> int
export import def #extern #dllimport SetRectEmpty(lprc: *s_tagRECT) -> int
export import def #extern #dllimport CopyRect(lprcDst: *s_tagRECT, lprcSrc: *s_tagRECT) -> int
export import def #extern #dllimport InflateRect(lprc: *s_tagRECT, dx: int, dy: int) -> int
export import def #extern #dllimport IntersectRect(lprcDst: *s_tagRECT, lprcSrc1: *s_tagRECT, lprcSrc2: *s_tagRECT) -> int
export import def #extern #dllimport UnionRect(lprcDst: *s_tagRECT, lprcSrc1: *s_tagRECT, lprcSrc2: *s_tagRECT) -> int
export import def #extern #dllimport SubtractRect(lprcDst: *s_tagRECT, lprcSrc1: *s_tagRECT, lprcSrc2: *s_tagRECT) -> int
export import def #extern #dllimport OffsetRect(lprc: *s_tagRECT, dx: int, dy: int) -> int
export import def #extern #dllimport IsRectEmpty(lprc: *s_tagRECT) -> int
export import def #extern #dllimport EqualRect(lprc1: *s_tagRECT, lprc2: *s_tagRECT) -> int
export import def #extern #dllimport PtInRect(lprc: *s_tagRECT, pt: s_tagPOINT) -> int
export import def #extern #dllimport GetWindowWord(hWnd: *s_HWND__, nIndex: int) -> ushort
export import def #extern #dllimport SetWindowWord(hWnd: *s_HWND__, nIndex: int, wNewWord: ushort) -> ushort
export import def #extern #dllimport GetWindowLongA(hWnd: *s_HWND__, nIndex: int) -> long
export import def #extern #dllimport GetWindowLongW(hWnd: *s_HWND__, nIndex: int) -> long
export import def #extern #dllimport SetWindowLongA(hWnd: *s_HWND__, nIndex: int, dwNewLong: long) -> long
export import def #extern #dllimport SetWindowLongW(hWnd: *s_HWND__, nIndex: int, dwNewLong: long) -> long
export import def #extern #dllimport GetWindowLongPtrA(hWnd: *s_HWND__, nIndex: int) -> int64
export import def #extern #dllimport GetWindowLongPtrW(hWnd: *s_HWND__, nIndex: int) -> int64
export import def #extern #dllimport SetWindowLongPtrA(hWnd: *s_HWND__, nIndex: int, dwNewLong: int64) -> int64
export import def #extern #dllimport SetWindowLongPtrW(hWnd: *s_HWND__, nIndex: int, dwNewLong: int64) -> int64
export import def #extern #dllimport GetClassWord(hWnd: *s_HWND__, nIndex: int) -> ushort
export import def #extern #dllimport SetClassWord(hWnd: *s_HWND__, nIndex: int, wNewWord: ushort) -> ushort
export import def #extern #dllimport GetClassLongA(hWnd: *s_HWND__, nIndex: int) -> ulong
export import def #extern #dllimport GetClassLongW(hWnd: *s_HWND__, nIndex: int) -> ulong
export import def #extern #dllimport SetClassLongA(hWnd: *s_HWND__, nIndex: int, dwNewLong: long) -> ulong
export import def #extern #dllimport SetClassLongW(hWnd: *s_HWND__, nIndex: int, dwNewLong: long) -> ulong
export import def #extern #dllimport GetClassLongPtrA(hWnd: *s_HWND__, nIndex: int) -> uint64
export import def #extern #dllimport GetClassLongPtrW(hWnd: *s_HWND__, nIndex: int) -> uint64
export import def #extern #dllimport SetClassLongPtrA(hWnd: *s_HWND__, nIndex: int, dwNewLong: int64) -> uint64
export import def #extern #dllimport SetClassLongPtrW(hWnd: *s_HWND__, nIndex: int, dwNewLong: int64) -> uint64
export import def #extern #dllimport GetProcessDefaultLayout(pdwDefaultLayout: *ulong) -> int
export import def #extern #dllimport SetProcessDefaultLayout(dwDefaultLayout: ulong) -> int
export import def #extern #dllimport GetDesktopWindow() -> *s_HWND__
export import def #extern #dllimport GetParent(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport SetParent(hWndChild: *s_HWND__, hWndNewParent: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport EnumChildWindows(hWndParent: *s_HWND__, lpEnumFunc: def (*s_HWND__, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport FindWindowA(lpClassName: *char, lpWindowName: *char) -> *s_HWND__
export import def #extern #dllimport FindWindowW(lpClassName: *ushort, lpWindowName: *ushort) -> *s_HWND__
export import def #extern #dllimport FindWindowExA(hWndParent: *s_HWND__, hWndChildAfter: *s_HWND__, lpszClass: *char, lpszWindow: *char) -> *s_HWND__
export import def #extern #dllimport FindWindowExW(hWndParent: *s_HWND__, hWndChildAfter: *s_HWND__, lpszClass: *ushort, lpszWindow: *ushort) -> *s_HWND__
export import def #extern #dllimport GetShellWindow() -> *s_HWND__
export import def #extern #dllimport RegisterShellHookWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport DeregisterShellHookWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport EnumWindows(lpEnumFunc: def (*s_HWND__, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumThreadWindows(dwThreadId: ulong, lpfn: def (*s_HWND__, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport GetClassNameA(hWnd: *s_HWND__, lpClassName: *char, nMaxCount: int) -> int
export import def #extern #dllimport GetClassNameW(hWnd: *s_HWND__, lpClassName: *ushort, nMaxCount: int) -> int
export import def #extern #dllimport GetTopWindow(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetWindowThreadProcessId(hWnd: *s_HWND__, lpdwProcessId: *ulong) -> ulong
export import def #extern #dllimport IsGUIThread(bConvert: int) -> int
export import def #extern #dllimport GetLastActivePopup(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetWindow(hWnd: *s_HWND__, uCmd: uint) -> *s_HWND__
export import def #extern #dllimport SetWindowsHookA(nFilterType: int, pfnFilterProc: def (int, uint64, int64) -> (int64)) -> *s_HHOOK__
export import def #extern #dllimport SetWindowsHookW(nFilterType: int, pfnFilterProc: def (int, uint64, int64) -> (int64)) -> *s_HHOOK__
export import def #extern #dllimport UnhookWindowsHook(nCode: int, pfnFilterProc: def (int, uint64, int64) -> (int64)) -> int
export import def #extern #dllimport SetWindowsHookExA(idHook: int, lpfn: def (int, uint64, int64) -> (int64), hmod: *s_HINSTANCE__, dwThreadId: ulong) -> *s_HHOOK__
export import def #extern #dllimport SetWindowsHookExW(idHook: int, lpfn: def (int, uint64, int64) -> (int64), hmod: *s_HINSTANCE__, dwThreadId: ulong) -> *s_HHOOK__
export import def #extern #dllimport UnhookWindowsHookEx(hhk: *s_HHOOK__) -> int
export import def #extern #dllimport CallNextHookEx(hhk: *s_HHOOK__, nCode: int, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport CheckMenuRadioItem(hmenu: *s_HMENU__, first: uint, last: uint, check: uint, flags: uint) -> int
export import def #extern #dllimport LoadBitmapA(hInstance: *s_HINSTANCE__, lpBitmapName: *char) -> *s_HBITMAP__
export import def #extern #dllimport LoadBitmapW(hInstance: *s_HINSTANCE__, lpBitmapName: *ushort) -> *s_HBITMAP__
export import def #extern #dllimport LoadCursorA(hInstance: *s_HINSTANCE__, lpCursorName: *char) -> *s_HICON__
export import def #extern #dllimport LoadCursorW(hInstance: *s_HINSTANCE__, lpCursorName: *ushort) -> *s_HICON__
export import def #extern #dllimport LoadCursorFromFileA(lpFileName: *char) -> *s_HICON__
export import def #extern #dllimport LoadCursorFromFileW(lpFileName: *ushort) -> *s_HICON__
export import def #extern #dllimport CreateCursor(hInst: *s_HINSTANCE__, xHotSpot: int, yHotSpot: int, nWidth: int, nHeight: int, pvANDPlane: *, pvXORPlane: *) -> *s_HICON__
export import def #extern #dllimport DestroyCursor(hCursor: *s_HICON__) -> int
export import def #extern #dllimport SetSystemCursor(hcur: *s_HICON__, id: ulong) -> int
export import def #extern #dllimport LoadIconA(hInstance: *s_HINSTANCE__, lpIconName: *char) -> *s_HICON__
export import def #extern #dllimport LoadIconW(hInstance: *s_HINSTANCE__, lpIconName: *ushort) -> *s_HICON__
export import def #extern #dllimport PrivateExtractIconsA(szFileName: *char, nIconIndex: int, cxIcon: int, cyIcon: int, phicon: **s_HICON__, piconid: *uint, nIcons: uint, flags: uint) -> uint
export import def #extern #dllimport PrivateExtractIconsW(szFileName: *ushort, nIconIndex: int, cxIcon: int, cyIcon: int, phicon: **s_HICON__, piconid: *uint, nIcons: uint, flags: uint) -> uint
export import def #extern #dllimport CreateIcon(hInstance: *s_HINSTANCE__, nWidth: int, nHeight: int, cPlanes: uint8, cBitsPixel: uint8, lpbANDbits: *uint8, lpbXORbits: *uint8) -> *s_HICON__
export import def #extern #dllimport DestroyIcon(hIcon: *s_HICON__) -> int
export import def #extern #dllimport LookupIconIdFromDirectory(presbits: *uint8, fIcon: int) -> int
export import def #extern #dllimport LookupIconIdFromDirectoryEx(presbits: *uint8, fIcon: int, cxDesired: int, cyDesired: int, Flags: uint) -> int
export import def #extern #dllimport CreateIconFromResource(presbits: *uint8, dwResSize: ulong, fIcon: int, dwVer: ulong) -> *s_HICON__
export import def #extern #dllimport CreateIconFromResourceEx(presbits: *uint8, dwResSize: ulong, fIcon: int, dwVer: ulong, cxDesired: int, cyDesired: int, Flags: uint) -> *s_HICON__
export import def #extern #dllimport SetThreadCursorCreationScaling(cursorDpi: uint) -> uint
export import def #extern #dllimport LoadImageA(hInst: *s_HINSTANCE__, name: *char, type_: uint, cx: int, cy: int, fuLoad: uint) -> *
export import def #extern #dllimport LoadImageW(hInst: *s_HINSTANCE__, name: *ushort, type_: uint, cx: int, cy: int, fuLoad: uint) -> *
export import def #extern #dllimport CopyImage(h: *, type_: uint, cx: int, cy: int, flags: uint) -> *
export import def #extern #dllimport DrawIconEx(hdc: *s_HDC__, xLeft: int, yTop: int, hIcon: *s_HICON__, cxWidth: int, cyWidth: int, istepIfAniCur: uint, hbrFlickerFreeDraw: *s_HBRUSH__, diFlags: uint) -> int
export import def #extern #dllimport CreateIconIndirect(piconinfo: *s__ICONINFO) -> *s_HICON__
export import def #extern #dllimport CopyIcon(hIcon: *s_HICON__) -> *s_HICON__
export import def #extern #dllimport GetIconInfo(hIcon: *s_HICON__, piconinfo: *s__ICONINFO) -> int
export import def #extern #dllimport GetIconInfoExA(hicon: *s_HICON__, piconinfo: *s__ICONINFOEXA) -> int
export import def #extern #dllimport GetIconInfoExW(hicon: *s_HICON__, piconinfo: *s__ICONINFOEXW) -> int
export const EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT: int = 0
export const EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS: int = 1
export import def #extern #dllimport IsDialogMessageA(hDlg: *s_HWND__, lpMsg: *s_tagMSG) -> int
export import def #extern #dllimport IsDialogMessageW(hDlg: *s_HWND__, lpMsg: *s_tagMSG) -> int
export import def #extern #dllimport MapDialogRect(hDlg: *s_HWND__, lpRect: *s_tagRECT) -> int
export import def #extern #dllimport DlgDirListA(hDlg: *s_HWND__, lpPathSpec: *char, nIDListBox: int, nIDStaticPath: int, uFileType: uint) -> int
export import def #extern #dllimport DlgDirListW(hDlg: *s_HWND__, lpPathSpec: *ushort, nIDListBox: int, nIDStaticPath: int, uFileType: uint) -> int
export import def #extern #dllimport DlgDirSelectExA(hwndDlg: *s_HWND__, lpString: *char, chCount: int, idListBox: int) -> int
export import def #extern #dllimport DlgDirSelectExW(hwndDlg: *s_HWND__, lpString: *ushort, chCount: int, idListBox: int) -> int
export import def #extern #dllimport DlgDirListComboBoxA(hDlg: *s_HWND__, lpPathSpec: *char, nIDComboBox: int, nIDStaticPath: int, uFiletype: uint) -> int
export import def #extern #dllimport DlgDirListComboBoxW(hDlg: *s_HWND__, lpPathSpec: *ushort, nIDComboBox: int, nIDStaticPath: int, uFiletype: uint) -> int
export import def #extern #dllimport DlgDirSelectComboBoxExA(hwndDlg: *s_HWND__, lpString: *char, cchOut: int, idComboBox: int) -> int
export import def #extern #dllimport DlgDirSelectComboBoxExW(hwndDlg: *s_HWND__, lpString: *ushort, cchOut: int, idComboBox: int) -> int
export import def #extern #dllimport SetScrollInfo(hwnd: *s_HWND__, nBar: int, lpsi: *s_tagSCROLLINFO, redraw: int) -> int
export import def #extern #dllimport GetScrollInfo(hwnd: *s_HWND__, nBar: int, lpsi: *s_tagSCROLLINFO) -> int
export import def #extern #dllimport DefFrameProcA(hWnd: *s_HWND__, hWndMDIClient: *s_HWND__, uMsg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefFrameProcW(hWnd: *s_HWND__, hWndMDIClient: *s_HWND__, uMsg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefMDIChildProcA(hWnd: *s_HWND__, uMsg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefMDIChildProcW(hWnd: *s_HWND__, uMsg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport TranslateMDISysAccel(hWndClient: *s_HWND__, lpMsg: *s_tagMSG) -> int
export import def #extern #dllimport ArrangeIconicWindows(hWnd: *s_HWND__) -> uint
export import def #extern #dllimport CreateMDIWindowA(lpClassName: *char, lpWindowName: *char, dwStyle: ulong, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: *s_HWND__, hInstance: *s_HINSTANCE__, lParam: int64) -> *s_HWND__
export import def #extern #dllimport CreateMDIWindowW(lpClassName: *ushort, lpWindowName: *ushort, dwStyle: ulong, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: *s_HWND__, hInstance: *s_HINSTANCE__, lParam: int64) -> *s_HWND__
export import def #extern #dllimport TileWindows(hwndParent: *s_HWND__, wHow: uint, lpRect: *s_tagRECT, cKids: uint, lpKids: **s_HWND__) -> ushort
export import def #extern #dllimport CascadeWindows(hwndParent: *s_HWND__, wHow: uint, lpRect: *s_tagRECT, cKids: uint, lpKids: **s_HWND__) -> ushort
export import def #extern #dllimport WinHelpA(hWndMain: *s_HWND__, lpszHelp: *char, uCommand: uint, dwData: uint64) -> int
export import def #extern #dllimport WinHelpW(hWndMain: *s_HWND__, lpszHelp: *ushort, uCommand: uint, dwData: uint64) -> int
export import def #extern #dllimport GetGuiResources(hProcess: *, uiFlags: ulong) -> ulong
export const HANDEDNESS_LEFT: int = 0
export const HANDEDNESS_RIGHT: int = 1
export import def #extern #dllimport ChangeDisplaySettingsA(lpDevMode: *s__devicemodeA, dwFlags: ulong) -> long
export import def #extern #dllimport ChangeDisplaySettingsW(lpDevMode: *s__devicemodeW, dwFlags: ulong) -> long
export import def #extern #dllimport ChangeDisplaySettingsExA(lpszDeviceName: *char, lpDevMode: *s__devicemodeA, hwnd: *s_HWND__, dwflags: ulong, lParam: *) -> long
export import def #extern #dllimport ChangeDisplaySettingsExW(lpszDeviceName: *ushort, lpDevMode: *s__devicemodeW, hwnd: *s_HWND__, dwflags: ulong, lParam: *) -> long
export import def #extern #dllimport EnumDisplaySettingsA(lpszDeviceName: *char, iModeNum: ulong, lpDevMode: *s__devicemodeA) -> int
export import def #extern #dllimport EnumDisplaySettingsW(lpszDeviceName: *ushort, iModeNum: ulong, lpDevMode: *s__devicemodeW) -> int
export import def #extern #dllimport EnumDisplaySettingsExA(lpszDeviceName: *char, iModeNum: ulong, lpDevMode: *s__devicemodeA, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDisplaySettingsExW(lpszDeviceName: *ushort, iModeNum: ulong, lpDevMode: *s__devicemodeW, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDisplayDevicesA(lpDevice: *char, iDevNum: ulong, lpDisplayDevice: *s__DISPLAY_DEVICEA, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDisplayDevicesW(lpDevice: *ushort, iDevNum: ulong, lpDisplayDevice: *s__DISPLAY_DEVICEW, dwFlags: ulong) -> int
export import def #extern #dllimport GetDisplayConfigBufferSizes(flags: uint, numPathArrayElements: *uint, numModeInfoArrayElements: *uint) -> long
export import def #extern #dllimport SetDisplayConfig(numPathArrayElements: uint, pathArray: *s_DISPLAYCONFIG_PATH_INFO, numModeInfoArrayElements: uint, modeInfoArray: *s_DISPLAYCONFIG_MODE_INFO, flags: uint) -> long
export import def #extern #dllimport QueryDisplayConfig(flags: uint, numPathArrayElements: *uint, pathArray: *s_DISPLAYCONFIG_PATH_INFO, numModeInfoArrayElements: *uint, modeInfoArray: *s_DISPLAYCONFIG_MODE_INFO, currentTopologyId: *e_DISPLAYCONFIG_TOPOLOGY_ID) -> long
export import def #extern #dllimport DisplayConfigGetDeviceInfo(requestPacket: *s_DISPLAYCONFIG_DEVICE_INFO_HEADER) -> long
export import def #extern #dllimport DisplayConfigSetDeviceInfo(setPacket: *s_DISPLAYCONFIG_DEVICE_INFO_HEADER) -> long
export import def #extern #dllimport SystemParametersInfoA(uiAction: uint, uiParam: uint, pvParam: *, fWinIni: uint) -> int
export import def #extern #dllimport SystemParametersInfoW(uiAction: uint, uiParam: uint, pvParam: *, fWinIni: uint) -> int
export import def #extern #dllimport SystemParametersInfoForDpi(uiAction: uint, uiParam: uint, pvParam: *, fWinIni: uint, dpi: uint) -> int
export import def #extern #dllimport SoundSentry() -> int
export import def #extern #dllimport SetDebugErrorLevel(dwLevel: ulong)
export import def #extern #dllimport SetLastErrorEx(dwErrCode: ulong, dwType: ulong)
export import def #extern #dllimport InternalGetWindowText(hWnd: *s_HWND__, pString: *ushort, cchMaxCount: int) -> int
export import def #extern #dllimport CancelShutdown() -> int
export import def #extern #dllimport MonitorFromPoint(pt: s_tagPOINT, dwFlags: ulong) -> *s_HMONITOR__
export import def #extern #dllimport MonitorFromRect(lprc: *s_tagRECT, dwFlags: ulong) -> *s_HMONITOR__
export import def #extern #dllimport MonitorFromWindow(hwnd: *s_HWND__, dwFlags: ulong) -> *s_HMONITOR__
export import def #extern #dllimport GetMonitorInfoA(hMonitor: *s_HMONITOR__, lpmi: *s_tagMONITORINFO) -> int
export import def #extern #dllimport GetMonitorInfoW(hMonitor: *s_HMONITOR__, lpmi: *s_tagMONITORINFO) -> int
export import def #extern #dllimport EnumDisplayMonitors(hdc: *s_HDC__, lprcClip: *s_tagRECT, lpfnEnum: def (*s_HMONITOR__, *s_HDC__, *s_tagRECT, int64) -> (int), dwData: int64) -> int
export import def #extern #dllimport NotifyWinEvent(event: ulong, hwnd: *s_HWND__, idObject: long, idChild: long)
export import def #extern #dllimport SetWinEventHook(eventMin: ulong, eventMax: ulong, hmodWinEventProc: *s_HINSTANCE__, pfnWinEventProc: def (*s_HWINEVENTHOOK__, ulong, *s_HWND__, long, long, ulong, ulong) -> (), idProcess: ulong, idThread: ulong, dwFlags: ulong) -> *s_HWINEVENTHOOK__
export import def #extern #dllimport IsWinEventHookInstalled(event: ulong) -> int
export import def #extern #dllimport UnhookWinEvent(hWinEventHook: *s_HWINEVENTHOOK__) -> int
export import def #extern #dllimport GetGUIThreadInfo(idThread: ulong, pgui: *s_tagGUITHREADINFO) -> int
export import def #extern #dllimport BlockInput(fBlockIt: int) -> int
export import def #extern #dllimport SetProcessDPIAware() -> int
export import def #extern #dllimport IsProcessDPIAware() -> int
export import def #extern #dllimport SetThreadDpiAwarenessContext(dpiContext: *s_DPI_AWARENESS_CONTEXT__) -> *s_DPI_AWARENESS_CONTEXT__
export import def #extern #dllimport GetThreadDpiAwarenessContext() -> *s_DPI_AWARENESS_CONTEXT__
export import def #extern #dllimport GetWindowDpiAwarenessContext(hwnd: *s_HWND__) -> *s_DPI_AWARENESS_CONTEXT__
export import def #extern #dllimport GetAwarenessFromDpiAwarenessContext(value: *s_DPI_AWARENESS_CONTEXT__) -> e_DPI_AWARENESS
export import def #extern #dllimport GetDpiFromDpiAwarenessContext(value: *s_DPI_AWARENESS_CONTEXT__) -> uint
export import def #extern #dllimport AreDpiAwarenessContextsEqual(dpiContextA: *s_DPI_AWARENESS_CONTEXT__, dpiContextB: *s_DPI_AWARENESS_CONTEXT__) -> int
export import def #extern #dllimport IsValidDpiAwarenessContext(value: *s_DPI_AWARENESS_CONTEXT__) -> int
export import def #extern #dllimport GetDpiForWindow(hwnd: *s_HWND__) -> uint
export import def #extern #dllimport GetDpiForSystem() -> uint
export import def #extern #dllimport GetSystemDpiForProcess(hProcess: *) -> uint
export import def #extern #dllimport EnableNonClientDpiScaling(hwnd: *s_HWND__) -> int
export import def #extern #dllimport InheritWindowMonitor(hwnd: *s_HWND__, hwndInherit: *s_HWND__) -> int
export import def #extern #dllimport SetProcessDpiAwarenessContext(value: *s_DPI_AWARENESS_CONTEXT__) -> int
export import def #extern #dllimport GetDpiAwarenessContextForProcess(hProcess: *) -> *s_DPI_AWARENESS_CONTEXT__
export import def #extern #dllimport SetThreadDpiHostingBehavior(value: e_DPI_HOSTING_BEHAVIOR) -> e_DPI_HOSTING_BEHAVIOR
export import def #extern #dllimport GetThreadDpiHostingBehavior() -> e_DPI_HOSTING_BEHAVIOR
export import def #extern #dllimport GetWindowDpiHostingBehavior(hwnd: *s_HWND__) -> e_DPI_HOSTING_BEHAVIOR
export import def #extern #dllimport GetWindowModuleFileNameA(hwnd: *s_HWND__, pszFileName: *char, cchFileNameMax: uint) -> uint
export import def #extern #dllimport GetWindowModuleFileNameW(hwnd: *s_HWND__, pszFileName: *ushort, cchFileNameMax: uint) -> uint
export import def #extern #dllimport GetCursorInfo(pci: *s_tagCURSORINFO) -> int
export import def #extern #dllimport GetWindowInfo(hwnd: *s_HWND__, pwi: *s_tagWINDOWINFO) -> int
export import def #extern #dllimport GetTitleBarInfo(hwnd: *s_HWND__, pti: *s_tagTITLEBARINFO) -> int
export import def #extern #dllimport GetMenuBarInfo(hwnd: *s_HWND__, idObject: long, idItem: long, pmbi: *s_tagMENUBARINFO) -> int
export import def #extern #dllimport GetScrollBarInfo(hwnd: *s_HWND__, idObject: long, psbi: *s_tagSCROLLBARINFO) -> int
export import def #extern #dllimport GetComboBoxInfo(hwndCombo: *s_HWND__, pcbi: *s_tagCOMBOBOXINFO) -> int
export import def #extern #dllimport GetAncestor(hwnd: *s_HWND__, gaFlags: uint) -> *s_HWND__
export import def #extern #dllimport RealChildWindowFromPoint(hwndParent: *s_HWND__, ptParentClientCoords: s_tagPOINT) -> *s_HWND__
export import def #extern #dllimport RealGetWindowClassA(hwnd: *s_HWND__, ptszClassName: *char, cchClassNameMax: uint) -> uint
export import def #extern #dllimport RealGetWindowClassW(hwnd: *s_HWND__, ptszClassName: *ushort, cchClassNameMax: uint) -> uint
export import def #extern #dllimport GetAltTabInfoA(hwnd: *s_HWND__, iItem: int, pati: *s_tagALTTABINFO, pszItemText: *char, cchItemText: uint) -> int
export import def #extern #dllimport GetAltTabInfoW(hwnd: *s_HWND__, iItem: int, pati: *s_tagALTTABINFO, pszItemText: *ushort, cchItemText: uint) -> int
export import def #extern #dllimport GetListBoxInfo(hwnd: *s_HWND__) -> ulong
export import def #extern #dllimport LockWorkStation() -> int
export import def #extern #dllimport UserHandleGrantAccess(hUserHandle: *, hJob: *, bGrant: int) -> int
export import def #extern #dllimport GetRawInputData(hRawInput: *s_HRAWINPUT__, uiCommand: uint, pData: *, pcbSize: *uint, cbSizeHeader: uint) -> uint
export import def #extern #dllimport GetRawInputDeviceInfoA(hDevice: *, uiCommand: uint, pData: *, pcbSize: *uint) -> uint
export import def #extern #dllimport GetRawInputDeviceInfoW(hDevice: *, uiCommand: uint, pData: *, pcbSize: *uint) -> uint
export import def #extern #dllimport GetRawInputBuffer(pData: *s_tagRAWINPUT, pcbSize: *uint, cbSizeHeader: uint) -> uint
export import def #extern #dllimport RegisterRawInputDevices(pRawInputDevices: *s_tagRAWINPUTDEVICE, uiNumDevices: uint, cbSize: uint) -> int
export import def #extern #dllimport GetRegisteredRawInputDevices(pRawInputDevices: *s_tagRAWINPUTDEVICE, puiNumDevices: *uint, cbSize: uint) -> uint
export import def #extern #dllimport GetRawInputDeviceList(pRawInputDeviceList: *s_tagRAWINPUTDEVICELIST, puiNumDevices: *uint, cbSize: uint) -> uint
export import def #extern #dllimport DefRawInputProc(paRawInput: **s_tagRAWINPUT, nInput: int, cbSizeHeader: uint) -> int64
export const POINTER_DEVICE_TYPE_INTEGRATED_PEN: int = 1
export const POINTER_DEVICE_TYPE_EXTERNAL_PEN: int = 2
export const POINTER_DEVICE_TYPE_TOUCH: int = 3
export const POINTER_DEVICE_TYPE_TOUCH_PAD: int = 4
export const POINTER_DEVICE_TYPE_MAX: int = -1
export const POINTER_DEVICE_CURSOR_TYPE_UNKNOWN: int = 0
export const POINTER_DEVICE_CURSOR_TYPE_TIP: int = 1
export const POINTER_DEVICE_CURSOR_TYPE_ERASER: int = 2
export const POINTER_DEVICE_CURSOR_TYPE_MAX: int = -1
export import def #extern #dllimport GetPointerDevices(deviceCount: *uint, pointerDevices: *s_tagPOINTER_DEVICE_INFO) -> int
export import def #extern #dllimport GetPointerDevice(device: *, pointerDevice: *s_tagPOINTER_DEVICE_INFO) -> int
export import def #extern #dllimport GetPointerDeviceProperties(device: *, propertyCount: *uint, pointerProperties: *s_tagPOINTER_DEVICE_PROPERTY) -> int
export import def #extern #dllimport RegisterPointerDeviceNotifications(window: *s_HWND__, notifyRange: int) -> int
export import def #extern #dllimport GetPointerDeviceRects(device: *, pointerDeviceRect: *s_tagRECT, displayRect: *s_tagRECT) -> int
export import def #extern #dllimport GetPointerDeviceCursors(device: *, cursorCount: *uint, deviceCursors: *s_tagPOINTER_DEVICE_CURSOR_INFO) -> int
export import def #extern #dllimport GetRawPointerDeviceData(pointerId: uint, historyCount: uint, propertiesCount: uint, pProperties: *s_tagPOINTER_DEVICE_PROPERTY, pValues: *long) -> int
export import def #extern #dllimport ChangeWindowMessageFilter(message: uint, dwFlag: ulong) -> int
export import def #extern #dllimport ChangeWindowMessageFilterEx(hwnd: *s_HWND__, message: uint, action: ulong, pChangeFilterStruct: *s_tagCHANGEFILTERSTRUCT) -> int
export import def #extern #dllimport GetGestureInfo(hGestureInfo: *s_HGESTUREINFO__, pGestureInfo: *s_tagGESTUREINFO) -> int
export import def #extern #dllimport GetGestureExtraArgs(hGestureInfo: *s_HGESTUREINFO__, cbExtraArgs: uint, pExtraArgs: *uint8) -> int
export import def #extern #dllimport CloseGestureInfoHandle(hGestureInfo: *s_HGESTUREINFO__) -> int
export import def #extern #dllimport SetGestureConfig(hwnd: *s_HWND__, dwReserved: ulong, cIDs: uint, pGestureConfig: *s_tagGESTURECONFIG, cbSize: uint) -> int
export import def #extern #dllimport GetGestureConfig(hwnd: *s_HWND__, dwReserved: ulong, dwFlags: ulong, pcIDs: *uint, pGestureConfig: *s_tagGESTURECONFIG, cbSize: uint) -> int
export import def #extern #dllimport ShutdownBlockReasonCreate(hWnd: *s_HWND__, pwszReason: *ushort) -> int
export import def #extern #dllimport ShutdownBlockReasonQuery(hWnd: *s_HWND__, pwszBuff: *ushort, pcchBuff: *ulong) -> int
export import def #extern #dllimport ShutdownBlockReasonDestroy(hWnd: *s_HWND__) -> int
export const IMDT_UNAVAILABLE: int = 0
export const IMDT_KEYBOARD: int = 1
export const IMDT_MOUSE: int = 2
export const IMDT_TOUCH: int = 4
export const IMDT_PEN: int = 8
export const IMDT_TOUCHPAD: int = 16
export const IMO_UNAVAILABLE: int = 0
export const IMO_HARDWARE: int = 1
export const IMO_INJECTED: int = 2
export const IMO_SYSTEM: int = 4
export import def #extern #dllimport GetCurrentInputMessageSource(inputMessageSource: *s_tagINPUT_MESSAGE_SOURCE) -> int
export import def #extern #dllimport GetCIMSSM(inputMessageSource: *s_tagINPUT_MESSAGE_SOURCE) -> int
export const AR_ENABLED: int = 0
export const AR_DISABLED: int = 1
export const AR_SUPPRESSED: int = 2
export const AR_REMOTESESSION: int = 4
export const AR_MULTIMON: int = 8
export const AR_NOSENSOR: int = 16
export const AR_NOT_SUPPORTED: int = 32
export const AR_DOCKED: int = 64
export const AR_LAPTOP: int = 128
export const ORIENTATION_PREFERENCE_NONE: int = 0
export const ORIENTATION_PREFERENCE_LANDSCAPE: int = 1
export const ORIENTATION_PREFERENCE_PORTRAIT: int = 2
export const ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED: int = 4
export const ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED: int = 8
export import def #extern #dllimport GetAutoRotationState(pState: *e_tagAR_STATE) -> int
export import def #extern #dllimport GetDisplayAutoRotationPreferences(pOrientation: *e_ORIENTATION_PREFERENCE) -> int
export import def #extern #dllimport GetDisplayAutoRotationPreferencesByProcessId(dwProcessId: ulong, pOrientation: *e_ORIENTATION_PREFERENCE, fRotateScreen: *int) -> int
export import def #extern #dllimport SetDisplayAutoRotationPreferences(orientation: e_ORIENTATION_PREFERENCE) -> int
export import def #extern #dllimport IsImmersiveProcess(hProcess: *) -> int
export import def #extern #dllimport SetProcessRestrictionExemption(fEnableExemption: int) -> int
export const TDF_REGISTER: int = 1
export const TDF_UNREGISTER: int = 2
export import def #extern #dllimport GetDateFormatA(Locale: ulong, dwFlags: ulong, lpDate: *s__SYSTEMTIME, lpFormat: *char, lpDateStr: *char, cchDate: int) -> int
export import def #extern #dllimport GetDateFormatW(Locale: ulong, dwFlags: ulong, lpDate: *s__SYSTEMTIME, lpFormat: *ushort, lpDateStr: *ushort, cchDate: int) -> int
export import def #extern #dllimport GetTimeFormatA(Locale: ulong, dwFlags: ulong, lpTime: *s__SYSTEMTIME, lpFormat: *char, lpTimeStr: *char, cchTime: int) -> int
export import def #extern #dllimport GetTimeFormatW(Locale: ulong, dwFlags: ulong, lpTime: *s__SYSTEMTIME, lpFormat: *ushort, lpTimeStr: *ushort, cchTime: int) -> int
export import def #extern #dllimport GetTimeFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpTime: *s__SYSTEMTIME, lpFormat: *ushort, lpTimeStr: *ushort, cchTime: int) -> int
export import def #extern #dllimport GetDateFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpDate: *s__SYSTEMTIME, lpFormat: *ushort, lpDateStr: *ushort, cchDate: int, lpCalendar: *ushort) -> int
export import def #extern #dllimport GetDurationFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpDuration: *s__SYSTEMTIME, ullDuration: uint64, lpFormat: *ushort, lpDurationStr: *ushort, cchDuration: int) -> int
export const COMPARE_STRING: int = 1
export const GEO_NATION: int = 1
export const GEO_LATITUDE: int = 2
export const GEO_LONGITUDE: int = 3
export const GEO_ISO2: int = 4
export const GEO_ISO3: int = 5
export const GEO_RFC1766: int = 6
export const GEO_LCID: int = 7
export const GEO_FRIENDLYNAME: int = 8
export const GEO_OFFICIALNAME: int = 9
export const GEO_TIMEZONES: int = 10
export const GEO_OFFICIALLANGUAGES: int = 11
export const GEO_ISO_UN_NUMBER: int = 12
export const GEO_PARENT: int = 13
export const GEO_DIALINGCODE: int = 14
export const GEO_CURRENCYCODE: int = 15
export const GEO_CURRENCYSYMBOL: int = 16
export const GEO_NAME: int = 17
export const GEO_ID: int = 18
export const GEOCLASS_NATION: int = 16
export const GEOCLASS_REGION: int = 14
export const GEOCLASS_ALL: int = 0
export const NormalizationOther: int = 0
export const NormalizationC: int = 1
export const NormalizationD: int = 2
export const NormalizationKC: int = 5
export const NormalizationKD: int = 6
export import def #extern #dllimport CompareStringEx(lpLocaleName: *ushort, dwCmpFlags: ulong, lpString1: *ushort, cchCount1: int, lpString2: *ushort, cchCount2: int, lpVersionInformation: *s__nlsversioninfo, lpReserved: *, lParam: int64) -> int
export import def #extern #dllimport CompareStringOrdinal(lpString1: *ushort, cchCount1: int, lpString2: *ushort, cchCount2: int, bIgnoreCase: int) -> int
export import def #extern #dllimport CompareStringW(Locale: ulong, dwCmpFlags: ulong, lpString1: *ushort, cchCount1: int, lpString2: *ushort, cchCount2: int) -> int
export import def #extern #dllimport FoldStringW(dwMapFlags: ulong, lpSrcStr: *ushort, cchSrc: int, lpDestStr: *ushort, cchDest: int) -> int
export import def #extern #dllimport GetStringTypeExW(Locale: ulong, dwInfoType: ulong, lpSrcStr: *ushort, cchSrc: int, lpCharType: *ushort) -> int
export import def #extern #dllimport GetStringTypeW(dwInfoType: ulong, lpSrcStr: *ushort, cchSrc: int, lpCharType: *ushort) -> int
export import def #extern #dllimport MultiByteToWideChar(CodePage: uint, dwFlags: ulong, lpMultiByteStr: *char, cbMultiByte: int, lpWideCharStr: *ushort, cchWideChar: int) -> int
export import def #extern #dllimport WideCharToMultiByte(CodePage: uint, dwFlags: ulong, lpWideCharStr: *ushort, cchWideChar: int, lpMultiByteStr: *char, cbMultiByte: int, lpDefaultChar: *char, lpUsedDefaultChar: *int) -> int
export import def #extern #dllimport IsValidCodePage(CodePage: uint) -> int
export import def #extern #dllimport GetACP() -> uint
export import def #extern #dllimport GetOEMCP() -> uint
export import def #extern #dllimport GetCPInfo(CodePage: uint, lpCPInfo: *s__cpinfo) -> int
export import def #extern #dllimport GetCPInfoExA(CodePage: uint, dwFlags: ulong, lpCPInfoEx: *s__cpinfoexA) -> int
export import def #extern #dllimport GetCPInfoExW(CodePage: uint, dwFlags: ulong, lpCPInfoEx: *s__cpinfoexW) -> int
export import def #extern #dllimport CompareStringA(Locale: ulong, dwCmpFlags: ulong, lpString1: *char, cchCount1: int, lpString2: *char, cchCount2: int) -> int
export import def #extern #dllimport FindNLSString(Locale: ulong, dwFindNLSStringFlags: ulong, lpStringSource: *ushort, cchSource: int, lpStringValue: *ushort, cchValue: int, pcchFound: *int) -> int
export import def #extern #dllimport LCMapStringW(Locale: ulong, dwMapFlags: ulong, lpSrcStr: *ushort, cchSrc: int, lpDestStr: *ushort, cchDest: int) -> int
export import def #extern #dllimport LCMapStringA(Locale: ulong, dwMapFlags: ulong, lpSrcStr: *char, cchSrc: int, lpDestStr: *char, cchDest: int) -> int
export import def #extern #dllimport GetLocaleInfoW(Locale: ulong, LCType: ulong, lpLCData: *ushort, cchData: int) -> int
export import def #extern #dllimport GetLocaleInfoA(Locale: ulong, LCType: ulong, lpLCData: *char, cchData: int) -> int
export import def #extern #dllimport SetLocaleInfoA(Locale: ulong, LCType: ulong, lpLCData: *char) -> int
export import def #extern #dllimport SetLocaleInfoW(Locale: ulong, LCType: ulong, lpLCData: *ushort) -> int
export import def #extern #dllimport GetCalendarInfoA(Locale: ulong, Calendar: ulong, CalType: ulong, lpCalData: *char, cchData: int, lpValue: *ulong) -> int
export import def #extern #dllimport GetCalendarInfoW(Locale: ulong, Calendar: ulong, CalType: ulong, lpCalData: *ushort, cchData: int, lpValue: *ulong) -> int
export import def #extern #dllimport SetCalendarInfoA(Locale: ulong, Calendar: ulong, CalType: ulong, lpCalData: *char) -> int
export import def #extern #dllimport SetCalendarInfoW(Locale: ulong, Calendar: ulong, CalType: ulong, lpCalData: *ushort) -> int
export import def #extern #dllimport LoadStringByReference(Flags: ulong, Language: *ushort, SourceString: *ushort, Buffer: *ushort, cchBuffer: ulong, Directory: *ushort, pcchBufferOut: *ulong) -> int
export import def #extern #dllimport IsDBCSLeadByte(TestChar: uint8) -> int
export import def #extern #dllimport IsDBCSLeadByteEx(CodePage: uint, TestChar: uint8) -> int
export import def #extern #dllimport LocaleNameToLCID(lpName: *ushort, dwFlags: ulong) -> ulong
export import def #extern #dllimport LCIDToLocaleName(Locale: ulong, lpName: *ushort, cchName: int, dwFlags: ulong) -> int
export import def #extern #dllimport GetDurationFormat(Locale: ulong, dwFlags: ulong, lpDuration: *s__SYSTEMTIME, ullDuration: uint64, lpFormat: *ushort, lpDurationStr: *ushort, cchDuration: int) -> int
export import def #extern #dllimport GetNumberFormatA(Locale: ulong, dwFlags: ulong, lpValue: *char, lpFormat: *s__numberfmtA, lpNumberStr: *char, cchNumber: int) -> int
export import def #extern #dllimport GetNumberFormatW(Locale: ulong, dwFlags: ulong, lpValue: *ushort, lpFormat: *s__numberfmtW, lpNumberStr: *ushort, cchNumber: int) -> int
export import def #extern #dllimport GetCurrencyFormatA(Locale: ulong, dwFlags: ulong, lpValue: *char, lpFormat: *s__currencyfmtA, lpCurrencyStr: *char, cchCurrency: int) -> int
export import def #extern #dllimport GetCurrencyFormatW(Locale: ulong, dwFlags: ulong, lpValue: *ushort, lpFormat: *s__currencyfmtW, lpCurrencyStr: *ushort, cchCurrency: int) -> int
export import def #extern #dllimport EnumCalendarInfoA(lpCalInfoEnumProc: def (*char) -> (int), Locale: ulong, Calendar: ulong, CalType: ulong) -> int
export import def #extern #dllimport EnumCalendarInfoW(lpCalInfoEnumProc: def (*ushort) -> (int), Locale: ulong, Calendar: ulong, CalType: ulong) -> int
export import def #extern #dllimport EnumCalendarInfoExA(lpCalInfoEnumProcEx: def (*char, ulong) -> (int), Locale: ulong, Calendar: ulong, CalType: ulong) -> int
export import def #extern #dllimport EnumCalendarInfoExW(lpCalInfoEnumProcEx: def (*ushort, ulong) -> (int), Locale: ulong, Calendar: ulong, CalType: ulong) -> int
export import def #extern #dllimport EnumTimeFormatsA(lpTimeFmtEnumProc: def (*char) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumTimeFormatsW(lpTimeFmtEnumProc: def (*ushort) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDateFormatsA(lpDateFmtEnumProc: def (*char) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDateFormatsW(lpDateFmtEnumProc: def (*ushort) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDateFormatsExA(lpDateFmtEnumProcEx: def (*char, ulong) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDateFormatsExW(lpDateFmtEnumProcEx: def (*ushort, ulong) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport IsValidLanguageGroup(LanguageGroup: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport GetNLSVersion(Function: ulong, Locale: ulong, lpVersionInformation: *s__nlsversioninfo) -> int
export import def #extern #dllimport IsValidLocale(Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport GetGeoInfoA(Location: long, GeoType: ulong, lpGeoData: *char, cchData: int, LangId: ushort) -> int
export import def #extern #dllimport GetGeoInfoW(Location: long, GeoType: ulong, lpGeoData: *ushort, cchData: int, LangId: ushort) -> int
export import def #extern #dllimport GetGeoInfoEx(location: *ushort, geoType: ulong, geoData: *ushort, geoDataCount: int) -> int
export import def #extern #dllimport EnumSystemGeoID(GeoClass: ulong, ParentGeoId: long, lpGeoEnumProc: def (long) -> (int)) -> int
export import def #extern #dllimport EnumSystemGeoNames(geoClass: ulong, geoEnumProc: def (*ushort, int64) -> (int), data: int64) -> int
export import def #extern #dllimport GetUserGeoID(GeoClass: ulong) -> long
export import def #extern #dllimport GetUserDefaultGeoName(geoName: *ushort, geoNameCount: int) -> int
export import def #extern #dllimport SetUserGeoID(GeoId: long) -> int
export import def #extern #dllimport SetUserGeoName(geoName: *ushort) -> int
export import def #extern #dllimport ConvertDefaultLocale(Locale: ulong) -> ulong
export import def #extern #dllimport GetSystemDefaultUILanguage() -> ushort
export import def #extern #dllimport GetThreadLocale() -> ulong
export import def #extern #dllimport SetThreadLocale(Locale: ulong) -> int
export import def #extern #dllimport GetUserDefaultUILanguage() -> ushort
export import def #extern #dllimport GetUserDefaultLangID() -> ushort
export import def #extern #dllimport GetSystemDefaultLangID() -> ushort
export import def #extern #dllimport GetSystemDefaultLCID() -> ulong
export import def #extern #dllimport GetUserDefaultLCID() -> ulong
export import def #extern #dllimport SetThreadUILanguage(LangId: ushort) -> ushort
export import def #extern #dllimport GetThreadUILanguage() -> ushort
export import def #extern #dllimport GetProcessPreferredUILanguages(dwFlags: ulong, pulNumLanguages: *ulong, pwszLanguagesBuffer: *ushort, pcchLanguagesBuffer: *ulong) -> int
export import def #extern #dllimport SetProcessPreferredUILanguages(dwFlags: ulong, pwszLanguagesBuffer: *ushort, pulNumLanguages: *ulong) -> int
export import def #extern #dllimport GetUserPreferredUILanguages(dwFlags: ulong, pulNumLanguages: *ulong, pwszLanguagesBuffer: *ushort, pcchLanguagesBuffer: *ulong) -> int
export import def #extern #dllimport GetSystemPreferredUILanguages(dwFlags: ulong, pulNumLanguages: *ulong, pwszLanguagesBuffer: *ushort, pcchLanguagesBuffer: *ulong) -> int
export import def #extern #dllimport GetThreadPreferredUILanguages(dwFlags: ulong, pulNumLanguages: *ulong, pwszLanguagesBuffer: *ushort, pcchLanguagesBuffer: *ulong) -> int
export import def #extern #dllimport SetThreadPreferredUILanguages(dwFlags: ulong, pwszLanguagesBuffer: *ushort, pulNumLanguages: *ulong) -> int
export import def #extern #dllimport GetFileMUIInfo(dwFlags: ulong, pcwszFilePath: *ushort, pFileMUIInfo: *s__FILEMUIINFO, pcbFileMUIInfo: *ulong) -> int
export import def #extern #dllimport GetFileMUIPath(dwFlags: ulong, pcwszFilePath: *ushort, pwszLanguage: *ushort, pcchLanguage: *ulong, pwszFileMUIPath: *ushort, pcchFileMUIPath: *ulong, pululEnumerator: *uint64) -> int
export import def #extern #dllimport GetUILanguageInfo(dwFlags: ulong, pwmszLanguage: *ushort, pwszFallbackLanguages: *ushort, pcchFallbackLanguages: *ulong, pAttributes: *ulong) -> int
export import def #extern #dllimport SetThreadPreferredUILanguages2(flags: ulong, languages: *ushort, numLanguagesSet: *ulong, snapshot: **s_HSAVEDUILANGUAGES__) -> int
export import def #extern #dllimport RestoreThreadPreferredUILanguages(snapshot: *s_HSAVEDUILANGUAGES__)
export import def #extern #dllimport NotifyUILanguageChange(dwFlags: ulong, pcwstrNewLanguage: *ushort, pcwstrPreviousLanguage: *ushort, dwReserved: ulong, pdwStatusRtrn: *ulong) -> int
export import def #extern #dllimport GetStringTypeExA(Locale: ulong, dwInfoType: ulong, lpSrcStr: *char, cchSrc: int, lpCharType: *ushort) -> int
export import def #extern #dllimport GetStringTypeA(Locale: ulong, dwInfoType: ulong, lpSrcStr: *char, cchSrc: int, lpCharType: *ushort) -> int
export import def #extern #dllimport FoldStringA(dwMapFlags: ulong, lpSrcStr: *char, cchSrc: int, lpDestStr: *char, cchDest: int) -> int
export import def #extern #dllimport EnumSystemLocalesA(lpLocaleEnumProc: def (*char) -> (int), dwFlags: ulong) -> int
export import def #extern #dllimport EnumSystemLocalesW(lpLocaleEnumProc: def (*ushort) -> (int), dwFlags: ulong) -> int
export import def #extern #dllimport EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc: def (ulong, *char, *char, ulong, int64) -> (int), dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc: def (ulong, *ushort, *ushort, ulong, int64) -> (int), dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc: def (ulong, ulong, *char, int64) -> (int), LanguageGroup: ulong, dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc: def (ulong, ulong, *ushort, int64) -> (int), LanguageGroup: ulong, dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumUILanguagesA(lpUILanguageEnumProc: def (*char, int64) -> (int), dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumUILanguagesW(lpUILanguageEnumProc: def (*ushort, int64) -> (int), dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumSystemCodePagesA(lpCodePageEnumProc: def (*char) -> (int), dwFlags: ulong) -> int
export import def #extern #dllimport EnumSystemCodePagesW(lpCodePageEnumProc: def (*ushort) -> (int), dwFlags: ulong) -> int
export import def #extern #dllimport IdnToAscii(dwFlags: ulong, lpUnicodeCharStr: *ushort, cchUnicodeChar: int, lpASCIICharStr: *ushort, cchASCIIChar: int) -> int
export import def #extern #dllimport IdnToUnicode(dwFlags: ulong, lpASCIICharStr: *ushort, cchASCIIChar: int, lpUnicodeCharStr: *ushort, cchUnicodeChar: int) -> int
export import def #extern #dllimport IdnToNameprepUnicode(dwFlags: ulong, lpUnicodeCharStr: *ushort, cchUnicodeChar: int, lpNameprepCharStr: *ushort, cchNameprepChar: int) -> int
export import def #extern #dllimport NormalizeString(NormForm: e__NORM_FORM, lpSrcString: *ushort, cwSrcLength: int, lpDstString: *ushort, cwDstLength: int) -> int
export import def #extern #dllimport IsNormalizedString(NormForm: e__NORM_FORM, lpString: *ushort, cwLength: int) -> int
export import def #extern #dllimport VerifyScripts(dwFlags: ulong, lpLocaleScripts: *ushort, cchLocaleScripts: int, lpTestScripts: *ushort, cchTestScripts: int) -> int
export import def #extern #dllimport GetStringScripts(dwFlags: ulong, lpString: *ushort, cchString: int, lpScripts: *ushort, cchScripts: int) -> int
export import def #extern #dllimport GetLocaleInfoEx(lpLocaleName: *ushort, LCType: ulong, lpLCData: *ushort, cchData: int) -> int
export import def #extern #dllimport GetCalendarInfoEx(lpLocaleName: *ushort, Calendar: ulong, lpReserved: *ushort, CalType: ulong, lpCalData: *ushort, cchData: int, lpValue: *ulong) -> int
export import def #extern #dllimport GetNumberFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpValue: *ushort, lpFormat: *s__numberfmtW, lpNumberStr: *ushort, cchNumber: int) -> int
export import def #extern #dllimport GetCurrencyFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpValue: *ushort, lpFormat: *s__currencyfmtW, lpCurrencyStr: *ushort, cchCurrency: int) -> int
export import def #extern #dllimport GetUserDefaultLocaleName(lpLocaleName: *ushort, cchLocaleName: int) -> int
export import def #extern #dllimport GetSystemDefaultLocaleName(lpLocaleName: *ushort, cchLocaleName: int) -> int
export import def #extern #dllimport IsNLSDefinedString(Function: ulong, dwFlags: ulong, lpVersionInformation: *s__nlsversioninfo, lpString: *ushort, cchStr: int) -> int
export import def #extern #dllimport GetNLSVersionEx(function: ulong, lpLocaleName: *ushort, lpVersionInformation: *s__nlsversioninfoex) -> int
export import def #extern #dllimport IsValidNLSVersion(function: ulong, lpLocaleName: *ushort, lpVersionInformation: *s__nlsversioninfoex) -> ulong
export import def #extern #dllimport FindNLSStringEx(lpLocaleName: *ushort, dwFindNLSStringFlags: ulong, lpStringSource: *ushort, cchSource: int, lpStringValue: *ushort, cchValue: int, pcchFound: *int, lpVersionInformation: *s__nlsversioninfo, lpReserved: *, sortHandle: int64) -> int
export import def #extern #dllimport LCMapStringEx(lpLocaleName: *ushort, dwMapFlags: ulong, lpSrcStr: *ushort, cchSrc: int, lpDestStr: *ushort, cchDest: int, lpVersionInformation: *s__nlsversioninfo, lpReserved: *, sortHandle: int64) -> int
export import def #extern #dllimport IsValidLocaleName(lpLocaleName: *ushort) -> int
export import def #extern #dllimport EnumCalendarInfoExEx(pCalInfoEnumProcExEx: def (*ushort, ulong, *ushort, int64) -> (int), lpLocaleName: *ushort, Calendar: ulong, lpReserved: *ushort, CalType: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumDateFormatsExEx(lpDateFmtEnumProcExEx: def (*ushort, ulong, int64) -> (int), lpLocaleName: *ushort, dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumTimeFormatsEx(lpTimeFmtEnumProcEx: def (*ushort, int64) -> (int), lpLocaleName: *ushort, dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumSystemLocalesEx(lpLocaleEnumProcEx: def (*ushort, ulong, int64) -> (int), dwFlags: ulong, lParam: int64, lpReserved: *) -> int
export import def #extern #dllimport ResolveLocaleName(lpNameToResolve: *ushort, lpLocaleName: *ushort, cchLocaleName: int) -> int
export import def #extern #dllimport AllocConsole() -> int
export import def #extern #dllimport FreeConsole() -> int
export import def #extern #dllimport AttachConsole(dwProcessId: ulong) -> int
export import def #extern #dllimport GetConsoleCP() -> uint
export import def #extern #dllimport GetConsoleOutputCP() -> uint
export import def #extern #dllimport GetConsoleMode(hConsoleHandle: *, lpMode: *ulong) -> int
export import def #extern #dllimport SetConsoleMode(hConsoleHandle: *, dwMode: ulong) -> int
export import def #extern #dllimport GetNumberOfConsoleInputEvents(hConsoleInput: *, lpNumberOfEvents: *ulong) -> int
export import def #extern #dllimport ReadConsoleInputA(hConsoleInput: *, lpBuffer: *s__INPUT_RECORD, nLength: ulong, lpNumberOfEventsRead: *ulong) -> int
export import def #extern #dllimport ReadConsoleInputW(hConsoleInput: *, lpBuffer: *s__INPUT_RECORD, nLength: ulong, lpNumberOfEventsRead: *ulong) -> int
export import def #extern #dllimport PeekConsoleInputA(hConsoleInput: *, lpBuffer: *s__INPUT_RECORD, nLength: ulong, lpNumberOfEventsRead: *ulong) -> int
export import def #extern #dllimport PeekConsoleInputW(hConsoleInput: *, lpBuffer: *s__INPUT_RECORD, nLength: ulong, lpNumberOfEventsRead: *ulong) -> int
export import def #extern #dllimport ReadConsoleA(hConsoleInput: *, lpBuffer: *, nNumberOfCharsToRead: ulong, lpNumberOfCharsRead: *ulong, pInputControl: *s__CONSOLE_READCONSOLE_CONTROL) -> int
export import def #extern #dllimport ReadConsoleW(hConsoleInput: *, lpBuffer: *, nNumberOfCharsToRead: ulong, lpNumberOfCharsRead: *ulong, pInputControl: *s__CONSOLE_READCONSOLE_CONTROL) -> int
export import def #extern #dllimport WriteConsoleA(hConsoleOutput: *, lpBuffer: *, nNumberOfCharsToWrite: ulong, lpNumberOfCharsWritten: *ulong, lpReserved: *) -> int
export import def #extern #dllimport WriteConsoleW(hConsoleOutput: *, lpBuffer: *, nNumberOfCharsToWrite: ulong, lpNumberOfCharsWritten: *ulong, lpReserved: *) -> int
export import def #extern #dllimport SetConsoleCtrlHandler(HandlerRoutine: def (ulong) -> (int), Add: int) -> int
export import def #extern #dllimport CreatePseudoConsole(size: s__COORD, hInput: *, hOutput: *, dwFlags: ulong, phPC: **) -> long
export import def #extern #dllimport ResizePseudoConsole(hPC: *, size: s__COORD) -> long
export import def #extern #dllimport ClosePseudoConsole(hPC: *)
export import def #extern #dllimport FillConsoleOutputCharacterA(hConsoleOutput: *, cCharacter: char, nLength: ulong, dwWriteCoord: s__COORD, lpNumberOfCharsWritten: *ulong) -> int
export import def #extern #dllimport FillConsoleOutputCharacterW(hConsoleOutput: *, cCharacter: ushort, nLength: ulong, dwWriteCoord: s__COORD, lpNumberOfCharsWritten: *ulong) -> int
export import def #extern #dllimport FillConsoleOutputAttribute(hConsoleOutput: *, wAttribute: ushort, nLength: ulong, dwWriteCoord: s__COORD, lpNumberOfAttrsWritten: *ulong) -> int
export import def #extern #dllimport GenerateConsoleCtrlEvent(dwCtrlEvent: ulong, dwProcessGroupId: ulong) -> int
export import def #extern #dllimport CreateConsoleScreenBuffer(dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, dwFlags: ulong, lpScreenBufferData: *) -> *
export import def #extern #dllimport SetConsoleActiveScreenBuffer(hConsoleOutput: *) -> int
export import def #extern #dllimport FlushConsoleInputBuffer(hConsoleInput: *) -> int
export import def #extern #dllimport SetConsoleCP(wCodePageID: uint) -> int
export import def #extern #dllimport SetConsoleOutputCP(wCodePageID: uint) -> int
export import def #extern #dllimport GetConsoleCursorInfo(hConsoleOutput: *, lpConsoleCursorInfo: *s__CONSOLE_CURSOR_INFO) -> int
export import def #extern #dllimport SetConsoleCursorInfo(hConsoleOutput: *, lpConsoleCursorInfo: *s__CONSOLE_CURSOR_INFO) -> int
export import def #extern #dllimport GetConsoleScreenBufferInfo(hConsoleOutput: *, lpConsoleScreenBufferInfo: *s__CONSOLE_SCREEN_BUFFER_INFO) -> int
export import def #extern #dllimport GetConsoleScreenBufferInfoEx(hConsoleOutput: *, lpConsoleScreenBufferInfoEx: *s__CONSOLE_SCREEN_BUFFER_INFOEX) -> int
export import def #extern #dllimport SetConsoleScreenBufferInfoEx(hConsoleOutput: *, lpConsoleScreenBufferInfoEx: *s__CONSOLE_SCREEN_BUFFER_INFOEX) -> int
export import def #extern #dllimport SetConsoleScreenBufferSize(hConsoleOutput: *, dwSize: s__COORD) -> int
export import def #extern #dllimport SetConsoleCursorPosition(hConsoleOutput: *, dwCursorPosition: s__COORD) -> int
export import def #extern #dllimport GetLargestConsoleWindowSize(hConsoleOutput: *) -> s__COORD
export import def #extern #dllimport SetConsoleTextAttribute(hConsoleOutput: *, wAttributes: ushort) -> int
export import def #extern #dllimport SetConsoleWindowInfo(hConsoleOutput: *, bAbsolute: int, lpConsoleWindow: *s__SMALL_RECT) -> int
export import def #extern #dllimport WriteConsoleOutputCharacterA(hConsoleOutput: *, lpCharacter: *char, nLength: ulong, dwWriteCoord: s__COORD, lpNumberOfCharsWritten: *ulong) -> int
export import def #extern #dllimport WriteConsoleOutputCharacterW(hConsoleOutput: *, lpCharacter: *ushort, nLength: ulong, dwWriteCoord: s__COORD, lpNumberOfCharsWritten: *ulong) -> int
export import def #extern #dllimport WriteConsoleOutputAttribute(hConsoleOutput: *, lpAttribute: *ushort, nLength: ulong, dwWriteCoord: s__COORD, lpNumberOfAttrsWritten: *ulong) -> int
export import def #extern #dllimport ReadConsoleOutputCharacterA(hConsoleOutput: *, lpCharacter: *char, nLength: ulong, dwReadCoord: s__COORD, lpNumberOfCharsRead: *ulong) -> int
export import def #extern #dllimport ReadConsoleOutputCharacterW(hConsoleOutput: *, lpCharacter: *ushort, nLength: ulong, dwReadCoord: s__COORD, lpNumberOfCharsRead: *ulong) -> int
export import def #extern #dllimport ReadConsoleOutputAttribute(hConsoleOutput: *, lpAttribute: *ushort, nLength: ulong, dwReadCoord: s__COORD, lpNumberOfAttrsRead: *ulong) -> int
export import def #extern #dllimport WriteConsoleInputA(hConsoleInput: *, lpBuffer: *s__INPUT_RECORD, nLength: ulong, lpNumberOfEventsWritten: *ulong) -> int
export import def #extern #dllimport WriteConsoleInputW(hConsoleInput: *, lpBuffer: *s__INPUT_RECORD, nLength: ulong, lpNumberOfEventsWritten: *ulong) -> int
export import def #extern #dllimport ScrollConsoleScreenBufferA(hConsoleOutput: *, lpScrollRectangle: *s__SMALL_RECT, lpClipRectangle: *s__SMALL_RECT, dwDestinationOrigin: s__COORD, lpFill: *s__CHAR_INFO) -> int
export import def #extern #dllimport ScrollConsoleScreenBufferW(hConsoleOutput: *, lpScrollRectangle: *s__SMALL_RECT, lpClipRectangle: *s__SMALL_RECT, dwDestinationOrigin: s__COORD, lpFill: *s__CHAR_INFO) -> int
export import def #extern #dllimport WriteConsoleOutputA(hConsoleOutput: *, lpBuffer: *s__CHAR_INFO, dwBufferSize: s__COORD, dwBufferCoord: s__COORD, lpWriteRegion: *s__SMALL_RECT) -> int
export import def #extern #dllimport WriteConsoleOutputW(hConsoleOutput: *, lpBuffer: *s__CHAR_INFO, dwBufferSize: s__COORD, dwBufferCoord: s__COORD, lpWriteRegion: *s__SMALL_RECT) -> int
export import def #extern #dllimport ReadConsoleOutputA(hConsoleOutput: *, lpBuffer: *s__CHAR_INFO, dwBufferSize: s__COORD, dwBufferCoord: s__COORD, lpReadRegion: *s__SMALL_RECT) -> int
export import def #extern #dllimport ReadConsoleOutputW(hConsoleOutput: *, lpBuffer: *s__CHAR_INFO, dwBufferSize: s__COORD, dwBufferCoord: s__COORD, lpReadRegion: *s__SMALL_RECT) -> int
export import def #extern #dllimport GetConsoleTitleA(lpConsoleTitle: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetConsoleTitleW(lpConsoleTitle: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport GetConsoleOriginalTitleA(lpConsoleTitle: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetConsoleOriginalTitleW(lpConsoleTitle: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport SetConsoleTitleA(lpConsoleTitle: *char) -> int
export import def #extern #dllimport SetConsoleTitleW(lpConsoleTitle: *ushort) -> int
export import def #extern #dllimport GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: *ulong) -> int
export import def #extern #dllimport GetConsoleFontSize(hConsoleOutput: *, nFont: ulong) -> s__COORD
export import def #extern #dllimport GetCurrentConsoleFont(hConsoleOutput: *, bMaximumWindow: int, lpConsoleCurrentFont: *s__CONSOLE_FONT_INFO) -> int
export import def #extern #dllimport GetCurrentConsoleFontEx(hConsoleOutput: *, bMaximumWindow: int, lpConsoleCurrentFontEx: *s__CONSOLE_FONT_INFOEX) -> int
export import def #extern #dllimport SetCurrentConsoleFontEx(hConsoleOutput: *, bMaximumWindow: int, lpConsoleCurrentFontEx: *s__CONSOLE_FONT_INFOEX) -> int
export import def #extern #dllimport GetConsoleSelectionInfo(lpConsoleSelectionInfo: *s__CONSOLE_SELECTION_INFO) -> int
export import def #extern #dllimport GetConsoleHistoryInfo(lpConsoleHistoryInfo: *s__CONSOLE_HISTORY_INFO) -> int
export import def #extern #dllimport SetConsoleHistoryInfo(lpConsoleHistoryInfo: *s__CONSOLE_HISTORY_INFO) -> int
export import def #extern #dllimport GetConsoleDisplayMode(lpModeFlags: *ulong) -> int
export import def #extern #dllimport SetConsoleDisplayMode(hConsoleOutput: *, dwFlags: ulong, lpNewScreenBufferDimensions: *s__COORD) -> int
export import def #extern #dllimport GetConsoleWindow() -> *s_HWND__
export import def #extern #dllimport AddConsoleAliasA(Source: *char, Target: *char, ExeName: *char) -> int
export import def #extern #dllimport AddConsoleAliasW(Source: *ushort, Target: *ushort, ExeName: *ushort) -> int
export import def #extern #dllimport GetConsoleAliasA(Source: *char, TargetBuffer: *char, TargetBufferLength: ulong, ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleAliasW(Source: *ushort, TargetBuffer: *ushort, TargetBufferLength: ulong, ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleAliasesLengthA(ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleAliasesLengthW(ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleAliasExesLengthA() -> ulong
export import def #extern #dllimport GetConsoleAliasExesLengthW() -> ulong
export import def #extern #dllimport GetConsoleAliasesA(AliasBuffer: *char, AliasBufferLength: ulong, ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleAliasesW(AliasBuffer: *ushort, AliasBufferLength: ulong, ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleAliasExesA(ExeNameBuffer: *char, ExeNameBufferLength: ulong) -> ulong
export import def #extern #dllimport GetConsoleAliasExesW(ExeNameBuffer: *ushort, ExeNameBufferLength: ulong) -> ulong
export import def #extern #dllimport ExpungeConsoleCommandHistoryA(ExeName: *char)
export import def #extern #dllimport ExpungeConsoleCommandHistoryW(ExeName: *ushort)
export import def #extern #dllimport SetConsoleNumberOfCommandsA(Number: ulong, ExeName: *char) -> int
export import def #extern #dllimport SetConsoleNumberOfCommandsW(Number: ulong, ExeName: *ushort) -> int
export import def #extern #dllimport GetConsoleCommandHistoryLengthA(ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleCommandHistoryLengthW(ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleCommandHistoryA(Commands: *char, CommandBufferLength: ulong, ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleCommandHistoryW(Commands: *ushort, CommandBufferLength: ulong, ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleProcessList(lpdwProcessList: *ulong, dwProcessCount: ulong) -> ulong
export import def #extern VerFindFileA(uFlags: ulong, szFileName: *char, szWinDir: *char, szAppDir: *char, szCurDir: *char, puCurDirLen: *uint, szDestDir: *char, puDestDirLen: *uint) -> ulong
export import def #extern VerFindFileW(uFlags: ulong, szFileName: *ushort, szWinDir: *ushort, szAppDir: *ushort, szCurDir: *ushort, puCurDirLen: *uint, szDestDir: *ushort, puDestDirLen: *uint) -> ulong
export import def #extern VerInstallFileA(uFlags: ulong, szSrcFileName: *char, szDestFileName: *char, szSrcDir: *char, szDestDir: *char, szCurDir: *char, szTmpFile: *char, puTmpFileLen: *uint) -> ulong
export import def #extern VerInstallFileW(uFlags: ulong, szSrcFileName: *ushort, szDestFileName: *ushort, szSrcDir: *ushort, szDestDir: *ushort, szCurDir: *ushort, szTmpFile: *ushort, puTmpFileLen: *uint) -> ulong
export import def #extern GetFileVersionInfoSizeA(lptstrFilename: *char, lpdwHandle: *ulong) -> ulong
export import def #extern GetFileVersionInfoSizeW(lptstrFilename: *ushort, lpdwHandle: *ulong) -> ulong
export import def #extern GetFileVersionInfoA(lptstrFilename: *char, dwHandle: ulong, dwLen: ulong, lpData: *) -> int
export import def #extern GetFileVersionInfoW(lptstrFilename: *ushort, dwHandle: ulong, dwLen: ulong, lpData: *) -> int
export import def #extern GetFileVersionInfoSizeExA(dwFlags: ulong, lpwstrFilename: *char, lpdwHandle: *ulong) -> ulong
export import def #extern GetFileVersionInfoSizeExW(dwFlags: ulong, lpwstrFilename: *ushort, lpdwHandle: *ulong) -> ulong
export import def #extern GetFileVersionInfoExA(dwFlags: ulong, lpwstrFilename: *char, dwHandle: ulong, dwLen: ulong, lpData: *) -> int
export import def #extern GetFileVersionInfoExW(dwFlags: ulong, lpwstrFilename: *ushort, dwHandle: ulong, dwLen: ulong, lpData: *) -> int
export import def #extern VerLanguageNameA(wLang: ulong, szLang: *char, cchLang: ulong) -> ulong
export import def #extern VerLanguageNameW(wLang: ulong, szLang: *ushort, cchLang: ulong) -> ulong
export import def #extern VerQueryValueA(pBlock: *, lpSubBlock: *char, lplpBuffer: **, puLen: *uint) -> int
export import def #extern VerQueryValueW(pBlock: *, lpSubBlock: *ushort, lplpBuffer: **, puLen: *uint) -> int
export import def #extern #dllimport RegCloseKey(hKey: *s_HKEY__) -> long
export import def #extern #dllimport RegOverridePredefKey(hKey: *s_HKEY__, hNewHKey: *s_HKEY__) -> long
export import def #extern #dllimport RegOpenUserClassesRoot(hToken: *, dwOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenCurrentUser(samDesired: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegDisablePredefinedCache() -> long
export import def #extern #dllimport RegDisablePredefinedCacheEx() -> long
export import def #extern #dllimport RegConnectRegistryA(lpMachineName: *char, hKey: *s_HKEY__, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegConnectRegistryW(lpMachineName: *ushort, hKey: *s_HKEY__, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegConnectRegistryExA(lpMachineName: *char, hKey: *s_HKEY__, Flags: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegConnectRegistryExW(lpMachineName: *ushort, hKey: *s_HKEY__, Flags: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegCreateKeyA(hKey: *s_HKEY__, lpSubKey: *char, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegCreateKeyW(hKey: *s_HKEY__, lpSubKey: *ushort, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegCreateKeyExA(hKey: *s_HKEY__, lpSubKey: *char, Reserved: ulong, lpClass: *char, dwOptions: ulong, samDesired: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, phkResult: **s_HKEY__, lpdwDisposition: *ulong) -> long
export import def #extern #dllimport RegCreateKeyExW(hKey: *s_HKEY__, lpSubKey: *ushort, Reserved: ulong, lpClass: *ushort, dwOptions: ulong, samDesired: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, phkResult: **s_HKEY__, lpdwDisposition: *ulong) -> long
export import def #extern #dllimport RegCreateKeyTransactedA(hKey: *s_HKEY__, lpSubKey: *char, Reserved: ulong, lpClass: *char, dwOptions: ulong, samDesired: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, phkResult: **s_HKEY__, lpdwDisposition: *ulong, hTransaction: *, pExtendedParemeter: *) -> long
export import def #extern #dllimport RegCreateKeyTransactedW(hKey: *s_HKEY__, lpSubKey: *ushort, Reserved: ulong, lpClass: *ushort, dwOptions: ulong, samDesired: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, phkResult: **s_HKEY__, lpdwDisposition: *ulong, hTransaction: *, pExtendedParemeter: *) -> long
export import def #extern #dllimport RegDeleteKeyA(hKey: *s_HKEY__, lpSubKey: *char) -> long
export import def #extern #dllimport RegDeleteKeyW(hKey: *s_HKEY__, lpSubKey: *ushort) -> long
export import def #extern #dllimport RegDeleteKeyExA(hKey: *s_HKEY__, lpSubKey: *char, samDesired: ulong, Reserved: ulong) -> long
export import def #extern #dllimport RegDeleteKeyExW(hKey: *s_HKEY__, lpSubKey: *ushort, samDesired: ulong, Reserved: ulong) -> long
export import def #extern #dllimport RegDeleteKeyTransactedA(hKey: *s_HKEY__, lpSubKey: *char, samDesired: ulong, Reserved: ulong, hTransaction: *, pExtendedParameter: *) -> long
export import def #extern #dllimport RegDeleteKeyTransactedW(hKey: *s_HKEY__, lpSubKey: *ushort, samDesired: ulong, Reserved: ulong, hTransaction: *, pExtendedParameter: *) -> long
export import def #extern #dllimport RegDisableReflectionKey(hBase: *s_HKEY__) -> long
export import def #extern #dllimport RegEnableReflectionKey(hBase: *s_HKEY__) -> long
export import def #extern #dllimport RegQueryReflectionKey(hBase: *s_HKEY__, bIsReflectionDisabled: *int) -> long
export import def #extern #dllimport RegDeleteValueA(hKey: *s_HKEY__, lpValueName: *char) -> long
export import def #extern #dllimport RegDeleteValueW(hKey: *s_HKEY__, lpValueName: *ushort) -> long
export import def #extern #dllimport RegEnumKeyA(hKey: *s_HKEY__, dwIndex: ulong, lpName: *char, cchName: ulong) -> long
export import def #extern #dllimport RegEnumKeyW(hKey: *s_HKEY__, dwIndex: ulong, lpName: *ushort, cchName: ulong) -> long
export import def #extern #dllimport RegEnumKeyExA(hKey: *s_HKEY__, dwIndex: ulong, lpName: *char, lpcchName: *ulong, lpReserved: *ulong, lpClass: *char, lpcchClass: *ulong, lpftLastWriteTime: *s__FILETIME) -> long
export import def #extern #dllimport RegEnumKeyExW(hKey: *s_HKEY__, dwIndex: ulong, lpName: *ushort, lpcchName: *ulong, lpReserved: *ulong, lpClass: *ushort, lpcchClass: *ulong, lpftLastWriteTime: *s__FILETIME) -> long
export import def #extern #dllimport RegEnumValueA(hKey: *s_HKEY__, dwIndex: ulong, lpValueName: *char, lpcchValueName: *ulong, lpReserved: *ulong, lpType: *ulong, lpData: *uint8, lpcbData: *ulong) -> long
export import def #extern #dllimport RegEnumValueW(hKey: *s_HKEY__, dwIndex: ulong, lpValueName: *ushort, lpcchValueName: *ulong, lpReserved: *ulong, lpType: *ulong, lpData: *uint8, lpcbData: *ulong) -> long
export import def #extern #dllimport RegFlushKey(hKey: *s_HKEY__) -> long
export import def #extern #dllimport RegGetKeySecurity(hKey: *s_HKEY__, SecurityInformation: ulong, pSecurityDescriptor: *, lpcbSecurityDescriptor: *ulong) -> long
export import def #extern #dllimport RegLoadKeyA(hKey: *s_HKEY__, lpSubKey: *char, lpFile: *char) -> long
export import def #extern #dllimport RegLoadKeyW(hKey: *s_HKEY__, lpSubKey: *ushort, lpFile: *ushort) -> long
export import def #extern #dllimport RegNotifyChangeKeyValue(hKey: *s_HKEY__, bWatchSubtree: int, dwNotifyFilter: ulong, hEvent: *, fAsynchronous: int) -> long
export import def #extern #dllimport RegOpenKeyA(hKey: *s_HKEY__, lpSubKey: *char, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenKeyW(hKey: *s_HKEY__, lpSubKey: *ushort, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenKeyExA(hKey: *s_HKEY__, lpSubKey: *char, ulOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenKeyExW(hKey: *s_HKEY__, lpSubKey: *ushort, ulOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenKeyTransactedA(hKey: *s_HKEY__, lpSubKey: *char, ulOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__, hTransaction: *, pExtendedParemeter: *) -> long
export import def #extern #dllimport RegOpenKeyTransactedW(hKey: *s_HKEY__, lpSubKey: *ushort, ulOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__, hTransaction: *, pExtendedParemeter: *) -> long
export import def #extern #dllimport RegQueryInfoKeyA(hKey: *s_HKEY__, lpClass: *char, lpcchClass: *ulong, lpReserved: *ulong, lpcSubKeys: *ulong, lpcbMaxSubKeyLen: *ulong, lpcbMaxClassLen: *ulong, lpcValues: *ulong, lpcbMaxValueNameLen: *ulong, lpcbMaxValueLen: *ulong, lpcbSecurityDescriptor: *ulong, lpftLastWriteTime: *s__FILETIME) -> long
export import def #extern #dllimport RegQueryInfoKeyW(hKey: *s_HKEY__, lpClass: *ushort, lpcchClass: *ulong, lpReserved: *ulong, lpcSubKeys: *ulong, lpcbMaxSubKeyLen: *ulong, lpcbMaxClassLen: *ulong, lpcValues: *ulong, lpcbMaxValueNameLen: *ulong, lpcbMaxValueLen: *ulong, lpcbSecurityDescriptor: *ulong, lpftLastWriteTime: *s__FILETIME) -> long
export import def #extern #dllimport RegQueryValueA(hKey: *s_HKEY__, lpSubKey: *char, lpData: *char, lpcbData: *long) -> long
export import def #extern #dllimport RegQueryValueW(hKey: *s_HKEY__, lpSubKey: *ushort, lpData: *ushort, lpcbData: *long) -> long
export import def #extern #dllimport RegQueryMultipleValuesA(hKey: *s_HKEY__, val_list: *s_value_entA, num_vals: ulong, lpValueBuf: *char, ldwTotsize: *ulong) -> long
export import def #extern #dllimport RegQueryMultipleValuesW(hKey: *s_HKEY__, val_list: *s_value_entW, num_vals: ulong, lpValueBuf: *ushort, ldwTotsize: *ulong) -> long
export import def #extern #dllimport RegQueryValueExA(hKey: *s_HKEY__, lpValueName: *char, lpReserved: *ulong, lpType: *ulong, lpData: *uint8, lpcbData: *ulong) -> long
export import def #extern #dllimport RegQueryValueExW(hKey: *s_HKEY__, lpValueName: *ushort, lpReserved: *ulong, lpType: *ulong, lpData: *uint8, lpcbData: *ulong) -> long
export import def #extern #dllimport RegReplaceKeyA(hKey: *s_HKEY__, lpSubKey: *char, lpNewFile: *char, lpOldFile: *char) -> long
export import def #extern #dllimport RegReplaceKeyW(hKey: *s_HKEY__, lpSubKey: *ushort, lpNewFile: *ushort, lpOldFile: *ushort) -> long
export import def #extern #dllimport RegRestoreKeyA(hKey: *s_HKEY__, lpFile: *char, dwFlags: ulong) -> long
export import def #extern #dllimport RegRestoreKeyW(hKey: *s_HKEY__, lpFile: *ushort, dwFlags: ulong) -> long
export import def #extern #dllimport RegRenameKey(hKey: *s_HKEY__, lpSubKeyName: *ushort, lpNewKeyName: *ushort) -> long
export import def #extern #dllimport RegSaveKeyA(hKey: *s_HKEY__, lpFile: *char, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> long
export import def #extern #dllimport RegSaveKeyW(hKey: *s_HKEY__, lpFile: *ushort, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> long
export import def #extern #dllimport RegSetKeySecurity(hKey: *s_HKEY__, SecurityInformation: ulong, pSecurityDescriptor: *) -> long
export import def #extern #dllimport RegSetValueA(hKey: *s_HKEY__, lpSubKey: *char, dwType: ulong, lpData: *char, cbData: ulong) -> long
export import def #extern #dllimport RegSetValueW(hKey: *s_HKEY__, lpSubKey: *ushort, dwType: ulong, lpData: *ushort, cbData: ulong) -> long
export import def #extern #dllimport RegSetValueExA(hKey: *s_HKEY__, lpValueName: *char, Reserved: ulong, dwType: ulong, lpData: *uint8, cbData: ulong) -> long
export import def #extern #dllimport RegSetValueExW(hKey: *s_HKEY__, lpValueName: *ushort, Reserved: ulong, dwType: ulong, lpData: *uint8, cbData: ulong) -> long
export import def #extern #dllimport RegUnLoadKeyA(hKey: *s_HKEY__, lpSubKey: *char) -> long
export import def #extern #dllimport RegUnLoadKeyW(hKey: *s_HKEY__, lpSubKey: *ushort) -> long
export import def #extern #dllimport RegDeleteKeyValueA(hKey: *s_HKEY__, lpSubKey: *char, lpValueName: *char) -> long
export import def #extern #dllimport RegDeleteKeyValueW(hKey: *s_HKEY__, lpSubKey: *ushort, lpValueName: *ushort) -> long
export import def #extern #dllimport RegSetKeyValueA(hKey: *s_HKEY__, lpSubKey: *char, lpValueName: *char, dwType: ulong, lpData: *, cbData: ulong) -> long
export import def #extern #dllimport RegSetKeyValueW(hKey: *s_HKEY__, lpSubKey: *ushort, lpValueName: *ushort, dwType: ulong, lpData: *, cbData: ulong) -> long
export import def #extern #dllimport RegDeleteTreeA(hKey: *s_HKEY__, lpSubKey: *char) -> long
export import def #extern #dllimport RegDeleteTreeW(hKey: *s_HKEY__, lpSubKey: *ushort) -> long
export import def #extern #dllimport RegCopyTreeA(hKeySrc: *s_HKEY__, lpSubKey: *char, hKeyDest: *s_HKEY__) -> long
export import def #extern #dllimport RegGetValueA(hkey: *s_HKEY__, lpSubKey: *char, lpValue: *char, dwFlags: ulong, pdwType: *ulong, pvData: *, pcbData: *ulong) -> long
export import def #extern #dllimport RegGetValueW(hkey: *s_HKEY__, lpSubKey: *ushort, lpValue: *ushort, dwFlags: ulong, pdwType: *ulong, pvData: *, pcbData: *ulong) -> long
export import def #extern #dllimport RegCopyTreeW(hKeySrc: *s_HKEY__, lpSubKey: *ushort, hKeyDest: *s_HKEY__) -> long
export import def #extern #dllimport RegLoadMUIStringA(hKey: *s_HKEY__, pszValue: *char, pszOutBuf: *char, cbOutBuf: ulong, pcbData: *ulong, Flags: ulong, pszDirectory: *char) -> long
export import def #extern #dllimport RegLoadMUIStringW(hKey: *s_HKEY__, pszValue: *ushort, pszOutBuf: *ushort, cbOutBuf: ulong, pcbData: *ulong, Flags: ulong, pszDirectory: *ushort) -> long
export import def #extern #dllimport RegLoadAppKeyA(lpFile: *char, phkResult: **s_HKEY__, samDesired: ulong, dwOptions: ulong, Reserved: ulong) -> long
export import def #extern #dllimport RegLoadAppKeyW(lpFile: *ushort, phkResult: **s_HKEY__, samDesired: ulong, dwOptions: ulong, Reserved: ulong) -> long
export import def #extern #dllimport InitiateSystemShutdownA(lpMachineName: *char, lpMessage: *char, dwTimeout: ulong, bForceAppsClosed: int, bRebootAfterShutdown: int) -> int
export import def #extern #dllimport InitiateSystemShutdownW(lpMachineName: *ushort, lpMessage: *ushort, dwTimeout: ulong, bForceAppsClosed: int, bRebootAfterShutdown: int) -> int
export import def #extern #dllimport AbortSystemShutdownA(lpMachineName: *char) -> int
export import def #extern #dllimport AbortSystemShutdownW(lpMachineName: *ushort) -> int
export import def #extern #dllimport InitiateSystemShutdownExA(lpMachineName: *char, lpMessage: *char, dwTimeout: ulong, bForceAppsClosed: int, bRebootAfterShutdown: int, dwReason: ulong) -> int
export import def #extern #dllimport InitiateSystemShutdownExW(lpMachineName: *ushort, lpMessage: *ushort, dwTimeout: ulong, bForceAppsClosed: int, bRebootAfterShutdown: int, dwReason: ulong) -> int
export import def #extern #dllimport InitiateShutdownA(lpMachineName: *char, lpMessage: *char, dwGracePeriod: ulong, dwShutdownFlags: ulong, dwReason: ulong) -> ulong
export import def #extern #dllimport InitiateShutdownW(lpMachineName: *ushort, lpMessage: *ushort, dwGracePeriod: ulong, dwShutdownFlags: ulong, dwReason: ulong) -> ulong
export import def #extern #dllimport CheckForHiberboot(pHiberboot: *uint8, bClearFlag: uint8) -> ulong
export import def #extern #dllimport RegSaveKeyExA(hKey: *s_HKEY__, lpFile: *char, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, Flags: ulong) -> long
export import def #extern #dllimport RegSaveKeyExW(hKey: *s_HKEY__, lpFile: *ushort, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES, Flags: ulong) -> long
export import def #extern WNetAddConnectionA(lpRemoteName: *char, lpPassword: *char, lpLocalName: *char) -> ulong
export import def #extern WNetAddConnectionW(lpRemoteName: *ushort, lpPassword: *ushort, lpLocalName: *ushort) -> ulong
export import def #extern WNetAddConnection2A(lpNetResource: *s__NETRESOURCEA, lpPassword: *char, lpUserName: *char, dwFlags: ulong) -> ulong
export import def #extern WNetAddConnection2W(lpNetResource: *s__NETRESOURCEW, lpPassword: *ushort, lpUserName: *ushort, dwFlags: ulong) -> ulong
export import def #extern WNetAddConnection3A(hwndOwner: *s_HWND__, lpNetResource: *s__NETRESOURCEA, lpPassword: *char, lpUserName: *char, dwFlags: ulong) -> ulong
export import def #extern WNetAddConnection3W(hwndOwner: *s_HWND__, lpNetResource: *s__NETRESOURCEW, lpPassword: *ushort, lpUserName: *ushort, dwFlags: ulong) -> ulong
export import def #extern WNetAddConnection4A(hwndOwner: *s_HWND__, lpNetResource: *s__NETRESOURCEA, pAuthBuffer: *, cbAuthBuffer: ulong, dwFlags: ulong, lpUseOptions: *uint8, cbUseOptions: ulong) -> ulong
export import def #extern WNetAddConnection4W(hwndOwner: *s_HWND__, lpNetResource: *s__NETRESOURCEW, pAuthBuffer: *, cbAuthBuffer: ulong, dwFlags: ulong, lpUseOptions: *uint8, cbUseOptions: ulong) -> ulong
export import def #extern WNetCancelConnectionA(lpName: *char, fForce: int) -> ulong
export import def #extern WNetCancelConnectionW(lpName: *ushort, fForce: int) -> ulong
export import def #extern WNetCancelConnection2A(lpName: *char, dwFlags: ulong, fForce: int) -> ulong
export import def #extern WNetCancelConnection2W(lpName: *ushort, dwFlags: ulong, fForce: int) -> ulong
export import def #extern WNetGetConnectionA(lpLocalName: *char, lpRemoteName: *char, lpnLength: *ulong) -> ulong
export import def #extern WNetGetConnectionW(lpLocalName: *ushort, lpRemoteName: *ushort, lpnLength: *ulong) -> ulong
export import def #extern WNetRestoreSingleConnectionW(hwndParent: *s_HWND__, lpDevice: *ushort, fUseUI: int) -> ulong
export import def #extern WNetUseConnectionA(hwndOwner: *s_HWND__, lpNetResource: *s__NETRESOURCEA, lpPassword: *char, lpUserId: *char, dwFlags: ulong, lpAccessName: *char, lpBufferSize: *ulong, lpResult: *ulong) -> ulong
export import def #extern WNetUseConnectionW(hwndOwner: *s_HWND__, lpNetResource: *s__NETRESOURCEW, lpPassword: *ushort, lpUserId: *ushort, dwFlags: ulong, lpAccessName: *ushort, lpBufferSize: *ulong, lpResult: *ulong) -> ulong
export import def #extern WNetUseConnection4A(hwndOwner: *s_HWND__, lpNetResource: *s__NETRESOURCEA, pAuthBuffer: *, cbAuthBuffer: ulong, dwFlags: ulong, lpUseOptions: *uint8, cbUseOptions: ulong, lpAccessName: *char, lpBufferSize: *ulong, lpResult: *ulong) -> ulong
export import def #extern WNetUseConnection4W(hwndOwner: *s_HWND__, lpNetResource: *s__NETRESOURCEW, pAuthBuffer: *, cbAuthBuffer: ulong, dwFlags: ulong, lpUseOptions: *uint8, cbUseOptions: ulong, lpAccessName: *ushort, lpBufferSize: *ulong, lpResult: *ulong) -> ulong
export import def #extern WNetConnectionDialog(hwnd: *s_HWND__, dwType: ulong) -> ulong
export import def #extern WNetDisconnectDialog(hwnd: *s_HWND__, dwType: ulong) -> ulong
export import def #extern WNetConnectionDialog1A(lpConnDlgStruct: *s__CONNECTDLGSTRUCTA) -> ulong
export import def #extern WNetConnectionDialog1W(lpConnDlgStruct: *s__CONNECTDLGSTRUCTW) -> ulong
export import def #extern WNetDisconnectDialog1A(lpConnDlgStruct: *s__DISCDLGSTRUCTA) -> ulong
export import def #extern WNetDisconnectDialog1W(lpConnDlgStruct: *s__DISCDLGSTRUCTW) -> ulong
export import def #extern WNetOpenEnumA(dwScope: ulong, dwType: ulong, dwUsage: ulong, lpNetResource: *s__NETRESOURCEA, lphEnum: **) -> ulong
export import def #extern WNetOpenEnumW(dwScope: ulong, dwType: ulong, dwUsage: ulong, lpNetResource: *s__NETRESOURCEW, lphEnum: **) -> ulong
export import def #extern WNetEnumResourceA(hEnum: *, lpcCount: *ulong, lpBuffer: *, lpBufferSize: *ulong) -> ulong
export import def #extern WNetEnumResourceW(hEnum: *, lpcCount: *ulong, lpBuffer: *, lpBufferSize: *ulong) -> ulong
export import def #extern WNetCloseEnum(hEnum: *) -> ulong
export import def #extern WNetGetResourceParentA(lpNetResource: *s__NETRESOURCEA, lpBuffer: *, lpcbBuffer: *ulong) -> ulong
export import def #extern WNetGetResourceParentW(lpNetResource: *s__NETRESOURCEW, lpBuffer: *, lpcbBuffer: *ulong) -> ulong
export import def #extern WNetGetResourceInformationA(lpNetResource: *s__NETRESOURCEA, lpBuffer: *, lpcbBuffer: *ulong, lplpSystem: **char) -> ulong
export import def #extern WNetGetResourceInformationW(lpNetResource: *s__NETRESOURCEW, lpBuffer: *, lpcbBuffer: *ulong, lplpSystem: **ushort) -> ulong
export import def #extern WNetGetUniversalNameA(lpLocalPath: *char, dwInfoLevel: ulong, lpBuffer: *, lpBufferSize: *ulong) -> ulong
export import def #extern WNetGetUniversalNameW(lpLocalPath: *ushort, dwInfoLevel: ulong, lpBuffer: *, lpBufferSize: *ulong) -> ulong
export import def #extern WNetGetUserA(lpName: *char, lpUserName: *char, lpnLength: *ulong) -> ulong
export import def #extern WNetGetUserW(lpName: *ushort, lpUserName: *ushort, lpnLength: *ulong) -> ulong
export import def #extern WNetGetProviderNameA(dwNetType: ulong, lpProviderName: *char, lpBufferSize: *ulong) -> ulong
export import def #extern WNetGetProviderNameW(dwNetType: ulong, lpProviderName: *ushort, lpBufferSize: *ulong) -> ulong
export import def #extern WNetGetNetworkInformationA(lpProvider: *char, lpNetInfoStruct: *s__NETINFOSTRUCT) -> ulong
export import def #extern WNetGetNetworkInformationW(lpProvider: *ushort, lpNetInfoStruct: *s__NETINFOSTRUCT) -> ulong
export import def #extern WNetGetLastErrorA(lpError: *ulong, lpErrorBuf: *char, nErrorBufSize: ulong, lpNameBuf: *char, nNameBufSize: ulong) -> ulong
export import def #extern WNetGetLastErrorW(lpError: *ulong, lpErrorBuf: *ushort, nErrorBufSize: ulong, lpNameBuf: *ushort, nNameBufSize: ulong) -> ulong
export import def #extern MultinetGetConnectionPerformanceA(lpNetResource: *s__NETRESOURCEA, lpNetConnectInfoStruct: *s__NETCONNECTINFOSTRUCT) -> ulong
export import def #extern MultinetGetConnectionPerformanceW(lpNetResource: *s__NETRESOURCEW, lpNetConnectInfoStruct: *s__NETCONNECTINFOSTRUCT) -> ulong
export import def #extern DdeSetQualityOfService(hwndClient: *s_HWND__, pqosNew: *s__SECURITY_QUALITY_OF_SERVICE, pqosPrev: *s__SECURITY_QUALITY_OF_SERVICE) -> int
export import def #extern ImpersonateDdeClientWindow(hWndClient: *s_HWND__, hWndServer: *s_HWND__) -> int
export import def #extern PackDDElParam(msg: uint, uiLo: uint64, uiHi: uint64) -> int64
export import def #extern UnpackDDElParam(msg: uint, lParam: int64, puiLo: *uint64, puiHi: *uint64) -> int
export import def #extern FreeDDElParam(msg: uint, lParam: int64) -> int
export import def #extern ReuseDDElParam(lParam: int64, msgIn: uint, msgOut: uint, uiLo: uint64, uiHi: uint64) -> int64
export import def #extern DdeInitializeA(pidInst: *ulong, pfnCallback: def (uint, uint, *s_HCONV__, *s_HSZ__, *s_HSZ__, *s_HDDEDATA__, uint64, uint64) -> (*s_HDDEDATA__), afCmd: ulong, ulRes: ulong) -> uint
export import def #extern DdeInitializeW(pidInst: *ulong, pfnCallback: def (uint, uint, *s_HCONV__, *s_HSZ__, *s_HSZ__, *s_HDDEDATA__, uint64, uint64) -> (*s_HDDEDATA__), afCmd: ulong, ulRes: ulong) -> uint
export import def #extern DdeUninitialize(idInst: ulong) -> int
export import def #extern DdeConnectList(idInst: ulong, hszService: *s_HSZ__, hszTopic: *s_HSZ__, hConvList: *s_HCONVLIST__, pCC: *s_tagCONVCONTEXT) -> *s_HCONVLIST__
export import def #extern DdeQueryNextServer(hConvList: *s_HCONVLIST__, hConvPrev: *s_HCONV__) -> *s_HCONV__
export import def #extern DdeDisconnectList(hConvList: *s_HCONVLIST__) -> int
export import def #extern DdeConnect(idInst: ulong, hszService: *s_HSZ__, hszTopic: *s_HSZ__, pCC: *s_tagCONVCONTEXT) -> *s_HCONV__
export import def #extern DdeDisconnect(hConv: *s_HCONV__) -> int
export import def #extern DdeReconnect(hConv: *s_HCONV__) -> *s_HCONV__
export import def #extern DdeQueryConvInfo(hConv: *s_HCONV__, idTransaction: ulong, pConvInfo: *s_tagCONVINFO) -> uint
export import def #extern DdeSetUserHandle(hConv: *s_HCONV__, id: ulong, hUser: uint64) -> int
export import def #extern DdeAbandonTransaction(idInst: ulong, hConv: *s_HCONV__, idTransaction: ulong) -> int
export import def #extern DdePostAdvise(idInst: ulong, hszTopic: *s_HSZ__, hszItem: *s_HSZ__) -> int
export import def #extern DdeEnableCallback(idInst: ulong, hConv: *s_HCONV__, wCmd: uint) -> int
export import def #extern DdeImpersonateClient(hConv: *s_HCONV__) -> int
export import def #extern DdeNameService(idInst: ulong, hsz1: *s_HSZ__, hsz2: *s_HSZ__, afCmd: uint) -> *s_HDDEDATA__
export import def #extern DdeClientTransaction(pData: *uint8, cbData: ulong, hConv: *s_HCONV__, hszItem: *s_HSZ__, wFmt: uint, wType: uint, dwTimeout: ulong, pdwResult: *ulong) -> *s_HDDEDATA__
export import def #extern DdeCreateDataHandle(idInst: ulong, pSrc: *uint8, cb: ulong, cbOff: ulong, hszItem: *s_HSZ__, wFmt: uint, afCmd: uint) -> *s_HDDEDATA__
export import def #extern DdeAddData(hData: *s_HDDEDATA__, pSrc: *uint8, cb: ulong, cbOff: ulong) -> *s_HDDEDATA__
export import def #extern DdeGetData(hData: *s_HDDEDATA__, pDst: *uint8, cbMax: ulong, cbOff: ulong) -> ulong
export import def #extern DdeAccessData(hData: *s_HDDEDATA__, pcbDataSize: *ulong) -> *uint8
export import def #extern DdeUnaccessData(hData: *s_HDDEDATA__) -> int
export import def #extern DdeFreeDataHandle(hData: *s_HDDEDATA__) -> int
export import def #extern DdeGetLastError(idInst: ulong) -> uint
export import def #extern DdeCreateStringHandleA(idInst: ulong, psz: *char, iCodePage: int) -> *s_HSZ__
export import def #extern DdeCreateStringHandleW(idInst: ulong, psz: *ushort, iCodePage: int) -> *s_HSZ__
export import def #extern DdeQueryStringA(idInst: ulong, hsz: *s_HSZ__, psz: *char, cchMax: ulong, iCodePage: int) -> ulong
export import def #extern DdeQueryStringW(idInst: ulong, hsz: *s_HSZ__, psz: *ushort, cchMax: ulong, iCodePage: int) -> ulong
export import def #extern DdeFreeStringHandle(idInst: ulong, hsz: *s_HSZ__) -> int
export import def #extern DdeKeepStringHandle(idInst: ulong, hsz: *s_HSZ__) -> int
export import def #extern DdeCmpStringHandles(hsz1: *s_HSZ__, hsz2: *s_HSZ__) -> int
export import def #extern LZStart() -> int
export import def #extern LZDone()
export import def #extern CopyLZFile(hfSource: int, hfDest: int) -> long
export import def #extern LZCopy(hfSource: int, hfDest: int) -> long
export import def #extern LZInit(hfSource: int) -> int
export import def #extern GetExpandedNameA(lpszSource: *char, lpszBuffer: *char) -> int
export import def #extern GetExpandedNameW(lpszSource: *ushort, lpszBuffer: *ushort) -> int
export import def #extern LZOpenFileA(lpFileName: *char, lpReOpenBuf: *s__OFSTRUCT, wStyle: ushort) -> int
export import def #extern LZOpenFileW(lpFileName: *ushort, lpReOpenBuf: *s__OFSTRUCT, wStyle: ushort) -> int
export import def #extern LZSeek(hFile: int, lOffset: long, iOrigin: int) -> long
export import def #extern LZRead(hFile: int, lpBuffer: *char, cbRead: int) -> int
export import def #extern LZClose(hFile: int)
export import def #extern #dllimport mciSendCommandA(mciId: uint, uMsg: uint, dwParam1: uint64, dwParam2: uint64) -> ulong
export import def #extern #dllimport mciSendCommandW(mciId: uint, uMsg: uint, dwParam1: uint64, dwParam2: uint64) -> ulong
export import def #extern #dllimport mciSendStringA(lpstrCommand: *char, lpstrReturnString: *char, uReturnLength: uint, hwndCallback: *s_HWND__) -> ulong
export import def #extern #dllimport mciSendStringW(lpstrCommand: *ushort, lpstrReturnString: *ushort, uReturnLength: uint, hwndCallback: *s_HWND__) -> ulong
export import def #extern #dllimport mciGetDeviceIDA(pszDevice: *char) -> uint
export import def #extern #dllimport mciGetDeviceIDW(pszDevice: *ushort) -> uint
export import def #extern #dllimport mciGetDeviceIDFromElementIDA(dwElementID: ulong, lpstrType: *char) -> uint
export import def #extern #dllimport mciGetDeviceIDFromElementIDW(dwElementID: ulong, lpstrType: *ushort) -> uint
export import def #extern #dllimport mciGetErrorStringA(mcierr: ulong, pszText: *char, cchText: uint) -> int
export import def #extern #dllimport mciGetErrorStringW(mcierr: ulong, pszText: *ushort, cchText: uint) -> int
export import def #extern #dllimport mciSetYieldProc(mciId: uint, fpYieldProc: def (uint, ulong) -> (uint), dwYieldData: ulong) -> int
export import def #extern #dllimport mciGetCreatorTask(mciId: uint) -> *s_HTASK__
export import def #extern #dllimport mciGetYieldProc(mciId: uint, pdwYieldData: *ulong) -> def (uint, ulong) -> (uint)
export import def #extern mciGetDriverData(wDeviceID: uint) -> uint64
export import def #extern mciLoadCommandResource(hInstance: *, lpResName: *ushort, wType: uint) -> uint
export import def #extern mciSetDriverData(wDeviceID: uint, dwData: uint64) -> int
export import def #extern mciDriverYield(wDeviceID: uint) -> uint
export import def #extern mciDriverNotify(hwndCallback: *, wDeviceID: uint, uStatus: uint) -> int
export import def #extern mciFreeCommandResource(wTable: uint) -> int
export import def #extern #dllimport CloseDriver(hDriver: *s_HDRVR__, lParam1: int64, lParam2: int64) -> int64
export import def #extern #dllimport OpenDriver(szDriverName: *ushort, szSectionName: *ushort, lParam2: int64) -> *s_HDRVR__
export import def #extern #dllimport SendDriverMessage(hDriver: *s_HDRVR__, message: uint, lParam1: int64, lParam2: int64) -> int64
export import def #extern #dllimport DrvGetModuleHandle(hDriver: *s_HDRVR__) -> *s_HINSTANCE__
export import def #extern #dllimport GetDriverModuleHandle(hDriver: *s_HDRVR__) -> *s_HINSTANCE__
export import def #extern #dllimport DefDriverProc(dwDriverIdentifier: uint64, hdrvr: *s_HDRVR__, uMsg: uint, lParam1: int64, lParam2: int64) -> int64
export import def #extern DriverCallback(dwCallback: uint64, dwFlags: ulong, hDevice: *s_HDRVR__, dwMsg: ulong, dwUser: uint64, dwParam1: uint64, dwParam2: uint64) -> int
export import def #extern sndOpenSound(EventName: *ushort, AppName: *ushort, Flags: int, FileHandle: **) -> long
export import def #extern mmDrvInstall(hDriver: *s_HDRVR__, wszDrvEntry: *ushort, drvMessage: def (ulong, ulong, uint64, uint64, uint64) -> (ulong), wFlags: uint) -> uint
export import def #extern #dllimport mmioStringToFOURCCA(sz: *char, uFlags: uint) -> ulong
export import def #extern #dllimport mmioStringToFOURCCW(sz: *ushort, uFlags: uint) -> ulong
export import def #extern #dllimport mmioInstallIOProcA(fccIOProc: ulong, pIOProc: def (*char, uint, int64, int64) -> (int64), dwFlags: ulong) -> def (*char, uint, int64, int64) -> (int64)
export import def #extern #dllimport mmioInstallIOProcW(fccIOProc: ulong, pIOProc: def (*char, uint, int64, int64) -> (int64), dwFlags: ulong) -> def (*char, uint, int64, int64) -> (int64)
export import def #extern #dllimport mmioOpenA(pszFileName: *char, pmmioinfo: *s__MMIOINFO, fdwOpen: ulong) -> *s_HMMIO__
export import def #extern #dllimport mmioOpenW(pszFileName: *ushort, pmmioinfo: *s__MMIOINFO, fdwOpen: ulong) -> *s_HMMIO__
export import def #extern #dllimport mmioRenameA(pszFileName: *char, pszNewFileName: *char, pmmioinfo: *s__MMIOINFO, fdwRename: ulong) -> uint
export import def #extern #dllimport mmioRenameW(pszFileName: *ushort, pszNewFileName: *ushort, pmmioinfo: *s__MMIOINFO, fdwRename: ulong) -> uint
export import def #extern #dllimport mmioClose(hmmio: *s_HMMIO__, fuClose: uint) -> uint
export import def #extern #dllimport mmioRead(hmmio: *s_HMMIO__, pch: *char, cch: long) -> long
export import def #extern #dllimport mmioWrite(hmmio: *s_HMMIO__, pch: *char, cch: long) -> long
export import def #extern #dllimport mmioSeek(hmmio: *s_HMMIO__, lOffset: long, iOrigin: int) -> long
export import def #extern #dllimport mmioGetInfo(hmmio: *s_HMMIO__, pmmioinfo: *s__MMIOINFO, fuInfo: uint) -> uint
export import def #extern #dllimport mmioSetInfo(hmmio: *s_HMMIO__, pmmioinfo: *s__MMIOINFO, fuInfo: uint) -> uint
export import def #extern #dllimport mmioSetBuffer(hmmio: *s_HMMIO__, pchBuffer: *char, cchBuffer: long, fuBuffer: uint) -> uint
export import def #extern #dllimport mmioFlush(hmmio: *s_HMMIO__, fuFlush: uint) -> uint
export import def #extern #dllimport mmioAdvance(hmmio: *s_HMMIO__, pmmioinfo: *s__MMIOINFO, fuAdvance: uint) -> uint
export import def #extern #dllimport mmioSendMessage(hmmio: *s_HMMIO__, uMsg: uint, lParam1: int64, lParam2: int64) -> int64
export import def #extern #dllimport mmioDescend(hmmio: *s_HMMIO__, pmmcki: *s__MMCKINFO, pmmckiParent: *s__MMCKINFO, fuDescend: uint) -> uint
export import def #extern #dllimport mmioAscend(hmmio: *s_HMMIO__, pmmcki: *s__MMCKINFO, fuAscend: uint) -> uint
export import def #extern #dllimport mmioCreateChunk(hmmio: *s_HMMIO__, pmmcki: *s__MMCKINFO, fuCreate: uint) -> uint
export import def #extern #dllimport timeSetEvent(uDelay: uint, uResolution: uint, fptc: def (uint, uint, uint64, uint64, uint64) -> (), dwUser: uint64, fuEvent: uint) -> uint
export import def #extern #dllimport timeKillEvent(uTimerID: uint) -> uint
export import def #extern #dllimport sndPlaySoundA(pszSound: *char, fuSound: uint) -> int
export import def #extern #dllimport sndPlaySoundW(pszSound: *ushort, fuSound: uint) -> int
export import def #extern #dllimport PlaySoundA(pszSound: *char, hmod: *s_HINSTANCE__, fdwSound: ulong) -> int
export import def #extern #dllimport PlaySoundW(pszSound: *ushort, hmod: *s_HINSTANCE__, fdwSound: ulong) -> int
export import def #extern #dllimport waveOutGetNumDevs() -> uint
export import def #extern #dllimport waveOutGetDevCapsA(uDeviceID: uint64, pwoc: *s_tagWAVEOUTCAPSA, cbwoc: uint) -> uint
export import def #extern #dllimport waveOutGetDevCapsW(uDeviceID: uint64, pwoc: *s_tagWAVEOUTCAPSW, cbwoc: uint) -> uint
export import def #extern #dllimport waveOutGetVolume(hwo: *s_HWAVEOUT__, pdwVolume: *ulong) -> uint
export import def #extern #dllimport waveOutSetVolume(hwo: *s_HWAVEOUT__, dwVolume: ulong) -> uint
export import def #extern #dllimport waveOutGetErrorTextA(mmrError: uint, pszText: *char, cchText: uint) -> uint
export import def #extern #dllimport waveOutGetErrorTextW(mmrError: uint, pszText: *ushort, cchText: uint) -> uint
export import def #extern #dllimport waveOutOpen(phwo: **s_HWAVEOUT__, uDeviceID: uint, pwfx: *s_tWAVEFORMATEX, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport waveOutClose(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutPrepareHeader(hwo: *s_HWAVEOUT__, pwh: *s_wavehdr_tag, cbwh: uint) -> uint
export import def #extern #dllimport waveOutUnprepareHeader(hwo: *s_HWAVEOUT__, pwh: *s_wavehdr_tag, cbwh: uint) -> uint
export import def #extern #dllimport waveOutWrite(hwo: *s_HWAVEOUT__, pwh: *s_wavehdr_tag, cbwh: uint) -> uint
export import def #extern #dllimport waveOutPause(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutRestart(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutReset(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutBreakLoop(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutGetPosition(hwo: *s_HWAVEOUT__, pmmt: *s_mmtime_tag, cbmmt: uint) -> uint
export import def #extern #dllimport waveOutGetPitch(hwo: *s_HWAVEOUT__, pdwPitch: *ulong) -> uint
export import def #extern #dllimport waveOutSetPitch(hwo: *s_HWAVEOUT__, dwPitch: ulong) -> uint
export import def #extern #dllimport waveOutGetPlaybackRate(hwo: *s_HWAVEOUT__, pdwRate: *ulong) -> uint
export import def #extern #dllimport waveOutSetPlaybackRate(hwo: *s_HWAVEOUT__, dwRate: ulong) -> uint
export import def #extern #dllimport waveOutGetID(hwo: *s_HWAVEOUT__, puDeviceID: *uint) -> uint
export import def #extern #dllimport waveOutMessage(hwo: *s_HWAVEOUT__, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport waveInGetNumDevs() -> uint
export import def #extern #dllimport waveInGetDevCapsA(uDeviceID: uint64, pwic: *s_tagWAVEINCAPSA, cbwic: uint) -> uint
export import def #extern #dllimport waveInGetDevCapsW(uDeviceID: uint64, pwic: *s_tagWAVEINCAPSW, cbwic: uint) -> uint
export import def #extern #dllimport waveInGetErrorTextA(mmrError: uint, pszText: *char, cchText: uint) -> uint
export import def #extern #dllimport waveInGetErrorTextW(mmrError: uint, pszText: *ushort, cchText: uint) -> uint
export import def #extern #dllimport waveInOpen(phwi: **s_HWAVEIN__, uDeviceID: uint, pwfx: *s_tWAVEFORMATEX, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport waveInClose(hwi: *s_HWAVEIN__) -> uint
export import def #extern #dllimport waveInPrepareHeader(hwi: *s_HWAVEIN__, pwh: *s_wavehdr_tag, cbwh: uint) -> uint
export import def #extern #dllimport waveInUnprepareHeader(hwi: *s_HWAVEIN__, pwh: *s_wavehdr_tag, cbwh: uint) -> uint
export import def #extern #dllimport waveInAddBuffer(hwi: *s_HWAVEIN__, pwh: *s_wavehdr_tag, cbwh: uint) -> uint
export import def #extern #dllimport waveInStart(hwi: *s_HWAVEIN__) -> uint
export import def #extern #dllimport waveInStop(hwi: *s_HWAVEIN__) -> uint
export import def #extern #dllimport waveInReset(hwi: *s_HWAVEIN__) -> uint
export import def #extern #dllimport waveInGetPosition(hwi: *s_HWAVEIN__, pmmt: *s_mmtime_tag, cbmmt: uint) -> uint
export import def #extern #dllimport waveInGetID(hwi: *s_HWAVEIN__, puDeviceID: *uint) -> uint
export import def #extern #dllimport waveInMessage(hwi: *s_HWAVEIN__, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport midiOutGetNumDevs() -> uint
export import def #extern #dllimport midiStreamOpen(phms: **s_HMIDISTRM__, puDeviceID: *uint, cMidi: ulong, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport midiStreamClose(hms: *s_HMIDISTRM__) -> uint
export import def #extern #dllimport midiStreamProperty(hms: *s_HMIDISTRM__, lppropdata: *uint8, dwProperty: ulong) -> uint
export import def #extern #dllimport midiStreamPosition(hms: *s_HMIDISTRM__, lpmmt: *s_mmtime_tag, cbmmt: uint) -> uint
export import def #extern #dllimport midiStreamOut(hms: *s_HMIDISTRM__, pmh: *s_midihdr_tag, cbmh: uint) -> uint
export import def #extern #dllimport midiStreamPause(hms: *s_HMIDISTRM__) -> uint
export import def #extern #dllimport midiStreamRestart(hms: *s_HMIDISTRM__) -> uint
export import def #extern #dllimport midiStreamStop(hms: *s_HMIDISTRM__) -> uint
export import def #extern #dllimport midiConnect(hmi: *s_HMIDI__, hmo: *s_HMIDIOUT__, pReserved: *) -> uint
export import def #extern #dllimport midiDisconnect(hmi: *s_HMIDI__, hmo: *s_HMIDIOUT__, pReserved: *) -> uint
export import def #extern #dllimport midiOutGetDevCapsA(uDeviceID: uint64, pmoc: *s_tagMIDIOUTCAPSA, cbmoc: uint) -> uint
export import def #extern #dllimport midiOutGetDevCapsW(uDeviceID: uint64, pmoc: *s_tagMIDIOUTCAPSW, cbmoc: uint) -> uint
export import def #extern #dllimport midiOutGetVolume(hmo: *s_HMIDIOUT__, pdwVolume: *ulong) -> uint
export import def #extern #dllimport midiOutSetVolume(hmo: *s_HMIDIOUT__, dwVolume: ulong) -> uint
export import def #extern #dllimport midiOutGetErrorTextA(mmrError: uint, pszText: *char, cchText: uint) -> uint
export import def #extern #dllimport midiOutGetErrorTextW(mmrError: uint, pszText: *ushort, cchText: uint) -> uint
export import def #extern #dllimport midiOutOpen(phmo: **s_HMIDIOUT__, uDeviceID: uint, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport midiOutClose(hmo: *s_HMIDIOUT__) -> uint
export import def #extern #dllimport midiOutPrepareHeader(hmo: *s_HMIDIOUT__, pmh: *s_midihdr_tag, cbmh: uint) -> uint
export import def #extern #dllimport midiOutUnprepareHeader(hmo: *s_HMIDIOUT__, pmh: *s_midihdr_tag, cbmh: uint) -> uint
export import def #extern #dllimport midiOutShortMsg(hmo: *s_HMIDIOUT__, dwMsg: ulong) -> uint
export import def #extern #dllimport midiOutLongMsg(hmo: *s_HMIDIOUT__, pmh: *s_midihdr_tag, cbmh: uint) -> uint
export import def #extern #dllimport midiOutReset(hmo: *s_HMIDIOUT__) -> uint
export import def #extern #dllimport midiOutCachePatches(hmo: *s_HMIDIOUT__, uBank: uint, pwpa: *ushort, fuCache: uint) -> uint
export import def #extern #dllimport midiOutCacheDrumPatches(hmo: *s_HMIDIOUT__, uPatch: uint, pwkya: *ushort, fuCache: uint) -> uint
export import def #extern #dllimport midiOutGetID(hmo: *s_HMIDIOUT__, puDeviceID: *uint) -> uint
export import def #extern #dllimport midiOutMessage(hmo: *s_HMIDIOUT__, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport midiInGetNumDevs() -> uint
export import def #extern #dllimport midiInGetDevCapsA(uDeviceID: uint64, pmic: *s_tagMIDIINCAPSA, cbmic: uint) -> uint
export import def #extern #dllimport midiInGetDevCapsW(uDeviceID: uint64, pmic: *s_tagMIDIINCAPSW, cbmic: uint) -> uint
export import def #extern #dllimport midiInGetErrorTextA(mmrError: uint, pszText: *char, cchText: uint) -> uint
export import def #extern #dllimport midiInGetErrorTextW(mmrError: uint, pszText: *ushort, cchText: uint) -> uint
export import def #extern #dllimport midiInOpen(phmi: **s_HMIDIIN__, uDeviceID: uint, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport midiInClose(hmi: *s_HMIDIIN__) -> uint
export import def #extern #dllimport midiInPrepareHeader(hmi: *s_HMIDIIN__, pmh: *s_midihdr_tag, cbmh: uint) -> uint
export import def #extern #dllimport midiInUnprepareHeader(hmi: *s_HMIDIIN__, pmh: *s_midihdr_tag, cbmh: uint) -> uint
export import def #extern #dllimport midiInAddBuffer(hmi: *s_HMIDIIN__, pmh: *s_midihdr_tag, cbmh: uint) -> uint
export import def #extern #dllimport midiInStart(hmi: *s_HMIDIIN__) -> uint
export import def #extern #dllimport midiInStop(hmi: *s_HMIDIIN__) -> uint
export import def #extern #dllimport midiInReset(hmi: *s_HMIDIIN__) -> uint
export import def #extern #dllimport midiInGetID(hmi: *s_HMIDIIN__, puDeviceID: *uint) -> uint
export import def #extern #dllimport midiInMessage(hmi: *s_HMIDIIN__, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport auxGetNumDevs() -> uint
export import def #extern #dllimport auxGetDevCapsA(uDeviceID: uint64, pac: *s_tagAUXCAPSA, cbac: uint) -> uint
export import def #extern #dllimport auxGetDevCapsW(uDeviceID: uint64, pac: *s_tagAUXCAPSW, cbac: uint) -> uint
export import def #extern #dllimport auxSetVolume(uDeviceID: uint, dwVolume: ulong) -> uint
export import def #extern #dllimport auxGetVolume(uDeviceID: uint, pdwVolume: *ulong) -> uint
export import def #extern #dllimport auxOutMessage(uDeviceID: uint, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport mixerGetNumDevs() -> uint
export import def #extern #dllimport mixerGetDevCapsA(uMxId: uint64, pmxcaps: *s_tagMIXERCAPSA, cbmxcaps: uint) -> uint
export import def #extern #dllimport mixerGetDevCapsW(uMxId: uint64, pmxcaps: *s_tagMIXERCAPSW, cbmxcaps: uint) -> uint
export import def #extern #dllimport mixerOpen(phmx: **s_HMIXER__, uMxId: uint, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport mixerClose(hmx: *s_HMIXER__) -> uint
export import def #extern #dllimport mixerMessage(hmx: *s_HMIXER__, uMsg: uint, dwParam1: uint64, dwParam2: uint64) -> ulong
export import def #extern #dllimport mixerGetLineInfoA(hmxobj: *s_HMIXEROBJ__, pmxl: *s_tagMIXERLINEA, fdwInfo: ulong) -> uint
export import def #extern #dllimport mixerGetLineInfoW(hmxobj: *s_HMIXEROBJ__, pmxl: *s_tagMIXERLINEW, fdwInfo: ulong) -> uint
export import def #extern #dllimport mixerGetID(hmxobj: *s_HMIXEROBJ__, puMxId: *uint, fdwId: ulong) -> uint
export import def #extern #dllimport mixerGetLineControlsA(hmxobj: *s_HMIXEROBJ__, pmxlc: *s_tagMIXERLINECONTROLSA, fdwControls: ulong) -> uint
export import def #extern #dllimport mixerGetLineControlsW(hmxobj: *s_HMIXEROBJ__, pmxlc: *s_tagMIXERLINECONTROLSW, fdwControls: ulong) -> uint
export import def #extern #dllimport mixerGetControlDetailsA(hmxobj: *s_HMIXEROBJ__, pmxcd: *s_tMIXERCONTROLDETAILS, fdwDetails: ulong) -> uint
export import def #extern #dllimport mixerGetControlDetailsW(hmxobj: *s_HMIXEROBJ__, pmxcd: *s_tMIXERCONTROLDETAILS, fdwDetails: ulong) -> uint
export import def #extern #dllimport mixerSetControlDetails(hmxobj: *s_HMIXEROBJ__, pmxcd: *s_tMIXERCONTROLDETAILS, fdwDetails: ulong) -> uint
export import def #extern #dllimport timeGetSystemTime(pmmt: *s_mmtime_tag, cbmmt: uint) -> uint
export import def #extern #dllimport timeGetTime() -> ulong
export import def #extern #dllimport timeGetDevCaps(ptc: *s_timecaps_tag, cbtc: uint) -> uint
export import def #extern #dllimport timeBeginPeriod(uPeriod: uint) -> uint
export import def #extern #dllimport timeEndPeriod(uPeriod: uint) -> uint
export import def #extern #dllimport joyGetPosEx(uJoyID: uint, pji: *s_joyinfoex_tag) -> uint
export import def #extern #dllimport joyGetNumDevs() -> uint
export import def #extern #dllimport joyGetDevCapsA(uJoyID: uint64, pjc: *s_tagJOYCAPSA, cbjc: uint) -> uint
export import def #extern #dllimport joyGetDevCapsW(uJoyID: uint64, pjc: *s_tagJOYCAPSW, cbjc: uint) -> uint
export import def #extern #dllimport joyGetPos(uJoyID: uint, pji: *s_joyinfo_tag) -> uint
export import def #extern #dllimport joyGetThreshold(uJoyID: uint, puThreshold: *uint) -> uint
export import def #extern #dllimport joyReleaseCapture(uJoyID: uint) -> uint
export import def #extern #dllimport joySetCapture(hwnd: *s_HWND__, uJoyID: uint, uPeriod: uint, fChanged: int) -> uint
export import def #extern #dllimport joySetThreshold(uJoyID: uint, uThreshold: uint) -> uint
export import def #extern #dllimport joyConfigChanged(dwFlags: ulong) -> uint
export import def #extern Netbios(pncb: *s__NCB) -> uint8
export import def #extern #dllimport RpcBindingCopy(SourceBinding: *, DestinationBinding: **) -> long
export import def #extern #dllimport RpcBindingFree(Binding: **) -> long
export import def #extern #dllimport RpcBindingSetOption(hBinding: *, option: ulong, optionValue: uint64) -> long
export import def #extern #dllimport RpcBindingInqOption(hBinding: *, option: ulong, pOptionValue: *uint64) -> long
export import def #extern #dllimport RpcBindingFromStringBindingA(StringBinding: *uint8, Binding: **) -> long
export import def #extern #dllimport RpcBindingFromStringBindingW(StringBinding: *ushort, Binding: **) -> long
export import def #extern #dllimport RpcSsGetContextBinding(ContextHandle: *, Binding: **) -> long
export import def #extern #dllimport RpcBindingInqMaxCalls(Binding: *, MaxCalls: *uint) -> long
export import def #extern #dllimport RpcBindingInqObject(Binding: *, ObjectUuid: *s__GUID) -> long
export import def #extern #dllimport RpcBindingReset(Binding: *) -> long
export import def #extern #dllimport RpcBindingSetObject(Binding: *, ObjectUuid: *s__GUID) -> long
export import def #extern #dllimport RpcMgmtInqDefaultProtectLevel(AuthnSvc: ulong, AuthnLevel: *ulong) -> long
export import def #extern #dllimport RpcBindingToStringBindingA(Binding: *, StringBinding: **uint8) -> long
export import def #extern #dllimport RpcBindingToStringBindingW(Binding: *, StringBinding: **ushort) -> long
export import def #extern #dllimport RpcBindingVectorFree(BindingVector: **s__RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport RpcStringBindingComposeA(ObjUuid: *uint8, ProtSeq: *uint8, NetworkAddr: *uint8, Endpoint: *uint8, Options: *uint8, StringBinding: **uint8) -> long
export import def #extern #dllimport RpcStringBindingComposeW(ObjUuid: *ushort, ProtSeq: *ushort, NetworkAddr: *ushort, Endpoint: *ushort, Options: *ushort, StringBinding: **ushort) -> long
export import def #extern #dllimport RpcStringBindingParseA(StringBinding: *uint8, ObjUuid: **uint8, Protseq: **uint8, NetworkAddr: **uint8, Endpoint: **uint8, NetworkOptions: **uint8) -> long
export import def #extern #dllimport RpcStringBindingParseW(StringBinding: *ushort, ObjUuid: **ushort, Protseq: **ushort, NetworkAddr: **ushort, Endpoint: **ushort, NetworkOptions: **ushort) -> long
export import def #extern #dllimport RpcStringFreeA(String: **uint8) -> long
export import def #extern #dllimport RpcStringFreeW(String: **ushort) -> long
export import def #extern #dllimport RpcIfInqId(RpcIfHandle: *, RpcIfId: *s__RPC_IF_ID) -> long
export import def #extern #dllimport RpcNetworkIsProtseqValidA(Protseq: *uint8) -> long
export import def #extern #dllimport RpcNetworkIsProtseqValidW(Protseq: *ushort) -> long
export import def #extern #dllimport RpcMgmtInqComTimeout(Binding: *, Timeout: *uint) -> long
export import def #extern #dllimport RpcMgmtSetComTimeout(Binding: *, Timeout: uint) -> long
export import def #extern #dllimport RpcMgmtSetCancelTimeout(Timeout: long) -> long
export import def #extern #dllimport RpcNetworkInqProtseqsA(ProtseqVector: **s__RPC_PROTSEQ_VECTORA) -> long
export import def #extern #dllimport RpcNetworkInqProtseqsW(ProtseqVector: **s__RPC_PROTSEQ_VECTORW) -> long
export import def #extern #dllimport RpcObjectInqType(ObjUuid: *s__GUID, TypeUuid: *s__GUID) -> long
export import def #extern #dllimport RpcObjectSetInqFn(InquiryFn: def (*s__GUID, *s__GUID, *long) -> ()) -> long
export import def #extern #dllimport RpcObjectSetType(ObjUuid: *s__GUID, TypeUuid: *s__GUID) -> long
export import def #extern #dllimport RpcProtseqVectorFreeA(ProtseqVector: **s__RPC_PROTSEQ_VECTORA) -> long
export import def #extern #dllimport RpcProtseqVectorFreeW(ProtseqVector: **s__RPC_PROTSEQ_VECTORW) -> long
export import def #extern #dllimport RpcServerInqBindings(BindingVector: **s__RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport RpcServerInqBindingsEx(SecurityDescriptor: *, BindingVector: **s__RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport RpcServerInqIf(IfSpec: *, MgrTypeUuid: *s__GUID, MgrEpv: **) -> long
export import def #extern #dllimport RpcServerListen(MinimumCallThreads: uint, MaxCalls: uint, DontWait: uint) -> long
export import def #extern #dllimport RpcServerRegisterIf(IfSpec: *, MgrTypeUuid: *s__GUID, MgrEpv: *) -> long
export import def #extern #dllimport RpcServerRegisterIfEx(IfSpec: *, MgrTypeUuid: *s__GUID, MgrEpv: *, Flags: uint, MaxCalls: uint, IfCallback: def (*, *) -> (long)) -> long
export import def #extern #dllimport RpcServerRegisterIf2(IfSpec: *, MgrTypeUuid: *s__GUID, MgrEpv: *, Flags: uint, MaxCalls: uint, MaxRpcSize: uint, IfCallbackFn: def (*, *) -> (long)) -> long
export import def #extern #dllimport RpcServerRegisterIf3(IfSpec: *, MgrTypeUuid: *s__GUID, MgrEpv: *, Flags: uint, MaxCalls: uint, MaxRpcSize: uint, IfCallback: def (*, *) -> (long), SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUnregisterIf(IfSpec: *, MgrTypeUuid: *s__GUID, WaitForCallsToComplete: uint) -> long
export import def #extern #dllimport RpcServerUnregisterIfEx(IfSpec: *, MgrTypeUuid: *s__GUID, RundownContextHandles: int) -> long
export import def #extern #dllimport RpcServerUseAllProtseqs(MaxCalls: uint, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseAllProtseqsEx(MaxCalls: uint, SecurityDescriptor: *, Policy: *s__RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseAllProtseqsIf(MaxCalls: uint, IfSpec: *, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseAllProtseqsIfEx(MaxCalls: uint, IfSpec: *, SecurityDescriptor: *, Policy: *s__RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqA(Protseq: *uint8, MaxCalls: uint, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqExA(Protseq: *uint8, MaxCalls: uint, SecurityDescriptor: *, Policy: *s__RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqW(Protseq: *ushort, MaxCalls: uint, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqExW(Protseq: *ushort, MaxCalls: uint, SecurityDescriptor: *, Policy: *s__RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqEpA(Protseq: *uint8, MaxCalls: uint, Endpoint: *uint8, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqEpExA(Protseq: *uint8, MaxCalls: uint, Endpoint: *uint8, SecurityDescriptor: *, Policy: *s__RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqEpW(Protseq: *ushort, MaxCalls: uint, Endpoint: *ushort, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqEpExW(Protseq: *ushort, MaxCalls: uint, Endpoint: *ushort, SecurityDescriptor: *, Policy: *s__RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqIfA(Protseq: *uint8, MaxCalls: uint, IfSpec: *, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqIfExA(Protseq: *uint8, MaxCalls: uint, IfSpec: *, SecurityDescriptor: *, Policy: *s__RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqIfW(Protseq: *ushort, MaxCalls: uint, IfSpec: *, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqIfExW(Protseq: *ushort, MaxCalls: uint, IfSpec: *, SecurityDescriptor: *, Policy: *s__RPC_POLICY) -> long
export import def #extern #dllimport RpcServerYield()
export import def #extern #dllimport RpcMgmtStatsVectorFree(StatsVector: **s_RPC_STATS_VECTOR) -> long
export import def #extern #dllimport RpcMgmtInqStats(Binding: *, Statistics: **s_RPC_STATS_VECTOR) -> long
export import def #extern #dllimport RpcMgmtIsServerListening(Binding: *) -> long
export import def #extern #dllimport RpcMgmtStopServerListening(Binding: *) -> long
export import def #extern #dllimport RpcMgmtWaitServerListen() -> long
export import def #extern #dllimport RpcMgmtSetServerStackSize(ThreadStackSize: ulong) -> long
export import def #extern #dllimport RpcSsDontSerializeContext()
export import def #extern #dllimport RpcMgmtEnableIdleCleanup() -> long
export import def #extern #dllimport RpcMgmtInqIfIds(Binding: *, IfIdVector: **s_RPC_IF_ID_VECTOR) -> long
export import def #extern #dllimport RpcIfIdVectorFree(IfIdVector: **s_RPC_IF_ID_VECTOR) -> long
export import def #extern #dllimport RpcMgmtInqServerPrincNameA(Binding: *, AuthnSvc: ulong, ServerPrincName: **uint8) -> long
export import def #extern #dllimport RpcMgmtInqServerPrincNameW(Binding: *, AuthnSvc: ulong, ServerPrincName: **ushort) -> long
export import def #extern #dllimport RpcServerInqDefaultPrincNameA(AuthnSvc: ulong, PrincName: **uint8) -> long
export import def #extern #dllimport RpcServerInqDefaultPrincNameW(AuthnSvc: ulong, PrincName: **ushort) -> long
export import def #extern #dllimport RpcEpResolveBinding(Binding: *, IfSpec: *) -> long
export import def #extern #dllimport RpcNsBindingInqEntryNameA(Binding: *, EntryNameSyntax: ulong, EntryName: **uint8) -> long
export import def #extern #dllimport RpcNsBindingInqEntryNameW(Binding: *, EntryNameSyntax: ulong, EntryName: **ushort) -> long
export import def #extern #dllimport RpcBindingCreateA(Template: *s__RPC_BINDING_HANDLE_TEMPLATE_V1_A, Security: *s__RPC_BINDING_HANDLE_SECURITY_V1_A, Options: *s__RPC_BINDING_HANDLE_OPTIONS_V1, Binding: **) -> long
export import def #extern #dllimport RpcBindingCreateW(Template: *s__RPC_BINDING_HANDLE_TEMPLATE_V1_W, Security: *s__RPC_BINDING_HANDLE_SECURITY_V1_W, Options: *s__RPC_BINDING_HANDLE_OPTIONS_V1, Binding: **) -> long
export import def #extern #dllimport RpcBindingGetTrainingContextHandle(Binding: *, ContextHandle: **) -> long
export import def #extern #dllimport RpcServerInqBindingHandle(Binding: **) -> long
export const RPCHTTP_RS_REDIRECT: int = 1
export const RPCHTTP_RS_ACCESS_1: int = 2
export const RPCHTTP_RS_SESSION: int = 3
export const RPCHTTP_RS_ACCESS_2: int = 4
export const RPCHTTP_RS_INTERFACE: int = 5
export import def #extern #dllimport RpcImpersonateClient(BindingHandle: *) -> long
export import def #extern #dllimport RpcImpersonateClient2(BindingHandle: *) -> long
export import def #extern #dllimport RpcRevertToSelfEx(BindingHandle: *) -> long
export import def #extern #dllimport RpcRevertToSelf() -> long
export import def #extern #dllimport RpcImpersonateClientContainer(BindingHandle: *) -> long
export import def #extern #dllimport RpcRevertContainerImpersonation() -> long
export import def #extern #dllimport RpcBindingInqAuthClientA(ClientBinding: *, Privs: **, ServerPrincName: **uint8, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthzSvc: *ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthClientW(ClientBinding: *, Privs: **, ServerPrincName: **ushort, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthzSvc: *ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthClientExA(ClientBinding: *, Privs: **, ServerPrincName: **uint8, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthzSvc: *ulong, Flags: ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthClientExW(ClientBinding: *, Privs: **, ServerPrincName: **ushort, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthzSvc: *ulong, Flags: ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthInfoA(Binding: *, ServerPrincName: **uint8, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthIdentity: **, AuthzSvc: *ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthInfoW(Binding: *, ServerPrincName: **ushort, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthIdentity: **, AuthzSvc: *ulong) -> long
export import def #extern #dllimport RpcBindingSetAuthInfoA(Binding: *, ServerPrincName: *uint8, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: *, AuthzSvc: ulong) -> long
export import def #extern #dllimport RpcBindingSetAuthInfoExA(Binding: *, ServerPrincName: *uint8, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: *, AuthzSvc: ulong, SecurityQos: *s__RPC_SECURITY_QOS) -> long
export import def #extern #dllimport RpcBindingSetAuthInfoW(Binding: *, ServerPrincName: *ushort, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: *, AuthzSvc: ulong) -> long
export import def #extern #dllimport RpcBindingSetAuthInfoExW(Binding: *, ServerPrincName: *ushort, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: *, AuthzSvc: ulong, SecurityQOS: *s__RPC_SECURITY_QOS) -> long
export import def #extern #dllimport RpcBindingInqAuthInfoExA(Binding: *, ServerPrincName: **uint8, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthIdentity: **, AuthzSvc: *ulong, RpcQosVersion: ulong, SecurityQOS: *s__RPC_SECURITY_QOS) -> long
export import def #extern #dllimport RpcBindingInqAuthInfoExW(Binding: *, ServerPrincName: **ushort, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthIdentity: **, AuthzSvc: *ulong, RpcQosVersion: ulong, SecurityQOS: *s__RPC_SECURITY_QOS) -> long
export import def #extern #dllimport RpcServerCompleteSecurityCallback(BindingHandle: *, Status: long) -> long
export import def #extern #dllimport RpcServerRegisterAuthInfoA(ServerPrincName: *uint8, AuthnSvc: ulong, GetKeyFn: def (*, *ushort, ulong, **, *long) -> (), Arg: *) -> long
export import def #extern #dllimport RpcServerRegisterAuthInfoW(ServerPrincName: *ushort, AuthnSvc: ulong, GetKeyFn: def (*, *ushort, ulong, **, *long) -> (), Arg: *) -> long
export import def #extern #dllimport RpcBindingServerFromClient(ClientBinding: *, ServerBinding: **) -> long
export import def #extern #dllimport RpcRaiseException(exception: long)
export import def #extern #dllimport RpcTestCancel() -> long
export import def #extern #dllimport RpcServerTestCancel(BindingHandle: *) -> long
export import def #extern #dllimport RpcCancelThread(Thread: *) -> long
export import def #extern #dllimport RpcCancelThreadEx(Thread: *, Timeout: long) -> long
export import def #extern #dllimport UuidCreate(Uuid: *s__GUID) -> long
export import def #extern #dllimport UuidCreateSequential(Uuid: *s__GUID) -> long
export import def #extern #dllimport UuidToStringA(Uuid: *s__GUID, StringUuid: **uint8) -> long
export import def #extern #dllimport UuidFromStringA(StringUuid: *uint8, Uuid: *s__GUID) -> long
export import def #extern #dllimport UuidToStringW(Uuid: *s__GUID, StringUuid: **ushort) -> long
export import def #extern #dllimport UuidFromStringW(StringUuid: *ushort, Uuid: *s__GUID) -> long
export import def #extern #dllimport UuidCompare(Uuid1: *s__GUID, Uuid2: *s__GUID, Status: *long) -> int
export import def #extern #dllimport UuidCreateNil(NilUuid: *s__GUID) -> long
export import def #extern #dllimport UuidEqual(Uuid1: *s__GUID, Uuid2: *s__GUID, Status: *long) -> int
export import def #extern #dllimport UuidHash(Uuid: *s__GUID, Status: *long) -> ushort
export import def #extern #dllimport UuidIsNil(Uuid: *s__GUID, Status: *long) -> int
export import def #extern #dllimport RpcEpRegisterNoReplaceA(IfSpec: *, BindingVector: *s__RPC_BINDING_VECTOR, UuidVector: *s__UUID_VECTOR, Annotation: *uint8) -> long
export import def #extern #dllimport RpcEpRegisterNoReplaceW(IfSpec: *, BindingVector: *s__RPC_BINDING_VECTOR, UuidVector: *s__UUID_VECTOR, Annotation: *ushort) -> long
export import def #extern #dllimport RpcEpRegisterA(IfSpec: *, BindingVector: *s__RPC_BINDING_VECTOR, UuidVector: *s__UUID_VECTOR, Annotation: *uint8) -> long
export import def #extern #dllimport RpcEpRegisterW(IfSpec: *, BindingVector: *s__RPC_BINDING_VECTOR, UuidVector: *s__UUID_VECTOR, Annotation: *ushort) -> long
export import def #extern #dllimport RpcEpUnregister(IfSpec: *, BindingVector: *s__RPC_BINDING_VECTOR, UuidVector: *s__UUID_VECTOR) -> long
export import def #extern #dllimport DceErrorInqTextA(RpcStatus: long, ErrorText: *uint8) -> long
export import def #extern #dllimport DceErrorInqTextW(RpcStatus: long, ErrorText: *ushort) -> long
export import def #extern #dllimport RpcMgmtEpEltInqBegin(EpBinding: *, InquiryType: ulong, IfId: *s__RPC_IF_ID, VersOption: ulong, ObjectUuid: *s__GUID, InquiryContext: ***) -> long
export import def #extern #dllimport RpcMgmtEpEltInqDone(InquiryContext: ***) -> long
export import def #extern #dllimport RpcMgmtEpEltInqNextA(InquiryContext: **, IfId: *s__RPC_IF_ID, Binding: **, ObjectUuid: *s__GUID, Annotation: **uint8) -> long
export import def #extern #dllimport RpcMgmtEpEltInqNextW(InquiryContext: **, IfId: *s__RPC_IF_ID, Binding: **, ObjectUuid: *s__GUID, Annotation: **ushort) -> long
export import def #extern #dllimport RpcMgmtEpUnregister(EpBinding: *, IfId: *s__RPC_IF_ID, Binding: *, ObjectUuid: *s__GUID) -> long
export import def #extern #dllimport RpcMgmtSetAuthorizationFn(AuthorizationFn: def (*, ulong, *long) -> (int)) -> long
export import def #extern #dllimport RpcExceptionFilter(ExceptionCode: ulong) -> int
export import def #extern #dllimport RpcServerInterfaceGroupCreateW(Interfaces: *s_RPC_INTERFACE_TEMPLATEW, NumIfs: ulong, Endpoints: *s_RPC_ENDPOINT_TEMPLATEW, NumEndpoints: ulong, IdlePeriod: ulong, IdleCallbackFn: def (*, *, ulong) -> (), IdleCallbackContext: *, IfGroup: **) -> long
export import def #extern #dllimport RpcServerInterfaceGroupCreateA(Interfaces: *s_RPC_INTERFACE_TEMPLATEA, NumIfs: ulong, Endpoints: *s_RPC_ENDPOINT_TEMPLATEA, NumEndpoints: ulong, IdlePeriod: ulong, IdleCallbackFn: def (*, *, ulong) -> (), IdleCallbackContext: *, IfGroup: **) -> long
export import def #extern #dllimport RpcServerInterfaceGroupClose(IfGroup: *) -> long
export import def #extern #dllimport RpcServerInterfaceGroupActivate(IfGroup: *) -> long
export import def #extern #dllimport RpcServerInterfaceGroupDeactivate(IfGroup: *, ForceDeactivation: ulong) -> long
export import def #extern #dllimport RpcServerInterfaceGroupInqBindings(IfGroup: *, BindingVector: **s__RPC_BINDING_VECTOR) -> long
export const PROTOCOL_NOT_LOADED: int = 1
export const PROTOCOL_LOADED: int = 2
export const PROTOCOL_ADDRESS_CHANGE: int = 3
export import def #extern #dllimport I_RpcNegotiateTransferSyntax(Message: *s__RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcGetBuffer(Message: *s__RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcGetBufferWithObject(Message: *s__RPC_MESSAGE, ObjectUuid: *s__GUID) -> long
export import def #extern #dllimport I_RpcSendReceive(Message: *s__RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcFreeBuffer(Message: *s__RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcSend(Message: *s__RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcReceive(Message: *s__RPC_MESSAGE, Size: uint) -> long
export import def #extern #dllimport I_RpcFreePipeBuffer(Message: *s__RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcReallocPipeBuffer(Message: *s__RPC_MESSAGE, NewSize: uint) -> long
export import def #extern #dllimport I_RpcRequestMutex(Mutex: **)
export import def #extern #dllimport I_RpcClearMutex(Mutex: *)
export import def #extern #dllimport I_RpcDeleteMutex(Mutex: *)
export import def #extern #dllimport I_RpcAllocate(Size: uint) -> *
export import def #extern #dllimport I_RpcFree(Object: *)
export import def #extern #dllimport I_RpcFreeSystemHandleCollection(CallObj: *, FreeFlags: ulong) -> ulong
export import def #extern #dllimport I_RpcSetSystemHandle(Handle: *, Type: uint8, AccessMask: ulong, CallObj: *, HandleIndex: *ulong) -> long
export import def #extern #dllimport I_RpcGetSystemHandle(pMemory: *uint8, Type: uint8, AccessMask: ulong, HandleIndex: ulong, CallObj: *) -> long
export import def #extern #dllimport I_RpcFreeSystemHandle(Type: uint8, Handle: *)
export import def #extern #dllimport I_RpcPauseExecution(Milliseconds: ulong)
export import def #extern #dllimport I_RpcGetExtendedError() -> long
export const MarshalDirectionMarshal: int = 0
export const MarshalDirectionUnmarshal: int = 1
export import def #extern #dllimport I_RpcSystemHandleTypeSpecificWork(Handle: *, ActualType: uint8, IdlType: uint8, MarshalDirection: e__LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION) -> long
export import def #extern #dllimport I_RpcMonitorAssociation(Handle: *, RundownRoutine: def (*) -> (), Context: *) -> long
export import def #extern #dllimport I_RpcStopMonitorAssociation(Handle: *) -> long
export import def #extern #dllimport I_RpcGetCurrentCallHandle() -> *
export import def #extern #dllimport I_RpcGetAssociationContext(BindingHandle: *, AssociationContext: **) -> long
export import def #extern #dllimport I_RpcGetServerContextList(BindingHandle: *) -> *
export import def #extern #dllimport I_RpcSetServerContextList(BindingHandle: *, ServerContextList: *)
export import def #extern #dllimport I_RpcNsInterfaceExported(EntryNameSyntax: ulong, EntryName: *ushort, RpcInterfaceInformation: *s__RPC_SERVER_INTERFACE) -> long
export import def #extern #dllimport I_RpcNsInterfaceUnexported(EntryNameSyntax: ulong, EntryName: *ushort, RpcInterfaceInformation: *s__RPC_SERVER_INTERFACE) -> long
export import def #extern #dllimport I_RpcBindingToStaticStringBindingW(Binding: *, StringBinding: **ushort) -> long
export import def #extern #dllimport I_RpcBindingInqSecurityContext(Binding: *, SecurityContextHandle: **) -> long
export import def #extern #dllimport I_RpcBindingInqSecurityContextKeyInfo(Binding: *, KeyInfo: *) -> long
export import def #extern #dllimport I_RpcBindingInqWireIdForSnego(Binding: *, WireId: *uint8) -> long
export import def #extern #dllimport I_RpcBindingInqMarshalledTargetInfo(Binding: *, MarshalledTargetInfoSize: *ulong, MarshalledTargetInfo: **uint8) -> long
export import def #extern #dllimport I_RpcBindingInqLocalClientPID(Binding: *, Pid: *ulong) -> long
export import def #extern #dllimport I_RpcBindingHandleToAsyncHandle(Binding: *, AsyncHandle: **) -> long
export import def #extern #dllimport I_RpcNsBindingSetEntryNameW(Binding: *, EntryNameSyntax: ulong, EntryName: *ushort) -> long
export import def #extern #dllimport I_RpcNsBindingSetEntryNameA(Binding: *, EntryNameSyntax: ulong, EntryName: *uint8) -> long
export import def #extern #dllimport I_RpcServerUseProtseqEp2A(NetworkAddress: *uint8, Protseq: *uint8, MaxCalls: uint, Endpoint: *uint8, SecurityDescriptor: *, Policy: *) -> long
export import def #extern #dllimport I_RpcServerUseProtseqEp2W(NetworkAddress: *ushort, Protseq: *ushort, MaxCalls: uint, Endpoint: *ushort, SecurityDescriptor: *, Policy: *) -> long
export import def #extern #dllimport I_RpcServerUseProtseq2W(NetworkAddress: *ushort, Protseq: *ushort, MaxCalls: uint, SecurityDescriptor: *, Policy: *) -> long
export import def #extern #dllimport I_RpcServerUseProtseq2A(NetworkAddress: *uint8, Protseq: *uint8, MaxCalls: uint, SecurityDescriptor: *, Policy: *) -> long
export import def #extern #dllimport I_RpcServerStartService(Protseq: *ushort, Endpoint: *ushort, IfSpec: *) -> long
export import def #extern #dllimport I_RpcBindingInqDynamicEndpointW(Binding: *, DynamicEndpoint: **ushort) -> long
export import def #extern #dllimport I_RpcBindingInqDynamicEndpointA(Binding: *, DynamicEndpoint: **uint8) -> long
export import def #extern #dllimport I_RpcServerCheckClientRestriction(Context: *) -> long
export import def #extern #dllimport I_RpcBindingInqTransportType(Binding: *, Type: *uint) -> long
export import def #extern #dllimport I_RpcIfInqTransferSyntaxes(RpcIfHandle: *, TransferSyntaxes: *s__RPC_TRANSFER_SYNTAX, TransferSyntaxSize: uint, TransferSyntaxCount: *uint) -> long
export import def #extern #dllimport I_UuidCreate(Uuid: *s__GUID) -> long
export import def #extern #dllimport I_RpcUninitializeNdrOle()
export import def #extern #dllimport I_RpcBindingCopy(SourceBinding: *, DestinationBinding: **) -> long
export import def #extern #dllimport I_RpcBindingIsClientLocal(BindingHandle: *, ClientLocalFlag: *uint) -> long
export import def #extern #dllimport I_RpcBindingInqConnId(Binding: *, ConnId: **, pfFirstCall: *int) -> long
export import def #extern #dllimport I_RpcBindingCreateNP(ServerName: *ushort, ServiceName: *ushort, NetworkOptions: *ushort, Binding: **) -> long
export import def #extern #dllimport I_RpcSsDontSerializeContext()
export import def #extern #dllimport I_RpcLaunchDatagramReceiveThread(pAddress: *) -> long
export import def #extern #dllimport I_RpcServerRegisterForwardFunction(pForwardFunction: def (*s__GUID, *s__RPC_VERSION, *s__GUID, *uint8, **) -> (long)) -> long
export import def #extern I_RpcServerInqAddressChangeFn() -> def (*) -> ()
export import def #extern I_RpcServerSetAddressChangeFn(pAddressChangeFn: def (*) -> ()) -> long
export import def #extern #dllimport I_RpcServerInqLocalConnAddress(Binding: *, Buffer: *, BufferSize: *ulong, AddressFormat: *ulong) -> long
export import def #extern #dllimport I_RpcServerInqRemoteConnAddress(Binding: *, Buffer: *, BufferSize: *ulong, AddressFormat: *ulong) -> long
export import def #extern #dllimport I_RpcSessionStrictContextHandle()
export import def #extern #dllimport I_RpcTurnOnEEInfoPropagation() -> long
export import def #extern #dllimport I_RpcConnectionInqSockBuffSize(RecvBuffSize: *ulong, SendBuffSize: *ulong) -> long
export import def #extern #dllimport I_RpcConnectionSetSockBuffSize(RecvBuffSize: ulong, SendBuffSize: ulong) -> long
export import def #extern #dllimport I_RpcServerStartListening(hWnd: *) -> long
export import def #extern #dllimport I_RpcServerStopListening() -> long
export import def #extern #dllimport I_RpcBindingSetAsync(Binding: *, BlockingFn: def (*, *, *) -> (long), ServerTid: ulong) -> long
export import def #extern #dllimport I_RpcSetThreadParams(fClientFree: int, Context: *, hWndClient: *) -> long
export import def #extern #dllimport I_RpcWindowProc(hWnd: *, Message: uint, wParam: uint, lParam: ulong) -> uint
export import def #extern #dllimport I_RpcServerUnregisterEndpointA(Protseq: *uint8, Endpoint: *uint8) -> long
export import def #extern #dllimport I_RpcServerUnregisterEndpointW(Protseq: *ushort, Endpoint: *ushort) -> long
export import def #extern #dllimport I_RpcServerInqTransportType(Type: *uint) -> long
export import def #extern #dllimport I_RpcMapWin32Status(Status: long) -> long
export const RpcCurrentUniqueUser: int = 1
export const RpcBackEndConnectionAttempts: int = 2
export const RpcBackEndConnectionFailed: int = 3
export const RpcRequestsPerSecond: int = 4
export const RpcIncomingConnections: int = 5
export const RpcIncomingBandwidth: int = 6
export const RpcOutgoingBandwidth: int = 7
export const RpcAttemptedLbsDecisions: int = 8
export const RpcFailedLbsDecisions: int = 9
export const RpcAttemptedLbsMessages: int = 10
export const RpcFailedLbsMessages: int = 11
export const RpcLastCounter: int = 12
export import def #extern #dllimport I_RpcProxyNewConnection(ConnectionType: ulong, ServerAddress: *ushort, ServerPort: *ushort, MinConnTimeout: *ushort, ConnectionParameter: *, CallOutState: *s__RDR_CALLOUT_STATE, ProxyCallbackInterface: *s_tagI_RpcProxyCallbackInterface) -> long
export import def #extern #dllimport I_RpcReplyToClientWithStatus(ConnectionParameter: *, RpcStatus: long) -> long
export import def #extern #dllimport I_RpcRecordCalloutFailure(RpcStatus: long, CallOutState: *s__RDR_CALLOUT_STATE, DllName: *ushort)
export import def #extern #dllimport I_RpcMgmtEnableDedicatedThreadPool() -> long
export import def #extern #dllimport I_RpcGetDefaultSD(ppSecurityDescriptor: **) -> long
export import def #extern #dllimport I_RpcOpenClientProcess(Binding: *, DesiredAccess: ulong, ClientProcess: **) -> long
export import def #extern #dllimport I_RpcBindingIsServerLocal(Binding: *, ServerLocalFlag: *uint) -> long
export import def #extern I_RpcBindingSetPrivateOption(hBinding: *, option: ulong, optionValue: uint64) -> long
export import def #extern I_RpcServerSubscribeForDisconnectNotification(Binding: *, hEvent: *) -> long
export import def #extern I_RpcServerGetAssociationID(Binding: *, AssociationID: *ulong) -> long
export import def #extern #dllimport I_RpcServerDisableExceptionFilter() -> long
export import def #extern I_RpcServerSubscribeForDisconnectNotification2(Binding: *, hEvent: *, SubscriptionId: *s__GUID) -> long
export import def #extern I_RpcServerUnsubscribeForDisconnectNotification(Binding: *, SubscriptionId: s__GUID) -> long
export import def #extern #dllimport RpcNsBindingExportA(EntryNameSyntax: ulong, EntryName: *uint8, IfSpec: *, BindingVec: *s__RPC_BINDING_VECTOR, ObjectUuidVec: *s__UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingUnexportA(EntryNameSyntax: ulong, EntryName: *uint8, IfSpec: *, ObjectUuidVec: *s__UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingExportW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, BindingVec: *s__RPC_BINDING_VECTOR, ObjectUuidVec: *s__UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingUnexportW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjectUuidVec: *s__UUID_VECTOR) -> long
export import def #extern RpcNsBindingExportPnPA(EntryNameSyntax: ulong, EntryName: *uint8, IfSpec: *, ObjectVector: *s__UUID_VECTOR) -> long
export import def #extern RpcNsBindingUnexportPnPA(EntryNameSyntax: ulong, EntryName: *uint8, IfSpec: *, ObjectVector: *s__UUID_VECTOR) -> long
export import def #extern RpcNsBindingExportPnPW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjectVector: *s__UUID_VECTOR) -> long
export import def #extern RpcNsBindingUnexportPnPW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjectVector: *s__UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingLookupBeginA(EntryNameSyntax: ulong, EntryName: *uint8, IfSpec: *, ObjUuid: *s__GUID, BindingMaxCount: ulong, LookupContext: **) -> long
export import def #extern #dllimport RpcNsBindingLookupBeginW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjUuid: *s__GUID, BindingMaxCount: ulong, LookupContext: **) -> long
export import def #extern #dllimport RpcNsBindingLookupNext(LookupContext: *, BindingVec: **s__RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingLookupDone(LookupContext: **) -> long
export import def #extern #dllimport RpcNsGroupDeleteA(GroupNameSyntax: ulong, GroupName: *uint8) -> long
export import def #extern #dllimport RpcNsGroupMbrAddA(GroupNameSyntax: ulong, GroupName: *uint8, MemberNameSyntax: ulong, MemberName: *uint8) -> long
export import def #extern #dllimport RpcNsGroupMbrRemoveA(GroupNameSyntax: ulong, GroupName: *uint8, MemberNameSyntax: ulong, MemberName: *uint8) -> long
export import def #extern #dllimport RpcNsGroupMbrInqBeginA(GroupNameSyntax: ulong, GroupName: *uint8, MemberNameSyntax: ulong, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsGroupMbrInqNextA(InquiryContext: *, MemberName: **uint8) -> long
export import def #extern #dllimport RpcNsGroupDeleteW(GroupNameSyntax: ulong, GroupName: *ushort) -> long
export import def #extern #dllimport RpcNsGroupMbrAddW(GroupNameSyntax: ulong, GroupName: *ushort, MemberNameSyntax: ulong, MemberName: *ushort) -> long
export import def #extern #dllimport RpcNsGroupMbrRemoveW(GroupNameSyntax: ulong, GroupName: *ushort, MemberNameSyntax: ulong, MemberName: *ushort) -> long
export import def #extern #dllimport RpcNsGroupMbrInqBeginW(GroupNameSyntax: ulong, GroupName: *ushort, MemberNameSyntax: ulong, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsGroupMbrInqNextW(InquiryContext: *, MemberName: **ushort) -> long
export import def #extern #dllimport RpcNsGroupMbrInqDone(InquiryContext: **) -> long
export import def #extern #dllimport RpcNsProfileDeleteA(ProfileNameSyntax: ulong, ProfileName: *uint8) -> long
export import def #extern #dllimport RpcNsProfileEltAddA(ProfileNameSyntax: ulong, ProfileName: *uint8, IfId: *s__RPC_IF_ID, MemberNameSyntax: ulong, MemberName: *uint8, Priority: ulong, Annotation: *uint8) -> long
export import def #extern #dllimport RpcNsProfileEltRemoveA(ProfileNameSyntax: ulong, ProfileName: *uint8, IfId: *s__RPC_IF_ID, MemberNameSyntax: ulong, MemberName: *uint8) -> long
export import def #extern #dllimport RpcNsProfileEltInqBeginA(ProfileNameSyntax: ulong, ProfileName: *uint8, InquiryType: ulong, IfId: *s__RPC_IF_ID, VersOption: ulong, MemberNameSyntax: ulong, MemberName: *uint8, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsProfileEltInqNextA(InquiryContext: *, IfId: *s__RPC_IF_ID, MemberName: **uint8, Priority: *ulong, Annotation: **uint8) -> long
export import def #extern #dllimport RpcNsProfileDeleteW(ProfileNameSyntax: ulong, ProfileName: *ushort) -> long
export import def #extern #dllimport RpcNsProfileEltAddW(ProfileNameSyntax: ulong, ProfileName: *ushort, IfId: *s__RPC_IF_ID, MemberNameSyntax: ulong, MemberName: *ushort, Priority: ulong, Annotation: *ushort) -> long
export import def #extern #dllimport RpcNsProfileEltRemoveW(ProfileNameSyntax: ulong, ProfileName: *ushort, IfId: *s__RPC_IF_ID, MemberNameSyntax: ulong, MemberName: *ushort) -> long
export import def #extern #dllimport RpcNsProfileEltInqBeginW(ProfileNameSyntax: ulong, ProfileName: *ushort, InquiryType: ulong, IfId: *s__RPC_IF_ID, VersOption: ulong, MemberNameSyntax: ulong, MemberName: *ushort, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsProfileEltInqNextW(InquiryContext: *, IfId: *s__RPC_IF_ID, MemberName: **ushort, Priority: *ulong, Annotation: **ushort) -> long
export import def #extern #dllimport RpcNsProfileEltInqDone(InquiryContext: **) -> long
export import def #extern #dllimport RpcNsEntryObjectInqBeginA(EntryNameSyntax: ulong, EntryName: *uint8, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsEntryObjectInqBeginW(EntryNameSyntax: ulong, EntryName: *ushort, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsEntryObjectInqNext(InquiryContext: *, ObjUuid: *s__GUID) -> long
export import def #extern #dllimport RpcNsEntryObjectInqDone(InquiryContext: **) -> long
export import def #extern #dllimport RpcNsEntryExpandNameA(EntryNameSyntax: ulong, EntryName: *uint8, ExpandedName: **uint8) -> long
export import def #extern #dllimport RpcNsMgmtBindingUnexportA(EntryNameSyntax: ulong, EntryName: *uint8, IfId: *s__RPC_IF_ID, VersOption: ulong, ObjectUuidVec: *s__UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsMgmtEntryCreateA(EntryNameSyntax: ulong, EntryName: *uint8) -> long
export import def #extern #dllimport RpcNsMgmtEntryDeleteA(EntryNameSyntax: ulong, EntryName: *uint8) -> long
export import def #extern #dllimport RpcNsMgmtEntryInqIfIdsA(EntryNameSyntax: ulong, EntryName: *uint8, IfIdVec: **s_RPC_IF_ID_VECTOR) -> long
export import def #extern #dllimport RpcNsMgmtHandleSetExpAge(NsHandle: *, ExpirationAge: ulong) -> long
export import def #extern #dllimport RpcNsMgmtInqExpAge(ExpirationAge: *ulong) -> long
export import def #extern #dllimport RpcNsMgmtSetExpAge(ExpirationAge: ulong) -> long
export import def #extern #dllimport RpcNsEntryExpandNameW(EntryNameSyntax: ulong, EntryName: *ushort, ExpandedName: **ushort) -> long
export import def #extern #dllimport RpcNsMgmtBindingUnexportW(EntryNameSyntax: ulong, EntryName: *ushort, IfId: *s__RPC_IF_ID, VersOption: ulong, ObjectUuidVec: *s__UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsMgmtEntryCreateW(EntryNameSyntax: ulong, EntryName: *ushort) -> long
export import def #extern #dllimport RpcNsMgmtEntryDeleteW(EntryNameSyntax: ulong, EntryName: *ushort) -> long
export import def #extern #dllimport RpcNsMgmtEntryInqIfIdsW(EntryNameSyntax: ulong, EntryName: *ushort, IfIdVec: **s_RPC_IF_ID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingImportBeginA(EntryNameSyntax: ulong, EntryName: *uint8, IfSpec: *, ObjUuid: *s__GUID, ImportContext: **) -> long
export import def #extern #dllimport RpcNsBindingImportBeginW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjUuid: *s__GUID, ImportContext: **) -> long
export import def #extern #dllimport RpcNsBindingImportNext(ImportContext: *, Binding: **) -> long
export import def #extern #dllimport RpcNsBindingImportDone(ImportContext: **) -> long
export import def #extern #dllimport RpcNsBindingSelect(BindingVec: *s__RPC_BINDING_VECTOR, Binding: **) -> long
export const RpcNotificationTypeNone: int = 0
export const RpcNotificationTypeEvent: int = 1
export const RpcNotificationTypeApc: int = 2
export const RpcNotificationTypeIoc: int = 3
export const RpcNotificationTypeHwnd: int = 4
export const RpcNotificationTypeCallback: int = 5
export const RpcCallComplete: int = 0
export const RpcSendComplete: int = 1
export const RpcReceiveComplete: int = 2
export const RpcClientDisconnect: int = 3
export const RpcClientCancel: int = 4
export import def #extern #dllimport RpcAsyncRegisterInfo(pAsync: *s__RPC_ASYNC_STATE) -> long
export import def #extern #dllimport RpcAsyncInitializeHandle(pAsync: *s__RPC_ASYNC_STATE, Size: uint) -> long
export import def #extern #dllimport RpcAsyncGetCallStatus(pAsync: *s__RPC_ASYNC_STATE) -> long
export import def #extern #dllimport RpcAsyncCompleteCall(pAsync: *s__RPC_ASYNC_STATE, Reply: *) -> long
export import def #extern #dllimport RpcAsyncAbortCall(pAsync: *s__RPC_ASYNC_STATE, ExceptionCode: ulong) -> long
export import def #extern #dllimport RpcAsyncCancelCall(pAsync: *s__RPC_ASYNC_STATE, fAbort: int) -> long
export const eeptAnsiString: int = 1
export const eeptUnicodeString: int = 2
export const eeptLongVal: int = 3
export const eeptShortVal: int = 4
export const eeptPointerVal: int = 5
export const eeptNone: int = 6
export const eeptBinary: int = 7
export import def #extern #dllimport RpcErrorStartEnumeration(EnumHandle: *s_tagRPC_ERROR_ENUM_HANDLE) -> long
export import def #extern #dllimport RpcErrorGetNextRecord(EnumHandle: *s_tagRPC_ERROR_ENUM_HANDLE, CopyStrings: int, ErrorInfo: *s_tagRPC_EXTENDED_ERROR_INFO) -> long
export import def #extern #dllimport RpcErrorEndEnumeration(EnumHandle: *s_tagRPC_ERROR_ENUM_HANDLE) -> long
export import def #extern #dllimport RpcErrorResetEnumeration(EnumHandle: *s_tagRPC_ERROR_ENUM_HANDLE) -> long
export import def #extern #dllimport RpcErrorGetNumberOfRecords(EnumHandle: *s_tagRPC_ERROR_ENUM_HANDLE, Records: *int) -> long
export import def #extern #dllimport RpcErrorSaveErrorInfo(EnumHandle: *s_tagRPC_ERROR_ENUM_HANDLE, ErrorBlob: **, BlobSize: *uint64) -> long
export import def #extern #dllimport RpcErrorLoadErrorInfo(ErrorBlob: *, BlobSize: uint64, EnumHandle: *s_tagRPC_ERROR_ENUM_HANDLE) -> long
export import def #extern #dllimport RpcErrorAddRecord(ErrorInfo: *s_tagRPC_EXTENDED_ERROR_INFO) -> long
export import def #extern #dllimport RpcErrorClearInformation()
export import def #extern #dllimport RpcAsyncCleanupThread(dwTimeout: ulong) -> long
export import def #extern #dllimport RpcGetAuthorizationContextForClient(ClientBinding: *, ImpersonateOnReturn: int, Reserved1: *, pExpirationTime: *u__LARGE_INTEGER, Reserved2: s__LUID, Reserved3: ulong, Reserved4: *, pAuthzClientContext: **) -> long
export import def #extern #dllimport RpcFreeAuthorizationContext(pAuthzClientContext: **) -> long
export import def #extern #dllimport RpcSsContextLockExclusive(ServerBindingHandle: *, UserContext: *) -> long
export import def #extern #dllimport RpcSsContextLockShared(ServerBindingHandle: *, UserContext: *) -> long
export const rlafInvalid: int = 0
export const rlafIPv4: int = 1
export const rlafIPv6: int = 2
export const rctInvalid: int = 0
export const rctNormal: int = 1
export const rctTraining: int = 2
export const rctGuaranteed: int = 3
export const rcclInvalid: int = 0
export const rcclLocal: int = 1
export const rcclRemote: int = 2
export const rcclClientUnknownLocality: int = 3
export import def #extern #dllimport RpcServerInqCallAttributesW(ClientBinding: *, RpcCallAttributes: *) -> long
export import def #extern #dllimport RpcServerInqCallAttributesA(ClientBinding: *, RpcCallAttributes: *) -> long
export const RpcNotificationCallNone: int = 0
export const RpcNotificationClientDisconnect: int = 1
export const RpcNotificationCallCancel: int = 2
export import def #extern #dllimport RpcServerSubscribeForNotification(Binding: *, Notification: e__RPC_NOTIFICATIONS, NotificationType: e__RPC_NOTIFICATION_TYPES, NotificationInfo: *u__RPC_ASYNC_NOTIFICATION_INFO) -> long
export import def #extern #dllimport RpcServerUnsubscribeForNotification(Binding: *, Notification: e__RPC_NOTIFICATIONS, NotificationsQueued: *ulong) -> long
export import def #extern #dllimport RpcBindingBind(pAsync: *s__RPC_ASYNC_STATE, Binding: *, IfSpec: *) -> long
export import def #extern #dllimport RpcBindingUnbind(Binding: *) -> long
export import def #extern I_RpcAsyncSetHandle(Message: *s__RPC_MESSAGE, pAsync: *s__RPC_ASYNC_STATE) -> long
export import def #extern I_RpcAsyncAbortCall(pAsync: *s__RPC_ASYNC_STATE, ExceptionCode: ulong) -> long
export import def #extern I_RpcExceptionFilter(ExceptionCode: ulong) -> int
export import def #extern #dllimport I_RpcBindingInqClientTokenAttributes(Binding: *, TokenId: *s__LUID, AuthenticationId: *s__LUID, ModifiedId: *s__LUID) -> long
export import def #extern #dllimport CommandLineToArgvW(lpCmdLine: *ushort, pNumArgs: *int) -> **ushort
export import def #extern #dllimport DragQueryFileA(hDrop: *s_HDROP__, iFile: uint, lpszFile: *char, cch: uint) -> uint
export import def #extern #dllimport DragQueryFileW(hDrop: *s_HDROP__, iFile: uint, lpszFile: *ushort, cch: uint) -> uint
export import def #extern #dllimport DragQueryPoint(hDrop: *s_HDROP__, ppt: *s_tagPOINT) -> int
export import def #extern #dllimport DragFinish(hDrop: *s_HDROP__)
export import def #extern #dllimport DragAcceptFiles(hWnd: *s_HWND__, fAccept: int)
export import def #extern #dllimport ShellExecuteA(hwnd: *s_HWND__, lpOperation: *char, lpFile: *char, lpParameters: *char, lpDirectory: *char, nShowCmd: int) -> *s_HINSTANCE__
export import def #extern #dllimport ShellExecuteW(hwnd: *s_HWND__, lpOperation: *ushort, lpFile: *ushort, lpParameters: *ushort, lpDirectory: *ushort, nShowCmd: int) -> *s_HINSTANCE__
export import def #extern #dllimport FindExecutableA(lpFile: *char, lpDirectory: *char, lpResult: *char) -> *s_HINSTANCE__
export import def #extern #dllimport FindExecutableW(lpFile: *ushort, lpDirectory: *ushort, lpResult: *ushort) -> *s_HINSTANCE__
export import def #extern #dllimport ShellAboutA(hWnd: *s_HWND__, szApp: *char, szOtherStuff: *char, hIcon: *s_HICON__) -> int
export import def #extern #dllimport ShellAboutW(hWnd: *s_HWND__, szApp: *ushort, szOtherStuff: *ushort, hIcon: *s_HICON__) -> int
export import def #extern #dllimport DuplicateIcon(hInst: *s_HINSTANCE__, hIcon: *s_HICON__) -> *s_HICON__
export import def #extern #dllimport ExtractAssociatedIconA(hInst: *s_HINSTANCE__, pszIconPath: *char, piIcon: *ushort) -> *s_HICON__
export import def #extern #dllimport ExtractAssociatedIconW(hInst: *s_HINSTANCE__, pszIconPath: *ushort, piIcon: *ushort) -> *s_HICON__
export import def #extern #dllimport ExtractAssociatedIconExA(hInst: *s_HINSTANCE__, pszIconPath: *char, piIconIndex: *ushort, piIconId: *ushort) -> *s_HICON__
export import def #extern #dllimport ExtractAssociatedIconExW(hInst: *s_HINSTANCE__, pszIconPath: *ushort, piIconIndex: *ushort, piIconId: *ushort) -> *s_HICON__
export import def #extern #dllimport ExtractIconA(hInst: *s_HINSTANCE__, pszExeFileName: *char, nIconIndex: uint) -> *s_HICON__
export import def #extern #dllimport ExtractIconW(hInst: *s_HINSTANCE__, pszExeFileName: *ushort, nIconIndex: uint) -> *s_HICON__
export import def #extern #dllimport SHAppBarMessage(dwMessage: ulong, pData: *s__AppBarData) -> uint64
export import def #extern #dllimport DoEnvironmentSubstA(pszSrc: *char, cchSrc: uint) -> ulong
export import def #extern #dllimport DoEnvironmentSubstW(pszSrc: *ushort, cchSrc: uint) -> ulong
export import def #extern #dllimport ExtractIconExA(lpszFile: *char, nIconIndex: int, phiconLarge: **s_HICON__, phiconSmall: **s_HICON__, nIcons: uint) -> uint
export import def #extern #dllimport ExtractIconExW(lpszFile: *ushort, nIconIndex: int, phiconLarge: **s_HICON__, phiconSmall: **s_HICON__, nIcons: uint) -> uint
export import def #extern #dllimport SHFileOperationA(lpFileOp: *s__SHFILEOPSTRUCTA) -> int
export import def #extern #dllimport SHFileOperationW(lpFileOp: *s__SHFILEOPSTRUCTW) -> int
export import def #extern #dllimport SHFreeNameMappings(hNameMappings: *)
export import def #extern #dllimport ShellExecuteExA(pExecInfo: *s__SHELLEXECUTEINFOA) -> int
export import def #extern #dllimport ShellExecuteExW(pExecInfo: *s__SHELLEXECUTEINFOW) -> int
export import def #extern #dllimport SHCreateProcessAsUserW(pscpi: *s__SHCREATEPROCESSINFOW) -> int
export import def #extern #dllimport SHEvaluateSystemCommandTemplate(pszCmdTemplate: *ushort, ppszApplication: **ushort, ppszCommandLine: **ushort, ppszParameters: **ushort) -> long
export const ASSOCCLASS_SHELL_KEY: int = 0
export const ASSOCCLASS_PROGID_KEY: int = 1
export const ASSOCCLASS_PROGID_STR: int = 2
export const ASSOCCLASS_CLSID_KEY: int = 3
export const ASSOCCLASS_CLSID_STR: int = 4
export const ASSOCCLASS_APP_KEY: int = 5
export const ASSOCCLASS_APP_STR: int = 6
export const ASSOCCLASS_SYSTEM_STR: int = 7
export const ASSOCCLASS_FOLDER: int = 8
export const ASSOCCLASS_STAR: int = 9
export const ASSOCCLASS_FIXED_PROGID_STR: int = 10
export const ASSOCCLASS_PROTOCOL_STR: int = 11
export import def #extern #dllimport AssocCreateForClasses(rgClasses: *s_ASSOCIATIONELEMENT, cClasses: ulong, riid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport SHQueryRecycleBinA(pszRootPath: *char, pSHQueryRBInfo: *s__SHQUERYRBINFO) -> long
export import def #extern #dllimport SHQueryRecycleBinW(pszRootPath: *ushort, pSHQueryRBInfo: *s__SHQUERYRBINFO) -> long
export import def #extern #dllimport SHEmptyRecycleBinA(hwnd: *s_HWND__, pszRootPath: *char, dwFlags: ulong) -> long
export import def #extern #dllimport SHEmptyRecycleBinW(hwnd: *s_HWND__, pszRootPath: *ushort, dwFlags: ulong) -> long
export const QUNS_NOT_PRESENT: int = 1
export const QUNS_BUSY: int = 2
export const QUNS_RUNNING_D3D_FULL_SCREEN: int = 3
export const QUNS_PRESENTATION_MODE: int = 4
export const QUNS_ACCEPTS_NOTIFICATIONS: int = 5
export const QUNS_QUIET_TIME: int = 6
export const QUNS_APP: int = 7
export import def #extern #dllimport SHQueryUserNotificationState(pquns: *e_QUERY_USER_NOTIFICATION_STATE) -> long
export import def #extern #dllimport SHGetPropertyStoreForWindow(hwnd: *s_HWND__, riid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport Shell_NotifyIconA(dwMessage: ulong, lpData: *s__NOTIFYICONDATAA) -> int
export import def #extern #dllimport Shell_NotifyIconW(dwMessage: ulong, lpData: *s__NOTIFYICONDATAW) -> int
export import def #extern #dllimport Shell_NotifyIconGetRect(identifier: *s__NOTIFYICONIDENTIFIER, iconLocation: *s_tagRECT) -> long
export import def #extern #dllimport SHGetFileInfoA(pszPath: *char, dwFileAttributes: ulong, psfi: *s__SHFILEINFOA, cbFileInfo: uint, uFlags: uint) -> uint64
export import def #extern #dllimport SHGetFileInfoW(pszPath: *ushort, dwFileAttributes: ulong, psfi: *s__SHFILEINFOW, cbFileInfo: uint, uFlags: uint) -> uint64
export const SIID_DOCNOASSOC: int = 0
export const SIID_DOCASSOC: int = 1
export const SIID_APPLICATION: int = 2
export const SIID_FOLDER: int = 3
export const SIID_FOLDEROPEN: int = 4
export const SIID_DRIVE525: int = 5
export const SIID_DRIVE35: int = 6
export const SIID_DRIVEREMOVE: int = 7
export const SIID_DRIVEFIXED: int = 8
export const SIID_DRIVENET: int = 9
export const SIID_DRIVENETDISABLED: int = 10
export const SIID_DRIVECD: int = 11
export const SIID_DRIVERAM: int = 12
export const SIID_WORLD: int = 13
export const SIID_SERVER: int = 15
export const SIID_PRINTER: int = 16
export const SIID_MYNETWORK: int = 17
export const SIID_FIND: int = 22
export const SIID_HELP: int = 23
export const SIID_SHARE: int = 28
export const SIID_LINK: int = 29
export const SIID_SLOWFILE: int = 30
export const SIID_RECYCLER: int = 31
export const SIID_RECYCLERFULL: int = 32
export const SIID_MEDIACDAUDIO: int = 40
export const SIID_LOCK: int = 47
export const SIID_AUTOLIST: int = 49
export const SIID_PRINTERNET: int = 50
export const SIID_SERVERSHARE: int = 51
export const SIID_PRINTERFAX: int = 52
export const SIID_PRINTERFAXNET: int = 53
export const SIID_PRINTERFILE: int = 54
export const SIID_STACK: int = 55
export const SIID_MEDIASVCD: int = 56
export const SIID_STUFFEDFOLDER: int = 57
export const SIID_DRIVEUNKNOWN: int = 58
export const SIID_DRIVEDVD: int = 59
export const SIID_MEDIADVD: int = 60
export const SIID_MEDIADVDRAM: int = 61
export const SIID_MEDIADVDRW: int = 62
export const SIID_MEDIADVDR: int = 63
export const SIID_MEDIADVDROM: int = 64
export const SIID_MEDIACDAUDIOPLUS: int = 65
export const SIID_MEDIACDRW: int = 66
export const SIID_MEDIACDR: int = 67
export const SIID_MEDIACDBURN: int = 68
export const SIID_MEDIABLANKCD: int = 69
export const SIID_MEDIACDROM: int = 70
export const SIID_AUDIOFILES: int = 71
export const SIID_IMAGEFILES: int = 72
export const SIID_VIDEOFILES: int = 73
export const SIID_MIXEDFILES: int = 74
export const SIID_FOLDERBACK: int = 75
export const SIID_FOLDERFRONT: int = 76
export const SIID_SHIELD: int = 77
export const SIID_WARNING: int = 78
export const SIID_INFO: int = 79
export const SIID_ERROR: int = 80
export const SIID_KEY: int = 81
export const SIID_SOFTWARE: int = 82
export const SIID_RENAME: int = 83
export const SIID_DELETE: int = 84
export const SIID_MEDIAAUDIODVD: int = 85
export const SIID_MEDIAMOVIEDVD: int = 86
export const SIID_MEDIAENHANCEDCD: int = 87
export const SIID_MEDIAENHANCEDDVD: int = 88
export const SIID_MEDIAHDDVD: int = 89
export const SIID_MEDIABLURAY: int = 90
export const SIID_MEDIAVCD: int = 91
export const SIID_MEDIADVDPLUSR: int = 92
export const SIID_MEDIADVDPLUSRW: int = 93
export const SIID_DESKTOPPC: int = 94
export const SIID_MOBILEPC: int = 95
export const SIID_USERS: int = 96
export const SIID_MEDIASMARTMEDIA: int = 97
export const SIID_MEDIACOMPACTFLASH: int = 98
export const SIID_DEVICECELLPHONE: int = 99
export const SIID_DEVICECAMERA: int = 100
export const SIID_DEVICEVIDEOCAMERA: int = 101
export const SIID_DEVICEAUDIOPLAYER: int = 102
export const SIID_NETWORKCONNECT: int = 103
export const SIID_INTERNET: int = 104
export const SIID_ZIPFILE: int = 105
export const SIID_SETTINGS: int = 106
export const SIID_DRIVEHDDVD: int = 132
export const SIID_DRIVEBD: int = 133
export const SIID_MEDIAHDDVDROM: int = 134
export const SIID_MEDIAHDDVDR: int = 135
export const SIID_MEDIAHDDVDRAM: int = 136
export const SIID_MEDIABDROM: int = 137
export const SIID_MEDIABDR: int = 138
export const SIID_MEDIABDRE: int = 139
export const SIID_CLUSTEREDDRIVE: int = 140
export const SIID_MAX_ICONS: int = 181
export import def #extern #dllimport SHGetStockIconInfo(siid: e_SHSTOCKICONID, uFlags: uint, psii: *s__SHSTOCKICONINFO) -> long
export import def #extern #dllimport SHGetDiskFreeSpaceExA(pszDirectoryName: *char, pulFreeBytesAvailableToCaller: *u__ULARGE_INTEGER, pulTotalNumberOfBytes: *u__ULARGE_INTEGER, pulTotalNumberOfFreeBytes: *u__ULARGE_INTEGER) -> int
export import def #extern #dllimport SHGetDiskFreeSpaceExW(pszDirectoryName: *ushort, pulFreeBytesAvailableToCaller: *u__ULARGE_INTEGER, pulTotalNumberOfBytes: *u__ULARGE_INTEGER, pulTotalNumberOfFreeBytes: *u__ULARGE_INTEGER) -> int
export import def #extern #dllimport SHGetNewLinkInfoA(pszLinkTo: *char, pszDir: *char, pszName: *char, pfMustCopy: *int, uFlags: uint) -> int
export import def #extern #dllimport SHGetNewLinkInfoW(pszLinkTo: *ushort, pszDir: *ushort, pszName: *ushort, pfMustCopy: *int, uFlags: uint) -> int
export import def #extern #dllimport SHInvokePrinterCommandA(hwnd: *s_HWND__, uAction: uint, lpBuf1: *char, lpBuf2: *char, fModal: int) -> int
export import def #extern #dllimport SHInvokePrinterCommandW(hwnd: *s_HWND__, uAction: uint, lpBuf1: *ushort, lpBuf2: *ushort, fModal: int) -> int
export import def #extern #dllimport SHLoadNonloadedIconOverlayIdentifiers() -> long
export import def #extern #dllimport SHIsFileAvailableOffline(pwszPath: *ushort, pdwStatus: *ulong) -> long
export import def #extern #dllimport SHSetLocalizedName(pszPath: *ushort, pszResModule: *ushort, idsRes: int) -> long
export import def #extern #dllimport SHRemoveLocalizedName(pszPath: *ushort) -> long
export import def #extern #dllimport SHGetLocalizedName(pszPath: *ushort, pszResModule: *ushort, cch: uint, pidsRes: *int) -> long
export import def #extern #dllimport ShellMessageBoxA(hAppInst: *s_HINSTANCE__, hWnd: *s_HWND__, lpcText: *char, lpcTitle: *char, fuStyle: uint, ...) -> int
export import def #extern #dllimport ShellMessageBoxW(hAppInst: *s_HINSTANCE__, hWnd: *s_HWND__, lpcText: *ushort, lpcTitle: *ushort, fuStyle: uint, ...) -> int
export import def #extern #dllimport IsLFNDriveA(pszPath: *char) -> int
export import def #extern #dllimport IsLFNDriveW(pszPath: *ushort) -> int
export import def #extern SHEnumerateUnreadMailAccountsA(hKeyUser: *s_HKEY__, dwIndex: ulong, pszMailAddress: *char, cchMailAddress: int) -> long
export import def #extern SHEnumerateUnreadMailAccountsW(hKeyUser: *s_HKEY__, dwIndex: ulong, pszMailAddress: *ushort, cchMailAddress: int) -> long
export import def #extern SHGetUnreadMailCountA(hKeyUser: *s_HKEY__, pszMailAddress: *char, pdwCount: *ulong, pFileTime: *s__FILETIME, pszShellExecuteCommand: *char, cchShellExecuteCommand: int) -> long
export import def #extern SHGetUnreadMailCountW(hKeyUser: *s_HKEY__, pszMailAddress: *ushort, pdwCount: *ulong, pFileTime: *s__FILETIME, pszShellExecuteCommand: *ushort, cchShellExecuteCommand: int) -> long
export import def #extern SHSetUnreadMailCountA(pszMailAddress: *char, dwCount: ulong, pszShellExecuteCommand: *char) -> long
export import def #extern SHSetUnreadMailCountW(pszMailAddress: *ushort, dwCount: ulong, pszShellExecuteCommand: *ushort) -> long
export import def #extern SHTestTokenMembership(hToken: *, ulRID: ulong) -> int
export import def #extern #dllimport SHGetImageList(iImageList: int, riid: *s__GUID, ppvObj: **) -> long
export import def #extern #dllimport InitNetworkAddressControl() -> int
export import def #extern SHGetDriveMedia(pszDrive: *ushort, pdwMediaContent: *ulong) -> long
export import def #extern __WSAFDIsSet(_0: uint64, _1: *s_fd_set) -> int
export import def #extern accept(s: uint64, addr: *s_sockaddr, addrlen: *int) -> uint64
export import def #extern bind(s: uint64, addr: *s_sockaddr, namelen: int) -> int
export import def #extern closesocket(s: uint64) -> int
export import def #extern connect(s: uint64, name: *s_sockaddr, namelen: int) -> int
export import def #extern ioctlsocket(s: uint64, cmd: long, argp: *ulong) -> int
export import def #extern getpeername(s: uint64, name: *s_sockaddr, namelen: *int) -> int
export import def #extern getsockname(s: uint64, name: *s_sockaddr, namelen: *int) -> int
export import def #extern getsockopt(s: uint64, level: int, optname: int, optval: *char, optlen: *int) -> int
export import def #extern htonl(hostlong: ulong) -> ulong
export import def #extern htons(hostshort: ushort) -> ushort
export import def #extern inet_addr(cp: *char) -> ulong
export import def #extern inet_ntoa(in_: s_in_addr) -> *char
export import def #extern listen(s: uint64, backlog: int) -> int
export import def #extern ntohl(netlong: ulong) -> ulong
export import def #extern ntohs(netshort: ushort) -> ushort
export import def #extern recv(s: uint64, buf: *char, len: int, flags: int) -> int
export import def #extern recvfrom(s: uint64, buf: *char, len: int, flags: int, from_: *s_sockaddr, fromlen: *int) -> int
export import def #extern select(nfds: int, readfds: *s_fd_set, writefds: *s_fd_set, exceptfds: *s_fd_set, timeout: *s_timeval) -> int
export import def #extern send(s: uint64, buf: *char, len: int, flags: int) -> int
export import def #extern sendto(s: uint64, buf: *char, len: int, flags: int, to: *s_sockaddr, tolen: int) -> int
export import def #extern setsockopt(s: uint64, level: int, optname: int, optval: *char, optlen: int) -> int
export import def #extern shutdown(s: uint64, how: int) -> int
export import def #extern socket(af: int, type_: int, protocol: int) -> uint64
export import def #extern gethostbyaddr(addr: *char, len: int, type_: int) -> *s_hostent
export import def #extern gethostbyname(name: *char) -> *s_hostent
export import def #extern gethostname(name: *char, namelen: int) -> int
export import def #extern getservbyport(port: int, proto: *char) -> *s_servent
export import def #extern getservbyname(name: *char, proto: *char) -> *s_servent
export import def #extern getprotobynumber(proto: int) -> *s_protoent
export import def #extern getprotobyname(name: *char) -> *s_protoent
export import def #extern WSAStartup(wVersionRequired: ushort, lpWSAData: *s_WSAData) -> int
export import def #extern WSACleanup() -> int
export import def #extern WSASetLastError(iError: int)
export import def #extern WSAGetLastError() -> int
export import def #extern WSAIsBlocking() -> int
export import def #extern WSAUnhookBlockingHook() -> int
export import def #extern WSASetBlockingHook(lpBlockFunc: *INT_PTR ()) -> *INT_PTR ()
export import def #extern WSACancelBlockingCall() -> int
export import def #extern WSAAsyncGetServByName(hWnd: *s_HWND__, wMsg: uint, name: *char, proto: *char, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetServByPort(hWnd: *s_HWND__, wMsg: uint, port: int, proto: *char, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetProtoByName(hWnd: *s_HWND__, wMsg: uint, name: *char, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetProtoByNumber(hWnd: *s_HWND__, wMsg: uint, number: int, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetHostByName(hWnd: *s_HWND__, wMsg: uint, name: *char, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetHostByAddr(hWnd: *s_HWND__, wMsg: uint, addr: *char, len: int, type_: int, buf: *char, buflen: int) -> *
export import def #extern WSACancelAsyncRequest(hAsyncTaskHandle: *) -> int
export import def #extern WSAAsyncSelect(s: uint64, hWnd: *s_HWND__, wMsg: uint, lEvent: long) -> int
export import def #extern WSARecvEx(s: uint64, buf: *char, len: int, flags: *int) -> int
export import def #extern TransmitFile(hSocket: uint64, hFile: *, nNumberOfBytesToWrite: ulong, nNumberOfBytesPerSend: ulong, lpOverlapped: *s__OVERLAPPED, lpTransmitBuffers: *s__TRANSMIT_FILE_BUFFERS, dwReserved: ulong) -> int
export import def #extern AcceptEx(sListenSocket: uint64, sAcceptSocket: uint64, lpOutputBuffer: *, dwReceiveDataLength: ulong, dwLocalAddressLength: ulong, dwRemoteAddressLength: ulong, lpdwBytesReceived: *ulong, lpOverlapped: *s__OVERLAPPED) -> int
export import def #extern GetAcceptExSockaddrs(lpOutputBuffer: *, dwReceiveDataLength: ulong, dwLocalAddressLength: ulong, dwRemoteAddressLength: ulong, LocalSockaddr: **s_sockaddr, LocalSockaddrLength: *int, RemoteSockaddr: **s_sockaddr, RemoteSockaddrLength: *int)
export import def #extern #dllimport CryptAcquireContextA(phProv: *uint64, szContainer: *char, szProvider: *char, dwProvType: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptAcquireContextW(phProv: *uint64, szContainer: *ushort, szProvider: *ushort, dwProvType: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptReleaseContext(hProv: uint64, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGenKey(hProv: uint64, Algid: uint, dwFlags: ulong, phKey: *uint64) -> int
export import def #extern #dllimport CryptDeriveKey(hProv: uint64, Algid: uint, hBaseData: uint64, dwFlags: ulong, phKey: *uint64) -> int
export import def #extern #dllimport CryptDestroyKey(hKey: uint64) -> int
export import def #extern #dllimport CryptSetKeyParam(hKey: uint64, dwParam: ulong, pbData: *uint8, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGetKeyParam(hKey: uint64, dwParam: ulong, pbData: *uint8, pdwDataLen: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptSetHashParam(hHash: uint64, dwParam: ulong, pbData: *uint8, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGetHashParam(hHash: uint64, dwParam: ulong, pbData: *uint8, pdwDataLen: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptSetProvParam(hProv: uint64, dwParam: ulong, pbData: *uint8, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGetProvParam(hProv: uint64, dwParam: ulong, pbData: *uint8, pdwDataLen: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGenRandom(hProv: uint64, dwLen: ulong, pbBuffer: *uint8) -> int
export import def #extern #dllimport CryptGetUserKey(hProv: uint64, dwKeySpec: ulong, phUserKey: *uint64) -> int
export import def #extern #dllimport CryptExportKey(hKey: uint64, hExpKey: uint64, dwBlobType: ulong, dwFlags: ulong, pbData: *uint8, pdwDataLen: *ulong) -> int
export import def #extern #dllimport CryptImportKey(hProv: uint64, pbData: *uint8, dwDataLen: ulong, hPubKey: uint64, dwFlags: ulong, phKey: *uint64) -> int
export import def #extern #dllimport CryptEncrypt(hKey: uint64, hHash: uint64, Final: int, dwFlags: ulong, pbData: *uint8, pdwDataLen: *ulong, dwBufLen: ulong) -> int
export import def #extern #dllimport CryptDecrypt(hKey: uint64, hHash: uint64, Final: int, dwFlags: ulong, pbData: *uint8, pdwDataLen: *ulong) -> int
export import def #extern #dllimport CryptCreateHash(hProv: uint64, Algid: uint, hKey: uint64, dwFlags: ulong, phHash: *uint64) -> int
export import def #extern #dllimport CryptHashData(hHash: uint64, pbData: *uint8, dwDataLen: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptHashSessionKey(hHash: uint64, hKey: uint64, dwFlags: ulong) -> int
export import def #extern #dllimport CryptDestroyHash(hHash: uint64) -> int
export import def #extern #dllimport CryptSignHashA(hHash: uint64, dwKeySpec: ulong, szDescription: *char, dwFlags: ulong, pbSignature: *uint8, pdwSigLen: *ulong) -> int
export import def #extern #dllimport CryptSignHashW(hHash: uint64, dwKeySpec: ulong, szDescription: *ushort, dwFlags: ulong, pbSignature: *uint8, pdwSigLen: *ulong) -> int
export import def #extern #dllimport CryptVerifySignatureA(hHash: uint64, pbSignature: *uint8, dwSigLen: ulong, hPubKey: uint64, szDescription: *char, dwFlags: ulong) -> int
export import def #extern #dllimport CryptVerifySignatureW(hHash: uint64, pbSignature: *uint8, dwSigLen: ulong, hPubKey: uint64, szDescription: *ushort, dwFlags: ulong) -> int
export import def #extern #dllimport CryptSetProviderA(pszProvName: *char, dwProvType: ulong) -> int
export import def #extern #dllimport CryptSetProviderW(pszProvName: *ushort, dwProvType: ulong) -> int
export import def #extern #dllimport CryptSetProviderExA(pszProvName: *char, dwProvType: ulong, pdwReserved: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptSetProviderExW(pszProvName: *ushort, dwProvType: ulong, pdwReserved: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGetDefaultProviderA(dwProvType: ulong, pdwReserved: *ulong, dwFlags: ulong, pszProvName: *char, pcbProvName: *ulong) -> int
export import def #extern #dllimport CryptGetDefaultProviderW(dwProvType: ulong, pdwReserved: *ulong, dwFlags: ulong, pszProvName: *ushort, pcbProvName: *ulong) -> int
export import def #extern #dllimport CryptEnumProviderTypesA(dwIndex: ulong, pdwReserved: *ulong, dwFlags: ulong, pdwProvType: *ulong, szTypeName: *char, pcbTypeName: *ulong) -> int
export import def #extern #dllimport CryptEnumProviderTypesW(dwIndex: ulong, pdwReserved: *ulong, dwFlags: ulong, pdwProvType: *ulong, szTypeName: *ushort, pcbTypeName: *ulong) -> int
export import def #extern #dllimport CryptEnumProvidersA(dwIndex: ulong, pdwReserved: *ulong, dwFlags: ulong, pdwProvType: *ulong, szProvName: *char, pcbProvName: *ulong) -> int
export import def #extern #dllimport CryptEnumProvidersW(dwIndex: ulong, pdwReserved: *ulong, dwFlags: ulong, pdwProvType: *ulong, szProvName: *ushort, pcbProvName: *ulong) -> int
export import def #extern #dllimport CryptContextAddRef(hProv: uint64, pdwReserved: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptDuplicateKey(hKey: uint64, pdwReserved: *ulong, dwFlags: ulong, phKey: *uint64) -> int
export import def #extern #dllimport CryptDuplicateHash(hHash: uint64, pdwReserved: *ulong, dwFlags: ulong, phHash: *uint64) -> int
export import def #extern GetEncSChannel(pData: **uint8, dwDecSize: *ulong) -> int
export const BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE: int = 1
export const BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE: int = 2
export const BCRYPT_ECC_PRIME_MONTGOMERY_CURVE: int = 3
export const BCRYPT_NO_CURVE_GENERATION_ALG_ID: int = 0
export const DSA_HASH_ALGORITHM_SHA1: int = 0
export const DSA_HASH_ALGORITHM_SHA256: int = 1
export const DSA_HASH_ALGORITHM_SHA512: int = 2
export const DSA_FIPS186_2: int = 0
export const DSA_FIPS186_3: int = 1
export const BCRYPT_HASH_OPERATION_HASH_DATA: int = 1
export const BCRYPT_HASH_OPERATION_FINISH_HASH: int = 2
export const BCRYPT_OPERATION_TYPE_HASH: int = 1
export import def #extern BCryptOpenAlgorithmProvider(phAlgorithm: **, pszAlgId: *ushort, pszImplementation: *ushort, dwFlags: ulong) -> long
export import def #extern BCryptEnumAlgorithms(dwAlgOperations: ulong, pAlgCount: *ulong, ppAlgList: **s__BCRYPT_ALGORITHM_IDENTIFIER, dwFlags: ulong) -> long
export import def #extern BCryptEnumProviders(pszAlgId: *ushort, pImplCount: *ulong, ppImplList: **s__BCRYPT_PROVIDER_NAME, dwFlags: ulong) -> long
export import def #extern BCryptGetProperty(hObject: *, pszProperty: *ushort, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptSetProperty(hObject: *, pszProperty: *ushort, pbInput: *uint8, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptCloseAlgorithmProvider(hAlgorithm: *, dwFlags: ulong) -> long
export import def #extern BCryptFreeBuffer(pvBuffer: *)
export import def #extern BCryptGenerateSymmetricKey(hAlgorithm: *, phKey: **, pbKeyObject: *uint8, cbKeyObject: ulong, pbSecret: *uint8, cbSecret: ulong, dwFlags: ulong) -> long
export import def #extern BCryptGenerateKeyPair(hAlgorithm: *, phKey: **, dwLength: ulong, dwFlags: ulong) -> long
export import def #extern BCryptEncrypt(hKey: *, pbInput: *uint8, cbInput: ulong, pPaddingInfo: *, pbIV: *uint8, cbIV: ulong, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptDecrypt(hKey: *, pbInput: *uint8, cbInput: ulong, pPaddingInfo: *, pbIV: *uint8, cbIV: ulong, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptExportKey(hKey: *, hExportKey: *, pszBlobType: *ushort, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptImportKey(hAlgorithm: *, hImportKey: *, pszBlobType: *ushort, phKey: **, pbKeyObject: *uint8, cbKeyObject: ulong, pbInput: *uint8, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptImportKeyPair(hAlgorithm: *, hImportKey: *, pszBlobType: *ushort, phKey: **, pbInput: *uint8, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDuplicateKey(hKey: *, phNewKey: **, pbKeyObject: *uint8, cbKeyObject: ulong, dwFlags: ulong) -> long
export import def #extern BCryptFinalizeKeyPair(hKey: *, dwFlags: ulong) -> long
export import def #extern BCryptDestroyKey(hKey: *) -> long
export import def #extern BCryptDestroySecret(hSecret: *) -> long
export import def #extern BCryptSignHash(hKey: *, pPaddingInfo: *, pbInput: *uint8, cbInput: ulong, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptVerifySignature(hKey: *, pPaddingInfo: *, pbHash: *uint8, cbHash: ulong, pbSignature: *uint8, cbSignature: ulong, dwFlags: ulong) -> long
export import def #extern BCryptSecretAgreement(hPrivKey: *, hPubKey: *, phAgreedSecret: **, dwFlags: ulong) -> long
export import def #extern BCryptDeriveKey(hSharedSecret: *, pwszKDF: *ushort, pParameterList: *s__BCryptBufferDesc, pbDerivedKey: *uint8, cbDerivedKey: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptKeyDerivation(hKey: *, pParameterList: *s__BCryptBufferDesc, pbDerivedKey: *uint8, cbDerivedKey: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptCreateHash(hAlgorithm: *, phHash: **, pbHashObject: *uint8, cbHashObject: ulong, pbSecret: *uint8, cbSecret: ulong, dwFlags: ulong) -> long
export import def #extern BCryptHashData(hHash: *, pbInput: *uint8, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptFinishHash(hHash: *, pbOutput: *uint8, cbOutput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptCreateMultiHash(hAlgorithm: *, phHash: **, nHashes: ulong, pbHashObject: *uint8, cbHashObject: ulong, pbSecret: *uint8, cbSecret: ulong, dwFlags: ulong) -> long
export import def #extern BCryptProcessMultiOperations(hObject: *, operationType: e_BCRYPT_MULTI_OPERATION_TYPE, pOperations: *, cbOperations: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDuplicateHash(hHash: *, phNewHash: **, pbHashObject: *uint8, cbHashObject: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDestroyHash(hHash: *) -> long
export import def #extern BCryptHash(hAlgorithm: *, pbSecret: *uint8, cbSecret: ulong, pbInput: *uint8, cbInput: ulong, pbOutput: *uint8, cbOutput: ulong) -> long
export import def #extern BCryptGenRandom(hAlgorithm: *, pbBuffer: *uint8, cbBuffer: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDeriveKeyCapi(hHash: *, hTargetAlg: *, pbDerivedKey: *uint8, cbDerivedKey: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDeriveKeyPBKDF2(hPrf: *, pbPassword: *uint8, cbPassword: ulong, pbSalt: *uint8, cbSalt: ulong, cIterations: uint64, pbDerivedKey: *uint8, cbDerivedKey: ulong, dwFlags: ulong) -> long
export import def #extern BCryptQueryProviderRegistration(pszProvider: *ushort, dwMode: ulong, dwInterface: ulong, pcbBuffer: *ulong, ppBuffer: **s__CRYPT_PROVIDER_REG) -> long
export import def #extern BCryptEnumRegisteredProviders(pcbBuffer: *ulong, ppBuffer: **s__CRYPT_PROVIDERS) -> long
export import def #extern BCryptCreateContext(dwTable: ulong, pszContext: *ushort, pConfig: *s__CRYPT_CONTEXT_CONFIG) -> long
export import def #extern BCryptDeleteContext(dwTable: ulong, pszContext: *ushort) -> long
export import def #extern BCryptEnumContexts(dwTable: ulong, pcbBuffer: *ulong, ppBuffer: **s__CRYPT_CONTEXTS) -> long
export import def #extern BCryptConfigureContext(dwTable: ulong, pszContext: *ushort, pConfig: *s__CRYPT_CONTEXT_CONFIG) -> long
export import def #extern BCryptQueryContextConfiguration(dwTable: ulong, pszContext: *ushort, pcbBuffer: *ulong, ppBuffer: **s__CRYPT_CONTEXT_CONFIG) -> long
export import def #extern BCryptAddContextFunction(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, dwPosition: ulong) -> long
export import def #extern BCryptRemoveContextFunction(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort) -> long
export import def #extern BCryptEnumContextFunctions(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pcbBuffer: *ulong, ppBuffer: **s__CRYPT_CONTEXT_FUNCTIONS) -> long
export import def #extern BCryptConfigureContextFunction(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pConfig: *s__CRYPT_CONTEXT_FUNCTION_CONFIG) -> long
export import def #extern BCryptQueryContextFunctionConfiguration(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pcbBuffer: *ulong, ppBuffer: **s__CRYPT_CONTEXT_FUNCTION_CONFIG) -> long
export import def #extern BCryptEnumContextFunctionProviders(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pcbBuffer: *ulong, ppBuffer: **s__CRYPT_CONTEXT_FUNCTION_PROVIDERS) -> long
export import def #extern BCryptSetContextFunctionProperty(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pszProperty: *ushort, cbValue: ulong, pbValue: *uint8) -> long
export import def #extern BCryptQueryContextFunctionProperty(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pszProperty: *ushort, pcbValue: *ulong, ppbValue: **uint8) -> long
export import def #extern BCryptRegisterConfigChangeNotify(phEvent: **) -> long
export import def #extern BCryptUnregisterConfigChangeNotify(hEvent: *) -> long
export import def #extern BCryptResolveProviders(pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pszProvider: *ushort, dwMode: ulong, dwFlags: ulong, pcbBuffer: *ulong, ppBuffer: **s__CRYPT_PROVIDER_REFS) -> long
export import def #extern BCryptGetFipsAlgorithmMode(pfEnabled: *uint8) -> long
export import def #extern CngGetFipsAlgorithmMode() -> uint8
export import def #extern NCryptOpenStorageProvider(phProvider: *uint64, pszProviderName: *ushort, dwFlags: ulong) -> long
export import def #extern NCryptEnumAlgorithms(hProvider: uint64, dwAlgOperations: ulong, pdwAlgCount: *ulong, ppAlgList: **s__NCryptAlgorithmName, dwFlags: ulong) -> long
export import def #extern NCryptIsAlgSupported(hProvider: uint64, pszAlgId: *ushort, dwFlags: ulong) -> long
export import def #extern NCryptEnumKeys(hProvider: uint64, pszScope: *ushort, ppKeyName: **s_NCryptKeyName, ppEnumState: **, dwFlags: ulong) -> long
export import def #extern NCryptEnumStorageProviders(pdwProviderCount: *ulong, ppProviderList: **s_NCryptProviderName, dwFlags: ulong) -> long
export import def #extern NCryptFreeBuffer(pvInput: *) -> long
export import def #extern NCryptOpenKey(hProvider: uint64, phKey: *uint64, pszKeyName: *ushort, dwLegacyKeySpec: ulong, dwFlags: ulong) -> long
export import def #extern NCryptCreatePersistedKey(hProvider: uint64, phKey: *uint64, pszAlgId: *ushort, pszKeyName: *ushort, dwLegacyKeySpec: ulong, dwFlags: ulong) -> long
export import def #extern NCryptGetProperty(hObject: uint64, pszProperty: *ushort, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptSetProperty(hObject: uint64, pszProperty: *ushort, pbInput: *uint8, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern NCryptFinalizeKey(hKey: uint64, dwFlags: ulong) -> long
export import def #extern NCryptEncrypt(hKey: uint64, pbInput: *uint8, cbInput: ulong, pPaddingInfo: *, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptDecrypt(hKey: uint64, pbInput: *uint8, cbInput: ulong, pPaddingInfo: *, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptImportKey(hProvider: uint64, hImportKey: uint64, pszBlobType: *ushort, pParameterList: *s__BCryptBufferDesc, phKey: *uint64, pbData: *uint8, cbData: ulong, dwFlags: ulong) -> long
export import def #extern NCryptExportKey(hKey: uint64, hExportKey: uint64, pszBlobType: *ushort, pParameterList: *s__BCryptBufferDesc, pbOutput: *uint8, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptSignHash(hKey: uint64, pPaddingInfo: *, pbHashValue: *uint8, cbHashValue: ulong, pbSignature: *uint8, cbSignature: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptVerifySignature(hKey: uint64, pPaddingInfo: *, pbHashValue: *uint8, cbHashValue: ulong, pbSignature: *uint8, cbSignature: ulong, dwFlags: ulong) -> long
export import def #extern NCryptDeleteKey(hKey: uint64, dwFlags: ulong) -> long
export import def #extern NCryptFreeObject(hObject: uint64) -> long
export import def #extern NCryptIsKeyHandle(hKey: uint64) -> int
export import def #extern NCryptTranslateHandle(phProvider: *uint64, phKey: *uint64, hLegacyProv: uint64, hLegacyKey: uint64, dwLegacyKeySpec: ulong, dwFlags: ulong) -> long
export import def #extern NCryptNotifyChangeKey(hProvider: uint64, phEvent: **, dwFlags: ulong) -> long
export import def #extern NCryptSecretAgreement(hPrivKey: uint64, hPubKey: uint64, phAgreedSecret: *uint64, dwFlags: ulong) -> long
export import def #extern NCryptDeriveKey(hSharedSecret: uint64, pwszKDF: *ushort, pParameterList: *s__BCryptBufferDesc, pbDerivedKey: *uint8, cbDerivedKey: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptKeyDerivation(hKey: uint64, pParameterList: *s__BCryptBufferDesc, pbDerivedKey: *uint8, cbDerivedKey: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptCreateClaim(hSubjectKey: uint64, hAuthorityKey: uint64, dwClaimType: ulong, pParameterList: *s__BCryptBufferDesc, pbClaimBlob: *uint8, cbClaimBlob: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptVerifyClaim(hSubjectKey: uint64, hAuthorityKey: uint64, dwClaimType: ulong, pParameterList: *s__BCryptBufferDesc, pbClaimBlob: *uint8, cbClaimBlob: ulong, pOutput: *s__BCryptBufferDesc, dwFlags: ulong) -> long
export import def #extern #dllimport CryptFormatObject(dwCertEncodingType: ulong, dwFormatType: ulong, dwFormatStrType: ulong, pFormatStruct: *, lpszStructType: *char, pbEncoded: *uint8, cbEncoded: ulong, pbFormat: *, pcbFormat: *ulong) -> int
export import def #extern #dllimport CryptEncodeObjectEx(dwCertEncodingType: ulong, lpszStructType: *char, pvStructInfo: *, dwFlags: ulong, pEncodePara: *s__CRYPT_ENCODE_PARA, pvEncoded: *, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CryptEncodeObject(dwCertEncodingType: ulong, lpszStructType: *char, pvStructInfo: *, pbEncoded: *uint8, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CryptDecodeObjectEx(dwCertEncodingType: ulong, lpszStructType: *char, pbEncoded: *uint8, cbEncoded: ulong, dwFlags: ulong, pDecodePara: *s__CRYPT_DECODE_PARA, pvStructInfo: *, pcbStructInfo: *ulong) -> int
export import def #extern #dllimport CryptDecodeObject(dwCertEncodingType: ulong, lpszStructType: *char, pbEncoded: *uint8, cbEncoded: ulong, dwFlags: ulong, pvStructInfo: *, pcbStructInfo: *ulong) -> int
export import def #extern #dllimport CryptInstallOIDFunctionAddress(hModule: *s_HINSTANCE__, dwEncodingType: ulong, pszFuncName: *char, cFuncEntry: ulong, rgFuncEntry: *s__CRYPT_OID_FUNC_ENTRY, dwFlags: ulong) -> int
export import def #extern #dllimport CryptInitOIDFunctionSet(pszFuncName: *char, dwFlags: ulong) -> *
export import def #extern #dllimport CryptGetOIDFunctionAddress(hFuncSet: *, dwEncodingType: ulong, pszOID: *char, dwFlags: ulong, ppvFuncAddr: **, phFuncAddr: **) -> int
export import def #extern #dllimport CryptGetDefaultOIDDllList(hFuncSet: *, dwEncodingType: ulong, pwszDllList: *ushort, pcchDllList: *ulong) -> int
export import def #extern #dllimport CryptGetDefaultOIDFunctionAddress(hFuncSet: *, dwEncodingType: ulong, pwszDll: *ushort, dwFlags: ulong, ppvFuncAddr: **, phFuncAddr: **) -> int
export import def #extern #dllimport CryptFreeOIDFunctionAddress(hFuncAddr: *, dwFlags: ulong) -> int
export import def #extern #dllimport CryptRegisterOIDFunction(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char, pwszDll: *ushort, pszOverrideFuncName: *char) -> int
export import def #extern #dllimport CryptUnregisterOIDFunction(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char) -> int
export import def #extern #dllimport CryptRegisterDefaultOIDFunction(dwEncodingType: ulong, pszFuncName: *char, dwIndex: ulong, pwszDll: *ushort) -> int
export import def #extern #dllimport CryptUnregisterDefaultOIDFunction(dwEncodingType: ulong, pszFuncName: *char, pwszDll: *ushort) -> int
export import def #extern #dllimport CryptSetOIDFunctionValue(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char, pwszValueName: *ushort, dwValueType: ulong, pbValueData: *uint8, cbValueData: ulong) -> int
export import def #extern #dllimport CryptGetOIDFunctionValue(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char, pwszValueName: *ushort, pdwValueType: *ulong, pbValueData: *uint8, pcbValueData: *ulong) -> int
export import def #extern #dllimport CryptEnumOIDFunction(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char, dwFlags: ulong, pvArg: *, pfnEnumOIDFunc: def (ulong, *char, *char, ulong, *ulong, **ushort, **uint8, *ulong, *) -> (int)) -> int
export import def #extern #dllimport CryptFindOIDInfo(dwKeyType: ulong, pvKey: *, dwGroupId: ulong) -> *s__CRYPT_OID_INFO
export import def #extern #dllimport CryptRegisterOIDInfo(pInfo: *s__CRYPT_OID_INFO, dwFlags: ulong) -> int
export import def #extern #dllimport CryptUnregisterOIDInfo(pInfo: *s__CRYPT_OID_INFO) -> int
export import def #extern #dllimport CryptEnumOIDInfo(dwGroupId: ulong, dwFlags: ulong, pvArg: *, pfnEnumOIDInfo: def (*s__CRYPT_OID_INFO, *) -> (int)) -> int
export import def #extern #dllimport CryptFindLocalizedName(pwszCryptName: *ushort) -> *ushort
export import def #extern #dllimport CryptMsgOpenToEncode(dwMsgEncodingType: ulong, dwFlags: ulong, dwMsgType: ulong, pvMsgEncodeInfo: *, pszInnerContentObjID: *char, pStreamInfo: *s__CMSG_STREAM_INFO) -> *
export import def #extern #dllimport CryptMsgCalculateEncodedLength(dwMsgEncodingType: ulong, dwFlags: ulong, dwMsgType: ulong, pvMsgEncodeInfo: *, pszInnerContentObjID: *char, cbData: ulong) -> ulong
export import def #extern #dllimport CryptMsgOpenToDecode(dwMsgEncodingType: ulong, dwFlags: ulong, dwMsgType: ulong, hCryptProv: uint64, pRecipientInfo: *s__CERT_INFO, pStreamInfo: *s__CMSG_STREAM_INFO) -> *
export import def #extern #dllimport CryptMsgDuplicate(hCryptMsg: *) -> *
export import def #extern #dllimport CryptMsgClose(hCryptMsg: *) -> int
export import def #extern #dllimport CryptMsgUpdate(hCryptMsg: *, pbData: *uint8, cbData: ulong, fFinal: int) -> int
export import def #extern #dllimport CryptMsgGetParam(hCryptMsg: *, dwParamType: ulong, dwIndex: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CryptMsgControl(hCryptMsg: *, dwFlags: ulong, dwCtrlType: ulong, pvCtrlPara: *) -> int
export import def #extern CryptMsgVerifyCountersignatureEncoded(hCryptProv: uint64, dwEncodingType: ulong, pbSignerInfo: *uint8, cbSignerInfo: ulong, pbSignerInfoCountersignature: *uint8, cbSignerInfoCountersignature: ulong, pciCountersigner: *s__CERT_INFO) -> int
export import def #extern CryptMsgVerifyCountersignatureEncodedEx(hCryptProv: uint64, dwEncodingType: ulong, pbSignerInfo: *uint8, cbSignerInfo: ulong, pbSignerInfoCountersignature: *uint8, cbSignerInfoCountersignature: ulong, dwSignerType: ulong, pvSigner: *, dwFlags: ulong, pvExtra: *) -> int
export import def #extern CryptMsgCountersign(hCryptMsg: *, dwIndex: ulong, cCountersigners: ulong, rgCountersigners: *s__CMSG_SIGNER_ENCODE_INFO) -> int
export import def #extern CryptMsgCountersignEncoded(dwEncodingType: ulong, pbSignerInfo: *uint8, cbSignerInfo: ulong, cCountersigners: ulong, rgCountersigners: *s__CMSG_SIGNER_ENCODE_INFO, pbCountersignature: *uint8, pcbCountersignature: *ulong) -> int
export const KeyTypeOther: int = 0
export const KeyTypeVirtualSmartCard: int = 1
export const KeyTypePhysicalSmartCard: int = 2
export const KeyTypePassport: int = 3
export const KeyTypePassportRemote: int = 4
export const KeyTypePassportSmartCard: int = 5
export const KeyTypeHardware: int = 6
export const KeyTypeSoftware: int = 7
export const KeyTypeSelfSigned: int = 8
export import def #extern #dllimport CertOpenStore(lpszStoreProvider: *char, dwEncodingType: ulong, hCryptProv: uint64, dwFlags: ulong, pvPara: *) -> *
export import def #extern #dllimport CertDuplicateStore(hCertStore: *) -> *
export import def #extern #dllimport CertSaveStore(hCertStore: *, dwEncodingType: ulong, dwSaveAs: ulong, dwSaveTo: ulong, pvSaveToPara: *, dwFlags: ulong) -> int
export import def #extern #dllimport CertCloseStore(hCertStore: *, dwFlags: ulong) -> int
export import def #extern #dllimport CertGetSubjectCertificateFromStore(hCertStore: *, dwCertEncodingType: ulong, pCertId: *s__CERT_INFO) -> *s__CERT_CONTEXT
export import def #extern #dllimport CertEnumCertificatesInStore(hCertStore: *, pPrevCertContext: *s__CERT_CONTEXT) -> *s__CERT_CONTEXT
export import def #extern #dllimport CertFindCertificateInStore(hCertStore: *, dwCertEncodingType: ulong, dwFindFlags: ulong, dwFindType: ulong, pvFindPara: *, pPrevCertContext: *s__CERT_CONTEXT) -> *s__CERT_CONTEXT
export import def #extern #dllimport CertGetIssuerCertificateFromStore(hCertStore: *, pSubjectContext: *s__CERT_CONTEXT, pPrevIssuerContext: *s__CERT_CONTEXT, pdwFlags: *ulong) -> *s__CERT_CONTEXT
export import def #extern #dllimport CertVerifySubjectCertificateContext(pSubject: *s__CERT_CONTEXT, pIssuer: *s__CERT_CONTEXT, pdwFlags: *ulong) -> int
export import def #extern #dllimport CertDuplicateCertificateContext(pCertContext: *s__CERT_CONTEXT) -> *s__CERT_CONTEXT
export import def #extern #dllimport CertCreateCertificateContext(dwCertEncodingType: ulong, pbCertEncoded: *uint8, cbCertEncoded: ulong) -> *s__CERT_CONTEXT
export import def #extern #dllimport CertFreeCertificateContext(pCertContext: *s__CERT_CONTEXT) -> int
export import def #extern #dllimport CertSetCertificateContextProperty(pCertContext: *s__CERT_CONTEXT, dwPropId: ulong, dwFlags: ulong, pvData: *) -> int
export import def #extern #dllimport CertGetCertificateContextProperty(pCertContext: *s__CERT_CONTEXT, dwPropId: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CertEnumCertificateContextProperties(pCertContext: *s__CERT_CONTEXT, dwPropId: ulong) -> ulong
export import def #extern #dllimport CertCreateCTLEntryFromCertificateContextProperties(pCertContext: *s__CERT_CONTEXT, cOptAttr: ulong, rgOptAttr: *s__CRYPT_ATTRIBUTE, dwFlags: ulong, pvReserved: *, pCtlEntry: *s__CTL_ENTRY, pcbCtlEntry: *ulong) -> int
export import def #extern #dllimport CertSetCertificateContextPropertiesFromCTLEntry(pCertContext: *s__CERT_CONTEXT, pCtlEntry: *s__CTL_ENTRY, dwFlags: ulong) -> int
export import def #extern #dllimport CertGetCRLFromStore(hCertStore: *, pIssuerContext: *s__CERT_CONTEXT, pPrevCrlContext: *s__CRL_CONTEXT, pdwFlags: *ulong) -> *s__CRL_CONTEXT
export import def #extern #dllimport CertEnumCRLsInStore(hCertStore: *, pPrevCrlContext: *s__CRL_CONTEXT) -> *s__CRL_CONTEXT
export import def #extern #dllimport CertFindCRLInStore(hCertStore: *, dwCertEncodingType: ulong, dwFindFlags: ulong, dwFindType: ulong, pvFindPara: *, pPrevCrlContext: *s__CRL_CONTEXT) -> *s__CRL_CONTEXT
export import def #extern #dllimport CertDuplicateCRLContext(pCrlContext: *s__CRL_CONTEXT) -> *s__CRL_CONTEXT
export import def #extern #dllimport CertCreateCRLContext(dwCertEncodingType: ulong, pbCrlEncoded: *uint8, cbCrlEncoded: ulong) -> *s__CRL_CONTEXT
export import def #extern #dllimport CertFreeCRLContext(pCrlContext: *s__CRL_CONTEXT) -> int
export import def #extern #dllimport CertSetCRLContextProperty(pCrlContext: *s__CRL_CONTEXT, dwPropId: ulong, dwFlags: ulong, pvData: *) -> int
export import def #extern #dllimport CertGetCRLContextProperty(pCrlContext: *s__CRL_CONTEXT, dwPropId: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CertEnumCRLContextProperties(pCrlContext: *s__CRL_CONTEXT, dwPropId: ulong) -> ulong
export import def #extern #dllimport CertFindCertificateInCRL(pCert: *s__CERT_CONTEXT, pCrlContext: *s__CRL_CONTEXT, dwFlags: ulong, pvReserved: *, ppCrlEntry: **s__CRL_ENTRY) -> int
export import def #extern #dllimport CertIsValidCRLForCertificate(pCert: *s__CERT_CONTEXT, pCrl: *s__CRL_CONTEXT, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CertAddEncodedCertificateToStore(hCertStore: *, dwCertEncodingType: ulong, pbCertEncoded: *uint8, cbCertEncoded: ulong, dwAddDisposition: ulong, ppCertContext: **s__CERT_CONTEXT) -> int
export import def #extern #dllimport CertAddCertificateContextToStore(hCertStore: *, pCertContext: *s__CERT_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **s__CERT_CONTEXT) -> int
export import def #extern #dllimport CertAddSerializedElementToStore(hCertStore: *, pbElement: *uint8, cbElement: ulong, dwAddDisposition: ulong, dwFlags: ulong, dwContextTypeFlags: ulong, pdwContextType: *ulong, ppvContext: **) -> int
export import def #extern #dllimport CertDeleteCertificateFromStore(pCertContext: *s__CERT_CONTEXT) -> int
export import def #extern #dllimport CertAddEncodedCRLToStore(hCertStore: *, dwCertEncodingType: ulong, pbCrlEncoded: *uint8, cbCrlEncoded: ulong, dwAddDisposition: ulong, ppCrlContext: **s__CRL_CONTEXT) -> int
export import def #extern #dllimport CertAddCRLContextToStore(hCertStore: *, pCrlContext: *s__CRL_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **s__CRL_CONTEXT) -> int
export import def #extern #dllimport CertDeleteCRLFromStore(pCrlContext: *s__CRL_CONTEXT) -> int
export import def #extern #dllimport CertSerializeCertificateStoreElement(pCertContext: *s__CERT_CONTEXT, dwFlags: ulong, pbElement: *uint8, pcbElement: *ulong) -> int
export import def #extern #dllimport CertSerializeCRLStoreElement(pCrlContext: *s__CRL_CONTEXT, dwFlags: ulong, pbElement: *uint8, pcbElement: *ulong) -> int
export import def #extern #dllimport CertDuplicateCTLContext(pCtlContext: *s__CTL_CONTEXT) -> *s__CTL_CONTEXT
export import def #extern #dllimport CertCreateCTLContext(dwMsgAndCertEncodingType: ulong, pbCtlEncoded: *uint8, cbCtlEncoded: ulong) -> *s__CTL_CONTEXT
export import def #extern #dllimport CertFreeCTLContext(pCtlContext: *s__CTL_CONTEXT) -> int
export import def #extern #dllimport CertSetCTLContextProperty(pCtlContext: *s__CTL_CONTEXT, dwPropId: ulong, dwFlags: ulong, pvData: *) -> int
export import def #extern #dllimport CertGetCTLContextProperty(pCtlContext: *s__CTL_CONTEXT, dwPropId: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CertEnumCTLContextProperties(pCtlContext: *s__CTL_CONTEXT, dwPropId: ulong) -> ulong
export import def #extern #dllimport CertEnumCTLsInStore(hCertStore: *, pPrevCtlContext: *s__CTL_CONTEXT) -> *s__CTL_CONTEXT
export import def #extern #dllimport CertFindSubjectInCTL(dwEncodingType: ulong, dwSubjectType: ulong, pvSubject: *, pCtlContext: *s__CTL_CONTEXT, dwFlags: ulong) -> *s__CTL_ENTRY
export import def #extern #dllimport CertFindCTLInStore(hCertStore: *, dwMsgAndCertEncodingType: ulong, dwFindFlags: ulong, dwFindType: ulong, pvFindPara: *, pPrevCtlContext: *s__CTL_CONTEXT) -> *s__CTL_CONTEXT
export import def #extern #dllimport CertAddEncodedCTLToStore(hCertStore: *, dwMsgAndCertEncodingType: ulong, pbCtlEncoded: *uint8, cbCtlEncoded: ulong, dwAddDisposition: ulong, ppCtlContext: **s__CTL_CONTEXT) -> int
export import def #extern #dllimport CertAddCTLContextToStore(hCertStore: *, pCtlContext: *s__CTL_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **s__CTL_CONTEXT) -> int
export import def #extern #dllimport CertSerializeCTLStoreElement(pCtlContext: *s__CTL_CONTEXT, dwFlags: ulong, pbElement: *uint8, pcbElement: *ulong) -> int
export import def #extern #dllimport CertDeleteCTLFromStore(pCtlContext: *s__CTL_CONTEXT) -> int
export import def #extern #dllimport CertAddCertificateLinkToStore(hCertStore: *, pCertContext: *s__CERT_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **s__CERT_CONTEXT) -> int
export import def #extern #dllimport CertAddCRLLinkToStore(hCertStore: *, pCrlContext: *s__CRL_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **s__CRL_CONTEXT) -> int
export import def #extern #dllimport CertAddCTLLinkToStore(hCertStore: *, pCtlContext: *s__CTL_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **s__CTL_CONTEXT) -> int
export import def #extern #dllimport CertAddStoreToCollection(hCollectionStore: *, hSiblingStore: *, dwUpdateFlags: ulong, dwPriority: ulong) -> int
export import def #extern #dllimport CertRemoveStoreFromCollection(hCollectionStore: *, hSiblingStore: *)
export import def #extern #dllimport CertControlStore(hCertStore: *, dwFlags: ulong, dwCtrlType: ulong, pvCtrlPara: *) -> int
export import def #extern #dllimport CertSetStoreProperty(hCertStore: *, dwPropId: ulong, dwFlags: ulong, pvData: *) -> int
export import def #extern #dllimport CertGetStoreProperty(hCertStore: *, dwPropId: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CertCreateContext(dwContextType: ulong, dwEncodingType: ulong, pbEncoded: *uint8, cbEncoded: ulong, dwFlags: ulong, pCreatePara: *s__CERT_CREATE_CONTEXT_PARA) -> *
export import def #extern #dllimport CertRegisterSystemStore(pvSystemStore: *, dwFlags: ulong, pStoreInfo: *s__CERT_SYSTEM_STORE_INFO, pvReserved: *) -> int
export import def #extern #dllimport CertRegisterPhysicalStore(pvSystemStore: *, dwFlags: ulong, pwszStoreName: *ushort, pStoreInfo: *s__CERT_PHYSICAL_STORE_INFO, pvReserved: *) -> int
export import def #extern #dllimport CertUnregisterSystemStore(pvSystemStore: *, dwFlags: ulong) -> int
export import def #extern #dllimport CertUnregisterPhysicalStore(pvSystemStore: *, dwFlags: ulong, pwszStoreName: *ushort) -> int
export import def #extern #dllimport CertEnumSystemStoreLocation(dwFlags: ulong, pvArg: *, pfnEnum: def (*ushort, ulong, *, *) -> (int)) -> int
export import def #extern #dllimport CertEnumSystemStore(dwFlags: ulong, pvSystemStoreLocationPara: *, pvArg: *, pfnEnum: def (*, ulong, *s__CERT_SYSTEM_STORE_INFO, *, *) -> (int)) -> int
export import def #extern #dllimport CertEnumPhysicalStore(pvSystemStore: *, dwFlags: ulong, pvArg: *, pfnEnum: def (*, ulong, *ushort, *s__CERT_PHYSICAL_STORE_INFO, *, *) -> (int)) -> int
export import def #extern #dllimport CertGetEnhancedKeyUsage(pCertContext: *s__CERT_CONTEXT, dwFlags: ulong, pUsage: *s__CTL_USAGE, pcbUsage: *ulong) -> int
export import def #extern #dllimport CertSetEnhancedKeyUsage(pCertContext: *s__CERT_CONTEXT, pUsage: *s__CTL_USAGE) -> int
export import def #extern #dllimport CertAddEnhancedKeyUsageIdentifier(pCertContext: *s__CERT_CONTEXT, pszUsageIdentifier: *char) -> int
export import def #extern #dllimport CertRemoveEnhancedKeyUsageIdentifier(pCertContext: *s__CERT_CONTEXT, pszUsageIdentifier: *char) -> int
export import def #extern #dllimport CertGetValidUsages(cCerts: ulong, rghCerts: **s__CERT_CONTEXT, cNumOIDs: *int, rghOIDs: **char, pcbOIDs: *ulong) -> int
export import def #extern #dllimport CryptMsgGetAndVerifySigner(hCryptMsg: *, cSignerStore: ulong, rghSignerStore: **, dwFlags: ulong, ppSigner: **s__CERT_CONTEXT, pdwSignerIndex: *ulong) -> int
export import def #extern #dllimport CryptMsgSignCTL(dwMsgEncodingType: ulong, pbCtlContent: *uint8, cbCtlContent: ulong, pSignInfo: *s__CMSG_SIGNED_ENCODE_INFO, dwFlags: ulong, pbEncoded: *uint8, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CryptMsgEncodeAndSignCTL(dwMsgEncodingType: ulong, pCtlInfo: *s__CTL_INFO, pSignInfo: *s__CMSG_SIGNED_ENCODE_INFO, dwFlags: ulong, pbEncoded: *uint8, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CertFindSubjectInSortedCTL(pSubjectIdentifier: *s__CRYPTOAPI_BLOB, pCtlContext: *s__CTL_CONTEXT, dwFlags: ulong, pvReserved: *, pEncodedAttributes: *s__CRYPTOAPI_BLOB) -> int
export import def #extern #dllimport CertEnumSubjectInSortedCTL(pCtlContext: *s__CTL_CONTEXT, ppvNextSubject: **, pSubjectIdentifier: *s__CRYPTOAPI_BLOB, pEncodedAttributes: *s__CRYPTOAPI_BLOB) -> int
export import def #extern #dllimport CertVerifyCTLUsage(dwEncodingType: ulong, dwSubjectType: ulong, pvSubject: *, pSubjectUsage: *s__CTL_USAGE, dwFlags: ulong, pVerifyUsagePara: *s__CTL_VERIFY_USAGE_PARA, pVerifyUsageStatus: *s__CTL_VERIFY_USAGE_STATUS) -> int
export import def #extern #dllimport CertVerifyRevocation(dwEncodingType: ulong, dwRevType: ulong, cContext: ulong, rgpvContext: **, dwFlags: ulong, pRevPara: *s__CERT_REVOCATION_PARA, pRevStatus: *s__CERT_REVOCATION_STATUS) -> int
export import def #extern CertCompareIntegerBlob(pInt1: *s__CRYPTOAPI_BLOB, pInt2: *s__CRYPTOAPI_BLOB) -> int
export import def #extern #dllimport CertCompareCertificate(dwCertEncodingType: ulong, pCertId1: *s__CERT_INFO, pCertId2: *s__CERT_INFO) -> int
export import def #extern #dllimport CertCompareCertificateName(dwCertEncodingType: ulong, pCertName1: *s__CRYPTOAPI_BLOB, pCertName2: *s__CRYPTOAPI_BLOB) -> int
export import def #extern #dllimport CertIsRDNAttrsInCertificateName(dwCertEncodingType: ulong, dwFlags: ulong, pCertName: *s__CRYPTOAPI_BLOB, pRDN: *s__CERT_RDN) -> int
export import def #extern #dllimport CertComparePublicKeyInfo(dwCertEncodingType: ulong, pPublicKey1: *s__CERT_PUBLIC_KEY_INFO, pPublicKey2: *s__CERT_PUBLIC_KEY_INFO) -> int
export import def #extern #dllimport CertGetPublicKeyLength(dwCertEncodingType: ulong, pPublicKey: *s__CERT_PUBLIC_KEY_INFO) -> ulong
export import def #extern #dllimport CryptVerifyCertificateSignature(hCryptProv: uint64, dwCertEncodingType: ulong, pbEncoded: *uint8, cbEncoded: ulong, pPublicKey: *s__CERT_PUBLIC_KEY_INFO) -> int
export import def #extern #dllimport CryptVerifyCertificateSignatureEx(hCryptProv: uint64, dwCertEncodingType: ulong, dwSubjectType: ulong, pvSubject: *, dwIssuerType: ulong, pvIssuer: *, dwFlags: ulong, pvExtra: *) -> int
export import def #extern #dllimport CertIsStrongHashToSign(pStrongSignPara: *s__CERT_STRONG_SIGN_PARA, pwszCNGHashAlgid: *ushort, pSigningCert: *s__CERT_CONTEXT) -> int
export import def #extern #dllimport CryptHashToBeSigned(hCryptProv: uint64, dwCertEncodingType: ulong, pbEncoded: *uint8, cbEncoded: ulong, pbComputedHash: *uint8, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptHashCertificate(hCryptProv: uint64, Algid: uint, dwFlags: ulong, pbEncoded: *uint8, cbEncoded: ulong, pbComputedHash: *uint8, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptHashCertificate2(pwszCNGHashAlgid: *ushort, dwFlags: ulong, pvReserved: *, pbEncoded: *uint8, cbEncoded: ulong, pbComputedHash: *uint8, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptSignCertificate(hCryptProvOrNCryptKey: uint64, dwKeySpec: ulong, dwCertEncodingType: ulong, pbEncodedToBeSigned: *uint8, cbEncodedToBeSigned: ulong, pSignatureAlgorithm: *s__CRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: *, pbSignature: *uint8, pcbSignature: *ulong) -> int
export import def #extern #dllimport CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey: uint64, dwKeySpec: ulong, dwCertEncodingType: ulong, lpszStructType: *char, pvStructInfo: *, pSignatureAlgorithm: *s__CRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: *, pbEncoded: *uint8, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CertVerifyTimeValidity(pTimeToVerify: *s__FILETIME, pCertInfo: *s__CERT_INFO) -> long
export import def #extern #dllimport CertVerifyCRLTimeValidity(pTimeToVerify: *s__FILETIME, pCrlInfo: *s__CRL_INFO) -> long
export import def #extern #dllimport CertVerifyValidityNesting(pSubjectInfo: *s__CERT_INFO, pIssuerInfo: *s__CERT_INFO) -> int
export import def #extern #dllimport CertVerifyCRLRevocation(dwCertEncodingType: ulong, pCertId: *s__CERT_INFO, cCrlInfo: ulong, rgpCrlInfo: **s__CRL_INFO) -> int
export import def #extern #dllimport CertAlgIdToOID(dwAlgId: ulong) -> *char
export import def #extern #dllimport CertOIDToAlgId(pszObjId: *char) -> ulong
export import def #extern #dllimport CertFindExtension(pszObjId: *char, cExtensions: ulong, rgExtensions: *s__CERT_EXTENSION) -> *s__CERT_EXTENSION
export import def #extern #dllimport CertFindAttribute(pszObjId: *char, cAttr: ulong, rgAttr: *s__CRYPT_ATTRIBUTE) -> *s__CRYPT_ATTRIBUTE
export import def #extern #dllimport CertFindRDNAttr(pszObjId: *char, pName: *s__CERT_NAME_INFO) -> *s__CERT_RDN_ATTR
export import def #extern #dllimport CertGetIntendedKeyUsage(dwCertEncodingType: ulong, pCertInfo: *s__CERT_INFO, pbKeyUsage: *uint8, cbKeyUsage: ulong) -> int
export import def #extern #dllimport CryptInstallDefaultContext(hCryptProv: uint64, dwDefaultType: ulong, pvDefaultPara: *, dwFlags: ulong, pvReserved: *, phDefaultContext: **) -> int
export import def #extern #dllimport CryptUninstallDefaultContext(hDefaultContext: *, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptExportPublicKeyInfo(hCryptProvOrNCryptKey: uint64, dwKeySpec: ulong, dwCertEncodingType: ulong, pInfo: *s__CERT_PUBLIC_KEY_INFO, pcbInfo: *ulong) -> int
export import def #extern #dllimport CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey: uint64, dwKeySpec: ulong, dwCertEncodingType: ulong, pszPublicKeyObjId: *char, dwFlags: ulong, pvAuxInfo: *, pInfo: *s__CERT_PUBLIC_KEY_INFO, pcbInfo: *ulong) -> int
export import def #extern #dllimport CryptExportPublicKeyInfoFromBCryptKeyHandle(hBCryptKey: *, dwCertEncodingType: ulong, pszPublicKeyObjId: *char, dwFlags: ulong, pvAuxInfo: *, pInfo: *s__CERT_PUBLIC_KEY_INFO, pcbInfo: *ulong) -> int
export import def #extern #dllimport CryptImportPublicKeyInfo(hCryptProv: uint64, dwCertEncodingType: ulong, pInfo: *s__CERT_PUBLIC_KEY_INFO, phKey: *uint64) -> int
export import def #extern #dllimport CryptImportPublicKeyInfoEx(hCryptProv: uint64, dwCertEncodingType: ulong, pInfo: *s__CERT_PUBLIC_KEY_INFO, aiKeyAlg: uint, dwFlags: ulong, pvAuxInfo: *, phKey: *uint64) -> int
export import def #extern #dllimport CryptImportPublicKeyInfoEx2(dwCertEncodingType: ulong, pInfo: *s__CERT_PUBLIC_KEY_INFO, dwFlags: ulong, pvAuxInfo: *, phKey: **) -> int
export import def #extern #dllimport CryptAcquireCertificatePrivateKey(pCert: *s__CERT_CONTEXT, dwFlags: ulong, pvParameters: *, phCryptProvOrNCryptKey: *uint64, pdwKeySpec: *ulong, pfCallerFreeProvOrNCryptKey: *int) -> int
export import def #extern #dllimport CryptFindCertificateKeyProvInfo(pCert: *s__CERT_CONTEXT, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptImportPKCS8(sPrivateKeyAndParams: s__CRYPT_PKCS8_IMPORT_PARAMS, dwFlags: ulong, phCryptProv: *uint64, pvAuxInfo: *) -> int
export import def #extern #dllimport CryptExportPKCS8(hCryptProv: uint64, dwKeySpec: ulong, pszPrivateKeyObjId: *char, dwFlags: ulong, pvAuxInfo: *, pbPrivateKeyBlob: *uint8, pcbPrivateKeyBlob: *ulong) -> int
export import def #extern #dllimport CryptExportPKCS8Ex(psExportParams: *s__CRYPT_PKCS8_EXPORT_PARAMS, dwFlags: ulong, pvAuxInfo: *, pbPrivateKeyBlob: *uint8, pcbPrivateKeyBlob: *ulong) -> int
export import def #extern #dllimport CryptHashPublicKeyInfo(hCryptProv: uint64, Algid: uint, dwFlags: ulong, dwCertEncodingType: ulong, pInfo: *s__CERT_PUBLIC_KEY_INFO, pbComputedHash: *uint8, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CertRDNValueToStrA(dwValueType: ulong, pValue: *s__CRYPTOAPI_BLOB, psz: *char, csz: ulong) -> ulong
export import def #extern #dllimport CertRDNValueToStrW(dwValueType: ulong, pValue: *s__CRYPTOAPI_BLOB, psz: *ushort, csz: ulong) -> ulong
export import def #extern #dllimport CertNameToStrA(dwCertEncodingType: ulong, pName: *s__CRYPTOAPI_BLOB, dwStrType: ulong, psz: *char, csz: ulong) -> ulong
export import def #extern #dllimport CertNameToStrW(dwCertEncodingType: ulong, pName: *s__CRYPTOAPI_BLOB, dwStrType: ulong, psz: *ushort, csz: ulong) -> ulong
export import def #extern #dllimport CertStrToNameA(dwCertEncodingType: ulong, pszX500: *char, dwStrType: ulong, pvReserved: *, pbEncoded: *uint8, pcbEncoded: *ulong, ppszError: **char) -> int
export import def #extern #dllimport CertStrToNameW(dwCertEncodingType: ulong, pszX500: *ushort, dwStrType: ulong, pvReserved: *, pbEncoded: *uint8, pcbEncoded: *ulong, ppszError: **ushort) -> int
export import def #extern #dllimport CertGetNameStringA(pCertContext: *s__CERT_CONTEXT, dwType: ulong, dwFlags: ulong, pvTypePara: *, pszNameString: *char, cchNameString: ulong) -> ulong
export import def #extern #dllimport CertGetNameStringW(pCertContext: *s__CERT_CONTEXT, dwType: ulong, dwFlags: ulong, pvTypePara: *, pszNameString: *ushort, cchNameString: ulong) -> ulong
export import def #extern #dllimport CryptSignMessage(pSignPara: *s__CRYPT_SIGN_MESSAGE_PARA, fDetachedSignature: int, cToBeSigned: ulong, rgpbToBeSigned: **uint8, rgcbToBeSigned: *ulong, pbSignedBlob: *uint8, pcbSignedBlob: *ulong) -> int
export import def #extern #dllimport CryptVerifyMessageSignature(pVerifyPara: *s__CRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: ulong, pbSignedBlob: *uint8, cbSignedBlob: ulong, pbDecoded: *uint8, pcbDecoded: *ulong, ppSignerCert: **s__CERT_CONTEXT) -> int
export import def #extern #dllimport CryptGetMessageSignerCount(dwMsgEncodingType: ulong, pbSignedBlob: *uint8, cbSignedBlob: ulong) -> long
export import def #extern #dllimport CryptGetMessageCertificates(dwMsgAndCertEncodingType: ulong, hCryptProv: uint64, dwFlags: ulong, pbSignedBlob: *uint8, cbSignedBlob: ulong) -> *
export import def #extern #dllimport CryptVerifyDetachedMessageSignature(pVerifyPara: *s__CRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: ulong, pbDetachedSignBlob: *uint8, cbDetachedSignBlob: ulong, cToBeSigned: ulong, rgpbToBeSigned: **uint8, rgcbToBeSigned: *ulong, ppSignerCert: **s__CERT_CONTEXT) -> int
export import def #extern #dllimport CryptEncryptMessage(pEncryptPara: *s__CRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: ulong, rgpRecipientCert: **s__CERT_CONTEXT, pbToBeEncrypted: *uint8, cbToBeEncrypted: ulong, pbEncryptedBlob: *uint8, pcbEncryptedBlob: *ulong) -> int
export import def #extern #dllimport CryptDecryptMessage(pDecryptPara: *s__CRYPT_DECRYPT_MESSAGE_PARA, pbEncryptedBlob: *uint8, cbEncryptedBlob: ulong, pbDecrypted: *uint8, pcbDecrypted: *ulong, ppXchgCert: **s__CERT_CONTEXT) -> int
export import def #extern #dllimport CryptSignAndEncryptMessage(pSignPara: *s__CRYPT_SIGN_MESSAGE_PARA, pEncryptPara: *s__CRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: ulong, rgpRecipientCert: **s__CERT_CONTEXT, pbToBeSignedAndEncrypted: *uint8, cbToBeSignedAndEncrypted: ulong, pbSignedAndEncryptedBlob: *uint8, pcbSignedAndEncryptedBlob: *ulong) -> int
export import def #extern #dllimport CryptDecryptAndVerifyMessageSignature(pDecryptPara: *s__CRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: *s__CRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: ulong, pbEncryptedBlob: *uint8, cbEncryptedBlob: ulong, pbDecrypted: *uint8, pcbDecrypted: *ulong, ppXchgCert: **s__CERT_CONTEXT, ppSignerCert: **s__CERT_CONTEXT) -> int
export import def #extern #dllimport CryptDecodeMessage(dwMsgTypeFlags: ulong, pDecryptPara: *s__CRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: *s__CRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: ulong, pbEncodedBlob: *uint8, cbEncodedBlob: ulong, dwPrevInnerContentType: ulong, pdwMsgType: *ulong, pdwInnerContentType: *ulong, pbDecoded: *uint8, pcbDecoded: *ulong, ppXchgCert: **s__CERT_CONTEXT, ppSignerCert: **s__CERT_CONTEXT) -> int
export import def #extern #dllimport CryptHashMessage(pHashPara: *s__CRYPT_HASH_MESSAGE_PARA, fDetachedHash: int, cToBeHashed: ulong, rgpbToBeHashed: **uint8, rgcbToBeHashed: *ulong, pbHashedBlob: *uint8, pcbHashedBlob: *ulong, pbComputedHash: *uint8, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptVerifyMessageHash(pHashPara: *s__CRYPT_HASH_MESSAGE_PARA, pbHashedBlob: *uint8, cbHashedBlob: ulong, pbToBeHashed: *uint8, pcbToBeHashed: *ulong, pbComputedHash: *uint8, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptVerifyDetachedMessageHash(pHashPara: *s__CRYPT_HASH_MESSAGE_PARA, pbDetachedHashBlob: *uint8, cbDetachedHashBlob: ulong, cToBeHashed: ulong, rgpbToBeHashed: **uint8, rgcbToBeHashed: *ulong, pbComputedHash: *uint8, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptSignMessageWithKey(pSignPara: *s__CRYPT_KEY_SIGN_MESSAGE_PARA, pbToBeSigned: *uint8, cbToBeSigned: ulong, pbSignedBlob: *uint8, pcbSignedBlob: *ulong) -> int
export import def #extern #dllimport CryptVerifyMessageSignatureWithKey(pVerifyPara: *s__CRYPT_KEY_VERIFY_MESSAGE_PARA, pPublicKeyInfo: *s__CERT_PUBLIC_KEY_INFO, pbSignedBlob: *uint8, cbSignedBlob: ulong, pbDecoded: *uint8, pcbDecoded: *ulong) -> int
export import def #extern #dllimport CertOpenSystemStoreA(hProv: uint64, szSubsystemProtocol: *char) -> *
export import def #extern #dllimport CertOpenSystemStoreW(hProv: uint64, szSubsystemProtocol: *ushort) -> *
export import def #extern #dllimport CertAddEncodedCertificateToSystemStoreA(szCertStoreName: *char, pbCertEncoded: *uint8, cbCertEncoded: ulong) -> int
export import def #extern #dllimport CertAddEncodedCertificateToSystemStoreW(szCertStoreName: *ushort, pbCertEncoded: *uint8, cbCertEncoded: ulong) -> int
export import def #extern FindCertsByIssuer(pCertChains: *s__CERT_CHAIN, pcbCertChains: *ulong, pcCertChains: *ulong, pbEncodedIssuerName: *uint8, cbEncodedIssuerName: ulong, pwszPurpose: *ushort, dwKeySpec: ulong) -> long
export import def #extern #dllimport CryptQueryObject(dwObjectType: ulong, pvObject: *, dwExpectedContentTypeFlags: ulong, dwExpectedFormatTypeFlags: ulong, dwFlags: ulong, pdwMsgAndCertEncodingType: *ulong, pdwContentType: *ulong, pdwFormatType: *ulong, phCertStore: **, phMsg: **, ppvContext: **) -> int
export import def #extern #dllimport CryptMemAlloc(cbSize: ulong) -> *
export import def #extern #dllimport CryptMemRealloc(pv: *, cbSize: ulong) -> *
export import def #extern #dllimport CryptMemFree(pv: *)
export import def #extern #dllimport CryptCreateAsyncHandle(dwFlags: ulong, phAsync: **) -> int
export import def #extern #dllimport CryptSetAsyncParam(hAsync: *, pszParamOid: *char, pvParam: *, pfnFree: def (*char, *) -> ()) -> int
export import def #extern #dllimport CryptGetAsyncParam(hAsync: *, pszParamOid: *char, ppvParam: **, ppfnFree: def (*char, *) -> ()) -> int
export import def #extern #dllimport CryptCloseAsyncHandle(hAsync: *) -> int
export import def #extern #dllimport CryptRetrieveObjectByUrlA(pszUrl: *char, pszObjectOid: *char, dwRetrievalFlags: ulong, dwTimeout: ulong, ppvObject: **, hAsyncRetrieve: *, pCredentials: *s__CRYPT_CREDENTIALS, pvVerify: *, pAuxInfo: *s__CRYPT_RETRIEVE_AUX_INFO) -> int
export import def #extern #dllimport CryptRetrieveObjectByUrlW(pszUrl: *ushort, pszObjectOid: *char, dwRetrievalFlags: ulong, dwTimeout: ulong, ppvObject: **, hAsyncRetrieve: *, pCredentials: *s__CRYPT_CREDENTIALS, pvVerify: *, pAuxInfo: *s__CRYPT_RETRIEVE_AUX_INFO) -> int
export import def #extern #dllimport CryptInstallCancelRetrieval(pfnCancel: def (ulong, *) -> (int), pvArg: *, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptUninstallCancelRetrieval(dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptCancelAsyncRetrieval(hAsyncRetrieval: *) -> int
export import def #extern #dllimport CryptGetObjectUrl(pszUrlOid: *char, pvPara: *, dwFlags: ulong, pUrlArray: *s__CRYPT_URL_ARRAY, pcbUrlArray: *ulong, pUrlInfo: *s__CRYPT_URL_INFO, pcbUrlInfo: *ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptGetTimeValidObject(pszTimeValidOid: *char, pvPara: *, pIssuer: *s__CERT_CONTEXT, pftValidFor: *s__FILETIME, dwFlags: ulong, dwTimeout: ulong, ppvObject: **, pCredentials: *s__CRYPT_CREDENTIALS, pExtraInfo: *s__CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO) -> int
export import def #extern #dllimport CryptFlushTimeValidObject(pszFlushTimeValidOid: *char, pvPara: *, pIssuer: *s__CERT_CONTEXT, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CertCreateSelfSignCertificate(hCryptProvOrNCryptKey: uint64, pSubjectIssuerBlob: *s__CRYPTOAPI_BLOB, dwFlags: ulong, pKeyProvInfo: *s__CRYPT_KEY_PROV_INFO, pSignatureAlgorithm: *s__CRYPT_ALGORITHM_IDENTIFIER, pStartTime: *s__SYSTEMTIME, pEndTime: *s__SYSTEMTIME, pExtensions: *s__CERT_EXTENSIONS) -> *s__CERT_CONTEXT
export import def #extern #dllimport CryptGetKeyIdentifierProperty(pKeyIdentifier: *s__CRYPTOAPI_BLOB, dwPropId: ulong, dwFlags: ulong, pwszComputerName: *ushort, pvReserved: *, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CryptSetKeyIdentifierProperty(pKeyIdentifier: *s__CRYPTOAPI_BLOB, dwPropId: ulong, dwFlags: ulong, pwszComputerName: *ushort, pvReserved: *, pvData: *) -> int
export import def #extern #dllimport CryptEnumKeyIdentifierProperties(pKeyIdentifier: *s__CRYPTOAPI_BLOB, dwPropId: ulong, dwFlags: ulong, pwszComputerName: *ushort, pvReserved: *, pvArg: *, pfnEnum: def (*s__CRYPTOAPI_BLOB, ulong, *, *, ulong, *ulong, **, *ulong) -> (int)) -> int
export import def #extern #dllimport CryptCreateKeyIdentifierFromCSP(dwCertEncodingType: ulong, pszPubKeyOID: *char, pPubKeyStruc: *s__PUBLICKEYSTRUC, cbPubKeyStruc: ulong, dwFlags: ulong, pvReserved: *, pbHash: *uint8, pcbHash: *ulong) -> int
export import def #extern #dllimport CertCreateCertificateChainEngine(pConfig: *s__CERT_CHAIN_ENGINE_CONFIG, phChainEngine: **) -> int
export import def #extern #dllimport CertFreeCertificateChainEngine(hChainEngine: *)
export import def #extern #dllimport CertResyncCertificateChainEngine(hChainEngine: *) -> int
export import def #extern #dllimport CertGetCertificateChain(hChainEngine: *, pCertContext: *s__CERT_CONTEXT, pTime: *s__FILETIME, hAdditionalStore: *, pChainPara: *s__CERT_CHAIN_PARA, dwFlags: ulong, pvReserved: *, ppChainContext: **s__CERT_CHAIN_CONTEXT) -> int
export import def #extern #dllimport CertFreeCertificateChain(pChainContext: *s__CERT_CHAIN_CONTEXT)
export import def #extern #dllimport CertDuplicateCertificateChain(pChainContext: *s__CERT_CHAIN_CONTEXT) -> *s__CERT_CHAIN_CONTEXT
export import def #extern #dllimport CertFindChainInStore(hCertStore: *, dwCertEncodingType: ulong, dwFindFlags: ulong, dwFindType: ulong, pvFindPara: *, pPrevChainContext: *s__CERT_CHAIN_CONTEXT) -> *s__CERT_CHAIN_CONTEXT
export import def #extern #dllimport CertVerifyCertificateChainPolicy(pszPolicyOID: *char, pChainContext: *s__CERT_CHAIN_CONTEXT, pPolicyPara: *s__CERT_CHAIN_POLICY_PARA, pPolicyStatus: *s__CERT_CHAIN_POLICY_STATUS) -> int
export import def #extern #dllimport CryptStringToBinaryA(pszString: *char, cchString: ulong, dwFlags: ulong, pbBinary: *uint8, pcbBinary: *ulong, pdwSkip: *ulong, pdwFlags: *ulong) -> int
export import def #extern #dllimport CryptStringToBinaryW(pszString: *ushort, cchString: ulong, dwFlags: ulong, pbBinary: *uint8, pcbBinary: *ulong, pdwSkip: *ulong, pdwFlags: *ulong) -> int
export import def #extern #dllimport CryptBinaryToStringA(pbBinary: *uint8, cbBinary: ulong, dwFlags: ulong, pszString: *char, pcchString: *ulong) -> int
export import def #extern #dllimport CryptBinaryToStringW(pbBinary: *uint8, cbBinary: ulong, dwFlags: ulong, pszString: *ushort, pcchString: *ulong) -> int
export import def #extern #dllimport PFXImportCertStore(pPFX: *s__CRYPTOAPI_BLOB, szPassword: *ushort, dwFlags: ulong) -> *
export import def #extern #dllimport PFXIsPFXBlob(pPFX: *s__CRYPTOAPI_BLOB) -> int
export import def #extern #dllimport PFXVerifyPassword(pPFX: *s__CRYPTOAPI_BLOB, szPassword: *ushort, dwFlags: ulong) -> int
export import def #extern #dllimport PFXExportCertStoreEx(hStore: *, pPFX: *s__CRYPTOAPI_BLOB, szPassword: *ushort, pvPara: *, dwFlags: ulong) -> int
export import def #extern #dllimport PFXExportCertStore(hStore: *, pPFX: *s__CRYPTOAPI_BLOB, szPassword: *ushort, dwFlags: ulong) -> int
export import def #extern #dllimport CertOpenServerOcspResponse(pChainContext: *s__CERT_CHAIN_CONTEXT, dwFlags: ulong, pOpenPara: *s__CERT_SERVER_OCSP_RESPONSE_OPEN_PARA) -> *
export import def #extern #dllimport CertAddRefServerOcspResponse(hServerOcspResponse: *)
export import def #extern #dllimport CertCloseServerOcspResponse(hServerOcspResponse: *, dwFlags: ulong)
export import def #extern #dllimport CertGetServerOcspResponseContext(hServerOcspResponse: *, dwFlags: ulong, pvReserved: *) -> *s__CERT_SERVER_OCSP_RESPONSE_CONTEXT
export import def #extern #dllimport CertAddRefServerOcspResponseContext(pServerOcspResponseContext: *s__CERT_SERVER_OCSP_RESPONSE_CONTEXT)
export import def #extern #dllimport CertFreeServerOcspResponseContext(pServerOcspResponseContext: *s__CERT_SERVER_OCSP_RESPONSE_CONTEXT)
export import def #extern #dllimport CertRetrieveLogoOrBiometricInfo(pCertContext: *s__CERT_CONTEXT, lpszLogoOrBiometricType: *char, dwRetrievalFlags: ulong, dwTimeout: ulong, dwFlags: ulong, pvReserved: *, ppbData: **uint8, pcbData: *ulong, ppwszMimeType: **ushort) -> int
export import def #extern #dllimport CertSelectCertificateChains(pSelectionContext: *s__GUID, dwFlags: ulong, pChainParameters: *s__CERT_SELECT_CHAIN_PARA, cCriteria: ulong, rgpCriteria: *s__CERT_SELECT_CRITERIA, hStore: *, pcSelection: *ulong, pprgpSelection: ***s__CERT_CHAIN_CONTEXT) -> int
export import def #extern #dllimport CertFreeCertificateChainList(prgpSelection: **s__CERT_CHAIN_CONTEXT)
export import def #extern CryptRetrieveTimeStamp(wszUrl: *ushort, dwRetrievalFlags: ulong, dwTimeout: ulong, pszHashId: *char, pPara: *s__CRYPT_TIMESTAMP_PARA, pbData: *uint8, cbData: ulong, ppTsContext: **s__CRYPT_TIMESTAMP_CONTEXT, ppTsSigner: **s__CERT_CONTEXT, phStore: **) -> int
export import def #extern CryptVerifyTimeStampSignature(pbTSContentInfo: *uint8, cbTSContentInfo: ulong, pbData: *uint8, cbData: ulong, hAdditionalStore: *, ppTsContext: **s__CRYPT_TIMESTAMP_CONTEXT, ppTsSigner: **s__CERT_CONTEXT, phStore: **) -> int
export import def #extern #dllimport CertIsWeakHash(dwHashUseType: ulong, pwszCNGHashAlgid: *ushort, dwChainFlags: ulong, pSignerChainContext: *s__CERT_CHAIN_CONTEXT, pTimeStamp: *s__FILETIME, pwszFileName: *ushort) -> int
export import def #extern CryptProtectData(pDataIn: *s__CRYPTOAPI_BLOB, szDataDescr: *ushort, pOptionalEntropy: *s__CRYPTOAPI_BLOB, pvReserved: *, pPromptStruct: *s__CRYPTPROTECT_PROMPTSTRUCT, dwFlags: ulong, pDataOut: *s__CRYPTOAPI_BLOB) -> int
export import def #extern CryptUnprotectData(pDataIn: *s__CRYPTOAPI_BLOB, ppszDataDescr: **ushort, pOptionalEntropy: *s__CRYPTOAPI_BLOB, pvReserved: *, pPromptStruct: *s__CRYPTPROTECT_PROMPTSTRUCT, dwFlags: ulong, pDataOut: *s__CRYPTOAPI_BLOB) -> int
export import def #extern CryptProtectDataNoUI(pDataIn: *s__CRYPTOAPI_BLOB, szDataDescr: *ushort, pOptionalEntropy: *s__CRYPTOAPI_BLOB, pvReserved: *, pPromptStruct: *s__CRYPTPROTECT_PROMPTSTRUCT, dwFlags: ulong, pbOptionalPassword: *uint8, cbOptionalPassword: ulong, pDataOut: *s__CRYPTOAPI_BLOB) -> int
export import def #extern CryptUnprotectDataNoUI(pDataIn: *s__CRYPTOAPI_BLOB, ppszDataDescr: **ushort, pOptionalEntropy: *s__CRYPTOAPI_BLOB, pvReserved: *, pPromptStruct: *s__CRYPTPROTECT_PROMPTSTRUCT, dwFlags: ulong, pbOptionalPassword: *uint8, cbOptionalPassword: ulong, pDataOut: *s__CRYPTOAPI_BLOB) -> int
export import def #extern CryptUpdateProtectedState(pOldSid: *, pwszOldPassword: *ushort, dwFlags: ulong, pdwSuccessCount: *ulong, pdwFailureCount: *ulong) -> int
export import def #extern CryptProtectMemory(pDataIn: *, cbDataIn: ulong, dwFlags: ulong) -> int
export import def #extern CryptUnprotectMemory(pDataIn: *, cbDataIn: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport QueryUsersOnEncryptedFile(lpFileName: *ushort, pUsers: **s__ENCRYPTION_CERTIFICATE_HASH_LIST) -> ulong
export import def #extern #dllimport QueryRecoveryAgentsOnEncryptedFile(lpFileName: *ushort, pRecoveryAgents: **s__ENCRYPTION_CERTIFICATE_HASH_LIST) -> ulong
export import def #extern #dllimport RemoveUsersFromEncryptedFile(lpFileName: *ushort, pHashes: *s__ENCRYPTION_CERTIFICATE_HASH_LIST) -> ulong
export import def #extern #dllimport AddUsersToEncryptedFile(lpFileName: *ushort, pEncryptionCertificates: *s__ENCRYPTION_CERTIFICATE_LIST) -> ulong
export import def #extern #dllimport SetUserFileEncryptionKey(pEncryptionCertificate: *s__ENCRYPTION_CERTIFICATE) -> ulong
export import def #extern #dllimport SetUserFileEncryptionKeyEx(pEncryptionCertificate: *s__ENCRYPTION_CERTIFICATE, dwCapabilities: ulong, dwFlags: ulong, pvReserved: *) -> ulong
export import def #extern #dllimport FreeEncryptionCertificateHashList(pUsers: *s__ENCRYPTION_CERTIFICATE_HASH_LIST)
export import def #extern #dllimport EncryptionDisable(DirPath: *ushort, Disable: int) -> int
export import def #extern #dllimport DuplicateEncryptionInfoFile(SrcFileName: *ushort, DstFileName: *ushort, dwCreationDistribution: ulong, dwAttributes: ulong, lpSecurityAttributes: *s__SECURITY_ATTRIBUTES) -> ulong
export import def #extern #dllimport GetEncryptedFileMetadata(lpFileName: *ushort, pcbMetadata: *ulong, ppbMetadata: **uint8) -> ulong
export import def #extern #dllimport SetEncryptedFileMetadata(lpFileName: *ushort, pbOldMetadata: *uint8, pbNewMetadata: *uint8, pOwnerHash: *s__ENCRYPTION_CERTIFICATE_HASH, dwOperation: ulong, pCertificatesAdded: *s__ENCRYPTION_CERTIFICATE_HASH_LIST) -> ulong
export import def #extern #dllimport FreeEncryptedFileMetadata(pbMetadata: *uint8)
export import def #extern #dllimport I_RpcNsGetBuffer(Message: *s__RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcNsSendReceive(Message: *s__RPC_MESSAGE, Handle: **) -> long
export import def #extern #dllimport I_RpcNsRaiseException(Message: *s__RPC_MESSAGE, Status: long)
export import def #extern #dllimport I_RpcReBindBuffer(Message: *s__RPC_MESSAGE) -> long
export import def #extern #dllimport I_NsServerBindSearch() -> long
export import def #extern #dllimport I_NsClientBindSearch() -> long
export import def #extern #dllimport I_NsClientBindDone()
export import def #extern MIDL_user_allocate(size: uint64) -> *
export import def #extern MIDL_user_free(_0: *)
export import def #extern I_RpcDefaultAllocate(bh: *, size: uint64, RealAlloc: def (uint64) -> (*)) -> *
export import def #extern I_RpcDefaultFree(bh: *, _1: *, RealFree: def (*) -> ())
export import def #extern #dllimport NDRCContextBinding(CContext: *) -> *
export import def #extern #dllimport NDRCContextMarshall(CContext: *, pBuff: *)
export import def #extern #dllimport NDRCContextUnmarshall(pCContext: **, hBinding: *, pBuff: *, DataRepresentation: ulong)
export import def #extern #dllimport NDRCContextUnmarshall2(pCContext: **, hBinding: *, pBuff: *, DataRepresentation: ulong)
export import def #extern #dllimport NDRSContextMarshall(CContext: *s__NDR_SCONTEXT, pBuff: *, userRunDownIn: def (*) -> ())
export import def #extern #dllimport NDRSContextUnmarshall(pBuff: *, DataRepresentation: ulong) -> *s__NDR_SCONTEXT
export import def #extern #dllimport NDRSContextMarshallEx(BindingHandle: *, CContext: *s__NDR_SCONTEXT, pBuff: *, userRunDownIn: def (*) -> ())
export import def #extern #dllimport NDRSContextMarshall2(BindingHandle: *, CContext: *s__NDR_SCONTEXT, pBuff: *, userRunDownIn: def (*) -> (), CtxGuard: *, Flags: ulong)
export import def #extern #dllimport NDRSContextUnmarshallEx(BindingHandle: *, pBuff: *, DataRepresentation: ulong) -> *s__NDR_SCONTEXT
export import def #extern #dllimport NDRSContextUnmarshall2(BindingHandle: *, pBuff: *, DataRepresentation: ulong, CtxGuard: *, Flags: ulong) -> *s__NDR_SCONTEXT
export import def #extern #dllimport RpcSsDestroyClientContext(ContextHandle: **)
export const USER_MARSHAL_CB_BUFFER_SIZE: int = 0
export const USER_MARSHAL_CB_MARSHALL: int = 1
export const USER_MARSHAL_CB_UNMARSHALL: int = 2
export const USER_MARSHAL_CB_FREE: int = 3
export const IDL_CS_NO_CONVERT: int = 0
export const IDL_CS_IN_PLACE_CONVERT: int = 1
export const IDL_CS_NEW_BUFFER_CONVERT: int = 2
export import def #extern RpcCsGetTags(hBinding: *, fServerSide: int, pulSendingTag: *ulong, pulDesiredReceivingTag: *ulong, pulReceivingTag: *ulong, pStatus: *ulong)
export const XLAT_SERVER: int = 1
export const XLAT_CLIENT: int = 2
export const SYSTEM_HANDLE_FILE: int = 0
export const SYSTEM_HANDLE_SEMAPHORE: int = 1
export const SYSTEM_HANDLE_EVENT: int = 2
export const SYSTEM_HANDLE_MUTEX: int = 3
export const SYSTEM_HANDLE_PROCESS: int = 4
export const SYSTEM_HANDLE_TOKEN: int = 5
export const SYSTEM_HANDLE_SECTION: int = 6
export const SYSTEM_HANDLE_REG_KEY: int = 7
export const SYSTEM_HANDLE_THREAD: int = 8
export const SYSTEM_HANDLE_COMPOSITION_OBJECT: int = 9
export const SYSTEM_HANDLE_SOCKET: int = 10
export const SYSTEM_HANDLE_JOB: int = 11
export const SYSTEM_HANDLE_PIPE: int = 12
export const SYSTEM_HANDLE_MAX: int = 12
export const SYSTEM_HANDLE_INVALID: int = 255
export const MidlInterceptionInfoVersionOne: int = 1
export const MidlWinrtTypeSerializationInfoVersionOne: int = 1
export import def #extern NdrClientGetSupportedSyntaxes(pInf: *s__RPC_CLIENT_INTERFACE, pCount: *ulong, pArr: **s__MIDL_SYNTAX_INFO) -> long
export import def #extern NdrServerGetSupportedSyntaxes(pInf: *s__RPC_SERVER_INTERFACE, pCount: *ulong, pArr: **s__MIDL_SYNTAX_INFO, pPreferSyntaxIndex: *ulong) -> long
export import def #extern #dllimport NdrSimpleTypeMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, FormatChar: uint8)
export import def #extern #dllimport NdrPointerMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrCsArrayMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrCsTagMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrSimpleStructMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrConformantStructMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrConformantVaryingStructMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrComplexStructMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrFixedArrayMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrConformantArrayMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrConformantVaryingArrayMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrVaryingArrayMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrComplexArrayMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrNonConformantStringMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrConformantStringMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrEncapsulatedUnionMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrNonEncapsulatedUnionMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrByteCountPointerMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrXmitOrRepAsMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrUserMarshalMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrInterfacePointerMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8) -> *uint8
export import def #extern #dllimport NdrClientContextMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ContextHandle: *, fCheck: int)
export import def #extern #dllimport NdrServerContextMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ContextHandle: *s__NDR_SCONTEXT, RundownRoutine: def (*) -> ())
export import def #extern #dllimport NdrServerContextNewMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ContextHandle: *s__NDR_SCONTEXT, RundownRoutine: def (*) -> (), pFormat: *uint8)
export import def #extern #dllimport NdrSimpleTypeUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, FormatChar: uint8)
export import def #extern #dllimport NdrCsArrayUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrCsTagUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrRangeUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrCorrelationInitialize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *, CacheSize: ulong, flags: ulong)
export import def #extern #dllimport NdrCorrelationPass(pStubMsg: *s__MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrCorrelationFree(pStubMsg: *s__MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrPointerUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrSimpleStructUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrConformantStructUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrConformantVaryingStructUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrComplexStructUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrFixedArrayUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrConformantArrayUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrConformantVaryingArrayUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrVaryingArrayUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrComplexArrayUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrNonConformantStringUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrConformantStringUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrEncapsulatedUnionUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrNonEncapsulatedUnionUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrByteCountPointerUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrXmitOrRepAsUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrUserMarshalUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrInterfacePointerUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **uint8, pFormat: *uint8, fMustAlloc: uint8) -> *uint8
export import def #extern #dllimport NdrClientContextUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pContextHandle: **, BindHandle: *)
export import def #extern #dllimport NdrServerContextUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE) -> *s__NDR_SCONTEXT
export import def #extern #dllimport NdrContextHandleInitialize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> *s__NDR_SCONTEXT
export import def #extern #dllimport NdrServerContextNewUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> *s__NDR_SCONTEXT
export import def #extern #dllimport NdrPointerBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrCsArrayBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrCsTagBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrSimpleStructBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantStructBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantVaryingStructBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrComplexStructBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrFixedArrayBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantArrayBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantVaryingArrayBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrVaryingArrayBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrComplexArrayBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantStringBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrNonConformantStringBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrEncapsulatedUnionBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrNonEncapsulatedUnionBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrByteCountPointerBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrXmitOrRepAsBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrUserMarshalBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrInterfacePointerBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrContextHandleSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrPointerMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrContextHandleMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrCsArrayMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrCsTagMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrSimpleStructMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrConformantStructMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrConformantVaryingStructMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrComplexStructMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrFixedArrayMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrConformantArrayMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrConformantVaryingArrayMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrVaryingArrayMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrComplexArrayMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrConformantStringMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrNonConformantStringMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrEncapsulatedUnionMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrNonEncapsulatedUnionMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrXmitOrRepAsMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrUserMarshalMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrInterfacePointerMemorySize(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8) -> ulong
export import def #extern #dllimport NdrPointerFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrCsArrayFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrSimpleStructFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantStructFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantVaryingStructFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrComplexStructFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrFixedArrayFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantArrayFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConformantVaryingArrayFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrVaryingArrayFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrComplexArrayFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrEncapsulatedUnionFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrNonEncapsulatedUnionFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrByteCountPointerFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrXmitOrRepAsFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrUserMarshalFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrInterfacePointerFree(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *uint8, pFormat: *uint8)
export import def #extern #dllimport NdrConvert2(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8, NumberParams: long)
export import def #extern #dllimport NdrConvert(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8)
export import def #extern #dllimport NdrUserMarshalSimpleTypeConvert(pFlags: *ulong, pBuffer: *uint8, FormatChar: uint8) -> *uint8
export import def #extern #dllimport NdrClientInitializeNew(pRpcMsg: *s__RPC_MESSAGE, pStubMsg: *s__MIDL_STUB_MESSAGE, pStubDescriptor: *s__MIDL_STUB_DESC, ProcNum: uint)
export import def #extern #dllimport NdrServerInitializeNew(pRpcMsg: *s__RPC_MESSAGE, pStubMsg: *s__MIDL_STUB_MESSAGE, pStubDescriptor: *s__MIDL_STUB_DESC) -> *uint8
export import def #extern #dllimport NdrServerInitializePartial(pRpcMsg: *s__RPC_MESSAGE, pStubMsg: *s__MIDL_STUB_MESSAGE, pStubDescriptor: *s__MIDL_STUB_DESC, RequestedBufferSize: ulong)
export import def #extern #dllimport NdrClientInitialize(pRpcMsg: *s__RPC_MESSAGE, pStubMsg: *s__MIDL_STUB_MESSAGE, pStubDescriptor: *s__MIDL_STUB_DESC, ProcNum: uint)
export import def #extern #dllimport NdrServerInitialize(pRpcMsg: *s__RPC_MESSAGE, pStubMsg: *s__MIDL_STUB_MESSAGE, pStubDescriptor: *s__MIDL_STUB_DESC) -> *uint8
export import def #extern #dllimport NdrServerInitializeUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pStubDescriptor: *s__MIDL_STUB_DESC, pRpcMsg: *s__RPC_MESSAGE) -> *uint8
export import def #extern #dllimport NdrServerInitializeMarshall(pRpcMsg: *s__RPC_MESSAGE, pStubMsg: *s__MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrGetBuffer(pStubMsg: *s__MIDL_STUB_MESSAGE, BufferLength: ulong, Handle: *) -> *uint8
export import def #extern #dllimport NdrNsGetBuffer(pStubMsg: *s__MIDL_STUB_MESSAGE, BufferLength: ulong, Handle: *) -> *uint8
export import def #extern #dllimport NdrSendReceive(pStubMsg: *s__MIDL_STUB_MESSAGE, pBufferEnd: *uint8) -> *uint8
export import def #extern #dllimport NdrNsSendReceive(pStubMsg: *s__MIDL_STUB_MESSAGE, pBufferEnd: *uint8, pAutoHandle: **) -> *uint8
export import def #extern #dllimport NdrFreeBuffer(pStubMsg: *s__MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrGetDcomProtocolVersion(pStubMsg: *s__MIDL_STUB_MESSAGE, pVersion: *s__RPC_VERSION) -> long
export import def #extern NdrClientCall2(pStubDescriptor: *s__MIDL_STUB_DESC, pFormat: *uint8, ...) -> u__CLIENT_CALL_RETURN
export import def #extern NdrClientCall(pStubDescriptor: *s__MIDL_STUB_DESC, pFormat: *uint8, ...) -> u__CLIENT_CALL_RETURN
export import def #extern NdrAsyncClientCall(pStubDescriptor: *s__MIDL_STUB_DESC, pFormat: *uint8, ...) -> u__CLIENT_CALL_RETURN
export import def #extern NdrDcomAsyncClientCall(pStubDescriptor: *s__MIDL_STUB_DESC, pFormat: *uint8, ...) -> u__CLIENT_CALL_RETURN
export const STUB_UNMARSHAL: int = 0
export const STUB_CALL_SERVER: int = 1
export const STUB_MARSHAL: int = 2
export const STUB_CALL_SERVER_NO_HRESULT: int = 3
export const PROXY_CALCSIZE: int = 0
export const PROXY_GETBUFFER: int = 1
export const PROXY_MARSHAL: int = 2
export const PROXY_SENDRECEIVE: int = 3
export const PROXY_UNMARSHAL: int = 4
export import def #extern #dllimport NdrAsyncServerCall(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport NdrAsyncStubCall(pThis: *s_IRpcStubBuffer, pChannel: *s_IRpcChannelBuffer, pRpcMsg: *s__RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrDcomAsyncStubCall(pThis: *s_IRpcStubBuffer, pChannel: *s_IRpcChannelBuffer, pRpcMsg: *s__RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrStubCall2(pThis: *, pChannel: *, pRpcMsg: *s__RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrServerCall2(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport NdrStubCall(pThis: *, pChannel: *, pRpcMsg: *s__RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrServerCall(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport NdrServerUnmarshall(pChannel: *, pRpcMsg: *s__RPC_MESSAGE, pStubMsg: *s__MIDL_STUB_MESSAGE, pStubDescriptor: *s__MIDL_STUB_DESC, pFormat: *uint8, pParamList: *) -> int
export import def #extern #dllimport NdrServerMarshall(pThis: *, pChannel: *, pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8)
export import def #extern #dllimport NdrMapCommAndFaultStatus(pStubMsg: *s__MIDL_STUB_MESSAGE, pCommStatus: *ulong, pFaultStatus: *ulong, Status: long) -> long
export import def #extern #dllimport RpcSsAllocate(Size: uint64) -> *
export import def #extern #dllimport RpcSsDisableAllocate()
export import def #extern #dllimport RpcSsEnableAllocate()
export import def #extern #dllimport RpcSsFree(NodeToFree: *)
export import def #extern #dllimport RpcSsGetThreadHandle() -> *
export import def #extern #dllimport RpcSsSetClientAllocFree(ClientAlloc: def (uint64) -> (*), ClientFree: def (*) -> ())
export import def #extern #dllimport RpcSsSetThreadHandle(Id: *)
export import def #extern #dllimport RpcSsSwapClientAllocFree(ClientAlloc: def (uint64) -> (*), ClientFree: def (*) -> (), OldClientAlloc: def (uint64) -> (*), OldClientFree: def (*) -> ())
export import def #extern #dllimport RpcSmAllocate(Size: uint64, pStatus: *long) -> *
export import def #extern #dllimport RpcSmClientFree(pNodeToFree: *) -> long
export import def #extern #dllimport RpcSmDestroyClientContext(ContextHandle: **) -> long
export import def #extern #dllimport RpcSmDisableAllocate() -> long
export import def #extern #dllimport RpcSmEnableAllocate() -> long
export import def #extern #dllimport RpcSmFree(NodeToFree: *) -> long
export import def #extern #dllimport RpcSmGetThreadHandle(pStatus: *long) -> *
export import def #extern #dllimport RpcSmSetClientAllocFree(ClientAlloc: def (uint64) -> (*), ClientFree: def (*) -> ()) -> long
export import def #extern #dllimport RpcSmSetThreadHandle(Id: *) -> long
export import def #extern #dllimport RpcSmSwapClientAllocFree(ClientAlloc: def (uint64) -> (*), ClientFree: def (*) -> (), OldClientAlloc: def (uint64) -> (*), OldClientFree: def (*) -> ()) -> long
export import def #extern #dllimport NdrRpcSsEnableAllocate(pMessage: *s__MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrRpcSsDisableAllocate(pMessage: *s__MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrRpcSmSetClientToOsf(pMessage: *s__MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrRpcSmClientAllocate(Size: uint64) -> *
export import def #extern #dllimport NdrRpcSmClientFree(NodeToFree: *)
export import def #extern #dllimport NdrRpcSsDefaultAllocate(Size: uint64) -> *
export import def #extern #dllimport NdrRpcSsDefaultFree(NodeToFree: *)
export import def #extern #dllimport NdrFullPointerXlatInit(NumberOfPointers: ulong, XlatSide: e_XLAT_SIDE) -> *s__FULL_PTR_XLAT_TABLES
export import def #extern #dllimport NdrFullPointerXlatFree(pXlatTables: *s__FULL_PTR_XLAT_TABLES)
export import def #extern #dllimport NdrAllocate(pStubMsg: *s__MIDL_STUB_MESSAGE, Len: uint64) -> *
export import def #extern #dllimport NdrClearOutParameters(pStubMsg: *s__MIDL_STUB_MESSAGE, pFormat: *uint8, ArgAddr: *)
export import def #extern #dllimport NdrOleAllocate(Size: uint64) -> *
export import def #extern #dllimport NdrOleFree(NodeToFree: *)
export import def #extern NdrGetUserMarshalInfo(pFlags: *ulong, InformationLevel: ulong, pMarshalInfo: *s__NDR_USER_MARSHAL_INFO) -> long
export import def #extern NdrCreateServerInterfaceFromStub(pStub: *s_IRpcStubBuffer, pServerIf: *s__RPC_SERVER_INTERFACE) -> long
export import def #extern NdrClientCall3(pProxyInfo: *s__MIDL_STUBLESS_PROXY_INFO, nProcNum: ulong, pReturnValue: *, ...) -> u__CLIENT_CALL_RETURN
export import def #extern Ndr64AsyncClientCall(pProxyInfo: *s__MIDL_STUBLESS_PROXY_INFO, nProcNum: ulong, pReturnValue: *, ...) -> u__CLIENT_CALL_RETURN
export import def #extern Ndr64DcomAsyncClientCall(pProxyInfo: *s__MIDL_STUBLESS_PROXY_INFO, nProcNum: ulong, pReturnValue: *, ...) -> u__CLIENT_CALL_RETURN
export import def #extern #dllimport Ndr64AsyncServerCall(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport Ndr64AsyncServerCall64(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport Ndr64AsyncServerCallAll(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport Ndr64AsyncStubCall(pThis: *s_IRpcStubBuffer, pChannel: *s_IRpcChannelBuffer, pRpcMsg: *s__RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport Ndr64DcomAsyncStubCall(pThis: *s_IRpcStubBuffer, pChannel: *s_IRpcChannelBuffer, pRpcMsg: *s__RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrStubCall3(pThis: *, pChannel: *, pRpcMsg: *s__RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrServerCallAll(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport NdrServerCallNdr64(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport NdrServerCall3(pRpcMsg: *s__RPC_MESSAGE)
export import def #extern #dllimport NdrPartialIgnoreClientMarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *)
export import def #extern #dllimport NdrPartialIgnoreServerUnmarshall(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **)
export import def #extern #dllimport NdrPartialIgnoreClientBufferSize(pStubMsg: *s__MIDL_STUB_MESSAGE, pMemory: *)
export import def #extern #dllimport NdrPartialIgnoreServerInitialize(pStubMsg: *s__MIDL_STUB_MESSAGE, ppMemory: **, pFormat: *uint8)
export import def #extern RpcUserFree(AsyncHandle: *, pBuffer: *)
export import var #extern __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec: *
export const MEMCTX_TASK: int = 1
export const MEMCTX_SHARED: int = 2
export const MEMCTX_MACSYSTEM: int = 3
export const MEMCTX_UNKNOWN: int = -1
export const MEMCTX_SAME: int = -2
export const CLSCTX_INPROC_SERVER: int = 1
export const CLSCTX_INPROC_HANDLER: int = 2
export const CLSCTX_LOCAL_SERVER: int = 4
export const CLSCTX_INPROC_SERVER16: int = 8
export const CLSCTX_REMOTE_SERVER: int = 16
export const CLSCTX_INPROC_HANDLER16: int = 32
export const CLSCTX_RESERVED1: int = 64
export const CLSCTX_RESERVED2: int = 128
export const CLSCTX_RESERVED3: int = 256
export const CLSCTX_RESERVED4: int = 512
export const CLSCTX_NO_CODE_DOWNLOAD: int = 1024
export const CLSCTX_RESERVED5: int = 2048
export const CLSCTX_NO_CUSTOM_MARSHAL: int = 4096
export const CLSCTX_ENABLE_CODE_DOWNLOAD: int = 8192
export const CLSCTX_NO_FAILURE_LOG: int = 16384
export const CLSCTX_DISABLE_AAA: int = 32768
export const CLSCTX_ENABLE_AAA: int = 65536
export const CLSCTX_FROM_DEFAULT_CONTEXT: int = 131072
export const CLSCTX_ACTIVATE_X86_SERVER: int = 262144
export const CLSCTX_ACTIVATE_32_BIT_SERVER: int = 262144
export const CLSCTX_ACTIVATE_64_BIT_SERVER: int = 524288
export const CLSCTX_ENABLE_CLOAKING: int = 1048576
export const CLSCTX_APPCONTAINER: int = 4194304
export const CLSCTX_ACTIVATE_AAA_AS_IU: int = 8388608
export const CLSCTX_RESERVED6: int = 16777216
export const CLSCTX_ACTIVATE_ARM32_SERVER: int = 33554432
export const CLSCTX_ALLOW_LOWER_TRUST_REGISTRATION: int = 67108864
export const CLSCTX_PS_DLL: int = -2147483648
export const MSHLFLAGS_NORMAL: int = 0
export const MSHLFLAGS_TABLESTRONG: int = 1
export const MSHLFLAGS_TABLEWEAK: int = 2
export const MSHLFLAGS_NOPING: int = 4
export const MSHLFLAGS_RESERVED1: int = 8
export const MSHLFLAGS_RESERVED2: int = 16
export const MSHLFLAGS_RESERVED3: int = 32
export const MSHLFLAGS_RESERVED4: int = 64
export const MSHCTX_LOCAL: int = 0
export const MSHCTX_NOSHAREDMEM: int = 1
export const MSHCTX_DIFFERENTMACHINE: int = 2
export const MSHCTX_INPROC: int = 3
export const MSHCTX_CROSSCTX: int = 4
export const MSHCTX_CONTAINER: int = 5
export import var #extern IWinTypesBase_v0_1_c_ifspec: *
export import var #extern IWinTypesBase_v0_1_s_ifspec: *
export import var #extern __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec: *
export const DVASPECT_CONTENT: int = 1
export const DVASPECT_THUMBNAIL: int = 2
export const DVASPECT_ICON: int = 4
export const DVASPECT_DOCPRINT: int = 8
export const STGC_DEFAULT: int = 0
export const STGC_OVERWRITE: int = 1
export const STGC_ONLYIFCURRENT: int = 2
export const STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE: int = 4
export const STGC_CONSOLIDATE: int = 8
export const STGMOVE_MOVE: int = 0
export const STGMOVE_COPY: int = 1
export const STGMOVE_SHALLOWCOPY: int = 2
export const STATFLAG_DEFAULT: int = 0
export const STATFLAG_NONAME: int = 1
export const STATFLAG_NOOPEN: int = 2
export import var #extern IWinTypes_v0_1_c_ifspec: *
export import var #extern IWinTypes_v0_1_s_ifspec: *
export const VT_EMPTY: int = 0
export const VT_NULL: int = 1
export const VT_I2: int = 2
export const VT_I4: int = 3
export const VT_R4: int = 4
export const VT_R8: int = 5
export const VT_CY: int = 6
export const VT_DATE: int = 7
export const VT_BSTR: int = 8
export const VT_DISPATCH: int = 9
export const VT_ERROR: int = 10
export const VT_BOOL: int = 11
export const VT_VARIANT: int = 12
export const VT_UNKNOWN: int = 13
export const VT_DECIMAL: int = 14
export const VT_I1: int = 16
export const VT_UI1: int = 17
export const VT_UI2: int = 18
export const VT_UI4: int = 19
export const VT_I8: int = 20
export const VT_UI8: int = 21
export const VT_INT: int = 22
export const VT_UINT: int = 23
export const VT_VOID: int = 24
export const VT_HRESULT: int = 25
export const VT_PTR: int = 26
export const VT_SAFEARRAY: int = 27
export const VT_CARRAY: int = 28
export const VT_USERDEFINED: int = 29
export const VT_LPSTR: int = 30
export const VT_LPWSTR: int = 31
export const VT_RECORD: int = 36
export const VT_INT_PTR: int = 37
export const VT_UINT_PTR: int = 38
export const VT_FILETIME: int = 64
export const VT_BLOB: int = 65
export const VT_STREAM: int = 66
export const VT_STORAGE: int = 67
export const VT_STREAMED_OBJECT: int = 68
export const VT_STORED_OBJECT: int = 69
export const VT_BLOB_OBJECT: int = 70
export const VT_CF: int = 71
export const VT_CLSID: int = 72
export const VT_VERSIONED_STREAM: int = 73
export const VT_BSTR_BLOB: int = 4095
export const VT_VECTOR: int = 4096
export const VT_ARRAY: int = 8192
export const VT_BYREF: int = 16384
export const VT_RESERVED: int = 32768
export const VT_ILLEGAL: int = 65535
export const VT_ILLEGALMASKED: int = 4095
export const VT_TYPEMASK: int = 4095
export const TYSPEC_CLSID: int = 0
export const TYSPEC_FILEEXT: int = 1
export const TYSPEC_MIMETYPE: int = 2
export const TYSPEC_FILENAME: int = 3
export const TYSPEC_PROGID: int = 4
export const TYSPEC_PACKAGENAME: int = 5
export const TYSPEC_OBJECTID: int = 6
export import var #extern __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec: *
export import var #extern GUID_DEVINTERFACE_DISK: s__GUID
export import var #extern GUID_DEVINTERFACE_CDROM: s__GUID
export import var #extern GUID_DEVINTERFACE_PARTITION: s__GUID
export import var #extern GUID_DEVINTERFACE_TAPE: s__GUID
export import var #extern GUID_DEVINTERFACE_WRITEONCEDISK: s__GUID
export import var #extern GUID_DEVINTERFACE_VOLUME: s__GUID
export import var #extern GUID_DEVINTERFACE_MEDIUMCHANGER: s__GUID
export import var #extern GUID_DEVINTERFACE_FLOPPY: s__GUID
export import var #extern GUID_DEVINTERFACE_CDCHANGER: s__GUID
export import var #extern GUID_DEVINTERFACE_STORAGEPORT: s__GUID
export import var #extern GUID_DEVINTERFACE_VMLUN: s__GUID
export import var #extern GUID_DEVINTERFACE_SES: s__GUID
export import var #extern GUID_DEVINTERFACE_ZNSDISK: s__GUID
export import var #extern GUID_DEVINTERFACE_SERVICE_VOLUME: s__GUID
export import var #extern GUID_DEVINTERFACE_HIDDEN_VOLUME: s__GUID
export import var #extern GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB: s__GUID
export import var #extern GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE: s__GUID
export import var #extern GUID_SCM_PD_HEALTH_NOTIFICATION: s__GUID
export import var #extern GUID_SCM_PD_PASSTHROUGH_INVDIMM: s__GUID
export import var #extern GUID_DEVINTERFACE_COMPORT: s__GUID
export import var #extern GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR: s__GUID
export const DDS_4mm: int = 32
export const MiniQic: int = 33
export const Travan: int = 34
export const QIC: int = 35
export const MP_8mm: int = 36
export const AME_8mm: int = 37
export const AIT1_8mm: int = 38
export const DLT: int = 39
export const NCTP: int = 40
export const IBM_3480: int = 41
export const IBM_3490E: int = 42
export const IBM_Magstar_3590: int = 43
export const IBM_Magstar_MP: int = 44
export const STK_DATA_D3: int = 45
export const SONY_DTF: int = 46
export const DV_6mm: int = 47
export const DMI: int = 48
export const SONY_D2: int = 49
export const CLEANER_CARTRIDGE: int = 50
export const CD_ROM: int = 51
export const CD_R: int = 52
export const CD_RW: int = 53
export const DVD_ROM: int = 54
export const DVD_R: int = 55
export const DVD_RW: int = 56
export const MO_3_RW: int = 57
export const MO_5_WO: int = 58
export const MO_5_RW: int = 59
export const MO_5_LIMDOW: int = 60
export const PC_5_WO: int = 61
export const PC_5_RW: int = 62
export const PD_5_RW: int = 63
export const ABL_5_WO: int = 64
export const PINNACLE_APEX_5_RW: int = 65
export const SONY_12_WO: int = 66
export const PHILIPS_12_WO: int = 67
export const HITACHI_12_WO: int = 68
export const CYGNET_12_WO: int = 69
export const KODAK_14_WO: int = 70
export const MO_NFR_525: int = 71
export const NIKON_12_RW: int = 72
export const IOMEGA_ZIP: int = 73
export const IOMEGA_JAZ: int = 74
export const SYQUEST_EZ135: int = 75
export const SYQUEST_EZFLYER: int = 76
export const SYQUEST_SYJET: int = 77
export const AVATAR_F2: int = 78
export const MP2_8mm: int = 79
export const DST_S: int = 80
export const DST_M: int = 81
export const DST_L: int = 82
export const VXATape_1: int = 83
export const VXATape_2: int = 84
export const STK_9840: int = 85
export const LTO_Ultrium: int = 86
export const LTO_Accelis: int = 87
export const DVD_RAM: int = 88
export const AIT_8mm: int = 89
export const ADR_1: int = 90
export const ADR_2: int = 91
export const STK_9940: int = 92
export const SAIT: int = 93
export const VXATape: int = 94
export const BusTypeUnknown: int = 0
export const BusTypeScsi: int = 1
export const BusTypeAtapi: int = 2
export const BusTypeAta: int = 3
export const BusType1394: int = 4
export const BusTypeSsa: int = 5
export const BusTypeFibre: int = 6
export const BusTypeUsb: int = 7
export const BusTypeRAID: int = 8
export const BusTypeiScsi: int = 9
export const BusTypeSas: int = 10
export const BusTypeSata: int = 11
export const BusTypeSd: int = 12
export const BusTypeMmc: int = 13
export const BusTypeVirtual: int = 14
export const BusTypeFileBackedVirtual: int = 15
export const BusTypeSpaces: int = 16
export const BusTypeNvme: int = 17
export const BusTypeSCM: int = 18
export const BusTypeUfs: int = 19
export const BusTypeMax: int = 20
export const BusTypeMaxReserved: int = 127
export const PropertyStandardQuery: int = 0
export const PropertyExistsQuery: int = 1
export const PropertyMaskQuery: int = 2
export const PropertyQueryMaxDefined: int = 3
export const PropertyStandardSet: int = 0
export const PropertyExistsSet: int = 1
export const PropertySetMaxDefined: int = 2
export const StorageDeviceProperty: int = 0
export const StorageAdapterProperty: int = 1
export const StorageDeviceIdProperty: int = 2
export const StorageDeviceUniqueIdProperty: int = 3
export const StorageDeviceWriteCacheProperty: int = 4
export const StorageMiniportProperty: int = 5
export const StorageAccessAlignmentProperty: int = 6
export const StorageDeviceSeekPenaltyProperty: int = 7
export const StorageDeviceTrimProperty: int = 8
export const StorageDeviceWriteAggregationProperty: int = 9
export const StorageDeviceDeviceTelemetryProperty: int = 10
export const StorageDeviceLBProvisioningProperty: int = 11
export const StorageDevicePowerProperty: int = 12
export const StorageDeviceCopyOffloadProperty: int = 13
export const StorageDeviceResiliencyProperty: int = 14
export const StorageDeviceMediumProductType: int = 15
export const StorageAdapterRpmbProperty: int = 16
export const StorageAdapterCryptoProperty: int = 17
export const StorageDeviceIoCapabilityProperty: int = 48
export const StorageAdapterProtocolSpecificProperty: int = 49
export const StorageDeviceProtocolSpecificProperty: int = 50
export const StorageAdapterTemperatureProperty: int = 51
export const StorageDeviceTemperatureProperty: int = 52
export const StorageAdapterPhysicalTopologyProperty: int = 53
export const StorageDevicePhysicalTopologyProperty: int = 54
export const StorageDeviceAttributesProperty: int = 55
export const StorageDeviceManagementStatus: int = 56
export const StorageAdapterSerialNumberProperty: int = 57
export const StorageDeviceLocationProperty: int = 58
export const StorageDeviceNumaProperty: int = 59
export const StorageDeviceZonedDeviceProperty: int = 60
export const StorageDeviceUnsafeShutdownCount: int = 61
export const StorageDeviceEnduranceProperty: int = 62
export const StorageDeviceLedStateProperty: int = 63
export const StorageDeviceSelfEncryptionProperty: int = 64
export const StorageFruIdProperty: int = 65
export const StoragePortCodeSetReserved: int = 0
export const StoragePortCodeSetStorport: int = 1
export const StoragePortCodeSetSCSIport: int = 2
export const StoragePortCodeSetSpaceport: int = 3
export const StoragePortCodeSetATAport: int = 4
export const StoragePortCodeSetUSBport: int = 5
export const StoragePortCodeSetSBP2port: int = 6
export const StoragePortCodeSetSDport: int = 7
export const StorageIdCodeSetReserved: int = 0
export const StorageIdCodeSetBinary: int = 1
export const StorageIdCodeSetAscii: int = 2
export const StorageIdCodeSetUtf8: int = 3
export const StorageIdTypeVendorSpecific: int = 0
export const StorageIdTypeVendorId: int = 1
export const StorageIdTypeEUI64: int = 2
export const StorageIdTypeFCPHName: int = 3
export const StorageIdTypePortRelative: int = 4
export const StorageIdTypeTargetPortGroup: int = 5
export const StorageIdTypeLogicalUnitGroup: int = 6
export const StorageIdTypeMD5LogicalUnitIdentifier: int = 7
export const StorageIdTypeScsiNameString: int = 8
export const StorageIdNAAFormatIEEEExtended: int = 2
export const StorageIdNAAFormatIEEERegistered: int = 3
export const StorageIdNAAFormatIEEEERegisteredExtended: int = 5
export const StorageIdAssocDevice: int = 0
export const StorageIdAssocPort: int = 1
export const StorageIdAssocTarget: int = 2
export const StorageRpmbFrameTypeUnknown: int = 0
export const StorageRpmbFrameTypeStandard: int = 1
export const StorageRpmbFrameTypeMax: int = 2
export const StorageCryptoAlgorithmUnknown: int = 0
export const StorageCryptoAlgorithmXTSAES: int = 1
export const StorageCryptoAlgorithmBitlockerAESCBC: int = 2
export const StorageCryptoAlgorithmAESECB: int = 3
export const StorageCryptoAlgorithmESSIVAESCBC: int = 4
export const StorageCryptoAlgorithmMax: int = 5
export const StorageCryptoKeySizeUnknown: int = 0
export const StorageCryptoKeySize128Bits: int = 1
export const StorageCryptoKeySize192Bits: int = 2
export const StorageCryptoKeySize256Bits: int = 3
export const StorageCryptoKeySize512Bits: int = 4
export const StorageTierMediaTypeUnspecified: int = 0
export const StorageTierMediaTypeDisk: int = 1
export const StorageTierMediaTypeSsd: int = 2
export const StorageTierMediaTypeScm: int = 4
export const StorageTierMediaTypeMax: int = 5
export const StorageTierClassUnspecified: int = 0
export const StorageTierClassCapacity: int = 1
export const StorageTierClassPerformance: int = 2
export const StorageTierClassMax: int = 3
export const ProtocolTypeUnknown: int = 0
export const ProtocolTypeScsi: int = 1
export const ProtocolTypeAta: int = 2
export const ProtocolTypeNvme: int = 3
export const ProtocolTypeSd: int = 4
export const ProtocolTypeUfs: int = 5
export const ProtocolTypeProprietary: int = 126
export const ProtocolTypeMaxReserved: int = 127
export const NVMeDataTypeUnknown: int = 0
export const NVMeDataTypeIdentify: int = 1
export const NVMeDataTypeLogPage: int = 2
export const NVMeDataTypeFeature: int = 3
export const AtaDataTypeUnknown: int = 0
export const AtaDataTypeIdentify: int = 1
export const AtaDataTypeLogPage: int = 2
export const UfsDataTypeUnknown: int = 0
export const UfsDataTypeQueryDescriptor: int = 1
export const UfsDataTypeQueryAttribute: int = 2
export const UfsDataTypeQueryFlag: int = 3
export const UfsDataTypeQueryDmeAttribute: int = 4
export const UfsDataTypeQueryDmePeerAttribute: int = 5
export const UfsDataTypeMax: int = 6
export const FormFactorUnknown: int = 0
export const FormFactor3_5: int = 1
export const FormFactor2_5: int = 2
export const FormFactor1_8: int = 3
export const FormFactor1_8Less: int = 4
export const FormFactorEmbedded: int = 5
export const FormFactorMemoryCard: int = 6
export const FormFactormSata: int = 7
export const FormFactorM_2: int = 8
export const FormFactorPCIeBoard: int = 9
export const FormFactorDimm: int = 10
export const HealthStatusUnknown: int = 0
export const HealthStatusNormal: int = 1
export const HealthStatusThrottled: int = 2
export const HealthStatusWarning: int = 3
export const HealthStatusDisabled: int = 4
export const HealthStatusFailed: int = 5
export const DiskHealthUnknown: int = 0
export const DiskHealthUnhealthy: int = 1
export const DiskHealthWarning: int = 2
export const DiskHealthHealthy: int = 3
export const DiskHealthMax: int = 4
export const DiskOpStatusNone: int = 0
export const DiskOpStatusUnknown: int = 1
export const DiskOpStatusOk: int = 2
export const DiskOpStatusPredictingFailure: int = 3
export const DiskOpStatusInService: int = 4
export const DiskOpStatusHardwareError: int = 5
export const DiskOpStatusNotUsable: int = 6
export const DiskOpStatusTransientError: int = 7
export const DiskOpStatusMissing: int = 8
export const DiskOpReasonUnknown: int = 0
export const DiskOpReasonScsiSenseCode: int = 1
export const DiskOpReasonMedia: int = 2
export const DiskOpReasonIo: int = 3
export const DiskOpReasonThresholdExceeded: int = 4
export const DiskOpReasonLostData: int = 5
export const DiskOpReasonEnergySource: int = 6
export const DiskOpReasonConfiguration: int = 7
export const DiskOpReasonDeviceController: int = 8
export const DiskOpReasonMediaController: int = 9
export const DiskOpReasonComponent: int = 10
export const DiskOpReasonNVDIMM_N: int = 11
export const DiskOpReasonBackgroundOperation: int = 12
export const DiskOpReasonInvalidFirmware: int = 13
export const DiskOpReasonHealthCheck: int = 14
export const DiskOpReasonLostDataPersistence: int = 15
export const DiskOpReasonDisabledByPlatform: int = 16
export const DiskOpReasonLostWritePersistence: int = 17
export const DiskOpReasonDataPersistenceLossImminent: int = 18
export const DiskOpReasonWritePersistenceLossImminent: int = 19
export const DiskOpReasonMax: int = 20
export const ZonedDeviceTypeUnknown: int = 0
export const ZonedDeviceTypeHostManaged: int = 1
export const ZonedDeviceTypeHostAware: int = 2
export const ZonedDeviceTypeDeviceManaged: int = 3
export const ZoneTypeUnknown: int = 0
export const ZoneTypeConventional: int = 1
export const ZoneTypeSequentialWriteRequired: int = 2
export const ZoneTypeSequentialWritePreferred: int = 3
export const ZoneTypeMax: int = 4
export const StorageEncryptionTypeUnknown: int = 0
export const StorageEncryptionTypeEDrive: int = 1
export const StorageEncryptionTypeTcgOpal: int = 2
export const ZonesAttributeTypeAndLengthMayDifferent: int = 0
export const ZonesAttributeTypeSameLengthSame: int = 1
export const ZonesAttributeTypeSameLastZoneLengthDifferent: int = 2
export const ZonesAttributeTypeMayDifferentLengthSame: int = 3
export const ZoneConditionConventional: int = 0
export const ZoneConditionEmpty: int = 1
export const ZoneConditionImplicitlyOpened: int = 2
export const ZoneConditionExplicitlyOpened: int = 3
export const ZoneConditionClosed: int = 4
export const ZoneConditionReadOnly: int = 13
export const ZoneConditionFull: int = 14
export const ZoneConditionOffline: int = 15
export import def #extern DeviceDsmParameterBlock(Input: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES) -> *
export import def #extern DeviceDsmDataSetRanges(Input: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES) -> *s__DEVICE_DATA_SET_RANGE
export import def #extern DeviceDsmNumberOfDataSetRanges(Input: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES) -> ulong
export import def #extern DeviceDsmGetInputLength(Definition: *s__DEVICE_DSM_DEFINITION, ParameterBlockLength: ulong, NumberOfDataSetRanges: ulong) -> ulong
export import def #extern DeviceDsmGetNumberOfDataSetRanges(Definition: *s__DEVICE_DSM_DEFINITION, InputLength: ulong, ParameterBlockLength: ulong) -> ulong
export import def #extern DeviceDsmInitializeInput(Definition: *s__DEVICE_DSM_DEFINITION, Input: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES, InputLength: ulong, Flags: ulong, Parameters: *, ParameterBlockLength: ulong)
export import def #extern DeviceDsmAddDataSetRange(Input: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES, InputLength: ulong, Offset: int64, Length: uint64) -> uint8
export import def #extern DeviceDsmValidateInput(Definition: *s__DEVICE_DSM_DEFINITION, Input: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES, InputLength: ulong) -> uint8
export import def #extern DeviceDsmOutputBlock(Output: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT) -> *
export import def #extern DeviceDsmGetOutputLength(Definition: *s__DEVICE_DSM_DEFINITION, OutputBlockLength: ulong) -> ulong
export import def #extern DeviceDsmValidateOutputLength(Definition: *s__DEVICE_DSM_DEFINITION, OutputLength: ulong) -> uint8
export import def #extern DeviceDsmGetOutputBlockLength(Definition: *s__DEVICE_DSM_DEFINITION, OutputLength: ulong) -> ulong
export import def #extern DeviceDsmInitializeOutput(Definition: *s__DEVICE_DSM_DEFINITION, Output: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, OutputLength: ulong, Flags: ulong)
export import def #extern DeviceDsmValidateOutput(Definition: *s__DEVICE_DSM_DEFINITION, Output: *s__DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, OutputLength: ulong) -> uint8
export const StorageDiagnosticLevelDefault: int = 0
export const StorageDiagnosticLevelMax: int = 1
export const StorageDiagnosticTargetTypeUndefined: int = 0
export const StorageDiagnosticTargetTypePort: int = 1
export const StorageDiagnosticTargetTypeMiniport: int = 2
export const StorageDiagnosticTargetTypeHbaFirmware: int = 3
export const StorageDiagnosticTargetTypeMax: int = 4
export const DeviceInternalStatusDataRequestTypeUndefined: int = 0
export const DeviceCurrentInternalStatusDataHeader: int = 1
export const DeviceCurrentInternalStatusData: int = 2
export const DeviceSavedInternalStatusDataHeader: int = 3
export const DeviceSavedInternalStatusData: int = 4
export const DeviceStatusDataSetUndefined: int = 0
export const DeviceStatusDataSet1: int = 1
export const DeviceStatusDataSet2: int = 2
export const DeviceStatusDataSet3: int = 3
export const DeviceStatusDataSet4: int = 4
export const DeviceStatusDataSetMax: int = 5
export const StorageSanitizeMethodDefault: int = 0
export const StorageSanitizeMethodBlockErase: int = 1
export const StorageSanitizeMethodCryptoErase: int = 2
export const WriteCacheTypeUnknown: int = 0
export const WriteCacheTypeNone: int = 1
export const WriteCacheTypeWriteBack: int = 2
export const WriteCacheTypeWriteThrough: int = 3
export const WriteCacheEnableUnknown: int = 0
export const WriteCacheDisabled: int = 1
export const WriteCacheEnabled: int = 2
export const WriteCacheChangeUnknown: int = 0
export const WriteCacheNotChangeable: int = 1
export const WriteCacheChangeable: int = 2
export const WriteThroughUnknown: int = 0
export const WriteThroughNotSupported: int = 1
export const WriteThroughSupported: int = 2
export const TCCollectionBugCheck: int = 1
export const TCCollectionApplicationRequested: int = 2
export const TCCollectionDeviceRequested: int = 3
export const StoragePowerupUnknown: int = 0
export const StoragePowerupIO: int = 1
export const StoragePowerupDeviceAttention: int = 2
export const StorageDevicePowerCapUnitsPercent: int = 0
export const StorageDevicePowerCapUnitsMilliwatts: int = 1
export const StorRpmbProgramAuthKey: int = 1
export const StorRpmbQueryWriteCounter: int = 2
export const StorRpmbAuthenticatedWrite: int = 3
export const StorRpmbAuthenticatedRead: int = 4
export const StorRpmbReadResultRequest: int = 5
export const StorRpmbAuthenticatedDeviceConfigWrite: int = 6
export const StorRpmbAuthenticatedDeviceConfigRead: int = 7
export const StorageCounterTypeUnknown: int = 0
export const StorageCounterTypeTemperatureCelsius: int = 1
export const StorageCounterTypeTemperatureCelsiusMax: int = 2
export const StorageCounterTypeReadErrorsTotal: int = 3
export const StorageCounterTypeReadErrorsCorrected: int = 4
export const StorageCounterTypeReadErrorsUncorrected: int = 5
export const StorageCounterTypeWriteErrorsTotal: int = 6
export const StorageCounterTypeWriteErrorsCorrected: int = 7
export const StorageCounterTypeWriteErrorsUncorrected: int = 8
export const StorageCounterTypeManufactureDate: int = 9
export const StorageCounterTypeStartStopCycleCount: int = 10
export const StorageCounterTypeStartStopCycleCountMax: int = 11
export const StorageCounterTypeLoadUnloadCycleCount: int = 12
export const StorageCounterTypeLoadUnloadCycleCountMax: int = 13
export const StorageCounterTypeWearPercentage: int = 14
export const StorageCounterTypeWearPercentageWarning: int = 15
export const StorageCounterTypeWearPercentageMax: int = 16
export const StorageCounterTypePowerOnHours: int = 17
export const StorageCounterTypeReadLatency100NSMax: int = 18
export const StorageCounterTypeWriteLatency100NSMax: int = 19
export const StorageCounterTypeFlushLatency100NSMax: int = 20
export const StorageCounterTypeMax: int = 21
export const StorAttributeMgmt_ClearAttribute: int = 0
export const StorAttributeMgmt_SetAttribute: int = 1
export const StorAttributeMgmt_ResetAttribute: int = 2
export const ScmRegionFlagNone: int = 0
export const ScmRegionFlagLabel: int = 1
export const ScmBusQuery_Descriptor: int = 0
export const ScmBusQuery_IsSupported: int = 1
export const ScmBusQuery_Max: int = 2
export const ScmBusSet_Descriptor: int = 0
export const ScmBusSet_IsSupported: int = 1
export const ScmBusSet_Max: int = 2
export const ScmBusProperty_RuntimeFwActivationInfo: int = 0
export const ScmBusProperty_DedicatedMemoryInfo: int = 1
export const ScmBusProperty_DedicatedMemoryState: int = 2
export const ScmBusProperty_Max: int = 3
export const ScmBusFirmwareActivationState_Idle: int = 0
export const ScmBusFirmwareActivationState_Armed: int = 1
export const ScmBusFirmwareActivationState_Busy: int = 2
export const ScmPhysicalDeviceQuery_Descriptor: int = 0
export const ScmPhysicalDeviceQuery_IsSupported: int = 1
export const ScmPhysicalDeviceQuery_Max: int = 2
export const ScmPhysicalDeviceSet_Descriptor: int = 0
export const ScmPhysicalDeviceSet_IsSupported: int = 1
export const ScmPhysicalDeviceSet_Max: int = 2
export const ScmPhysicalDeviceProperty_DeviceInfo: int = 0
export const ScmPhysicalDeviceProperty_ManagementStatus: int = 1
export const ScmPhysicalDeviceProperty_FirmwareInfo: int = 2
export const ScmPhysicalDeviceProperty_LocationString: int = 3
export const ScmPhysicalDeviceProperty_DeviceSpecificInfo: int = 4
export const ScmPhysicalDeviceProperty_DeviceHandle: int = 5
export const ScmPhysicalDeviceProperty_FruIdString: int = 6
export const ScmPhysicalDeviceProperty_RuntimeFwActivationInfo: int = 7
export const ScmPhysicalDeviceProperty_RuntimeFwActivationArmState: int = 8
export const ScmPhysicalDeviceProperty_Max: int = 9
export const ScmPhysicalDeviceHealth_Unknown: int = 0
export const ScmPhysicalDeviceHealth_Unhealthy: int = 1
export const ScmPhysicalDeviceHealth_Warning: int = 2
export const ScmPhysicalDeviceHealth_Healthy: int = 3
export const ScmPhysicalDeviceHealth_Max: int = 4
export const ScmPhysicalDeviceOpStatus_Unknown: int = 0
export const ScmPhysicalDeviceOpStatus_Ok: int = 1
export const ScmPhysicalDeviceOpStatus_PredictingFailure: int = 2
export const ScmPhysicalDeviceOpStatus_InService: int = 3
export const ScmPhysicalDeviceOpStatus_HardwareError: int = 4
export const ScmPhysicalDeviceOpStatus_NotUsable: int = 5
export const ScmPhysicalDeviceOpStatus_TransientError: int = 6
export const ScmPhysicalDeviceOpStatus_Missing: int = 7
export const ScmPhysicalDeviceOpStatus_Max: int = 8
export const ScmPhysicalDeviceOpReason_Unknown: int = 0
export const ScmPhysicalDeviceOpReason_Media: int = 1
export const ScmPhysicalDeviceOpReason_ThresholdExceeded: int = 2
export const ScmPhysicalDeviceOpReason_LostData: int = 3
export const ScmPhysicalDeviceOpReason_EnergySource: int = 4
export const ScmPhysicalDeviceOpReason_Configuration: int = 5
export const ScmPhysicalDeviceOpReason_DeviceController: int = 6
export const ScmPhysicalDeviceOpReason_MediaController: int = 7
export const ScmPhysicalDeviceOpReason_Component: int = 8
export const ScmPhysicalDeviceOpReason_BackgroundOperation: int = 9
export const ScmPhysicalDeviceOpReason_InvalidFirmware: int = 10
export const ScmPhysicalDeviceOpReason_HealthCheck: int = 11
export const ScmPhysicalDeviceOpReason_LostDataPersistence: int = 12
export const ScmPhysicalDeviceOpReason_DisabledByPlatform: int = 13
export const ScmPhysicalDeviceOpReason_PermanentError: int = 14
export const ScmPhysicalDeviceOpReason_LostWritePersistence: int = 15
export const ScmPhysicalDeviceOpReason_FatalError: int = 16
export const ScmPhysicalDeviceOpReason_DataPersistenceLossImminent: int = 17
export const ScmPhysicalDeviceOpReason_WritePersistenceLossImminent: int = 18
export const ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock: int = 19
export const ScmPhysicalDeviceOpReason_PerformanceDegradation: int = 20
export const ScmPhysicalDeviceOpReason_ExcessiveTemperature: int = 21
export const ScmPhysicalDeviceOpReason_InternalFailure: int = 22
export const ScmPhysicalDeviceOpReason_Max: int = 23
export const ScmPdLastFwActivationStatus_None: int = 0
export const ScmPdLastFwActivationStatus_Success: int = 1
export const ScmPdLastFwActivationStatus_FwNotFound: int = 2
export const ScmPdLastFwActivationStatus_ColdRebootRequired: int = 3
export const ScmPdLastFwActivaitonStatus_ActivationInProgress: int = 4
export const ScmPdLastFwActivaitonStatus_Retry: int = 5
export const ScmPdLastFwActivaitonStatus_FwUnsupported: int = 6
export const ScmPdLastFwActivaitonStatus_UnknownError: int = 7
export const ScmPdFirmwareActivationState_Idle: int = 0
export const ScmPdFirmwareActivationState_Armed: int = 1
export const ScmPdFirmwareActivationState_Busy: int = 2
export const ScmPhysicalDeviceReinit_Success: int = 0
export const ScmPhysicalDeviceReinit_RebootNeeded: int = 1
export const ScmPhysicalDeviceReinit_ColdBootNeeded: int = 2
export const ScmPhysicalDeviceReinit_Max: int = 3
export const Unknown: int = 0
export const F5_1Pt2_512: int = 1
export const F3_1Pt44_512: int = 2
export const F3_2Pt88_512: int = 3
export const F3_20Pt8_512: int = 4
export const F3_720_512: int = 5
export const F5_360_512: int = 6
export const F5_320_512: int = 7
export const F5_320_1024: int = 8
export const F5_180_512: int = 9
export const F5_160_512: int = 10
export const RemovableMedia: int = 11
export const FixedMedia: int = 12
export const F3_120M_512: int = 13
export const F3_640_512: int = 14
export const F5_640_512: int = 15
export const F5_720_512: int = 16
export const F3_1Pt2_512: int = 17
export const F3_1Pt23_1024: int = 18
export const F5_1Pt23_1024: int = 19
export const F3_128Mb_512: int = 20
export const F3_230Mb_512: int = 21
export const F8_256_128: int = 22
export const F3_200Mb_512: int = 23
export const F3_240M_512: int = 24
export const F3_32M_512: int = 25
export const PARTITION_STYLE_MBR: int = 0
export const PARTITION_STYLE_GPT: int = 1
export const PARTITION_STYLE_RAW: int = 2
export const DetectNone: int = 0
export const DetectInt13: int = 1
export const DetectExInt13: int = 2
export const EqualPriority: int = 0
export const KeepPrefetchedData: int = 1
export const KeepReadData: int = 2
export const RequestSize: int = 0
export const RequestLocation: int = 1
export const AllElements: int = 0
export const ChangerTransport: int = 1
export const ChangerSlot: int = 2
export const ChangerIEPort: int = 3
export const ChangerDrive: int = 4
export const ChangerDoor: int = 5
export const ChangerKeypad: int = 6
export const ChangerMaxElement: int = 7
export const DeviceProblemNone: int = 0
export const DeviceProblemHardware: int = 1
export const DeviceProblemCHMError: int = 2
export const DeviceProblemDoorOpen: int = 3
export const DeviceProblemCalibrationError: int = 4
export const DeviceProblemTargetFailure: int = 5
export const DeviceProblemCHMMoveError: int = 6
export const DeviceProblemCHMZeroError: int = 7
export const DeviceProblemCartridgeInsertError: int = 8
export const DeviceProblemPositionError: int = 9
export const DeviceProblemSensorError: int = 10
export const DeviceProblemCartridgeEjectError: int = 11
export const DeviceProblemGripperError: int = 12
export const DeviceProblemDriveError: int = 13
export const ShrinkPrepare: int = 1
export const ShrinkCommit: int = 2
export const ShrinkAbort: int = 3
export import var #extern FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE: s__GUID
export import var #extern FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE: s__GUID
export import var #extern FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE: s__GUID
export const CsvControlStartRedirectFile: int = 2
export const CsvControlStopRedirectFile: int = 3
export const CsvControlQueryRedirectState: int = 4
export const CsvControlQueryFileRevision: int = 6
export const CsvControlQueryMdsPath: int = 8
export const CsvControlQueryFileRevisionFileId128: int = 9
export const CsvControlQueryVolumeRedirectState: int = 10
export const CsvControlEnableUSNRangeModificationTracking: int = 13
export const CsvControlMarkHandleLocalVolumeMount: int = 14
export const CsvControlUnmarkHandleLocalVolumeMount: int = 15
export const CsvControlGetCsvFsMdsPathV2: int = 18
export const CsvControlDisableCaching: int = 19
export const CsvControlEnableCaching: int = 20
export const CsvControlStartForceDFO: int = 21
export const CsvControlStopForceDFO: int = 22
export const CsvControlQueryMdsPathNoPause: int = 23
export const CsvControlSetVolumeId: int = 24
export const CsvControlQueryVolumeId: int = 25
export const CsvFsDiskConnectivityNone: int = 0
export const CsvFsDiskConnectivityMdsNodeOnly: int = 1
export const CsvFsDiskConnectivitySubsetOfNodes: int = 2
export const CsvFsDiskConnectivityAllNodes: int = 3
export const LMRQuerySessionInfo: int = 1
export const StorageReserveIdNone: int = 0
export const StorageReserveIdHard: int = 1
export const StorageReserveIdSoft: int = 2
export const StorageReserveIdUpdateScratch: int = 3
export const StorageReserveIdMax: int = 4
export const QUERY_FILE_LAYOUT_FILTER_TYPE_NONE: int = 0
export const QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS: int = 1
export const QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID: int = 2
export const QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID: int = 3
export const QUERY_FILE_LAYOUT_NUM_FILTER_TYPES: int = 4
export const FileStorageTierMediaTypeUnspecified: int = 0
export const FileStorageTierMediaTypeDisk: int = 1
export const FileStorageTierMediaTypeSsd: int = 2
export const FileStorageTierMediaTypeScm: int = 4
export const FileStorageTierMediaTypeMax: int = 5
export const FileStorageTierClassUnspecified: int = 0
export const FileStorageTierClassCapacity: int = 1
export const FileStorageTierClassPerformance: int = 2
export const FileStorageTierClassMax: int = 3
export const FileSnapStateInactive: int = 0
export const FileSnapStateSource: int = 1
export const FileSnapStateTarget: int = 2
export const SmrGcStateInactive: int = 0
export const SmrGcStatePaused: int = 1
export const SmrGcStateActive: int = 2
export const SmrGcStateActiveFullSpeed: int = 3
export const SmrGcActionStart: int = 1
export const SmrGcActionStartFullSpeed: int = 2
export const SmrGcActionPause: int = 3
export const SmrGcActionStop: int = 4
export const SmrGcMethodCompaction: int = 1
export const SmrGcMethodCompression: int = 2
export const SmrGcMethodRotation: int = 3
export const VirtualStorageBehaviorUndefined: int = 0
export const VirtualStorageBehaviorCacheWriteThrough: int = 1
export const VirtualStorageBehaviorCacheWriteBack: int = 2
export const VirtualStorageBehaviorStopIoProcessing: int = 3
export const VirtualStorageBehaviorRestartIoProcessing: int = 4
export const FS_BPIO_OP_ENABLE: int = 1
export const FS_BPIO_OP_DISABLE: int = 2
export const FS_BPIO_OP_QUERY: int = 3
export const FS_BPIO_OP_VOLUME_STACK_PAUSE: int = 4
export const FS_BPIO_OP_VOLUME_STACK_RESUME: int = 5
export const FS_BPIO_OP_STREAM_PAUSE: int = 6
export const FS_BPIO_OP_STREAM_RESUME: int = 7
export const FS_BPIO_OP_GET_INFO: int = 8
export const FS_BPIO_OP_MAX_OPERATION: int = 9
export const FSBPIO_INFL_None: int = 0
export const FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY: int = 1
export const FSBPIO_OUTFL_None: int = 0
export const FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED: int = 1
export const FSBPIO_OUTFL_STREAM_BYPASS_PAUSED: int = 2
export const FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED: int = 4
export const FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER: int = 8
export import var #extern GUID_DEVINTERFACE_SMARTCARD_READER: s__GUID
export import var #extern #dllimport g_rgSCardT0Pci: s__SCARD_IO_REQUEST
export import var #extern #dllimport g_rgSCardT1Pci: s__SCARD_IO_REQUEST
export import var #extern #dllimport g_rgSCardRawPci: s__SCARD_IO_REQUEST
export import def #extern SCardEstablishContext(dwScope: ulong, pvReserved1: *, pvReserved2: *, phContext: *uint64) -> long
export import def #extern SCardReleaseContext(hContext: uint64) -> long
export import def #extern SCardIsValidContext(hContext: uint64) -> long
export import def #extern SCardListReaderGroupsA(hContext: uint64, mszGroups: *char, pcchGroups: *ulong) -> long
export import def #extern SCardListReaderGroupsW(hContext: uint64, mszGroups: *ushort, pcchGroups: *ulong) -> long
export import def #extern SCardListReadersA(hContext: uint64, mszGroups: *char, mszReaders: *char, pcchReaders: *ulong) -> long
export import def #extern SCardListReadersW(hContext: uint64, mszGroups: *ushort, mszReaders: *ushort, pcchReaders: *ulong) -> long
export import def #extern SCardListCardsA(hContext: uint64, pbAtr: *uint8, rgquidInterfaces: *s__GUID, cguidInterfaceCount: ulong, mszCards: *char, pcchCards: *ulong) -> long
export import def #extern SCardListCardsW(hContext: uint64, pbAtr: *uint8, rgquidInterfaces: *s__GUID, cguidInterfaceCount: ulong, mszCards: *ushort, pcchCards: *ulong) -> long
export import def #extern SCardListInterfacesA(hContext: uint64, szCard: *char, pguidInterfaces: *s__GUID, pcguidInterfaces: *ulong) -> long
export import def #extern SCardListInterfacesW(hContext: uint64, szCard: *ushort, pguidInterfaces: *s__GUID, pcguidInterfaces: *ulong) -> long
export import def #extern SCardGetProviderIdA(hContext: uint64, szCard: *char, pguidProviderId: *s__GUID) -> long
export import def #extern SCardGetProviderIdW(hContext: uint64, szCard: *ushort, pguidProviderId: *s__GUID) -> long
export import def #extern SCardGetCardTypeProviderNameA(hContext: uint64, szCardName: *char, dwProviderId: ulong, szProvider: *char, pcchProvider: *ulong) -> long
export import def #extern SCardGetCardTypeProviderNameW(hContext: uint64, szCardName: *ushort, dwProviderId: ulong, szProvider: *ushort, pcchProvider: *ulong) -> long
export import def #extern SCardIntroduceReaderGroupA(hContext: uint64, szGroupName: *char) -> long
export import def #extern SCardIntroduceReaderGroupW(hContext: uint64, szGroupName: *ushort) -> long
export import def #extern SCardForgetReaderGroupA(hContext: uint64, szGroupName: *char) -> long
export import def #extern SCardForgetReaderGroupW(hContext: uint64, szGroupName: *ushort) -> long
export import def #extern SCardIntroduceReaderA(hContext: uint64, szReaderName: *char, szDeviceName: *char) -> long
export import def #extern SCardIntroduceReaderW(hContext: uint64, szReaderName: *ushort, szDeviceName: *ushort) -> long
export import def #extern SCardForgetReaderA(hContext: uint64, szReaderName: *char) -> long
export import def #extern SCardForgetReaderW(hContext: uint64, szReaderName: *ushort) -> long
export import def #extern SCardAddReaderToGroupA(hContext: uint64, szReaderName: *char, szGroupName: *char) -> long
export import def #extern SCardAddReaderToGroupW(hContext: uint64, szReaderName: *ushort, szGroupName: *ushort) -> long
export import def #extern SCardRemoveReaderFromGroupA(hContext: uint64, szReaderName: *char, szGroupName: *char) -> long
export import def #extern SCardRemoveReaderFromGroupW(hContext: uint64, szReaderName: *ushort, szGroupName: *ushort) -> long
export import def #extern SCardIntroduceCardTypeA(hContext: uint64, szCardName: *char, pguidPrimaryProvider: *s__GUID, rgguidInterfaces: *s__GUID, dwInterfaceCount: ulong, pbAtr: *uint8, pbAtrMask: *uint8, cbAtrLen: ulong) -> long
export import def #extern SCardIntroduceCardTypeW(hContext: uint64, szCardName: *ushort, pguidPrimaryProvider: *s__GUID, rgguidInterfaces: *s__GUID, dwInterfaceCount: ulong, pbAtr: *uint8, pbAtrMask: *uint8, cbAtrLen: ulong) -> long
export import def #extern SCardSetCardTypeProviderNameA(hContext: uint64, szCardName: *char, dwProviderId: ulong, szProvider: *char) -> long
export import def #extern SCardSetCardTypeProviderNameW(hContext: uint64, szCardName: *ushort, dwProviderId: ulong, szProvider: *ushort) -> long
export import def #extern SCardForgetCardTypeA(hContext: uint64, szCardName: *char) -> long
export import def #extern SCardForgetCardTypeW(hContext: uint64, szCardName: *ushort) -> long
export import def #extern SCardFreeMemory(hContext: uint64, pvMem: *) -> long
export import def #extern SCardAccessStartedEvent() -> *
export import def #extern SCardReleaseStartedEvent()
export import def #extern SCardLocateCardsA(hContext: uint64, mszCards: *char, rgReaderStates: *SCARD_READERSTATEA, cReaders: ulong) -> long
export import def #extern SCardLocateCardsW(hContext: uint64, mszCards: *ushort, rgReaderStates: *SCARD_READERSTATEW, cReaders: ulong) -> long
export import def #extern SCardLocateCardsByATRA(hContext: uint64, rgAtrMasks: *s__SCARD_ATRMASK, cAtrs: ulong, rgReaderStates: *SCARD_READERSTATEA, cReaders: ulong) -> long
export import def #extern SCardLocateCardsByATRW(hContext: uint64, rgAtrMasks: *s__SCARD_ATRMASK, cAtrs: ulong, rgReaderStates: *SCARD_READERSTATEW, cReaders: ulong) -> long
export import def #extern SCardGetStatusChangeA(hContext: uint64, dwTimeout: ulong, rgReaderStates: *SCARD_READERSTATEA, cReaders: ulong) -> long
export import def #extern SCardGetStatusChangeW(hContext: uint64, dwTimeout: ulong, rgReaderStates: *SCARD_READERSTATEW, cReaders: ulong) -> long
export import def #extern SCardCancel(hContext: uint64) -> long
export import def #extern SCardConnectA(hContext: uint64, szReader: *char, dwShareMode: ulong, dwPreferredProtocols: ulong, phCard: *uint64, pdwActiveProtocol: *ulong) -> long
export import def #extern SCardConnectW(hContext: uint64, szReader: *ushort, dwShareMode: ulong, dwPreferredProtocols: ulong, phCard: *uint64, pdwActiveProtocol: *ulong) -> long
export import def #extern SCardReconnect(hCard: uint64, dwShareMode: ulong, dwPreferredProtocols: ulong, dwInitialization: ulong, pdwActiveProtocol: *ulong) -> long
export import def #extern SCardDisconnect(hCard: uint64, dwDisposition: ulong) -> long
export import def #extern SCardBeginTransaction(hCard: uint64) -> long
export import def #extern SCardEndTransaction(hCard: uint64, dwDisposition: ulong) -> long
export import def #extern SCardCancelTransaction(hCard: uint64) -> long
export import def #extern SCardState(hCard: uint64, pdwState: *ulong, pdwProtocol: *ulong, pbAtr: *uint8, pcbAtrLen: *ulong) -> long
export import def #extern SCardStatusA(hCard: uint64, mszReaderNames: *char, pcchReaderLen: *ulong, pdwState: *ulong, pdwProtocol: *ulong, pbAtr: *uint8, pcbAtrLen: *ulong) -> long
export import def #extern SCardStatusW(hCard: uint64, mszReaderNames: *ushort, pcchReaderLen: *ulong, pdwState: *ulong, pdwProtocol: *ulong, pbAtr: *uint8, pcbAtrLen: *ulong) -> long
export import def #extern SCardTransmit(hCard: uint64, pioSendPci: *s__SCARD_IO_REQUEST, pbSendBuffer: *uint8, cbSendLength: ulong, pioRecvPci: *s__SCARD_IO_REQUEST, pbRecvBuffer: *uint8, pcbRecvLength: *ulong) -> long
export import def #extern SCardGetTransmitCount(hCard: uint64, pcTransmitCount: *ulong) -> long
export import def #extern SCardControl(hCard: uint64, dwControlCode: ulong, lpInBuffer: *, cbInBufferSize: ulong, lpOutBuffer: *, cbOutBufferSize: ulong, lpBytesReturned: *ulong) -> long
export import def #extern SCardGetAttrib(hCard: uint64, dwAttrId: ulong, pbAttr: *uint8, pcbAttrLen: *ulong) -> long
export import def #extern SCardSetAttrib(hCard: uint64, dwAttrId: ulong, pbAttr: *uint8, cbAttrLen: ulong) -> long
export const RSR_MATCH_TYPE_READER_AND_CONTAINER: int = 1
export const RSR_MATCH_TYPE_SERIAL_NUMBER: int = 2
export const RSR_MATCH_TYPE_ALL_CARDS: int = 3
export import def #extern SCardUIDlgSelectCardA(_0: *OPENCARDNAME_EXA) -> long
export import def #extern SCardUIDlgSelectCardW(_0: *OPENCARDNAME_EXW) -> long
export import def #extern GetOpenCardNameA(_0: *OPENCARDNAMEA) -> long
export import def #extern GetOpenCardNameW(_0: *OPENCARDNAMEW) -> long
export import def #extern SCardDlgExtendedError() -> long
export import def #extern SCardReadCacheA(hContext: uint64, CardIdentifier: *s__GUID, FreshnessCounter: ulong, LookupName: *char, Data: *uint8, DataLen: *ulong) -> long
export import def #extern SCardReadCacheW(hContext: uint64, CardIdentifier: *s__GUID, FreshnessCounter: ulong, LookupName: *ushort, Data: *uint8, DataLen: *ulong) -> long
export import def #extern SCardWriteCacheA(hContext: uint64, CardIdentifier: *s__GUID, FreshnessCounter: ulong, LookupName: *char, Data: *uint8, DataLen: ulong) -> long
export import def #extern SCardWriteCacheW(hContext: uint64, CardIdentifier: *s__GUID, FreshnessCounter: ulong, LookupName: *ushort, Data: *uint8, DataLen: ulong) -> long
export import def #extern SCardGetReaderIconA(hContext: uint64, szReaderName: *char, pbIcon: *uint8, pcbIcon: *ulong) -> long
export import def #extern SCardGetReaderIconW(hContext: uint64, szReaderName: *ushort, pbIcon: *uint8, pcbIcon: *ulong) -> long
export import def #extern SCardGetDeviceTypeIdA(hContext: uint64, szReaderName: *char, pdwDeviceTypeId: *ulong) -> long
export import def #extern SCardGetDeviceTypeIdW(hContext: uint64, szReaderName: *ushort, pdwDeviceTypeId: *ulong) -> long
export import def #extern SCardGetReaderDeviceInstanceIdA(hContext: uint64, szReaderName: *char, szDeviceInstanceId: *char, pcchDeviceInstanceId: *ulong) -> long
export import def #extern SCardGetReaderDeviceInstanceIdW(hContext: uint64, szReaderName: *ushort, szDeviceInstanceId: *ushort, pcchDeviceInstanceId: *ulong) -> long
export import def #extern SCardListReadersWithDeviceInstanceIdA(hContext: uint64, szDeviceInstanceId: *char, mszReaders: *char, pcchReaders: *ulong) -> long
export import def #extern SCardListReadersWithDeviceInstanceIdW(hContext: uint64, szDeviceInstanceId: *ushort, mszReaders: *ushort, pcchReaders: *ulong) -> long
export import def #extern SCardAudit(hContext: uint64, dwEvent: ulong) -> long
export import def #extern #dllimport CreatePropertySheetPageA(constPropSheetPagePointer: *s__PROPSHEETPAGEA) -> *s__PSP
export import def #extern #dllimport CreatePropertySheetPageW(constPropSheetPagePointer: *s__PROPSHEETPAGEW) -> *s__PSP
export import def #extern #dllimport DestroyPropertySheetPage(_0: *s__PSP) -> int
export import def #extern #dllimport PropertySheetA(_0: *s__PROPSHEETHEADERA_V2) -> int64
export import def #extern #dllimport PropertySheetW(_0: *s__PROPSHEETHEADERW_V2) -> int64
export import def #extern EnumPrintersA(Flags: ulong, Name: *char, Level: ulong, pPrinterEnum: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPrintersW(Flags: ulong, Name: *ushort, Level: ulong, pPrinterEnum: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern GetSpoolFileHandle(hPrinter: *) -> *
export import def #extern CommitSpoolData(hPrinter: *, hSpoolFile: *, cbCommit: ulong) -> *
export import def #extern CloseSpoolFileHandle(hPrinter: *, hSpoolFile: *) -> int
export import def #extern OpenPrinterA(pPrinterName: *char, phPrinter: **, pDefault: *s__PRINTER_DEFAULTSA) -> int
export import def #extern OpenPrinterW(pPrinterName: *ushort, phPrinter: **, pDefault: *s__PRINTER_DEFAULTSW) -> int
export import def #extern ResetPrinterA(hPrinter: *, pDefault: *s__PRINTER_DEFAULTSA) -> int
export import def #extern ResetPrinterW(hPrinter: *, pDefault: *s__PRINTER_DEFAULTSW) -> int
export import def #extern SetJobA(hPrinter: *, JobId: ulong, Level: ulong, pJob: *uint8, Command: ulong) -> int
export import def #extern SetJobW(hPrinter: *, JobId: ulong, Level: ulong, pJob: *uint8, Command: ulong) -> int
export import def #extern GetJobA(hPrinter: *, JobId: ulong, Level: ulong, pJob: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetJobW(hPrinter: *, JobId: ulong, Level: ulong, pJob: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern EnumJobsA(hPrinter: *, FirstJob: ulong, NoJobs: ulong, Level: ulong, pJob: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumJobsW(hPrinter: *, FirstJob: ulong, NoJobs: ulong, Level: ulong, pJob: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern AddPrinterA(pName: *char, Level: ulong, pPrinter: *uint8) -> *
export import def #extern AddPrinterW(pName: *ushort, Level: ulong, pPrinter: *uint8) -> *
export import def #extern DeletePrinter(hPrinter: *) -> int
export import def #extern SetPrinterA(hPrinter: *, Level: ulong, pPrinter: *uint8, Command: ulong) -> int
export import def #extern SetPrinterW(hPrinter: *, Level: ulong, pPrinter: *uint8, Command: ulong) -> int
export import def #extern GetPrinterA(hPrinter: *, Level: ulong, pPrinter: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterW(hPrinter: *, Level: ulong, pPrinter: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern AddPrinterDriverA(pName: *char, Level: ulong, pDriverInfo: *uint8) -> int
export import def #extern AddPrinterDriverW(pName: *ushort, Level: ulong, pDriverInfo: *uint8) -> int
export import def #extern AddPrinterDriverExA(pName: *char, Level: ulong, lpbDriverInfo: *uint8, dwFileCopyFlags: ulong) -> int
export import def #extern AddPrinterDriverExW(pName: *ushort, Level: ulong, lpbDriverInfo: *uint8, dwFileCopyFlags: ulong) -> int
export import def #extern EnumPrinterDriversA(pName: *char, pEnvironment: *char, Level: ulong, pDriverInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPrinterDriversW(pName: *ushort, pEnvironment: *ushort, Level: ulong, pDriverInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern GetPrinterDriverA(hPrinter: *, pEnvironment: *char, Level: ulong, pDriverInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterDriverW(hPrinter: *, pEnvironment: *ushort, Level: ulong, pDriverInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterDriverDirectoryA(pName: *char, pEnvironment: *char, Level: ulong, pDriverDirectory: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterDriverDirectoryW(pName: *ushort, pEnvironment: *ushort, Level: ulong, pDriverDirectory: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern DeletePrinterDriverA(pName: *char, pEnvironment: *char, pDriverName: *char) -> int
export import def #extern DeletePrinterDriverW(pName: *ushort, pEnvironment: *ushort, pDriverName: *ushort) -> int
export import def #extern DeletePrinterDriverExA(pName: *char, pEnvironment: *char, pDriverName: *char, dwDeleteFlag: ulong, dwVersionFlag: ulong) -> int
export import def #extern DeletePrinterDriverExW(pName: *ushort, pEnvironment: *ushort, pDriverName: *ushort, dwDeleteFlag: ulong, dwVersionFlag: ulong) -> int
export import def #extern AddPrintProcessorA(pName: *char, pEnvironment: *char, pPathName: *char, pPrintProcessorName: *char) -> int
export import def #extern AddPrintProcessorW(pName: *ushort, pEnvironment: *ushort, pPathName: *ushort, pPrintProcessorName: *ushort) -> int
export import def #extern EnumPrintProcessorsA(pName: *char, pEnvironment: *char, Level: ulong, pPrintProcessorInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPrintProcessorsW(pName: *ushort, pEnvironment: *ushort, Level: ulong, pPrintProcessorInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern GetPrintProcessorDirectoryA(pName: *char, pEnvironment: *char, Level: ulong, pPrintProcessorInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrintProcessorDirectoryW(pName: *ushort, pEnvironment: *ushort, Level: ulong, pPrintProcessorInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern EnumPrintProcessorDatatypesA(pName: *char, pPrintProcessorName: *char, Level: ulong, pDatatypes: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPrintProcessorDatatypesW(pName: *ushort, pPrintProcessorName: *ushort, Level: ulong, pDatatypes: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern DeletePrintProcessorA(pName: *char, pEnvironment: *char, pPrintProcessorName: *char) -> int
export import def #extern DeletePrintProcessorW(pName: *ushort, pEnvironment: *ushort, pPrintProcessorName: *ushort) -> int
export import def #extern StartDocPrinterA(hPrinter: *, Level: ulong, pDocInfo: *uint8) -> ulong
export import def #extern StartDocPrinterW(hPrinter: *, Level: ulong, pDocInfo: *uint8) -> ulong
export import def #extern StartPagePrinter(hPrinter: *) -> int
export import def #extern WritePrinter(hPrinter: *, pBuf: *, cbBuf: ulong, pcWritten: *ulong) -> int
export import def #extern FlushPrinter(hPrinter: *, pBuf: *, cbBuf: ulong, pcWritten: *ulong, cSleep: ulong) -> int
export import def #extern EndPagePrinter(hPrinter: *) -> int
export import def #extern AbortPrinter(hPrinter: *) -> int
export import def #extern ReadPrinter(hPrinter: *, pBuf: *, cbBuf: ulong, pNoBytesRead: *ulong) -> int
export import def #extern EndDocPrinter(hPrinter: *) -> int
export import def #extern AddJobA(hPrinter: *, Level: ulong, pData: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern AddJobW(hPrinter: *, Level: ulong, pData: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern ScheduleJob(hPrinter: *, JobId: ulong) -> int
export import def #extern PrinterProperties(hWnd: *s_HWND__, hPrinter: *) -> int
export import def #extern DocumentPropertiesA(hWnd: *s_HWND__, hPrinter: *, pDeviceName: *char, pDevModeOutput: *s__devicemodeA, pDevModeInput: *s__devicemodeA, fMode: ulong) -> long
export import def #extern DocumentPropertiesW(hWnd: *s_HWND__, hPrinter: *, pDeviceName: *ushort, pDevModeOutput: *s__devicemodeW, pDevModeInput: *s__devicemodeW, fMode: ulong) -> long
export import def #extern AdvancedDocumentPropertiesA(hWnd: *s_HWND__, hPrinter: *, pDeviceName: *char, pDevModeOutput: *s__devicemodeA, pDevModeInput: *s__devicemodeA) -> long
export import def #extern AdvancedDocumentPropertiesW(hWnd: *s_HWND__, hPrinter: *, pDeviceName: *ushort, pDevModeOutput: *s__devicemodeW, pDevModeInput: *s__devicemodeW) -> long
export import def #extern ExtDeviceMode(hWnd: *s_HWND__, hInst: *, pDevModeOutput: *s__devicemodeA, pDeviceName: *char, pPort: *char, pDevModeInput: *s__devicemodeA, pProfile: *char, fMode: ulong) -> long
export import def #extern GetPrinterDataA(hPrinter: *, pValueName: *char, pType: *ulong, pData: *uint8, nSize: ulong, pcbNeeded: *ulong) -> ulong
export import def #extern GetPrinterDataW(hPrinter: *, pValueName: *ushort, pType: *ulong, pData: *uint8, nSize: ulong, pcbNeeded: *ulong) -> ulong
export import def #extern GetPrinterDataExA(hPrinter: *, pKeyName: *char, pValueName: *char, pType: *ulong, pData: *uint8, nSize: ulong, pcbNeeded: *ulong) -> ulong
export import def #extern GetPrinterDataExW(hPrinter: *, pKeyName: *ushort, pValueName: *ushort, pType: *ulong, pData: *uint8, nSize: ulong, pcbNeeded: *ulong) -> ulong
export import def #extern EnumPrinterDataA(hPrinter: *, dwIndex: ulong, pValueName: *char, cbValueName: ulong, pcbValueName: *ulong, pType: *ulong, pData: *uint8, cbData: ulong, pcbData: *ulong) -> ulong
export import def #extern EnumPrinterDataW(hPrinter: *, dwIndex: ulong, pValueName: *ushort, cbValueName: ulong, pcbValueName: *ulong, pType: *ulong, pData: *uint8, cbData: ulong, pcbData: *ulong) -> ulong
export import def #extern EnumPrinterDataExA(hPrinter: *, pKeyName: *char, pEnumValues: *uint8, cbEnumValues: ulong, pcbEnumValues: *ulong, pnEnumValues: *ulong) -> ulong
export import def #extern EnumPrinterDataExW(hPrinter: *, pKeyName: *ushort, pEnumValues: *uint8, cbEnumValues: ulong, pcbEnumValues: *ulong, pnEnumValues: *ulong) -> ulong
export import def #extern EnumPrinterKeyA(hPrinter: *, pKeyName: *char, pSubkey: *char, cbSubkey: ulong, pcbSubkey: *ulong) -> ulong
export import def #extern EnumPrinterKeyW(hPrinter: *, pKeyName: *ushort, pSubkey: *ushort, cbSubkey: ulong, pcbSubkey: *ulong) -> ulong
export import def #extern SetPrinterDataA(hPrinter: *, pValueName: *char, Type: ulong, pData: *uint8, cbData: ulong) -> ulong
export import def #extern SetPrinterDataW(hPrinter: *, pValueName: *ushort, Type: ulong, pData: *uint8, cbData: ulong) -> ulong
export import def #extern SetPrinterDataExA(hPrinter: *, pKeyName: *char, pValueName: *char, Type: ulong, pData: *uint8, cbData: ulong) -> ulong
export import def #extern SetPrinterDataExW(hPrinter: *, pKeyName: *ushort, pValueName: *ushort, Type: ulong, pData: *uint8, cbData: ulong) -> ulong
export import def #extern DeletePrinterDataA(hPrinter: *, pValueName: *char) -> ulong
export import def #extern DeletePrinterDataW(hPrinter: *, pValueName: *ushort) -> ulong
export import def #extern DeletePrinterDataExA(hPrinter: *, pKeyName: *char, pValueName: *char) -> ulong
export import def #extern DeletePrinterDataExW(hPrinter: *, pKeyName: *ushort, pValueName: *ushort) -> ulong
export import def #extern DeletePrinterKeyA(hPrinter: *, pKeyName: *char) -> ulong
export import def #extern DeletePrinterKeyW(hPrinter: *, pKeyName: *ushort) -> ulong
export const BIDI_NULL: int = 0
export const BIDI_INT: int = 1
export const BIDI_FLOAT: int = 2
export const BIDI_BOOL: int = 3
export const BIDI_STRING: int = 4
export const BIDI_TEXT: int = 5
export const BIDI_ENUM: int = 6
export const BIDI_BLOB: int = 7
export import def #extern WaitForPrinterChange(hPrinter: *, Flags: ulong) -> ulong
export import def #extern FindFirstPrinterChangeNotification(hPrinter: *, fdwFilter: ulong, fdwOptions: ulong, pPrinterNotifyOptions: *) -> *
export import def #extern FindNextPrinterChangeNotification(hChange: *, pdwChange: *ulong, pvReserved: *, ppPrinterNotifyInfo: **) -> int
export import def #extern FreePrinterNotifyInfo(pPrinterNotifyInfo: *s__PRINTER_NOTIFY_INFO) -> int
export import def #extern FindClosePrinterChangeNotification(hChange: *) -> int
export import def #extern PrinterMessageBoxA(hPrinter: *, Error: ulong, hWnd: *s_HWND__, pText: *char, pCaption: *char, dwType: ulong) -> ulong
export import def #extern PrinterMessageBoxW(hPrinter: *, Error: ulong, hWnd: *s_HWND__, pText: *ushort, pCaption: *ushort, dwType: ulong) -> ulong
export import def #extern ClosePrinter(hPrinter: *) -> int
export import def #extern AddFormA(hPrinter: *, Level: ulong, pForm: *uint8) -> int
export import def #extern AddFormW(hPrinter: *, Level: ulong, pForm: *uint8) -> int
export import def #extern DeleteFormA(hPrinter: *, pFormName: *char) -> int
export import def #extern DeleteFormW(hPrinter: *, pFormName: *ushort) -> int
export import def #extern GetFormA(hPrinter: *, pFormName: *char, Level: ulong, pForm: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetFormW(hPrinter: *, pFormName: *ushort, Level: ulong, pForm: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern SetFormA(hPrinter: *, pFormName: *char, Level: ulong, pForm: *uint8) -> int
export import def #extern SetFormW(hPrinter: *, pFormName: *ushort, Level: ulong, pForm: *uint8) -> int
export import def #extern EnumFormsA(hPrinter: *, Level: ulong, pForm: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumFormsW(hPrinter: *, Level: ulong, pForm: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumMonitorsA(pName: *char, Level: ulong, pMonitor: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumMonitorsW(pName: *ushort, Level: ulong, pMonitor: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern AddMonitorA(pName: *char, Level: ulong, pMonitors: *uint8) -> int
export import def #extern AddMonitorW(pName: *ushort, Level: ulong, pMonitors: *uint8) -> int
export import def #extern DeleteMonitorA(pName: *char, pEnvironment: *char, pMonitorName: *char) -> int
export import def #extern DeleteMonitorW(pName: *ushort, pEnvironment: *ushort, pMonitorName: *ushort) -> int
export import def #extern EnumPortsA(pName: *char, Level: ulong, pPort: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPortsW(pName: *ushort, Level: ulong, pPort: *uint8, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern AddPortA(pName: *char, hWnd: *s_HWND__, pMonitorName: *char) -> int
export import def #extern AddPortW(pName: *ushort, hWnd: *s_HWND__, pMonitorName: *ushort) -> int
export import def #extern ConfigurePortA(pName: *char, hWnd: *s_HWND__, pPortName: *char) -> int
export import def #extern ConfigurePortW(pName: *ushort, hWnd: *s_HWND__, pPortName: *ushort) -> int
export import def #extern DeletePortA(pName: *char, hWnd: *s_HWND__, pPortName: *char) -> int
export import def #extern DeletePortW(pName: *ushort, hWnd: *s_HWND__, pPortName: *ushort) -> int
export import def #extern XcvDataW(hXcv: *, pszDataName: *ushort, pInputData: *uint8, cbInputData: ulong, pOutputData: *uint8, cbOutputData: ulong, pcbOutputNeeded: *ulong, pdwStatus: *ulong) -> int
export import def #extern GetDefaultPrinterA(pszBuffer: *char, pcchBuffer: *ulong) -> int
export import def #extern GetDefaultPrinterW(pszBuffer: *ushort, pcchBuffer: *ulong) -> int
export import def #extern SetDefaultPrinterA(pszPrinter: *char) -> int
export import def #extern SetDefaultPrinterW(pszPrinter: *ushort) -> int
export import def #extern SetPortA(pName: *char, pPortName: *char, dwLevel: ulong, pPortInfo: *uint8) -> int
export import def #extern SetPortW(pName: *ushort, pPortName: *ushort, dwLevel: ulong, pPortInfo: *uint8) -> int
export import def #extern AddPrinterConnectionA(pName: *char) -> int
export import def #extern AddPrinterConnectionW(pName: *ushort) -> int
export import def #extern DeletePrinterConnectionA(pName: *char) -> int
export import def #extern DeletePrinterConnectionW(pName: *ushort) -> int
export import def #extern ConnectToPrinterDlg(hwnd: *s_HWND__, Flags: ulong) -> *
export import def #extern AddPrintProvidorA(pName: *char, Level: ulong, pProvidorInfo: *uint8) -> int
export import def #extern AddPrintProvidorW(pName: *ushort, Level: ulong, pProvidorInfo: *uint8) -> int
export import def #extern DeletePrintProvidorA(pName: *char, pEnvironment: *char, pPrintProvidorName: *char) -> int
export import def #extern DeletePrintProvidorW(pName: *ushort, pEnvironment: *ushort, pPrintProvidorName: *ushort) -> int
export import def #extern IsValidDevmodeA(pDevmode: *s__devicemodeA, DevmodeSize: uint64) -> int
export import def #extern IsValidDevmodeW(pDevmode: *s__devicemodeW, DevmodeSize: uint64) -> int
export const PRINTER_OPTION_NO_CACHE: int = 1
export const PRINTER_OPTION_CACHE: int = 2
export const PRINTER_OPTION_CLIENT_CHANGE: int = 4
export const PRINTER_OPTION_NO_CLIENT_DATA: int = 8
export import def #extern OpenPrinter2A(pPrinterName: *char, phPrinter: **, pDefault: *s__PRINTER_DEFAULTSA, pOptions: *s__PRINTER_OPTIONSA) -> int
export import def #extern OpenPrinter2W(pPrinterName: *ushort, phPrinter: **, pDefault: *s__PRINTER_DEFAULTSW, pOptions: *s__PRINTER_OPTIONSW) -> int
export import def #extern AddPrinterConnection2A(hWnd: *s_HWND__, pszName: *char, dwLevel: ulong, pConnectionInfo: *) -> int
export import def #extern AddPrinterConnection2W(hWnd: *s_HWND__, pszName: *ushort, dwLevel: ulong, pConnectionInfo: *) -> int
export import def #extern InstallPrinterDriverFromPackageA(pszServer: *char, pszInfPath: *char, pszDriverName: *char, pszEnvironment: *char, dwFlags: ulong) -> long
export import def #extern InstallPrinterDriverFromPackageW(pszServer: *ushort, pszInfPath: *ushort, pszDriverName: *ushort, pszEnvironment: *ushort, dwFlags: ulong) -> long
export import def #extern UploadPrinterDriverPackageA(pszServer: *char, pszInfPath: *char, pszEnvironment: *char, dwFlags: ulong, hwnd: *s_HWND__, pszDestInfPath: *char, pcchDestInfPath: *ulong) -> long
export import def #extern UploadPrinterDriverPackageW(pszServer: *ushort, pszInfPath: *ushort, pszEnvironment: *ushort, dwFlags: ulong, hwnd: *s_HWND__, pszDestInfPath: *ushort, pcchDestInfPath: *ulong) -> long
export import def #extern GetCorePrinterDriversA(pszServer: *char, pszEnvironment: *char, pszzCoreDriverDependencies: *char, cCorePrinterDrivers: ulong, pCorePrinterDrivers: *s__CORE_PRINTER_DRIVERA) -> long
export import def #extern GetCorePrinterDriversW(pszServer: *ushort, pszEnvironment: *ushort, pszzCoreDriverDependencies: *ushort, cCorePrinterDrivers: ulong, pCorePrinterDrivers: *s__CORE_PRINTER_DRIVERW) -> long
export import def #extern CorePrinterDriverInstalledA(pszServer: *char, pszEnvironment: *char, CoreDriverGUID: s__GUID, ftDriverDate: s__FILETIME, dwlDriverVersion: uint64, pbDriverInstalled: *int) -> long
export import def #extern CorePrinterDriverInstalledW(pszServer: *ushort, pszEnvironment: *ushort, CoreDriverGUID: s__GUID, ftDriverDate: s__FILETIME, dwlDriverVersion: uint64, pbDriverInstalled: *int) -> long
export import def #extern GetPrinterDriverPackagePathA(pszServer: *char, pszEnvironment: *char, pszLanguage: *char, pszPackageID: *char, pszDriverPackageCab: *char, cchDriverPackageCab: ulong, pcchRequiredSize: *ulong) -> long
export import def #extern GetPrinterDriverPackagePathW(pszServer: *ushort, pszEnvironment: *ushort, pszLanguage: *ushort, pszPackageID: *ushort, pszDriverPackageCab: *ushort, cchDriverPackageCab: ulong, pcchRequiredSize: *ulong) -> long
export import def #extern DeletePrinterDriverPackageA(pszServer: *char, pszInfPath: *char, pszEnvironment: *char) -> long
export import def #extern DeletePrinterDriverPackageW(pszServer: *ushort, pszInfPath: *ushort, pszEnvironment: *ushort) -> long
export const kPropertyTypeString: int = 1
export const kPropertyTypeInt32: int = 2
export const kPropertyTypeInt64: int = 3
export const kPropertyTypeByte: int = 4
export const kPropertyTypeTime: int = 5
export const kPropertyTypeDevMode: int = 6
export const kPropertyTypeSD: int = 7
export const kPropertyTypeNotificationReply: int = 8
export const kPropertyTypeNotificationOptions: int = 9
export const kPropertyTypeBuffer: int = 10
export const kAddingDocumentSequence: int = 0
export const kDocumentSequenceAdded: int = 1
export const kAddingFixedDocument: int = 2
export const kFixedDocumentAdded: int = 3
export const kAddingFixedPage: int = 4
export const kFixedPageAdded: int = 5
export const kResourceAdded: int = 6
export const kFontAdded: int = 7
export const kImageAdded: int = 8
export const kXpsDocumentCommitted: int = 9
export const kJobProduction: int = 1
export const kJobConsumption: int = 2
export import def #extern ReportJobProcessingProgress(printerHandle: *, jobId: ulong, jobOperation: e_EPrintXPSJobOperation, jobProgress: e_EPrintXPSJobProgress) -> long
export import def #extern GetPrinterDriver2A(hWnd: *s_HWND__, hPrinter: *, pEnvironment: *char, Level: ulong, pDriverInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterDriver2W(hWnd: *s_HWND__, hPrinter: *, pEnvironment: *ushort, Level: ulong, pDriverInfo: *uint8, cbBuf: ulong, pcbNeeded: *ulong) -> int
export const PRINT_EXECUTION_CONTEXT_APPLICATION: int = 0
export const PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE: int = 1
export const PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST: int = 2
export const PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE: int = 3
export const PRINT_EXECUTION_CONTEXT_WOW64: int = 4
export import def #extern GetPrintExecutionData(pData: *s_PRINT_EXECUTION_DATA) -> int
export import def #extern GetJobNamedPropertyValue(hPrinter: *, JobId: ulong, pszName: *ushort, pValue: *s_PrintPropertyValue) -> ulong
export import def #extern FreePrintPropertyValue(pValue: *s_PrintPropertyValue)
export import def #extern FreePrintNamedPropertyArray(cProperties: ulong, ppProperties: **s_PrintNamedProperty)
export import def #extern SetJobNamedProperty(hPrinter: *, JobId: ulong, pProperty: *s_PrintNamedProperty) -> ulong
export import def #extern DeleteJobNamedProperty(hPrinter: *, JobId: ulong, pszName: *ushort) -> ulong
export import def #extern EnumJobNamedProperties(hPrinter: *, JobId: ulong, pcProperties: *ulong, ppProperties: **s_PrintNamedProperty) -> ulong
export import def #extern GetPrintOutputInfo(hWnd: *s_HWND__, pszPrinter: *ushort, phFile: **, ppszOutputFile: **ushort) -> long
export import def #extern _calloc_base(_Count: uint64, _Size: uint64) -> *
export import def #extern calloc(_Count: uint64, _Size: uint64) -> *
export import def #extern _callnewh(_Size: uint64) -> int
export import def #extern _expand(_Block: *, _Size: uint64) -> *
export import def #extern _free_base(_Block: *)
export import def #extern free(_Block: *)
export import def #extern _malloc_base(_Size: uint64) -> *
export import def #extern malloc(_Size: uint64) -> *
export import def #extern _msize_base(_Block: *) -> uint64
export import def #extern _msize(_Block: *) -> uint64
export import def #extern _realloc_base(_Block: *, _Size: uint64) -> *
export import def #extern realloc(_Block: *, _Size: uint64) -> *
export import def #extern _recalloc_base(_Block: *, _Count: uint64, _Size: uint64) -> *
export import def #extern _recalloc(_Block: *, _Count: uint64, _Size: uint64) -> *
export import def #extern _aligned_free(_Block: *)
export import def #extern _aligned_malloc(_Size: uint64, _Alignment: uint64) -> *
export import def #extern _aligned_offset_malloc(_Size: uint64, _Alignment: uint64, _Offset: uint64) -> *
export import def #extern _aligned_msize(_Block: *, _Alignment: uint64, _Offset: uint64) -> uint64
export import def #extern _aligned_offset_realloc(_Block: *, _Size: uint64, _Alignment: uint64, _Offset: uint64) -> *
export import def #extern _aligned_offset_recalloc(_Block: *, _Count: uint64, _Size: uint64, _Alignment: uint64, _Offset: uint64) -> *
export import def #extern _aligned_realloc(_Block: *, _Size: uint64, _Alignment: uint64) -> *
export import def #extern _aligned_recalloc(_Block: *, _Count: uint64, _Size: uint64, _Alignment: uint64) -> *
export import def #extern __threadid() -> ulong
export import def #extern __threadhandle() -> uint64
export import def #extern bsearch_s(_Key: *, _Base: *, _NumOfElements: uint64, _SizeOfElements: uint64, _CompareFunction: def (*, *, *) -> (int), _Context: *) -> *
export import def #extern qsort_s(_Base: *, _NumOfElements: uint64, _SizeOfElements: uint64, _CompareFunction: def (*, *, *) -> (int), _Context: *)
export import def #extern bsearch(_Key: *, _Base: *, _NumOfElements: uint64, _SizeOfElements: uint64, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern qsort(_Base: *, _NumOfElements: uint64, _SizeOfElements: uint64, _CompareFunction: def (*, *) -> (int))
export import def #extern _lfind_s(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint64, _CompareFunction: def (*, *, *) -> (int), _Context: *) -> *
export import def #extern _lfind(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern _lsearch_s(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint64, _CompareFunction: def (*, *, *) -> (int), _Context: *) -> *
export import def #extern _lsearch(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern lfind(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern lsearch(_Key: *, _Base: *, _NumOfElements: *uint, _SizeOfElements: uint, _CompareFunction: def (*, *) -> (int)) -> *
export import def #extern _itow_s(_Value: int, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _itow(_Value: int, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern _ltow_s(_Value: long, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ltow(_Value: long, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern _ultow_s(_Value: ulong, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ultow(_Value: ulong, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern wcstod(_String: *ushort, _EndPtr: **ushort) -> double
export import def #extern _wcstod_l(_String: *ushort, _EndPtr: **ushort, _Locale: *s___crt_locale_pointers) -> double
export import def #extern wcstol(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> long
export import def #extern _wcstol_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> long
export import def #extern wcstoll(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> int64
export import def #extern _wcstoll_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern wcstoul(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> ulong
export import def #extern _wcstoul_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> ulong
export import def #extern wcstoull(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> uint64
export import def #extern _wcstoull_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern wcstold(_String: *ushort, _EndPtr: **ushort) -> float80
export import def #extern _wcstold_l(_String: *ushort, _EndPtr: **ushort, _Locale: *s___crt_locale_pointers) -> float80
export import def #extern wcstof(_String: *ushort, _EndPtr: **ushort) -> float
export import def #extern _wcstof_l(_String: *ushort, _EndPtr: **ushort, _Locale: *s___crt_locale_pointers) -> float
export import def #extern _wtof(_String: *ushort) -> double
export import def #extern _wtof_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> double
export import def #extern _wtoi(_String: *ushort) -> int
export import def #extern _wtoi_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wtol(_String: *ushort) -> long
export import def #extern _wtol_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> long
export import def #extern _wtoll(_String: *ushort) -> int64
export import def #extern _wtoll_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _i64tow_s(_Value: int64, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _i64tow(_Value: int64, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern _ui64tow_s(_Value: uint64, _Buffer: *ushort, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ui64tow(_Value: uint64, _Buffer: *ushort, _Radix: int) -> *ushort
export import def #extern _wtoi64(_String: *ushort) -> int64
export import def #extern _wtoi64_l(_String: *ushort, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _wcstoi64(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> int64
export import def #extern _wcstoi64_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _wcstoui64(_String: *ushort, _EndPtr: **ushort, _Radix: int) -> uint64
export import def #extern _wcstoui64_l(_String: *ushort, _EndPtr: **ushort, _Radix: int, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _wfullpath(_Buffer: *ushort, _Path: *ushort, _BufferCount: uint64) -> *ushort
export import def #extern _wmakepath_s(_Buffer: *ushort, _BufferCount: uint64, _Drive: *ushort, _Dir: *ushort, _Filename: *ushort, _Ext: *ushort) -> int
export import def #extern _wmakepath(_Buffer: *ushort, _Drive: *ushort, _Dir: *ushort, _Filename: *ushort, _Ext: *ushort)
export import def #extern _wperror(_ErrorMessage: *ushort)
export import def #extern _wsplitpath(_FullPath: *ushort, _Drive: *ushort, _Dir: *ushort, _Filename: *ushort, _Ext: *ushort)
export import def #extern _wsplitpath_s(_FullPath: *ushort, _Drive: *ushort, _DriveCount: uint64, _Dir: *ushort, _DirCount: uint64, _Filename: *ushort, _FilenameCount: uint64, _Ext: *ushort, _ExtCount: uint64) -> int
export import def #extern _wdupenv_s(_Buffer: **ushort, _BufferCount: *uint64, _VarName: *ushort) -> int
export import def #extern _wgetenv(_VarName: *ushort) -> *ushort
export import def #extern _wgetenv_s(_RequiredCount: *uint64, _Buffer: *ushort, _BufferCount: uint64, _VarName: *ushort) -> int
export import def #extern _wputenv(_EnvString: *ushort) -> int
export import def #extern _wputenv_s(_Name: *ushort, _Value: *ushort) -> int
export import def #extern _wsearchenv_s(_Filename: *ushort, _VarName: *ushort, _Buffer: *ushort, _BufferCount: uint64) -> int
export import def #extern _wsearchenv(_Filename: *ushort, _VarName: *ushort, _ResultPath: *ushort)
export import def #extern _wsystem(_Command: *ushort) -> int
export import def #extern _swab(_Buf1: *char, _Buf2: *char, _SizeInBytes: int)
export import def #extern exit(_Code: int)
export import def #extern _exit(_Code: int)
export import def #extern _Exit(_Code: int)
export import def #extern quick_exit(_Code: int)
export import def #extern abort()
export import def #extern _set_abort_behavior(_Flags: uint, _Mask: uint) -> uint
export import def #extern atexit(_0: def () -> ()) -> int
export import def #extern _onexit(_Func: def () -> (int)) -> def () -> (int)
export import def #extern at_quick_exit(_0: def () -> ()) -> int
export import def #extern _set_purecall_handler(_Handler: def () -> ()) -> def () -> ()
export import def #extern _get_purecall_handler() -> def () -> ()
export import def #extern _set_invalid_parameter_handler(_Handler: def (*ushort, *ushort, *ushort, uint, uint64) -> ()) -> def (*ushort, *ushort, *ushort, uint, uint64) -> ()
export import def #extern _get_invalid_parameter_handler() -> def (*ushort, *ushort, *ushort, uint, uint64) -> ()
export import def #extern _set_thread_local_invalid_parameter_handler(_Handler: def (*ushort, *ushort, *ushort, uint, uint64) -> ()) -> def (*ushort, *ushort, *ushort, uint, uint64) -> ()
export import def #extern _get_thread_local_invalid_parameter_handler() -> def (*ushort, *ushort, *ushort, uint, uint64) -> ()
export import def #extern _set_error_mode(_Mode: int) -> int
export import def #extern __sys_errlist() -> **char
export import def #extern __sys_nerr() -> *int
export import def #extern perror(_ErrMsg: *char)
export import def #extern __p__pgmptr() -> **char
export import def #extern __p__wpgmptr() -> **ushort
export import def #extern __p__fmode() -> *int
export import def #extern _get_pgmptr(_Value: **char) -> int
export import def #extern _get_wpgmptr(_Value: **ushort) -> int
export import def #extern _set_fmode(_Mode: int) -> int
export import def #extern _get_fmode(_PMode: *int) -> int
export import def #extern abs(_Number: int) -> int
export import def #extern labs(_Number: long) -> long
export import def #extern llabs(_Number: int64) -> int64
export import def #extern _abs64(_Number: int64) -> int64
export import def #extern _byteswap_ushort(_Number: ushort) -> ushort
export import def #extern _byteswap_ulong(_Number: ulong) -> ulong
export import def #extern _byteswap_uint64(_Number: uint64) -> uint64
export import def #extern div(_Numerator: int, _Denominator: int) -> s__div_t
export import def #extern ldiv(_Numerator: long, _Denominator: long) -> s__ldiv_t
export import def #extern lldiv(_Numerator: int64, _Denominator: int64) -> s__lldiv_t
export import def #extern _lrotl(_Value: ulong, _Shift: int) -> ulong
export import def #extern _lrotr(_Value: ulong, _Shift: int) -> ulong
export import def #extern srand(_Seed: uint)
export import def #extern rand() -> int
export import def #extern atof(_String: *char) -> double
export import def #extern atoi(_String: *char) -> int
export import def #extern atol(_String: *char) -> long
export import def #extern atoll(_String: *char) -> int64
export import def #extern _atoi64(_String: *char) -> int64
export import def #extern _atof_l(_String: *char, _Locale: *s___crt_locale_pointers) -> double
export import def #extern _atoi_l(_String: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _atol_l(_String: *char, _Locale: *s___crt_locale_pointers) -> long
export import def #extern _atoll_l(_String: *char, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _atoi64_l(_String: *char, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _atoflt(_Result: *s__CRT_FLOAT, _String: *char) -> int
export import def #extern _atodbl(_Result: *s__CRT_DOUBLE, _String: *char) -> int
export import def #extern _atoldbl(_Result: *s__LDOUBLE, _String: *char) -> int
export import def #extern _atoflt_l(_Result: *s__CRT_FLOAT, _String: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _atodbl_l(_Result: *s__CRT_DOUBLE, _String: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _atoldbl_l(_Result: *s__LDOUBLE, _String: *char, _Locale: *s___crt_locale_pointers) -> int
export import def #extern strtof(_String: *char, _EndPtr: **char) -> float
export import def #extern _strtof_l(_String: *char, _EndPtr: **char, _Locale: *s___crt_locale_pointers) -> float
export import def #extern strtod(_String: *char, _EndPtr: **char) -> double
export import def #extern _strtod_l(_String: *char, _EndPtr: **char, _Locale: *s___crt_locale_pointers) -> double
export import def #extern strtold(_String: *char, _EndPtr: **char) -> float80
export import def #extern _strtold_l(_String: *char, _EndPtr: **char, _Locale: *s___crt_locale_pointers) -> float80
export import def #extern strtol(_String: *char, _EndPtr: **char, _Radix: int) -> long
export import def #extern _strtol_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> long
export import def #extern strtoll(_String: *char, _EndPtr: **char, _Radix: int) -> int64
export import def #extern _strtoll_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern strtoul(_String: *char, _EndPtr: **char, _Radix: int) -> ulong
export import def #extern _strtoul_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> ulong
export import def #extern strtoull(_String: *char, _EndPtr: **char, _Radix: int) -> uint64
export import def #extern _strtoull_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _strtoi64(_String: *char, _EndPtr: **char, _Radix: int) -> int64
export import def #extern _strtoi64_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> int64
export import def #extern _strtoui64(_String: *char, _EndPtr: **char, _Radix: int) -> uint64
export import def #extern _strtoui64_l(_String: *char, _EndPtr: **char, _Radix: int, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _itoa_s(_Value: int, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _itoa(_Value: int, _Buffer: *char, _Radix: int) -> *char
export import def #extern _ltoa_s(_Value: long, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ltoa(_Value: long, _Buffer: *char, _Radix: int) -> *char
export import def #extern _ultoa_s(_Value: ulong, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ultoa(_Value: ulong, _Buffer: *char, _Radix: int) -> *char
export import def #extern _i64toa_s(_Value: int64, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _i64toa(_Value: int64, _Buffer: *char, _Radix: int) -> *char
export import def #extern _ui64toa_s(_Value: uint64, _Buffer: *char, _BufferCount: uint64, _Radix: int) -> int
export import def #extern _ui64toa(_Value: uint64, _Buffer: *char, _Radix: int) -> *char
export import def #extern _ecvt_s(_Buffer: *char, _BufferCount: uint64, _Value: double, _DigitCount: int, _PtDec: *int, _PtSign: *int) -> int
export import def #extern _ecvt(_Value: double, _DigitCount: int, _PtDec: *int, _PtSign: *int) -> *char
export import def #extern _fcvt_s(_Buffer: *char, _BufferCount: uint64, _Value: double, _FractionalDigitCount: int, _PtDec: *int, _PtSign: *int) -> int
export import def #extern _fcvt(_Value: double, _FractionalDigitCount: int, _PtDec: *int, _PtSign: *int) -> *char
export import def #extern _gcvt_s(_Buffer: *char, _BufferCount: uint64, _Value: double, _DigitCount: int) -> int
export import def #extern _gcvt(_Value: double, _DigitCount: int, _Buffer: *char) -> *char
export import def #extern mblen(_Ch: *char, _MaxCount: uint64) -> int
export import def #extern _mblen_l(_Ch: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _mbstrlen(_String: *char) -> uint64
export import def #extern _mbstrlen_l(_String: *char, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _mbstrnlen(_String: *char, _MaxCount: uint64) -> uint64
export import def #extern _mbstrnlen_l(_String: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern mbtowc(_DstCh: *ushort, _SrcCh: *char, _SrcSizeInBytes: uint64) -> int
export import def #extern _mbtowc_l(_DstCh: *ushort, _SrcCh: *char, _SrcSizeInBytes: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern mbstowcs_s(_PtNumOfCharConverted: *uint64, _DstBuf: *ushort, _SizeInWords: uint64, _SrcBuf: *char, _MaxCount: uint64) -> int
export import def #extern mbstowcs(_Dest: *ushort, _Source: *char, _MaxCount: uint64) -> uint64
export import def #extern _mbstowcs_s_l(_PtNumOfCharConverted: *uint64, _DstBuf: *ushort, _SizeInWords: uint64, _SrcBuf: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _mbstowcs_l(_Dest: *ushort, _Source: *char, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern wctomb(_MbCh: *char, _WCh: ushort) -> int
export import def #extern _wctomb_l(_MbCh: *char, _WCh: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern wctomb_s(_SizeConverted: *int, _MbCh: *char, _SizeInBytes: uint64, _WCh: ushort) -> int
export import def #extern _wctomb_s_l(_SizeConverted: *int, _MbCh: *char, _SizeInBytes: uint64, _WCh: ushort, _Locale: *s___crt_locale_pointers) -> int
export import def #extern wcstombs_s(_PtNumOfCharConverted: *uint64, _Dst: *char, _DstSizeInBytes: uint64, _Src: *ushort, _MaxCountInBytes: uint64) -> int
export import def #extern wcstombs(_Dest: *char, _Source: *ushort, _MaxCount: uint64) -> uint64
export import def #extern _wcstombs_s_l(_PtNumOfCharConverted: *uint64, _Dst: *char, _DstSizeInBytes: uint64, _Src: *ushort, _MaxCountInBytes: uint64, _Locale: *s___crt_locale_pointers) -> int
export import def #extern _wcstombs_l(_Dest: *char, _Source: *ushort, _MaxCount: uint64, _Locale: *s___crt_locale_pointers) -> uint64
export import def #extern _fullpath(_Buffer: *char, _Path: *char, _BufferCount: uint64) -> *char
export import def #extern _makepath_s(_Buffer: *char, _BufferCount: uint64, _Drive: *char, _Dir: *char, _Filename: *char, _Ext: *char) -> int
export import def #extern _makepath(_Buffer: *char, _Drive: *char, _Dir: *char, _Filename: *char, _Ext: *char)
export import def #extern _splitpath(_FullPath: *char, _Drive: *char, _Dir: *char, _Filename: *char, _Ext: *char)
export import def #extern _splitpath_s(_FullPath: *char, _Drive: *char, _DriveCount: uint64, _Dir: *char, _DirCount: uint64, _Filename: *char, _FilenameCount: uint64, _Ext: *char, _ExtCount: uint64) -> int
export import def #extern getenv_s(_RequiredCount: *uint64, _Buffer: *char, _BufferCount: uint64, _VarName: *char) -> int
export import def #extern __p___argc() -> *int
export import def #extern __p___argv() -> ***char
export import def #extern __p___wargv() -> ***ushort
export import def #extern __p__environ() -> ***char
export import def #extern __p__wenviron() -> ***ushort
export import def #extern getenv(_VarName: *char) -> *char
export import def #extern _dupenv_s(_Buffer: **char, _BufferCount: *uint64, _VarName: *char) -> int
export import def #extern system(_Command: *char) -> int
export import def #extern _putenv(_EnvString: *char) -> int
export import def #extern _putenv_s(_Name: *char, _Value: *char) -> int
export import def #extern _searchenv_s(_Filename: *char, _VarName: *char, _Buffer: *char, _BufferCount: uint64) -> int
export import def #extern _searchenv(_Filename: *char, _VarName: *char, _Buffer: *char)
export import def #extern _seterrormode(_Mode: int)
export import def #extern _beep(_Frequency: uint, _Duration: uint)
export import def #extern _sleep(_Duration: ulong)
export import def #extern ecvt(_Value: double, _DigitCount: int, _PtDec: *int, _PtSign: *int) -> *char
export import def #extern fcvt(_Value: double, _FractionalDigitCount: int, _PtDec: *int, _PtSign: *int) -> *char
export import def #extern gcvt(_Value: double, _DigitCount: int, _DstBuf: *char) -> *char
export import def #extern itoa(_Value: int, _Buffer: *char, _Radix: int) -> *char
export import def #extern ltoa(_Value: long, _Buffer: *char, _Radix: int) -> *char
export import def #extern swab(_Buf1: *char, _Buf2: *char, _SizeInBytes: int)
export import def #extern ultoa(_Value: ulong, _Buffer: *char, _Radix: int) -> *char
export import def #extern putenv(_EnvString: *char) -> int
export import def #extern onexit(_Func: def () -> (int)) -> def () -> (int)
export const REGCLS_SINGLEUSE: int = 0
export const REGCLS_MULTIPLEUSE: int = 1
export const REGCLS_MULTI_SEPARATE: int = 2
export const REGCLS_SUSPENDED: int = 4
export const REGCLS_SURROGATE: int = 8
export const REGCLS_AGILE: int = 16
export const COINITBASE_MULTITHREADED: int = 0
export import var #extern __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IUnknown: s__GUID
export import def #extern IUnknown_QueryInterface_Proxy(This: *s_IUnknown, riid: *s__GUID, ppvObject: **) -> long
export import def #extern IUnknown_QueryInterface_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IUnknown_AddRef_Proxy(This: *s_IUnknown) -> ulong
export import def #extern IUnknown_AddRef_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IUnknown_Release_Proxy(This: *s_IUnknown) -> ulong
export import def #extern IUnknown_Release_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec: *
export import var #extern IID_AsyncIUnknown: s__GUID
export import var #extern __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec: *
export import var #extern IID_IClassFactory: s__GUID
export import def #extern IClassFactory_RemoteCreateInstance_Proxy(This: *s_IClassFactory, riid: *s__GUID, ppvObject: **s_IUnknown) -> long
export import def #extern IClassFactory_RemoteCreateInstance_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IClassFactory_RemoteLockServer_Proxy(This: *s_IClassFactory, fLock: int) -> long
export import def #extern IClassFactory_RemoteLockServer_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec: *
export import def #extern IClassFactory_CreateInstance_Proxy(This: *s_IClassFactory, pUnkOuter: *s_IUnknown, riid: *s__GUID, ppvObject: **) -> long
export import def #extern IClassFactory_CreateInstance_Stub(This: *s_IClassFactory, riid: *s__GUID, ppvObject: **s_IUnknown) -> long
export import def #extern IClassFactory_LockServer_Proxy(This: *s_IClassFactory, fLock: int) -> long
export import def #extern IClassFactory_LockServer_Stub(This: *s_IClassFactory, fLock: int) -> long
export import var #extern __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IMarshal: s__GUID
export import var #extern IID_INoMarshal: s__GUID
export import var #extern IID_IAgileObject: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec: *
export const ACTIVATIONTYPE_UNCATEGORIZED: int = 0
export const ACTIVATIONTYPE_FROM_MONIKER: int = 1
export const ACTIVATIONTYPE_FROM_DATA: int = 2
export const ACTIVATIONTYPE_FROM_STORAGE: int = 4
export const ACTIVATIONTYPE_FROM_STREAM: int = 8
export const ACTIVATIONTYPE_FROM_FILE: int = 16
export import var #extern IID_IActivationFilter: s__GUID
export import var #extern IID_IMarshal2: s__GUID
export import var #extern IID_IMalloc: s__GUID
export import var #extern IID_IStdMarshalInfo: s__GUID
export const EXTCONN_STRONG: int = 1
export const EXTCONN_WEAK: int = 2
export const EXTCONN_CALLABLE: int = 4
export import var #extern IID_IExternalConnection: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec: *
export import var #extern IID_IMultiQI: s__GUID
export import var #extern IID_AsyncIMultiQI: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec: *
export import var #extern IID_IInternalUnknown: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec: *
export import var #extern IID_IEnumUnknown: s__GUID
export import def #extern IEnumUnknown_RemoteNext_Proxy(This: *s_IEnumUnknown, celt: ulong, rgelt: **s_IUnknown, pceltFetched: *ulong) -> long
export import def #extern IEnumUnknown_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IEnumString: s__GUID
export import def #extern IEnumString_RemoteNext_Proxy(This: *s_IEnumString, celt: ulong, rgelt: **ushort, pceltFetched: *ulong) -> long
export import def #extern IEnumString_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_ISequentialStream: s__GUID
export import def #extern ISequentialStream_RemoteRead_Proxy(This: *s_ISequentialStream, pv: *uint8, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ISequentialStream_RemoteRead_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ISequentialStream_RemoteWrite_Proxy(This: *s_ISequentialStream, pv: *uint8, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern ISequentialStream_RemoteWrite_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export const STGTY_STORAGE: int = 1
export const STGTY_STREAM: int = 2
export const STGTY_LOCKBYTES: int = 3
export const STGTY_PROPERTY: int = 4
export const STREAM_SEEK_SET: int = 0
export const STREAM_SEEK_CUR: int = 1
export const STREAM_SEEK_END: int = 2
export const LOCK_WRITE: int = 1
export const LOCK_EXCLUSIVE: int = 2
export const LOCK_ONLYONCE: int = 4
export import var #extern IID_IStream: s__GUID
export import def #extern IStream_RemoteSeek_Proxy(This: *s_IStream, dlibMove: u__LARGE_INTEGER, dwOrigin: ulong, plibNewPosition: *u__ULARGE_INTEGER) -> long
export import def #extern IStream_RemoteSeek_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IStream_RemoteCopyTo_Proxy(This: *s_IStream, pstm: *s_IStream, cb: u__ULARGE_INTEGER, pcbRead: *u__ULARGE_INTEGER, pcbWritten: *u__ULARGE_INTEGER) -> long
export import def #extern IStream_RemoteCopyTo_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IRpcChannelBuffer: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec: *
export import var #extern IID_IRpcChannelBuffer2: s__GUID
export import var #extern IID_IAsyncRpcChannelBuffer: s__GUID
export import var #extern IID_IRpcChannelBuffer3: s__GUID
export import var #extern IID_IRpcSyntaxNegotiate: s__GUID
export import var #extern IID_IRpcProxyBuffer: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec: *
export import var #extern IID_IRpcStubBuffer: s__GUID
export import var #extern IID_IPSFactoryBuffer: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec: *
export import var #extern IID_IChannelHook: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec: *
export const EOAC_NONE: int = 0
export const EOAC_MUTUAL_AUTH: int = 1
export const EOAC_STATIC_CLOAKING: int = 32
export const EOAC_DYNAMIC_CLOAKING: int = 64
export const EOAC_ANY_AUTHORITY: int = 128
export const EOAC_MAKE_FULLSIC: int = 256
export const EOAC_DEFAULT: int = 2048
export const EOAC_SECURE_REFS: int = 2
export const EOAC_ACCESS_CONTROL: int = 4
export const EOAC_APPID: int = 8
export const EOAC_DYNAMIC: int = 16
export const EOAC_REQUIRE_FULLSIC: int = 512
export const EOAC_AUTO_IMPERSONATE: int = 1024
export const EOAC_DISABLE_AAA: int = 4096
export const EOAC_NO_CUSTOM_MARSHAL: int = 8192
export const EOAC_RESERVED1: int = 16384
export import var #extern IID_IClientSecurity: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec: *
export import var #extern IID_IServerSecurity: s__GUID
export const COMBND_RPCTIMEOUT: int = 1
export const COMBND_SERVER_LOCALITY: int = 2
export const COMBND_RESERVED1: int = 4
export const COMBND_RESERVED2: int = 5
export const COMBND_RESERVED3: int = 8
export const COMBND_RESERVED4: int = 16
export const SERVER_LOCALITY_PROCESS_LOCAL: int = 0
export const SERVER_LOCALITY_MACHINE_LOCAL: int = 1
export const SERVER_LOCALITY_REMOTE: int = 2
export import var #extern __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec: *
export import var #extern IID_IRpcOptions: s__GUID
export const COMGLB_EXCEPTION_HANDLING: int = 1
export const COMGLB_APPID: int = 2
export const COMGLB_RPC_THREADPOOL_SETTING: int = 3
export const COMGLB_RO_SETTINGS: int = 4
export const COMGLB_UNMARSHALING_POLICY: int = 5
export const COMGLB_PROPERTIES_RESERVED1: int = 6
export const COMGLB_PROPERTIES_RESERVED2: int = 7
export const COMGLB_PROPERTIES_RESERVED3: int = 8
export const COMGLB_EXCEPTION_HANDLE: int = 0
export const COMGLB_EXCEPTION_DONOT_HANDLE_FATAL: int = 1
export const COMGLB_EXCEPTION_DONOT_HANDLE: int = 1
export const COMGLB_EXCEPTION_DONOT_HANDLE_ANY: int = 2
export const COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL: int = 0
export const COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL: int = 1
export const COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES: int = 1
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES: int = 2
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES: int = 4
export const COMGLB_FAST_RUNDOWN: int = 8
export const COMGLB_RESERVED1: int = 16
export const COMGLB_RESERVED2: int = 32
export const COMGLB_RESERVED3: int = 64
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES: int = 128
export const COMGLB_RESERVED4: int = 256
export const COMGLB_RESERVED5: int = 512
export const COMGLB_RESERVED6: int = 1024
export const COMGLB_UNMARSHALING_POLICY_NORMAL: int = 0
export const COMGLB_UNMARSHALING_POLICY_STRONG: int = 1
export const COMGLB_UNMARSHALING_POLICY_HYBRID: int = 2
export import var #extern __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec: *
export import var #extern IID_IGlobalOptions: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec: *
export import var #extern IID_ISurrogate: s__GUID
export import var #extern IID_IGlobalInterfaceTable: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec: *
export import var #extern IID_ISynchronize: s__GUID
export import var #extern IID_ISynchronizeHandle: s__GUID
export import var #extern IID_ISynchronizeEvent: s__GUID
export import var #extern IID_ISynchronizeContainer: s__GUID
export import var #extern IID_ISynchronizeMutex: s__GUID
export import var #extern IID_ICancelMethodCalls: s__GUID
export const DCOM_NONE: int = 0
export const DCOM_CALL_COMPLETE: int = 1
export const DCOM_CALL_CANCELED: int = 2
export import var #extern IID_IAsyncManager: s__GUID
export import var #extern IID_ICallFactory: s__GUID
export import var #extern IID_IRpcHelper: s__GUID
export import var #extern IID_IReleaseMarshalBuffers: s__GUID
export import var #extern IID_IWaitMultiple: s__GUID
export import var #extern IID_IAddrTrackingControl: s__GUID
export import var #extern IID_IAddrExclusionControl: s__GUID
export import var #extern IID_IPipeByte: s__GUID
export import var #extern IID_AsyncIPipeByte: s__GUID
export import var #extern IID_IPipeLong: s__GUID
export import var #extern IID_AsyncIPipeLong: s__GUID
export import var #extern IID_IPipeDouble: s__GUID
export import var #extern IID_AsyncIPipeDouble: s__GUID
export const APTTYPEQUALIFIER_NONE: int = 0
export const APTTYPEQUALIFIER_IMPLICIT_MTA: int = 1
export const APTTYPEQUALIFIER_NA_ON_MTA: int = 2
export const APTTYPEQUALIFIER_NA_ON_STA: int = 3
export const APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA: int = 4
export const APTTYPEQUALIFIER_NA_ON_MAINSTA: int = 5
export const APTTYPEQUALIFIER_APPLICATION_STA: int = 6
export const APTTYPEQUALIFIER_RESERVED_1: int = 7
export const APTTYPE_CURRENT: int = -1
export const APTTYPE_STA: int = 0
export const APTTYPE_MTA: int = 1
export const APTTYPE_NA: int = 2
export const APTTYPE_MAINSTA: int = 3
export const THDTYPE_BLOCKMESSAGES: int = 0
export const THDTYPE_PROCESSMESSAGES: int = 1
export import var #extern __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec: *
export import var #extern IID_IComThreadingInfo: s__GUID
export import var #extern IID_IProcessInitControl: s__GUID
export import var #extern IID_IFastRundown: s__GUID
export const CO_MARSHALING_SOURCE_IS_APP_CONTAINER: int = 0
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1: int = -2147483648
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2: int = -2147483647
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3: int = -2147483646
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4: int = -2147483645
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5: int = -2147483644
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6: int = -2147483643
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7: int = -2147483642
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8: int = -2147483641
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9: int = -2147483640
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10: int = -2147483639
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11: int = -2147483638
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12: int = -2147483637
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13: int = -2147483636
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14: int = -2147483635
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15: int = -2147483634
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16: int = -2147483633
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17: int = -2147483632
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18: int = -2147483631
export import var #extern __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec: *
export import var #extern IID_IMarshalingStream: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec: *
export import var #extern IID_IAgileReference: s__GUID
export import var #extern IID_ICallbackWithNoReentrancyToApplicationSTA: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec: *
export import var #extern IID_IMachineGlobalObjectTable: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec: *
export import var #extern IID_ISupportAllowLowerTrustActivation: s__GUID
export import var #extern __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec: *
export import def #extern IEnumUnknown_Next_Proxy(This: *s_IEnumUnknown, celt: ulong, rgelt: **s_IUnknown, pceltFetched: *ulong) -> long
export import def #extern IEnumUnknown_Next_Stub(This: *s_IEnumUnknown, celt: ulong, rgelt: **s_IUnknown, pceltFetched: *ulong) -> long
export import def #extern IEnumString_Next_Proxy(This: *s_IEnumString, celt: ulong, rgelt: **ushort, pceltFetched: *ulong) -> long
export import def #extern IEnumString_Next_Stub(This: *s_IEnumString, celt: ulong, rgelt: **ushort, pceltFetched: *ulong) -> long
export import def #extern ISequentialStream_Read_Proxy(This: *s_ISequentialStream, pv: *, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ISequentialStream_Read_Stub(This: *s_ISequentialStream, pv: *uint8, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ISequentialStream_Write_Proxy(This: *s_ISequentialStream, pv: *, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern ISequentialStream_Write_Stub(This: *s_ISequentialStream, pv: *uint8, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IStream_Seek_Proxy(This: *s_IStream, dlibMove: u__LARGE_INTEGER, dwOrigin: ulong, plibNewPosition: *u__ULARGE_INTEGER) -> long
export import def #extern IStream_Seek_Stub(This: *s_IStream, dlibMove: u__LARGE_INTEGER, dwOrigin: ulong, plibNewPosition: *u__ULARGE_INTEGER) -> long
export import def #extern IStream_CopyTo_Proxy(This: *s_IStream, pstm: *s_IStream, cb: u__ULARGE_INTEGER, pcbRead: *u__ULARGE_INTEGER, pcbWritten: *u__ULARGE_INTEGER) -> long
export import def #extern IStream_CopyTo_Stub(This: *s_IStream, pstm: *s_IStream, cb: u__ULARGE_INTEGER, pcbRead: *u__ULARGE_INTEGER, pcbWritten: *u__ULARGE_INTEGER) -> long
export import var #extern GUID_NULL: s__GUID
export import var #extern CATID_MARSHALER: s__GUID
export import var #extern IID_IRpcChannel: s__GUID
export import var #extern IID_IRpcStub: s__GUID
export import var #extern IID_IStubManager: s__GUID
export import var #extern IID_IRpcProxy: s__GUID
export import var #extern IID_IProxyManager: s__GUID
export import var #extern IID_IPSFactory: s__GUID
export import var #extern IID_IInternalMoniker: s__GUID
export import var #extern IID_IDfReserved1: s__GUID
export import var #extern IID_IDfReserved2: s__GUID
export import var #extern IID_IDfReserved3: s__GUID
export import var #extern CLSID_StdMarshal: s__GUID
export import var #extern CLSID_AggStdMarshal: s__GUID
export import var #extern CLSID_StdAsyncActManager: s__GUID
export import var #extern IID_IStub: s__GUID
export import var #extern IID_IProxy: s__GUID
export import var #extern IID_IEnumGeneric: s__GUID
export import var #extern IID_IEnumHolder: s__GUID
export import var #extern IID_IEnumCallback: s__GUID
export import var #extern IID_IOleManager: s__GUID
export import var #extern IID_IOlePresObj: s__GUID
export import var #extern IID_IDebug: s__GUID
export import var #extern IID_IDebugStream: s__GUID
export import var #extern CLSID_PSGenObject: s__GUID
export import var #extern CLSID_PSClientSite: s__GUID
export import var #extern CLSID_PSClassObject: s__GUID
export import var #extern CLSID_PSInPlaceActive: s__GUID
export import var #extern CLSID_PSInPlaceFrame: s__GUID
export import var #extern CLSID_PSDragDrop: s__GUID
export import var #extern CLSID_PSBindCtx: s__GUID
export import var #extern CLSID_PSEnumerators: s__GUID
export import var #extern CLSID_StaticMetafile: s__GUID
export import var #extern CLSID_StaticDib: s__GUID
export import var #extern CID_CDfsVolume: s__GUID
export import var #extern CLSID_DCOMAccessControl: s__GUID
export import var #extern CLSID_GlobalOptions: s__GUID
export import var #extern CLSID_StdGlobalInterfaceTable: s__GUID
export import var #extern CLSID_MachineGlobalObjectTable: s__GUID
export import var #extern CLSID_ActivationCapabilities: s__GUID
export import var #extern CLSID_ComBinding: s__GUID
export import var #extern CLSID_StdEvent: s__GUID
export import var #extern CLSID_ManualResetEvent: s__GUID
export import var #extern CLSID_SynchronizeContainer: s__GUID
export import var #extern CLSID_AddrControl: s__GUID
export import var #extern CLSID_ContextSwitcher: s__GUID
export import var #extern CLSID_CCDFormKrnl: s__GUID
export import var #extern CLSID_CCDPropertyPage: s__GUID
export import var #extern CLSID_CCDFormDialog: s__GUID
export import var #extern CLSID_CCDCommandButton: s__GUID
export import var #extern CLSID_CCDComboBox: s__GUID
export import var #extern CLSID_CCDTextBox: s__GUID
export import var #extern CLSID_CCDCheckBox: s__GUID
export import var #extern CLSID_CCDLabel: s__GUID
export import var #extern CLSID_CCDOptionButton: s__GUID
export import var #extern CLSID_CCDListBox: s__GUID
export import var #extern CLSID_CCDScrollBar: s__GUID
export import var #extern CLSID_CCDGroupBox: s__GUID
export import var #extern CLSID_CCDGeneralPropertyPage: s__GUID
export import var #extern CLSID_CCDGenericPropertyPage: s__GUID
export import var #extern CLSID_CCDFontPropertyPage: s__GUID
export import var #extern CLSID_CCDColorPropertyPage: s__GUID
export import var #extern CLSID_CCDLabelPropertyPage: s__GUID
export import var #extern CLSID_CCDCheckBoxPropertyPage: s__GUID
export import var #extern CLSID_CCDTextBoxPropertyPage: s__GUID
export import var #extern CLSID_CCDOptionButtonPropertyPage: s__GUID
export import var #extern CLSID_CCDListBoxPropertyPage: s__GUID
export import var #extern CLSID_CCDCommandButtonPropertyPage: s__GUID
export import var #extern CLSID_CCDComboBoxPropertyPage: s__GUID
export import var #extern CLSID_CCDScrollBarPropertyPage: s__GUID
export import var #extern CLSID_CCDGroupBoxPropertyPage: s__GUID
export import var #extern CLSID_CCDXObjectPropertyPage: s__GUID
export import var #extern CLSID_CStdPropertyFrame: s__GUID
export import var #extern CLSID_CFormPropertyPage: s__GUID
export import var #extern CLSID_CGridPropertyPage: s__GUID
export import var #extern CLSID_CWSJArticlePage: s__GUID
export import var #extern CLSID_CSystemPage: s__GUID
export import var #extern CLSID_IdentityUnmarshal: s__GUID
export import var #extern CLSID_InProcFreeMarshaler: s__GUID
export import var #extern CLSID_Picture_Metafile: s__GUID
export import var #extern CLSID_Picture_EnhMetafile: s__GUID
export import var #extern CLSID_Picture_Dib: s__GUID
export import var #extern GUID_TRISTATE: s__GUID
export import def #extern #dllimport CoGetMalloc(dwMemContext: ulong, ppMalloc: **s_IMalloc) -> long
export import def #extern #dllimport CreateStreamOnHGlobal(hGlobal: *, fDeleteOnRelease: int, ppstm: **s_IStream) -> long
export import def #extern #dllimport GetHGlobalFromStream(pstm: *s_IStream, phglobal: **) -> long
export import def #extern #dllimport CoUninitialize()
export import def #extern #dllimport CoGetCurrentProcess() -> ulong
export import def #extern #dllimport CoInitializeEx(pvReserved: *, dwCoInit: ulong) -> long
export import def #extern #dllimport CoGetCallerTID(lpdwTID: *ulong) -> long
export import def #extern #dllimport CoGetCurrentLogicalThreadId(pguid: *s__GUID) -> long
export import def #extern #dllimport CoGetContextToken(pToken: *uint64) -> long
export import def #extern #dllimport CoGetDefaultContext(aptType: e__APTTYPE, riid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport CoGetApartmentType(pAptType: *e__APTTYPE, pAptQualifier: *e__APTTYPEQUALIFIER) -> long
export import def #extern #dllimport CoDecodeProxy(dwClientPid: ulong, ui64ProxyAddress: uint64, pServerInformation: *s_tagServerInformation) -> long
export import def #extern #dllimport CoIncrementMTAUsage(pCookie: **s_CO_MTA_USAGE_COOKIE__) -> long
export import def #extern #dllimport CoDecrementMTAUsage(Cookie: *s_CO_MTA_USAGE_COOKIE__) -> long
export import def #extern #dllimport CoAllowUnmarshalerCLSID(clsid: *s__GUID) -> long
export import def #extern #dllimport CoGetObjectContext(riid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport CoGetClassObject(rclsid: *s__GUID, dwClsContext: ulong, pvReserved: *, riid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport CoRegisterClassObject(rclsid: *s__GUID, pUnk: *s_IUnknown, dwClsContext: ulong, flags: ulong, lpdwRegister: *ulong) -> long
export import def #extern #dllimport CoRevokeClassObject(dwRegister: ulong) -> long
export import def #extern #dllimport CoResumeClassObjects() -> long
export import def #extern #dllimport CoSuspendClassObjects() -> long
export import def #extern #dllimport CoAddRefServerProcess() -> ulong
export import def #extern #dllimport CoReleaseServerProcess() -> ulong
export import def #extern #dllimport CoGetPSClsid(riid: *s__GUID, pClsid: *s__GUID) -> long
export import def #extern #dllimport CoRegisterPSClsid(riid: *s__GUID, rclsid: *s__GUID) -> long
export import def #extern #dllimport CoRegisterSurrogate(pSurrogate: *s_ISurrogate) -> long
export import def #extern #dllimport CoGetMarshalSizeMax(pulSize: *ulong, riid: *s__GUID, pUnk: *s_IUnknown, dwDestContext: ulong, pvDestContext: *, mshlflags: ulong) -> long
export import def #extern #dllimport CoMarshalInterface(pStm: *s_IStream, riid: *s__GUID, pUnk: *s_IUnknown, dwDestContext: ulong, pvDestContext: *, mshlflags: ulong) -> long
export import def #extern #dllimport CoUnmarshalInterface(pStm: *s_IStream, riid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport CoMarshalHresult(pstm: *s_IStream, hresult: long) -> long
export import def #extern #dllimport CoUnmarshalHresult(pstm: *s_IStream, phresult: *long) -> long
export import def #extern #dllimport CoReleaseMarshalData(pStm: *s_IStream) -> long
export import def #extern #dllimport CoDisconnectObject(pUnk: *s_IUnknown, dwReserved: ulong) -> long
export import def #extern #dllimport CoLockObjectExternal(pUnk: *s_IUnknown, fLock: int, fLastUnlockReleases: int) -> long
export import def #extern #dllimport CoGetStandardMarshal(riid: *s__GUID, pUnk: *s_IUnknown, dwDestContext: ulong, pvDestContext: *, mshlflags: ulong, ppMarshal: **s_IMarshal) -> long
export import def #extern #dllimport CoGetStdMarshalEx(pUnkOuter: *s_IUnknown, smexflags: ulong, ppUnkInner: **s_IUnknown) -> long
export const SMEXF_SERVER: int = 1
export const SMEXF_HANDLER: int = 2
export import def #extern #dllimport CoIsHandlerConnected(pUnk: *s_IUnknown) -> int
export import def #extern #dllimport CoMarshalInterThreadInterfaceInStream(riid: *s__GUID, pUnk: *s_IUnknown, ppStm: **s_IStream) -> long
export import def #extern #dllimport CoGetInterfaceAndReleaseStream(pStm: *s_IStream, iid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport CoCreateFreeThreadedMarshaler(punkOuter: *s_IUnknown, ppunkMarshal: **s_IUnknown) -> long
export import def #extern #dllimport CoFreeUnusedLibraries()
export import def #extern #dllimport CoFreeUnusedLibrariesEx(dwUnloadDelay: ulong, dwReserved: ulong)
export import def #extern #dllimport CoDisconnectContext(dwTimeout: ulong) -> long
export import def #extern #dllimport CoInitializeSecurity(pSecDesc: *, cAuthSvc: long, asAuthSvc: *s_tagSOLE_AUTHENTICATION_SERVICE, pReserved1: *, dwAuthnLevel: ulong, dwImpLevel: ulong, pAuthList: *, dwCapabilities: ulong, pReserved3: *) -> long
export import def #extern #dllimport CoGetCallContext(riid: *s__GUID, ppInterface: **) -> long
export import def #extern #dllimport CoQueryProxyBlanket(pProxy: *s_IUnknown, pwAuthnSvc: *ulong, pAuthzSvc: *ulong, pServerPrincName: **ushort, pAuthnLevel: *ulong, pImpLevel: *ulong, pAuthInfo: **, pCapabilites: *ulong) -> long
export import def #extern #dllimport CoSetProxyBlanket(pProxy: *s_IUnknown, dwAuthnSvc: ulong, dwAuthzSvc: ulong, pServerPrincName: *ushort, dwAuthnLevel: ulong, dwImpLevel: ulong, pAuthInfo: *, dwCapabilities: ulong) -> long
export import def #extern #dllimport CoCopyProxy(pProxy: *s_IUnknown, ppCopy: **s_IUnknown) -> long
export import def #extern #dllimport CoQueryClientBlanket(pAuthnSvc: *ulong, pAuthzSvc: *ulong, pServerPrincName: **ushort, pAuthnLevel: *ulong, pImpLevel: *ulong, pPrivs: **, pCapabilities: *ulong) -> long
export import def #extern #dllimport CoImpersonateClient() -> long
export import def #extern #dllimport CoRevertToSelf() -> long
export import def #extern #dllimport CoQueryAuthenticationServices(pcAuthSvc: *ulong, asAuthSvc: **s_tagSOLE_AUTHENTICATION_SERVICE) -> long
export import def #extern #dllimport CoSwitchCallContext(pNewObject: *s_IUnknown, ppOldObject: **s_IUnknown) -> long
export import def #extern #dllimport CoCreateInstance(rclsid: *s__GUID, pUnkOuter: *s_IUnknown, dwClsContext: ulong, riid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport CoCreateInstanceEx(Clsid: *s__GUID, punkOuter: *s_IUnknown, dwClsCtx: ulong, pServerInfo: *s__COSERVERINFO, dwCount: ulong, pResults: *s_tagMULTI_QI) -> long
export import def #extern #dllimport CoCreateInstanceFromApp(Clsid: *s__GUID, punkOuter: *s_IUnknown, dwClsCtx: ulong, reserved: *, dwCount: ulong, pResults: *s_tagMULTI_QI) -> long
export import def #extern #dllimport CoRegisterActivationFilter(pActivationFilter: *s_IActivationFilter) -> long
export import def #extern #dllimport CoGetCancelObject(dwThreadId: ulong, iid: *s__GUID, ppUnk: **) -> long
export import def #extern #dllimport CoSetCancelObject(pUnk: *s_IUnknown) -> long
export import def #extern #dllimport CoCancelCall(dwThreadId: ulong, ulTimeout: ulong) -> long
export import def #extern #dllimport CoTestCancel() -> long
export import def #extern #dllimport CoEnableCallCancellation(pReserved: *) -> long
export import def #extern #dllimport CoDisableCallCancellation(pReserved: *) -> long
export import def #extern #dllimport StringFromCLSID(rclsid: *s__GUID, lplpsz: **ushort) -> long
export import def #extern #dllimport CLSIDFromString(lpsz: *ushort, pclsid: *s__GUID) -> long
export import def #extern #dllimport StringFromIID(rclsid: *s__GUID, lplpsz: **ushort) -> long
export import def #extern #dllimport IIDFromString(lpsz: *ushort, lpiid: *s__GUID) -> long
export import def #extern #dllimport ProgIDFromCLSID(clsid: *s__GUID, lplpszProgID: **ushort) -> long
export import def #extern #dllimport CLSIDFromProgID(lpszProgID: *ushort, lpclsid: *s__GUID) -> long
export import def #extern #dllimport StringFromGUID2(rguid: *s__GUID, lpsz: *ushort, cchMax: int) -> int
export import def #extern #dllimport CoCreateGuid(pguid: *s__GUID) -> long
export import def #extern #dllimport PropVariantCopy(pvarDest: *s_tagPROPVARIANT, pvarSrc: *s_tagPROPVARIANT) -> long
export import def #extern #dllimport PropVariantClear(pvar: *s_tagPROPVARIANT) -> long
export import def #extern #dllimport FreePropVariantArray(cVariants: ulong, rgvars: *s_tagPROPVARIANT) -> long
export import def #extern #dllimport CoWaitForMultipleHandles(dwFlags: ulong, dwTimeout: ulong, cHandles: ulong, pHandles: **, lpdwindex: *ulong) -> long
export const COWAIT_DEFAULT: int = 0
export const COWAIT_WAITALL: int = 1
export const COWAIT_ALERTABLE: int = 2
export const COWAIT_INPUTAVAILABLE: int = 4
export const COWAIT_DISPATCH_CALLS: int = 8
export const COWAIT_DISPATCH_WINDOW_MESSAGES: int = 16
export const CWMO_DEFAULT: int = 0
export const CWMO_DISPATCH_CALLS: int = 1
export const CWMO_DISPATCH_WINDOW_MESSAGES: int = 2
export import def #extern #dllimport CoWaitForMultipleObjects(dwFlags: ulong, dwTimeout: ulong, cHandles: ulong, pHandles: **, lpdwindex: *ulong) -> long
export import def #extern #dllimport CoGetTreatAsClass(clsidOld: *s__GUID, pClsidNew: *s__GUID) -> long
export import def #extern #dllimport CoInvalidateRemoteMachineBindings(pszMachineName: *ushort) -> long
export const AGILEREFERENCE_DEFAULT: int = 0
export const AGILEREFERENCE_DELAYEDMARSHAL: int = 1
export import def #extern #dllimport RoGetAgileReference(options: e_AgileReferenceOptions, riid: *s__GUID, pUnk: *s_IUnknown, ppAgileReference: **s_IAgileReference) -> long
export import def #extern DllGetClassObject(rclsid: *s__GUID, riid: *s__GUID, ppv: **) -> long
export import def #extern DllCanUnloadNow() -> long
export import def #extern #dllimport CoTaskMemAlloc(cb: uint64) -> *
export import def #extern #dllimport CoTaskMemRealloc(pv: *, cb: uint64) -> *
export import def #extern #dllimport CoTaskMemFree(pv: *)
export import def #extern #dllimport CoFileTimeNow(lpFileTime: *s__FILETIME) -> long
export import def #extern #dllimport CLSIDFromProgIDEx(lpszProgID: *ushort, lpclsid: *s__GUID) -> long
export import def #extern #dllimport CoRegisterDeviceCatalog(deviceInstanceId: *ushort, cookie: **s_CO_DEVICE_CATALOG_COOKIE__) -> long
export import def #extern #dllimport CoRevokeDeviceCatalog(cookie: *s_CO_DEVICE_CATALOG_COOKIE__) -> long
export import var #extern __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec: *
export import var #extern IID_IMallocSpy: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec: *
export const BIND_MAYBOTHERUSER: int = 1
export const BIND_JUSTTESTEXISTENCE: int = 2
export import var #extern IID_IBindCtx: s__GUID
export import def #extern IBindCtx_RemoteSetBindOptions_Proxy(This: *s_IBindCtx, pbindopts: *s_tagBIND_OPTS2) -> long
export import def #extern IBindCtx_RemoteSetBindOptions_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindCtx_RemoteGetBindOptions_Proxy(This: *s_IBindCtx, pbindopts: *s_tagBIND_OPTS2) -> long
export import def #extern IBindCtx_RemoteGetBindOptions_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IEnumMoniker: s__GUID
export import def #extern IEnumMoniker_RemoteNext_Proxy(This: *s_IEnumMoniker, celt: ulong, rgelt: **s_IMoniker, pceltFetched: *ulong) -> long
export import def #extern IEnumMoniker_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec: *
export import var #extern IID_IRunnableObject: s__GUID
export import def #extern IRunnableObject_RemoteIsRunning_Proxy(This: *s_IRunnableObject) -> long
export import def #extern IRunnableObject_RemoteIsRunning_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IRunningObjectTable: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec: *
export import var #extern IID_IPersist: s__GUID
export import var #extern IID_IPersistStream: s__GUID
export const MKSYS_NONE: int = 0
export const MKSYS_GENERICCOMPOSITE: int = 1
export const MKSYS_FILEMONIKER: int = 2
export const MKSYS_ANTIMONIKER: int = 3
export const MKSYS_ITEMMONIKER: int = 4
export const MKSYS_POINTERMONIKER: int = 5
export const MKSYS_CLASSMONIKER: int = 7
export const MKSYS_OBJREFMONIKER: int = 8
export const MKSYS_SESSIONMONIKER: int = 9
export const MKSYS_LUAMONIKER: int = 10
export const MKRREDUCE_ONE: int = 196608
export const MKRREDUCE_TOUSER: int = 131072
export const MKRREDUCE_THROUGHUSER: int = 65536
export const MKRREDUCE_ALL: int = 0
export import var #extern IID_IMoniker: s__GUID
export import def #extern IMoniker_RemoteBindToObject_Proxy(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riidResult: *s__GUID, ppvResult: **s_IUnknown) -> long
export import def #extern IMoniker_RemoteBindToObject_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IMoniker_RemoteBindToStorage_Proxy(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riid: *s__GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IMoniker_RemoteBindToStorage_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec: *
export import var #extern IID_IROTData: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec: *
export import var #extern IID_IEnumSTATSTG: s__GUID
export import def #extern IEnumSTATSTG_RemoteNext_Proxy(This: *s_IEnumSTATSTG, celt: ulong, rgelt: *s_tagSTATSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATSTG_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IStorage: s__GUID
export import def #extern IStorage_RemoteOpenStream_Proxy(This: *s_IStorage, pwcsName: *ushort, cbReserved1: ulong, reserved1: *uint8, grfMode: ulong, reserved2: ulong, ppstm: **s_IStream) -> long
export import def #extern IStorage_RemoteOpenStream_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IStorage_RemoteCopyTo_Proxy(This: *s_IStorage, ciidExclude: ulong, rgiidExclude: *s__GUID, snbExclude: **ushort, pstgDest: *s_IStorage) -> long
export import def #extern IStorage_RemoteCopyTo_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IStorage_RemoteEnumElements_Proxy(This: *s_IStorage, reserved1: ulong, cbReserved2: ulong, reserved2: *uint8, reserved3: ulong, ppenum: **s_IEnumSTATSTG) -> long
export import def #extern IStorage_RemoteEnumElements_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec: *
export import var #extern IID_IPersistFile: s__GUID
export import var #extern IID_IPersistStorage: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec: *
export import var #extern IID_ILockBytes: s__GUID
export import def #extern ILockBytes_RemoteReadAt_Proxy(This: *s_ILockBytes, ulOffset: u__ULARGE_INTEGER, pv: *uint8, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ILockBytes_RemoteReadAt_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ILockBytes_RemoteWriteAt_Proxy(This: *s_ILockBytes, ulOffset: u__ULARGE_INTEGER, pv: *uint8, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern ILockBytes_RemoteWriteAt_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IEnumFORMATETC: s__GUID
export import def #extern IEnumFORMATETC_RemoteNext_Proxy(This: *s_IEnumFORMATETC, celt: ulong, rgelt: *s_tagFORMATETC, pceltFetched: *ulong) -> long
export import def #extern IEnumFORMATETC_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export const ADVF_NODATA: int = 1
export const ADVF_PRIMEFIRST: int = 2
export const ADVF_ONLYONCE: int = 4
export const ADVF_DATAONSTOP: int = 64
export const ADVFCACHE_NOHANDLER: int = 8
export const ADVFCACHE_FORCEBUILTIN: int = 16
export const ADVFCACHE_ONSAVE: int = 32
export import var #extern IID_IEnumSTATDATA: s__GUID
export import def #extern IEnumSTATDATA_RemoteNext_Proxy(This: *s_IEnumSTATDATA, celt: ulong, rgelt: *s_tagSTATDATA, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATDATA_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IRootStorage: s__GUID
export const TYMED_HGLOBAL: int = 1
export const TYMED_FILE: int = 2
export const TYMED_ISTREAM: int = 4
export const TYMED_ISTORAGE: int = 8
export const TYMED_GDI: int = 16
export const TYMED_MFPICT: int = 32
export const TYMED_ENHMF: int = 64
export const TYMED_NULL: int = 0
export import var #extern IID_IAdviseSink: s__GUID
export import def #extern IAdviseSink_RemoteOnDataChange_Proxy(This: *s_IAdviseSink, pFormatetc: *s_tagFORMATETC, pStgmed: *s_tagSTGMEDIUM) -> long
export import def #extern IAdviseSink_RemoteOnDataChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnViewChange_Proxy(This: *s_IAdviseSink, dwAspect: ulong, lindex: long) -> long
export import def #extern IAdviseSink_RemoteOnViewChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnRename_Proxy(This: *s_IAdviseSink, pmk: *s_IMoniker) -> long
export import def #extern IAdviseSink_RemoteOnRename_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnSave_Proxy(This: *s_IAdviseSink) -> long
export import def #extern IAdviseSink_RemoteOnSave_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnClose_Proxy(This: *s_IAdviseSink) -> long
export import def #extern IAdviseSink_RemoteOnClose_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_AsyncIAdviseSink: s__GUID
export import def #extern AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(This: *s_AsyncIAdviseSink, pFormatetc: *s_tagFORMATETC, pStgmed: *s_tagSTGMEDIUM) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(This: *s_AsyncIAdviseSink, dwAspect: ulong, lindex: long) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(This: *s_AsyncIAdviseSink, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnRename_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnRename_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnSave_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnSave_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnClose_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnClose_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec: *
export import var #extern IID_IAdviseSink2: s__GUID
export import def #extern IAdviseSink2_RemoteOnLinkSrcChange_Proxy(This: *s_IAdviseSink2, pmk: *s_IMoniker) -> long
export import def #extern IAdviseSink2_RemoteOnLinkSrcChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_AsyncIAdviseSink2: s__GUID
export import def #extern AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(This: *s_AsyncIAdviseSink2, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(This: *s_AsyncIAdviseSink2) -> long
export import def #extern AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec: *
export const DATADIR_GET: int = 1
export const DATADIR_SET: int = 2
export import var #extern IID_IDataObject: s__GUID
export import def #extern IDataObject_RemoteGetData_Proxy(This: *s_IDataObject, pformatetcIn: *s_tagFORMATETC, pRemoteMedium: *s_tagSTGMEDIUM) -> long
export import def #extern IDataObject_RemoteGetData_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IDataObject_RemoteGetDataHere_Proxy(This: *s_IDataObject, pformatetc: *s_tagFORMATETC, pRemoteMedium: *s_tagSTGMEDIUM) -> long
export import def #extern IDataObject_RemoteGetDataHere_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IDataObject_RemoteSetData_Proxy(This: *s_IDataObject, pformatetc: *s_tagFORMATETC, pmedium: *s__FLAG_STGMEDIUM, fRelease: int) -> long
export import def #extern IDataObject_RemoteSetData_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec: *
export import var #extern IID_IDataAdviseHolder: s__GUID
export const CALLTYPE_TOPLEVEL: int = 1
export const CALLTYPE_NESTED: int = 2
export const CALLTYPE_ASYNC: int = 3
export const CALLTYPE_TOPLEVEL_CALLPENDING: int = 4
export const CALLTYPE_ASYNC_CALLPENDING: int = 5
export const SERVERCALL_ISHANDLED: int = 0
export const SERVERCALL_REJECTED: int = 1
export const SERVERCALL_RETRYLATER: int = 2
export const PENDINGTYPE_TOPLEVEL: int = 1
export const PENDINGTYPE_NESTED: int = 2
export const PENDINGMSG_CANCELCALL: int = 0
export const PENDINGMSG_WAITNOPROCESS: int = 1
export const PENDINGMSG_WAITDEFPROCESS: int = 2
export import var #extern IID_IMessageFilter: s__GUID
export import var #extern FMTID_SummaryInformation: s__GUID
export import var #extern FMTID_DocSummaryInformation: s__GUID
export import var #extern FMTID_UserDefinedProperties: s__GUID
export import var #extern FMTID_DiscardableInformation: s__GUID
export import var #extern FMTID_ImageSummaryInformation: s__GUID
export import var #extern FMTID_AudioSummaryInformation: s__GUID
export import var #extern FMTID_VideoSummaryInformation: s__GUID
export import var #extern FMTID_MediaFileSummaryInformation: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec: *
export import var #extern IID_IClassActivator: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec: *
export import var #extern IID_IFillLockBytes: s__GUID
export import def #extern IFillLockBytes_RemoteFillAppend_Proxy(This: *s_IFillLockBytes, pv: *uint8, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_RemoteFillAppend_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IFillLockBytes_RemoteFillAt_Proxy(This: *s_IFillLockBytes, ulOffset: u__ULARGE_INTEGER, pv: *uint8, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_RemoteFillAt_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec: *
export import var #extern IID_IProgressNotify: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec: *
export import var #extern IID_ILayoutStorage: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec: *
export import var #extern IID_IBlockingLock: s__GUID
export import var #extern IID_ITimeAndNoticeControl: s__GUID
export import var #extern IID_IOplockStorage: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec: *
export import var #extern IID_IDirectWriterLock: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec: *
export import var #extern IID_IUrlMon: s__GUID
export import var #extern IID_IForegroundTransfer: s__GUID
export import var #extern IID_IThumbnailExtractor: s__GUID
export import var #extern IID_IDummyHICONIncluder: s__GUID
export const ServerApplication: int = 0
export const LibraryApplication: int = 1
export const IdleShutdown: int = 0
export const ForcedShutdown: int = 1
export import var #extern __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec: *
export import var #extern IID_IProcessLock: s__GUID
export import var #extern IID_ISurrogateService: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec: *
export import var #extern IID_IInitializeSpy: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec: *
export import var #extern IID_IApartmentShutdown: s__GUID
export import var #extern __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec: *
export import def #extern ASYNC_STGMEDIUM_UserSize(_0: *ulong, _1: ulong, _2: *s_tagSTGMEDIUM) -> ulong
export import def #extern ASYNC_STGMEDIUM_UserMarshal(_0: *ulong, _1: *uint8, _2: *s_tagSTGMEDIUM) -> *uint8
export import def #extern ASYNC_STGMEDIUM_UserUnmarshal(_0: *ulong, _1: *uint8, _2: *s_tagSTGMEDIUM) -> *uint8
export import def #extern ASYNC_STGMEDIUM_UserFree(_0: *ulong, _1: *s_tagSTGMEDIUM)
export import def #extern CLIPFORMAT_UserSize(_0: *ulong, _1: ulong, _2: *ushort) -> ulong
export import def #extern CLIPFORMAT_UserMarshal(_0: *ulong, _1: *uint8, _2: *ushort) -> *uint8
export import def #extern CLIPFORMAT_UserUnmarshal(_0: *ulong, _1: *uint8, _2: *ushort) -> *uint8
export import def #extern CLIPFORMAT_UserFree(_0: *ulong, _1: *ushort)
export import def #extern FLAG_STGMEDIUM_UserSize(_0: *ulong, _1: ulong, _2: *s__FLAG_STGMEDIUM) -> ulong
export import def #extern FLAG_STGMEDIUM_UserMarshal(_0: *ulong, _1: *uint8, _2: *s__FLAG_STGMEDIUM) -> *uint8
export import def #extern FLAG_STGMEDIUM_UserUnmarshal(_0: *ulong, _1: *uint8, _2: *s__FLAG_STGMEDIUM) -> *uint8
export import def #extern FLAG_STGMEDIUM_UserFree(_0: *ulong, _1: *s__FLAG_STGMEDIUM)
export import def #extern HBITMAP_UserSize(_0: *ulong, _1: ulong, _2: **s_HBITMAP__) -> ulong
export import def #extern HBITMAP_UserMarshal(_0: *ulong, _1: *uint8, _2: **s_HBITMAP__) -> *uint8
export import def #extern HBITMAP_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **s_HBITMAP__) -> *uint8
export import def #extern HBITMAP_UserFree(_0: *ulong, _1: **s_HBITMAP__)
export import def #extern HDC_UserSize(_0: *ulong, _1: ulong, _2: **s_HDC__) -> ulong
export import def #extern HDC_UserMarshal(_0: *ulong, _1: *uint8, _2: **s_HDC__) -> *uint8
export import def #extern HDC_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **s_HDC__) -> *uint8
export import def #extern HDC_UserFree(_0: *ulong, _1: **s_HDC__)
export import def #extern HICON_UserSize(_0: *ulong, _1: ulong, _2: **s_HICON__) -> ulong
export import def #extern HICON_UserMarshal(_0: *ulong, _1: *uint8, _2: **s_HICON__) -> *uint8
export import def #extern HICON_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **s_HICON__) -> *uint8
export import def #extern HICON_UserFree(_0: *ulong, _1: **s_HICON__)
export import def #extern SNB_UserSize(_0: *ulong, _1: ulong, _2: ***ushort) -> ulong
export import def #extern SNB_UserMarshal(_0: *ulong, _1: *uint8, _2: ***ushort) -> *uint8
export import def #extern SNB_UserUnmarshal(_0: *ulong, _1: *uint8, _2: ***ushort) -> *uint8
export import def #extern SNB_UserFree(_0: *ulong, _1: ***ushort)
export import def #extern STGMEDIUM_UserSize(_0: *ulong, _1: ulong, _2: *s_tagSTGMEDIUM) -> ulong
export import def #extern STGMEDIUM_UserMarshal(_0: *ulong, _1: *uint8, _2: *s_tagSTGMEDIUM) -> *uint8
export import def #extern STGMEDIUM_UserUnmarshal(_0: *ulong, _1: *uint8, _2: *s_tagSTGMEDIUM) -> *uint8
export import def #extern STGMEDIUM_UserFree(_0: *ulong, _1: *s_tagSTGMEDIUM)
export import def #extern ASYNC_STGMEDIUM_UserSize64(_0: *ulong, _1: ulong, _2: *s_tagSTGMEDIUM) -> ulong
export import def #extern ASYNC_STGMEDIUM_UserMarshal64(_0: *ulong, _1: *uint8, _2: *s_tagSTGMEDIUM) -> *uint8
export import def #extern ASYNC_STGMEDIUM_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: *s_tagSTGMEDIUM) -> *uint8
export import def #extern ASYNC_STGMEDIUM_UserFree64(_0: *ulong, _1: *s_tagSTGMEDIUM)
export import def #extern CLIPFORMAT_UserSize64(_0: *ulong, _1: ulong, _2: *ushort) -> ulong
export import def #extern CLIPFORMAT_UserMarshal64(_0: *ulong, _1: *uint8, _2: *ushort) -> *uint8
export import def #extern CLIPFORMAT_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: *ushort) -> *uint8
export import def #extern CLIPFORMAT_UserFree64(_0: *ulong, _1: *ushort)
export import def #extern FLAG_STGMEDIUM_UserSize64(_0: *ulong, _1: ulong, _2: *s__FLAG_STGMEDIUM) -> ulong
export import def #extern FLAG_STGMEDIUM_UserMarshal64(_0: *ulong, _1: *uint8, _2: *s__FLAG_STGMEDIUM) -> *uint8
export import def #extern FLAG_STGMEDIUM_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: *s__FLAG_STGMEDIUM) -> *uint8
export import def #extern FLAG_STGMEDIUM_UserFree64(_0: *ulong, _1: *s__FLAG_STGMEDIUM)
export import def #extern HBITMAP_UserSize64(_0: *ulong, _1: ulong, _2: **s_HBITMAP__) -> ulong
export import def #extern HBITMAP_UserMarshal64(_0: *ulong, _1: *uint8, _2: **s_HBITMAP__) -> *uint8
export import def #extern HBITMAP_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **s_HBITMAP__) -> *uint8
export import def #extern HBITMAP_UserFree64(_0: *ulong, _1: **s_HBITMAP__)
export import def #extern HDC_UserSize64(_0: *ulong, _1: ulong, _2: **s_HDC__) -> ulong
export import def #extern HDC_UserMarshal64(_0: *ulong, _1: *uint8, _2: **s_HDC__) -> *uint8
export import def #extern HDC_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **s_HDC__) -> *uint8
export import def #extern HDC_UserFree64(_0: *ulong, _1: **s_HDC__)
export import def #extern HICON_UserSize64(_0: *ulong, _1: ulong, _2: **s_HICON__) -> ulong
export import def #extern HICON_UserMarshal64(_0: *ulong, _1: *uint8, _2: **s_HICON__) -> *uint8
export import def #extern HICON_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **s_HICON__) -> *uint8
export import def #extern HICON_UserFree64(_0: *ulong, _1: **s_HICON__)
export import def #extern SNB_UserSize64(_0: *ulong, _1: ulong, _2: ***ushort) -> ulong
export import def #extern SNB_UserMarshal64(_0: *ulong, _1: *uint8, _2: ***ushort) -> *uint8
export import def #extern SNB_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: ***ushort) -> *uint8
export import def #extern SNB_UserFree64(_0: *ulong, _1: ***ushort)
export import def #extern STGMEDIUM_UserSize64(_0: *ulong, _1: ulong, _2: *s_tagSTGMEDIUM) -> ulong
export import def #extern STGMEDIUM_UserMarshal64(_0: *ulong, _1: *uint8, _2: *s_tagSTGMEDIUM) -> *uint8
export import def #extern STGMEDIUM_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: *s_tagSTGMEDIUM) -> *uint8
export import def #extern STGMEDIUM_UserFree64(_0: *ulong, _1: *s_tagSTGMEDIUM)
export import def #extern IBindCtx_SetBindOptions_Proxy(This: *s_IBindCtx, pbindopts: *s_tagBIND_OPTS) -> long
export import def #extern IBindCtx_SetBindOptions_Stub(This: *s_IBindCtx, pbindopts: *s_tagBIND_OPTS2) -> long
export import def #extern IBindCtx_GetBindOptions_Proxy(This: *s_IBindCtx, pbindopts: *s_tagBIND_OPTS) -> long
export import def #extern IBindCtx_GetBindOptions_Stub(This: *s_IBindCtx, pbindopts: *s_tagBIND_OPTS2) -> long
export import def #extern IEnumMoniker_Next_Proxy(This: *s_IEnumMoniker, celt: ulong, rgelt: **s_IMoniker, pceltFetched: *ulong) -> long
export import def #extern IEnumMoniker_Next_Stub(This: *s_IEnumMoniker, celt: ulong, rgelt: **s_IMoniker, pceltFetched: *ulong) -> long
export import def #extern IRunnableObject_IsRunning_Proxy(This: *s_IRunnableObject) -> int
export import def #extern IRunnableObject_IsRunning_Stub(This: *s_IRunnableObject) -> long
export import def #extern IMoniker_BindToObject_Proxy(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riidResult: *s__GUID, ppvResult: **) -> long
export import def #extern IMoniker_BindToObject_Stub(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riidResult: *s__GUID, ppvResult: **s_IUnknown) -> long
export import def #extern IMoniker_BindToStorage_Proxy(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riid: *s__GUID, ppvObj: **) -> long
export import def #extern IMoniker_BindToStorage_Stub(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riid: *s__GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IEnumSTATSTG_Next_Proxy(This: *s_IEnumSTATSTG, celt: ulong, rgelt: *s_tagSTATSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATSTG_Next_Stub(This: *s_IEnumSTATSTG, celt: ulong, rgelt: *s_tagSTATSTG, pceltFetched: *ulong) -> long
export import def #extern IStorage_OpenStream_Proxy(This: *s_IStorage, pwcsName: *ushort, reserved1: *, grfMode: ulong, reserved2: ulong, ppstm: **s_IStream) -> long
export import def #extern IStorage_OpenStream_Stub(This: *s_IStorage, pwcsName: *ushort, cbReserved1: ulong, reserved1: *uint8, grfMode: ulong, reserved2: ulong, ppstm: **s_IStream) -> long
export import def #extern IStorage_CopyTo_Proxy(This: *s_IStorage, ciidExclude: ulong, rgiidExclude: *s__GUID, snbExclude: **ushort, pstgDest: *s_IStorage) -> long
export import def #extern IStorage_CopyTo_Stub(This: *s_IStorage, ciidExclude: ulong, rgiidExclude: *s__GUID, snbExclude: **ushort, pstgDest: *s_IStorage) -> long
export import def #extern IStorage_EnumElements_Proxy(This: *s_IStorage, reserved1: ulong, reserved2: *, reserved3: ulong, ppenum: **s_IEnumSTATSTG) -> long
export import def #extern IStorage_EnumElements_Stub(This: *s_IStorage, reserved1: ulong, cbReserved2: ulong, reserved2: *uint8, reserved3: ulong, ppenum: **s_IEnumSTATSTG) -> long
export import def #extern ILockBytes_ReadAt_Proxy(This: *s_ILockBytes, ulOffset: u__ULARGE_INTEGER, pv: *, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ILockBytes_ReadAt_Stub(This: *s_ILockBytes, ulOffset: u__ULARGE_INTEGER, pv: *uint8, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ILockBytes_WriteAt_Proxy(This: *s_ILockBytes, ulOffset: u__ULARGE_INTEGER, pv: *, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern ILockBytes_WriteAt_Stub(This: *s_ILockBytes, ulOffset: u__ULARGE_INTEGER, pv: *uint8, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IEnumFORMATETC_Next_Proxy(This: *s_IEnumFORMATETC, celt: ulong, rgelt: *s_tagFORMATETC, pceltFetched: *ulong) -> long
export import def #extern IEnumFORMATETC_Next_Stub(This: *s_IEnumFORMATETC, celt: ulong, rgelt: *s_tagFORMATETC, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATDATA_Next_Proxy(This: *s_IEnumSTATDATA, celt: ulong, rgelt: *s_tagSTATDATA, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATDATA_Next_Stub(This: *s_IEnumSTATDATA, celt: ulong, rgelt: *s_tagSTATDATA, pceltFetched: *ulong) -> long
export import def #extern IAdviseSink_OnDataChange_Proxy(This: *s_IAdviseSink, pFormatetc: *s_tagFORMATETC, pStgmed: *s_tagSTGMEDIUM)
export import def #extern IAdviseSink_OnDataChange_Stub(This: *s_IAdviseSink, pFormatetc: *s_tagFORMATETC, pStgmed: *s_tagSTGMEDIUM) -> long
export import def #extern IAdviseSink_OnViewChange_Proxy(This: *s_IAdviseSink, dwAspect: ulong, lindex: long)
export import def #extern IAdviseSink_OnViewChange_Stub(This: *s_IAdviseSink, dwAspect: ulong, lindex: long) -> long
export import def #extern IAdviseSink_OnRename_Proxy(This: *s_IAdviseSink, pmk: *s_IMoniker)
export import def #extern IAdviseSink_OnRename_Stub(This: *s_IAdviseSink, pmk: *s_IMoniker) -> long
export import def #extern IAdviseSink_OnSave_Proxy(This: *s_IAdviseSink)
export import def #extern IAdviseSink_OnSave_Stub(This: *s_IAdviseSink) -> long
export import def #extern IAdviseSink_OnClose_Proxy(This: *s_IAdviseSink)
export import def #extern IAdviseSink_OnClose_Stub(This: *s_IAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnDataChange_Proxy(This: *s_AsyncIAdviseSink, pFormatetc: *s_tagFORMATETC, pStgmed: *s_tagSTGMEDIUM)
export import def #extern AsyncIAdviseSink_Begin_OnDataChange_Stub(This: *s_AsyncIAdviseSink, pFormatetc: *s_tagFORMATETC, pStgmed: *s_tagSTGMEDIUM) -> long
export import def #extern AsyncIAdviseSink_Finish_OnDataChange_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnDataChange_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnViewChange_Proxy(This: *s_AsyncIAdviseSink, dwAspect: ulong, lindex: long)
export import def #extern AsyncIAdviseSink_Begin_OnViewChange_Stub(This: *s_AsyncIAdviseSink, dwAspect: ulong, lindex: long) -> long
export import def #extern AsyncIAdviseSink_Finish_OnViewChange_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnViewChange_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnRename_Proxy(This: *s_AsyncIAdviseSink, pmk: *s_IMoniker)
export import def #extern AsyncIAdviseSink_Begin_OnRename_Stub(This: *s_AsyncIAdviseSink, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink_Finish_OnRename_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnRename_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnSave_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Begin_OnSave_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_OnSave_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnSave_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnClose_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Begin_OnClose_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_OnClose_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnClose_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern IAdviseSink2_OnLinkSrcChange_Proxy(This: *s_IAdviseSink2, pmk: *s_IMoniker)
export import def #extern IAdviseSink2_OnLinkSrcChange_Stub(This: *s_IAdviseSink2, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(This: *s_AsyncIAdviseSink2, pmk: *s_IMoniker)
export import def #extern AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(This: *s_AsyncIAdviseSink2, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(This: *s_AsyncIAdviseSink2)
export import def #extern AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(This: *s_AsyncIAdviseSink2) -> long
export import def #extern IDataObject_GetData_Proxy(This: *s_IDataObject, pformatetcIn: *s_tagFORMATETC, pmedium: *s_tagSTGMEDIUM) -> long
export import def #extern IDataObject_GetData_Stub(This: *s_IDataObject, pformatetcIn: *s_tagFORMATETC, pRemoteMedium: *s_tagSTGMEDIUM) -> long
export import def #extern IDataObject_GetDataHere_Proxy(This: *s_IDataObject, pformatetc: *s_tagFORMATETC, pmedium: *s_tagSTGMEDIUM) -> long
export import def #extern IDataObject_GetDataHere_Stub(This: *s_IDataObject, pformatetc: *s_tagFORMATETC, pRemoteMedium: *s_tagSTGMEDIUM) -> long
export import def #extern IDataObject_SetData_Proxy(This: *s_IDataObject, pformatetc: *s_tagFORMATETC, pmedium: *s_tagSTGMEDIUM, fRelease: int) -> long
export import def #extern IDataObject_SetData_Stub(This: *s_IDataObject, pformatetc: *s_tagFORMATETC, pmedium: *s__FLAG_STGMEDIUM, fRelease: int) -> long
export import def #extern IFillLockBytes_FillAppend_Proxy(This: *s_IFillLockBytes, pv: *, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_FillAppend_Stub(This: *s_IFillLockBytes, pv: *uint8, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_FillAt_Proxy(This: *s_IFillLockBytes, ulOffset: u__ULARGE_INTEGER, pv: *, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_FillAt_Stub(This: *s_IFillLockBytes, ulOffset: u__ULARGE_INTEGER, pv: *uint8, cb: ulong, pcbWritten: *ulong) -> long
export import var #extern __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec: *
export const SF_ERROR: int = 10
export const SF_I1: int = 16
export const SF_I2: int = 2
export const SF_I4: int = 3
export const SF_I8: int = 20
export const SF_BSTR: int = 8
export const SF_UNKNOWN: int = 13
export const SF_DISPATCH: int = 9
export const SF_VARIANT: int = 12
export const SF_RECORD: int = 36
export const SF_HAVEIID: int = 32781
export const TKIND_ENUM: int = 0
export const TKIND_RECORD: int = 1
export const TKIND_MODULE: int = 2
export const TKIND_INTERFACE: int = 3
export const TKIND_DISPATCH: int = 4
export const TKIND_COCLASS: int = 5
export const TKIND_ALIAS: int = 6
export const TKIND_UNION: int = 7
export const TKIND_MAX: int = 8
export const CC_FASTCALL: int = 0
export const CC_CDECL: int = 1
export const CC_MSCPASCAL: int = 2
export const CC_PASCAL: int = 2
export const CC_MACPASCAL: int = 3
export const CC_STDCALL: int = 4
export const CC_FPFASTCALL: int = 5
export const CC_SYSCALL: int = 6
export const CC_MPWCDECL: int = 7
export const CC_MPWPASCAL: int = 8
export const CC_MAX: int = 9
export const FUNC_VIRTUAL: int = 0
export const FUNC_PUREVIRTUAL: int = 1
export const FUNC_NONVIRTUAL: int = 2
export const FUNC_STATIC: int = 3
export const FUNC_DISPATCH: int = 4
export const INVOKE_FUNC: int = 1
export const INVOKE_PROPERTYGET: int = 2
export const INVOKE_PROPERTYPUT: int = 4
export const INVOKE_PROPERTYPUTREF: int = 8
export const VAR_PERINSTANCE: int = 0
export const VAR_STATIC: int = 1
export const VAR_CONST: int = 2
export const VAR_DISPATCH: int = 3
export const TYPEFLAG_FAPPOBJECT: int = 1
export const TYPEFLAG_FCANCREATE: int = 2
export const TYPEFLAG_FLICENSED: int = 4
export const TYPEFLAG_FPREDECLID: int = 8
export const TYPEFLAG_FHIDDEN: int = 16
export const TYPEFLAG_FCONTROL: int = 32
export const TYPEFLAG_FDUAL: int = 64
export const TYPEFLAG_FNONEXTENSIBLE: int = 128
export const TYPEFLAG_FOLEAUTOMATION: int = 256
export const TYPEFLAG_FRESTRICTED: int = 512
export const TYPEFLAG_FAGGREGATABLE: int = 1024
export const TYPEFLAG_FREPLACEABLE: int = 2048
export const TYPEFLAG_FDISPATCHABLE: int = 4096
export const TYPEFLAG_FREVERSEBIND: int = 8192
export const TYPEFLAG_FPROXY: int = 16384
export const FUNCFLAG_FRESTRICTED: int = 1
export const FUNCFLAG_FSOURCE: int = 2
export const FUNCFLAG_FBINDABLE: int = 4
export const FUNCFLAG_FREQUESTEDIT: int = 8
export const FUNCFLAG_FDISPLAYBIND: int = 16
export const FUNCFLAG_FDEFAULTBIND: int = 32
export const FUNCFLAG_FHIDDEN: int = 64
export const FUNCFLAG_FUSESGETLASTERROR: int = 128
export const FUNCFLAG_FDEFAULTCOLLELEM: int = 256
export const FUNCFLAG_FUIDEFAULT: int = 512
export const FUNCFLAG_FNONBROWSABLE: int = 1024
export const FUNCFLAG_FREPLACEABLE: int = 2048
export const FUNCFLAG_FIMMEDIATEBIND: int = 4096
export const VARFLAG_FREADONLY: int = 1
export const VARFLAG_FSOURCE: int = 2
export const VARFLAG_FBINDABLE: int = 4
export const VARFLAG_FREQUESTEDIT: int = 8
export const VARFLAG_FDISPLAYBIND: int = 16
export const VARFLAG_FDEFAULTBIND: int = 32
export const VARFLAG_FHIDDEN: int = 64
export const VARFLAG_FRESTRICTED: int = 128
export const VARFLAG_FDEFAULTCOLLELEM: int = 256
export const VARFLAG_FUIDEFAULT: int = 512
export const VARFLAG_FNONBROWSABLE: int = 1024
export const VARFLAG_FREPLACEABLE: int = 2048
export const VARFLAG_FIMMEDIATEBIND: int = 4096
export import var #extern IOleAutomationTypes_v1_0_c_ifspec: *
export import var #extern IOleAutomationTypes_v1_0_s_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec: *
export import var #extern IID_ICreateTypeInfo: s__GUID
export import var #extern IID_ICreateTypeInfo2: s__GUID
export import var #extern IID_ICreateTypeLib: s__GUID
export import var #extern IID_ICreateTypeLib2: s__GUID
export import var #extern __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec: *
export import var #extern IID_IDispatch: s__GUID
export import def #extern IDispatch_RemoteInvoke_Proxy(This: *s_IDispatch, dispIdMember: long, riid: *s__GUID, lcid: ulong, dwFlags: ulong, pDispParams: *s_tagDISPPARAMS, pVarResult: *s_tagVARIANT, pExcepInfo: *s_tagEXCEPINFO, pArgErr: *uint, cVarRef: uint, rgVarRefIdx: *uint, rgVarRef: *s_tagVARIANT) -> long
export import def #extern IDispatch_RemoteInvoke_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IEnumVARIANT: s__GUID
export import def #extern IEnumVARIANT_RemoteNext_Proxy(This: *s_IEnumVARIANT, celt: ulong, rgVar: *s_tagVARIANT, pCeltFetched: *ulong) -> long
export import def #extern IEnumVARIANT_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export const DESCKIND_NONE: int = 0
export const DESCKIND_FUNCDESC: int = 1
export const DESCKIND_VARDESC: int = 2
export const DESCKIND_TYPECOMP: int = 3
export const DESCKIND_IMPLICITAPPOBJ: int = 4
export const DESCKIND_MAX: int = 5
export import var #extern IID_ITypeComp: s__GUID
export import def #extern ITypeComp_RemoteBind_Proxy(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, wFlags: ushort, ppTInfo: **s_ITypeInfo, pDescKind: *e_tagDESCKIND, ppFuncDesc: **s_tagFUNCDESC, ppVarDesc: **s_tagVARDESC, ppTypeComp: **s_ITypeComp, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeComp_RemoteBind_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeComp_RemoteBindType_Proxy(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo) -> long
export import def #extern ITypeComp_RemoteBindType_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec: *
export import var #extern IID_ITypeInfo: s__GUID
export import def #extern ITypeInfo_RemoteGetTypeAttr_Proxy(This: *s_ITypeInfo, ppTypeAttr: **s_tagTYPEATTR, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_RemoteGetTypeAttr_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetFuncDesc_Proxy(This: *s_ITypeInfo, index: uint, ppFuncDesc: **s_tagFUNCDESC, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_RemoteGetFuncDesc_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetVarDesc_Proxy(This: *s_ITypeInfo, index: uint, ppVarDesc: **s_tagVARDESC, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_RemoteGetVarDesc_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetNames_Proxy(This: *s_ITypeInfo, memid: long, rgBstrNames: **ushort, cMaxNames: uint, pcNames: *uint) -> long
export import def #extern ITypeInfo_RemoteGetNames_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalGetIDsOfNames_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalGetIDsOfNames_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalInvoke_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalInvoke_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetDocumentation_Proxy(This: *s_ITypeInfo, memid: long, refPtrFlags: ulong, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeInfo_RemoteGetDocumentation_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetDllEntry_Proxy(This: *s_ITypeInfo, memid: long, invKind: e_tagINVOKEKIND, refPtrFlags: ulong, pBstrDllName: **ushort, pBstrName: **ushort, pwOrdinal: *ushort) -> long
export import def #extern ITypeInfo_RemoteGetDllEntry_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalAddressOfMember_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalAddressOfMember_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteCreateInstance_Proxy(This: *s_ITypeInfo, riid: *s__GUID, ppvObj: **s_IUnknown) -> long
export import def #extern ITypeInfo_RemoteCreateInstance_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetContainingTypeLib_Proxy(This: *s_ITypeInfo, ppTLib: **s_ITypeLib, pIndex: *uint) -> long
export import def #extern ITypeInfo_RemoteGetContainingTypeLib_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalReleaseTypeAttr_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalReleaseTypeAttr_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalReleaseFuncDesc_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalReleaseFuncDesc_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalReleaseVarDesc_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalReleaseVarDesc_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_ITypeInfo2: s__GUID
export import def #extern ITypeInfo2_RemoteGetDocumentation2_Proxy(This: *s_ITypeInfo2, memid: long, lcid: ulong, refPtrFlags: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeInfo2_RemoteGetDocumentation2_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec: *
export const SYS_WIN16: int = 0
export const SYS_WIN32: int = 1
export const SYS_MAC: int = 2
export const SYS_WIN64: int = 3
export const LIBFLAG_FRESTRICTED: int = 1
export const LIBFLAG_FCONTROL: int = 2
export const LIBFLAG_FHIDDEN: int = 4
export const LIBFLAG_FHASDISKIMAGE: int = 8
export import var #extern IID_ITypeLib: s__GUID
export import def #extern ITypeLib_RemoteGetTypeInfoCount_Proxy(This: *s_ITypeLib, pcTInfo: *uint) -> long
export import def #extern ITypeLib_RemoteGetTypeInfoCount_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteGetLibAttr_Proxy(This: *s_ITypeLib, ppTLibAttr: **s_tagTLIBATTR, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeLib_RemoteGetLibAttr_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteGetDocumentation_Proxy(This: *s_ITypeLib, index: int, refPtrFlags: ulong, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeLib_RemoteGetDocumentation_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteIsName_Proxy(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, pfName: *int, pBstrLibName: **ushort) -> long
export import def #extern ITypeLib_RemoteIsName_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteFindName_Proxy(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo, rgMemId: *long, pcFound: *ushort, pBstrLibName: **ushort) -> long
export import def #extern ITypeLib_RemoteFindName_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_LocalReleaseTLibAttr_Proxy(This: *s_ITypeLib) -> long
export import def #extern ITypeLib_LocalReleaseTLibAttr_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec: *
export import var #extern IID_ITypeLib2: s__GUID
export import def #extern ITypeLib2_RemoteGetLibStatistics_Proxy(This: *s_ITypeLib2, pcUniqueNames: *ulong, pcchUniqueNames: *ulong) -> long
export import def #extern ITypeLib2_RemoteGetLibStatistics_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib2_RemoteGetDocumentation2_Proxy(This: *s_ITypeLib2, index: int, lcid: ulong, refPtrFlags: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeLib2_RemoteGetDocumentation2_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export const CHANGEKIND_ADDMEMBER: int = 0
export const CHANGEKIND_DELETEMEMBER: int = 1
export const CHANGEKIND_SETNAMES: int = 2
export const CHANGEKIND_SETDOCUMENTATION: int = 3
export const CHANGEKIND_GENERAL: int = 4
export const CHANGEKIND_INVALIDATE: int = 5
export const CHANGEKIND_CHANGEFAILED: int = 6
export const CHANGEKIND_MAX: int = 7
export import var #extern IID_ITypeChangeEvents: s__GUID
export import var #extern IID_IErrorInfo: s__GUID
export import var #extern IID_ICreateErrorInfo: s__GUID
export import var #extern IID_ISupportErrorInfo: s__GUID
export import var #extern IID_ITypeFactory: s__GUID
export import var #extern IID_ITypeMarshal: s__GUID
export import var #extern IID_IRecordInfo: s__GUID
export import var #extern IID_IErrorLog: s__GUID
export import var #extern IID_IPropertyBag: s__GUID
export import def #extern IPropertyBag_RemoteRead_Proxy(This: *s_IPropertyBag, pszPropName: *ushort, pVar: *s_tagVARIANT, pErrorLog: *s_IErrorLog, varType: ulong, pUnkObj: *s_IUnknown) -> long
export import def #extern IPropertyBag_RemoteRead_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_ITypeLibRegistrationReader: s__GUID
export import var #extern IID_ITypeLibRegistration: s__GUID
export import var #extern CLSID_TypeLibRegistrationReader: s__GUID
export import var #extern __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec: *
export import def #extern BSTR_UserSize(_0: *ulong, _1: ulong, _2: **ushort) -> ulong
export import def #extern BSTR_UserMarshal(_0: *ulong, _1: *uint8, _2: **ushort) -> *uint8
export import def #extern BSTR_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **ushort) -> *uint8
export import def #extern BSTR_UserFree(_0: *ulong, _1: **ushort)
export import def #extern CLEANLOCALSTORAGE_UserSize(_0: *ulong, _1: ulong, _2: *s_tagCLEANLOCALSTORAGE) -> ulong
export import def #extern CLEANLOCALSTORAGE_UserMarshal(_0: *ulong, _1: *uint8, _2: *s_tagCLEANLOCALSTORAGE) -> *uint8
export import def #extern CLEANLOCALSTORAGE_UserUnmarshal(_0: *ulong, _1: *uint8, _2: *s_tagCLEANLOCALSTORAGE) -> *uint8
export import def #extern CLEANLOCALSTORAGE_UserFree(_0: *ulong, _1: *s_tagCLEANLOCALSTORAGE)
export import def #extern VARIANT_UserSize(_0: *ulong, _1: ulong, _2: *s_tagVARIANT) -> ulong
export import def #extern VARIANT_UserMarshal(_0: *ulong, _1: *uint8, _2: *s_tagVARIANT) -> *uint8
export import def #extern VARIANT_UserUnmarshal(_0: *ulong, _1: *uint8, _2: *s_tagVARIANT) -> *uint8
export import def #extern VARIANT_UserFree(_0: *ulong, _1: *s_tagVARIANT)
export import def #extern BSTR_UserSize64(_0: *ulong, _1: ulong, _2: **ushort) -> ulong
export import def #extern BSTR_UserMarshal64(_0: *ulong, _1: *uint8, _2: **ushort) -> *uint8
export import def #extern BSTR_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **ushort) -> *uint8
export import def #extern BSTR_UserFree64(_0: *ulong, _1: **ushort)
export import def #extern CLEANLOCALSTORAGE_UserSize64(_0: *ulong, _1: ulong, _2: *s_tagCLEANLOCALSTORAGE) -> ulong
export import def #extern CLEANLOCALSTORAGE_UserMarshal64(_0: *ulong, _1: *uint8, _2: *s_tagCLEANLOCALSTORAGE) -> *uint8
export import def #extern CLEANLOCALSTORAGE_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: *s_tagCLEANLOCALSTORAGE) -> *uint8
export import def #extern CLEANLOCALSTORAGE_UserFree64(_0: *ulong, _1: *s_tagCLEANLOCALSTORAGE)
export import def #extern VARIANT_UserSize64(_0: *ulong, _1: ulong, _2: *s_tagVARIANT) -> ulong
export import def #extern VARIANT_UserMarshal64(_0: *ulong, _1: *uint8, _2: *s_tagVARIANT) -> *uint8
export import def #extern VARIANT_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: *s_tagVARIANT) -> *uint8
export import def #extern VARIANT_UserFree64(_0: *ulong, _1: *s_tagVARIANT)
export import def #extern IDispatch_Invoke_Proxy(This: *s_IDispatch, dispIdMember: long, riid: *s__GUID, lcid: ulong, wFlags: ushort, pDispParams: *s_tagDISPPARAMS, pVarResult: *s_tagVARIANT, pExcepInfo: *s_tagEXCEPINFO, puArgErr: *uint) -> long
export import def #extern IDispatch_Invoke_Stub(This: *s_IDispatch, dispIdMember: long, riid: *s__GUID, lcid: ulong, dwFlags: ulong, pDispParams: *s_tagDISPPARAMS, pVarResult: *s_tagVARIANT, pExcepInfo: *s_tagEXCEPINFO, pArgErr: *uint, cVarRef: uint, rgVarRefIdx: *uint, rgVarRef: *s_tagVARIANT) -> long
export import def #extern IEnumVARIANT_Next_Proxy(This: *s_IEnumVARIANT, celt: ulong, rgVar: *s_tagVARIANT, pCeltFetched: *ulong) -> long
export import def #extern IEnumVARIANT_Next_Stub(This: *s_IEnumVARIANT, celt: ulong, rgVar: *s_tagVARIANT, pCeltFetched: *ulong) -> long
export import def #extern ITypeComp_Bind_Proxy(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, wFlags: ushort, ppTInfo: **s_ITypeInfo, pDescKind: *e_tagDESCKIND, pBindPtr: *u_tagBINDPTR) -> long
export import def #extern ITypeComp_Bind_Stub(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, wFlags: ushort, ppTInfo: **s_ITypeInfo, pDescKind: *e_tagDESCKIND, ppFuncDesc: **s_tagFUNCDESC, ppVarDesc: **s_tagVARDESC, ppTypeComp: **s_ITypeComp, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeComp_BindType_Proxy(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo, ppTComp: **s_ITypeComp) -> long
export import def #extern ITypeComp_BindType_Stub(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo) -> long
export import def #extern ITypeInfo_GetTypeAttr_Proxy(This: *s_ITypeInfo, ppTypeAttr: **s_tagTYPEATTR) -> long
export import def #extern ITypeInfo_GetTypeAttr_Stub(This: *s_ITypeInfo, ppTypeAttr: **s_tagTYPEATTR, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_GetFuncDesc_Proxy(This: *s_ITypeInfo, index: uint, ppFuncDesc: **s_tagFUNCDESC) -> long
export import def #extern ITypeInfo_GetFuncDesc_Stub(This: *s_ITypeInfo, index: uint, ppFuncDesc: **s_tagFUNCDESC, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_GetVarDesc_Proxy(This: *s_ITypeInfo, index: uint, ppVarDesc: **s_tagVARDESC) -> long
export import def #extern ITypeInfo_GetVarDesc_Stub(This: *s_ITypeInfo, index: uint, ppVarDesc: **s_tagVARDESC, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_GetNames_Proxy(This: *s_ITypeInfo, memid: long, rgBstrNames: **ushort, cMaxNames: uint, pcNames: *uint) -> long
export import def #extern ITypeInfo_GetNames_Stub(This: *s_ITypeInfo, memid: long, rgBstrNames: **ushort, cMaxNames: uint, pcNames: *uint) -> long
export import def #extern ITypeInfo_GetIDsOfNames_Proxy(This: *s_ITypeInfo, rgszNames: **ushort, cNames: uint, pMemId: *long) -> long
export import def #extern ITypeInfo_GetIDsOfNames_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_Invoke_Proxy(This: *s_ITypeInfo, pvInstance: *, memid: long, wFlags: ushort, pDispParams: *s_tagDISPPARAMS, pVarResult: *s_tagVARIANT, pExcepInfo: *s_tagEXCEPINFO, puArgErr: *uint) -> long
export import def #extern ITypeInfo_Invoke_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_GetDocumentation_Proxy(This: *s_ITypeInfo, memid: long, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeInfo_GetDocumentation_Stub(This: *s_ITypeInfo, memid: long, refPtrFlags: ulong, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeInfo_GetDllEntry_Proxy(This: *s_ITypeInfo, memid: long, invKind: e_tagINVOKEKIND, pBstrDllName: **ushort, pBstrName: **ushort, pwOrdinal: *ushort) -> long
export import def #extern ITypeInfo_GetDllEntry_Stub(This: *s_ITypeInfo, memid: long, invKind: e_tagINVOKEKIND, refPtrFlags: ulong, pBstrDllName: **ushort, pBstrName: **ushort, pwOrdinal: *ushort) -> long
export import def #extern ITypeInfo_AddressOfMember_Proxy(This: *s_ITypeInfo, memid: long, invKind: e_tagINVOKEKIND, ppv: **) -> long
export import def #extern ITypeInfo_AddressOfMember_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_CreateInstance_Proxy(This: *s_ITypeInfo, pUnkOuter: *s_IUnknown, riid: *s__GUID, ppvObj: **) -> long
export import def #extern ITypeInfo_CreateInstance_Stub(This: *s_ITypeInfo, riid: *s__GUID, ppvObj: **s_IUnknown) -> long
export import def #extern ITypeInfo_GetContainingTypeLib_Proxy(This: *s_ITypeInfo, ppTLib: **s_ITypeLib, pIndex: *uint) -> long
export import def #extern ITypeInfo_GetContainingTypeLib_Stub(This: *s_ITypeInfo, ppTLib: **s_ITypeLib, pIndex: *uint) -> long
export import def #extern ITypeInfo_ReleaseTypeAttr_Proxy(This: *s_ITypeInfo, pTypeAttr: *s_tagTYPEATTR)
export import def #extern ITypeInfo_ReleaseTypeAttr_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_ReleaseFuncDesc_Proxy(This: *s_ITypeInfo, pFuncDesc: *s_tagFUNCDESC)
export import def #extern ITypeInfo_ReleaseFuncDesc_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_ReleaseVarDesc_Proxy(This: *s_ITypeInfo, pVarDesc: *s_tagVARDESC)
export import def #extern ITypeInfo_ReleaseVarDesc_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo2_GetDocumentation2_Proxy(This: *s_ITypeInfo2, memid: long, lcid: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeInfo2_GetDocumentation2_Stub(This: *s_ITypeInfo2, memid: long, lcid: ulong, refPtrFlags: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeLib_GetTypeInfoCount_Proxy(This: *s_ITypeLib) -> uint
export import def #extern ITypeLib_GetTypeInfoCount_Stub(This: *s_ITypeLib, pcTInfo: *uint) -> long
export import def #extern ITypeLib_GetLibAttr_Proxy(This: *s_ITypeLib, ppTLibAttr: **s_tagTLIBATTR) -> long
export import def #extern ITypeLib_GetLibAttr_Stub(This: *s_ITypeLib, ppTLibAttr: **s_tagTLIBATTR, pDummy: *s_tagCLEANLOCALSTORAGE) -> long
export import def #extern ITypeLib_GetDocumentation_Proxy(This: *s_ITypeLib, index: int, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeLib_GetDocumentation_Stub(This: *s_ITypeLib, index: int, refPtrFlags: ulong, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeLib_IsName_Proxy(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, pfName: *int) -> long
export import def #extern ITypeLib_IsName_Stub(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, pfName: *int, pBstrLibName: **ushort) -> long
export import def #extern ITypeLib_FindName_Proxy(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo, rgMemId: *long, pcFound: *ushort) -> long
export import def #extern ITypeLib_FindName_Stub(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo, rgMemId: *long, pcFound: *ushort, pBstrLibName: **ushort) -> long
export import def #extern ITypeLib_ReleaseTLibAttr_Proxy(This: *s_ITypeLib, pTLibAttr: *s_tagTLIBATTR)
export import def #extern ITypeLib_ReleaseTLibAttr_Stub(This: *s_ITypeLib) -> long
export import def #extern ITypeLib2_GetLibStatistics_Proxy(This: *s_ITypeLib2, pcUniqueNames: *ulong, pcchUniqueNames: *ulong) -> long
export import def #extern ITypeLib2_GetLibStatistics_Stub(This: *s_ITypeLib2, pcUniqueNames: *ulong, pcchUniqueNames: *ulong) -> long
export import def #extern ITypeLib2_GetDocumentation2_Proxy(This: *s_ITypeLib2, index: int, lcid: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeLib2_GetDocumentation2_Stub(This: *s_ITypeLib2, index: int, lcid: ulong, refPtrFlags: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern IPropertyBag_Read_Proxy(This: *s_IPropertyBag, pszPropName: *ushort, pVar: *s_tagVARIANT, pErrorLog: *s_IErrorLog) -> long
export import def #extern IPropertyBag_Read_Stub(This: *s_IPropertyBag, pszPropName: *ushort, pVar: *s_tagVARIANT, pErrorLog: *s_IErrorLog, varType: ulong, pUnkObj: *s_IUnknown) -> long
export import var #extern __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IPropertyStorage: s__GUID
export import var #extern IID_IPropertySetStorage: s__GUID
export import var #extern IID_IEnumSTATPROPSTG: s__GUID
export import def #extern IEnumSTATPROPSTG_RemoteNext_Proxy(This: *s_IEnumSTATPROPSTG, celt: ulong, rgelt: *s_tagSTATPROPSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSTG_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IEnumSTATPROPSETSTG: s__GUID
export import def #extern IEnumSTATPROPSETSTG_RemoteNext_Proxy(This: *s_IEnumSTATPROPSETSTG, celt: ulong, rgelt: *s_tagSTATPROPSETSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSETSTG_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec: *
export import def #extern LPSAFEARRAY_UserSize(_0: *ulong, _1: ulong, _2: **s_tagSAFEARRAY) -> ulong
export import def #extern LPSAFEARRAY_UserMarshal(_0: *ulong, _1: *uint8, _2: **s_tagSAFEARRAY) -> *uint8
export import def #extern LPSAFEARRAY_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **s_tagSAFEARRAY) -> *uint8
export import def #extern LPSAFEARRAY_UserFree(_0: *ulong, _1: **s_tagSAFEARRAY)
export import def #extern LPSAFEARRAY_UserSize64(_0: *ulong, _1: ulong, _2: **s_tagSAFEARRAY) -> ulong
export import def #extern LPSAFEARRAY_UserMarshal64(_0: *ulong, _1: *uint8, _2: **s_tagSAFEARRAY) -> *uint8
export import def #extern LPSAFEARRAY_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **s_tagSAFEARRAY) -> *uint8
export import def #extern LPSAFEARRAY_UserFree64(_0: *ulong, _1: **s_tagSAFEARRAY)
export import def #extern IEnumSTATPROPSTG_Next_Proxy(This: *s_IEnumSTATPROPSTG, celt: ulong, rgelt: *s_tagSTATPROPSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSTG_Next_Stub(This: *s_IEnumSTATPROPSTG, celt: ulong, rgelt: *s_tagSTATPROPSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSETSTG_Next_Proxy(This: *s_IEnumSTATPROPSETSTG, celt: ulong, rgelt: *s_tagSTATPROPSETSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSETSTG_Next_Stub(This: *s_IEnumSTATPROPSETSTG, celt: ulong, rgelt: *s_tagSTATPROPSETSTG, pceltFetched: *ulong) -> long
export import def #extern #dllimport StgCreateDocfile(pwcsName: *ushort, grfMode: ulong, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgCreateDocfileOnILockBytes(plkbyt: *s_ILockBytes, grfMode: ulong, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgOpenStorage(pwcsName: *ushort, pstgPriority: *s_IStorage, grfMode: ulong, snbExclude: **ushort, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgOpenStorageOnILockBytes(plkbyt: *s_ILockBytes, pstgPriority: *s_IStorage, grfMode: ulong, snbExclude: **ushort, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgIsStorageFile(pwcsName: *ushort) -> long
export import def #extern #dllimport StgIsStorageILockBytes(plkbyt: *s_ILockBytes) -> long
export import def #extern #dllimport StgSetTimes(lpszName: *ushort, pctime: *s__FILETIME, patime: *s__FILETIME, pmtime: *s__FILETIME) -> long
export import def #extern #dllimport StgCreateStorageEx(pwcsName: *ushort, grfMode: ulong, stgfmt: ulong, grfAttrs: ulong, pStgOptions: *s_tagSTGOPTIONS, pSecurityDescriptor: *, riid: *s__GUID, ppObjectOpen: **) -> long
export import def #extern #dllimport StgOpenStorageEx(pwcsName: *ushort, grfMode: ulong, stgfmt: ulong, grfAttrs: ulong, pStgOptions: *s_tagSTGOPTIONS, pSecurityDescriptor: *, riid: *s__GUID, ppObjectOpen: **) -> long
export import def #extern #dllimport StgCreatePropStg(pUnk: *s_IUnknown, fmtid: *s__GUID, pclsid: *s__GUID, grfFlags: ulong, dwReserved: ulong, ppPropStg: **s_IPropertyStorage) -> long
export import def #extern #dllimport StgOpenPropStg(pUnk: *s_IUnknown, fmtid: *s__GUID, grfFlags: ulong, dwReserved: ulong, ppPropStg: **s_IPropertyStorage) -> long
export import def #extern #dllimport StgCreatePropSetStg(pStorage: *s_IStorage, dwReserved: ulong, ppPropSetStg: **s_IPropertySetStorage) -> long
export import def #extern #dllimport FmtIdToPropStgName(pfmtid: *s__GUID, oszName: *ushort) -> long
export import def #extern #dllimport PropStgNameToFmtId(oszName: *ushort, pfmtid: *s__GUID) -> long
export import def #extern #dllimport ReadClassStg(pStg: *s_IStorage, pclsid: *s__GUID) -> long
export import def #extern #dllimport WriteClassStg(pStg: *s_IStorage, rclsid: *s__GUID) -> long
export import def #extern #dllimport ReadClassStm(pStm: *s_IStream, pclsid: *s__GUID) -> long
export import def #extern #dllimport WriteClassStm(pStm: *s_IStream, rclsid: *s__GUID) -> long
export import def #extern #dllimport GetHGlobalFromILockBytes(plkbyt: *s_ILockBytes, phglobal: **) -> long
export import def #extern #dllimport CreateILockBytesOnHGlobal(hGlobal: *, fDeleteOnRelease: int, pplkbyt: **s_ILockBytes) -> long
export import def #extern #dllimport GetConvertStg(pStg: *s_IStorage) -> long
export const COINIT_APARTMENTTHREADED: int = 2
export const COINIT_MULTITHREADED: int = 0
export const COINIT_DISABLE_OLE1DDE: int = 4
export const COINIT_SPEED_OVER_MEMORY: int = 8
export import def #extern #dllimport CoBuildVersion() -> ulong
export import def #extern #dllimport CoInitialize(pvReserved: *) -> long
export import def #extern #dllimport CoRegisterMallocSpy(pMallocSpy: *s_IMallocSpy) -> long
export import def #extern #dllimport CoRevokeMallocSpy() -> long
export import def #extern #dllimport CoCreateStandardMalloc(memctx: ulong, ppMalloc: **s_IMalloc) -> long
export import def #extern #dllimport CoRegisterInitializeSpy(pSpy: *s_IInitializeSpy, puliCookie: *u__ULARGE_INTEGER) -> long
export import def #extern #dllimport CoRevokeInitializeSpy(uliCookie: u__ULARGE_INTEGER) -> long
export const SD_LAUNCHPERMISSIONS: int = 0
export const SD_ACCESSPERMISSIONS: int = 1
export const SD_LAUNCHRESTRICTIONS: int = 2
export const SD_ACCESSRESTRICTIONS: int = 3
export import def #extern #dllimport CoGetSystemSecurityPermissions(comSDType: e_tagCOMSD, ppSD: **) -> long
export import def #extern #dllimport CoLoadLibrary(lpszLibName: *ushort, bAutoFree: int) -> *s_HINSTANCE__
export import def #extern #dllimport CoFreeLibrary(hInst: *s_HINSTANCE__)
export import def #extern #dllimport CoFreeAllLibraries()
export import def #extern #dllimport CoGetInstanceFromFile(pServerInfo: *s__COSERVERINFO, pClsid: *s__GUID, punkOuter: *s_IUnknown, dwClsCtx: ulong, grfMode: ulong, pwszName: *ushort, dwCount: ulong, pResults: *s_tagMULTI_QI) -> long
export import def #extern #dllimport CoGetInstanceFromIStorage(pServerInfo: *s__COSERVERINFO, pClsid: *s__GUID, punkOuter: *s_IUnknown, dwClsCtx: ulong, pstg: *s_IStorage, dwCount: ulong, pResults: *s_tagMULTI_QI) -> long
export import def #extern #dllimport CoAllowSetForegroundWindow(pUnk: *s_IUnknown, lpvReserved: *) -> long
export import def #extern #dllimport DcomChannelSetHResult(pvReserved: *, pulReserved: *ulong, appsHR: long) -> long
export import def #extern #dllimport CoIsOle1Class(rclsid: *s__GUID) -> int
export import def #extern #dllimport CoFileTimeToDosDateTime(lpFileTime: *s__FILETIME, lpDosDate: *ushort, lpDosTime: *ushort) -> int
export import def #extern #dllimport CoDosDateTimeToFileTime(nDosDate: ushort, nDosTime: ushort, lpFileTime: *s__FILETIME) -> int
export import def #extern #dllimport CoRegisterMessageFilter(lpMessageFilter: *s_IMessageFilter, lplpMessageFilter: **s_IMessageFilter) -> long
export import def #extern #dllimport CoRegisterChannelHook(ExtensionUuid: *s__GUID, pChannelHook: *s_IChannelHook) -> long
export import def #extern #dllimport CoTreatAsClass(clsidOld: *s__GUID, clsidNew: *s__GUID) -> long
export import def #extern #dllimport CreateDataAdviseHolder(ppDAHolder: **s_IDataAdviseHolder) -> long
export import def #extern #dllimport CreateDataCache(pUnkOuter: *s_IUnknown, rclsid: *s__GUID, iid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport StgOpenAsyncDocfileOnIFillLockBytes(pflb: *s_IFillLockBytes, grfMode: ulong, asyncFlags: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgGetIFillLockBytesOnILockBytes(pilb: *s_ILockBytes, ppflb: **s_IFillLockBytes) -> long
export import def #extern #dllimport StgGetIFillLockBytesOnFile(pwcsName: *ushort, ppflb: **s_IFillLockBytes) -> long
export import def #extern #dllimport StgOpenLayoutDocfile(pwcsDfName: *ushort, grfMode: ulong, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport CoInstall(pbc: *s_IBindCtx, dwFlags: ulong, pClassSpec: *s___MIDL___MIDL_itf_wtypes_0000_0001_0001, pQuery: *s_tagQUERYCONTEXT, pszCodeBase: *ushort) -> long
export import def #extern #dllimport BindMoniker(pmk: *s_IMoniker, grfOpt: ulong, iidResult: *s__GUID, ppvResult: **) -> long
export import def #extern #dllimport CoGetObject(pszName: *ushort, pBindOptions: *s_tagBIND_OPTS, riid: *s__GUID, ppv: **) -> long
export import def #extern #dllimport MkParseDisplayName(pbc: *s_IBindCtx, szUserName: *ushort, pchEaten: *ulong, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport MonikerRelativePathTo(pmkSrc: *s_IMoniker, pmkDest: *s_IMoniker, ppmkRelPath: **s_IMoniker, dwReserved: int) -> long
export import def #extern #dllimport MonikerCommonPrefixWith(pmkThis: *s_IMoniker, pmkOther: *s_IMoniker, ppmkCommon: **s_IMoniker) -> long
export import def #extern #dllimport CreateBindCtx(reserved: ulong, ppbc: **s_IBindCtx) -> long
export import def #extern #dllimport CreateGenericComposite(pmkFirst: *s_IMoniker, pmkRest: *s_IMoniker, ppmkComposite: **s_IMoniker) -> long
export import def #extern #dllimport GetClassFile(szFilename: *ushort, pclsid: *s__GUID) -> long
export import def #extern #dllimport CreateClassMoniker(rclsid: *s__GUID, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreateFileMoniker(lpszPathName: *ushort, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreateItemMoniker(lpszDelim: *ushort, lpszItem: *ushort, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreateAntiMoniker(ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreatePointerMoniker(punk: *s_IUnknown, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreateObjrefMoniker(punk: *s_IUnknown, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport GetRunningObjectTable(reserved: ulong, pprot: **s_IRunningObjectTable) -> long
export import var #extern __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IOleAdviseHolder: s__GUID
export import var #extern __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec: *
export import var #extern IID_IOleCache: s__GUID
export const DISCARDCACHE_SAVEIFDIRTY: int = 0
export const DISCARDCACHE_NOSAVE: int = 1
export import var #extern IID_IOleCache2: s__GUID
export import def #extern IOleCache2_RemoteUpdateCache_Proxy(This: *s_IOleCache2, pDataObject: *s_IDataObject, grfUpdf: ulong, pReserved: int64) -> long
export import def #extern IOleCache2_RemoteUpdateCache_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec: *
export import var #extern IID_IOleCacheControl: s__GUID
export import var #extern IID_IParseDisplayName: s__GUID
export import var #extern IID_IOleContainer: s__GUID
export import var #extern IID_IOleClientSite: s__GUID
export const OLEGETMONIKER_ONLYIFTHERE: int = 1
export const OLEGETMONIKER_FORCEASSIGN: int = 2
export const OLEGETMONIKER_UNASSIGN: int = 3
export const OLEGETMONIKER_TEMPFORUSER: int = 4
export const OLEWHICHMK_CONTAINER: int = 1
export const OLEWHICHMK_OBJREL: int = 2
export const OLEWHICHMK_OBJFULL: int = 3
export const USERCLASSTYPE_FULL: int = 1
export const USERCLASSTYPE_SHORT: int = 2
export const USERCLASSTYPE_APPNAME: int = 3
export const OLEMISC_RECOMPOSEONRESIZE: int = 1
export const OLEMISC_ONLYICONIC: int = 2
export const OLEMISC_INSERTNOTREPLACE: int = 4
export const OLEMISC_STATIC: int = 8
export const OLEMISC_CANTLINKINSIDE: int = 16
export const OLEMISC_CANLINKBYOLE1: int = 32
export const OLEMISC_ISLINKOBJECT: int = 64
export const OLEMISC_INSIDEOUT: int = 128
export const OLEMISC_ACTIVATEWHENVISIBLE: int = 256
export const OLEMISC_RENDERINGISDEVICEINDEPENDENT: int = 512
export const OLEMISC_INVISIBLEATRUNTIME: int = 1024
export const OLEMISC_ALWAYSRUN: int = 2048
export const OLEMISC_ACTSLIKEBUTTON: int = 4096
export const OLEMISC_ACTSLIKELABEL: int = 8192
export const OLEMISC_NOUIACTIVATE: int = 16384
export const OLEMISC_ALIGNABLE: int = 32768
export const OLEMISC_SIMPLEFRAME: int = 65536
export const OLEMISC_SETCLIENTSITEFIRST: int = 131072
export const OLEMISC_IMEMODE: int = 262144
export const OLEMISC_IGNOREACTIVATEWHENVISIBLE: int = 524288
export const OLEMISC_WANTSTOMENUMERGE: int = 1048576
export const OLEMISC_SUPPORTSMULTILEVELUNDO: int = 2097152
export const OLECLOSE_SAVEIFDIRTY: int = 0
export const OLECLOSE_NOSAVE: int = 1
export const OLECLOSE_PROMPTSAVE: int = 2
export import var #extern IID_IOleObject: s__GUID
export const OLERENDER_NONE: int = 0
export const OLERENDER_DRAW: int = 1
export const OLERENDER_FORMAT: int = 2
export const OLERENDER_ASIS: int = 3
export import var #extern IOLETypes_v0_0_c_ifspec: *
export import var #extern IOLETypes_v0_0_s_ifspec: *
export import var #extern IID_IOleWindow: s__GUID
export const OLEUPDATE_ALWAYS: int = 1
export const OLEUPDATE_ONCALL: int = 3
export const OLELINKBIND_EVENIFCLASSDIFF: int = 1
export import var #extern IID_IOleLink: s__GUID
export const BINDSPEED_INDEFINITE: int = 1
export const BINDSPEED_MODERATE: int = 2
export const BINDSPEED_IMMEDIATE: int = 3
export const OLECONTF_EMBEDDINGS: int = 1
export const OLECONTF_LINKS: int = 2
export const OLECONTF_OTHERS: int = 4
export const OLECONTF_ONLYUSER: int = 8
export const OLECONTF_ONLYIFRUNNING: int = 16
export import var #extern IID_IOleItemContainer: s__GUID
export import var #extern IID_IOleInPlaceUIWindow: s__GUID
export import var #extern IID_IOleInPlaceActiveObject: s__GUID
export import def #extern IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(This: *s_IOleInPlaceActiveObject) -> long
export import def #extern IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(This: *s_IOleInPlaceActiveObject, prcBorder: *s_tagRECT, riid: *s__GUID, pUIWindow: *s_IOleInPlaceUIWindow, fFrameWindow: int) -> long
export import def #extern IOleInPlaceActiveObject_RemoteResizeBorder_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IOleInPlaceFrame: s__GUID
export import var #extern IID_IOleInPlaceObject: s__GUID
export import var #extern IID_IOleInPlaceSite: s__GUID
export import var #extern IID_IContinue: s__GUID
export import var #extern IID_IViewObject: s__GUID
export import def #extern IViewObject_RemoteDraw_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, ptd: *s_tagDVTARGETDEVICE, hdcTargetDev: *s_HDC__, hdcDraw: *s_HDC__, lprcBounds: *s__RECTL, lprcWBounds: *s__RECTL, pContinue: *s_IContinue) -> long
export import def #extern IViewObject_RemoteDraw_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IViewObject_RemoteGetColorSet_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, ptd: *s_tagDVTARGETDEVICE, hicTargetDev: uint64, ppColorSet: **s_tagLOGPALETTE) -> long
export import def #extern IViewObject_RemoteGetColorSet_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IViewObject_RemoteFreeze_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, pdwFreeze: *ulong) -> long
export import def #extern IViewObject_RemoteFreeze_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IViewObject_RemoteGetAdvise_Proxy(This: *s_IViewObject, pAspects: *ulong, pAdvf: *ulong, ppAdvSink: **s_IAdviseSink) -> long
export import def #extern IViewObject_RemoteGetAdvise_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern IID_IViewObject2: s__GUID
export import var #extern IID_IDropSource: s__GUID
export import var #extern IID_IDropTarget: s__GUID
export import var #extern IID_IDropSourceNotify: s__GUID
export import var #extern IID_IEnterpriseDropTarget: s__GUID
export import var #extern __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec: *
export const OLEVERBATTRIB_NEVERDIRTIES: int = 1
export const OLEVERBATTRIB_ONCONTAINERMENU: int = 2
export import var #extern IID_IEnumOLEVERB: s__GUID
export import def #extern IEnumOLEVERB_RemoteNext_Proxy(This: *s_IEnumOLEVERB, celt: ulong, rgelt: *s_tagOLEVERB, pceltFetched: *ulong) -> long
export import def #extern IEnumOLEVERB_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec: *
export import def #extern HACCEL_UserSize(_0: *ulong, _1: ulong, _2: **s_HACCEL__) -> ulong
export import def #extern HACCEL_UserMarshal(_0: *ulong, _1: *uint8, _2: **s_HACCEL__) -> *uint8
export import def #extern HACCEL_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **s_HACCEL__) -> *uint8
export import def #extern HACCEL_UserFree(_0: *ulong, _1: **s_HACCEL__)
export import def #extern HGLOBAL_UserSize(_0: *ulong, _1: ulong, _2: **) -> ulong
export import def #extern HGLOBAL_UserMarshal(_0: *ulong, _1: *uint8, _2: **) -> *uint8
export import def #extern HGLOBAL_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **) -> *uint8
export import def #extern HGLOBAL_UserFree(_0: *ulong, _1: **)
export import def #extern HMENU_UserSize(_0: *ulong, _1: ulong, _2: **s_HMENU__) -> ulong
export import def #extern HMENU_UserMarshal(_0: *ulong, _1: *uint8, _2: **s_HMENU__) -> *uint8
export import def #extern HMENU_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **s_HMENU__) -> *uint8
export import def #extern HMENU_UserFree(_0: *ulong, _1: **s_HMENU__)
export import def #extern HWND_UserSize(_0: *ulong, _1: ulong, _2: **s_HWND__) -> ulong
export import def #extern HWND_UserMarshal(_0: *ulong, _1: *uint8, _2: **s_HWND__) -> *uint8
export import def #extern HWND_UserUnmarshal(_0: *ulong, _1: *uint8, _2: **s_HWND__) -> *uint8
export import def #extern HWND_UserFree(_0: *ulong, _1: **s_HWND__)
export import def #extern HACCEL_UserSize64(_0: *ulong, _1: ulong, _2: **s_HACCEL__) -> ulong
export import def #extern HACCEL_UserMarshal64(_0: *ulong, _1: *uint8, _2: **s_HACCEL__) -> *uint8
export import def #extern HACCEL_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **s_HACCEL__) -> *uint8
export import def #extern HACCEL_UserFree64(_0: *ulong, _1: **s_HACCEL__)
export import def #extern HGLOBAL_UserSize64(_0: *ulong, _1: ulong, _2: **) -> ulong
export import def #extern HGLOBAL_UserMarshal64(_0: *ulong, _1: *uint8, _2: **) -> *uint8
export import def #extern HGLOBAL_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **) -> *uint8
export import def #extern HGLOBAL_UserFree64(_0: *ulong, _1: **)
export import def #extern HMENU_UserSize64(_0: *ulong, _1: ulong, _2: **s_HMENU__) -> ulong
export import def #extern HMENU_UserMarshal64(_0: *ulong, _1: *uint8, _2: **s_HMENU__) -> *uint8
export import def #extern HMENU_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **s_HMENU__) -> *uint8
export import def #extern HMENU_UserFree64(_0: *ulong, _1: **s_HMENU__)
export import def #extern HWND_UserSize64(_0: *ulong, _1: ulong, _2: **s_HWND__) -> ulong
export import def #extern HWND_UserMarshal64(_0: *ulong, _1: *uint8, _2: **s_HWND__) -> *uint8
export import def #extern HWND_UserUnmarshal64(_0: *ulong, _1: *uint8, _2: **s_HWND__) -> *uint8
export import def #extern HWND_UserFree64(_0: *ulong, _1: **s_HWND__)
export import def #extern IOleCache2_UpdateCache_Proxy(This: *s_IOleCache2, pDataObject: *s_IDataObject, grfUpdf: ulong, pReserved: *) -> long
export import def #extern IOleCache2_UpdateCache_Stub(This: *s_IOleCache2, pDataObject: *s_IDataObject, grfUpdf: ulong, pReserved: int64) -> long
export import def #extern IOleInPlaceActiveObject_TranslateAccelerator_Proxy(This: *s_IOleInPlaceActiveObject, lpmsg: *s_tagMSG) -> long
export import def #extern IOleInPlaceActiveObject_TranslateAccelerator_Stub(This: *s_IOleInPlaceActiveObject) -> long
export import def #extern IOleInPlaceActiveObject_ResizeBorder_Proxy(This: *s_IOleInPlaceActiveObject, prcBorder: *s_tagRECT, pUIWindow: *s_IOleInPlaceUIWindow, fFrameWindow: int) -> long
export import def #extern IOleInPlaceActiveObject_ResizeBorder_Stub(This: *s_IOleInPlaceActiveObject, prcBorder: *s_tagRECT, riid: *s__GUID, pUIWindow: *s_IOleInPlaceUIWindow, fFrameWindow: int) -> long
export import def #extern IViewObject_Draw_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: *, ptd: *s_tagDVTARGETDEVICE, hdcTargetDev: *s_HDC__, hdcDraw: *s_HDC__, lprcBounds: *s__RECTL, lprcWBounds: *s__RECTL, pfnContinue: def (uint64) -> (int), dwContinue: uint64) -> long
export import def #extern IViewObject_Draw_Stub(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, ptd: *s_tagDVTARGETDEVICE, hdcTargetDev: *s_HDC__, hdcDraw: *s_HDC__, lprcBounds: *s__RECTL, lprcWBounds: *s__RECTL, pContinue: *s_IContinue) -> long
export import def #extern IViewObject_GetColorSet_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: *, ptd: *s_tagDVTARGETDEVICE, hicTargetDev: *s_HDC__, ppColorSet: **s_tagLOGPALETTE) -> long
export import def #extern IViewObject_GetColorSet_Stub(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, ptd: *s_tagDVTARGETDEVICE, hicTargetDev: uint64, ppColorSet: **s_tagLOGPALETTE) -> long
export import def #extern IViewObject_Freeze_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: *, pdwFreeze: *ulong) -> long
export import def #extern IViewObject_Freeze_Stub(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, pdwFreeze: *ulong) -> long
export import def #extern IViewObject_GetAdvise_Proxy(This: *s_IViewObject, pAspects: *ulong, pAdvf: *ulong, ppAdvSink: **s_IAdviseSink) -> long
export import def #extern IViewObject_GetAdvise_Stub(This: *s_IViewObject, pAspects: *ulong, pAdvf: *ulong, ppAdvSink: **s_IAdviseSink) -> long
export import def #extern IEnumOLEVERB_Next_Proxy(This: *s_IEnumOLEVERB, celt: ulong, rgelt: *s_tagOLEVERB, pceltFetched: *ulong) -> long
export import def #extern IEnumOLEVERB_Next_Stub(This: *s_IEnumOLEVERB, celt: ulong, rgelt: *s_tagOLEVERB, pceltFetched: *ulong) -> long
export import var #extern __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IServiceProvider: s__GUID
export import def #extern IServiceProvider_RemoteQueryService_Proxy(This: *s_IServiceProvider, guidService: *s__GUID, riid: *s__GUID, ppvObject: **s_IUnknown) -> long
export import def #extern IServiceProvider_RemoteQueryService_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec: *
export import def #extern IServiceProvider_QueryService_Proxy(This: *s_IServiceProvider, guidService: *s__GUID, riid: *s__GUID, ppvObject: **) -> long
export import def #extern IServiceProvider_QueryService_Stub(This: *s_IServiceProvider, guidService: *s__GUID, riid: *s__GUID, ppvObject: **s_IUnknown) -> long
export import var #extern __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec: *
export const NODE_INVALID: int = 0
export const NODE_ELEMENT: int = 1
export const NODE_ATTRIBUTE: int = 2
export const NODE_TEXT: int = 3
export const NODE_CDATA_SECTION: int = 4
export const NODE_ENTITY_REFERENCE: int = 5
export const NODE_ENTITY: int = 6
export const NODE_PROCESSING_INSTRUCTION: int = 7
export const NODE_COMMENT: int = 8
export const NODE_DOCUMENT: int = 9
export const NODE_DOCUMENT_TYPE: int = 10
export const NODE_DOCUMENT_FRAGMENT: int = 11
export const NODE_NOTATION: int = 12
export const XMLELEMTYPE_ELEMENT: int = 0
export const XMLELEMTYPE_TEXT: int = 1
export const XMLELEMTYPE_COMMENT: int = 2
export const XMLELEMTYPE_DOCUMENT: int = 3
export const XMLELEMTYPE_DTD: int = 4
export const XMLELEMTYPE_PI: int = 5
export const XMLELEMTYPE_OTHER: int = 6
export import var #extern LIBID_MSXML: s__GUID
export import var #extern IID_IXMLDOMImplementation: s__GUID
export import var #extern IID_IXMLDOMNode: s__GUID
export import var #extern IID_IXMLDOMDocumentFragment: s__GUID
export import var #extern IID_IXMLDOMDocument: s__GUID
export import var #extern IID_IXMLDOMNodeList: s__GUID
export import var #extern IID_IXMLDOMNamedNodeMap: s__GUID
export import var #extern IID_IXMLDOMCharacterData: s__GUID
export import var #extern IID_IXMLDOMAttribute: s__GUID
export import var #extern IID_IXMLDOMElement: s__GUID
export import var #extern IID_IXMLDOMText: s__GUID
export import var #extern IID_IXMLDOMComment: s__GUID
export import var #extern IID_IXMLDOMProcessingInstruction: s__GUID
export import var #extern IID_IXMLDOMCDATASection: s__GUID
export import var #extern IID_IXMLDOMDocumentType: s__GUID
export import var #extern IID_IXMLDOMNotation: s__GUID
export import var #extern IID_IXMLDOMEntity: s__GUID
export import var #extern IID_IXMLDOMEntityReference: s__GUID
export import var #extern IID_IXMLDOMParseError: s__GUID
export import var #extern IID_IXTLRuntime: s__GUID
export import var #extern DIID_XMLDOMDocumentEvents: s__GUID
export import var #extern CLSID_DOMDocument: s__GUID
export import var #extern CLSID_DOMFreeThreadedDocument: s__GUID
export import var #extern IID_IXMLHttpRequest: s__GUID
export import var #extern CLSID_XMLHTTPRequest: s__GUID
export import var #extern IID_IXMLDSOControl: s__GUID
export import var #extern CLSID_XMLDSOControl: s__GUID
export import var #extern IID_IXMLElementCollection: s__GUID
export import var #extern IID_IXMLDocument: s__GUID
export import var #extern IID_IXMLDocument2: s__GUID
export import var #extern IID_IXMLElement: s__GUID
export import var #extern IID_IXMLElement2: s__GUID
export import var #extern IID_IXMLAttribute: s__GUID
export import var #extern IID_IXMLError: s__GUID
export import var #extern CLSID_XMLDocument: s__GUID
export import var #extern __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec: *
export import var #extern CLSID_SBS_StdURLMoniker: s__GUID
export import var #extern CLSID_SBS_HttpProtocol: s__GUID
export import var #extern CLSID_SBS_FtpProtocol: s__GUID
export import var #extern CLSID_SBS_GopherProtocol: s__GUID
export import var #extern CLSID_SBS_HttpSProtocol: s__GUID
export import var #extern CLSID_SBS_FileProtocol: s__GUID
export import var #extern CLSID_SBS_MkProtocol: s__GUID
export import var #extern CLSID_SBS_UrlMkBindCtx: s__GUID
export import var #extern CLSID_SBS_SoftDistExt: s__GUID
export import var #extern CLSID_SBS_CdlProtocol: s__GUID
export import var #extern CLSID_SBS_ClassInstallFilter: s__GUID
export import var #extern CLSID_SBS_InternetSecurityManager: s__GUID
export import var #extern CLSID_SBS_InternetZoneManager: s__GUID
export import var #extern IID_IAsyncMoniker: s__GUID
export import var #extern CLSID_StdURLMoniker: s__GUID
export import var #extern CLSID_HttpProtocol: s__GUID
export import var #extern CLSID_FtpProtocol: s__GUID
export import var #extern CLSID_GopherProtocol: s__GUID
export import var #extern CLSID_HttpSProtocol: s__GUID
export import var #extern CLSID_FileProtocol: s__GUID
export import var #extern CLSID_ResProtocol: s__GUID
export import var #extern CLSID_AboutProtocol: s__GUID
export import var #extern CLSID_JSProtocol: s__GUID
export import var #extern CLSID_MailtoProtocol: s__GUID
export import var #extern CLSID_IE4_PROTOCOLS: s__GUID
export import var #extern CLSID_MkProtocol: s__GUID
export import var #extern CLSID_StdURLProtocol: s__GUID
export import var #extern CLSID_TBAuthProtocol: s__GUID
export import var #extern CLSID_UrlMkBindCtx: s__GUID
export import var #extern CLSID_CdlProtocol: s__GUID
export import var #extern CLSID_ClassInstallFilter: s__GUID
export import var #extern IID_IAsyncBindCtx: s__GUID
export import def #extern CreateURLMoniker(pMkCtx: *s_IMoniker, szURL: *ushort, ppmk: **s_IMoniker) -> long
export import def #extern CreateURLMonikerEx(pMkCtx: *s_IMoniker, szURL: *ushort, ppmk: **s_IMoniker, dwFlags: ulong) -> long
export import def #extern GetClassURL(szURL: *ushort, pClsID: *s__GUID) -> long
export import def #extern CreateAsyncBindCtx(reserved: ulong, pBSCb: *s_IBindStatusCallback, pEFetc: *s_IEnumFORMATETC, ppBC: **s_IBindCtx) -> long
export import def #extern CreateURLMonikerEx2(pMkCtx: *s_IMoniker, pUri: *s_IUri, ppmk: **s_IMoniker, dwFlags: ulong) -> long
export import def #extern CreateAsyncBindCtxEx(pbc: *s_IBindCtx, dwOptions: ulong, pBSCb: *s_IBindStatusCallback, pEnum: *s_IEnumFORMATETC, ppBC: **s_IBindCtx, reserved: ulong) -> long
export import def #extern MkParseDisplayNameEx(pbc: *s_IBindCtx, szDisplayName: *ushort, pchEaten: *ulong, ppmk: **s_IMoniker) -> long
export import def #extern RegisterBindStatusCallback(pBC: *s_IBindCtx, pBSCb: *s_IBindStatusCallback, ppBSCBPrev: **s_IBindStatusCallback, dwReserved: ulong) -> long
export import def #extern RevokeBindStatusCallback(pBC: *s_IBindCtx, pBSCb: *s_IBindStatusCallback) -> long
export import def #extern GetClassFileOrMime(pBC: *s_IBindCtx, szFilename: *ushort, pBuffer: *, cbSize: ulong, szMime: *ushort, dwReserved: ulong, pclsid: *s__GUID) -> long
export import def #extern IsValidURL(pBC: *s_IBindCtx, szURL: *ushort, dwReserved: ulong) -> long
export import def #extern CoGetClassObjectFromURL(rCLASSID: *s__GUID, szCODE: *ushort, dwFileVersionMS: ulong, dwFileVersionLS: ulong, szTYPE: *ushort, pBindCtx: *s_IBindCtx, dwClsContext: ulong, pvReserved: *, riid: *s__GUID, ppv: **) -> long
export import def #extern IEInstallScope(pdwScope: *ulong) -> long
export import def #extern FaultInIEFeature(hWnd: *s_HWND__, pClassSpec: *s___MIDL___MIDL_itf_wtypes_0000_0001_0001, pQuery: *s_tagQUERYCONTEXT, dwFlags: ulong) -> long
export import def #extern GetComponentIDFromCLSSPEC(pClassspec: *s___MIDL___MIDL_itf_wtypes_0000_0001_0001, ppszComponentID: **char) -> long
export import def #extern IsAsyncMoniker(pmk: *s_IMoniker) -> long
export import def #extern CreateURLBinding(lpszUrl: *ushort, pbc: *s_IBindCtx, ppBdg: **s_IBinding) -> long
export import def #extern RegisterMediaTypes(ctypes: uint, rgszTypes: **char, rgcfTypes: *ushort) -> long
export import def #extern FindMediaType(rgszTypes: *char, rgcfTypes: *ushort) -> long
export import def #extern CreateFormatEnumerator(cfmtetc: uint, rgfmtetc: *s_tagFORMATETC, ppenumfmtetc: **s_IEnumFORMATETC) -> long
export import def #extern RegisterFormatEnumerator(pBC: *s_IBindCtx, pEFetc: *s_IEnumFORMATETC, reserved: ulong) -> long
export import def #extern RevokeFormatEnumerator(pBC: *s_IBindCtx, pEFetc: *s_IEnumFORMATETC) -> long
export import def #extern RegisterMediaTypeClass(pBC: *s_IBindCtx, ctypes: uint, rgszTypes: **char, rgclsID: *s__GUID, reserved: ulong) -> long
export import def #extern FindMediaTypeClass(pBC: *s_IBindCtx, szType: *char, pclsID: *s__GUID, reserved: ulong) -> long
export import def #extern UrlMkSetSessionOption(dwOption: ulong, pBuffer: *, dwBufferLength: ulong, dwReserved: ulong) -> long
export import def #extern UrlMkGetSessionOption(dwOption: ulong, pBuffer: *, dwBufferLength: ulong, pdwBufferLengthOut: *ulong, dwReserved: ulong) -> long
export import def #extern FindMimeFromData(pBC: *s_IBindCtx, pwzUrl: *ushort, pBuffer: *, cbSize: ulong, pwzMimeProposed: *ushort, dwMimeFlags: ulong, ppwzMimeOut: **ushort, dwReserved: ulong) -> long
export import def #extern ObtainUserAgentString(dwOption: ulong, pszUAOut: *char, cbSize: *ulong) -> long
export import def #extern CompareSecurityIds(pbSecurityId1: *uint8, dwLen1: ulong, pbSecurityId2: *uint8, dwLen2: ulong, dwReserved: ulong) -> long
export import def #extern CompatFlagsFromClsid(pclsid: *s__GUID, pdwCompatFlags: *ulong, pdwMiscStatusFlags: *ulong) -> long
export const IE_EPM_OBJECT_EVENT: int = 0
export const IE_EPM_OBJECT_MUTEX: int = 1
export const IE_EPM_OBJECT_SEMAPHORE: int = 2
export const IE_EPM_OBJECT_SHARED_MEMORY: int = 3
export const IE_EPM_OBJECT_WAITABLE_TIMER: int = 4
export const IE_EPM_OBJECT_FILE: int = 5
export const IE_EPM_OBJECT_NAMED_PIPE: int = 6
export const IE_EPM_OBJECT_REGISTRY: int = 7
export import def #extern SetAccessForIEAppContainer(hObject: *, ieObjectType: e_IEObjectType, dwAccessMask: ulong) -> long
export import var #extern __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IPersistMoniker: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec: *
export const MIMETYPEPROP: int = 0
export const USE_SRC_URL: int = 1
export const CLASSIDPROP: int = 2
export const TRUSTEDDOWNLOADPROP: int = 3
export const POPUPLEVELPROP: int = 4
export import var #extern IID_IMonikerProp: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec: *
export import var #extern IID_IBindProtocol: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec: *
export import var #extern IID_IBinding: s__GUID
export import def #extern IBinding_RemoteGetBindResult_Proxy(This: *s_IBinding, pclsidProtocol: *s__GUID, pdwResult: *ulong, pszResult: **ushort, dwReserved: ulong) -> long
export import def #extern IBinding_RemoteGetBindResult_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec: *
export const BINDVERB_GET: int = 0
export const BINDVERB_POST: int = 1
export const BINDVERB_PUT: int = 2
export const BINDVERB_CUSTOM: int = 3
export const BINDVERB_RESERVED1: int = 4
export const BINDINFOF_URLENCODESTGMEDDATA: int = 1
export const BINDINFOF_URLENCODEDEXTRAINFO: int = 2
export const BINDF_ASYNCHRONOUS: int = 1
export const BINDF_ASYNCSTORAGE: int = 2
export const BINDF_NOPROGRESSIVERENDERING: int = 4
export const BINDF_OFFLINEOPERATION: int = 8
export const BINDF_GETNEWESTVERSION: int = 16
export const BINDF_NOWRITECACHE: int = 32
export const BINDF_NEEDFILE: int = 64
export const BINDF_PULLDATA: int = 128
export const BINDF_IGNORESECURITYPROBLEM: int = 256
export const BINDF_RESYNCHRONIZE: int = 512
export const BINDF_HYPERLINK: int = 1024
export const BINDF_NO_UI: int = 2048
export const BINDF_SILENTOPERATION: int = 4096
export const BINDF_PRAGMA_NO_CACHE: int = 8192
export const BINDF_GETCLASSOBJECT: int = 16384
export const BINDF_RESERVED_1: int = 32768
export const BINDF_FREE_THREADED: int = 65536
export const BINDF_DIRECT_READ: int = 131072
export const BINDF_FORMS_SUBMIT: int = 262144
export const BINDF_GETFROMCACHE_IF_NET_FAIL: int = 524288
export const BINDF_FROMURLMON: int = 1048576
export const BINDF_FWD_BACK: int = 2097152
export const BINDF_PREFERDEFAULTHANDLER: int = 4194304
export const BINDF_ENFORCERESTRICTED: int = 8388608
export const BINDF_RESERVED_2: int = -2147483648
export const BINDF_RESERVED_3: int = 16777216
export const BINDF_RESERVED_4: int = 33554432
export const BINDF_RESERVED_5: int = 67108864
export const BINDF_RESERVED_6: int = 134217728
export const BINDF_RESERVED_7: int = 1073741824
export const BINDF_RESERVED_8: int = 536870912
export const URL_ENCODING_NONE: int = 0
export const URL_ENCODING_ENABLE_UTF8: int = 268435456
export const URL_ENCODING_DISABLE_UTF8: int = 536870912
export const BINDINFO_OPTIONS_WININETFLAG: int = 65536
export const BINDINFO_OPTIONS_ENABLE_UTF8: int = 131072
export const BINDINFO_OPTIONS_DISABLE_UTF8: int = 262144
export const BINDINFO_OPTIONS_USE_IE_ENCODING: int = 524288
export const BINDINFO_OPTIONS_BINDTOOBJECT: int = 1048576
export const BINDINFO_OPTIONS_SECURITYOPTOUT: int = 2097152
export const BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN: int = 4194304
export const BINDINFO_OPTIONS_USEBINDSTRINGCREDS: int = 8388608
export const BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS: int = 16777216
export const BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE: int = 33554432
export const BINDINFO_WPC_DOWNLOADBLOCKED: int = 134217728
export const BINDINFO_WPC_LOGGING_ENABLED: int = 268435456
export const BINDINFO_OPTIONS_ALLOWCONNECTDATA: int = 536870912
export const BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS: int = 1073741824
export const BINDINFO_OPTIONS_SHDOCVW_NAVIGATE: int = -2147483648
export const BSCF_FIRSTDATANOTIFICATION: int = 1
export const BSCF_INTERMEDIATEDATANOTIFICATION: int = 2
export const BSCF_LASTDATANOTIFICATION: int = 4
export const BSCF_DATAFULLYAVAILABLE: int = 8
export const BSCF_AVAILABLEDATASIZEUNKNOWN: int = 16
export const BSCF_SKIPDRAINDATAFORFILEURLS: int = 32
export const BSCF_64BITLENGTHDOWNLOAD: int = 64
export const BINDSTATUS_FINDINGRESOURCE: int = 1
export const BINDSTATUS_CONNECTING: int = 2
export const BINDSTATUS_REDIRECTING: int = 3
export const BINDSTATUS_BEGINDOWNLOADDATA: int = 4
export const BINDSTATUS_DOWNLOADINGDATA: int = 5
export const BINDSTATUS_ENDDOWNLOADDATA: int = 6
export const BINDSTATUS_BEGINDOWNLOADCOMPONENTS: int = 7
export const BINDSTATUS_INSTALLINGCOMPONENTS: int = 8
export const BINDSTATUS_ENDDOWNLOADCOMPONENTS: int = 9
export const BINDSTATUS_USINGCACHEDCOPY: int = 10
export const BINDSTATUS_SENDINGREQUEST: int = 11
export const BINDSTATUS_CLASSIDAVAILABLE: int = 12
export const BINDSTATUS_MIMETYPEAVAILABLE: int = 13
export const BINDSTATUS_CACHEFILENAMEAVAILABLE: int = 14
export const BINDSTATUS_BEGINSYNCOPERATION: int = 15
export const BINDSTATUS_ENDSYNCOPERATION: int = 16
export const BINDSTATUS_BEGINUPLOADDATA: int = 17
export const BINDSTATUS_UPLOADINGDATA: int = 18
export const BINDSTATUS_ENDUPLOADDATA: int = 19
export const BINDSTATUS_PROTOCOLCLASSID: int = 20
export const BINDSTATUS_ENCODING: int = 21
export const BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE: int = 22
export const BINDSTATUS_CLASSINSTALLLOCATION: int = 23
export const BINDSTATUS_DECODING: int = 24
export const BINDSTATUS_LOADINGMIMEHANDLER: int = 25
export const BINDSTATUS_CONTENTDISPOSITIONATTACH: int = 26
export const BINDSTATUS_FILTERREPORTMIMETYPE: int = 27
export const BINDSTATUS_CLSIDCANINSTANTIATE: int = 28
export const BINDSTATUS_IUNKNOWNAVAILABLE: int = 29
export const BINDSTATUS_DIRECTBIND: int = 30
export const BINDSTATUS_RAWMIMETYPE: int = 31
export const BINDSTATUS_PROXYDETECTING: int = 32
export const BINDSTATUS_ACCEPTRANGES: int = 33
export const BINDSTATUS_COOKIE_SENT: int = 34
export const BINDSTATUS_COMPACT_POLICY_RECEIVED: int = 35
export const BINDSTATUS_COOKIE_SUPPRESSED: int = 36
export const BINDSTATUS_COOKIE_STATE_UNKNOWN: int = 37
export const BINDSTATUS_COOKIE_STATE_ACCEPT: int = 38
export const BINDSTATUS_COOKIE_STATE_REJECT: int = 39
export const BINDSTATUS_COOKIE_STATE_PROMPT: int = 40
export const BINDSTATUS_COOKIE_STATE_LEASH: int = 41
export const BINDSTATUS_COOKIE_STATE_DOWNGRADE: int = 42
export const BINDSTATUS_POLICY_HREF: int = 43
export const BINDSTATUS_P3P_HEADER: int = 44
export const BINDSTATUS_SESSION_COOKIE_RECEIVED: int = 45
export const BINDSTATUS_PERSISTENT_COOKIE_RECEIVED: int = 46
export const BINDSTATUS_SESSION_COOKIES_ALLOWED: int = 47
export const BINDSTATUS_CACHECONTROL: int = 48
export const BINDSTATUS_CONTENTDISPOSITIONFILENAME: int = 49
export const BINDSTATUS_MIMETEXTPLAINMISMATCH: int = 50
export const BINDSTATUS_PUBLISHERAVAILABLE: int = 51
export const BINDSTATUS_DISPLAYNAMEAVAILABLE: int = 52
export const BINDSTATUS_SSLUX_NAVBLOCKED: int = 53
export const BINDSTATUS_SERVER_MIMETYPEAVAILABLE: int = 54
export const BINDSTATUS_SNIFFED_CLASSIDAVAILABLE: int = 55
export const BINDSTATUS_64BIT_PROGRESS: int = 56
export const BINDSTATUS_LAST: int = 56
export const BINDSTATUS_RESERVED_0: int = 57
export const BINDSTATUS_RESERVED_1: int = 58
export const BINDSTATUS_RESERVED_2: int = 59
export const BINDSTATUS_RESERVED_3: int = 60
export const BINDSTATUS_RESERVED_4: int = 61
export const BINDSTATUS_RESERVED_5: int = 62
export const BINDSTATUS_RESERVED_6: int = 63
export const BINDSTATUS_RESERVED_7: int = 64
export const BINDSTATUS_RESERVED_8: int = 65
export const BINDSTATUS_RESERVED_9: int = 66
export const BINDSTATUS_RESERVED_A: int = 67
export const BINDSTATUS_RESERVED_B: int = 68
export const BINDSTATUS_RESERVED_C: int = 69
export const BINDSTATUS_RESERVED_D: int = 70
export const BINDSTATUS_RESERVED_E: int = 71
export const BINDSTATUS_RESERVED_F: int = 72
export const BINDSTATUS_RESERVED_10: int = 73
export const BINDSTATUS_RESERVED_11: int = 74
export const BINDSTATUS_RESERVED_12: int = 75
export const BINDSTATUS_RESERVED_13: int = 76
export const BINDSTATUS_RESERVED_14: int = 77
export const BINDSTATUS_LAST_PRIVATE: int = 77
export import var #extern IID_IBindStatusCallback: s__GUID
export import def #extern IBindStatusCallback_RemoteGetBindInfo_Proxy(This: *s_IBindStatusCallback, grfBINDF: *ulong, pbindinfo: *s__tagRemBINDINFO, pstgmed: *s_tagRemSTGMEDIUM) -> long
export import def #extern IBindStatusCallback_RemoteGetBindInfo_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindStatusCallback_RemoteOnDataAvailable_Proxy(This: *s_IBindStatusCallback, grfBSCF: ulong, dwSize: ulong, pformatetc: *s_tagRemFORMATETC, pstgmed: *s_tagRemSTGMEDIUM) -> long
export import def #extern IBindStatusCallback_RemoteOnDataAvailable_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec: *
export const BINDF2_DISABLEBASICOVERHTTP: int = 1
export const BINDF2_DISABLEAUTOCOOKIEHANDLING: int = 2
export const BINDF2_READ_DATA_GREATER_THAN_4GB: int = 4
export const BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID: int = 8
export const BINDF2_SETDOWNLOADMODE: int = 32
export const BINDF2_DISABLE_HTTP_REDIRECT_CACHING: int = 64
export const BINDF2_KEEP_CALLBACK_MODULE_LOADED: int = 128
export const BINDF2_ALLOW_PROXY_CRED_PROMPT: int = 256
export const BINDF2_RESERVED_17: int = 512
export const BINDF2_RESERVED_16: int = 1024
export const BINDF2_RESERVED_15: int = 2048
export const BINDF2_RESERVED_14: int = 4096
export const BINDF2_RESERVED_13: int = 8192
export const BINDF2_RESERVED_12: int = 16384
export const BINDF2_RESERVED_11: int = 32768
export const BINDF2_RESERVED_10: int = 65536
export const BINDF2_RESERVED_F: int = 131072
export const BINDF2_RESERVED_E: int = 262144
export const BINDF2_RESERVED_D: int = 524288
export const BINDF2_RESERVED_C: int = 1048576
export const BINDF2_RESERVED_B: int = 2097152
export const BINDF2_RESERVED_A: int = 4194304
export const BINDF2_RESERVED_9: int = 8388608
export const BINDF2_RESERVED_8: int = 16777216
export const BINDF2_RESERVED_7: int = 33554432
export const BINDF2_RESERVED_6: int = 67108864
export const BINDF2_RESERVED_5: int = 134217728
export const BINDF2_RESERVED_4: int = 268435456
export const BINDF2_RESERVED_3: int = 536870912
export const BINDF2_RESERVED_2: int = 1073741824
export const BINDF2_RESERVED_1: int = -2147483648
export import var #extern IID_IBindStatusCallbackEx: s__GUID
export import def #extern IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(This: *s_IBindStatusCallbackEx, grfBINDF: *ulong, pbindinfo: *s__tagRemBINDINFO, pstgmed: *s_tagRemSTGMEDIUM, grfBINDF2: *ulong, pdwReserved: *ulong) -> long
export import def #extern IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec: *
export import var #extern IID_IAuthenticate: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec: *
export const AUTHENTICATEF_PROXY: int = 1
export const AUTHENTICATEF_BASIC: int = 2
export const AUTHENTICATEF_HTTP: int = 4
export import var #extern IID_IAuthenticateEx: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec: *
export import var #extern IID_IHttpNegotiate: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec: *
export import var #extern IID_IHttpNegotiate2: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec: *
export import var #extern IID_IHttpNegotiate3: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec: *
export import var #extern IID_IWinInetFileStream: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec: *
export import var #extern IID_IWindowForBindingUI: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec: *
export const CIP_DISK_FULL: int = 0
export const CIP_ACCESS_DENIED: int = 1
export const CIP_NEWER_VERSION_EXISTS: int = 2
export const CIP_OLDER_VERSION_EXISTS: int = 3
export const CIP_NAME_CONFLICT: int = 4
export const CIP_TRUST_VERIFICATION_COMPONENT_MISSING: int = 5
export const CIP_EXE_SELF_REGISTERATION_TIMEOUT: int = 6
export const CIP_UNSAFE_TO_ABORT: int = 7
export const CIP_NEED_REBOOT: int = 8
export const CIP_NEED_REBOOT_UI_PERMISSION: int = 9
export import var #extern IID_ICodeInstall: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec: *
export const Uri_PROPERTY_ABSOLUTE_URI: int = 0
export const Uri_PROPERTY_STRING_START: int = 0
export const Uri_PROPERTY_AUTHORITY: int = 1
export const Uri_PROPERTY_DISPLAY_URI: int = 2
export const Uri_PROPERTY_DOMAIN: int = 3
export const Uri_PROPERTY_EXTENSION: int = 4
export const Uri_PROPERTY_FRAGMENT: int = 5
export const Uri_PROPERTY_HOST: int = 6
export const Uri_PROPERTY_PASSWORD: int = 7
export const Uri_PROPERTY_PATH: int = 8
export const Uri_PROPERTY_PATH_AND_QUERY: int = 9
export const Uri_PROPERTY_QUERY: int = 10
export const Uri_PROPERTY_RAW_URI: int = 11
export const Uri_PROPERTY_SCHEME_NAME: int = 12
export const Uri_PROPERTY_USER_INFO: int = 13
export const Uri_PROPERTY_USER_NAME: int = 14
export const Uri_PROPERTY_STRING_LAST: int = 14
export const Uri_PROPERTY_HOST_TYPE: int = 15
export const Uri_PROPERTY_DWORD_START: int = 15
export const Uri_PROPERTY_PORT: int = 16
export const Uri_PROPERTY_SCHEME: int = 17
export const Uri_PROPERTY_ZONE: int = 18
export const Uri_PROPERTY_DWORD_LAST: int = 18
export const Uri_HOST_UNKNOWN: int = 0
export const Uri_HOST_DNS: int = 1
export const Uri_HOST_IPV4: int = 2
export const Uri_HOST_IPV6: int = 3
export const Uri_HOST_IDN: int = 4
export import var #extern IID_IUri: s__GUID
export import def #extern CreateUri(pwzURI: *ushort, dwFlags: ulong, dwReserved: uint64, ppURI: **s_IUri) -> long
export import def #extern CreateUriWithFragment(pwzURI: *ushort, pwzFragment: *ushort, dwFlags: ulong, dwReserved: uint64, ppURI: **s_IUri) -> long
export import def #extern CreateUriFromMultiByteString(pszANSIInputUri: *char, dwEncodingFlags: ulong, dwCodePage: ulong, dwCreateFlags: ulong, dwReserved: uint64, ppUri: **s_IUri) -> long
export import var #extern __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec: *
export import var #extern IID_IUriContainer: s__GUID
export import var #extern IID_IUriBuilder: s__GUID
export import var #extern IID_IUriBuilderFactory: s__GUID
export import def #extern CreateIUriBuilder(pIUri: *s_IUri, dwFlags: ulong, dwReserved: uint64, ppIUriBuilder: **s_IUriBuilder) -> long
export import var #extern __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec: *
export import var #extern IID_IWinInetInfo: s__GUID
export import def #extern IWinInetInfo_RemoteQueryOption_Proxy(This: *s_IWinInetInfo, dwOption: ulong, pBuffer: *uint8, pcbBuf: *ulong) -> long
export import def #extern IWinInetInfo_RemoteQueryOption_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec: *
export import var #extern IID_IHttpSecurity: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec: *
export import var #extern IID_IWinInetHttpInfo: s__GUID
export import def #extern IWinInetHttpInfo_RemoteQueryInfo_Proxy(This: *s_IWinInetHttpInfo, dwOption: ulong, pBuffer: *uint8, pcbBuf: *ulong, pdwFlags: *ulong, pdwReserved: *ulong) -> long
export import def #extern IWinInetHttpInfo_RemoteQueryInfo_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import var #extern __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec: *
export import var #extern IID_IWinInetHttpTimeouts: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec: *
export import var #extern IID_IWinInetCacheHints: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec: *
export import var #extern IID_IWinInetCacheHints2: s__GUID
export import var #extern SID_BindHost: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec: *
export import var #extern IID_IBindHost: s__GUID
export import def #extern IBindHost_RemoteMonikerBindToStorage_Proxy(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *s__GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IBindHost_RemoteMonikerBindToStorage_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindHost_RemoteMonikerBindToObject_Proxy(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *s__GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IBindHost_RemoteMonikerBindToObject_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *s__RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern HlinkSimpleNavigateToString(szTarget: *ushort, szLocation: *ushort, szTargetFrameName: *ushort, pUnk: *s_IUnknown, pbc: *s_IBindCtx, _5: *s_IBindStatusCallback, grfHLNF: ulong, dwReserved: ulong) -> long
export import def #extern HlinkSimpleNavigateToMoniker(pmkTarget: *s_IMoniker, szLocation: *ushort, szTargetFrameName: *ushort, pUnk: *s_IUnknown, pbc: *s_IBindCtx, _5: *s_IBindStatusCallback, grfHLNF: ulong, dwReserved: ulong) -> long
export import def #extern URLOpenStreamA(_0: *s_IUnknown, _1: *char, _2: ulong, _3: *s_IBindStatusCallback) -> long
export import def #extern URLOpenStreamW(_0: *s_IUnknown, _1: *ushort, _2: ulong, _3: *s_IBindStatusCallback) -> long
export import def #extern URLOpenPullStreamA(_0: *s_IUnknown, _1: *char, _2: ulong, _3: *s_IBindStatusCallback) -> long
export import def #extern URLOpenPullStreamW(_0: *s_IUnknown, _1: *ushort, _2: ulong, _3: *s_IBindStatusCallback) -> long
export import def #extern URLDownloadToFileA(_0: *s_IUnknown, _1: *char, _2: *char, _3: ulong, _4: *s_IBindStatusCallback) -> long
export import def #extern URLDownloadToFileW(_0: *s_IUnknown, _1: *ushort, _2: *ushort, _3: ulong, _4: *s_IBindStatusCallback) -> long
export import def #extern URLDownloadToCacheFileA(_0: *s_IUnknown, _1: *char, _2: *char, cchFileName: ulong, _4: ulong, _5: *s_IBindStatusCallback) -> long
export import def #extern URLDownloadToCacheFileW(_0: *s_IUnknown, _1: *ushort, _2: *ushort, cchFileName: ulong, _4: ulong, _5: *s_IBindStatusCallback) -> long
export import def #extern URLOpenBlockingStreamA(_0: *s_IUnknown, _1: *char, _2: **s_IStream, _3: ulong, _4: *s_IBindStatusCallback) -> long
export import def #extern URLOpenBlockingStreamW(_0: *s_IUnknown, _1: *ushort, _2: **s_IStream, _3: ulong, _4: *s_IBindStatusCallback) -> long
export import def #extern HlinkGoBack(pUnk: *s_IUnknown) -> long
export import def #extern HlinkGoForward(pUnk: *s_IUnknown) -> long
export import def #extern HlinkNavigateString(pUnk: *s_IUnknown, szTarget: *ushort) -> long
export import def #extern HlinkNavigateMoniker(pUnk: *s_IUnknown, pmkTarget: *s_IMoniker) -> long
export import var #extern __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec: *
export import var #extern IID_IInternet: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec: *
export const BINDSTRING_HEADERS: int = 1
export const BINDSTRING_ACCEPT_MIMES: int = 2
export const BINDSTRING_EXTRA_URL: int = 3
export const BINDSTRING_LANGUAGE: int = 4
export const BINDSTRING_USERNAME: int = 5
export const BINDSTRING_PASSWORD: int = 6
export const BINDSTRING_UA_PIXELS: int = 7
export const BINDSTRING_UA_COLOR: int = 8
export const BINDSTRING_OS: int = 9
export const BINDSTRING_USER_AGENT: int = 10
export const BINDSTRING_ACCEPT_ENCODINGS: int = 11
export const BINDSTRING_POST_COOKIE: int = 12
export const BINDSTRING_POST_DATA_MIME: int = 13
export const BINDSTRING_URL: int = 14
export const BINDSTRING_IID: int = 15
export const BINDSTRING_FLAG_BIND_TO_OBJECT: int = 16
export const BINDSTRING_PTR_BIND_CONTEXT: int = 17
export const BINDSTRING_XDR_ORIGIN: int = 18
export const BINDSTRING_DOWNLOADPATH: int = 19
export const BINDSTRING_ROOTDOC_URL: int = 20
export const BINDSTRING_INITIAL_FILENAME: int = 21
export const BINDSTRING_PROXY_USERNAME: int = 22
export const BINDSTRING_PROXY_PASSWORD: int = 23
export const BINDSTRING_ENTERPRISE_ID: int = 24
export const BINDSTRING_DOC_URL: int = 25
export const BINDSTRING_SAMESITE_COOKIE_LEVEL: int = 26
export import var #extern IID_IInternetBindInfo: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec: *
export import var #extern IID_IInternetBindInfoEx: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec: *
export const PI_PARSE_URL: int = 1
export const PI_FILTER_MODE: int = 2
export const PI_FORCE_ASYNC: int = 4
export const PI_USE_WORKERTHREAD: int = 8
export const PI_MIMEVERIFICATION: int = 16
export const PI_CLSIDLOOKUP: int = 32
export const PI_DATAPROGRESS: int = 64
export const PI_SYNCHRONOUS: int = 128
export const PI_APARTMENTTHREADED: int = 256
export const PI_CLASSINSTALL: int = 512
export const PI_PASSONBINDCTX: int = 8192
export const PI_NOMIMEHANDLER: int = 32768
export const PI_LOADAPPDIRECT: int = 16384
export const PD_FORCE_SWITCH: int = 65536
export const PI_PREFERDEFAULTHANDLER: int = 131072
export import var #extern IID_IInternetProtocolRoot: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocol: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocolEx: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocolSink: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocolSinkStackable: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec: *
export const OIBDG_APARTMENTTHREADED: int = 256
export const OIBDG_DATAONLY: int = 4096
export import var #extern IID_IInternetSession: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec: *
export import var #extern IID_IInternetThreadSwitch: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec: *
export import var #extern IID_IInternetPriority: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec: *
export const PARSE_CANONICALIZE: int = 1
export const PARSE_FRIENDLY: int = 2
export const PARSE_SECURITY_URL: int = 3
export const PARSE_ROOTDOCUMENT: int = 4
export const PARSE_DOCUMENT: int = 5
export const PARSE_ANCHOR: int = 6
export const PARSE_ENCODE_IS_UNESCAPE: int = 7
export const PARSE_DECODE_IS_ESCAPE: int = 8
export const PARSE_PATH_FROM_URL: int = 9
export const PARSE_URL_FROM_PATH: int = 10
export const PARSE_MIME: int = 11
export const PARSE_SERVER: int = 12
export const PARSE_SCHEMA: int = 13
export const PARSE_SITE: int = 14
export const PARSE_DOMAIN: int = 15
export const PARSE_LOCATION: int = 16
export const PARSE_SECURITY_DOMAIN: int = 17
export const PARSE_ESCAPE: int = 18
export const PARSE_UNESCAPE: int = 19
export const PSU_DEFAULT: int = 1
export const PSU_SECURITY_URL_ONLY: int = 2
export const QUERY_EXPIRATION_DATE: int = 1
export const QUERY_TIME_OF_LAST_CHANGE: int = 2
export const QUERY_CONTENT_ENCODING: int = 3
export const QUERY_CONTENT_TYPE: int = 4
export const QUERY_REFRESH: int = 5
export const QUERY_RECOMBINE: int = 6
export const QUERY_CAN_NAVIGATE: int = 7
export const QUERY_USES_NETWORK: int = 8
export const QUERY_IS_CACHED: int = 9
export const QUERY_IS_INSTALLEDENTRY: int = 10
export const QUERY_IS_CACHED_OR_MAPPED: int = 11
export const QUERY_USES_CACHE: int = 12
export const QUERY_IS_SECURE: int = 13
export const QUERY_IS_SAFE: int = 14
export const QUERY_USES_HISTORYFOLDER: int = 15
export const QUERY_IS_CACHED_AND_USABLE_OFFLINE: int = 16
export import var #extern IID_IInternetProtocolInfo: s__GUID
export import def #extern CoInternetParseUrl(pwzUrl: *ushort, ParseAction: e__tagPARSEACTION, dwFlags: ulong, pszResult: *ushort, cchResult: ulong, pcchResult: *ulong, dwReserved: ulong) -> long
export import def #extern CoInternetParseIUri(pIUri: *s_IUri, ParseAction: e__tagPARSEACTION, dwFlags: ulong, pwzResult: *ushort, cchResult: ulong, pcchResult: *ulong, dwReserved: uint64) -> long
export import def #extern CoInternetCombineUrl(pwzBaseUrl: *ushort, pwzRelativeUrl: *ushort, dwCombineFlags: ulong, pszResult: *ushort, cchResult: ulong, pcchResult: *ulong, dwReserved: ulong) -> long
export import def #extern CoInternetCombineUrlEx(pBaseUri: *s_IUri, pwzRelativeUrl: *ushort, dwCombineFlags: ulong, ppCombinedUri: **s_IUri, dwReserved: uint64) -> long
export import def #extern CoInternetCombineIUri(pBaseUri: *s_IUri, pRelativeUri: *s_IUri, dwCombineFlags: ulong, ppCombinedUri: **s_IUri, dwReserved: uint64) -> long
export import def #extern CoInternetCompareUrl(pwzUrl1: *ushort, pwzUrl2: *ushort, dwFlags: ulong) -> long
export import def #extern CoInternetGetProtocolFlags(pwzUrl: *ushort, pdwFlags: *ulong, dwReserved: ulong) -> long
export import def #extern CoInternetQueryInfo(pwzUrl: *ushort, QueryOptions: e__tagQUERYOPTION, dwQueryFlags: ulong, pvBuffer: *, cbBuffer: ulong, pcbBuffer: *ulong, dwReserved: ulong) -> long
export import def #extern CoInternetGetSession(dwSessionMode: ulong, ppIInternetSession: **s_IInternetSession, dwReserved: ulong) -> long
export import def #extern CoInternetGetSecurityUrl(pwszUrl: *ushort, ppwszSecUrl: **ushort, psuAction: e__tagPSUACTION, dwReserved: ulong) -> long
export import def #extern AsyncInstallDistributionUnit(szDistUnit: *ushort, szTYPE: *ushort, szExt: *ushort, dwFileVersionMS: ulong, dwFileVersionLS: ulong, szURL: *ushort, pbc: *s_IBindCtx, pvReserved: *, flags: ulong) -> long
export import def #extern CoInternetGetSecurityUrlEx(pUri: *s_IUri, ppSecUri: **s_IUri, psuAction: e__tagPSUACTION, dwReserved: uint64) -> long
export const FEATURE_OBJECT_CACHING: int = 0
export const FEATURE_ZONE_ELEVATION: int = 1
export const FEATURE_MIME_HANDLING: int = 2
export const FEATURE_MIME_SNIFFING: int = 3
export const FEATURE_WINDOW_RESTRICTIONS: int = 4
export const FEATURE_WEBOC_POPUPMANAGEMENT: int = 5
export const FEATURE_BEHAVIORS: int = 6
export const FEATURE_DISABLE_MK_PROTOCOL: int = 7
export const FEATURE_LOCALMACHINE_LOCKDOWN: int = 8
export const FEATURE_SECURITYBAND: int = 9
export const FEATURE_RESTRICT_ACTIVEXINSTALL: int = 10
export const FEATURE_VALIDATE_NAVIGATE_URL: int = 11
export const FEATURE_RESTRICT_FILEDOWNLOAD: int = 12
export const FEATURE_ADDON_MANAGEMENT: int = 13
export const FEATURE_PROTOCOL_LOCKDOWN: int = 14
export const FEATURE_HTTP_USERNAME_PASSWORD_DISABLE: int = 15
export const FEATURE_SAFE_BINDTOOBJECT: int = 16
export const FEATURE_UNC_SAVEDFILECHECK: int = 17
export const FEATURE_GET_URL_DOM_FILEPATH_UNENCODED: int = 18
export const FEATURE_TABBED_BROWSING: int = 19
export const FEATURE_SSLUX: int = 20
export const FEATURE_DISABLE_NAVIGATION_SOUNDS: int = 21
export const FEATURE_DISABLE_LEGACY_COMPRESSION: int = 22
export const FEATURE_FORCE_ADDR_AND_STATUS: int = 23
export const FEATURE_XMLHTTP: int = 24
export const FEATURE_DISABLE_TELNET_PROTOCOL: int = 25
export const FEATURE_FEEDS: int = 26
export const FEATURE_BLOCK_INPUT_PROMPTS: int = 27
export const FEATURE_ENTRY_COUNT: int = 28
export import def #extern CoInternetSetFeatureEnabled(FeatureEntry: e__tagINTERNETFEATURELIST, dwFlags: ulong, fEnable: int) -> long
export import def #extern CoInternetIsFeatureEnabled(FeatureEntry: e__tagINTERNETFEATURELIST, dwFlags: ulong) -> long
export import def #extern CoInternetIsFeatureEnabledForUrl(FeatureEntry: e__tagINTERNETFEATURELIST, dwFlags: ulong, szURL: *ushort, pSecMgr: *s_IInternetSecurityManager) -> long
export import def #extern CoInternetIsFeatureEnabledForIUri(FeatureEntry: e__tagINTERNETFEATURELIST, dwFlags: ulong, pIUri: *s_IUri, pSecMgr: *s_IInternetSecurityManagerEx2) -> long
export import def #extern CoInternetIsFeatureZoneElevationEnabled(szFromURL: *ushort, szToURL: *ushort, pSecMgr: *s_IInternetSecurityManager, dwFlags: ulong) -> long
export import def #extern CopyStgMedium(pcstgmedSrc: *s_tagSTGMEDIUM, pstgmedDest: *s_tagSTGMEDIUM) -> long
export import def #extern CopyBindInfo(pcbiSrc: *s__tagBINDINFO, pbiDest: *s__tagBINDINFO) -> long
export import def #extern ReleaseBindInfo(pbindinfo: *s__tagBINDINFO)
export import def #extern IEGetUserPrivateNamespaceName() -> *ushort
export import def #extern CoInternetCreateSecurityManager(pSP: *s_IServiceProvider, ppSM: **s_IInternetSecurityManager, dwReserved: ulong) -> long
export import def #extern CoInternetCreateZoneManager(pSP: *s_IServiceProvider, ppZM: **s_IInternetZoneManager, dwReserved: ulong) -> long
export import var #extern CLSID_InternetSecurityManager: s__GUID
export import var #extern CLSID_InternetZoneManager: s__GUID
export import var #extern CLSID_PersistentZoneIdentifier: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec: *
export import var #extern IID_IInternetSecurityMgrSite: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec: *
export const PUAF_DEFAULT: int = 0
export const PUAF_NOUI: int = 1
export const PUAF_ISFILE: int = 2
export const PUAF_WARN_IF_DENIED: int = 4
export const PUAF_FORCEUI_FOREGROUND: int = 8
export const PUAF_CHECK_TIFS: int = 16
export const PUAF_DONTCHECKBOXINDIALOG: int = 32
export const PUAF_TRUSTED: int = 64
export const PUAF_ACCEPT_WILDCARD_SCHEME: int = 128
export const PUAF_ENFORCERESTRICTED: int = 256
export const PUAF_NOSAVEDFILECHECK: int = 512
export const PUAF_REQUIRESAVEDFILECHECK: int = 1024
export const PUAF_DONT_USE_CACHE: int = 4096
export const PUAF_RESERVED1: int = 8192
export const PUAF_RESERVED2: int = 16384
export const PUAF_LMZ_UNLOCKED: int = 65536
export const PUAF_LMZ_LOCKED: int = 131072
export const PUAF_DEFAULTZONEPOL: int = 262144
export const PUAF_NPL_USE_LOCKED_IF_RESTRICTED: int = 524288
export const PUAF_NOUIIFLOCKED: int = 1048576
export const PUAF_DRAGPROTOCOLCHECK: int = 2097152
export const PUAFOUT_DEFAULT: int = 0
export const PUAFOUT_ISLOCKZONEPOLICY: int = 1
export const SZM_CREATE: int = 0
export const SZM_DELETE: int = 1
export import var #extern IID_IInternetSecurityManager: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec: *
export import var #extern IID_IInternetSecurityManagerEx: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec: *
export import var #extern IID_IInternetSecurityManagerEx2: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec: *
export import var #extern IID_IZoneIdentifier: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec: *
export import var #extern IID_IZoneIdentifier2: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec: *
export import var #extern IID_IInternetHostSecurityManager: s__GUID
export import var #extern GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec: *
export const URLZONE_INVALID: int = -1
export const URLZONE_PREDEFINED_MIN: int = 0
export const URLZONE_LOCAL_MACHINE: int = 0
export const URLZONE_INTRANET: int = 1
export const URLZONE_TRUSTED: int = 2
export const URLZONE_INTERNET: int = 3
export const URLZONE_UNTRUSTED: int = 4
export const URLZONE_PREDEFINED_MAX: int = 999
export const URLZONE_USER_MIN: int = 1000
export const URLZONE_USER_MAX: int = 10000
export const URLTEMPLATE_CUSTOM: int = 0
export const URLTEMPLATE_PREDEFINED_MIN: int = 65536
export const URLTEMPLATE_LOW: int = 65536
export const URLTEMPLATE_MEDLOW: int = 66816
export const URLTEMPLATE_MEDIUM: int = 69632
export const URLTEMPLATE_MEDHIGH: int = 70912
export const URLTEMPLATE_HIGH: int = 73728
export const URLTEMPLATE_PREDEFINED_MAX: int = 131072
export const MAX_ZONE_PATH: int = 260
export const MAX_ZONE_DESCRIPTION: int = 200
export const ZAFLAGS_CUSTOM_EDIT: int = 1
export const ZAFLAGS_ADD_SITES: int = 2
export const ZAFLAGS_REQUIRE_VERIFICATION: int = 4
export const ZAFLAGS_INCLUDE_PROXY_OVERRIDE: int = 8
export const ZAFLAGS_INCLUDE_INTRANET_SITES: int = 16
export const ZAFLAGS_NO_UI: int = 32
export const ZAFLAGS_SUPPORTS_VERIFICATION: int = 64
export const ZAFLAGS_UNC_AS_INTRANET: int = 128
export const ZAFLAGS_DETECT_INTRANET: int = 256
export const ZAFLAGS_USE_LOCKED_ZONES: int = 65536
export const ZAFLAGS_VERIFY_TEMPLATE_SETTINGS: int = 131072
export const ZAFLAGS_NO_CACHE: int = 262144
export const URLZONEREG_DEFAULT: int = 0
export const URLZONEREG_HKLM: int = 1
export const URLZONEREG_HKCU: int = 2
export import var #extern IID_IInternetZoneManager: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec: *
export import var #extern IID_IInternetZoneManagerEx: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec: *
export import var #extern IID_IInternetZoneManagerEx2: s__GUID
export import var #extern CLSID_SoftDistExt: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec: *
export import var #extern IID_ISoftDistExt: s__GUID
export import def #extern GetSoftwareUpdateInfo(szDistUnit: *ushort, psdi: *s__tagSOFTDISTINFO) -> long
export import def #extern SetSoftwareUpdateAdvertisementState(szDistUnit: *ushort, dwAdState: ulong, dwAdvertisedVersionMS: ulong, dwAdvertisedVersionLS: ulong) -> long
export import var #extern __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec: *
export import var #extern IID_ICatalogFileInfo: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec: *
export import var #extern IID_IDataFilter: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec: *
export import var #extern IID_IEncodingFilterFactory: s__GUID
export import def #extern IsLoggingEnabledA(pszUrl: *char) -> int
export import def #extern IsLoggingEnabledW(pwszUrl: *ushort) -> int
export import def #extern WriteHitLogging(lpLogginginfo: *s__tagHIT_LOGGING_INFO) -> int
export import var #extern GUID_CUSTOM_CONFIRMOBJECTSAFETY: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec: *
export import var #extern IID_IWrappedProtocol: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec: *
export const BINDHANDLETYPES_APPCACHE: int = 0
export const BINDHANDLETYPES_DEPENDENCY: int = 1
export const BINDHANDLETYPES_COUNT: int = 2
export import var #extern IID_IGetBindHandle: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec: *
export import var #extern IID_IBindCallbackRedirect: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec: *
export import var #extern IID_IBindHttpSecurity: s__GUID
export import var #extern __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec: *
export import def #extern IBinding_GetBindResult_Proxy(This: *s_IBinding, pclsidProtocol: *s__GUID, pdwResult: *ulong, pszResult: **ushort, pdwReserved: *ulong) -> long
export import def #extern IBinding_GetBindResult_Stub(This: *s_IBinding, pclsidProtocol: *s__GUID, pdwResult: *ulong, pszResult: **ushort, dwReserved: ulong) -> long
export import def #extern IBindStatusCallback_GetBindInfo_Proxy(This: *s_IBindStatusCallback, grfBINDF: *ulong, pbindinfo: *s__tagBINDINFO) -> long
export import def #extern IBindStatusCallback_GetBindInfo_Stub(This: *s_IBindStatusCallback, grfBINDF: *ulong, pbindinfo: *s__tagRemBINDINFO, pstgmed: *s_tagRemSTGMEDIUM) -> long
export import def #extern IBindStatusCallback_OnDataAvailable_Proxy(This: *s_IBindStatusCallback, grfBSCF: ulong, dwSize: ulong, pformatetc: *s_tagFORMATETC, pstgmed: *s_tagSTGMEDIUM) -> long
export import def #extern IBindStatusCallback_OnDataAvailable_Stub(This: *s_IBindStatusCallback, grfBSCF: ulong, dwSize: ulong, pformatetc: *s_tagRemFORMATETC, pstgmed: *s_tagRemSTGMEDIUM) -> long
export import def #extern IBindStatusCallbackEx_GetBindInfoEx_Proxy(This: *s_IBindStatusCallbackEx, grfBINDF: *ulong, pbindinfo: *s__tagBINDINFO, grfBINDF2: *ulong, pdwReserved: *ulong) -> long
export import def #extern IBindStatusCallbackEx_GetBindInfoEx_Stub(This: *s_IBindStatusCallbackEx, grfBINDF: *ulong, pbindinfo: *s__tagRemBINDINFO, pstgmed: *s_tagRemSTGMEDIUM, grfBINDF2: *ulong, pdwReserved: *ulong) -> long
export import def #extern IWinInetInfo_QueryOption_Proxy(This: *s_IWinInetInfo, dwOption: ulong, pBuffer: *, pcbBuf: *ulong) -> long
export import def #extern IWinInetInfo_QueryOption_Stub(This: *s_IWinInetInfo, dwOption: ulong, pBuffer: *uint8, pcbBuf: *ulong) -> long
export import def #extern IWinInetHttpInfo_QueryInfo_Proxy(This: *s_IWinInetHttpInfo, dwOption: ulong, pBuffer: *, pcbBuf: *ulong, pdwFlags: *ulong, pdwReserved: *ulong) -> long
export import def #extern IWinInetHttpInfo_QueryInfo_Stub(This: *s_IWinInetHttpInfo, dwOption: ulong, pBuffer: *uint8, pcbBuf: *ulong, pdwFlags: *ulong, pdwReserved: *ulong) -> long
export import def #extern IBindHost_MonikerBindToStorage_Proxy(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *s__GUID, ppvObj: **) -> long
export import def #extern IBindHost_MonikerBindToStorage_Stub(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *s__GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IBindHost_MonikerBindToObject_Proxy(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *s__GUID, ppvObj: **) -> long
export import def #extern IBindHost_MonikerBindToObject_Stub(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *s__GUID, ppvObj: **s_IUnknown) -> long
export const PIDMSI_STATUS_NORMAL: int = 0
export const PIDMSI_STATUS_NEW: int = 1
export const PIDMSI_STATUS_PRELIM: int = 2
export const PIDMSI_STATUS_DRAFT: int = 3
export const PIDMSI_STATUS_INPROGRESS: int = 4
export const PIDMSI_STATUS_EDIT: int = 5
export const PIDMSI_STATUS_REVIEW: int = 6
export const PIDMSI_STATUS_PROOF: int = 7
export const PIDMSI_STATUS_FINAL: int = 8
export const PIDMSI_STATUS_OTHER: int = 32767
export import def #extern StgConvertVariantToProperty(pvar: *s_tagPROPVARIANT, CodePage: ushort, pprop: *s_tagSERIALIZEDPROPERTYVALUE, pcb: *ulong, pid: ulong, fReserved: uint8, pcIndirect: *ulong) -> *s_tagSERIALIZEDPROPERTYVALUE
export import var #extern __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec: *
export import def #extern #dllimport CreateStdProgressIndicator(hwndParent: *s_HWND__, pszTitle: *ushort, pIbscCaller: *s_IBindStatusCallback, ppIbsc: **s_IBindStatusCallback) -> long
export import var #extern IID_StdOle: s__GUID
export import def #extern #dllimport SysAllocString(psz: *ushort) -> *ushort
export import def #extern #dllimport SysReAllocString(pbstr: **ushort, psz: *ushort) -> int
export import def #extern #dllimport SysAllocStringLen(strIn: *ushort, ui: uint) -> *ushort
export import def #extern #dllimport SysReAllocStringLen(pbstr: **ushort, psz: *ushort, len: uint) -> int
export import def #extern #dllimport SysAddRefString(bstrString: *ushort) -> long
export import def #extern #dllimport SysReleaseString(bstrString: *ushort)
export import def #extern #dllimport SysFreeString(bstrString: *ushort)
export import def #extern #dllimport SysStringLen(pbstr: *ushort) -> uint
export import def #extern #dllimport SysStringByteLen(bstr: *ushort) -> uint
export import def #extern #dllimport SysAllocStringByteLen(psz: *char, len: uint) -> *ushort
export import def #extern #dllimport DosDateTimeToVariantTime(wDosDate: ushort, wDosTime: ushort, pvtime: *double) -> int
export import def #extern #dllimport VariantTimeToDosDateTime(vtime: double, pwDosDate: *ushort, pwDosTime: *ushort) -> int
export import def #extern #dllimport SystemTimeToVariantTime(lpSystemTime: *s__SYSTEMTIME, pvtime: *double) -> int
export import def #extern #dllimport VariantTimeToSystemTime(vtime: double, lpSystemTime: *s__SYSTEMTIME) -> int
export import def #extern #dllimport SafeArrayAllocDescriptor(cDims: uint, ppsaOut: **s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayAllocDescriptorEx(vt: ushort, cDims: uint, ppsaOut: **s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayAllocData(psa: *s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayCreate(vt: ushort, cDims: uint, rgsabound: *s_tagSAFEARRAYBOUND) -> *s_tagSAFEARRAY
export import def #extern #dllimport SafeArrayCreateEx(vt: ushort, cDims: uint, rgsabound: *s_tagSAFEARRAYBOUND, pvExtra: *) -> *s_tagSAFEARRAY
export import def #extern #dllimport SafeArrayCopyData(psaSource: *s_tagSAFEARRAY, psaTarget: *s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayReleaseDescriptor(psa: *s_tagSAFEARRAY)
export import def #extern #dllimport SafeArrayDestroyDescriptor(psa: *s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayReleaseData(pData: *)
export import def #extern #dllimport SafeArrayDestroyData(psa: *s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayAddRef(psa: *s_tagSAFEARRAY, ppDataToRelease: **) -> long
export import def #extern #dllimport SafeArrayDestroy(psa: *s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayRedim(psa: *s_tagSAFEARRAY, psaboundNew: *s_tagSAFEARRAYBOUND) -> long
export import def #extern #dllimport SafeArrayGetDim(psa: *s_tagSAFEARRAY) -> uint
export import def #extern #dllimport SafeArrayGetElemsize(psa: *s_tagSAFEARRAY) -> uint
export import def #extern #dllimport SafeArrayGetUBound(psa: *s_tagSAFEARRAY, nDim: uint, plUbound: *long) -> long
export import def #extern #dllimport SafeArrayGetLBound(psa: *s_tagSAFEARRAY, nDim: uint, plLbound: *long) -> long
export import def #extern #dllimport SafeArrayLock(psa: *s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayUnlock(psa: *s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayAccessData(psa: *s_tagSAFEARRAY, ppvData: **) -> long
export import def #extern #dllimport SafeArrayUnaccessData(psa: *s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayGetElement(psa: *s_tagSAFEARRAY, rgIndices: *long, pv: *) -> long
export import def #extern #dllimport SafeArrayPutElement(psa: *s_tagSAFEARRAY, rgIndices: *long, pv: *) -> long
export import def #extern #dllimport SafeArrayCopy(psa: *s_tagSAFEARRAY, ppsaOut: **s_tagSAFEARRAY) -> long
export import def #extern #dllimport SafeArrayPtrOfIndex(psa: *s_tagSAFEARRAY, rgIndices: *long, ppvData: **) -> long
export import def #extern #dllimport SafeArraySetRecordInfo(psa: *s_tagSAFEARRAY, prinfo: *s_IRecordInfo) -> long
export import def #extern #dllimport SafeArrayGetRecordInfo(psa: *s_tagSAFEARRAY, prinfo: **s_IRecordInfo) -> long
export import def #extern #dllimport SafeArraySetIID(psa: *s_tagSAFEARRAY, guid: *s__GUID) -> long
export import def #extern #dllimport SafeArrayGetIID(psa: *s_tagSAFEARRAY, pguid: *s__GUID) -> long
export import def #extern #dllimport SafeArrayGetVartype(psa: *s_tagSAFEARRAY, pvt: *ushort) -> long
export import def #extern #dllimport SafeArrayCreateVector(vt: ushort, lLbound: long, cElements: ulong) -> *s_tagSAFEARRAY
export import def #extern #dllimport SafeArrayCreateVectorEx(vt: ushort, lLbound: long, cElements: ulong, pvExtra: *) -> *s_tagSAFEARRAY
export import def #extern #dllimport VariantInit(pvarg: *s_tagVARIANT)
export import def #extern #dllimport VariantClear(pvarg: *s_tagVARIANT) -> long
export import def #extern #dllimport VariantCopy(pvargDest: *s_tagVARIANT, pvargSrc: *s_tagVARIANT) -> long
export import def #extern #dllimport VariantCopyInd(pvarDest: *s_tagVARIANT, pvargSrc: *s_tagVARIANT) -> long
export import def #extern #dllimport VariantChangeType(pvargDest: *s_tagVARIANT, pvarSrc: *s_tagVARIANT, wFlags: ushort, vt: ushort) -> long
export import def #extern #dllimport VariantChangeTypeEx(pvargDest: *s_tagVARIANT, pvarSrc: *s_tagVARIANT, lcid: ulong, wFlags: ushort, vt: ushort) -> long
export import def #extern #dllimport VectorFromBstr(bstr: *ushort, ppsa: **s_tagSAFEARRAY) -> long
export import def #extern #dllimport BstrFromVector(psa: *s_tagSAFEARRAY, pbstr: **ushort) -> long
export import def #extern #dllimport VarUI1FromI2(sIn: short, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromI4(lIn: long, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromI8(i64In: int64, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromR4(fltIn: float, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromR8(dblIn: double, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromCy(cyIn: u_tagCY, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromDate(dateIn: double, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromBool(boolIn: short, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromI1(cIn: char, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromUI2(uiIn: ushort, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromUI4(ulIn: ulong, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromUI8(ui64In: uint64, pbOut: *uint8) -> long
export import def #extern #dllimport VarUI1FromDec(pdecIn: *s_tagDEC, pbOut: *uint8) -> long
export import def #extern #dllimport VarI2FromUI1(bIn: uint8, psOut: *short) -> long
export import def #extern #dllimport VarI2FromI4(lIn: long, psOut: *short) -> long
export import def #extern #dllimport VarI2FromI8(i64In: int64, psOut: *short) -> long
export import def #extern #dllimport VarI2FromR4(fltIn: float, psOut: *short) -> long
export import def #extern #dllimport VarI2FromR8(dblIn: double, psOut: *short) -> long
export import def #extern #dllimport VarI2FromCy(cyIn: u_tagCY, psOut: *short) -> long
export import def #extern #dllimport VarI2FromDate(dateIn: double, psOut: *short) -> long
export import def #extern #dllimport VarI2FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, psOut: *short) -> long
export import def #extern #dllimport VarI2FromDisp(pdispIn: *s_IDispatch, lcid: ulong, psOut: *short) -> long
export import def #extern #dllimport VarI2FromBool(boolIn: short, psOut: *short) -> long
export import def #extern #dllimport VarI2FromI1(cIn: char, psOut: *short) -> long
export import def #extern #dllimport VarI2FromUI2(uiIn: ushort, psOut: *short) -> long
export import def #extern #dllimport VarI2FromUI4(ulIn: ulong, psOut: *short) -> long
export import def #extern #dllimport VarI2FromUI8(ui64In: uint64, psOut: *short) -> long
export import def #extern #dllimport VarI2FromDec(pdecIn: *s_tagDEC, psOut: *short) -> long
export import def #extern #dllimport VarI4FromUI1(bIn: uint8, plOut: *long) -> long
export import def #extern #dllimport VarI4FromI2(sIn: short, plOut: *long) -> long
export import def #extern #dllimport VarI4FromI8(i64In: int64, plOut: *long) -> long
export import def #extern #dllimport VarI4FromR4(fltIn: float, plOut: *long) -> long
export import def #extern #dllimport VarI4FromR8(dblIn: double, plOut: *long) -> long
export import def #extern #dllimport VarI4FromCy(cyIn: u_tagCY, plOut: *long) -> long
export import def #extern #dllimport VarI4FromDate(dateIn: double, plOut: *long) -> long
export import def #extern #dllimport VarI4FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, plOut: *long) -> long
export import def #extern #dllimport VarI4FromDisp(pdispIn: *s_IDispatch, lcid: ulong, plOut: *long) -> long
export import def #extern #dllimport VarI4FromBool(boolIn: short, plOut: *long) -> long
export import def #extern #dllimport VarI4FromI1(cIn: char, plOut: *long) -> long
export import def #extern #dllimport VarI4FromUI2(uiIn: ushort, plOut: *long) -> long
export import def #extern #dllimport VarI4FromUI4(ulIn: ulong, plOut: *long) -> long
export import def #extern #dllimport VarI4FromUI8(ui64In: uint64, plOut: *long) -> long
export import def #extern #dllimport VarI4FromDec(pdecIn: *s_tagDEC, plOut: *long) -> long
export import def #extern #dllimport VarI8FromUI1(bIn: uint8, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromI2(sIn: short, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromR4(fltIn: float, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromR8(dblIn: double, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromCy(cyIn: u_tagCY, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromDate(dateIn: double, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromBool(boolIn: short, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromI1(cIn: char, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromUI2(uiIn: ushort, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromUI4(ulIn: ulong, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromUI8(ui64In: uint64, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromDec(pdecIn: *s_tagDEC, pi64Out: *int64) -> long
export import def #extern #dllimport VarR4FromUI1(bIn: uint8, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromI2(sIn: short, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromI4(lIn: long, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromI8(i64In: int64, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromR8(dblIn: double, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromCy(cyIn: u_tagCY, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromDate(dateIn: double, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromBool(boolIn: short, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromI1(cIn: char, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromUI2(uiIn: ushort, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromUI4(ulIn: ulong, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromUI8(ui64In: uint64, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromDec(pdecIn: *s_tagDEC, pfltOut: *float) -> long
export import def #extern #dllimport VarR8FromUI1(bIn: uint8, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromI2(sIn: short, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromI4(lIn: long, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromI8(i64In: int64, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromR4(fltIn: float, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromCy(cyIn: u_tagCY, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromDate(dateIn: double, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromBool(boolIn: short, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromI1(cIn: char, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromUI2(uiIn: ushort, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromUI4(ulIn: ulong, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromUI8(ui64In: uint64, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromDec(pdecIn: *s_tagDEC, pdblOut: *double) -> long
export import def #extern #dllimport VarDateFromUI1(bIn: uint8, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromI2(sIn: short, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromI4(lIn: long, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromI8(i64In: int64, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromR4(fltIn: float, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromR8(dblIn: double, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromCy(cyIn: u_tagCY, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromDisp(pdispIn: *s_IDispatch, lcid: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromBool(boolIn: short, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromI1(cIn: char, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromUI2(uiIn: ushort, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromUI4(ulIn: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromUI8(ui64In: uint64, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromDec(pdecIn: *s_tagDEC, pdateOut: *double) -> long
export import def #extern #dllimport VarCyFromUI1(bIn: uint8, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromI2(sIn: short, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromI4(lIn: long, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromI8(i64In: int64, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromR4(fltIn: float, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromR8(dblIn: double, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromDate(dateIn: double, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromDisp(pdispIn: *s_IDispatch, lcid: ulong, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromBool(boolIn: short, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromI1(cIn: char, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromUI2(uiIn: ushort, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromUI4(ulIn: ulong, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromUI8(ui64In: uint64, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarCyFromDec(pdecIn: *s_tagDEC, pcyOut: *u_tagCY) -> long
export import def #extern #dllimport VarBstrFromUI1(bVal: uint8, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromI2(iVal: short, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromI4(lIn: long, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromI8(i64In: int64, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromR4(fltIn: float, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromR8(dblIn: double, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromCy(cyIn: u_tagCY, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromDate(dateIn: double, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromDisp(pdispIn: *s_IDispatch, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromBool(boolIn: short, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromI1(cIn: char, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromUI2(uiIn: ushort, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromUI4(ulIn: ulong, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromUI8(ui64In: uint64, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromDec(pdecIn: *s_tagDEC, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBoolFromUI1(bIn: uint8, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromI2(sIn: short, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromI4(lIn: long, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromI8(i64In: int64, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromR4(fltIn: float, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromR8(dblIn: double, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromDate(dateIn: double, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromCy(cyIn: u_tagCY, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromDisp(pdispIn: *s_IDispatch, lcid: ulong, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromI1(cIn: char, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromUI2(uiIn: ushort, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromUI4(ulIn: ulong, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromUI8(i64In: uint64, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromDec(pdecIn: *s_tagDEC, pboolOut: *short) -> long
export import def #extern #dllimport VarI1FromUI1(bIn: uint8, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromI2(uiIn: short, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromI4(lIn: long, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromI8(i64In: int64, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromR4(fltIn: float, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromR8(dblIn: double, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromDate(dateIn: double, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromCy(cyIn: u_tagCY, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromBool(boolIn: short, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromUI2(uiIn: ushort, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromUI4(ulIn: ulong, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromUI8(i64In: uint64, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromDec(pdecIn: *s_tagDEC, pcOut: *char) -> long
export import def #extern #dllimport VarUI2FromUI1(bIn: uint8, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromI2(uiIn: short, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromI4(lIn: long, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromI8(i64In: int64, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromR4(fltIn: float, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromR8(dblIn: double, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromDate(dateIn: double, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromCy(cyIn: u_tagCY, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromDisp(pdispIn: *s_IDispatch, lcid: ulong, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromBool(boolIn: short, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromI1(cIn: char, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromUI4(ulIn: ulong, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromUI8(i64In: uint64, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromDec(pdecIn: *s_tagDEC, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI4FromUI1(bIn: uint8, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromI2(uiIn: short, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromI4(lIn: long, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromI8(i64In: int64, plOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromR4(fltIn: float, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromR8(dblIn: double, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromDate(dateIn: double, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromCy(cyIn: u_tagCY, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromBool(boolIn: short, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromI1(cIn: char, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromUI2(uiIn: ushort, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromUI8(ui64In: uint64, plOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromDec(pdecIn: *s_tagDEC, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI8FromUI1(bIn: uint8, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromI2(sIn: short, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromI4(lIn: long, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromI8(ui64In: int64, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromR4(fltIn: float, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromR8(dblIn: double, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromCy(cyIn: u_tagCY, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromDate(dateIn: double, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromBool(boolIn: short, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromI1(cIn: char, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromUI2(uiIn: ushort, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromUI4(ulIn: ulong, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromDec(pdecIn: *s_tagDEC, pi64Out: *uint64) -> long
export import def #extern #dllimport VarDecFromUI1(bIn: uint8, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromI2(uiIn: short, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromI4(lIn: long, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromI8(i64In: int64, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromR4(fltIn: float, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromR8(dblIn: double, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromDate(dateIn: double, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromCy(cyIn: u_tagCY, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromDisp(pdispIn: *s_IDispatch, lcid: ulong, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromBool(boolIn: short, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromI1(cIn: char, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromUI2(uiIn: ushort, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromUI4(ulIn: ulong, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarDecFromUI8(ui64In: uint64, pdecOut: *s_tagDEC) -> long
export import def #extern #dllimport VarParseNumFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pnumprs: *s_NUMPARSE, rgbDig: *uint8) -> long
export import def #extern #dllimport VarNumFromParseNum(pnumprs: *s_NUMPARSE, rgbDig: *uint8, dwVtBits: ulong, pvar: *s_tagVARIANT) -> long
export import def #extern VarAdd(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarAnd(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarCat(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarDiv(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarEqv(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarIdiv(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarImp(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarMod(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarMul(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarOr(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarPow(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarSub(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarXor(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarAbs(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarFix(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarInt(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarNeg(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarNot(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarRound(pvarIn: *s_tagVARIANT, cDecimals: int, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarCmp(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, lcid: ulong, dwFlags: ulong) -> long
export import def #extern VarDecAdd(pdecLeft: *s_tagDEC, pdecRight: *s_tagDEC, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecDiv(pdecLeft: *s_tagDEC, pdecRight: *s_tagDEC, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecMul(pdecLeft: *s_tagDEC, pdecRight: *s_tagDEC, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecSub(pdecLeft: *s_tagDEC, pdecRight: *s_tagDEC, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecAbs(pdecIn: *s_tagDEC, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecFix(pdecIn: *s_tagDEC, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecInt(pdecIn: *s_tagDEC, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecNeg(pdecIn: *s_tagDEC, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecRound(pdecIn: *s_tagDEC, cDecimals: int, pdecResult: *s_tagDEC) -> long
export import def #extern VarDecCmp(pdecLeft: *s_tagDEC, pdecRight: *s_tagDEC) -> long
export import def #extern VarDecCmpR8(pdecLeft: *s_tagDEC, dblRight: double) -> long
export import def #extern VarCyAdd(cyLeft: u_tagCY, cyRight: u_tagCY, pcyResult: *u_tagCY) -> long
export import def #extern VarCyMul(cyLeft: u_tagCY, cyRight: u_tagCY, pcyResult: *u_tagCY) -> long
export import def #extern VarCyMulI4(cyLeft: u_tagCY, lRight: long, pcyResult: *u_tagCY) -> long
export import def #extern VarCyMulI8(cyLeft: u_tagCY, lRight: int64, pcyResult: *u_tagCY) -> long
export import def #extern VarCySub(cyLeft: u_tagCY, cyRight: u_tagCY, pcyResult: *u_tagCY) -> long
export import def #extern VarCyAbs(cyIn: u_tagCY, pcyResult: *u_tagCY) -> long
export import def #extern VarCyFix(cyIn: u_tagCY, pcyResult: *u_tagCY) -> long
export import def #extern VarCyInt(cyIn: u_tagCY, pcyResult: *u_tagCY) -> long
export import def #extern VarCyNeg(cyIn: u_tagCY, pcyResult: *u_tagCY) -> long
export import def #extern VarCyRound(cyIn: u_tagCY, cDecimals: int, pcyResult: *u_tagCY) -> long
export import def #extern VarCyCmp(cyLeft: u_tagCY, cyRight: u_tagCY) -> long
export import def #extern VarCyCmpR8(cyLeft: u_tagCY, dblRight: double) -> long
export import def #extern VarBstrCat(bstrLeft: *ushort, bstrRight: *ushort, pbstrResult: **ushort) -> long
export import def #extern VarBstrCmp(bstrLeft: *ushort, bstrRight: *ushort, lcid: ulong, dwFlags: ulong) -> long
export import def #extern VarR8Pow(dblLeft: double, dblRight: double, pdblResult: *double) -> long
export import def #extern VarR4CmpR8(fltLeft: float, dblRight: double) -> long
export import def #extern VarR8Round(dblIn: double, cDecimals: int, pdblResult: *double) -> long
export import def #extern #dllimport VarDateFromUdate(pudateIn: *s_UDATE, dwFlags: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromUdateEx(pudateIn: *s_UDATE, lcid: ulong, dwFlags: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarUdateFromDate(dateIn: double, dwFlags: ulong, pudateOut: *s_UDATE) -> long
export import def #extern #dllimport GetAltMonthNames(lcid: ulong, prgp: ***ushort) -> long
export import def #extern #dllimport VarFormat(pvarIn: *s_tagVARIANT, pstrFormat: *ushort, iFirstDay: int, iFirstWeek: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatDateTime(pvarIn: *s_tagVARIANT, iNamedFormat: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatNumber(pvarIn: *s_tagVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatPercent(pvarIn: *s_tagVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatCurrency(pvarIn: *s_tagVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarWeekdayName(iWeekday: int, fAbbrev: int, iFirstDay: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarMonthName(iMonth: int, fAbbrev: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatFromTokens(pvarIn: *s_tagVARIANT, pstrFormat: *ushort, pbTokCur: *uint8, dwFlags: ulong, pbstrOut: **ushort, lcid: ulong) -> long
export import def #extern #dllimport VarTokenizeFormatString(pstrFormat: *ushort, rgbTok: *uint8, cbTok: int, iFirstDay: int, iFirstWeek: int, lcid: ulong, pcbActual: *int) -> long
export import def #extern #dllimport LHashValOfNameSysA(syskind: e_tagSYSKIND, lcid: ulong, szName: *char) -> ulong
export import def #extern #dllimport LHashValOfNameSys(syskind: e_tagSYSKIND, lcid: ulong, szName: *ushort) -> ulong
export import def #extern #dllimport LoadTypeLib(szFile: *ushort, pptlib: **s_ITypeLib) -> long
export const REGKIND_DEFAULT: int = 0
export const REGKIND_REGISTER: int = 1
export const REGKIND_NONE: int = 2
export import def #extern #dllimport LoadTypeLibEx(szFile: *ushort, regkind: e_tagREGKIND, pptlib: **s_ITypeLib) -> long
export import def #extern #dllimport LoadRegTypeLib(rguid: *s__GUID, wVerMajor: ushort, wVerMinor: ushort, lcid: ulong, pptlib: **s_ITypeLib) -> long
export import def #extern #dllimport QueryPathOfRegTypeLib(guid: *s__GUID, wMaj: ushort, wMin: ushort, lcid: ulong, lpbstrPathName: **ushort) -> long
export import def #extern #dllimport RegisterTypeLib(ptlib: *s_ITypeLib, szFullPath: *ushort, szHelpDir: *ushort) -> long
export import def #extern #dllimport UnRegisterTypeLib(libID: *s__GUID, wVerMajor: ushort, wVerMinor: ushort, lcid: ulong, syskind: e_tagSYSKIND) -> long
export import def #extern #dllimport RegisterTypeLibForUser(ptlib: *s_ITypeLib, szFullPath: *ushort, szHelpDir: *ushort) -> long
export import def #extern #dllimport UnRegisterTypeLibForUser(libID: *s__GUID, wMajorVerNum: ushort, wMinorVerNum: ushort, lcid: ulong, syskind: e_tagSYSKIND) -> long
export import def #extern #dllimport CreateTypeLib(syskind: e_tagSYSKIND, szFile: *ushort, ppctlib: **s_ICreateTypeLib) -> long
export import def #extern #dllimport CreateTypeLib2(syskind: e_tagSYSKIND, szFile: *ushort, ppctlib: **s_ICreateTypeLib2) -> long
export import def #extern #dllimport DispGetParam(pdispparams: *s_tagDISPPARAMS, position: uint, vtTarg: ushort, pvarResult: *s_tagVARIANT, puArgErr: *uint) -> long
export import def #extern #dllimport DispGetIDsOfNames(ptinfo: *s_ITypeInfo, rgszNames: **ushort, cNames: uint, rgdispid: *long) -> long
export import def #extern #dllimport DispInvoke(_this: *, ptinfo: *s_ITypeInfo, dispidMember: long, wFlags: ushort, pparams: *s_tagDISPPARAMS, pvarResult: *s_tagVARIANT, pexcepinfo: *s_tagEXCEPINFO, puArgErr: *uint) -> long
export import def #extern #dllimport CreateDispTypeInfo(pidata: *s_tagINTERFACEDATA, lcid: ulong, pptinfo: **s_ITypeInfo) -> long
export import def #extern #dllimport CreateStdDispatch(punkOuter: *s_IUnknown, pvThis: *, ptinfo: *s_ITypeInfo, ppunkStdDisp: **s_IUnknown) -> long
export import def #extern #dllimport DispCallFunc(pvInstance: *, oVft: uint64, cc: e_tagCALLCONV, vtReturn: ushort, cActuals: uint, prgvt: *ushort, prgpvarg: **s_tagVARIANT, pvargResult: *s_tagVARIANT) -> long
export import def #extern #dllimport RegisterActiveObject(punk: *s_IUnknown, rclsid: *s__GUID, dwFlags: ulong, pdwRegister: *ulong) -> long
export import def #extern #dllimport RevokeActiveObject(dwRegister: ulong, pvReserved: *) -> long
export import def #extern #dllimport GetActiveObject(rclsid: *s__GUID, pvReserved: *, ppunk: **s_IUnknown) -> long
export import def #extern #dllimport SetErrorInfo(dwReserved: ulong, perrinfo: *s_IErrorInfo) -> long
export import def #extern #dllimport GetErrorInfo(dwReserved: ulong, pperrinfo: **s_IErrorInfo) -> long
export import def #extern #dllimport CreateErrorInfo(pperrinfo: **s_ICreateErrorInfo) -> long
export import def #extern #dllimport GetRecordInfoFromTypeInfo(pTypeInfo: *s_ITypeInfo, ppRecInfo: **s_IRecordInfo) -> long
export import def #extern #dllimport GetRecordInfoFromGuids(rGuidTypeLib: *s__GUID, uVerMajor: ulong, uVerMinor: ulong, lcid: ulong, rGuidTypeInfo: *s__GUID, ppRecInfo: **s_IRecordInfo) -> long
export import def #extern #dllimport OaBuildVersion() -> ulong
export import def #extern #dllimport ClearCustData(pCustData: *s_tagCUSTDATA)
export import def #extern #dllimport OaEnablePerUserTLibRegistration()
export import def #extern #dllimport OleBuildVersion() -> ulong
export import def #extern #dllimport WriteFmtUserTypeStg(pstg: *s_IStorage, cf: ushort, lpszUserType: *ushort) -> long
export import def #extern #dllimport ReadFmtUserTypeStg(pstg: *s_IStorage, pcf: *ushort, lplpszUserType: **ushort) -> long
export import def #extern #dllimport OleInitialize(pvReserved: *) -> long
export import def #extern #dllimport OleUninitialize()
export import def #extern #dllimport OleQueryLinkFromData(pSrcDataObject: *s_IDataObject) -> long
export import def #extern #dllimport OleQueryCreateFromData(pSrcDataObject: *s_IDataObject) -> long
export import def #extern #dllimport OleCreate(rclsid: *s__GUID, riid: *s__GUID, renderopt: ulong, pFormatEtc: *s_tagFORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateEx(rclsid: *s__GUID, riid: *s__GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *s_tagFORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateFromData(pSrcDataObj: *s_IDataObject, riid: *s__GUID, renderopt: ulong, pFormatEtc: *s_tagFORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateFromDataEx(pSrcDataObj: *s_IDataObject, riid: *s__GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *s_tagFORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkFromData(pSrcDataObj: *s_IDataObject, riid: *s__GUID, renderopt: ulong, pFormatEtc: *s_tagFORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkFromDataEx(pSrcDataObj: *s_IDataObject, riid: *s__GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *s_tagFORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateStaticFromData(pSrcDataObj: *s_IDataObject, iid: *s__GUID, renderopt: ulong, pFormatEtc: *s_tagFORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLink(pmkLinkSrc: *s_IMoniker, riid: *s__GUID, renderopt: ulong, lpFormatEtc: *s_tagFORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkEx(pmkLinkSrc: *s_IMoniker, riid: *s__GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *s_tagFORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkToFile(lpszFileName: *ushort, riid: *s__GUID, renderopt: ulong, lpFormatEtc: *s_tagFORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkToFileEx(lpszFileName: *ushort, riid: *s__GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *s_tagFORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateFromFile(rclsid: *s__GUID, lpszFileName: *ushort, riid: *s__GUID, renderopt: ulong, lpFormatEtc: *s_tagFORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateFromFileEx(rclsid: *s__GUID, lpszFileName: *ushort, riid: *s__GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *s_tagFORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleLoad(pStg: *s_IStorage, riid: *s__GUID, pClientSite: *s_IOleClientSite, ppvObj: **) -> long
export import def #extern #dllimport OleSave(pPS: *s_IPersistStorage, pStg: *s_IStorage, fSameAsLoad: int) -> long
export import def #extern #dllimport OleLoadFromStream(pStm: *s_IStream, iidInterface: *s__GUID, ppvObj: **) -> long
export import def #extern #dllimport OleSaveToStream(pPStm: *s_IPersistStream, pStm: *s_IStream) -> long
export import def #extern #dllimport OleSetContainedObject(pUnknown: *s_IUnknown, fContained: int) -> long
export import def #extern #dllimport OleNoteObjectVisible(pUnknown: *s_IUnknown, fVisible: int) -> long
export import def #extern #dllimport RegisterDragDrop(hwnd: *s_HWND__, pDropTarget: *s_IDropTarget) -> long
export import def #extern #dllimport RevokeDragDrop(hwnd: *s_HWND__) -> long
export import def #extern #dllimport DoDragDrop(pDataObj: *s_IDataObject, pDropSource: *s_IDropSource, dwOKEffects: ulong, pdwEffect: *ulong) -> long
export import def #extern #dllimport OleSetClipboard(pDataObj: *s_IDataObject) -> long
export import def #extern #dllimport OleGetClipboard(ppDataObj: **s_IDataObject) -> long
export import def #extern #dllimport OleGetClipboardWithEnterpriseInfo(dataObject: **s_IDataObject, dataEnterpriseId: **ushort, sourceDescription: **ushort, targetDescription: **ushort, dataDescription: **ushort) -> long
export import def #extern #dllimport OleFlushClipboard() -> long
export import def #extern #dllimport OleIsCurrentClipboard(pDataObj: *s_IDataObject) -> long
export import def #extern #dllimport OleCreateMenuDescriptor(hmenuCombined: *s_HMENU__, lpMenuWidths: *s_tagOleMenuGroupWidths) -> *
export import def #extern #dllimport OleSetMenuDescriptor(holemenu: *, hwndFrame: *s_HWND__, hwndActiveObject: *s_HWND__, lpFrame: *s_IOleInPlaceFrame, lpActiveObj: *s_IOleInPlaceActiveObject) -> long
export import def #extern #dllimport OleDestroyMenuDescriptor(holemenu: *) -> long
export import def #extern #dllimport OleTranslateAccelerator(lpFrame: *s_IOleInPlaceFrame, lpFrameInfo: *s_tagOIFI, lpmsg: *s_tagMSG) -> long
export import def #extern #dllimport OleDuplicateData(hSrc: *, cfFormat: ushort, uiFlags: uint) -> *
export import def #extern #dllimport OleDraw(pUnknown: *s_IUnknown, dwAspect: ulong, hdcDraw: *s_HDC__, lprcBounds: *s_tagRECT) -> long
export import def #extern #dllimport OleRun(pUnknown: *s_IUnknown) -> long
export import def #extern #dllimport OleIsRunning(pObject: *s_IOleObject) -> int
export import def #extern #dllimport OleLockRunning(pUnknown: *s_IUnknown, fLock: int, fLastUnlockCloses: int) -> long
export import def #extern #dllimport ReleaseStgMedium(_0: *s_tagSTGMEDIUM)
export import def #extern #dllimport CreateOleAdviseHolder(ppOAHolder: **s_IOleAdviseHolder) -> long
export import def #extern #dllimport OleCreateDefaultHandler(clsid: *s__GUID, pUnkOuter: *s_IUnknown, riid: *s__GUID, lplpObj: **) -> long
export import def #extern #dllimport OleCreateEmbeddingHelper(clsid: *s__GUID, pUnkOuter: *s_IUnknown, flags: ulong, pCF: *s_IClassFactory, riid: *s__GUID, lplpObj: **) -> long
export import def #extern #dllimport IsAccelerator(hAccel: *s_HACCEL__, cAccelEntries: int, lpMsg: *s_tagMSG, lpwCmd: *ushort) -> int
export import def #extern #dllimport OleGetIconOfFile(lpszPath: *ushort, fUseFileAsLabel: int) -> *
export import def #extern #dllimport OleGetIconOfClass(rclsid: *s__GUID, lpszLabel: *ushort, fUseTypeAsLabel: int) -> *
export import def #extern #dllimport OleMetafilePictFromIconAndLabel(hIcon: *s_HICON__, lpszLabel: *ushort, lpszSourceFile: *ushort, iIconIndex: uint) -> *
export import def #extern #dllimport OleRegGetUserType(clsid: *s__GUID, dwFormOfType: ulong, pszUserType: **ushort) -> long
export import def #extern #dllimport OleRegGetMiscStatus(clsid: *s__GUID, dwAspect: ulong, pdwStatus: *ulong) -> long
export import def #extern #dllimport OleRegEnumFormatEtc(clsid: *s__GUID, dwDirection: ulong, ppenum: **s_IEnumFORMATETC) -> long
export import def #extern #dllimport OleRegEnumVerbs(clsid: *s__GUID, ppenum: **s_IEnumOLEVERB) -> long
export import def #extern #dllimport OleConvertOLESTREAMToIStorage(lpolestream: *s__OLESTREAM, pstg: *s_IStorage, ptd: *s_tagDVTARGETDEVICE) -> long
export import def #extern #dllimport OleConvertIStorageToOLESTREAM(pstg: *s_IStorage, lpolestream: *s__OLESTREAM) -> long
export import def #extern #dllimport OleDoAutoConvert(pStg: *s_IStorage, pClsidNew: *s__GUID) -> long
export import def #extern #dllimport OleGetAutoConvert(clsidOld: *s__GUID, pClsidNew: *s__GUID) -> long
export import def #extern #dllimport OleSetAutoConvert(clsidOld: *s__GUID, clsidNew: *s__GUID) -> long
export import def #extern #dllimport SetConvertStg(pStg: *s_IStorage, fConvert: int) -> long
export import def #extern #dllimport OleConvertIStorageToOLESTREAMEx(pstg: *s_IStorage, cfFormat: ushort, lWidth: long, lHeight: long, dwSize: ulong, pmedium: *s_tagSTGMEDIUM, polestm: *s__OLESTREAM) -> long
export import def #extern #dllimport OleConvertOLESTREAMToIStorageEx(polestm: *s__OLESTREAM, pstg: *s_IStorage, pcfFormat: *ushort, plwWidth: *long, plHeight: *long, pdwSize: *ulong, pmedium: *s_tagSTGMEDIUM) -> long
export import var #extern IID_IPrintDialogCallback: s__GUID
export import var #extern IID_IPrintDialogServices: s__GUID
export import def #extern #dllimport GetOpenFileNameA(_0: *s_tagOFNA) -> int
export import def #extern #dllimport GetOpenFileNameW(_0: *s_tagOFNW) -> int
export import def #extern #dllimport GetSaveFileNameA(_0: *s_tagOFNA) -> int
export import def #extern #dllimport GetSaveFileNameW(_0: *s_tagOFNW) -> int
export import def #extern #dllimport GetFileTitleA(_0: *char, Buf: *char, cchSize: ushort) -> short
export import def #extern #dllimport GetFileTitleW(_0: *ushort, Buf: *ushort, cchSize: ushort) -> short
export import def #extern #dllimport ChooseColorA(_0: *s_tagCHOOSECOLORA) -> int
export import def #extern #dllimport ChooseColorW(_0: *s_tagCHOOSECOLORW) -> int
export import def #extern #dllimport FindTextA(_0: *s_tagFINDREPLACEA) -> *s_HWND__
export import def #extern #dllimport FindTextW(_0: *s_tagFINDREPLACEW) -> *s_HWND__
export import def #extern #dllimport ReplaceTextA(_0: *s_tagFINDREPLACEA) -> *s_HWND__
export import def #extern #dllimport ReplaceTextW(_0: *s_tagFINDREPLACEW) -> *s_HWND__
export import def #extern #dllimport ChooseFontA(_0: *s_tagCHOOSEFONTA) -> int
export import def #extern #dllimport ChooseFontW(_0: *s_tagCHOOSEFONTW) -> int
export import def #extern #dllimport PrintDlgA(pPD: *s_tagPDA) -> int
export import def #extern #dllimport PrintDlgW(pPD: *s_tagPDW) -> int
export import def #extern #dllimport PrintDlgExA(pPD: *s_tagPDEXA) -> long
export import def #extern #dllimport PrintDlgExW(pPD: *s_tagPDEXW) -> long
export import def #extern #dllimport CommDlgExtendedError() -> ulong
export import def #extern #dllimport PageSetupDlgA(_0: *s_tagPSDA) -> int
export import def #extern #dllimport PageSetupDlgW(_0: *s_tagPSDW) -> int
export import def #extern uaw_CharUpperW(String: *ushort) -> *ushort
export import def #extern uaw_lstrcmpW(String1: *ushort, String2: *ushort) -> int
export import def #extern uaw_lstrcmpiW(String1: *ushort, String2: *ushort) -> int
export import def #extern uaw_lstrlenW(String: *ushort) -> int
export import def #extern uaw_wcschr(String: *ushort, Character: ushort) -> *ushort
export import def #extern uaw_wcscpy(Destination: *ushort, Source: *ushort) -> *ushort
export import def #extern uaw_wcsicmp(String1: *ushort, String2: *ushort) -> int
export import def #extern uaw_wcslen(String: *ushort) -> uint64
export import def #extern uaw_wcsrchr(String: *ushort, Character: ushort) -> *ushort
export import def #extern ua_CharUpperW(String: *ushort) -> *ushort
export import def #extern ua_lstrcmpW(String1: *ushort, String2: *ushort) -> int
export import def #extern ua_lstrcmpiW(String1: *ushort, String2: *ushort) -> int
export import def #extern ua_lstrlenW(String: *ushort) -> int
export import def #extern ua_wcschr(String: *ushort, Character: ushort) -> *ushort
export import def #extern ua_wcsrchr(String: *ushort, Character: ushort) -> *ushort
export import def #extern ua_wcscpy(Destination: *ushort, Source: *ushort) -> *ushort
export import def #extern ua_wcscpy_s(Destination: *ushort, DestinationSize: uint64, Source: *ushort) -> *ushort
export import def #extern ua_wcslen(String: *ushort) -> uint64
export import def #extern ua_wcsicmp(String1: *ushort, String2: *ushort) -> int
export import var #extern NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID: s__GUID
export import var #extern NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID: s__GUID
export import var #extern DOMAIN_JOIN_GUID: s__GUID
export import var #extern DOMAIN_LEAVE_GUID: s__GUID
export import var #extern FIREWALL_PORT_OPEN_GUID: s__GUID
export import var #extern FIREWALL_PORT_CLOSE_GUID: s__GUID
export import var #extern MACHINE_POLICY_PRESENT_GUID: s__GUID
export import var #extern USER_POLICY_PRESENT_GUID: s__GUID
export import var #extern RPC_INTERFACE_EVENT_GUID: s__GUID
export import var #extern NAMED_PIPE_EVENT_GUID: s__GUID
export import var #extern CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID: s__GUID
export const SC_ACTION_NONE: int = 0
export const SC_ACTION_RESTART: int = 1
export const SC_ACTION_REBOOT: int = 2
export const SC_ACTION_RUN_COMMAND: int = 3
export const SC_ACTION_OWN_RESTART: int = 4
export const SC_STATUS_PROCESS_INFO: int = 0
export const SC_ENUM_PROCESS_INFO: int = 0
export import def #extern #dllimport ChangeServiceConfigA(hService: *s_SC_HANDLE__, dwServiceType: ulong, dwStartType: ulong, dwErrorControl: ulong, lpBinaryPathName: *char, lpLoadOrderGroup: *char, lpdwTagId: *ulong, lpDependencies: *char, lpServiceStartName: *char, lpPassword: *char, lpDisplayName: *char) -> int
export import def #extern #dllimport ChangeServiceConfigW(hService: *s_SC_HANDLE__, dwServiceType: ulong, dwStartType: ulong, dwErrorControl: ulong, lpBinaryPathName: *ushort, lpLoadOrderGroup: *ushort, lpdwTagId: *ulong, lpDependencies: *ushort, lpServiceStartName: *ushort, lpPassword: *ushort, lpDisplayName: *ushort) -> int
export import def #extern #dllimport ChangeServiceConfig2A(hService: *s_SC_HANDLE__, dwInfoLevel: ulong, lpInfo: *) -> int
export import def #extern #dllimport ChangeServiceConfig2W(hService: *s_SC_HANDLE__, dwInfoLevel: ulong, lpInfo: *) -> int
export import def #extern #dllimport CloseServiceHandle(hSCObject: *s_SC_HANDLE__) -> int
export import def #extern #dllimport ControlService(hService: *s_SC_HANDLE__, dwControl: ulong, lpServiceStatus: *s__SERVICE_STATUS) -> int
export import def #extern #dllimport CreateServiceA(hSCManager: *s_SC_HANDLE__, lpServiceName: *char, lpDisplayName: *char, dwDesiredAccess: ulong, dwServiceType: ulong, dwStartType: ulong, dwErrorControl: ulong, lpBinaryPathName: *char, lpLoadOrderGroup: *char, lpdwTagId: *ulong, lpDependencies: *char, lpServiceStartName: *char, lpPassword: *char) -> *s_SC_HANDLE__
export import def #extern #dllimport CreateServiceW(hSCManager: *s_SC_HANDLE__, lpServiceName: *ushort, lpDisplayName: *ushort, dwDesiredAccess: ulong, dwServiceType: ulong, dwStartType: ulong, dwErrorControl: ulong, lpBinaryPathName: *ushort, lpLoadOrderGroup: *ushort, lpdwTagId: *ulong, lpDependencies: *ushort, lpServiceStartName: *ushort, lpPassword: *ushort) -> *s_SC_HANDLE__
export import def #extern #dllimport DeleteService(hService: *s_SC_HANDLE__) -> int
export import def #extern #dllimport EnumDependentServicesA(hService: *s_SC_HANDLE__, dwServiceState: ulong, lpServices: *s__ENUM_SERVICE_STATUSA, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong) -> int
export import def #extern #dllimport EnumDependentServicesW(hService: *s_SC_HANDLE__, dwServiceState: ulong, lpServices: *s__ENUM_SERVICE_STATUSW, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong) -> int
export import def #extern #dllimport EnumServicesStatusA(hSCManager: *s_SC_HANDLE__, dwServiceType: ulong, dwServiceState: ulong, lpServices: *s__ENUM_SERVICE_STATUSA, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong, lpResumeHandle: *ulong) -> int
export import def #extern #dllimport EnumServicesStatusW(hSCManager: *s_SC_HANDLE__, dwServiceType: ulong, dwServiceState: ulong, lpServices: *s__ENUM_SERVICE_STATUSW, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong, lpResumeHandle: *ulong) -> int
export import def #extern #dllimport EnumServicesStatusExA(hSCManager: *s_SC_HANDLE__, InfoLevel: e__SC_ENUM_TYPE, dwServiceType: ulong, dwServiceState: ulong, lpServices: *uint8, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong, lpResumeHandle: *ulong, pszGroupName: *char) -> int
export import def #extern #dllimport EnumServicesStatusExW(hSCManager: *s_SC_HANDLE__, InfoLevel: e__SC_ENUM_TYPE, dwServiceType: ulong, dwServiceState: ulong, lpServices: *uint8, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong, lpResumeHandle: *ulong, pszGroupName: *ushort) -> int
export import def #extern #dllimport GetServiceKeyNameA(hSCManager: *s_SC_HANDLE__, lpDisplayName: *char, lpServiceName: *char, lpcchBuffer: *ulong) -> int
export import def #extern #dllimport GetServiceKeyNameW(hSCManager: *s_SC_HANDLE__, lpDisplayName: *ushort, lpServiceName: *ushort, lpcchBuffer: *ulong) -> int
export import def #extern #dllimport GetServiceDisplayNameA(hSCManager: *s_SC_HANDLE__, lpServiceName: *char, lpDisplayName: *char, lpcchBuffer: *ulong) -> int
export import def #extern #dllimport GetServiceDisplayNameW(hSCManager: *s_SC_HANDLE__, lpServiceName: *ushort, lpDisplayName: *ushort, lpcchBuffer: *ulong) -> int
export import def #extern #dllimport LockServiceDatabase(hSCManager: *s_SC_HANDLE__) -> *
export import def #extern #dllimport NotifyBootConfigStatus(BootAcceptable: int) -> int
export import def #extern #dllimport OpenSCManagerA(lpMachineName: *char, lpDatabaseName: *char, dwDesiredAccess: ulong) -> *s_SC_HANDLE__
export import def #extern #dllimport OpenSCManagerW(lpMachineName: *ushort, lpDatabaseName: *ushort, dwDesiredAccess: ulong) -> *s_SC_HANDLE__
export import def #extern #dllimport OpenServiceA(hSCManager: *s_SC_HANDLE__, lpServiceName: *char, dwDesiredAccess: ulong) -> *s_SC_HANDLE__
export import def #extern #dllimport OpenServiceW(hSCManager: *s_SC_HANDLE__, lpServiceName: *ushort, dwDesiredAccess: ulong) -> *s_SC_HANDLE__
export import def #extern #dllimport QueryServiceConfigA(hService: *s_SC_HANDLE__, lpServiceConfig: *s__QUERY_SERVICE_CONFIGA, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceConfigW(hService: *s_SC_HANDLE__, lpServiceConfig: *s__QUERY_SERVICE_CONFIGW, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceConfig2A(hService: *s_SC_HANDLE__, dwInfoLevel: ulong, lpBuffer: *uint8, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceConfig2W(hService: *s_SC_HANDLE__, dwInfoLevel: ulong, lpBuffer: *uint8, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceLockStatusA(hSCManager: *s_SC_HANDLE__, lpLockStatus: *s__QUERY_SERVICE_LOCK_STATUSA, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceLockStatusW(hSCManager: *s_SC_HANDLE__, lpLockStatus: *s__QUERY_SERVICE_LOCK_STATUSW, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceObjectSecurity(hService: *s_SC_HANDLE__, dwSecurityInformation: ulong, lpSecurityDescriptor: *, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceStatus(hService: *s_SC_HANDLE__, lpServiceStatus: *s__SERVICE_STATUS) -> int
export import def #extern #dllimport QueryServiceStatusEx(hService: *s_SC_HANDLE__, InfoLevel: e__SC_STATUS_TYPE, lpBuffer: *uint8, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport RegisterServiceCtrlHandlerA(lpServiceName: *char, lpHandlerProc: def (ulong) -> ()) -> *s_SERVICE_STATUS_HANDLE__
export import def #extern #dllimport RegisterServiceCtrlHandlerW(lpServiceName: *ushort, lpHandlerProc: def (ulong) -> ()) -> *s_SERVICE_STATUS_HANDLE__
export import def #extern #dllimport RegisterServiceCtrlHandlerExA(lpServiceName: *char, lpHandlerProc: def (ulong, ulong, *, *) -> (ulong), lpContext: *) -> *s_SERVICE_STATUS_HANDLE__
export import def #extern #dllimport RegisterServiceCtrlHandlerExW(lpServiceName: *ushort, lpHandlerProc: def (ulong, ulong, *, *) -> (ulong), lpContext: *) -> *s_SERVICE_STATUS_HANDLE__
export import def #extern #dllimport SetServiceObjectSecurity(hService: *s_SC_HANDLE__, dwSecurityInformation: ulong, lpSecurityDescriptor: *) -> int
export import def #extern #dllimport SetServiceStatus(hServiceStatus: *s_SERVICE_STATUS_HANDLE__, lpServiceStatus: *s__SERVICE_STATUS) -> int
export import def #extern #dllimport StartServiceCtrlDispatcherA(lpServiceStartTable: *s__SERVICE_TABLE_ENTRYA) -> int
export import def #extern #dllimport StartServiceCtrlDispatcherW(lpServiceStartTable: *s__SERVICE_TABLE_ENTRYW) -> int
export import def #extern #dllimport StartServiceA(hService: *s_SC_HANDLE__, dwNumServiceArgs: ulong, lpServiceArgVectors: **char) -> int
export import def #extern #dllimport StartServiceW(hService: *s_SC_HANDLE__, dwNumServiceArgs: ulong, lpServiceArgVectors: **ushort) -> int
export import def #extern #dllimport UnlockServiceDatabase(ScLock: *) -> int
export import def #extern #dllimport NotifyServiceStatusChangeA(hService: *s_SC_HANDLE__, dwNotifyMask: ulong, pNotifyBuffer: *s__SERVICE_NOTIFY_2A) -> ulong
export import def #extern #dllimport NotifyServiceStatusChangeW(hService: *s_SC_HANDLE__, dwNotifyMask: ulong, pNotifyBuffer: *s__SERVICE_NOTIFY_2W) -> ulong
export import def #extern #dllimport ControlServiceExA(hService: *s_SC_HANDLE__, dwControl: ulong, dwInfoLevel: ulong, pControlParams: *) -> int
export import def #extern #dllimport ControlServiceExW(hService: *s_SC_HANDLE__, dwControl: ulong, dwInfoLevel: ulong, pControlParams: *) -> int
export import def #extern #dllimport QueryServiceDynamicInformation(hServiceStatus: *s_SERVICE_STATUS_HANDLE__, dwInfoLevel: ulong, ppDynamicInfo: **) -> int
export const SC_EVENT_DATABASE_CHANGE: int = 0
export const SC_EVENT_PROPERTY_CHANGE: int = 1
export const SC_EVENT_STATUS_CHANGE: int = 2
export import def #extern #dllimport SubscribeServiceChangeNotifications(hService: *s_SC_HANDLE__, eEventType: e__SC_EVENT_TYPE, pCallback: def (ulong, *) -> (), pCallbackContext: *, pSubscription: **s__SC_NOTIFICATION_REGISTRATION) -> ulong
export import def #extern #dllimport UnsubscribeServiceChangeNotifications(pSubscription: *s__SC_NOTIFICATION_REGISTRATION)
export import def #extern #dllimport WaitServiceState(hService: *s_SC_HANDLE__, dwNotify: ulong, dwTimeout: ulong, hCancelEvent: *) -> ulong
export const ServiceRegistryStateParameters: int = 0
export const ServiceRegistryStatePersistent: int = 1
export const MaxServiceRegistryStateType: int = 2
export import def #extern GetServiceRegistryStateKey(ServiceStatusHandle: *s_SERVICE_STATUS_HANDLE__, StateType: e_SERVICE_REGISTRY_STATE_TYPE, AccessMask: ulong, ServiceStateKey: **s_HKEY__) -> ulong
export const ServiceDirectoryPersistentState: int = 0
export const ServiceDirectoryTypeMax: int = 1
export import def #extern GetServiceDirectory(hServiceStatus: *s_SERVICE_STATUS_HANDLE__, eDirectoryType: e_SERVICE_DIRECTORY_TYPE, lpPathBuffer: *ushort, cchPathBufferLength: ulong, lpcchRequiredBufferLength: *ulong) -> ulong
export const ServiceSharedRegistryPersistentState: int = 0
export import def #extern GetSharedServiceRegistryStateKey(ServiceHandle: *s_SC_HANDLE__, StateType: e_SERVICE_SHARED_REGISTRY_STATE_TYPE, AccessMask: ulong, ServiceStateKey: **s_HKEY__) -> ulong
export const ServiceSharedDirectoryPersistentState: int = 0
export import def #extern GetSharedServiceDirectory(ServiceHandle: *s_SC_HANDLE__, DirectoryType: e_SERVICE_SHARED_DIRECTORY_TYPE, PathBuffer: *ushort, PathBufferLength: ulong, RequiredBufferLength: *ulong) -> ulong
export import def #extern ImmInstallIMEA(lpszIMEFileName: *char, lpszLayoutText: *char) -> *s_HKL__
export import def #extern ImmInstallIMEW(lpszIMEFileName: *ushort, lpszLayoutText: *ushort) -> *s_HKL__
export import def #extern ImmGetDefaultIMEWnd(_0: *s_HWND__) -> *s_HWND__
export import def #extern ImmGetDescriptionA(_0: *s_HKL__, lpszDescription: *char, uBufLen: uint) -> uint
export import def #extern ImmGetDescriptionW(_0: *s_HKL__, lpszDescription: *ushort, uBufLen: uint) -> uint
export import def #extern ImmGetIMEFileNameA(_0: *s_HKL__, lpszFileName: *char, uBufLen: uint) -> uint
export import def #extern ImmGetIMEFileNameW(_0: *s_HKL__, lpszFileName: *ushort, uBufLen: uint) -> uint
export import def #extern ImmGetProperty(_0: *s_HKL__, _1: ulong) -> ulong
export import def #extern ImmIsIME(_0: *s_HKL__) -> int
export import def #extern ImmSimulateHotKey(_0: *s_HWND__, _1: ulong) -> int
export import def #extern ImmCreateContext() -> *s_HIMC__
export import def #extern ImmDestroyContext(_0: *s_HIMC__) -> int
export import def #extern ImmGetContext(_0: *s_HWND__) -> *s_HIMC__
export import def #extern ImmReleaseContext(_0: *s_HWND__, _1: *s_HIMC__) -> int
export import def #extern ImmAssociateContext(_0: *s_HWND__, _1: *s_HIMC__) -> *s_HIMC__
export import def #extern ImmAssociateContextEx(_0: *s_HWND__, _1: *s_HIMC__, _2: ulong) -> int
export import def #extern ImmGetCompositionStringA(_0: *s_HIMC__, _1: ulong, lpBuf: *, dwBufLen: ulong) -> long
export import def #extern ImmGetCompositionStringW(_0: *s_HIMC__, _1: ulong, lpBuf: *, dwBufLen: ulong) -> long
export import def #extern ImmSetCompositionStringA(_0: *s_HIMC__, dwIndex: ulong, lpComp: *, dwCompLen: ulong, lpRead: *, dwReadLen: ulong) -> int
export import def #extern ImmSetCompositionStringW(_0: *s_HIMC__, dwIndex: ulong, lpComp: *, dwCompLen: ulong, lpRead: *, dwReadLen: ulong) -> int
export import def #extern ImmGetCandidateListCountA(_0: *s_HIMC__, lpdwListCount: *ulong) -> ulong
export import def #extern ImmGetCandidateListCountW(_0: *s_HIMC__, lpdwListCount: *ulong) -> ulong
export import def #extern ImmGetCandidateListA(_0: *s_HIMC__, deIndex: ulong, lpCandList: *s_tagCANDIDATELIST, dwBufLen: ulong) -> ulong
export import def #extern ImmGetCandidateListW(_0: *s_HIMC__, deIndex: ulong, lpCandList: *s_tagCANDIDATELIST, dwBufLen: ulong) -> ulong
export import def #extern ImmGetGuideLineA(_0: *s_HIMC__, dwIndex: ulong, lpBuf: *char, dwBufLen: ulong) -> ulong
export import def #extern ImmGetGuideLineW(_0: *s_HIMC__, dwIndex: ulong, lpBuf: *ushort, dwBufLen: ulong) -> ulong
export import def #extern ImmGetConversionStatus(_0: *s_HIMC__, lpfdwConversion: *ulong, lpfdwSentence: *ulong) -> int
export import def #extern ImmSetConversionStatus(_0: *s_HIMC__, _1: ulong, _2: ulong) -> int
export import def #extern ImmGetOpenStatus(_0: *s_HIMC__) -> int
export import def #extern ImmSetOpenStatus(_0: *s_HIMC__, _1: int) -> int
export import def #extern ImmGetCompositionFontA(_0: *s_HIMC__, lplf: *s_tagLOGFONTA) -> int
export import def #extern ImmGetCompositionFontW(_0: *s_HIMC__, lplf: *s_tagLOGFONTW) -> int
export import def #extern ImmSetCompositionFontA(_0: *s_HIMC__, lplf: *s_tagLOGFONTA) -> int
export import def #extern ImmSetCompositionFontW(_0: *s_HIMC__, lplf: *s_tagLOGFONTW) -> int
export import def #extern ImmConfigureIMEA(_0: *s_HKL__, _1: *s_HWND__, _2: ulong, _3: *) -> int
export import def #extern ImmConfigureIMEW(_0: *s_HKL__, _1: *s_HWND__, _2: ulong, _3: *) -> int
export import def #extern ImmEscapeA(_0: *s_HKL__, _1: *s_HIMC__, _2: uint, _3: *) -> int64
export import def #extern ImmEscapeW(_0: *s_HKL__, _1: *s_HIMC__, _2: uint, _3: *) -> int64
export import def #extern ImmGetConversionListA(_0: *s_HKL__, _1: *s_HIMC__, lpSrc: *char, lpDst: *s_tagCANDIDATELIST, dwBufLen: ulong, uFlag: uint) -> ulong
export import def #extern ImmGetConversionListW(_0: *s_HKL__, _1: *s_HIMC__, lpSrc: *ushort, lpDst: *s_tagCANDIDATELIST, dwBufLen: ulong, uFlag: uint) -> ulong
export import def #extern ImmNotifyIME(_0: *s_HIMC__, dwAction: ulong, dwIndex: ulong, dwValue: ulong) -> int
export import def #extern ImmGetStatusWindowPos(_0: *s_HIMC__, lpptPos: *s_tagPOINT) -> int
export import def #extern ImmSetStatusWindowPos(_0: *s_HIMC__, lpptPos: *s_tagPOINT) -> int
export import def #extern ImmGetCompositionWindow(_0: *s_HIMC__, lpCompForm: *s_tagCOMPOSITIONFORM) -> int
export import def #extern ImmSetCompositionWindow(_0: *s_HIMC__, lpCompForm: *s_tagCOMPOSITIONFORM) -> int
export import def #extern ImmGetCandidateWindow(_0: *s_HIMC__, _1: ulong, lpCandidate: *s_tagCANDIDATEFORM) -> int
export import def #extern ImmSetCandidateWindow(_0: *s_HIMC__, lpCandidate: *s_tagCANDIDATEFORM) -> int
export import def #extern ImmIsUIMessageA(_0: *s_HWND__, _1: uint, _2: uint64, _3: int64) -> int
export import def #extern ImmIsUIMessageW(_0: *s_HWND__, _1: uint, _2: uint64, _3: int64) -> int
export import def #extern ImmGetVirtualKey(_0: *s_HWND__) -> uint
export import def #extern ImmRegisterWordA(_0: *s_HKL__, lpszReading: *char, _2: ulong, lpszRegister: *char) -> int
export import def #extern ImmRegisterWordW(_0: *s_HKL__, lpszReading: *ushort, _2: ulong, lpszRegister: *ushort) -> int
export import def #extern ImmUnregisterWordA(_0: *s_HKL__, lpszReading: *char, _2: ulong, lpszUnregister: *char) -> int
export import def #extern ImmUnregisterWordW(_0: *s_HKL__, lpszReading: *ushort, _2: ulong, lpszUnregister: *ushort) -> int
export import def #extern ImmGetRegisterWordStyleA(_0: *s_HKL__, nItem: uint, lpStyleBuf: *s_tagSTYLEBUFA) -> uint
export import def #extern ImmGetRegisterWordStyleW(_0: *s_HKL__, nItem: uint, lpStyleBuf: *s_tagSTYLEBUFW) -> uint
export import def #extern ImmEnumRegisterWordA(_0: *s_HKL__, _1: def (*char, ulong, *char, *) -> (int), lpszReading: *char, _3: ulong, lpszRegister: *char, _5: *) -> uint
export import def #extern ImmEnumRegisterWordW(_0: *s_HKL__, _1: def (*ushort, ulong, *ushort, *) -> (int), lpszReading: *ushort, _3: ulong, lpszRegister: *ushort, _5: *) -> uint
export import def #extern ImmDisableIME(_0: ulong) -> int
export import def #extern ImmEnumInputContext(idThread: ulong, lpfn: def (*s_HIMC__, int64) -> (int), lParam: int64) -> int
export import def #extern ImmGetImeMenuItemsA(_0: *s_HIMC__, _1: ulong, _2: ulong, lpImeParentMenu: *s_tagIMEMENUITEMINFOA, lpImeMenu: *s_tagIMEMENUITEMINFOA, dwSize: ulong) -> ulong
export import def #extern ImmGetImeMenuItemsW(_0: *s_HIMC__, _1: ulong, _2: ulong, lpImeParentMenu: *s_tagIMEMENUITEMINFOW, lpImeMenu: *s_tagIMEMENUITEMINFOW, dwSize: ulong) -> ulong
export import def #extern ImmDisableTextFrameService(idThread: ulong) -> int
export import def #extern ImmDisableLegacyIME() -> int
export import def #extern #dllimport SymFindDebugInfoFile(hProcess: *, FileName: *char, DebugFilePath: *char, Callback: def (*, *char, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport SymFindDebugInfoFileW(hProcess: *, FileName: *ushort, DebugFilePath: *ushort, Callback: def (*, *ushort, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport FindDebugInfoFile(FileName: *char, SymbolPath: *char, DebugFilePath: *char) -> *
export import def #extern #dllimport FindDebugInfoFileEx(FileName: *char, SymbolPath: *char, DebugFilePath: *char, Callback: def (*, *char, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport FindDebugInfoFileExW(FileName: *ushort, SymbolPath: *ushort, DebugFilePath: *ushort, Callback: def (*, *ushort, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport SymFindFileInPath(hprocess: *, SearchPathA: *char, FileName: *char, id: *, two: ulong, three: ulong, flags: ulong, FoundFile: *char, callback: def (*char, *) -> (int), context: *) -> int
export import def #extern #dllimport SymFindFileInPathW(hprocess: *, SearchPathA: *ushort, FileName: *ushort, id: *, two: ulong, three: ulong, flags: ulong, FoundFile: *ushort, callback: def (*ushort, *) -> (int), context: *) -> int
export import def #extern #dllimport SymFindExecutableImage(hProcess: *, FileName: *char, ImageFilePath: *char, Callback: def (*, *char, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport SymFindExecutableImageW(hProcess: *, FileName: *ushort, ImageFilePath: *ushort, Callback: def (*, *ushort, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport FindExecutableImage(FileName: *char, SymbolPath: *char, ImageFilePath: *char) -> *
export import def #extern #dllimport FindExecutableImageEx(FileName: *char, SymbolPath: *char, ImageFilePath: *char, Callback: def (*, *char, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport FindExecutableImageExW(FileName: *ushort, SymbolPath: *ushort, ImageFilePath: *ushort, Callback: def (*, *ushort, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport ImageNtHeader(Base: *) -> *s__IMAGE_NT_HEADERS64
export import def #extern #dllimport ImageDirectoryEntryToDataEx(Base: *, MappedAsImage: uint8, DirectoryEntry: ushort, Size: *ulong, FoundHeader: **s__IMAGE_SECTION_HEADER) -> *
export import def #extern #dllimport ImageDirectoryEntryToData(Base: *, MappedAsImage: uint8, DirectoryEntry: ushort, Size: *ulong) -> *
export import def #extern #dllimport ImageRvaToSection(NtHeaders: *s__IMAGE_NT_HEADERS64, Base: *, Rva: ulong) -> *s__IMAGE_SECTION_HEADER
export import def #extern #dllimport ImageRvaToVa(NtHeaders: *s__IMAGE_NT_HEADERS64, Base: *, Rva: ulong, LastRvaSection: **s__IMAGE_SECTION_HEADER) -> *
export import def #extern #dllimport SearchTreeForFile(RootPath: *char, InputPathName: *char, OutputPathBuffer: *char) -> int
export import def #extern #dllimport SearchTreeForFileW(RootPath: *ushort, InputPathName: *ushort, OutputPathBuffer: *ushort) -> int
export import def #extern #dllimport EnumDirTree(hProcess: *, RootPath: *char, InputPathName: *char, OutputPathBuffer: *char, cb: def (*char, *) -> (int), data: *) -> int
export import def #extern #dllimport EnumDirTreeW(hProcess: *, RootPath: *ushort, InputPathName: *ushort, OutputPathBuffer: *ushort, cb: def (*ushort, *) -> (int), data: *) -> int
export import def #extern #dllimport MakeSureDirectoryPathExists(DirPath: *char) -> int
export import def #extern #dllimport UnDecorateSymbolName(name: *char, outputString: *char, maxStringLength: ulong, flags: ulong) -> ulong
export import def #extern #dllimport UnDecorateSymbolNameW(name: *ushort, outputString: *ushort, maxStringLength: ulong, flags: ulong) -> ulong
export const AddrMode1616: int = 0
export const AddrMode1632: int = 1
export const AddrModeReal: int = 2
export const AddrModeFlat: int = 3
export import def #extern KdHelp32To64(p32: *s__KDHELP64, p64: *s__KDHELP64)
export import def #extern #dllimport StackWalk64(MachineType: ulong, hProcess: *, hThread: *, StackFrame: *s__tagSTACKFRAME64, ContextRecord: *, ReadMemoryRoutine: def (*, uint64, *, ulong, *ulong) -> (int), FunctionTableAccessRoutine: def (*, uint64) -> (*), GetModuleBaseRoutine: def (*, uint64) -> (uint64), TranslateAddress: def (*, *, *s__tagADDRESS64) -> (uint64)) -> int
export import def #extern #dllimport StackWalkEx(MachineType: ulong, hProcess: *, hThread: *, StackFrame: *s__tagSTACKFRAME_EX, ContextRecord: *, ReadMemoryRoutine: def (*, uint64, *, ulong, *ulong) -> (int), FunctionTableAccessRoutine: def (*, uint64) -> (*), GetModuleBaseRoutine: def (*, uint64) -> (uint64), TranslateAddress: def (*, *, *s__tagADDRESS64) -> (uint64), Flags: ulong) -> int
export import def #extern #dllimport ImagehlpApiVersion() -> *s_API_VERSION
export import def #extern #dllimport ImagehlpApiVersionEx(AppVersion: *s_API_VERSION) -> *s_API_VERSION
export import def #extern #dllimport GetTimestampForLoadedLibrary(Module: *s_HINSTANCE__) -> ulong
export const SymNone: int = 0
export const SymCoff: int = 1
export const SymCv: int = 2
export const SymPdb: int = 3
export const SymExport: int = 4
export const SymDeferred: int = 5
export const SymSym: int = 6
export const SymDia: int = 7
export const SymVirtual: int = 8
export const NumSymTypes: int = 9
export const sevInfo: int = 0
export const sevProblem: int = 1
export const sevAttn: int = 2
export const sevFatal: int = 3
export const sevMax: int = 4
export import def #extern #dllimport SymSetParentWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport SymSetHomeDirectory(hProcess: *, dir: *char) -> *char
export import def #extern #dllimport SymSetHomeDirectoryW(hProcess: *, dir: *ushort) -> *ushort
export import def #extern #dllimport SymGetHomeDirectory(type_: ulong, dir: *char, size: uint64) -> *char
export import def #extern #dllimport SymGetHomeDirectoryW(type_: ulong, dir: *ushort, size: uint64) -> *ushort
export const hdBase: int = 0
export const hdSym: int = 1
export const hdSrc: int = 2
export const hdMax: int = 3
export import def #extern #dllimport SymGetOmaps(hProcess: *, BaseOfDll: uint64, OmapTo: **s__OMAP, cOmapTo: *uint64, OmapFrom: **s__OMAP, cOmapFrom: *uint64) -> int
export const SYMOPT_EX_DISABLEACCESSTIMEUPDATE: int = 0
export const SYMOPT_EX_LASTVALIDDEBUGDIRECTORY: int = 1
export const SYMOPT_EX_NOIMPLICITPATTERNSEARCH: int = 2
export const SYMOPT_EX_NEVERLOADSYMBOLS: int = 3
export const SYMOPT_EX_MAX: int = 4
export import def #extern #dllimport SymSetOptions(SymOptions: ulong) -> ulong
export import def #extern #dllimport SymGetOptions() -> ulong
export import def #extern #dllimport SymCleanup(hProcess: *) -> int
export import def #extern #dllimport SymGetExtendedOption(option: e_IMAGEHLP_EXTENDED_OPTIONS) -> int
export import def #extern #dllimport SymSetExtendedOption(option: e_IMAGEHLP_EXTENDED_OPTIONS, value: int) -> int
export import def #extern #dllimport SymMatchString(string: *char, expression: *char, fCase: int) -> int
export import def #extern #dllimport SymMatchStringA(string: *char, expression: *char, fCase: int) -> int
export import def #extern #dllimport SymMatchStringW(string: *ushort, expression: *ushort, fCase: int) -> int
export import def #extern #dllimport SymEnumSourceFiles(hProcess: *, ModBase: uint64, Mask: *char, cbSrcFiles: def (*s__SOURCEFILE, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSourceFilesW(hProcess: *, ModBase: uint64, Mask: *ushort, cbSrcFiles: def (*s__SOURCEFILEW, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumerateModules64(hProcess: *, EnumModulesCallback: def (*char, uint64, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumerateModulesW64(hProcess: *, EnumModulesCallback: def (*ushort, uint64, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport EnumerateLoadedModulesEx(hProcess: *, EnumLoadedModulesCallback: def (*char, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport EnumerateLoadedModulesExW(hProcess: *, EnumLoadedModulesCallback: def (*ushort, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport EnumerateLoadedModules64(hProcess: *, EnumLoadedModulesCallback: def (*char, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport EnumerateLoadedModulesW64(hProcess: *, EnumLoadedModulesCallback: def (*ushort, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymFunctionTableAccess64(hProcess: *, AddrBase: uint64) -> *
export import def #extern #dllimport SymFunctionTableAccess64AccessRoutines(hProcess: *, AddrBase: uint64, ReadMemoryRoutine: def (*, uint64, *, ulong, *ulong) -> (int), GetModuleBaseRoutine: def (*, uint64) -> (uint64)) -> *
export import def #extern #dllimport SymGetUnwindInfo(hProcess: *, Address: uint64, Buffer: *, Size: *ulong) -> int
export import def #extern #dllimport SymGetModuleInfo64(hProcess: *, qwAddr: uint64, ModuleInfo: *s__IMAGEHLP_MODULE64) -> int
export import def #extern #dllimport SymGetModuleInfoW64(hProcess: *, qwAddr: uint64, ModuleInfo: *s__IMAGEHLP_MODULEW64) -> int
export import def #extern #dllimport SymGetModuleBase64(hProcess: *, qwAddr: uint64) -> uint64
export import def #extern #dllimport SymEnumLines(hProcess: *, Base: uint64, Obj: *char, File: *char, EnumLinesCallback: def (*s__SRCCODEINFO, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumLinesW(hProcess: *, Base: uint64, Obj: *ushort, File: *ushort, EnumLinesCallback: def (*s__SRCCODEINFOW, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymGetLineFromAddr64(hProcess: *, qwAddr: uint64, pdwDisplacement: *ulong, Line64: *s__IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLineFromAddrW64(hProcess: *, dwAddr: uint64, pdwDisplacement: *ulong, Line: *s__IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymGetLineFromInlineContext(hProcess: *, qwAddr: uint64, InlineContext: ulong, qwModuleBaseAddress: uint64, pdwDisplacement: *ulong, Line64: *s__IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLineFromInlineContextW(hProcess: *, dwAddr: uint64, InlineContext: ulong, qwModuleBaseAddress: uint64, pdwDisplacement: *ulong, Line: *s__IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymEnumSourceLines(hProcess: *, Base: uint64, Obj: *char, File: *char, Line: ulong, Flags: ulong, EnumLinesCallback: def (*s__SRCCODEINFO, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSourceLinesW(hProcess: *, Base: uint64, Obj: *ushort, File: *ushort, Line: ulong, Flags: ulong, EnumLinesCallback: def (*s__SRCCODEINFOW, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymAddrIncludeInlineTrace(hProcess: *, Address: uint64) -> ulong
export import def #extern #dllimport SymCompareInlineTrace(hProcess: *, Address1: uint64, InlineContext1: ulong, RetAddress1: uint64, Address2: uint64, RetAddress2: uint64) -> ulong
export import def #extern #dllimport SymQueryInlineTrace(hProcess: *, StartAddress: uint64, StartContext: ulong, StartRetAddress: uint64, CurAddress: uint64, CurContext: *ulong, CurFrameIndex: *ulong) -> int
export import def #extern #dllimport SymGetLineFromName64(hProcess: *, ModuleName: *char, FileName: *char, dwLineNumber: ulong, plDisplacement: *long, Line: *s__IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLineFromNameW64(hProcess: *, ModuleName: *ushort, FileName: *ushort, dwLineNumber: ulong, plDisplacement: *long, Line: *s__IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymGetLineNext64(hProcess: *, Line: *s__IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLineNextW64(hProcess: *, Line: *s__IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymGetLinePrev64(hProcess: *, Line: *s__IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLinePrevW64(hProcess: *, Line: *s__IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymGetFileLineOffsets64(hProcess: *, ModuleName: *char, FileName: *char, Buffer: *uint64, BufferLines: ulong) -> ulong
export import def #extern #dllimport SymMatchFileName(FileName: *char, Match: *char, FileNameStop: **char, MatchStop: **char) -> int
export import def #extern #dllimport SymMatchFileNameW(FileName: *ushort, Match: *ushort, FileNameStop: **ushort, MatchStop: **ushort) -> int
export import def #extern #dllimport SymGetSourceFile(hProcess: *, Base: uint64, Params: *char, FileSpec: *char, FilePath: *char, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceFileW(hProcess: *, Base: uint64, Params: *ushort, FileSpec: *ushort, FilePath: *ushort, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceFileToken(hProcess: *, Base: uint64, FileSpec: *char, Token: **, Size: *ulong) -> int
export import def #extern #dllimport SymGetSourceFileChecksumW(hProcess: *, Base: uint64, FileSpec: *ushort, pCheckSumType: *ulong, pChecksum: *uint8, checksumSize: ulong, pActualBytesWritten: *ulong) -> int
export import def #extern #dllimport SymGetSourceFileChecksum(hProcess: *, Base: uint64, FileSpec: *char, pCheckSumType: *ulong, pChecksum: *uint8, checksumSize: ulong, pActualBytesWritten: *ulong) -> int
export import def #extern #dllimport SymGetSourceFileTokenW(hProcess: *, Base: uint64, FileSpec: *ushort, Token: **, Size: *ulong) -> int
export import def #extern #dllimport SymGetSourceFileFromToken(hProcess: *, Token: *, Params: *char, FilePath: *char, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceFileFromTokenW(hProcess: *, Token: *, Params: *ushort, FilePath: *ushort, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceVarFromToken(hProcess: *, Token: *, Params: *char, VarName: *char, Value: *char, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceVarFromTokenW(hProcess: *, Token: *, Params: *ushort, VarName: *ushort, Value: *ushort, Size: ulong) -> int
export import def #extern #dllimport SymEnumSourceFileTokens(hProcess: *, Base: uint64, Callback: def (*, uint64) -> (int)) -> int
export import def #extern #dllimport SymInitialize(hProcess: *, UserSearchPath: *char, fInvadeProcess: int) -> int
export import def #extern #dllimport SymInitializeW(hProcess: *, UserSearchPath: *ushort, fInvadeProcess: int) -> int
export import def #extern #dllimport SymGetSearchPath(hProcess: *, SearchPathA: *char, SearchPathLength: ulong) -> int
export import def #extern #dllimport SymGetSearchPathW(hProcess: *, SearchPathA: *ushort, SearchPathLength: ulong) -> int
export import def #extern #dllimport SymSetSearchPath(hProcess: *, SearchPathA: *char) -> int
export import def #extern #dllimport SymSetSearchPathW(hProcess: *, SearchPathA: *ushort) -> int
export import def #extern #dllimport SymLoadModuleEx(hProcess: *, hFile: *, ImageName: *char, ModuleName: *char, BaseOfDll: uint64, DllSize: ulong, Data: *s__MODLOAD_DATA, Flags: ulong) -> uint64
export import def #extern #dllimport SymLoadModuleExW(hProcess: *, hFile: *, ImageName: *ushort, ModuleName: *ushort, BaseOfDll: uint64, DllSize: ulong, Data: *s__MODLOAD_DATA, Flags: ulong) -> uint64
export import def #extern #dllimport SymUnloadModule64(hProcess: *, BaseOfDll: uint64) -> int
export import def #extern #dllimport SymUnDName64(sym: *s__IMAGEHLP_SYMBOL64, UnDecName: *char, UnDecNameLength: ulong) -> int
export import def #extern #dllimport SymRegisterCallback64(hProcess: *, CallbackFunction: def (*, ulong, uint64, uint64) -> (int), UserContext: uint64) -> int
export import def #extern #dllimport SymRegisterCallbackW64(hProcess: *, CallbackFunction: def (*, ulong, uint64, uint64) -> (int), UserContext: uint64) -> int
export import def #extern #dllimport SymRegisterFunctionEntryCallback64(hProcess: *, CallbackFunction: def (*, uint64, uint64) -> (*), UserContext: uint64) -> int
export import def #extern #dllimport SymSetContext(hProcess: *, StackFrame: *s__IMAGEHLP_STACK_FRAME, Context: *) -> int
export import def #extern #dllimport SymSetScopeFromAddr(hProcess: *, Address: uint64) -> int
export import def #extern #dllimport SymSetScopeFromInlineContext(hProcess: *, Address: uint64, InlineContext: ulong) -> int
export import def #extern #dllimport SymSetScopeFromIndex(hProcess: *, BaseOfDll: uint64, Index: ulong) -> int
export import def #extern #dllimport SymEnumProcesses(EnumProcessesCallback: def (*, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymFromAddr(hProcess: *, Address: uint64, Displacement: *uint64, Symbol: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromAddrW(hProcess: *, Address: uint64, Displacement: *uint64, Symbol: *s__SYMBOL_INFOW) -> int
export import def #extern #dllimport SymFromInlineContext(hProcess: *, Address: uint64, InlineContext: ulong, Displacement: *uint64, Symbol: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromInlineContextW(hProcess: *, Address: uint64, InlineContext: ulong, Displacement: *uint64, Symbol: *s__SYMBOL_INFOW) -> int
export import def #extern #dllimport SymFromToken(hProcess: *, Base: uint64, Token: ulong, Symbol: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromTokenW(hProcess: *, Base: uint64, Token: ulong, Symbol: *s__SYMBOL_INFOW) -> int
export import def #extern #dllimport SymNext(hProcess: *, si: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymNextW(hProcess: *, siw: *s__SYMBOL_INFOW) -> int
export import def #extern #dllimport SymPrev(hProcess: *, si: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymPrevW(hProcess: *, siw: *s__SYMBOL_INFOW) -> int
export import def #extern #dllimport SymFromName(hProcess: *, Name: *char, Symbol: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromNameW(hProcess: *, Name: *ushort, Symbol: *s__SYMBOL_INFOW) -> int
export import def #extern #dllimport SymEnumSymbols(hProcess: *, BaseOfDll: uint64, Mask: *char, EnumSymbolsCallback: def (*s__SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSymbolsEx(hProcess: *, BaseOfDll: uint64, Mask: *char, EnumSymbolsCallback: def (*s__SYMBOL_INFO, ulong, *) -> (int), UserContext: *, Options: ulong) -> int
export import def #extern #dllimport SymEnumSymbolsW(hProcess: *, BaseOfDll: uint64, Mask: *ushort, EnumSymbolsCallback: def (*s__SYMBOL_INFOW, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSymbolsExW(hProcess: *, BaseOfDll: uint64, Mask: *ushort, EnumSymbolsCallback: def (*s__SYMBOL_INFOW, ulong, *) -> (int), UserContext: *, Options: ulong) -> int
export import def #extern #dllimport SymEnumSymbolsForAddr(hProcess: *, Address: uint64, EnumSymbolsCallback: def (*s__SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSymbolsForAddrW(hProcess: *, Address: uint64, EnumSymbolsCallback: def (*s__SYMBOL_INFOW, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymSearch(hProcess: *, BaseOfDll: uint64, Index: ulong, SymTag: ulong, Mask: *char, Address: uint64, EnumSymbolsCallback: def (*s__SYMBOL_INFO, ulong, *) -> (int), UserContext: *, Options: ulong) -> int
export import def #extern #dllimport SymSearchW(hProcess: *, BaseOfDll: uint64, Index: ulong, SymTag: ulong, Mask: *ushort, Address: uint64, EnumSymbolsCallback: def (*s__SYMBOL_INFOW, ulong, *) -> (int), UserContext: *, Options: ulong) -> int
export import def #extern #dllimport SymGetScope(hProcess: *, BaseOfDll: uint64, Index: ulong, Symbol: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymGetScopeW(hProcess: *, BaseOfDll: uint64, Index: ulong, Symbol: *s__SYMBOL_INFOW) -> int
export import def #extern #dllimport SymFromIndex(hProcess: *, BaseOfDll: uint64, Index: ulong, Symbol: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromIndexW(hProcess: *, BaseOfDll: uint64, Index: ulong, Symbol: *s__SYMBOL_INFOW) -> int
export const TI_GET_SYMTAG: int = 0
export const TI_GET_SYMNAME: int = 1
export const TI_GET_LENGTH: int = 2
export const TI_GET_TYPE: int = 3
export const TI_GET_TYPEID: int = 4
export const TI_GET_BASETYPE: int = 5
export const TI_GET_ARRAYINDEXTYPEID: int = 6
export const TI_FINDCHILDREN: int = 7
export const TI_GET_DATAKIND: int = 8
export const TI_GET_ADDRESSOFFSET: int = 9
export const TI_GET_OFFSET: int = 10
export const TI_GET_VALUE: int = 11
export const TI_GET_COUNT: int = 12
export const TI_GET_CHILDRENCOUNT: int = 13
export const TI_GET_BITPOSITION: int = 14
export const TI_GET_VIRTUALBASECLASS: int = 15
export const TI_GET_VIRTUALTABLESHAPEID: int = 16
export const TI_GET_VIRTUALBASEPOINTEROFFSET: int = 17
export const TI_GET_CLASSPARENTID: int = 18
export const TI_GET_NESTED: int = 19
export const TI_GET_SYMINDEX: int = 20
export const TI_GET_LEXICALPARENT: int = 21
export const TI_GET_ADDRESS: int = 22
export const TI_GET_THISADJUST: int = 23
export const TI_GET_UDTKIND: int = 24
export const TI_IS_EQUIV_TO: int = 25
export const TI_GET_CALLING_CONVENTION: int = 26
export const TI_IS_CLOSE_EQUIV_TO: int = 27
export const TI_GTIEX_REQS_VALID: int = 28
export const TI_GET_VIRTUALBASEOFFSET: int = 29
export const TI_GET_VIRTUALBASEDISPINDEX: int = 30
export const TI_GET_IS_REFERENCE: int = 31
export const TI_GET_INDIRECTVIRTUALBASECLASS: int = 32
export const TI_GET_VIRTUALBASETABLETYPE: int = 33
export const TI_GET_OBJECTPOINTERTYPE: int = 34
export const IMAGEHLP_SYMBOL_TYPE_INFO_MAX: int = 35
export import def #extern #dllimport SymGetTypeInfo(hProcess: *, ModBase: uint64, TypeId: ulong, GetType: e__IMAGEHLP_SYMBOL_TYPE_INFO, pInfo: *) -> int
export import def #extern #dllimport SymGetTypeInfoEx(hProcess: *, ModBase: uint64, Params: *s__IMAGEHLP_GET_TYPE_INFO_PARAMS) -> int
export import def #extern #dllimport SymEnumTypes(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*s__SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumTypesW(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*s__SYMBOL_INFOW, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumTypesByName(hProcess: *, BaseOfDll: uint64, mask: *char, EnumSymbolsCallback: def (*s__SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumTypesByNameW(hProcess: *, BaseOfDll: uint64, mask: *ushort, EnumSymbolsCallback: def (*s__SYMBOL_INFOW, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymGetTypeFromName(hProcess: *, BaseOfDll: uint64, Name: *char, Symbol: *s__SYMBOL_INFO) -> int
export import def #extern #dllimport SymGetTypeFromNameW(hProcess: *, BaseOfDll: uint64, Name: *ushort, Symbol: *s__SYMBOL_INFOW) -> int
export import def #extern #dllimport SymAddSymbol(hProcess: *, BaseOfDll: uint64, Name: *char, Address: uint64, Size: ulong, Flags: ulong) -> int
export import def #extern #dllimport SymAddSymbolW(hProcess: *, BaseOfDll: uint64, Name: *ushort, Address: uint64, Size: ulong, Flags: ulong) -> int
export import def #extern #dllimport SymDeleteSymbol(hProcess: *, BaseOfDll: uint64, Name: *char, Address: uint64, Flags: ulong) -> int
export import def #extern #dllimport SymDeleteSymbolW(hProcess: *, BaseOfDll: uint64, Name: *ushort, Address: uint64, Flags: ulong) -> int
export import def #extern #dllimport SymRefreshModuleList(hProcess: *) -> int
export import def #extern #dllimport SymAddSourceStream(hProcess: *, Base: uint64, StreamFile: *char, Buffer: *uint8, Size: uint64) -> int
export import def #extern #dllimport SymAddSourceStreamA(hProcess: *, Base: uint64, StreamFile: *char, Buffer: *uint8, Size: uint64) -> int
export import def #extern #dllimport SymAddSourceStreamW(hProcess: *, Base: uint64, FileSpec: *ushort, Buffer: *uint8, Size: uint64) -> int
export import def #extern #dllimport SymSrvIsStoreW(hProcess: *, path: *ushort) -> int
export import def #extern #dllimport SymSrvIsStore(hProcess: *, path: *char) -> int
export import def #extern #dllimport SymSrvDeltaName(hProcess: *, SymPath: *char, Type: *char, File1: *char, File2: *char) -> *char
export import def #extern #dllimport SymSrvDeltaNameW(hProcess: *, SymPath: *ushort, Type: *ushort, File1: *ushort, File2: *ushort) -> *ushort
export import def #extern #dllimport SymSrvGetSupplement(hProcess: *, SymPath: *char, Node: *char, File: *char) -> *char
export import def #extern #dllimport SymSrvGetSupplementW(hProcess: *, SymPath: *ushort, Node: *ushort, File: *ushort) -> *ushort
export import def #extern #dllimport SymSrvGetFileIndexes(File: *char, Id: *s__GUID, Val1: *ulong, Val2: *ulong, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexesW(File: *ushort, Id: *s__GUID, Val1: *ulong, Val2: *ulong, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexStringW(hProcess: *, SrvPath: *ushort, File: *ushort, Index: *ushort, Size: uint64, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexString(hProcess: *, SrvPath: *char, File: *char, Index: *char, Size: uint64, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexInfo(File: *char, Info: *SYMSRV_INDEX_INFO, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexInfoW(File: *ushort, Info: *SYMSRV_INDEX_INFOW, Flags: ulong) -> int
export import def #extern #dllimport SymSrvStoreSupplement(hProcess: *, SrvPath: *char, Node: *char, File: *char, Flags: ulong) -> *char
export import def #extern #dllimport SymSrvStoreSupplementW(hProcess: *, SymPath: *ushort, Node: *ushort, File: *ushort, Flags: ulong) -> *ushort
export import def #extern #dllimport SymSrvStoreFile(hProcess: *, SrvPath: *char, File: *char, Flags: ulong) -> *char
export import def #extern #dllimport SymSrvStoreFileW(hProcess: *, SrvPath: *ushort, File: *ushort, Flags: ulong) -> *ushort
export const sfImage: int = 0
export const sfDbg: int = 1
export const sfPdb: int = 2
export const sfMpd: int = 3
export const sfMax: int = 4
export import def #extern #dllimport SymGetSymbolFile(hProcess: *, SymPath: *char, ImageFile: *char, Type: ulong, SymbolFile: *char, cSymbolFile: uint64, DbgFile: *char, cDbgFile: uint64) -> int
export import def #extern #dllimport SymGetSymbolFileW(hProcess: *, SymPath: *ushort, ImageFile: *ushort, Type: ulong, SymbolFile: *ushort, cSymbolFile: uint64, DbgFile: *ushort, cDbgFile: uint64) -> int
export import def #extern DbgHelpCreateUserDump(FileName: *char, Callback: def (ulong, **, *ulong, *) -> (int), UserData: *) -> int
export import def #extern DbgHelpCreateUserDumpW(FileName: *ushort, Callback: def (ulong, **, *ulong, *) -> (int), UserData: *) -> int
export import def #extern #dllimport SymGetSymFromAddr64(hProcess: *, qwAddr: uint64, pdwDisplacement: *uint64, Symbol: *s__IMAGEHLP_SYMBOL64) -> int
export import def #extern #dllimport SymGetSymFromName64(hProcess: *, Name: *char, Symbol: *s__IMAGEHLP_SYMBOL64) -> int
export import def #extern #dllimport FindFileInPath(hprocess: *, SearchPathA: *char, FileName: *char, id: *, two: ulong, three: ulong, flags: ulong, FilePath: *char) -> int
export import def #extern #dllimport FindFileInSearchPath(hprocess: *, SearchPathA: *char, FileName: *char, one: ulong, two: ulong, three: ulong, FilePath: *char) -> int
export import def #extern #dllimport SymEnumSym(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*s__SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumerateSymbols64(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*char, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumerateSymbolsW64(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*ushort, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymLoadModule64(hProcess: *, hFile: *, ImageName: *char, ModuleName: *char, BaseOfDll: uint64, SizeOfDll: ulong) -> uint64
export import def #extern #dllimport SymGetSymNext64(hProcess: *, Symbol: *s__IMAGEHLP_SYMBOL64) -> int
export import def #extern #dllimport SymGetSymNextW64(hProcess: *, Symbol: *s__IMAGEHLP_SYMBOLW64) -> int
export import def #extern #dllimport SymGetSymPrev64(hProcess: *, Symbol: *s__IMAGEHLP_SYMBOL64) -> int
export import def #extern #dllimport SymGetSymPrevW64(hProcess: *, Symbol: *s__IMAGEHLP_SYMBOLW64) -> int
export import def #extern #dllimport SetCheckUserInterruptShared(lpStartAddress: def () -> (ulong))
export import def #extern #dllimport GetCheckUserInterruptShared() -> def () -> (ulong)
export import def #extern #dllimport GetSymLoadError() -> ulong
export import def #extern #dllimport SetSymLoadError(error: ulong)
export import def #extern #dllimport ReportSymbolLoadSummary(hProcess: *, pLoadModule: *ushort, pSymbolData: *DBGHELP_DATA_REPORT_STRUCT) -> int
export import def #extern #dllimport RemoveInvalidModuleList(hProcess: *)
export import def #extern #dllimport RangeMapCreate() -> *
export import def #extern #dllimport RangeMapFree(RmapHandle: *)
export import def #extern #dllimport RangeMapAddPeImageSections(RmapHandle: *, ImageName: *ushort, MappedImage: *, MappingBytes: ulong, ImageBase: uint64, UserTag: uint64, MappingFlags: ulong) -> int
export import def #extern #dllimport RangeMapRemove(RmapHandle: *, UserTag: uint64) -> int
export import def #extern #dllimport RangeMapRead(RmapHandle: *, Offset: uint64, Buffer: *, RequestBytes: ulong, Flags: ulong, DoneBytes: *ulong) -> int
export import def #extern #dllimport RangeMapWrite(RmapHandle: *, Offset: uint64, Buffer: *, RequestBytes: ulong, Flags: ulong, DoneBytes: *ulong) -> int
export const UnusedStream: int = 0
export const ReservedStream0: int = 1
export const ReservedStream1: int = 2
export const ThreadListStream: int = 3
export const ModuleListStream: int = 4
export const MemoryListStream: int = 5
export const ExceptionStream: int = 6
export const SystemInfoStream: int = 7
export const ThreadExListStream: int = 8
export const Memory64ListStream: int = 9
export const CommentStreamA: int = 10
export const CommentStreamW: int = 11
export const HandleDataStream: int = 12
export const FunctionTableStream: int = 13
export const UnloadedModuleListStream: int = 14
export const MiscInfoStream: int = 15
export const MemoryInfoListStream: int = 16
export const ThreadInfoListStream: int = 17
export const HandleOperationListStream: int = 18
export const TokenStream: int = 19
export const JavaScriptDataStream: int = 20
export const SystemMemoryInfoStream: int = 21
export const ProcessVmCountersStream: int = 22
export const IptTraceStream: int = 23
export const ThreadNamesStream: int = 24
export const ceStreamNull: int = 32768
export const ceStreamSystemInfo: int = 32769
export const ceStreamException: int = 32770
export const ceStreamModuleList: int = 32771
export const ceStreamProcessList: int = 32772
export const ceStreamThreadList: int = 32773
export const ceStreamThreadContextList: int = 32774
export const ceStreamThreadCallStackList: int = 32775
export const ceStreamMemoryVirtualList: int = 32776
export const ceStreamMemoryPhysicalList: int = 32777
export const ceStreamBucketParameters: int = 32778
export const ceStreamProcessModuleMap: int = 32779
export const ceStreamDiagnosisList: int = 32780
export const LastReservedStream: int = 65535
export const MiniHandleObjectInformationNone: int = 0
export const MiniThreadInformation1: int = 1
export const MiniMutantInformation1: int = 2
export const MiniMutantInformation2: int = 3
export const MiniProcessInformation1: int = 4
export const MiniProcessInformation2: int = 5
export const MiniEventInformation1: int = 6
export const MiniSectionInformation1: int = 7
export const MiniSemaphoreInformation1: int = 8
export const MiniHandleObjectInformationTypeMax: int = 9
export const ModuleCallback: int = 0
export const ThreadCallback: int = 1
export const ThreadExCallback: int = 2
export const IncludeThreadCallback: int = 3
export const IncludeModuleCallback: int = 4
export const MemoryCallback: int = 5
export const CancelCallback: int = 6
export const WriteKernelMinidumpCallback: int = 7
export const KernelMinidumpStatusCallback: int = 8
export const RemoveMemoryCallback: int = 9
export const IncludeVmRegionCallback: int = 10
export const IoStartCallback: int = 11
export const IoWriteAllCallback: int = 12
export const IoFinishCallback: int = 13
export const ReadMemoryFailureCallback: int = 14
export const SecondaryFlagsCallback: int = 15
export const IsProcessSnapshotCallback: int = 16
export const VmStartCallback: int = 17
export const VmQueryCallback: int = 18
export const VmPreReadCallback: int = 19
export const VmPostReadCallback: int = 20
export const ThreadWriteThread: int = 1
export const ThreadWriteStack: int = 2
export const ThreadWriteContext: int = 4
export const ThreadWriteBackingStore: int = 8
export const ThreadWriteInstructionWindow: int = 16
export const ThreadWriteThreadData: int = 32
export const ThreadWriteThreadInfo: int = 64
export const ModuleWriteModule: int = 1
export const ModuleWriteDataSeg: int = 2
export const ModuleWriteMiscRecord: int = 4
export const ModuleWriteCvRecord: int = 8
export const ModuleReferencedByMemory: int = 16
export const ModuleWriteTlsData: int = 32
export const ModuleWriteCodeSegs: int = 64
export const MiniDumpNormal: int = 0
export const MiniDumpWithDataSegs: int = 1
export const MiniDumpWithFullMemory: int = 2
export const MiniDumpWithHandleData: int = 4
export const MiniDumpFilterMemory: int = 8
export const MiniDumpScanMemory: int = 16
export const MiniDumpWithUnloadedModules: int = 32
export const MiniDumpWithIndirectlyReferencedMemory: int = 64
export const MiniDumpFilterModulePaths: int = 128
export const MiniDumpWithProcessThreadData: int = 256
export const MiniDumpWithPrivateReadWriteMemory: int = 512
export const MiniDumpWithoutOptionalData: int = 1024
export const MiniDumpWithFullMemoryInfo: int = 2048
export const MiniDumpWithThreadInfo: int = 4096
export const MiniDumpWithCodeSegs: int = 8192
export const MiniDumpWithoutAuxiliaryState: int = 16384
export const MiniDumpWithFullAuxiliaryState: int = 32768
export const MiniDumpWithPrivateWriteCopyMemory: int = 65536
export const MiniDumpIgnoreInaccessibleMemory: int = 131072
export const MiniDumpWithTokenInformation: int = 262144
export const MiniDumpWithModuleHeaders: int = 524288
export const MiniDumpFilterTriage: int = 1048576
export const MiniDumpWithAvxXStateContext: int = 2097152
export const MiniDumpWithIptTrace: int = 4194304
export const MiniDumpScanInaccessiblePartialPages: int = 8388608
export const MiniDumpFilterWriteCombinedMemory: int = 16777216
export const MiniDumpValidTypeFlags: int = 33554431
export const MiniSecondaryWithoutPowerInfo: int = 1
export const MiniSecondaryValidFlags: int = 1
export import def #extern MiniDumpWriteDump(hProcess: *, ProcessId: ulong, hFile: *, DumpType: e__MINIDUMP_TYPE, ExceptionParam: *s__MINIDUMP_EXCEPTION_INFORMATION, UserStreamParam: *s__MINIDUMP_USER_STREAM_INFORMATION, CallbackParam: *s__MINIDUMP_CALLBACK_INFORMATION) -> int
export import def #extern MiniDumpReadDumpStream(BaseOfDump: *, StreamNumber: ulong, Dir: **s__MINIDUMP_DIRECTORY, StreamPointer: **, StreamSize: *ulong) -> int
