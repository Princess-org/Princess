export type e_ffi_abi = enum { FFI_FIRST_ABI; FFI_WIN64 = 1; FFI_GNUW64 = 2; FFI_LAST_ABI = 3; FFI_DEFAULT_ABI = 1; }
export type s___crt_locale_data_public = struct { _locale_pctype: *ushort; _locale_mb_cur_max: int; _locale_lc_codepage: uint; }
export type s___crt_locale_data
export type s___crt_multibyte_data
export type s___crt_locale_pointers = struct { locinfo: *s___crt_locale_data; mbcinfo: *s___crt_multibyte_data; }
export type s__Mbstatet = struct { _Wchar: ulong; _Byte: ushort; _State: ushort; }
export type s__ffi_type
export type s__ffi_type = struct { size: uint64; alignment: ushort; type_: ushort; elements: **s__ffi_type; }
export type e_ffi_status = enum { FFI_OK; FFI_BAD_TYPEDEF = 1; FFI_BAD_ABI = 2; FFI_BAD_ARGTYPE = 3; }
export type s_ffi_cif = struct { abi: e_ffi_abi; nargs: uint; arg_types: **s__ffi_type; rtype: *s__ffi_type; bytes: uint; flags: uint; }
export type u_ffi_raw = struct #union { sint: int64; uint: uint64; flt: float; data: [8; char]; ptr: *; }
export type s_ffi_closure = struct { struct #union { tramp: [32; char]; ftramp: *; }; cif: *s_ffi_cif; fun: def [*s_ffi_cif, *, **, *] -> ; user_data: *; }
export type s_ffi_raw_closure = struct { tramp: [32; char]; cif: *s_ffi_cif; translate_args: def [*s_ffi_cif, *, **, *] -> ; this_closure: *; fun: def [*s_ffi_cif, *, *u_ffi_raw, *] -> ; user_data: *; }
export type s_ffi_java_raw_closure = struct { tramp: [32; char]; cif: *s_ffi_cif; translate_args: def [*s_ffi_cif, *, **, *] -> ; this_closure: *; fun: def [*s_ffi_cif, *, *u_ffi_raw, *] -> ; user_data: *; }
export type s_ffi_go_closure = struct { tramp: *; cif: *s_ffi_cif; fun: def [*s_ffi_cif, *, **, *] -> ; }
export const __llvm__: int = 1
export const __clang__: int = 1
export const __clang_major__: int = 17
export const __clang_minor__: int = 0
export const __clang_patchlevel__: int = 6
export const __clang_version__: [char] = "17.0.6 "
export const __ATOMIC_RELAXED: int = 0
export const __ATOMIC_CONSUME: int = 1
export const __ATOMIC_ACQUIRE: int = 2
export const __ATOMIC_RELEASE: int = 3
export const __ATOMIC_ACQ_REL: int = 4
export const __ATOMIC_SEQ_CST: int = 5
export const __OPENCL_MEMORY_SCOPE_WORK_ITEM: int = 0
export const __OPENCL_MEMORY_SCOPE_WORK_GROUP: int = 1
export const __OPENCL_MEMORY_SCOPE_DEVICE: int = 2
export const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: int = 3
export const __OPENCL_MEMORY_SCOPE_SUB_GROUP: int = 4
export const __PRAGMA_REDEFINE_EXTNAME: int = 1
export const __VERSION__: [char] = "Clang 17.0.6"
export const __OBJC_BOOL_IS_BOOL: int = 0
export const __CONSTANT_CFSTRINGS__: int = 1
export const __clang_literal_encoding__: [char] = "UTF-8"
export const __clang_wide_literal_encoding__: [char] = "UTF-16"
export const __ORDER_LITTLE_ENDIAN__: int = 1234
export const __ORDER_BIG_ENDIAN__: int = 4321
export const __ORDER_PDP_ENDIAN__: int = 3412
export const __LITTLE_ENDIAN__: int = 1
export const __CHAR_BIT__: int = 8
export const __BOOL_WIDTH__: int = 8
export const __SHRT_WIDTH__: int = 16
export const __INT_WIDTH__: int = 32
export const __LONG_WIDTH__: int = 32
export const __LLONG_WIDTH__: int = 64
export const __BITINT_MAXWIDTH__: int = 8388608
export const __SCHAR_MAX__: int = 127
export const __SHRT_MAX__: int = 32767
export const __INT_MAX__: int = 2147483647
export const __WCHAR_MAX__: int = 65535
export const __WCHAR_WIDTH__: int = 16
export const __WINT_MAX__: int = 65535
export const __WINT_WIDTH__: int = 16
export const __INTMAX_WIDTH__: int = 64
export const __SIZE_WIDTH__: int = 64
export const __UINTMAX_WIDTH__: int = 64
export const __PTRDIFF_WIDTH__: int = 64
export const __INTPTR_WIDTH__: int = 64
export const __UINTPTR_WIDTH__: int = 64
export const __SIZEOF_DOUBLE__: int = 8
export const __SIZEOF_FLOAT__: int = 4
export const __SIZEOF_INT__: int = 4
export const __SIZEOF_LONG__: int = 4
export const __SIZEOF_LONG_DOUBLE__: int = 8
export const __SIZEOF_LONG_LONG__: int = 8
export const __SIZEOF_POINTER__: int = 8
export const __SIZEOF_SHORT__: int = 2
export const __SIZEOF_PTRDIFF_T__: int = 8
export const __SIZEOF_SIZE_T__: int = 8
export const __SIZEOF_WCHAR_T__: int = 2
export const __SIZEOF_WINT_T__: int = 2
export const __SIZEOF_INT128__: int = 16
export const __INTMAX_FMTd__: [char] = "lld"
export const __INTMAX_FMTi__: [char] = "lli"
export const __UINTMAX_FMTo__: [char] = "llo"
export const __UINTMAX_FMTu__: [char] = "llu"
export const __UINTMAX_FMTx__: [char] = "llx"
export const __UINTMAX_FMTX__: [char] = "llX"
export const __PTRDIFF_FMTd__: [char] = "lld"
export const __PTRDIFF_FMTi__: [char] = "lli"
export const __INTPTR_FMTd__: [char] = "lld"
export const __INTPTR_FMTi__: [char] = "lli"
export const __SIZE_FMTo__: [char] = "llo"
export const __SIZE_FMTu__: [char] = "llu"
export const __SIZE_FMTx__: [char] = "llx"
export const __SIZE_FMTX__: [char] = "llX"
export const __SIG_ATOMIC_MAX__: int = 2147483647
export const __SIG_ATOMIC_WIDTH__: int = 32
export const __UINTPTR_FMTo__: [char] = "llo"
export const __UINTPTR_FMTu__: [char] = "llu"
export const __UINTPTR_FMTx__: [char] = "llx"
export const __UINTPTR_FMTX__: [char] = "llX"
export const __FLT16_HAS_DENORM__: int = 1
export const __FLT16_DIG__: int = 3
export const __FLT16_DECIMAL_DIG__: int = 5
export const __FLT16_HAS_INFINITY__: int = 1
export const __FLT16_HAS_QUIET_NAN__: int = 1
export const __FLT16_MANT_DIG__: int = 11
export const __FLT16_MAX_10_EXP__: int = 4
export const __FLT16_MAX_EXP__: int = 16
export const __FLT_HAS_DENORM__: int = 1
export const __FLT_DIG__: int = 6
export const __FLT_DECIMAL_DIG__: int = 9
export const __FLT_HAS_INFINITY__: int = 1
export const __FLT_HAS_QUIET_NAN__: int = 1
export const __FLT_MANT_DIG__: int = 24
export const __FLT_MAX_10_EXP__: int = 38
export const __FLT_MAX_EXP__: int = 128
export const __DBL_DENORM_MIN__: double = 4.9406564584124654e-324
export const __DBL_HAS_DENORM__: int = 1
export const __DBL_DIG__: int = 15
export const __DBL_DECIMAL_DIG__: int = 17
export const __DBL_EPSILON__: double = 2.2204460492503131e-16
export const __DBL_HAS_INFINITY__: int = 1
export const __DBL_HAS_QUIET_NAN__: int = 1
export const __DBL_MANT_DIG__: int = 53
export const __DBL_MAX_10_EXP__: int = 308
export const __DBL_MAX_EXP__: int = 1024
export const __DBL_MAX__: double = 1.7976931348623157e+308
export const __DBL_MIN__: double = 2.2250738585072014e-308
export const __LDBL_HAS_DENORM__: int = 1
export const __LDBL_DIG__: int = 15
export const __LDBL_DECIMAL_DIG__: int = 17
export const __LDBL_HAS_INFINITY__: int = 1
export const __LDBL_HAS_QUIET_NAN__: int = 1
export const __LDBL_MANT_DIG__: int = 53
export const __LDBL_MAX_10_EXP__: int = 308
export const __LDBL_MAX_EXP__: int = 1024
export const __POINTER_WIDTH__: int = 64
export const __BIGGEST_ALIGNMENT__: int = 16
export const __WCHAR_UNSIGNED__: int = 1
export const __WINT_UNSIGNED__: int = 1
export const __INT8_FMTd__: [char] = "hhd"
export const __INT8_FMTi__: [char] = "hhi"
export const __INT16_FMTd__: [char] = "hd"
export const __INT16_FMTi__: [char] = "hi"
export const __INT32_FMTd__: [char] = "d"
export const __INT32_FMTi__: [char] = "i"
export const __INT64_FMTd__: [char] = "lld"
export const __INT64_FMTi__: [char] = "lli"
export const __UINT8_FMTo__: [char] = "hho"
export const __UINT8_FMTu__: [char] = "hhu"
export const __UINT8_FMTx__: [char] = "hhx"
export const __UINT8_FMTX__: [char] = "hhX"
export const __UINT8_MAX__: int = 255
export const __INT8_MAX__: int = 127
export const __UINT16_FMTo__: [char] = "ho"
export const __UINT16_FMTu__: [char] = "hu"
export const __UINT16_FMTx__: [char] = "hx"
export const __UINT16_FMTX__: [char] = "hX"
export const __UINT16_MAX__: int = 65535
export const __INT16_MAX__: int = 32767
export const __UINT32_FMTo__: [char] = "o"
export const __UINT32_FMTu__: [char] = "u"
export const __UINT32_FMTx__: [char] = "x"
export const __UINT32_FMTX__: [char] = "X"
export const __INT32_MAX__: int = 2147483647
export const __UINT64_FMTo__: [char] = "llo"
export const __UINT64_FMTu__: [char] = "llu"
export const __UINT64_FMTx__: [char] = "llx"
export const __UINT64_FMTX__: [char] = "llX"
export const __INT_LEAST8_MAX__: int = 127
export const __INT_LEAST8_WIDTH__: int = 8
export const __INT_LEAST8_FMTd__: [char] = "hhd"
export const __INT_LEAST8_FMTi__: [char] = "hhi"
export const __UINT_LEAST8_MAX__: int = 255
export const __UINT_LEAST8_FMTo__: [char] = "hho"
export const __UINT_LEAST8_FMTu__: [char] = "hhu"
export const __UINT_LEAST8_FMTx__: [char] = "hhx"
export const __UINT_LEAST8_FMTX__: [char] = "hhX"
export const __INT_LEAST16_MAX__: int = 32767
export const __INT_LEAST16_WIDTH__: int = 16
export const __INT_LEAST16_FMTd__: [char] = "hd"
export const __INT_LEAST16_FMTi__: [char] = "hi"
export const __UINT_LEAST16_MAX__: int = 65535
export const __UINT_LEAST16_FMTo__: [char] = "ho"
export const __UINT_LEAST16_FMTu__: [char] = "hu"
export const __UINT_LEAST16_FMTx__: [char] = "hx"
export const __UINT_LEAST16_FMTX__: [char] = "hX"
export const __INT_LEAST32_MAX__: int = 2147483647
export const __INT_LEAST32_WIDTH__: int = 32
export const __INT_LEAST32_FMTd__: [char] = "d"
export const __INT_LEAST32_FMTi__: [char] = "i"
export const __UINT_LEAST32_FMTo__: [char] = "o"
export const __UINT_LEAST32_FMTu__: [char] = "u"
export const __UINT_LEAST32_FMTx__: [char] = "x"
export const __UINT_LEAST32_FMTX__: [char] = "X"
export const __INT_LEAST64_WIDTH__: int = 64
export const __INT_LEAST64_FMTd__: [char] = "lld"
export const __INT_LEAST64_FMTi__: [char] = "lli"
export const __UINT_LEAST64_FMTo__: [char] = "llo"
export const __UINT_LEAST64_FMTu__: [char] = "llu"
export const __UINT_LEAST64_FMTx__: [char] = "llx"
export const __UINT_LEAST64_FMTX__: [char] = "llX"
export const __INT_FAST8_MAX__: int = 127
export const __INT_FAST8_WIDTH__: int = 8
export const __INT_FAST8_FMTd__: [char] = "hhd"
export const __INT_FAST8_FMTi__: [char] = "hhi"
export const __UINT_FAST8_MAX__: int = 255
export const __UINT_FAST8_FMTo__: [char] = "hho"
export const __UINT_FAST8_FMTu__: [char] = "hhu"
export const __UINT_FAST8_FMTx__: [char] = "hhx"
export const __UINT_FAST8_FMTX__: [char] = "hhX"
export const __INT_FAST16_MAX__: int = 32767
export const __INT_FAST16_WIDTH__: int = 16
export const __INT_FAST16_FMTd__: [char] = "hd"
export const __INT_FAST16_FMTi__: [char] = "hi"
export const __UINT_FAST16_MAX__: int = 65535
export const __UINT_FAST16_FMTo__: [char] = "ho"
export const __UINT_FAST16_FMTu__: [char] = "hu"
export const __UINT_FAST16_FMTx__: [char] = "hx"
export const __UINT_FAST16_FMTX__: [char] = "hX"
export const __INT_FAST32_MAX__: int = 2147483647
export const __INT_FAST32_WIDTH__: int = 32
export const __INT_FAST32_FMTd__: [char] = "d"
export const __INT_FAST32_FMTi__: [char] = "i"
export const __UINT_FAST32_FMTo__: [char] = "o"
export const __UINT_FAST32_FMTu__: [char] = "u"
export const __UINT_FAST32_FMTx__: [char] = "x"
export const __UINT_FAST32_FMTX__: [char] = "X"
export const __INT_FAST64_WIDTH__: int = 64
export const __INT_FAST64_FMTd__: [char] = "lld"
export const __INT_FAST64_FMTi__: [char] = "lli"
export const __UINT_FAST64_FMTo__: [char] = "llo"
export const __UINT_FAST64_FMTu__: [char] = "llu"
export const __UINT_FAST64_FMTx__: [char] = "llx"
export const __UINT_FAST64_FMTX__: [char] = "llX"
export const __FINITE_MATH_ONLY__: int = 0
export const __CLANG_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_INT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __NO_INLINE__: int = 1
export const __PIC__: int = 2
export const __pic__: int = 2
export const __FLT_RADIX__: int = 2
export const __GCC_ASM_FLAG_OUTPUTS__: int = 1
export const __code_model_small__: int = 1
export const __amd64__: int = 1
export const __amd64: int = 1
export const __x86_64: int = 1
export const __x86_64__: int = 1
export const __SEG_GS: int = 1
export const __SEG_FS: int = 1
export const __k8: int = 1
export const __k8__: int = 1
export const __tune_k8__: int = 1
export const __NO_MATH_INLINES: int = 1
export const __FXSR__: int = 1
export const __SSE2__: int = 1
export const __SSE2_MATH__: int = 1
export const __SSE__: int = 1
export const __SSE_MATH__: int = 1
export const __MMX__: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: int = 1
export const _WIN32: int = 1
export const _WIN64: int = 1
export const _M_FP_CONTRACT: int = 1
export const _M_FP_PRECISE: int = 1
export const _MSC_VER: int = 1938
export const _MSC_FULL_VER: int = 193833135
export const _MSC_BUILD: int = 1
export const _MSC_EXTENSIONS: int = 1
export const _ISO_VOLATILE: int = 1
export const _INTEGRAL_MAX_BITS: int = 64
export const __STDC_NO_THREADS__: int = 1
export const _MSVC_EXECUTION_CHARACTER_SET: int = 65001
export const _M_X64: int = 100
export const _M_AMD64: int = 100
export const __STDC_HOSTED__: int = 1
export const __STDC_UTF_16__: int = 1
export const __STDC_UTF_32__: int = 1
export const MUSL: int = 1
export const FFI_SIZEOF_ARG: int = 8
export const USE_BUILTIN_FFS: int = 0
export const FFI_CLOSURES: int = 1
export const FFI_GO_CLOSURES: int = 1
export const FFI_TRAMPOLINE_SIZE: int = 32
export const FFI_NATIVE_RAW_API: int = 0
export const _VCRT_COMPILER_PREPROCESSOR: int = 1
export const _SAL_VERSION: int = 20
export const __SAL_H_VERSION: int = 180000000
export const _USE_DECLSPECS_FOR_SAL: int = 0
export const _USE_ATTRIBUTES_FOR_SAL: int = 0
export const _CRT_PACKING: int = 8
export const _HAS_EXCEPTIONS: int = 1
export const _HAS_CXX17: int = 0
export const _HAS_CXX20: int = 0
export const _HAS_CXX23: int = 0
export const _HAS_NODISCARD: int = 0
export const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: int = 1
export const _CRT_BUILD_DESKTOP_APP: int = 1
export const _ARGMAX: int = 100
export const _CRT_INT_MAX: int = 2147483647
export const _CRT_FUNCTIONS_REQUIRED: int = 1
export const _CRT_HAS_CXX17: int = 0
export const _CRT_HAS_C11: int = 1
export const _CRT_INTERNAL_NONSTDC_NAMES: int = 1
export const __STDC_WANT_SECURE_LIB__: int = 1
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: int = 1
export const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: int = 0
export const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: int = 0
export const CHAR_BIT: int = 8
export const SCHAR_MAX: int = 127
export const MB_LEN_MAX: int = 5
export const SHRT_MAX: int = 32767
export const INT_MAX: int = 2147483647
export const FFI_64_BIT_MAX: int = 9223372036854775807
export const FFI_TYPE_VOID: int = 0
export const FFI_TYPE_INT: int = 1
export const FFI_TYPE_FLOAT: int = 2
export const FFI_TYPE_DOUBLE: int = 3
export const FFI_TYPE_UINT8: int = 5
export const FFI_TYPE_SINT8: int = 6
export const FFI_TYPE_UINT16: int = 7
export const FFI_TYPE_SINT16: int = 8
export const FFI_TYPE_UINT32: int = 9
export const FFI_TYPE_SINT32: int = 10
export const FFI_TYPE_UINT64: int = 11
export const FFI_TYPE_SINT64: int = 12
export const FFI_TYPE_STRUCT: int = 13
export const FFI_TYPE_POINTER: int = 14
export const FFI_TYPE_COMPLEX: int = 15
export const FFI_FIRST_ABI: int = 0
export const FFI_WIN64: int = 1
export const FFI_GNUW64: int = 2
export const FFI_LAST_ABI: int = 3
export const FFI_DEFAULT_ABI: int = 1
export import def #extern __security_init_cookie()
export import def #extern __security_check_cookie(_StackCookie: uint64)
export import def #extern __report_gsfailure(_StackCookie: uint64)
export import var #extern __security_cookie: uint64
export import def #extern _invalid_parameter_noinfo()
export import def #extern _invalid_parameter_noinfo_noreturn()
export import def #extern _invoke_watson(_Expression: *ushort, _FunctionName: *ushort, _FileName: *ushort, _LineNo: uint, _Reserved: uint64)
export import def #extern _errno() -> *int
export import def #extern _set_errno(_Value: int) -> int
export import def #extern _get_errno(_Value: *int) -> int
export import def #extern __threadid() -> ulong
export import def #extern __threadhandle() -> uint64
export import var #extern #dllimport ffi_type_void: s__ffi_type
export import var #extern #dllimport ffi_type_uint8: s__ffi_type
export import var #extern #dllimport ffi_type_sint8: s__ffi_type
export import var #extern #dllimport ffi_type_uint16: s__ffi_type
export import var #extern #dllimport ffi_type_sint16: s__ffi_type
export import var #extern #dllimport ffi_type_uint32: s__ffi_type
export import var #extern #dllimport ffi_type_sint32: s__ffi_type
export import var #extern #dllimport ffi_type_uint64: s__ffi_type
export import var #extern #dllimport ffi_type_sint64: s__ffi_type
export import var #extern #dllimport ffi_type_float: s__ffi_type
export import var #extern #dllimport ffi_type_double: s__ffi_type
export import var #extern #dllimport ffi_type_pointer: s__ffi_type
export const FFI_OK: int = 0
export const FFI_BAD_TYPEDEF: int = 1
export const FFI_BAD_ABI: int = 2
export const FFI_BAD_ARGTYPE: int = 3
export import def #extern #dllimport ffi_closure_alloc(size: uint64, code: **) -> *
export import def #extern #dllimport ffi_closure_free(_0: *)
export import def #extern #dllimport ffi_prep_closure_loc(_0: *s_ffi_closure, _1: *s_ffi_cif, fun: def [*s_ffi_cif, *, **, *] -> , user_data: *, codeloc: *) -> e_ffi_status
export import def #extern #dllimport ffi_prep_go_closure(_0: *s_ffi_go_closure, _1: *s_ffi_cif, fun: def [*s_ffi_cif, *, **, *] -> ) -> e_ffi_status
export import def #extern #dllimport ffi_call_go(cif: *s_ffi_cif, fn: def  -> , rvalue: *, avalue: **, closure: *)
export import def #extern #dllimport ffi_prep_cif(cif: *s_ffi_cif, abi: e_ffi_abi, nargs: uint, rtype: *s__ffi_type, atypes: **s__ffi_type) -> e_ffi_status
export import def #extern #dllimport ffi_prep_cif_var(cif: *s_ffi_cif, abi: e_ffi_abi, nfixedargs: uint, ntotalargs: uint, rtype: *s__ffi_type, atypes: **s__ffi_type) -> e_ffi_status
export import def #extern #dllimport ffi_call(cif: *s_ffi_cif, fn: def  -> , rvalue: *, avalue: **)
export import def #extern #dllimport ffi_get_struct_offsets(abi: e_ffi_abi, struct_type: *s__ffi_type, offsets: *uint64) -> e_ffi_status
