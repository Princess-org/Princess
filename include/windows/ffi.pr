export type e_ffi_abi = enum { FFI_FIRST_ABI; FFI_WIN64 = 1; FFI_GNUW64 = 2; FFI_LAST_ABI = 3; FFI_DEFAULT_ABI = 1; }
export type s___crt_locale_data_public = struct { _locale_pctype: *ushort; _locale_mb_cur_max: int; _locale_lc_codepage: uint; }
export type s___crt_locale_data
export type s___crt_multibyte_data
export type s___crt_locale_pointers = struct { locinfo: *s___crt_locale_data; mbcinfo: *s___crt_multibyte_data; }
export type s__Mbstatet = struct { _Wchar: ulong; _Byte: ushort; _State: ushort; }
export type s__ffi_type
export type s__ffi_type = struct { size: uint64; alignment: ushort; type_: ushort; elements: **s__ffi_type; }
export type e_ffi_status = enum { FFI_OK; FFI_BAD_TYPEDEF = 1; FFI_BAD_ABI = 2; FFI_BAD_ARGTYPE = 3; }
export type s_ffi_cif = struct { abi: e_ffi_abi; nargs: uint; arg_types: **s__ffi_type; rtype: *s__ffi_type; bytes: uint; flags: uint; }
export type u_ffi_raw = struct #union { sint: int64; uint: uint64; flt: float; data: [8; char]; ptr: *; }
export type s_ffi_closure = struct { _1: struct #union { tramp: [32; char]; ftramp: *; }; cif: *s_ffi_cif; fun: def (*s_ffi_cif, *, **, *) -> (); user_data: *; }
export type s_ffi_raw_closure = struct { tramp: [32; char]; cif: *s_ffi_cif; translate_args: def (*s_ffi_cif, *, **, *) -> (); this_closure: *; fun: def (*s_ffi_cif, *, *u_ffi_raw, *) -> (); user_data: *; }
export type s_ffi_java_raw_closure = struct { tramp: [32; char]; cif: *s_ffi_cif; translate_args: def (*s_ffi_cif, *, **, *) -> (); this_closure: *; fun: def (*s_ffi_cif, *, *u_ffi_raw, *) -> (); user_data: *; }
export type s_ffi_go_closure = struct { tramp: *; cif: *s_ffi_cif; fun: def (*s_ffi_cif, *, **, *) -> (); }
export const FFI_SIZEOF_ARG: int = 8
export const USE_BUILTIN_FFS: int = 0
export const FFI_CLOSURES: int = 1
export const FFI_GO_CLOSURES: int = 1
export const FFI_TRAMPOLINE_SIZE: int = 32
export const FFI_NATIVE_RAW_API: int = 0
export const FFI_64_BIT_MAX: int = 9223372036854775807
export const FFI_TYPE_VOID: int = 0
export const FFI_TYPE_INT: int = 1
export const FFI_TYPE_FLOAT: int = 2
export const FFI_TYPE_DOUBLE: int = 3
export const FFI_TYPE_UINT8: int = 5
export const FFI_TYPE_SINT8: int = 6
export const FFI_TYPE_UINT16: int = 7
export const FFI_TYPE_SINT16: int = 8
export const FFI_TYPE_UINT32: int = 9
export const FFI_TYPE_SINT32: int = 10
export const FFI_TYPE_UINT64: int = 11
export const FFI_TYPE_SINT64: int = 12
export const FFI_TYPE_STRUCT: int = 13
export const FFI_TYPE_POINTER: int = 14
export const FFI_TYPE_COMPLEX: int = 15
export const FFI_FIRST_ABI: int = 0
export const FFI_WIN64: int = 1
export const FFI_GNUW64: int = 2
export const FFI_LAST_ABI: int = 3
export const FFI_DEFAULT_ABI: int = 1
export import def #extern __threadid() -> ulong
export import def #extern __threadhandle() -> uint64
export import var #extern #dllimport ffi_type_void: s__ffi_type
export import var #extern #dllimport ffi_type_uint8: s__ffi_type
export import var #extern #dllimport ffi_type_sint8: s__ffi_type
export import var #extern #dllimport ffi_type_uint16: s__ffi_type
export import var #extern #dllimport ffi_type_sint16: s__ffi_type
export import var #extern #dllimport ffi_type_uint32: s__ffi_type
export import var #extern #dllimport ffi_type_sint32: s__ffi_type
export import var #extern #dllimport ffi_type_uint64: s__ffi_type
export import var #extern #dllimport ffi_type_sint64: s__ffi_type
export import var #extern #dllimport ffi_type_float: s__ffi_type
export import var #extern #dllimport ffi_type_double: s__ffi_type
export import var #extern #dllimport ffi_type_pointer: s__ffi_type
export const FFI_OK: int = 0
export const FFI_BAD_TYPEDEF: int = 1
export const FFI_BAD_ABI: int = 2
export const FFI_BAD_ARGTYPE: int = 3
export import def #extern #dllimport ffi_closure_alloc(size: uint64, code: **) -> *
export import def #extern #dllimport ffi_closure_free(_0: *)
export import def #extern #dllimport ffi_prep_closure_loc(_0: *s_ffi_closure, _1: *s_ffi_cif, fun: def (*s_ffi_cif, *, **, *) -> (), user_data: *, codeloc: *) -> e_ffi_status
export import def #extern #dllimport ffi_prep_go_closure(_0: *s_ffi_go_closure, _1: *s_ffi_cif, fun: def (*s_ffi_cif, *, **, *) -> ()) -> e_ffi_status
export import def #extern #dllimport ffi_call_go(cif: *s_ffi_cif, fn: def () -> (), rvalue: *, avalue: **, closure: *)
export import def #extern #dllimport ffi_prep_cif(cif: *s_ffi_cif, abi: e_ffi_abi, nargs: uint, rtype: *s__ffi_type, atypes: **s__ffi_type) -> e_ffi_status
export import def #extern #dllimport ffi_prep_cif_var(cif: *s_ffi_cif, abi: e_ffi_abi, nfixedargs: uint, ntotalargs: uint, rtype: *s__ffi_type, atypes: **s__ffi_type) -> e_ffi_status
export import def #extern #dllimport ffi_call(cif: *s_ffi_cif, fn: def () -> (), rvalue: *, avalue: **)
export import def #extern #dllimport ffi_get_struct_offsets(abi: e_ffi_abi, struct_type: *s__ffi_type, offsets: *uint64) -> e_ffi_status
