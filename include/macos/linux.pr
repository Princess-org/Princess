export type u___mbstate_t = struct #union { __mbstate8: [128; char]; _mbstateL: int64; }
export type s__opaque_pthread_attr_t
export type s__opaque_pthread_cond_t
export type s__opaque_pthread_condattr_t
export type s__opaque_pthread_mutex_t
export type s__opaque_pthread_mutexattr_t
export type s__opaque_pthread_once_t
export type s__opaque_pthread_rwlock_t
export type s__opaque_pthread_rwlockattr_t
export type s__opaque_pthread_t
export type s__filesec
export type e_idtype_t = enum { P_ALL; P_PID = 1; P_PGID = 2; }
export type s___darwin_mcontext64
export type s___darwin_sigaltstack
export type s___darwin_ucontext
export type u_sigval
export type s___siginfo = struct { si_signo: int; si_errno: int; si_code: int; si_pid: int; si_uid: uint; si_status: int; si_addr: *; si_value: u_sigval; si_band: long; __pad: [7; ulong]; }
export type s_rusage_info_v6
export type s_fd_set = struct { fds_bits: [32; int]; }
export type s_div_t = struct { quot: int; rem: int; }
export type s_ldiv_t = struct { quot: long; rem: long; }
export type s_lldiv_t = struct { quot: int64; rem: int64; }
export type s__malloc_zone_t
export type s_dl_info = struct { dli_fname: *char; dli_fbase: *; dli_sname: *char; dli_saddr: *; }
export type s_fsignatures = struct { fs_file_start: int64; fs_blob_start: *; fs_blob_size: ulong; fs_fsignatures_size: ulong; fs_cdhash: [20; char]; fs_hash_type: int; }
export type s_fsupplement = struct { fs_file_start: int64; fs_blob_start: int64; fs_blob_size: ulong; fs_orig_fd: int; }
export type s_fchecklv = struct { lv_file_start: int64; lv_error_message_size: ulong; lv_error_message: *; }
export type s_fgetsigsinfo = struct { fg_file_start: int64; fg_info_request: int; fg_sig_is_platform: int; }
export type s_fstore = struct { fst_flags: uint; fst_posmode: int; fst_offset: int64; fst_length: int64; fst_bytesalloc: int64; }
export type s_fpunchhole = struct { fp_flags: uint; reserved: uint; fp_offset: int64; fp_length: int64; }
export type s_ftrimactivefile = struct { fta_offset: int64; fta_length: int64; }
export type s_fspecread = struct { fsr_flags: uint; reserved: uint; fsr_offset: int64; fsr_length: int64; }
export type s_fattributiontag = struct { ft_flags: uint; ft_hash: uint64; ft_attribution_name: [255; char]; }
export type e_filesec_property_t = enum { FILESEC_OWNER = 1; FILESEC_GROUP = 2; FILESEC_UUID = 3; FILESEC_MODE = 4; FILESEC_ACL = 5; FILESEC_GRPUUID = 6; FILESEC_ACL_RAW = 100; FILESEC_ACL_ALLOCSIZE = 101; }
export type s_Elf32_Ehdr = struct { e_ident: [16; uint8]; e_type: ushort; e_machine: ushort; e_version: uint; e_entry: uint; e_phoff: uint; e_shoff: uint; e_flags: uint; e_ehsize: ushort; e_phentsize: ushort; e_phnum: ushort; e_shentsize: ushort; e_shnum: ushort; e_shstrndx: ushort; }
export type s_Elf64_Ehdr = struct { e_ident: [16; uint8]; e_type: ushort; e_machine: ushort; e_version: uint; e_entry: ulong; e_phoff: ulong; e_shoff: ulong; e_flags: uint; e_ehsize: ushort; e_phentsize: ushort; e_phnum: ushort; e_shentsize: ushort; e_shnum: ushort; e_shstrndx: ushort; }
export type s_Elf32_Shdr = struct { sh_name: uint; sh_type: uint; sh_flags: uint; sh_addr: uint; sh_offset: uint; sh_size: uint; sh_link: uint; sh_info: uint; sh_addralign: uint; sh_entsize: uint; }
export type s_Elf64_Shdr = struct { sh_name: uint; sh_type: uint; sh_flags: ulong; sh_addr: ulong; sh_offset: ulong; sh_size: ulong; sh_link: uint; sh_info: uint; sh_addralign: ulong; sh_entsize: ulong; }
export type s_Elf32_Sym = struct { st_name: uint; st_value: uint; st_size: uint; st_info: uint8; st_other: uint8; st_shndx: ushort; }
export type s_Elf64_Sym = struct { st_name: uint; st_info: uint8; st_other: uint8; st_shndx: ushort; st_value: ulong; st_size: ulong; }
export type s_Elf32_Rel = struct { r_offset: uint; r_info: uint; }
export type s_Elf32_Rela = struct { r_offset: uint; r_info: uint; r_addend: int; }
export type s_Elf64_Rel = struct { r_offset: ulong; r_info: ulong; }
export type s_Elf64_Rela = struct { r_offset: ulong; r_info: ulong; r_addend: long; }
export type s_Elf32_Nhdr = struct { n_namesz: uint; n_descsz: uint; n_type: uint; }
export type s_Elf64_Nhdr = struct { n_namesz: uint; n_descsz: uint; n_type: uint; }
export type s_Elf32_Phdr = struct { p_type: uint; p_offset: uint; p_vaddr: uint; p_paddr: uint; p_filesz: uint; p_memsz: uint; p_flags: uint; p_align: uint; }
export type s_Elf64_Phdr = struct { p_type: uint; p_flags: uint; p_offset: ulong; p_vaddr: ulong; p_paddr: ulong; p_filesz: ulong; p_memsz: ulong; p_align: ulong; }
export type s_Elf32_Dyn = struct { d_tag: int; d_un: struct #union { d_val: uint; d_ptr: uint; }; }
export type s_Elf64_Dyn = struct { d_tag: long; d_un: struct #union { d_val: ulong; d_ptr: ulong; }; }
export type s_Elf32_Syminfo = struct { si_boundto: ushort; si_flags: ushort; }
export type s_Elf64_Syminfo = struct { si_boundto: ushort; si_flags: ushort; }
export type s_Elf32_Verdef = struct { vd_version: ushort; vd_flags: ushort; vd_ndx: ushort; vd_cnt: ushort; vd_hash: uint; vd_aux: uint; vd_next: uint; }
export type s_Elf32_Verdaux = struct { vda_name: uint; vda_next: uint; }
export type s_Elf32_Verneed = struct { vn_version: ushort; vn_cnt: ushort; vn_file: uint; vn_aux: uint; vn_next: uint; }
export type s_Elf32_Vernaux = struct { vna_hash: uint; vna_flags: ushort; vna_other: ushort; vna_name: uint; vna_next: uint; }
export type s_Elf64_Verdef = struct { vd_version: ushort; vd_flags: ushort; vd_ndx: ushort; vd_cnt: ushort; vd_hash: uint; vd_aux: uint; vd_next: uint; }
export type s_Elf64_Verdaux = struct { vda_name: uint; vda_next: uint; }
export type s_Elf64_Verneed = struct { vn_version: ushort; vn_cnt: ushort; vn_file: uint; vn_aux: uint; vn_next: uint; }
export type s_Elf64_Vernaux = struct { vna_hash: uint; vna_flags: ushort; vna_other: ushort; vna_name: uint; vna_next: uint; }
export type s_Elf32_Move = struct { m_value: ulong; m_info: uint; m_poffset: uint; m_repeat: ushort; m_stride: ushort; }
export type s_Elf64_Move = struct { m_value: ulong; m_info: ulong; m_poffset: ulong; m_repeat: ushort; m_stride: ushort; }
export type s_Elf32_Cap = struct { c_tag: uint; c_un: struct #union { c_val: uint; c_ptr: uint; }; }
export type s_Elf64_Cap = struct { c_tag: ulong; c_un: struct #union { c_val: ulong; c_ptr: ulong; }; }
export type e_Elf_Cmd = enum { ELF_C_NULL; ELF_C_READ = 1; ELF_C_WRITE = 2; ELF_C_CLR = 3; ELF_C_SET = 4; ELF_C_FDDONE = 5; ELF_C_FDREAD = 6; ELF_C_RDWR = 7; ELF_C_NUM = 8; }
export type e_Elf_Kind = enum { ELF_K_NONE; ELF_K_AR = 1; ELF_K_COFF = 2; ELF_K_ELF = 3; ELF_K_NUM = 4; }
export type e_Elf_Type = enum { ELF_T_BYTE; ELF_T_ADDR = 1; ELF_T_DYN = 2; ELF_T_EHDR = 3; ELF_T_HALF = 4; ELF_T_OFF = 5; ELF_T_PHDR = 6; ELF_T_RELA = 7; ELF_T_REL = 8; ELF_T_SHDR = 9; ELF_T_SWORD = 10; ELF_T_SYM = 11; ELF_T_WORD = 12; ELF_T_SXWORD = 13; ELF_T_XWORD = 14; ELF_T_VDEF = 15; ELF_T_VNEED = 16; ELF_T_NUM = 17; }
export type s_Elf
export type s_Elf_Scn
export type s_Elf_Arhdr = struct { ar_name: *char; ar_date: long; ar_uid: long; ar_gid: long; ar_mode: ulong; ar_size: int64; ar_rawname: *char; }
export type s_Elf_Arsym = struct { as_name: *char; as_off: ulong; as_hash: ulong; }
export type s_Elf_Data = struct { d_buf: *; d_type: e_Elf_Type; d_size: ulong; d_off: int64; d_align: ulong; d_version: uint; }
export type s__telldir
export type s_DIR = struct { __dd_fd: int; __dd_loc: long; __dd_size: long; __dd_buf: *char; __dd_len: int; __dd_seek: long; __padding: long; __dd_flags: int; __dd_lock: s__opaque_pthread_mutex_t; __dd_td: *s__telldir; }
export type s___darwin_pthread_handler_rec
export type s___darwin_pthread_handler_rec = struct { __routine: def * -> ; __arg: *; __next: *s___darwin_pthread_handler_rec; }
export type s__opaque_pthread_attr_t = struct { __sig: long; __opaque: [56; char]; }
export type s__opaque_pthread_cond_t = struct { __sig: long; __opaque: [40; char]; }
export type s__opaque_pthread_condattr_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_mutex_t = struct { __sig: long; __opaque: [56; char]; }
export type s__opaque_pthread_mutexattr_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_once_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_rwlock_t = struct { __sig: long; __opaque: [192; char]; }
export type s__opaque_pthread_rwlockattr_t = struct { __sig: long; __opaque: [16; char]; }
export type s__opaque_pthread_t = struct { __sig: long; __cleanup_stack: *s___darwin_pthread_handler_rec; __opaque: [8176; char]; }
export type s_timespec = struct { tv_sec: long; tv_nsec: long; }
export type s_ostat = struct { st_dev: ushort; st_ino: uint64; st_mode: ushort; st_nlink: ushort; st_uid: ushort; st_gid: ushort; st_rdev: ushort; st_size: int; st_atimespec: s_timespec; st_mtimespec: s_timespec; st_ctimespec: s_timespec; st_blksize: int; st_blocks: int; st_flags: uint; st_gen: uint; }
export type s_stat = struct { st_dev: int; st_mode: ushort; st_nlink: ushort; st_ino: uint64; st_uid: uint; st_gid: uint; st_rdev: int; st_atimespec: s_timespec; st_mtimespec: s_timespec; st_ctimespec: s_timespec; st_birthtimespec: s_timespec; st_size: int64; st_blocks: int64; st_blksize: int; st_flags: uint; st_gen: uint; st_lspare: int; st_qspare: [2; int64]; }
export type s__filesec
export type s_winsize = struct { ws_row: ushort; ws_col: ushort; ws_xpixel: ushort; ws_ypixel: ushort; }
export type s_ttysize = struct { ts_lines: ushort; ts_cols: ushort; ts_xxx: ushort; ts_yyy: ushort; }
export type s___darwin_arm_exception_state = struct { __exception: uint; __fsr: uint; __far: uint; }
export type s___darwin_arm_exception_state64 = struct { __far: uint64; __esr: uint; __exception: uint; }
export type s___darwin_arm_thread_state = struct { __r: [13; uint]; __sp: uint; __lr: uint; __pc: uint; __cpsr: uint; }
export type s___darwin_arm_thread_state64 = struct { __x: [29; uint64]; __fp: uint64; __lr: uint64; __sp: uint64; __pc: uint64; __cpsr: uint; __pad: uint; }
export type s___darwin_arm_vfp_state = struct { __r: [64; uint]; __fpscr: uint; }
export type s___darwin_arm_neon_state64 = struct { __v: [32; uint128]; __fpsr: uint; __fpcr: uint; }
export type s___darwin_arm_neon_state = struct { __v: [16; uint128]; __fpsr: uint; __fpcr: uint; }
export type s___arm_pagein_state = struct { __pagein_error: int; }
export type s___arm_legacy_debug_state = struct { __bvr: [16; uint]; __bcr: [16; uint]; __wvr: [16; uint]; __wcr: [16; uint]; }
export type s___darwin_arm_debug_state32 = struct { __bvr: [16; uint]; __bcr: [16; uint]; __wvr: [16; uint]; __wcr: [16; uint]; __mdscr_el1: uint64; }
export type s___darwin_arm_debug_state64 = struct { __bvr: [16; uint64]; __bcr: [16; uint64]; __wvr: [16; uint64]; __wcr: [16; uint64]; __mdscr_el1: uint64; }
export type s___darwin_arm_cpmu_state64 = struct { __ctrs: [16; uint64]; }
export type s___darwin_mcontext32 = struct { __es: s___darwin_arm_exception_state; __ss: s___darwin_arm_thread_state; __fs: s___darwin_arm_vfp_state; }
export type s___darwin_mcontext64 = struct { __es: s___darwin_arm_exception_state64; __ss: s___darwin_arm_thread_state64; __ns: s___darwin_arm_neon_state64; }
export type s___darwin_sigaltstack = struct { ss_sp: *; ss_size: ulong; ss_flags: int; }
export type s___darwin_ucontext = struct { uc_onstack: int; uc_sigmask: uint; uc_stack: s___darwin_sigaltstack; uc_link: *s___darwin_ucontext; uc_mcsize: ulong; uc_mcontext: *s___darwin_mcontext64; }
export type u_sigval = struct #union { sival_int: int; sival_ptr: *; }
export type s_sigevent = struct { sigev_notify: int; sigev_signo: int; sigev_value: u_sigval; sigev_notify_function: def u_sigval -> ; sigev_notify_attributes: *s__opaque_pthread_attr_t; }
export type u___sigaction_u = struct #union { __sa_handler: def int -> ; __sa_sigaction: def [int, *s___siginfo, *] -> ; }
export type s___sigaction = struct { __sigaction_u: u___sigaction_u; sa_tramp: def [*, int, int, *s___siginfo, *] -> ; sa_mask: uint; sa_flags: int; }
export type s_sigaction = struct { __sigaction_u: u___sigaction_u; sa_mask: uint; sa_flags: int; }
export type s_sigvec = struct { sv_handler: def int -> ; sv_mask: int; sv_flags: int; }
export type s_sigstack = struct { ss_sp: *char; ss_onstack: int; }
export type s_timeval = struct { tv_sec: long; tv_usec: int; }
export type s_rusage = struct { ru_utime: s_timeval; ru_stime: s_timeval; ru_maxrss: long; ru_ixrss: long; ru_idrss: long; ru_isrss: long; ru_minflt: long; ru_majflt: long; ru_nswap: long; ru_inblock: long; ru_oublock: long; ru_msgsnd: long; ru_msgrcv: long; ru_nsignals: long; ru_nvcsw: long; ru_nivcsw: long; }
export type s_rusage_info_v0 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; }
export type s_rusage_info_v1 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; }
export type s_rusage_info_v2 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; }
export type s_rusage_info_v3 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; }
export type s_rusage_info_v4 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; }
export type s_rusage_info_v5 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; ri_flags: uint64; }
export type s_rusage_info_v6 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; ri_flags: uint64; ri_user_ptime: uint64; ri_system_ptime: uint64; ri_pinstructions: uint64; ri_pcycles: uint64; ri_energy_nj: uint64; ri_penergy_nj: uint64; ri_secure_time_in_system: uint64; ri_secure_ptime_in_system: uint64; ri_reserved: [12; uint64]; }
export type s_rlimit = struct { rlim_cur: uint64; rlim_max: uint64; }
export type s_proc_rlimit_control_wakeupmon = struct { wm_flags: uint; wm_rate: int; }
export type s__OSUnalignedU16
export type s__OSUnalignedU32
export type s__OSUnalignedU64
export type u_wait = struct #union { w_status: int; w_T: struct { #bits(7) w_Termsig: uint; #bits(1) w_Coredump: uint; #bits(8) w_Retcode: uint; #bits(16) w_Filler: uint; }; w_S: struct { #bits(8) w_Stopval: uint; #bits(8) w_Stopsig: uint; #bits(16) w_Filler: uint; }; }
export type s_accessx_descriptor = struct { ad_name_offset: uint; ad_flags: int; ad_pad: [2; int]; }
export type s_fssearchblock
export type s_searchstate
export type s_termios = struct { c_iflag: ulong; c_oflag: ulong; c_cflag: ulong; c_lflag: ulong; c_cc: [20; uint8]; c_ispeed: ulong; c_ospeed: ulong; }
export type s_flock = struct { l_start: int64; l_len: int64; l_pid: int; l_type: short; l_whence: short; }
export type s_flocktimeout = struct { fl: s_flock; timeout: s_timespec; }
export type s_radvisory = struct { ra_offset: int64; ra_count: int; }
export type s_log2phys = struct { l2p_flags: uint; l2p_contigbytes: int64; l2p_devoffset: int64; }
export type s_pollfd = struct { fd: int; events: short; revents: short; }
export type s_dirent = struct { d_ino: uint64; d_seekoff: uint64; d_reclen: ushort; d_namlen: ushort; d_type: uint8; d_name: [1024; char]; }
export type s__telldir
export type s_image_offset = struct { uuid: *uint8; offset: uint; }
export const __llvm__: int = 1
export const __clang__: int = 1
export const __clang_major__: int = 17
export const __clang_minor__: int = 0
export const __clang_patchlevel__: int = 6
export const __clang_version__: [char] = "17.0.6 "
export const __GNUC__: int = 4
export const __GNUC_MINOR__: int = 2
export const __GNUC_PATCHLEVEL__: int = 1
export const __GXX_ABI_VERSION: int = 1002
export const __ATOMIC_RELAXED: int = 0
export const __ATOMIC_CONSUME: int = 1
export const __ATOMIC_ACQUIRE: int = 2
export const __ATOMIC_RELEASE: int = 3
export const __ATOMIC_ACQ_REL: int = 4
export const __ATOMIC_SEQ_CST: int = 5
export const __OPENCL_MEMORY_SCOPE_WORK_ITEM: int = 0
export const __OPENCL_MEMORY_SCOPE_WORK_GROUP: int = 1
export const __OPENCL_MEMORY_SCOPE_DEVICE: int = 2
export const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: int = 3
export const __OPENCL_MEMORY_SCOPE_SUB_GROUP: int = 4
export const __PRAGMA_REDEFINE_EXTNAME: int = 1
export const __VERSION__: [char] = "Homebrew Clang 17.0.6"
export const __OBJC_BOOL_IS_BOOL: int = 1
export const __CONSTANT_CFSTRINGS__: int = 1
export const __BLOCKS__: int = 1
export const __clang_literal_encoding__: [char] = "UTF-8"
export const __clang_wide_literal_encoding__: [char] = "UTF-32"
export const __ORDER_LITTLE_ENDIAN__: int = 1234
export const __ORDER_BIG_ENDIAN__: int = 4321
export const __ORDER_PDP_ENDIAN__: int = 3412
export const __LITTLE_ENDIAN__: int = 1
export const _LP64: int = 1
export const __LP64__: int = 1
export const __CHAR_BIT__: int = 8
export const __BOOL_WIDTH__: int = 8
export const __SHRT_WIDTH__: int = 16
export const __INT_WIDTH__: int = 32
export const __LONG_WIDTH__: int = 64
export const __LLONG_WIDTH__: int = 64
export const __BITINT_MAXWIDTH__: int = 128
export const __SCHAR_MAX__: int = 127
export const __SHRT_MAX__: int = 32767
export const __INT_MAX__: int = 2147483647
export const __WCHAR_MAX__: int = 2147483647
export const __WCHAR_WIDTH__: int = 32
export const __WINT_MAX__: int = 2147483647
export const __WINT_WIDTH__: int = 32
export const __INTMAX_WIDTH__: int = 64
export const __SIZE_WIDTH__: int = 64
export const __UINTMAX_WIDTH__: int = 64
export const __PTRDIFF_WIDTH__: int = 64
export const __INTPTR_WIDTH__: int = 64
export const __UINTPTR_WIDTH__: int = 64
export const __SIZEOF_DOUBLE__: int = 8
export const __SIZEOF_FLOAT__: int = 4
export const __SIZEOF_INT__: int = 4
export const __SIZEOF_LONG__: int = 8
export const __SIZEOF_LONG_DOUBLE__: int = 8
export const __SIZEOF_LONG_LONG__: int = 8
export const __SIZEOF_POINTER__: int = 8
export const __SIZEOF_SHORT__: int = 2
export const __SIZEOF_PTRDIFF_T__: int = 8
export const __SIZEOF_SIZE_T__: int = 8
export const __SIZEOF_WCHAR_T__: int = 4
export const __SIZEOF_WINT_T__: int = 4
export const __SIZEOF_INT128__: int = 16
export const __INTMAX_FMTd__: [char] = "ld"
export const __INTMAX_FMTi__: [char] = "li"
export const __UINTMAX_FMTo__: [char] = "lo"
export const __UINTMAX_FMTu__: [char] = "lu"
export const __UINTMAX_FMTx__: [char] = "lx"
export const __UINTMAX_FMTX__: [char] = "lX"
export const __PTRDIFF_FMTd__: [char] = "ld"
export const __PTRDIFF_FMTi__: [char] = "li"
export const __INTPTR_FMTd__: [char] = "ld"
export const __INTPTR_FMTi__: [char] = "li"
export const __SIZE_FMTo__: [char] = "lo"
export const __SIZE_FMTu__: [char] = "lu"
export const __SIZE_FMTx__: [char] = "lx"
export const __SIZE_FMTX__: [char] = "lX"
export const __SIG_ATOMIC_MAX__: int = 2147483647
export const __SIG_ATOMIC_WIDTH__: int = 32
export const __UINTPTR_FMTo__: [char] = "lo"
export const __UINTPTR_FMTu__: [char] = "lu"
export const __UINTPTR_FMTx__: [char] = "lx"
export const __UINTPTR_FMTX__: [char] = "lX"
export const __FLT16_HAS_DENORM__: int = 1
export const __FLT16_DIG__: int = 3
export const __FLT16_DECIMAL_DIG__: int = 5
export const __FLT16_HAS_INFINITY__: int = 1
export const __FLT16_HAS_QUIET_NAN__: int = 1
export const __FLT16_MANT_DIG__: int = 11
export const __FLT16_MAX_10_EXP__: int = 4
export const __FLT16_MAX_EXP__: int = 16
export const __FLT_HAS_DENORM__: int = 1
export const __FLT_DIG__: int = 6
export const __FLT_DECIMAL_DIG__: int = 9
export const __FLT_HAS_INFINITY__: int = 1
export const __FLT_HAS_QUIET_NAN__: int = 1
export const __FLT_MANT_DIG__: int = 24
export const __FLT_MAX_10_EXP__: int = 38
export const __FLT_MAX_EXP__: int = 128
export const __DBL_DENORM_MIN__: double = 4.9406564584124654e-324
export const __DBL_HAS_DENORM__: int = 1
export const __DBL_DIG__: int = 15
export const __DBL_DECIMAL_DIG__: int = 17
export const __DBL_EPSILON__: double = 2.2204460492503131e-16
export const __DBL_HAS_INFINITY__: int = 1
export const __DBL_HAS_QUIET_NAN__: int = 1
export const __DBL_MANT_DIG__: int = 53
export const __DBL_MAX_10_EXP__: int = 308
export const __DBL_MAX_EXP__: int = 1024
export const __DBL_MAX__: double = 1.7976931348623157e+308
export const __DBL_MIN__: double = 2.2250738585072014e-308
export const __LDBL_HAS_DENORM__: int = 1
export const __LDBL_DIG__: int = 15
export const __LDBL_DECIMAL_DIG__: int = 17
export const __LDBL_HAS_INFINITY__: int = 1
export const __LDBL_HAS_QUIET_NAN__: int = 1
export const __LDBL_MANT_DIG__: int = 53
export const __LDBL_MAX_10_EXP__: int = 308
export const __LDBL_MAX_EXP__: int = 1024
export const __POINTER_WIDTH__: int = 64
export const __BIGGEST_ALIGNMENT__: int = 8
export const __INT8_FMTd__: [char] = "hhd"
export const __INT8_FMTi__: [char] = "hhi"
export const __INT16_FMTd__: [char] = "hd"
export const __INT16_FMTi__: [char] = "hi"
export const __INT32_FMTd__: [char] = "d"
export const __INT32_FMTi__: [char] = "i"
export const __INT64_FMTd__: [char] = "lld"
export const __INT64_FMTi__: [char] = "lli"
export const __UINT8_FMTo__: [char] = "hho"
export const __UINT8_FMTu__: [char] = "hhu"
export const __UINT8_FMTx__: [char] = "hhx"
export const __UINT8_FMTX__: [char] = "hhX"
export const __UINT8_MAX__: int = 255
export const __INT8_MAX__: int = 127
export const __UINT16_FMTo__: [char] = "ho"
export const __UINT16_FMTu__: [char] = "hu"
export const __UINT16_FMTx__: [char] = "hx"
export const __UINT16_FMTX__: [char] = "hX"
export const __UINT16_MAX__: int = 65535
export const __INT16_MAX__: int = 32767
export const __UINT32_FMTo__: [char] = "o"
export const __UINT32_FMTu__: [char] = "u"
export const __UINT32_FMTx__: [char] = "x"
export const __UINT32_FMTX__: [char] = "X"
export const __INT32_MAX__: int = 2147483647
export const __UINT64_FMTo__: [char] = "llo"
export const __UINT64_FMTu__: [char] = "llu"
export const __UINT64_FMTx__: [char] = "llx"
export const __UINT64_FMTX__: [char] = "llX"
export const __INT_LEAST8_MAX__: int = 127
export const __INT_LEAST8_WIDTH__: int = 8
export const __INT_LEAST8_FMTd__: [char] = "hhd"
export const __INT_LEAST8_FMTi__: [char] = "hhi"
export const __UINT_LEAST8_MAX__: int = 255
export const __UINT_LEAST8_FMTo__: [char] = "hho"
export const __UINT_LEAST8_FMTu__: [char] = "hhu"
export const __UINT_LEAST8_FMTx__: [char] = "hhx"
export const __UINT_LEAST8_FMTX__: [char] = "hhX"
export const __INT_LEAST16_MAX__: int = 32767
export const __INT_LEAST16_WIDTH__: int = 16
export const __INT_LEAST16_FMTd__: [char] = "hd"
export const __INT_LEAST16_FMTi__: [char] = "hi"
export const __UINT_LEAST16_MAX__: int = 65535
export const __UINT_LEAST16_FMTo__: [char] = "ho"
export const __UINT_LEAST16_FMTu__: [char] = "hu"
export const __UINT_LEAST16_FMTx__: [char] = "hx"
export const __UINT_LEAST16_FMTX__: [char] = "hX"
export const __INT_LEAST32_MAX__: int = 2147483647
export const __INT_LEAST32_WIDTH__: int = 32
export const __INT_LEAST32_FMTd__: [char] = "d"
export const __INT_LEAST32_FMTi__: [char] = "i"
export const __UINT_LEAST32_FMTo__: [char] = "o"
export const __UINT_LEAST32_FMTu__: [char] = "u"
export const __UINT_LEAST32_FMTx__: [char] = "x"
export const __UINT_LEAST32_FMTX__: [char] = "X"
export const __INT_LEAST64_WIDTH__: int = 64
export const __INT_LEAST64_FMTd__: [char] = "lld"
export const __INT_LEAST64_FMTi__: [char] = "lli"
export const __UINT_LEAST64_FMTo__: [char] = "llo"
export const __UINT_LEAST64_FMTu__: [char] = "llu"
export const __UINT_LEAST64_FMTx__: [char] = "llx"
export const __UINT_LEAST64_FMTX__: [char] = "llX"
export const __INT_FAST8_MAX__: int = 127
export const __INT_FAST8_WIDTH__: int = 8
export const __INT_FAST8_FMTd__: [char] = "hhd"
export const __INT_FAST8_FMTi__: [char] = "hhi"
export const __UINT_FAST8_MAX__: int = 255
export const __UINT_FAST8_FMTo__: [char] = "hho"
export const __UINT_FAST8_FMTu__: [char] = "hhu"
export const __UINT_FAST8_FMTx__: [char] = "hhx"
export const __UINT_FAST8_FMTX__: [char] = "hhX"
export const __INT_FAST16_MAX__: int = 32767
export const __INT_FAST16_WIDTH__: int = 16
export const __INT_FAST16_FMTd__: [char] = "hd"
export const __INT_FAST16_FMTi__: [char] = "hi"
export const __UINT_FAST16_MAX__: int = 65535
export const __UINT_FAST16_FMTo__: [char] = "ho"
export const __UINT_FAST16_FMTu__: [char] = "hu"
export const __UINT_FAST16_FMTx__: [char] = "hx"
export const __UINT_FAST16_FMTX__: [char] = "hX"
export const __INT_FAST32_MAX__: int = 2147483647
export const __INT_FAST32_WIDTH__: int = 32
export const __INT_FAST32_FMTd__: [char] = "d"
export const __INT_FAST32_FMTi__: [char] = "i"
export const __UINT_FAST32_FMTo__: [char] = "o"
export const __UINT_FAST32_FMTu__: [char] = "u"
export const __UINT_FAST32_FMTx__: [char] = "x"
export const __UINT_FAST32_FMTX__: [char] = "X"
export const __INT_FAST64_WIDTH__: int = 64
export const __INT_FAST64_FMTd__: [char] = "lld"
export const __INT_FAST64_FMTi__: [char] = "lli"
export const __UINT_FAST64_FMTo__: [char] = "llo"
export const __UINT_FAST64_FMTu__: [char] = "llu"
export const __UINT_FAST64_FMTx__: [char] = "llx"
export const __UINT_FAST64_FMTX__: [char] = "llX"
export const __NO_MATH_ERRNO__: int = 1
export const __FINITE_MATH_ONLY__: int = 0
export const __GNUC_STDC_INLINE__: int = 1
export const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: int = 1
export const __CLANG_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_INT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __GCC_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __GCC_ATOMIC_INT_LOCK_FREE: int = 2
export const __GCC_ATOMIC_LONG_LOCK_FREE: int = 2
export const __GCC_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __GCC_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __NO_INLINE__: int = 1
export const __PIC__: int = 2
export const __pic__: int = 2
export const __FLT_RADIX__: int = 2
export const __SSP__: int = 1
export const __AARCH64EL__: int = 1
export const __aarch64__: int = 1
export const __GCC_ASM_FLAG_OUTPUTS__: int = 1
export const __AARCH64_CMODEL_SMALL__: int = 1
export const __ARM_ACLE: int = 200
export const __ARM_ARCH: int = 8
export const __ARM_64BIT_STATE: int = 1
export const __ARM_PCS_AAPCS64: int = 1
export const __ARM_ARCH_ISA_A64: int = 1
export const __ARM_FEATURE_CLZ: int = 1
export const __ARM_FEATURE_FMA: int = 1
export const __ARM_FEATURE_IDIV: int = 1
export const __ARM_FEATURE_DIV: int = 1
export const __ARM_FEATURE_NUMERIC_MAXMIN: int = 1
export const __ARM_FEATURE_DIRECTED_ROUNDING: int = 1
export const __ARM_ALIGN_MAX_STACK_PWR: int = 4
export const __ARM_FP16_FORMAT_IEEE: int = 1
export const __ARM_FP16_ARGS: int = 1
export const __ARM_SIZEOF_WCHAR_T: int = 4
export const __ARM_SIZEOF_MINIMAL_ENUM: int = 4
export const __ARM_NEON: int = 1
export const __ARM_FEATURE_CRC32: int = 1
export const __ARM_FEATURE_RCPC: int = 1
export const __HAVE_FUNCTION_MULTI_VERSIONING: int = 1
export const __ARM_FEATURE_CRYPTO: int = 1
export const __ARM_FEATURE_AES: int = 1
export const __ARM_FEATURE_SHA2: int = 1
export const __ARM_FEATURE_SHA3: int = 1
export const __ARM_FEATURE_SHA512: int = 1
export const __ARM_FEATURE_UNALIGNED: int = 1
export const __ARM_FEATURE_FP16_VECTOR_ARITHMETIC: int = 1
export const __ARM_FEATURE_FP16_SCALAR_ARITHMETIC: int = 1
export const __ARM_FEATURE_DOTPROD: int = 1
export const __ARM_FEATURE_ATOMICS: int = 1
export const __ARM_FEATURE_FP16_FML: int = 1
export const __ARM_FEATURE_FRINT: int = 1
export const __ARM_FEATURE_BTI: int = 1
export const __ARM_FEATURE_COMPLEX: int = 1
export const __ARM_FEATURE_JCVT: int = 1
export const __ARM_FEATURE_PAUTH: int = 1
export const __ARM_FEATURE_QRDMX: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: int = 1
export const __FP_FAST_FMA: int = 1
export const __FP_FAST_FMAF: int = 1
export const __AARCH64_SIMD__: int = 1
export const __ARM64_ARCH_8__: int = 1
export const __ARM_NEON__: int = 1
export const __arm64: int = 1
export const __arm64__: int = 1
export const __APPLE_CC__: int = 6000
export const __APPLE__: int = 1
export const __STDC_NO_THREADS__: int = 1
export const __DYNAMIC__: int = 1
export const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__: int = 140000
export const __ENVIRONMENT_OS_VERSION_MIN_REQUIRED__: int = 140000
export const __MACH__: int = 1
export const __STDC__: int = 1
export const __STDC_HOSTED__: int = 1
export const __STDC_UTF_16__: int = 1
export const __STDC_UTF_32__: int = 1
export const __GCC_HAVE_DWARF2_CFI_ASM: int = 1
export const __has_safe_buffers: int = 1
export const __DARWIN_ONLY_64_BIT_INO_T: int = 1
export const __DARWIN_ONLY_UNIX_CONFORMANCE: int = 1
export const __DARWIN_ONLY_VERS_1050: int = 1
export const __DARWIN_UNIX03: int = 1
export const __DARWIN_64_BIT_INO_T: int = 1
export const __DARWIN_VERS_1050: int = 1
export const __DARWIN_NON_CANCELABLE: int = 0
export const __DARWIN_SUF_EXTSN: [char] = "$DARWIN_EXTSN"
export const __STDC_WANT_LIB_EXT1__: int = 1
export const __DARWIN_NO_LONG_LONG: int = 0
export const _DARWIN_FEATURE_64_BIT_INODE: int = 1
export const _DARWIN_FEATURE_ONLY_64_BIT_INODE: int = 1
export const _DARWIN_FEATURE_ONLY_VERS_1050: int = 1
export const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: int = 1
export const _DARWIN_FEATURE_UNIX_CONFORMANCE: int = 3
export const __has_ptrcheck: int = 0
export const __PTHREAD_SIZE__: int = 8176
export const __PTHREAD_ATTR_SIZE__: int = 56
export const __PTHREAD_MUTEXATTR_SIZE__: int = 8
export const __PTHREAD_MUTEX_SIZE__: int = 56
export const __PTHREAD_CONDATTR_SIZE__: int = 8
export const __PTHREAD_COND_SIZE__: int = 40
export const __PTHREAD_ONCE_SIZE__: int = 8
export const __PTHREAD_RWLOCK_SIZE__: int = 192
export const __PTHREAD_RWLOCKATTR_SIZE__: int = 16
export const __API_TO_BE_DEPRECATED: int = 100000
export const __API_TO_BE_DEPRECATED_MACOS: int = 100000
export const __API_TO_BE_DEPRECATED_IOS: int = 100000
export const __API_TO_BE_DEPRECATED_MACCATALYST: int = 100000
export const __API_TO_BE_DEPRECATED_WATCHOS: int = 100000
export const __API_TO_BE_DEPRECATED_TVOS: int = 100000
export const __API_TO_BE_DEPRECATED_DRIVERKIT: int = 100000
export const __API_TO_BE_DEPRECATED_VISIONOS: int = 100000
export const __MAC_10_0: int = 1000
export const __MAC_10_1: int = 1010
export const __MAC_10_2: int = 1020
export const __MAC_10_3: int = 1030
export const __MAC_10_4: int = 1040
export const __MAC_10_5: int = 1050
export const __MAC_10_6: int = 1060
export const __MAC_10_7: int = 1070
export const __MAC_10_8: int = 1080
export const __MAC_10_9: int = 1090
export const __MAC_10_10: int = 101000
export const __MAC_10_10_2: int = 101002
export const __MAC_10_10_3: int = 101003
export const __MAC_10_11: int = 101100
export const __MAC_10_11_2: int = 101102
export const __MAC_10_11_3: int = 101103
export const __MAC_10_11_4: int = 101104
export const __MAC_10_12: int = 101200
export const __MAC_10_12_1: int = 101201
export const __MAC_10_12_2: int = 101202
export const __MAC_10_12_4: int = 101204
export const __MAC_10_13: int = 101300
export const __MAC_10_13_1: int = 101301
export const __MAC_10_13_2: int = 101302
export const __MAC_10_13_4: int = 101304
export const __MAC_10_14: int = 101400
export const __MAC_10_14_1: int = 101401
export const __MAC_10_14_4: int = 101404
export const __MAC_10_14_5: int = 101405
export const __MAC_10_14_6: int = 101406
export const __MAC_10_15: int = 101500
export const __MAC_10_15_1: int = 101501
export const __MAC_10_15_4: int = 101504
export const __MAC_10_16: int = 101600
export const __MAC_11_0: int = 110000
export const __MAC_11_1: int = 110100
export const __MAC_11_3: int = 110300
export const __MAC_11_4: int = 110400
export const __MAC_11_5: int = 110500
export const __MAC_11_6: int = 110600
export const __MAC_12_0: int = 120000
export const __MAC_12_1: int = 120100
export const __MAC_12_2: int = 120200
export const __MAC_12_3: int = 120300
export const __MAC_12_4: int = 120400
export const __MAC_12_5: int = 120500
export const __MAC_12_6: int = 120600
export const __MAC_12_7: int = 120700
export const __MAC_13_0: int = 130000
export const __MAC_13_1: int = 130100
export const __MAC_13_2: int = 130200
export const __MAC_13_3: int = 130300
export const __MAC_13_4: int = 130400
export const __MAC_13_5: int = 130500
export const __MAC_13_6: int = 130600
export const __MAC_14_0: int = 140000
export const __MAC_14_1: int = 140100
export const __MAC_14_2: int = 140200
export const __MAC_14_3: int = 140300
export const __MAC_14_4: int = 140400
export const __IPHONE_2_0: int = 20000
export const __IPHONE_2_1: int = 20100
export const __IPHONE_2_2: int = 20200
export const __IPHONE_3_0: int = 30000
export const __IPHONE_3_1: int = 30100
export const __IPHONE_3_2: int = 30200
export const __IPHONE_4_0: int = 40000
export const __IPHONE_4_1: int = 40100
export const __IPHONE_4_2: int = 40200
export const __IPHONE_4_3: int = 40300
export const __IPHONE_5_0: int = 50000
export const __IPHONE_5_1: int = 50100
export const __IPHONE_6_0: int = 60000
export const __IPHONE_6_1: int = 60100
export const __IPHONE_7_0: int = 70000
export const __IPHONE_7_1: int = 70100
export const __IPHONE_8_0: int = 80000
export const __IPHONE_8_1: int = 80100
export const __IPHONE_8_2: int = 80200
export const __IPHONE_8_3: int = 80300
export const __IPHONE_8_4: int = 80400
export const __IPHONE_9_0: int = 90000
export const __IPHONE_9_1: int = 90100
export const __IPHONE_9_2: int = 90200
export const __IPHONE_9_3: int = 90300
export const __IPHONE_10_0: int = 100000
export const __IPHONE_10_1: int = 100100
export const __IPHONE_10_2: int = 100200
export const __IPHONE_10_3: int = 100300
export const __IPHONE_11_0: int = 110000
export const __IPHONE_11_1: int = 110100
export const __IPHONE_11_2: int = 110200
export const __IPHONE_11_3: int = 110300
export const __IPHONE_11_4: int = 110400
export const __IPHONE_12_0: int = 120000
export const __IPHONE_12_1: int = 120100
export const __IPHONE_12_2: int = 120200
export const __IPHONE_12_3: int = 120300
export const __IPHONE_12_4: int = 120400
export const __IPHONE_13_0: int = 130000
export const __IPHONE_13_1: int = 130100
export const __IPHONE_13_2: int = 130200
export const __IPHONE_13_3: int = 130300
export const __IPHONE_13_4: int = 130400
export const __IPHONE_13_5: int = 130500
export const __IPHONE_13_6: int = 130600
export const __IPHONE_13_7: int = 130700
export const __IPHONE_14_0: int = 140000
export const __IPHONE_14_1: int = 140100
export const __IPHONE_14_2: int = 140200
export const __IPHONE_14_3: int = 140300
export const __IPHONE_14_5: int = 140500
export const __IPHONE_14_4: int = 140400
export const __IPHONE_14_6: int = 140600
export const __IPHONE_14_7: int = 140700
export const __IPHONE_14_8: int = 140800
export const __IPHONE_15_0: int = 150000
export const __IPHONE_15_1: int = 150100
export const __IPHONE_15_2: int = 150200
export const __IPHONE_15_3: int = 150300
export const __IPHONE_15_4: int = 150400
export const __IPHONE_15_5: int = 150500
export const __IPHONE_15_6: int = 150600
export const __IPHONE_15_7: int = 150700
export const __IPHONE_15_8: int = 150800
export const __IPHONE_16_0: int = 160000
export const __IPHONE_16_1: int = 160100
export const __IPHONE_16_2: int = 160200
export const __IPHONE_16_3: int = 160300
export const __IPHONE_16_4: int = 160400
export const __IPHONE_16_5: int = 160500
export const __IPHONE_16_6: int = 160600
export const __IPHONE_16_7: int = 160700
export const __IPHONE_17_0: int = 170000
export const __IPHONE_17_1: int = 170100
export const __IPHONE_17_2: int = 170200
export const __IPHONE_17_3: int = 170300
export const __IPHONE_17_4: int = 170400
export const __WATCHOS_1_0: int = 10000
export const __WATCHOS_2_0: int = 20000
export const __WATCHOS_2_1: int = 20100
export const __WATCHOS_2_2: int = 20200
export const __WATCHOS_3_0: int = 30000
export const __WATCHOS_3_1: int = 30100
export const __WATCHOS_3_1_1: int = 30101
export const __WATCHOS_3_2: int = 30200
export const __WATCHOS_4_0: int = 40000
export const __WATCHOS_4_1: int = 40100
export const __WATCHOS_4_2: int = 40200
export const __WATCHOS_4_3: int = 40300
export const __WATCHOS_5_0: int = 50000
export const __WATCHOS_5_1: int = 50100
export const __WATCHOS_5_2: int = 50200
export const __WATCHOS_5_3: int = 50300
export const __WATCHOS_6_0: int = 60000
export const __WATCHOS_6_1: int = 60100
export const __WATCHOS_6_2: int = 60200
export const __WATCHOS_7_0: int = 70000
export const __WATCHOS_7_1: int = 70100
export const __WATCHOS_7_2: int = 70200
export const __WATCHOS_7_3: int = 70300
export const __WATCHOS_7_4: int = 70400
export const __WATCHOS_7_5: int = 70500
export const __WATCHOS_7_6: int = 70600
export const __WATCHOS_8_0: int = 80000
export const __WATCHOS_8_1: int = 80100
export const __WATCHOS_8_3: int = 80300
export const __WATCHOS_8_4: int = 80400
export const __WATCHOS_8_5: int = 80500
export const __WATCHOS_8_6: int = 80600
export const __WATCHOS_8_7: int = 80700
export const __WATCHOS_8_8: int = 80800
export const __WATCHOS_9_0: int = 90000
export const __WATCHOS_9_1: int = 90100
export const __WATCHOS_9_2: int = 90200
export const __WATCHOS_9_3: int = 90300
export const __WATCHOS_9_4: int = 90400
export const __WATCHOS_9_5: int = 90500
export const __WATCHOS_9_6: int = 90600
export const __WATCHOS_10_0: int = 100000
export const __WATCHOS_10_1: int = 100100
export const __WATCHOS_10_2: int = 100200
export const __WATCHOS_10_3: int = 100300
export const __WATCHOS_10_4: int = 100400
export const __TVOS_9_0: int = 90000
export const __TVOS_9_1: int = 90100
export const __TVOS_9_2: int = 90200
export const __TVOS_10_0: int = 100000
export const __TVOS_10_0_1: int = 100001
export const __TVOS_10_1: int = 100100
export const __TVOS_10_2: int = 100200
export const __TVOS_11_0: int = 110000
export const __TVOS_11_1: int = 110100
export const __TVOS_11_2: int = 110200
export const __TVOS_11_3: int = 110300
export const __TVOS_11_4: int = 110400
export const __TVOS_12_0: int = 120000
export const __TVOS_12_1: int = 120100
export const __TVOS_12_2: int = 120200
export const __TVOS_12_3: int = 120300
export const __TVOS_12_4: int = 120400
export const __TVOS_13_0: int = 130000
export const __TVOS_13_2: int = 130200
export const __TVOS_13_3: int = 130300
export const __TVOS_13_4: int = 130400
export const __TVOS_14_0: int = 140000
export const __TVOS_14_1: int = 140100
export const __TVOS_14_2: int = 140200
export const __TVOS_14_3: int = 140300
export const __TVOS_14_5: int = 140500
export const __TVOS_14_6: int = 140600
export const __TVOS_14_7: int = 140700
export const __TVOS_15_0: int = 150000
export const __TVOS_15_1: int = 150100
export const __TVOS_15_2: int = 150200
export const __TVOS_15_3: int = 150300
export const __TVOS_15_4: int = 150400
export const __TVOS_15_5: int = 150500
export const __TVOS_15_6: int = 150600
export const __TVOS_16_0: int = 160000
export const __TVOS_16_1: int = 160100
export const __TVOS_16_2: int = 160200
export const __TVOS_16_3: int = 160300
export const __TVOS_16_4: int = 160400
export const __TVOS_16_5: int = 160500
export const __TVOS_16_6: int = 160600
export const __TVOS_17_0: int = 170000
export const __TVOS_17_1: int = 170100
export const __TVOS_17_2: int = 170200
export const __TVOS_17_3: int = 170300
export const __TVOS_17_4: int = 170400
export const __BRIDGEOS_2_0: int = 20000
export const __BRIDGEOS_3_0: int = 30000
export const __BRIDGEOS_3_1: int = 30100
export const __BRIDGEOS_3_4: int = 30400
export const __BRIDGEOS_4_0: int = 40000
export const __BRIDGEOS_4_1: int = 40100
export const __BRIDGEOS_5_0: int = 50000
export const __BRIDGEOS_5_1: int = 50100
export const __BRIDGEOS_5_3: int = 50300
export const __BRIDGEOS_6_0: int = 60000
export const __BRIDGEOS_6_2: int = 60200
export const __BRIDGEOS_6_4: int = 60400
export const __BRIDGEOS_6_5: int = 60500
export const __BRIDGEOS_6_6: int = 60600
export const __BRIDGEOS_7_0: int = 70000
export const __BRIDGEOS_7_1: int = 70100
export const __BRIDGEOS_7_2: int = 70200
export const __BRIDGEOS_7_3: int = 70300
export const __BRIDGEOS_7_4: int = 70400
export const __BRIDGEOS_7_6: int = 70600
export const __BRIDGEOS_8_0: int = 80000
export const __BRIDGEOS_8_1: int = 80100
export const __BRIDGEOS_8_2: int = 80200
export const __BRIDGEOS_8_3: int = 80300
export const __BRIDGEOS_8_4: int = 80400
export const __DRIVERKIT_19_0: int = 190000
export const __DRIVERKIT_20_0: int = 200000
export const __DRIVERKIT_21_0: int = 210000
export const __DRIVERKIT_22_0: int = 220000
export const __DRIVERKIT_22_4: int = 220400
export const __DRIVERKIT_22_5: int = 220500
export const __DRIVERKIT_22_6: int = 220600
export const __DRIVERKIT_23_0: int = 230000
export const __DRIVERKIT_23_1: int = 230100
export const __DRIVERKIT_23_2: int = 230200
export const __DRIVERKIT_23_3: int = 230300
export const __DRIVERKIT_23_4: int = 230400
export const __VISIONOS_1_0: int = 10000
export const __VISIONOS_1_1: int = 10100
export const __ENABLE_LEGACY_MAC_AVAILABILITY: int = 1
export const S_IFMT: int = 0170000
export const S_IFIFO: int = 0010000
export const S_IFCHR: int = 0020000
export const S_IFDIR: int = 0040000
export const S_IFBLK: int = 0060000
export const S_IFREG: int = 0100000
export const S_IFLNK: int = 0120000
export const S_IFSOCK: int = 0140000
export const S_IFWHT: int = 0160000
export const S_IRWXU: int = 0000700
export const S_IRUSR: int = 0000400
export const S_IWUSR: int = 0000200
export const S_IXUSR: int = 0000100
export const S_IRWXG: int = 0000070
export const S_IRGRP: int = 0000040
export const S_IWGRP: int = 0000020
export const S_IXGRP: int = 0000010
export const S_IRWXO: int = 0000007
export const S_IROTH: int = 0000004
export const S_IWOTH: int = 0000002
export const S_IXOTH: int = 0000001
export const S_ISUID: int = 0004000
export const S_ISGID: int = 0002000
export const S_ISVTX: int = 0001000
export const S_BLKSIZE: int = 512
export const TIOCM_LE: int = 0001
export const TIOCM_DTR: int = 0002
export const TIOCM_RTS: int = 0004
export const TIOCM_ST: int = 0010
export const TIOCM_SR: int = 0020
export const TIOCM_CTS: int = 0040
export const TIOCM_CAR: int = 0100
export const TIOCM_RNG: int = 0200
export const TIOCM_DSR: int = 0400
export const TTYDISC: int = 0
export const TABLDISC: int = 3
export const SLIPDISC: int = 4
export const PPPDISC: int = 5
export const __DARWIN_NSIG: int = 32
export const _ARM_SIGNAL_: int = 1
export const SIGHUP: int = 1
export const SIGINT: int = 2
export const SIGQUIT: int = 3
export const SIGILL: int = 4
export const SIGTRAP: int = 5
export const SIGABRT: int = 6
export const SIGEMT: int = 7
export const SIGFPE: int = 8
export const SIGKILL: int = 9
export const SIGBUS: int = 10
export const SIGSEGV: int = 11
export const SIGSYS: int = 12
export const SIGPIPE: int = 13
export const SIGALRM: int = 14
export const SIGTERM: int = 15
export const SIGURG: int = 16
export const SIGSTOP: int = 17
export const SIGTSTP: int = 18
export const SIGCONT: int = 19
export const SIGCHLD: int = 20
export const SIGTTIN: int = 21
export const SIGTTOU: int = 22
export const SIGIO: int = 23
export const SIGXCPU: int = 24
export const SIGXFSZ: int = 25
export const SIGVTALRM: int = 26
export const SIGPROF: int = 27
export const SIGWINCH: int = 28
export const SIGINFO: int = 29
export const SIGUSR1: int = 30
export const SIGUSR2: int = 31
export const __DARWIN_OPAQUE_ARM_THREAD_STATE64: int = 0
export const SIGEV_NONE: int = 0
export const SIGEV_SIGNAL: int = 1
export const SIGEV_THREAD: int = 3
export const ILL_NOOP: int = 0
export const ILL_ILLOPC: int = 1
export const ILL_ILLTRP: int = 2
export const ILL_PRVOPC: int = 3
export const ILL_ILLOPN: int = 4
export const ILL_ILLADR: int = 5
export const ILL_PRVREG: int = 6
export const ILL_COPROC: int = 7
export const ILL_BADSTK: int = 8
export const FPE_NOOP: int = 0
export const FPE_FLTDIV: int = 1
export const FPE_FLTOVF: int = 2
export const FPE_FLTUND: int = 3
export const FPE_FLTRES: int = 4
export const FPE_FLTINV: int = 5
export const FPE_FLTSUB: int = 6
export const FPE_INTDIV: int = 7
export const FPE_INTOVF: int = 8
export const SEGV_NOOP: int = 0
export const SEGV_MAPERR: int = 1
export const SEGV_ACCERR: int = 2
export const BUS_NOOP: int = 0
export const BUS_ADRALN: int = 1
export const BUS_ADRERR: int = 2
export const BUS_OBJERR: int = 3
export const TRAP_BRKPT: int = 1
export const TRAP_TRACE: int = 2
export const CLD_NOOP: int = 0
export const CLD_EXITED: int = 1
export const CLD_KILLED: int = 2
export const CLD_DUMPED: int = 3
export const CLD_TRAPPED: int = 4
export const CLD_STOPPED: int = 5
export const CLD_CONTINUED: int = 6
export const POLL_IN: int = 1
export const POLL_OUT: int = 2
export const POLL_MSG: int = 3
export const POLL_ERR: int = 4
export const POLL_PRI: int = 5
export const POLL_HUP: int = 6
export const SIG_BLOCK: int = 1
export const SIG_UNBLOCK: int = 2
export const SIG_SETMASK: int = 3
export const MINSIGSTKSZ: int = 32768
export const SIGSTKSZ: int = 131072
export const __WORDSIZE: int = 64
export const INT8_MAX: int = 127
export const INT16_MAX: int = 32767
export const INT32_MAX: int = 2147483647
export const UINT8_MAX: int = 255
export const UINT16_MAX: int = 65535
export const PRIO_PROCESS: int = 0
export const PRIO_PGRP: int = 1
export const PRIO_USER: int = 2
export const PRIO_DARWIN_THREAD: int = 3
export const PRIO_DARWIN_PROCESS: int = 4
export const PRIO_MAX: int = 20
export const RUSAGE_SELF: int = 0
export const RUSAGE_INFO_V0: int = 0
export const RUSAGE_INFO_V1: int = 1
export const RUSAGE_INFO_V2: int = 2
export const RUSAGE_INFO_V3: int = 3
export const RUSAGE_INFO_V4: int = 4
export const RUSAGE_INFO_V5: int = 5
export const RUSAGE_INFO_V6: int = 6
export const RLIMIT_CPU: int = 0
export const RLIMIT_FSIZE: int = 1
export const RLIMIT_DATA: int = 2
export const RLIMIT_STACK: int = 3
export const RLIMIT_CORE: int = 4
export const RLIMIT_AS: int = 5
export const RLIMIT_MEMLOCK: int = 6
export const RLIMIT_NPROC: int = 7
export const RLIMIT_NOFILE: int = 8
export const RLIM_NLIMITS: int = 9
export const IOPOL_TYPE_DISK: int = 0
export const IOPOL_TYPE_VFS_ATIME_UPDATES: int = 2
export const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: int = 3
export const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: int = 4
export const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: int = 5
export const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: int = 6
export const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: int = 7
export const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: int = 8
export const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: int = 9
export const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: int = 10
export const IOPOL_SCOPE_PROCESS: int = 0
export const IOPOL_SCOPE_THREAD: int = 1
export const IOPOL_SCOPE_DARWIN_BG: int = 2
export const IOPOL_DEFAULT: int = 0
export const IOPOL_IMPORTANT: int = 1
export const IOPOL_PASSIVE: int = 2
export const IOPOL_THROTTLE: int = 3
export const IOPOL_UTILITY: int = 4
export const IOPOL_STANDARD: int = 5
export const IOPOL_ATIME_UPDATES_DEFAULT: int = 0
export const IOPOL_ATIME_UPDATES_OFF: int = 1
export const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: int = 0
export const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: int = 1
export const IOPOL_MATERIALIZE_DATALESS_FILES_ON: int = 2
export const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: int = 0
export const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: int = 1
export const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: int = 0
export const IOPOL_VFS_TRIGGER_RESOLVE_OFF: int = 1
export const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: int = 0
export const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: int = 1
export const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: int = 0
export const IOPOL_VFS_IGNORE_PERMISSIONS_ON: int = 1
export const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: int = 0
export const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: int = 1
export const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: int = 0
export const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: int = 1
export const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: int = 0
export const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: int = 1
export const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: int = 0
export const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: int = 1
export const WCOREFLAG: int = 0200
export const _WSTOPPED: int = 0177
export const WAIT_MYPGRP: int = 0
export const _QUAD_HIGHWORD: int = 1
export const _QUAD_LOWWORD: int = 0
export const __DARWIN_LITTLE_ENDIAN: int = 1234
export const __DARWIN_BIG_ENDIAN: int = 4321
export const __DARWIN_PDP_ENDIAN: int = 3412
export const POSIX_MADV_NORMAL: int = 0
export const POSIX_MADV_RANDOM: int = 1
export const POSIX_MADV_SEQUENTIAL: int = 2
export const POSIX_MADV_WILLNEED: int = 3
export const POSIX_MADV_DONTNEED: int = 4
export const MADV_FREE: int = 5
export const MADV_ZERO_WIRED_PAGES: int = 6
export const MADV_FREE_REUSABLE: int = 7
export const MADV_FREE_REUSE: int = 8
export const MADV_CAN_REUSE: int = 9
export const MADV_PAGEOUT: int = 10
export const MADV_ZERO: int = 11
export const __DARWIN_FD_SETSIZE: int = 1024
export const __DARWIN_NBBY: int = 8
export const _FORTIFY_SOURCE: int = 2
export const _POSIX_THREAD_KEYS_MAX: int = 128
export const F_OK: int = 0
export const SEEK_SET: int = 0
export const SEEK_CUR: int = 1
export const SEEK_END: int = 2
export const SEEK_HOLE: int = 3
export const SEEK_DATA: int = 4
export const ACCESSX_MAX_DESCRIPTORS: int = 100
export const _PC_LINK_MAX: int = 1
export const _PC_MAX_CANON: int = 2
export const _PC_MAX_INPUT: int = 3
export const _PC_NAME_MAX: int = 4
export const _PC_PATH_MAX: int = 5
export const _PC_PIPE_BUF: int = 6
export const _PC_CHOWN_RESTRICTED: int = 7
export const _PC_NO_TRUNC: int = 8
export const _PC_VDISABLE: int = 9
export const _PC_NAME_CHARS_MAX: int = 10
export const _PC_CASE_SENSITIVE: int = 11
export const _PC_CASE_PRESERVING: int = 12
export const _PC_EXTENDED_SECURITY_NP: int = 13
export const _PC_AUTH_OPAQUE_NP: int = 14
export const _PC_2_SYMLINKS: int = 15
export const _PC_ALLOC_SIZE_MIN: int = 16
export const _PC_ASYNC_IO: int = 17
export const _PC_FILESIZEBITS: int = 18
export const _PC_PRIO_IO: int = 19
export const _PC_REC_INCR_XFER_SIZE: int = 20
export const _PC_REC_MAX_XFER_SIZE: int = 21
export const _PC_REC_MIN_XFER_SIZE: int = 22
export const _PC_REC_XFER_ALIGN: int = 23
export const _PC_SYMLINK_MAX: int = 24
export const _PC_SYNC_IO: int = 25
export const _PC_XATTR_SIZE_BITS: int = 26
export const _PC_MIN_HOLE_SIZE: int = 27
export const _CS_PATH: int = 1
export const STDIN_FILENO: int = 0
export const STDOUT_FILENO: int = 1
export const STDERR_FILENO: int = 2
export const _XOPEN_VERSION: int = 600
export const _XOPEN_XCU_VERSION: int = 4
export const _SC_ARG_MAX: int = 1
export const _SC_CHILD_MAX: int = 2
export const _SC_CLK_TCK: int = 3
export const _SC_NGROUPS_MAX: int = 4
export const _SC_OPEN_MAX: int = 5
export const _SC_JOB_CONTROL: int = 6
export const _SC_SAVED_IDS: int = 7
export const _SC_VERSION: int = 8
export const _SC_BC_BASE_MAX: int = 9
export const _SC_BC_DIM_MAX: int = 10
export const _SC_BC_SCALE_MAX: int = 11
export const _SC_BC_STRING_MAX: int = 12
export const _SC_COLL_WEIGHTS_MAX: int = 13
export const _SC_EXPR_NEST_MAX: int = 14
export const _SC_LINE_MAX: int = 15
export const _SC_RE_DUP_MAX: int = 16
export const _SC_2_VERSION: int = 17
export const _SC_2_C_BIND: int = 18
export const _SC_2_C_DEV: int = 19
export const _SC_2_CHAR_TERM: int = 20
export const _SC_2_FORT_DEV: int = 21
export const _SC_2_FORT_RUN: int = 22
export const _SC_2_LOCALEDEF: int = 23
export const _SC_2_SW_DEV: int = 24
export const _SC_2_UPE: int = 25
export const _SC_STREAM_MAX: int = 26
export const _SC_TZNAME_MAX: int = 27
export const _SC_ASYNCHRONOUS_IO: int = 28
export const _SC_PAGESIZE: int = 29
export const _SC_MEMLOCK: int = 30
export const _SC_MEMLOCK_RANGE: int = 31
export const _SC_MEMORY_PROTECTION: int = 32
export const _SC_MESSAGE_PASSING: int = 33
export const _SC_PRIORITIZED_IO: int = 34
export const _SC_PRIORITY_SCHEDULING: int = 35
export const _SC_REALTIME_SIGNALS: int = 36
export const _SC_SEMAPHORES: int = 37
export const _SC_FSYNC: int = 38
export const _SC_SHARED_MEMORY_OBJECTS: int = 39
export const _SC_SYNCHRONIZED_IO: int = 40
export const _SC_TIMERS: int = 41
export const _SC_AIO_LISTIO_MAX: int = 42
export const _SC_AIO_MAX: int = 43
export const _SC_AIO_PRIO_DELTA_MAX: int = 44
export const _SC_DELAYTIMER_MAX: int = 45
export const _SC_MQ_OPEN_MAX: int = 46
export const _SC_MAPPED_FILES: int = 47
export const _SC_RTSIG_MAX: int = 48
export const _SC_SEM_NSEMS_MAX: int = 49
export const _SC_SEM_VALUE_MAX: int = 50
export const _SC_SIGQUEUE_MAX: int = 51
export const _SC_TIMER_MAX: int = 52
export const _SC_NPROCESSORS_CONF: int = 57
export const _SC_NPROCESSORS_ONLN: int = 58
export const _SC_2_PBS: int = 59
export const _SC_2_PBS_ACCOUNTING: int = 60
export const _SC_2_PBS_CHECKPOINT: int = 61
export const _SC_2_PBS_LOCATE: int = 62
export const _SC_2_PBS_MESSAGE: int = 63
export const _SC_2_PBS_TRACK: int = 64
export const _SC_ADVISORY_INFO: int = 65
export const _SC_BARRIERS: int = 66
export const _SC_CLOCK_SELECTION: int = 67
export const _SC_CPUTIME: int = 68
export const _SC_FILE_LOCKING: int = 69
export const _SC_GETGR_R_SIZE_MAX: int = 70
export const _SC_GETPW_R_SIZE_MAX: int = 71
export const _SC_HOST_NAME_MAX: int = 72
export const _SC_LOGIN_NAME_MAX: int = 73
export const _SC_MONOTONIC_CLOCK: int = 74
export const _SC_MQ_PRIO_MAX: int = 75
export const _SC_READER_WRITER_LOCKS: int = 76
export const _SC_REGEXP: int = 77
export const _SC_SHELL: int = 78
export const _SC_SPAWN: int = 79
export const _SC_SPIN_LOCKS: int = 80
export const _SC_SPORADIC_SERVER: int = 81
export const _SC_THREAD_ATTR_STACKADDR: int = 82
export const _SC_THREAD_ATTR_STACKSIZE: int = 83
export const _SC_THREAD_CPUTIME: int = 84
export const _SC_THREAD_DESTRUCTOR_ITERATIONS: int = 85
export const _SC_THREAD_KEYS_MAX: int = 86
export const _SC_THREAD_PRIO_INHERIT: int = 87
export const _SC_THREAD_PRIO_PROTECT: int = 88
export const _SC_THREAD_PRIORITY_SCHEDULING: int = 89
export const _SC_THREAD_PROCESS_SHARED: int = 90
export const _SC_THREAD_SAFE_FUNCTIONS: int = 91
export const _SC_THREAD_SPORADIC_SERVER: int = 92
export const _SC_THREAD_STACK_MIN: int = 93
export const _SC_THREAD_THREADS_MAX: int = 94
export const _SC_TIMEOUTS: int = 95
export const _SC_THREADS: int = 96
export const _SC_TRACE: int = 97
export const _SC_TRACE_EVENT_FILTER: int = 98
export const _SC_TRACE_INHERIT: int = 99
export const _SC_TRACE_LOG: int = 100
export const _SC_TTY_NAME_MAX: int = 101
export const _SC_TYPED_MEMORY_OBJECTS: int = 102
export const _SC_V6_ILP32_OFF32: int = 103
export const _SC_V6_ILP32_OFFBIG: int = 104
export const _SC_V6_LP64_OFF64: int = 105
export const _SC_V6_LPBIG_OFFBIG: int = 106
export const _SC_IPV6: int = 118
export const _SC_RAW_SOCKETS: int = 119
export const _SC_SYMLOOP_MAX: int = 120
export const _SC_ATEXIT_MAX: int = 107
export const _SC_IOV_MAX: int = 56
export const _SC_XOPEN_CRYPT: int = 108
export const _SC_XOPEN_ENH_I18N: int = 109
export const _SC_XOPEN_LEGACY: int = 110
export const _SC_XOPEN_REALTIME: int = 111
export const _SC_XOPEN_REALTIME_THREADS: int = 112
export const _SC_XOPEN_SHM: int = 113
export const _SC_XOPEN_STREAMS: int = 114
export const _SC_XOPEN_UNIX: int = 115
export const _SC_XOPEN_VERSION: int = 116
export const _SC_XOPEN_XCU_VERSION: int = 121
export const _SC_XBS5_ILP32_OFF32: int = 122
export const _SC_XBS5_ILP32_OFFBIG: int = 123
export const _SC_XBS5_LP64_OFF64: int = 124
export const _SC_XBS5_LPBIG_OFFBIG: int = 125
export const _SC_SS_REPL_MAX: int = 126
export const _SC_TRACE_EVENT_NAME_MAX: int = 127
export const _SC_TRACE_NAME_MAX: int = 128
export const _SC_TRACE_SYS_MAX: int = 129
export const _SC_TRACE_USER_EVENT_MAX: int = 130
export const _SC_PASS_MAX: int = 131
export const _SC_PHYS_PAGES: int = 200
export const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: int = 2
export const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: int = 3
export const _CS_POSIX_V6_ILP32_OFF32_LIBS: int = 4
export const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: int = 5
export const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: int = 6
export const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: int = 7
export const _CS_POSIX_V6_LP64_OFF64_CFLAGS: int = 8
export const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: int = 9
export const _CS_POSIX_V6_LP64_OFF64_LIBS: int = 10
export const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: int = 11
export const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: int = 12
export const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: int = 13
export const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: int = 14
export const _CS_XBS5_ILP32_OFF32_CFLAGS: int = 20
export const _CS_XBS5_ILP32_OFF32_LDFLAGS: int = 21
export const _CS_XBS5_ILP32_OFF32_LIBS: int = 22
export const _CS_XBS5_ILP32_OFF32_LINTFLAGS: int = 23
export const _CS_XBS5_ILP32_OFFBIG_CFLAGS: int = 24
export const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: int = 25
export const _CS_XBS5_ILP32_OFFBIG_LIBS: int = 26
export const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: int = 27
export const _CS_XBS5_LP64_OFF64_CFLAGS: int = 28
export const _CS_XBS5_LP64_OFF64_LDFLAGS: int = 29
export const _CS_XBS5_LP64_OFF64_LIBS: int = 30
export const _CS_XBS5_LP64_OFF64_LINTFLAGS: int = 31
export const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: int = 32
export const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: int = 33
export const _CS_XBS5_LPBIG_OFFBIG_LIBS: int = 34
export const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: int = 35
export const _CS_DARWIN_USER_DIR: int = 65536
export const _CS_DARWIN_USER_TEMP_DIR: int = 65537
export const _CS_DARWIN_USER_CACHE_DIR: int = 65538
export const F_ULOCK: int = 0
export const F_LOCK: int = 1
export const F_TLOCK: int = 2
export const F_TEST: int = 3
export const VEOF: int = 0
export const VEOL: int = 1
export const VEOL2: int = 2
export const VERASE: int = 3
export const VWERASE: int = 4
export const VKILL: int = 5
export const VREPRINT: int = 6
export const VINTR: int = 8
export const VQUIT: int = 9
export const VSUSP: int = 10
export const VDSUSP: int = 11
export const VSTART: int = 12
export const VSTOP: int = 13
export const VLNEXT: int = 14
export const VDISCARD: int = 15
export const VMIN: int = 16
export const VTIME: int = 17
export const VSTATUS: int = 18
export const NCCS: int = 20
export const TCSANOW: int = 0
export const TCSADRAIN: int = 1
export const TCSAFLUSH: int = 2
export const B0: int = 0
export const B50: int = 50
export const B75: int = 75
export const B110: int = 110
export const B134: int = 134
export const B150: int = 150
export const B200: int = 200
export const B300: int = 300
export const B600: int = 600
export const B1200: int = 1200
export const B1800: int = 1800
export const B2400: int = 2400
export const B4800: int = 4800
export const B9600: int = 9600
export const B19200: int = 19200
export const B38400: int = 38400
export const B7200: int = 7200
export const B14400: int = 14400
export const B28800: int = 28800
export const B57600: int = 57600
export const B76800: int = 76800
export const B115200: int = 115200
export const B230400: int = 230400
export const EXTA: int = 19200
export const EXTB: int = 38400
export const TCIFLUSH: int = 1
export const TCOFLUSH: int = 2
export const TCIOFLUSH: int = 3
export const TCOOFF: int = 1
export const TCOON: int = 2
export const TCIOFF: int = 3
export const TCION: int = 4
export const CERASE: int = 0177
export const CMIN: int = 1
export const CQUIT: int = 034
export const CTIME: int = 0
export const EXIT_FAILURE: int = 1
export const EXIT_SUCCESS: int = 0
export const F_DUPFD: int = 0
export const F_GETFD: int = 1
export const F_SETFD: int = 2
export const F_GETFL: int = 3
export const F_SETFL: int = 4
export const F_GETOWN: int = 5
export const F_SETOWN: int = 6
export const F_GETLK: int = 7
export const F_SETLK: int = 8
export const F_SETLKW: int = 9
export const F_SETLKWTIMEOUT: int = 10
export const F_FLUSH_DATA: int = 40
export const F_CHKCLEAN: int = 41
export const F_PREALLOCATE: int = 42
export const F_SETSIZE: int = 43
export const F_RDADVISE: int = 44
export const F_RDAHEAD: int = 45
export const F_NOCACHE: int = 48
export const F_LOG2PHYS: int = 49
export const F_GETPATH: int = 50
export const F_FULLFSYNC: int = 51
export const F_PATHPKG_CHECK: int = 52
export const F_FREEZE_FS: int = 53
export const F_THAW_FS: int = 54
export const F_GLOBAL_NOCACHE: int = 55
export const F_ADDSIGS: int = 59
export const F_ADDFILESIGS: int = 61
export const F_NODIRECT: int = 62
export const F_GETPROTECTIONCLASS: int = 63
export const F_SETPROTECTIONCLASS: int = 64
export const F_LOG2PHYS_EXT: int = 65
export const F_GETLKPID: int = 66
export const F_SETBACKINGSTORE: int = 70
export const F_GETPATH_MTMINFO: int = 71
export const F_GETCODEDIR: int = 72
export const F_SETNOSIGPIPE: int = 73
export const F_GETNOSIGPIPE: int = 74
export const F_TRANSCODEKEY: int = 75
export const F_SINGLE_WRITER: int = 76
export const F_GETPROTECTIONLEVEL: int = 77
export const F_FINDSIGS: int = 78
export const F_ADDFILESIGS_FOR_DYLD_SIM: int = 83
export const F_BARRIERFSYNC: int = 85
export const F_OFD_SETLK: int = 90
export const F_OFD_SETLKW: int = 91
export const F_OFD_GETLK: int = 92
export const F_OFD_SETLKWTIMEOUT: int = 93
export const F_ADDFILESIGS_RETURN: int = 97
export const F_CHECK_LV: int = 98
export const F_PUNCHHOLE: int = 99
export const F_TRIM_ACTIVE_FILE: int = 100
export const F_SPECULATIVE_READ: int = 101
export const F_GETPATH_NOFIRMLINK: int = 102
export const F_ADDFILESIGS_INFO: int = 103
export const F_ADDFILESUPPL: int = 104
export const F_GETSIGSINFO: int = 105
export const F_SETLEASE: int = 106
export const F_GETLEASE: int = 107
export const F_TRANSFEREXTENTS: int = 110
export const F_ATTRIBUTION_TAG: int = 111
export const F_DUPFD_CLOEXEC: int = 67
export const FD_CLOEXEC: int = 1
export const F_RDLCK: int = 1
export const F_UNLCK: int = 2
export const F_WRLCK: int = 3
export const F_PEOFPOSMODE: int = 3
export const F_VOLPOSMODE: int = 4
export const USER_FSIGNATURES_CDHASH_LEN: int = 20
export const GETSIGSINFO_PLATFORM_BINARY: int = 1
export const ATTRIBUTION_NAME_MAX: int = 255
export const __LIBELF64: int = 1
export const __LIBELF_SYMBOL_VERSIONS: int = 1
export const ELF32_FSZ_ADDR: int = 4
export const ELF32_FSZ_HALF: int = 2
export const ELF32_FSZ_OFF: int = 4
export const ELF32_FSZ_SWORD: int = 4
export const ELF32_FSZ_WORD: int = 4
export const ELF64_FSZ_ADDR: int = 8
export const ELF64_FSZ_HALF: int = 2
export const ELF64_FSZ_OFF: int = 8
export const ELF64_FSZ_SWORD: int = 4
export const ELF64_FSZ_WORD: int = 4
export const ELF64_FSZ_SXWORD: int = 8
export const ELF64_FSZ_XWORD: int = 8
export const EI_NIDENT: int = 16
export const EI_MAG0: int = 0
export const EI_MAG1: int = 1
export const EI_MAG2: int = 2
export const EI_MAG3: int = 3
export const EI_CLASS: int = 4
export const EI_DATA: int = 5
export const EI_VERSION: int = 6
export const EI_OSABI: int = 7
export const EI_ABIVERSION: int = 8
export const EI_PAD: int = 9
export const ELFMAG: [char] = "\x7fELF"
export const SELFMAG: int = 4
export const ELFCLASSNONE: int = 0
export const ELFCLASS32: int = 1
export const ELFCLASS64: int = 2
export const ELFCLASSNUM: int = 3
export const ELFDATANONE: int = 0
export const ELFDATA2LSB: int = 1
export const ELFDATA2MSB: int = 2
export const ELFDATANUM: int = 3
export const ELFOSABI_NONE: int = 0
export const ELFOSABI_HPUX: int = 1
export const ELFOSABI_NETBSD: int = 2
export const ELFOSABI_LINUX: int = 3
export const ELFOSABI_SOLARIS: int = 6
export const ELFOSABI_AIX: int = 7
export const ELFOSABI_IRIX: int = 8
export const ELFOSABI_FREEBSD: int = 9
export const ELFOSABI_TRU64: int = 10
export const ELFOSABI_MODESTO: int = 11
export const ELFOSABI_OPENBSD: int = 12
export const ELFOSABI_OPENVMS: int = 13
export const ELFOSABI_NSK: int = 14
export const ELFOSABI_AROS: int = 15
export const ELFOSABI_ARM: int = 97
export const ELFOSABI_STANDALONE: int = 255
export const ET_NONE: int = 0
export const ET_REL: int = 1
export const ET_EXEC: int = 2
export const ET_DYN: int = 3
export const ET_CORE: int = 4
export const ET_NUM: int = 5
export const EM_NONE: int = 0
export const EM_M32: int = 1
export const EM_SPARC: int = 2
export const EM_386: int = 3
export const EM_68K: int = 4
export const EM_88K: int = 5
export const EM_486: int = 6
export const EM_860: int = 7
export const EM_MIPS: int = 8
export const EM_S370: int = 9
export const EM_MIPS_RS3_LE: int = 10
export const EM_SPARC64: int = 11
export const EM_PARISC: int = 15
export const EM_VPP500: int = 17
export const EM_SPARC32PLUS: int = 18
export const EM_960: int = 19
export const EM_PPC: int = 20
export const EM_PPC64: int = 21
export const EM_S390: int = 22
export const EM_V800: int = 36
export const EM_FR20: int = 37
export const EM_RH32: int = 38
export const EM_RCE: int = 39
export const EM_ARM: int = 40
export const EM_ALPHA: int = 41
export const EM_SH: int = 42
export const EM_SPARCV9: int = 43
export const EM_TRICORE: int = 44
export const EM_ARC: int = 45
export const EM_H8_300: int = 46
export const EM_H8_300H: int = 47
export const EM_H8S: int = 48
export const EM_H8_500: int = 49
export const EM_IA_64: int = 50
export const EM_MIPS_X: int = 51
export const EM_COLDFIRE: int = 52
export const EM_68HC12: int = 53
export const EM_MMA: int = 54
export const EM_PCP: int = 55
export const EM_NCPU: int = 56
export const EM_NDR1: int = 57
export const EM_STARCORE: int = 58
export const EM_ME16: int = 59
export const EM_ST100: int = 60
export const EM_TINYJ: int = 61
export const EM_X86_64: int = 62
export const EM_PDSP: int = 63
export const EM_FX66: int = 66
export const EM_ST9PLUS: int = 67
export const EM_ST7: int = 68
export const EM_68HC16: int = 69
export const EM_68HC11: int = 70
export const EM_68HC08: int = 71
export const EM_68HC05: int = 72
export const EM_SVX: int = 73
export const EM_ST19: int = 74
export const EM_VAX: int = 75
export const EM_CRIS: int = 76
export const EM_JAVELIN: int = 77
export const EM_FIREPATH: int = 78
export const EM_ZSP: int = 79
export const EM_MMIX: int = 80
export const EM_HUANY: int = 81
export const EM_PRISM: int = 82
export const EM_AVR: int = 83
export const EM_FR30: int = 84
export const EM_D10V: int = 85
export const EM_D30V: int = 86
export const EM_V850: int = 87
export const EM_M32R: int = 88
export const EM_MN10300: int = 89
export const EM_MN10200: int = 90
export const EM_PJ: int = 91
export const EM_OPENRISC: int = 92
export const EM_ARC_A5: int = 93
export const EM_XTENSA: int = 94
export const EM_VIDEOCORE: int = 95
export const EM_TMM_GPP: int = 96
export const EM_NS32K: int = 97
export const EM_TPC: int = 98
export const EM_SNP1K: int = 99
export const EM_ST200: int = 100
export const EM_IP2K: int = 101
export const EM_MAX: int = 102
export const EM_CR: int = 103
export const EM_F2MC16: int = 104
export const EM_MSP430: int = 105
export const EM_BLACKFIN: int = 106
export const EM_SE_C33: int = 107
export const EM_SEP: int = 108
export const EM_ARCA: int = 109
export const EM_UNICORE: int = 110
export const EM_NUM: int = 111
export const EV_NONE: int = 0
export const EV_CURRENT: int = 1
export const EV_NUM: int = 2
export const SHN_UNDEF: int = 0
export const SHT_NULL: int = 0
export const SHT_PROGBITS: int = 1
export const SHT_SYMTAB: int = 2
export const SHT_STRTAB: int = 3
export const SHT_RELA: int = 4
export const SHT_HASH: int = 5
export const SHT_DYNAMIC: int = 6
export const SHT_NOTE: int = 7
export const SHT_NOBITS: int = 8
export const SHT_REL: int = 9
export const SHT_SHLIB: int = 10
export const SHT_DYNSYM: int = 11
export const SHT_INIT_ARRAY: int = 14
export const SHT_FINI_ARRAY: int = 15
export const SHT_PREINIT_ARRAY: int = 16
export const SHT_GROUP: int = 17
export const SHT_SYMTAB_SHNDX: int = 18
export const SHT_NUM: int = 19
export const STN_UNDEF: int = 0
export const STB_LOCAL: int = 0
export const STB_GLOBAL: int = 1
export const STB_WEAK: int = 2
export const STB_NUM: int = 3
export const STB_LOOS: int = 10
export const STB_HIOS: int = 12
export const STB_LOPROC: int = 13
export const STB_HIPROC: int = 15
export const STT_NOTYPE: int = 0
export const STT_OBJECT: int = 1
export const STT_FUNC: int = 2
export const STT_SECTION: int = 3
export const STT_FILE: int = 4
export const STT_COMMON: int = 5
export const STT_TLS: int = 6
export const STT_NUM: int = 7
export const STT_LOOS: int = 10
export const STT_HIOS: int = 12
export const STT_LOPROC: int = 13
export const STT_HIPROC: int = 15
export const STV_DEFAULT: int = 0
export const STV_INTERNAL: int = 1
export const STV_HIDDEN: int = 2
export const STV_PROTECTED: int = 3
export const NT_PRSTATUS: int = 1
export const NT_PRFPREG: int = 2
export const NT_PRPSINFO: int = 3
export const PT_NULL: int = 0
export const PT_LOAD: int = 1
export const PT_DYNAMIC: int = 2
export const PT_INTERP: int = 3
export const PT_NOTE: int = 4
export const PT_SHLIB: int = 5
export const PT_PHDR: int = 6
export const PT_TLS: int = 7
export const PT_NUM: int = 8
export const DT_NULL: int = 0
export const DT_NEEDED: int = 1
export const DT_PLTRELSZ: int = 2
export const DT_PLTGOT: int = 3
export const DT_HASH: int = 4
export const DT_STRTAB: int = 5
export const DT_SYMTAB: int = 6
export const DT_RELA: int = 7
export const DT_RELASZ: int = 8
export const DT_RELAENT: int = 9
export const DT_STRSZ: int = 10
export const DT_SYMENT: int = 11
export const DT_INIT: int = 12
export const DT_FINI: int = 13
export const DT_SONAME: int = 14
export const DT_RPATH: int = 15
export const DT_SYMBOLIC: int = 16
export const DT_REL: int = 17
export const DT_RELSZ: int = 18
export const DT_RELENT: int = 19
export const DT_PLTREL: int = 20
export const DT_DEBUG: int = 21
export const DT_TEXTREL: int = 22
export const DT_JMPREL: int = 23
export const DT_BIND_NOW: int = 24
export const DT_INIT_ARRAY: int = 25
export const DT_FINI_ARRAY: int = 26
export const DT_INIT_ARRAYSZ: int = 27
export const DT_FINI_ARRAYSZ: int = 28
export const DT_RUNPATH: int = 29
export const DT_FLAGS: int = 30
export const DT_ENCODING: int = 32
export const DT_PREINIT_ARRAY: int = 32
export const DT_PREINIT_ARRAYSZ: int = 33
export const DT_NUM: int = 34
export const SYMINFO_NONE: int = 0
export const SYMINFO_CURRENT: int = 1
export const SYMINFO_NUM: int = 2
export const VER_DEF_NONE: int = 0
export const VER_DEF_CURRENT: int = 1
export const VER_DEF_NUM: int = 2
export const VER_NEED_NONE: int = 0
export const VER_NEED_CURRENT: int = 1
export const VER_NEED_NUM: int = 2
export const VER_NDX_LOCAL: int = 0
export const VER_NDX_GLOBAL: int = 1
export const CA_SUNW_NULL: int = 0
export const CA_SUNW_HW_1: int = 1
export const CA_SUNW_SF_1: int = 2
export const FNM_NOMATCH: int = 1
export const __DARWIN_MAXNAMLEN: int = 255
export const __DARWIN_MAXPATHLEN: int = 1024
export const DT_UNKNOWN: int = 0
export const DT_FIFO: int = 1
export const DT_CHR: int = 2
export const DT_DIR: int = 4
export const DT_BLK: int = 6
export const DT_REG: int = 8
export const DT_LNK: int = 10
export const DT_SOCK: int = 12
export const DT_WHT: int = 14
export const DIRBLKSIZ: int = 1024
export const EPERM: int = 1
export const ENOENT: int = 2
export const ESRCH: int = 3
export const EINTR: int = 4
export const EIO: int = 5
export const ENXIO: int = 6
export const E2BIG: int = 7
export const ENOEXEC: int = 8
export const EBADF: int = 9
export const ECHILD: int = 10
export const EDEADLK: int = 11
export const ENOMEM: int = 12
export const EACCES: int = 13
export const EFAULT: int = 14
export const ENOTBLK: int = 15
export const EBUSY: int = 16
export const EEXIST: int = 17
export const EXDEV: int = 18
export const ENODEV: int = 19
export const ENOTDIR: int = 20
export const EISDIR: int = 21
export const EINVAL: int = 22
export const ENFILE: int = 23
export const EMFILE: int = 24
export const ENOTTY: int = 25
export const ETXTBSY: int = 26
export const EFBIG: int = 27
export const ENOSPC: int = 28
export const ESPIPE: int = 29
export const EROFS: int = 30
export const EMLINK: int = 31
export const EPIPE: int = 32
export const EDOM: int = 33
export const ERANGE: int = 34
export const EAGAIN: int = 35
export const EINPROGRESS: int = 36
export const EALREADY: int = 37
export const ENOTSOCK: int = 38
export const EDESTADDRREQ: int = 39
export const EMSGSIZE: int = 40
export const EPROTOTYPE: int = 41
export const ENOPROTOOPT: int = 42
export const EPROTONOSUPPORT: int = 43
export const ESOCKTNOSUPPORT: int = 44
export const ENOTSUP: int = 45
export const EPFNOSUPPORT: int = 46
export const EAFNOSUPPORT: int = 47
export const EADDRINUSE: int = 48
export const EADDRNOTAVAIL: int = 49
export const ENETDOWN: int = 50
export const ENETUNREACH: int = 51
export const ENETRESET: int = 52
export const ECONNABORTED: int = 53
export const ECONNRESET: int = 54
export const ENOBUFS: int = 55
export const EISCONN: int = 56
export const ENOTCONN: int = 57
export const ESHUTDOWN: int = 58
export const ETOOMANYREFS: int = 59
export const ETIMEDOUT: int = 60
export const ECONNREFUSED: int = 61
export const ELOOP: int = 62
export const ENAMETOOLONG: int = 63
export const EHOSTDOWN: int = 64
export const EHOSTUNREACH: int = 65
export const ENOTEMPTY: int = 66
export const EPROCLIM: int = 67
export const EUSERS: int = 68
export const EDQUOT: int = 69
export const ESTALE: int = 70
export const EREMOTE: int = 71
export const EBADRPC: int = 72
export const ERPCMISMATCH: int = 73
export const EPROGUNAVAIL: int = 74
export const EPROGMISMATCH: int = 75
export const EPROCUNAVAIL: int = 76
export const ENOLCK: int = 77
export const ENOSYS: int = 78
export const EFTYPE: int = 79
export const EAUTH: int = 80
export const ENEEDAUTH: int = 81
export const EPWROFF: int = 82
export const EDEVERR: int = 83
export const EOVERFLOW: int = 84
export const EBADEXEC: int = 85
export const EBADARCH: int = 86
export const ESHLIBVERS: int = 87
export const EBADMACHO: int = 88
export const ECANCELED: int = 89
export const EIDRM: int = 90
export const ENOMSG: int = 91
export const EILSEQ: int = 92
export const ENOATTR: int = 93
export const EBADMSG: int = 94
export const EMULTIHOP: int = 95
export const ENODATA: int = 96
export const ENOLINK: int = 97
export const ENOSR: int = 98
export const ENOSTR: int = 99
export const EPROTO: int = 100
export const ETIME: int = 101
export const EOPNOTSUPP: int = 102
export const ENOPOLICY: int = 103
export const ENOTRECOVERABLE: int = 104
export const EOWNERDEAD: int = 105
export const EQFULL: int = 106
export const ELAST: int = 106
export const _EXECINFO_H_: int = 1
export const API_TO_BE_DEPRECATED: int = 100000
export const API_TO_BE_DEPRECATED_MACOS: int = 100000
export const API_TO_BE_DEPRECATED_IOS: int = 100000
export const API_TO_BE_DEPRECATED_TVOS: int = 100000
export const API_TO_BE_DEPRECATED_WATCHOS: int = 100000
export const API_TO_BE_DEPRECATED_DRIVERKIT: int = 100000
export const API_TO_BE_DEPRECATED_VISIONOS: int = 100000
export import def #extern chmod(_0: *char, _1: ushort) -> int
export import def #extern fchmod(_0: int, _1: ushort) -> int
export import def #extern fstat(_0: int, _1: *s_stat) -> int
export import def #extern lstat(_0: *char, _1: *s_stat) -> int
export import def #extern mkdir(_0: *char, _1: ushort) -> int
export import def #extern mkfifo(_0: *char, _1: ushort) -> int
export import def #extern stat(_0: *char, _1: *s_stat) -> int
export import def #extern mknod(_0: *char, _1: ushort, _2: int) -> int
export import def #extern umask(_0: ushort) -> ushort
export import def #extern fchmodat(_0: int, _1: *char, _2: ushort, _3: int) -> int
export import def #extern fstatat(_0: int, _1: *char, _2: *s_stat, _3: int) -> int
export import def #extern mkdirat(_0: int, _1: *char, _2: ushort) -> int
export import def #extern mkfifoat(_0: int, _1: *char, _2: ushort) -> int
export import def #extern mknodat(_0: int, _1: *char, _2: ushort, _3: int) -> int
export import def #extern futimens(__fd: int, __times: *s_timespec) -> int
export import def #extern utimensat(__fd: int, __path: *char, __times: *s_timespec, __flag: int) -> int
export import def #extern chflags(_0: *char, _1: uint) -> int
export import def #extern chmodx_np(_0: *char, _1: *s__filesec) -> int
export import def #extern fchflags(_0: int, _1: uint) -> int
export import def #extern fchmodx_np(_0: int, _1: *s__filesec) -> int
export import def #extern fstatx_np(_0: int, _1: *s_stat, _2: *s__filesec) -> int
export import def #extern lchflags(_0: *char, _1: uint) -> int
export import def #extern lstatx_np(_0: *char, _1: *s_stat, _2: *s__filesec) -> int
export import def #extern mkdirx_np(_0: *char, _1: *s__filesec) -> int
export import def #extern mkfifox_np(_0: *char, _1: *s__filesec) -> int
export import def #extern statx_np(_0: *char, _1: *s_stat, _2: *s__filesec) -> int
export import def #extern umaskx_np(_0: *s__filesec) -> int
export import def #extern ioctl(_0: int, _1: ulong, ...) -> int
export const P_ALL: int = 0
export const P_PID: int = 1
export const P_PGID: int = 2
export import def #extern signal(_0: int, _1: def int -> ) -> def int -> 
export import def #extern getpriority(_0: int, _1: uint) -> int
export import def #extern getiopolicy_np(_0: int, _1: int) -> int
export import def #extern getrlimit(_0: int, _1: *s_rlimit) -> int
export import def #extern getrusage(_0: int, _1: *s_rusage) -> int
export import def #extern setpriority(_0: int, _1: uint, _2: int) -> int
export import def #extern setiopolicy_np(_0: int, _1: int, _2: int) -> int
export import def #extern setrlimit(_0: int, _1: *s_rlimit) -> int
export import def #extern wait(_0: *int) -> int
export import def #extern waitpid(_0: int, _1: *int, _2: int) -> int
export import def #extern waitid(_0: e_idtype_t, _1: uint, _2: *s___siginfo, _3: int) -> int
export import def #extern wait3(_0: *int, _1: int, _2: *s_rusage) -> int
export import def #extern wait4(_0: int, _1: *int, _2: int, _3: *s_rusage) -> int
export import def #extern mlockall(_0: int) -> int
export import def #extern munlockall() -> int
export import def #extern mlock(_0: *, _1: ulong) -> int
export import def #extern mmap(_0: *, _1: ulong, _2: int, _3: int, _4: int, _5: int64) -> *
export import def #extern mprotect(_0: *, _1: ulong, _2: int) -> int
export import def #extern msync(_0: *, _1: ulong, _2: int) -> int
export import def #extern munlock(_0: *, _1: ulong) -> int
export import def #extern munmap(_0: *, _1: ulong) -> int
export import def #extern posix_madvise(_0: *, _1: ulong, _2: int) -> int
export import def #extern madvise(_0: *, _1: ulong, _2: int) -> int
export import def #extern mincore(_0: *, _1: ulong, _2: *char) -> int
export import def #extern minherit(_0: *, _1: ulong, _2: int) -> int
export import def #extern __darwin_check_fd_set_overflow(_0: int, _1: *, _2: int) -> int
export import def #extern getattrlistbulk(_0: int, _1: *, _2: *, _3: ulong, _4: uint64) -> int
export import def #extern getattrlistat(_0: int, _1: *char, _2: *, _3: *, _4: ulong, _5: ulong) -> int
export import def #extern setattrlistat(_0: int, _1: *char, _2: *, _3: *, _4: ulong, _5: uint) -> int
export import def #extern freadlink(_0: int, _1: *char, _2: ulong) -> long
export import def #extern faccessat(_0: int, _1: *char, _2: int, _3: int) -> int
export import def #extern fchownat(_0: int, _1: *char, _2: uint, _3: uint, _4: int) -> int
export import def #extern linkat(_0: int, _1: *char, _2: int, _3: *char, _4: int) -> int
export import def #extern readlinkat(_0: int, _1: *char, _2: *char, _3: ulong) -> long
export import def #extern symlinkat(_0: *char, _1: int, _2: *char) -> int
export import def #extern unlinkat(_0: int, _1: *char, _2: int) -> int
export import def #extern _exit(_0: int)
export import def #extern access(_0: *char, _1: int) -> int
export import def #extern alarm(_0: uint) -> uint
export import def #extern chdir(_0: *char) -> int
export import def #extern chown(_0: *char, _1: uint, _2: uint) -> int
export import def #extern close(_0: int) -> int
export import def #extern dup(_0: int) -> int
export import def #extern dup2(_0: int, _1: int) -> int
export import def #extern execl(__path: *char, __arg0: *char, ...) -> int
export import def #extern execle(__path: *char, __arg0: *char, ...) -> int
export import def #extern execlp(__file: *char, __arg0: *char, ...) -> int
export import def #extern execv(__path: *char, __argv: **char) -> int
export import def #extern execve(__file: *char, __argv: **char, __envp: **char) -> int
export import def #extern execvp(__file: *char, __argv: **char) -> int
export import def #extern fork() -> int
export import def #extern fpathconf(_0: int, _1: int) -> long
export import def #extern getcwd(_0: *char, _1: ulong) -> *char
export import def #extern getegid() -> uint
export import def #extern geteuid() -> uint
export import def #extern getgid() -> uint
export import def #extern getgroups(_0: int, _1: *uint) -> int
export import def #extern getlogin() -> *char
export import def #extern getpgrp() -> int
export import def #extern getpid() -> int
export import def #extern getppid() -> int
export import def #extern getuid() -> uint
export import def #extern isatty(_0: int) -> int
export import def #extern link(_0: *char, _1: *char) -> int
export import def #extern lseek(_0: int, _1: int64, _2: int) -> int64
export import def #extern pathconf(_0: *char, _1: int) -> long
export import def #extern pause() -> int
export import def #extern pipe(_0: *int) -> int
export import def #extern read(_0: int, _1: *, _2: ulong) -> long
export import def #extern rmdir(_0: *char) -> int
export import def #extern setgid(_0: uint) -> int
export import def #extern setpgid(_0: int, _1: int) -> int
export import def #extern setsid() -> int
export import def #extern setuid(_0: uint) -> int
export import def #extern sleep(_0: uint) -> uint
export import def #extern sysconf(_0: int) -> long
export import def #extern tcgetpgrp(_0: int) -> int
export import def #extern tcsetpgrp(_0: int, _1: int) -> int
export import def #extern ttyname(_0: int) -> *char
export import def #extern ttyname_r(_0: int, _1: *char, _2: ulong) -> int
export import def #extern unlink(_0: *char) -> int
export import def #extern write(__fd: int, __buf: *, __nbyte: ulong) -> long
export import def #extern confstr(_0: int, _1: *char, _2: ulong) -> ulong
export import def #extern getopt(_0: int, _1: **char, _2: *char) -> int
export import var #extern optarg: *char
export import var #extern optind: int
export import var #extern opterr: int
export import var #extern optopt: int
export import def #extern ctermid(_0: *char) -> *char
export import def #extern brk(_0: *) -> *
export import def #extern chroot(_0: *char) -> int
export import def #extern encrypt(_0: *char, _1: int)
export import def #extern fchdir(_0: int) -> int
export import def #extern gethostid() -> long
export import def #extern getpgid(_0: int) -> int
export import def #extern getsid(_0: int) -> int
export import def #extern getdtablesize() -> int
export import def #extern getpagesize() -> int
export import def #extern getpass(_0: *char) -> *char
export import def #extern lchown(_0: *char, _1: uint, _2: uint) -> int
export import def #extern lockf(_0: int, _1: int, _2: int64) -> int
export import def #extern nice(_0: int) -> int
export import def #extern pread(__fd: int, __buf: *, __nbyte: ulong, __offset: int64) -> long
export import def #extern pwrite(__fd: int, __buf: *, __nbyte: ulong, __offset: int64) -> long
export import def #extern sbrk(_0: int) -> *
export import def #extern setpgrp() -> int
export import def #extern setregid(_0: uint, _1: uint) -> int
export import def #extern setreuid(_0: uint, _1: uint) -> int
export import def #extern swab(_0: *, _1: *, _2: long)
export import def #extern sync()
export import def #extern truncate(_0: *char, _1: int64) -> int
export import def #extern ualarm(_0: uint, _1: uint) -> uint
export import def #extern usleep(_0: uint) -> int
export import def #extern vfork() -> int
export import def #extern fsync(_0: int) -> int
export import def #extern ftruncate(_0: int, _1: int64) -> int
export import def #extern getlogin_r(_0: *char, _1: ulong) -> int
export import def #extern fchown(_0: int, _1: uint, _2: uint) -> int
export import def #extern gethostname(_0: *char, _1: ulong) -> int
export import def #extern readlink(_0: *char, _1: *char, _2: ulong) -> long
export import def #extern setegid(_0: uint) -> int
export import def #extern seteuid(_0: uint) -> int
export import def #extern symlink(_0: *char, _1: *char) -> int
export import def #extern pselect(_0: int, _1: *s_fd_set, _2: *s_fd_set, _3: *s_fd_set, _4: *s_timespec, _5: *uint) -> int
export import def #extern select(_0: int, _1: *s_fd_set, _2: *s_fd_set, _3: *s_fd_set, _4: *s_timeval) -> int
export import def #extern _Exit(_0: int)
export import def #extern accessx_np(_0: *s_accessx_descriptor, _1: ulong, _2: *int, _3: uint) -> int
export import def #extern acct(_0: *char) -> int
export import def #extern endusershell()
export import def #extern execvP(__file: *char, __searchpath: *char, __argv: **char) -> int
export import def #extern fflagstostr(_0: ulong) -> *char
export import def #extern getdomainname(_0: *char, _1: int) -> int
export import def #extern getgrouplist(_0: *char, _1: int, _2: *int, _3: *int) -> int
export import def #extern gethostuuid(_0: *uint8, _1: *s_timespec) -> int
export import def #extern getmode(_0: *, _1: ushort) -> ushort
export import def #extern getpeereid(_0: int, _1: *uint, _2: *uint) -> int
export import def #extern getsgroups_np(_0: *int, _1: *uint8) -> int
export import def #extern getusershell() -> *char
export import def #extern getwgroups_np(_0: *int, _1: *uint8) -> int
export import def #extern initgroups(_0: *char, _1: int) -> int
export import def #extern issetugid() -> int
export import def #extern mkdtemp(_0: *char) -> *char
export import def #extern mkpath_np(path: *char, omode: ushort) -> int
export import def #extern mkpathat_np(dfd: int, path: *char, omode: ushort) -> int
export import def #extern mkstemp(_0: *char) -> int
export import def #extern mkstemps(_0: *char, _1: int) -> int
export import def #extern mkostemp(path: *char, oflags: int) -> int
export import def #extern mkostemps(path: *char, slen: int, oflags: int) -> int
export import def #extern mkstemp_dprotected_np(path: *char, dpclass: int, dpflags: int) -> int
export import def #extern mkdtempat_np(dfd: int, path: *char) -> *char
export import def #extern mkstempsat_np(dfd: int, path: *char, slen: int) -> int
export import def #extern mkostempsat_np(dfd: int, path: *char, slen: int, oflags: int) -> int
export import def #extern nfssvc(_0: int, _1: *) -> int
export import def #extern pthread_setugid_np(_0: uint, _1: uint) -> int
export import def #extern pthread_getugid_np(_0: *uint, _1: *uint) -> int
export import def #extern reboot(_0: int) -> int
export import def #extern rcmd(_0: **char, _1: int, _2: *char, _3: *char, _4: *char, _5: *int) -> int
export import def #extern rcmd_af(_0: **char, _1: int, _2: *char, _3: *char, _4: *char, _5: *int, _6: int) -> int
export import def #extern rresvport(_0: *int) -> int
export import def #extern rresvport_af(_0: *int, _1: int) -> int
export import def #extern iruserok(_0: ulong, _1: int, _2: *char, _3: *char) -> int
export import def #extern iruserok_sa(_0: *, _1: int, _2: int, _3: *char, _4: *char) -> int
export import def #extern ruserok(_0: *char, _1: int, _2: *char, _3: *char) -> int
export import def #extern setdomainname(_0: *char, _1: int) -> int
export import def #extern setgroups(_0: int, _1: *uint) -> int
export import def #extern sethostname(_0: *char, _1: int) -> int
export import def #extern setkey(_0: *char)
export import def #extern setmode(_0: *char) -> *
export import def #extern setrgid(_0: uint) -> int
export import def #extern setruid(_0: uint) -> int
export import def #extern setsgroups_np(_0: int, _1: *uint8) -> int
export import def #extern setusershell()
export import def #extern setwgroups_np(_0: int, _1: *uint8) -> int
export import def #extern strtofflags(_0: **char, _1: *ulong, _2: *ulong) -> int
export import def #extern swapon(_0: *char) -> int
export import def #extern undelete(_0: *char) -> int
export import def #extern valloc(_0: ulong) -> *
export import def #extern syscall(_0: int, ...) -> int
export import var #extern suboptarg: *char
export import def #extern getsubopt(_0: **char, _1: **char, _2: **char) -> int
export import def #extern fgetattrlist(_0: int, _1: *, _2: *, _3: ulong, _4: uint) -> int
export import def #extern fsetattrlist(_0: int, _1: *, _2: *, _3: ulong, _4: uint) -> int
export import def #extern getattrlist(_0: *char, _1: *, _2: *, _3: ulong, _4: uint) -> int
export import def #extern setattrlist(_0: *char, _1: *, _2: *, _3: ulong, _4: uint) -> int
export import def #extern exchangedata(_0: *char, _1: *char, _2: uint) -> int
export import def #extern getdirentriesattr(_0: int, _1: *, _2: *, _3: ulong, _4: *uint, _5: *uint, _6: *uint, _7: uint) -> int
export import def #extern searchfs(_0: *char, _1: *s_fssearchblock, _2: *ulong, _3: uint, _4: uint, _5: *s_searchstate) -> int
export import def #extern fsctl(_0: *char, _1: ulong, _2: *, _3: uint) -> int
export import def #extern ffsctl(_0: int, _1: ulong, _2: *, _3: uint) -> int
export import def #extern fsync_volume_np(_0: int, _1: int) -> int
export import def #extern sync_volume_np(_0: *char, _1: int) -> int
export import var #extern optreset: int
export import def #extern cfgetispeed(_0: *s_termios) -> ulong
export import def #extern cfgetospeed(_0: *s_termios) -> ulong
export import def #extern cfsetispeed(_0: *s_termios, _1: ulong) -> int
export import def #extern cfsetospeed(_0: *s_termios, _1: ulong) -> int
export import def #extern tcgetattr(_0: int, _1: *s_termios) -> int
export import def #extern tcsetattr(_0: int, _1: int, _2: *s_termios) -> int
export import def #extern tcdrain(_0: int) -> int
export import def #extern tcflow(_0: int, _1: int) -> int
export import def #extern tcflush(_0: int, _1: int) -> int
export import def #extern tcsendbreak(_0: int, _1: int) -> int
export import def #extern cfmakeraw(_0: *s_termios)
export import def #extern cfsetspeed(_0: *s_termios, _1: ulong) -> int
export import def #extern tcgetsid(_0: int) -> int
export import var #extern __mb_cur_max: int
export import def #extern malloc_type_malloc(size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_calloc(count: ulong, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_free(ptr: *, type_id: uint64)
export import def #extern malloc_type_realloc(ptr: *, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_valloc(size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_aligned_alloc(alignment: ulong, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_posix_memalign(memptr: **, alignment: ulong, size: ulong, type_id: uint64) -> int
export import def #extern malloc_type_zone_malloc(zone: *s__malloc_zone_t, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_zone_calloc(zone: *s__malloc_zone_t, count: ulong, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_zone_free(zone: *s__malloc_zone_t, ptr: *, type_id: uint64)
export import def #extern malloc_type_zone_realloc(zone: *s__malloc_zone_t, ptr: *, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_zone_valloc(zone: *s__malloc_zone_t, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_zone_memalign(zone: *s__malloc_zone_t, alignment: ulong, size: ulong, type_id: uint64) -> *
export import def #extern reallocf(__ptr: *, __size: ulong) -> *
export import def #extern aligned_alloc(__alignment: ulong, __size: ulong) -> *
export import def #extern posix_memalign(__memptr: **, __alignment: ulong, __size: ulong) -> int
export import def #extern atoll(_0: *char) -> int64
export import def #extern llabs(_0: int64) -> int64
export import def #extern lldiv(_0: int64, _1: int64) -> s_lldiv_t
export import def #extern strtof(_0: *char, _1: **char) -> float
export import def #extern strtold(_0: *char, _1: **char) -> float80
export import def #extern strtoll(__str: *char, __endptr: **char, __base: int) -> int64
export import def #extern strtoull(__str: *char, __endptr: **char, __base: int) -> uint64
export import def #extern a64l(_0: *char) -> long
export import def #extern drand48() -> double
export import def #extern ecvt(_0: double, _1: int, _2: *int, _3: *int) -> *char
export import def #extern erand48(_0: *ushort) -> double
export import def #extern fcvt(_0: double, _1: int, _2: *int, _3: *int) -> *char
export import def #extern gcvt(_0: double, _1: int, _2: *char) -> *char
export import def #extern grantpt(_0: int) -> int
export import def #extern initstate(_0: uint, _1: *char, _2: ulong) -> *char
export import def #extern jrand48(_0: *ushort) -> long
export import def #extern l64a(_0: long) -> *char
export import def #extern lcong48(_0: *ushort)
export import def #extern lrand48() -> long
export import def #extern mrand48() -> long
export import def #extern nrand48(_0: *ushort) -> long
export import def #extern posix_openpt(_0: int) -> int
export import def #extern ptsname(_0: int) -> *char
export import def #extern ptsname_r(fildes: int, buffer: *char, buflen: ulong) -> int
export import def #extern putenv(_0: *char) -> int
export import def #extern random() -> long
export import def #extern rand_r(_0: *uint) -> int
export import def #extern realpath(_0: *char, _1: *char) -> *char
export import def #extern seed48(_0: *ushort) -> *ushort
export import def #extern setenv(__name: *char, __value: *char, __overwrite: int) -> int
export import def #extern setstate(_0: *char) -> *char
export import def #extern srand48(_0: long)
export import def #extern srandom(_0: uint)
export import def #extern unlockpt(_0: int) -> int
export import def #extern unsetenv(_0: *char) -> int
export import def #extern arc4random() -> uint
export import def #extern arc4random_addrandom(_0: *uint8, _1: int)
export import def #extern arc4random_buf(__buf: *, __nbytes: ulong)
export import def #extern arc4random_stir()
export import def #extern arc4random_uniform(__upper_bound: uint) -> uint
export import def #extern cgetcap(_0: *char, _1: *char, _2: int) -> *char
export import def #extern cgetclose() -> int
export import def #extern cgetent(_0: **char, _1: **char, _2: *char) -> int
export import def #extern cgetfirst(_0: **char, _1: **char) -> int
export import def #extern cgetmatch(_0: *char, _1: *char) -> int
export import def #extern cgetnext(_0: **char, _1: **char) -> int
export import def #extern cgetnum(_0: *char, _1: *char, _2: *long) -> int
export import def #extern cgetset(_0: *char) -> int
export import def #extern cgetstr(_0: *char, _1: *char, _2: **char) -> int
export import def #extern cgetustr(_0: *char, _1: *char, _2: **char) -> int
export import def #extern daemon(_0: int, _1: int) -> int
export import def #extern devname(_0: int, _1: ushort) -> *char
export import def #extern devname_r(_0: int, _1: ushort, buf: *char, len: int) -> *char
export import def #extern getbsize(_0: *int, _1: *long) -> *char
export import def #extern getloadavg(_0: *double, _1: int) -> int
export import def #extern getprogname() -> *char
export import def #extern setprogname(_0: *char)
export import def #extern heapsort(__base: *, __nel: ulong, __width: ulong, __compar: def [*, *] -> int) -> int
export import def #extern mergesort(__base: *, __nel: ulong, __width: ulong, __compar: def [*, *] -> int) -> int
export import def #extern psort(__base: *, __nel: ulong, __width: ulong, __compar: def [*, *] -> int)
export import def #extern psort_r(__base: *, __nel: ulong, __width: ulong, _3: *, __compar: def [*, *, *] -> int)
export import def #extern qsort_r(__base: *, __nel: ulong, __width: ulong, _3: *, __compar: def [*, *, *] -> int)
export import def #extern radixsort(__base: **uint8, __nel: int, __table: *uint8, __endbyte: uint) -> int
export import def #extern sradixsort(__base: **uint8, __nel: int, __table: *uint8, __endbyte: uint) -> int
export import def #extern sranddev()
export import def #extern srandomdev()
export import def #extern strtonum(__numstr: *char, __minval: int64, __maxval: int64, __errstrp: **char) -> int64
export import def #extern dladdr(_0: *, _1: *s_dl_info) -> int
export import def #extern dlclose(__handle: *) -> int
export import def #extern dlerror() -> *char
export import def #extern dlopen(__path: *char, __mode: int) -> *
export import def #extern dlsym(__handle: *, __symbol: *char) -> *
export import def #extern dlopen_preflight(__path: *char) -> int
export const FILESEC_OWNER: int = 1
export const FILESEC_GROUP: int = 2
export const FILESEC_UUID: int = 3
export const FILESEC_MODE: int = 4
export const FILESEC_ACL: int = 5
export const FILESEC_GRPUUID: int = 6
export const FILESEC_ACL_RAW: int = 100
export const FILESEC_ACL_ALLOCSIZE: int = 101
export import def #extern open(_0: *char, _1: int, ...) -> int
export import def #extern openat(_0: int, _1: *char, _2: int, ...) -> int
export import def #extern creat(_0: *char, _1: ushort) -> int
export import def #extern fcntl(_0: int, _1: int, ...) -> int
export import def #extern openx_np(_0: *char, _1: int, _2: *s__filesec) -> int
export import def #extern open_dprotected_np(_0: *char, _1: int, _2: int, _3: int, ...) -> int
export import def #extern openat_dprotected_np(_0: int, _1: *char, _2: int, _3: int, _4: int, ...) -> int
export import def #extern openat_authenticated_np(_0: int, _1: *char, _2: int, _3: int) -> int
export import def #extern flock(_0: int, _1: int) -> int
export import def #extern filesec_init() -> *s__filesec
export import def #extern filesec_dup(_0: *s__filesec) -> *s__filesec
export import def #extern filesec_free(_0: *s__filesec)
export import def #extern filesec_get_property(_0: *s__filesec, _1: e_filesec_property_t, _2: *) -> int
export import def #extern filesec_query_property(_0: *s__filesec, _1: e_filesec_property_t, _2: *int) -> int
export import def #extern filesec_set_property(_0: *s__filesec, _1: e_filesec_property_t, _2: *) -> int
export import def #extern filesec_unset_property(_0: *s__filesec, _1: e_filesec_property_t) -> int
export const ELF_C_NULL: int = 0
export const ELF_C_READ: int = 1
export const ELF_C_WRITE: int = 2
export const ELF_C_CLR: int = 3
export const ELF_C_SET: int = 4
export const ELF_C_FDDONE: int = 5
export const ELF_C_FDREAD: int = 6
export const ELF_C_RDWR: int = 7
export const ELF_C_NUM: int = 8
export const ELF_K_NONE: int = 0
export const ELF_K_AR: int = 1
export const ELF_K_COFF: int = 2
export const ELF_K_ELF: int = 3
export const ELF_K_NUM: int = 4
export const ELF_T_BYTE: int = 0
export const ELF_T_ADDR: int = 1
export const ELF_T_DYN: int = 2
export const ELF_T_EHDR: int = 3
export const ELF_T_HALF: int = 4
export const ELF_T_OFF: int = 5
export const ELF_T_PHDR: int = 6
export const ELF_T_RELA: int = 7
export const ELF_T_REL: int = 8
export const ELF_T_SHDR: int = 9
export const ELF_T_SWORD: int = 10
export const ELF_T_SYM: int = 11
export const ELF_T_WORD: int = 12
export const ELF_T_SXWORD: int = 13
export const ELF_T_XWORD: int = 14
export const ELF_T_VDEF: int = 15
export const ELF_T_VNEED: int = 16
export const ELF_T_NUM: int = 17
export import def #extern elf_begin(__fd: int, __cmd: e_Elf_Cmd, __ref: *s_Elf) -> *s_Elf
export import def #extern elf_memory(__image: *char, __size: ulong) -> *s_Elf
export import def #extern elf_cntl(__elf: *s_Elf, __cmd: e_Elf_Cmd) -> int
export import def #extern elf_end(__elf: *s_Elf) -> int
export import def #extern elf_errmsg(__err: int) -> *char
export import def #extern elf_errno() -> int
export import def #extern elf_fill(__fill: int)
export import def #extern elf_flagdata(__data: *s_Elf_Data, __cmd: e_Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagehdr(__elf: *s_Elf, __cmd: e_Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagelf(__elf: *s_Elf, __cmd: e_Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagphdr(__elf: *s_Elf, __cmd: e_Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagscn(__scn: *s_Elf_Scn, __cmd: e_Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagshdr(__scn: *s_Elf_Scn, __cmd: e_Elf_Cmd, __flags: uint) -> uint
export import def #extern elf32_fsize(__type: e_Elf_Type, __count: ulong, __ver: uint) -> ulong
export import def #extern elf_getarhdr(__elf: *s_Elf) -> *s_Elf_Arhdr
export import def #extern elf_getarsym(__elf: *s_Elf, __ptr: *ulong) -> *s_Elf_Arsym
export import def #extern elf_getbase(__elf: *s_Elf) -> int64
export import def #extern elf_getdata(__scn: *s_Elf_Scn, __data: *s_Elf_Data) -> *s_Elf_Data
export import def #extern elf32_getehdr(__elf: *s_Elf) -> *s_Elf32_Ehdr
export import def #extern elf_getident(__elf: *s_Elf, __ptr: *ulong) -> *char
export import def #extern elf32_getphdr(__elf: *s_Elf) -> *s_Elf32_Phdr
export import def #extern elf_getscn(__elf: *s_Elf, __index: ulong) -> *s_Elf_Scn
export import def #extern elf32_getshdr(__scn: *s_Elf_Scn) -> *s_Elf32_Shdr
export import def #extern elf_hash(__name: *uint8) -> ulong
export import def #extern elf_kind(__elf: *s_Elf) -> e_Elf_Kind
export import def #extern elf_ndxscn(__scn: *s_Elf_Scn) -> ulong
export import def #extern elf_newdata(__scn: *s_Elf_Scn) -> *s_Elf_Data
export import def #extern elf32_newehdr(__elf: *s_Elf) -> *s_Elf32_Ehdr
export import def #extern elf32_newphdr(__elf: *s_Elf, __count: ulong) -> *s_Elf32_Phdr
export import def #extern elf_newscn(__elf: *s_Elf) -> *s_Elf_Scn
export import def #extern elf_next(__elf: *s_Elf) -> e_Elf_Cmd
export import def #extern elf_nextscn(__elf: *s_Elf, __scn: *s_Elf_Scn) -> *s_Elf_Scn
export import def #extern elf_rand(__elf: *s_Elf, __offset: ulong) -> ulong
export import def #extern elf_rawdata(__scn: *s_Elf_Scn, __data: *s_Elf_Data) -> *s_Elf_Data
export import def #extern elf_rawfile(__elf: *s_Elf, __ptr: *ulong) -> *char
export import def #extern elf_strptr(__elf: *s_Elf, __section: ulong, __offset: ulong) -> *char
export import def #extern elf_update(__elf: *s_Elf, __cmd: e_Elf_Cmd) -> int64
export import def #extern elf_version(__ver: uint) -> uint
export import def #extern elf32_xlatetof(__dst: *s_Elf_Data, __src: *s_Elf_Data, __encode: uint) -> *s_Elf_Data
export import def #extern elf32_xlatetom(__dst: *s_Elf_Data, __src: *s_Elf_Data, __encode: uint) -> *s_Elf_Data
export import def #extern elf32_checksum(__elf: *s_Elf) -> long
export import def #extern elf64_getehdr(__elf: *s_Elf) -> *s_Elf64_Ehdr
export import def #extern elf64_newehdr(__elf: *s_Elf) -> *s_Elf64_Ehdr
export import def #extern elf64_getphdr(__elf: *s_Elf) -> *s_Elf64_Phdr
export import def #extern elf64_newphdr(__elf: *s_Elf, __count: ulong) -> *s_Elf64_Phdr
export import def #extern elf64_getshdr(__scn: *s_Elf_Scn) -> *s_Elf64_Shdr
export import def #extern elf64_fsize(__type: e_Elf_Type, __count: ulong, __ver: uint) -> ulong
export import def #extern elf64_xlatetof(__dst: *s_Elf_Data, __src: *s_Elf_Data, __encode: uint) -> *s_Elf_Data
export import def #extern elf64_xlatetom(__dst: *s_Elf_Data, __src: *s_Elf_Data, __encode: uint) -> *s_Elf_Data
export import def #extern elf64_checksum(__elf: *s_Elf) -> long
export import def #extern elf_getphnum(__elf: *s_Elf, __resultp: *ulong) -> int
export import def #extern elf_getshnum(__elf: *s_Elf, __resultp: *ulong) -> int
export import def #extern elf_getshstrndx(__elf: *s_Elf, __resultp: *ulong) -> int
export import def #extern elf_getphdrnum(__elf: *s_Elf, __resultp: *ulong) -> int
export import def #extern elf_getshdrnum(__elf: *s_Elf, __resultp: *ulong) -> int
export import def #extern elf_getshdrstrndx(__elf: *s_Elf, __resultp: *ulong) -> int
export import def #extern elfx_update_shstrndx(__elf: *s_Elf, __index: ulong) -> int
export import def #extern elfx_movscn(__elf: *s_Elf, __scn: *s_Elf_Scn, __after: *s_Elf_Scn) -> ulong
export import def #extern elfx_remscn(__elf: *s_Elf, __scn: *s_Elf_Scn) -> ulong
export import def #extern elf_delscn(__elf: *s_Elf, __scn: *s_Elf_Scn) -> ulong
export import def #extern poll(_0: *s_pollfd, _1: uint, _2: int) -> int
export import def #extern fnmatch(_0: *char, _1: *char, _2: int) -> int
export import def #extern closedir(_0: *s_DIR) -> int
export import def #extern opendir(_0: *char) -> *s_DIR
export import def #extern readdir(_0: *s_DIR) -> *s_dirent
export import def #extern readdir_r(_0: *s_DIR, _1: *s_dirent, _2: **s_dirent) -> int
export import def #extern rewinddir(_0: *s_DIR)
export import def #extern seekdir(_0: *s_DIR, _1: long)
export import def #extern telldir(_0: *s_DIR) -> long
export import def #extern fdopendir(_0: int) -> *s_DIR
export import def #extern alphasort(_0: **s_dirent, _1: **s_dirent) -> int
export import def #extern dirfd(dirp: *s_DIR) -> int
export import def #extern scandir(_0: *char, _1: ***s_dirent, _2: def *s_dirent -> int, _3: def [**s_dirent, **s_dirent] -> int) -> int
export import def #extern __opendir2(_0: *char, _1: int) -> *s_DIR
export import def #extern __error() -> *int
export import def #extern uuid_clear(uu: *uint8)
export import def #extern uuid_compare(uu1: *uint8, uu2: *uint8) -> int
export import def #extern uuid_copy(dst: *uint8, src: *uint8)
export import def #extern uuid_generate(out: *uint8)
export import def #extern uuid_generate_random(out: *uint8)
export import def #extern uuid_generate_time(out: *uint8)
export import def #extern uuid_is_null(uu: *uint8) -> int
export import def #extern uuid_parse(in_: *char, uu: *uint8) -> int
export import def #extern uuid_unparse(uu: *uint8, out: *char)
export import def #extern uuid_unparse_lower(uu: *uint8, out: *char)
export import def #extern uuid_unparse_upper(uu: *uint8, out: *char)
export import def #extern backtrace(_0: **, _1: int) -> int
export import def #extern backtrace_from_fp(startfp: *, array: **, size: int) -> int
export import def #extern backtrace_symbols(_0: **, _1: int) -> **char
export import def #extern backtrace_symbols_fd(_0: **, _1: int, _2: int)
export import def #extern backtrace_image_offsets(array: **, image_offsets: *s_image_offset, size: int)
export import def #extern backtrace_async(array: **, length: ulong, task_id: *uint) -> ulong
