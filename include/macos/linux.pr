export const P_ALL: int = 0
export const P_PID: int = P_ALL + 1
export const P_PGID: int = P_PID + 1
export const ELF_C_NULL: int = 0
export const ELF_C_READ: int = ELF_C_NULL + 1
export const ELF_C_WRITE: int = ELF_C_READ + 1
export const ELF_C_CLR: int = ELF_C_WRITE + 1
export const ELF_C_SET: int = ELF_C_CLR + 1
export const ELF_C_FDDONE: int = ELF_C_SET + 1
export const ELF_C_FDREAD: int = ELF_C_FDDONE + 1
export const ELF_C_RDWR: int = ELF_C_FDREAD + 1
export const ELF_C_NUM: int = ELF_C_RDWR + 1
export const ELF_K_NONE: int = 0
export const ELF_K_AR: int = ELF_K_NONE + 1
export const ELF_K_COFF: int = ELF_K_AR + 1
export const ELF_K_ELF: int = ELF_K_COFF + 1
export const ELF_K_NUM: int = ELF_K_ELF + 1
export const ELF_T_BYTE: int = 0
export const ELF_T_ADDR: int = ELF_T_BYTE + 1
export const ELF_T_DYN: int = ELF_T_ADDR + 1
export const ELF_T_EHDR: int = ELF_T_DYN + 1
export const ELF_T_HALF: int = ELF_T_EHDR + 1
export const ELF_T_OFF: int = ELF_T_HALF + 1
export const ELF_T_PHDR: int = ELF_T_OFF + 1
export const ELF_T_RELA: int = ELF_T_PHDR + 1
export const ELF_T_REL: int = ELF_T_RELA + 1
export const ELF_T_SHDR: int = ELF_T_REL + 1
export const ELF_T_SWORD: int = ELF_T_SHDR + 1
export const ELF_T_SYM: int = ELF_T_SWORD + 1
export const ELF_T_WORD: int = ELF_T_SYM + 1
export const ELF_T_SXWORD: int = ELF_T_WORD + 1
export const ELF_T_XWORD: int = ELF_T_SXWORD + 1
export const ELF_T_VDEF: int = ELF_T_XWORD + 1
export const ELF_T_VNEED: int = ELF_T_VDEF + 1
export const ELF_T_NUM: int = ELF_T_VNEED + 1
export type __mbstate_t = struct #union { __mbstate8: [128; char]; _mbstateL: int64; }
export type s__opaque_pthread_attr_t = struct { __sig: long; __opaque: [56; char]; }
export type s__opaque_pthread_cond_t = struct { __sig: long; __opaque: [40; char]; }
export type s__opaque_pthread_condattr_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_mutex_t = struct { __sig: long; __opaque: [56; char]; }
export type s__opaque_pthread_mutexattr_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_once_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_rwlock_t = struct { __sig: long; __opaque: [192; char]; }
export type s__opaque_pthread_rwlockattr_t = struct { __sig: long; __opaque: [16; char]; }
export type idtype_t = enum { P_ALL; P_PID; P_PGID; }
export type s___darwin_sigaltstack = struct { ss_sp: *; ss_size: ulong; ss_flags: int; }
export type s___darwin_ucontext = struct { uc_onstack: int; uc_sigmask: uint; uc_stack: s___darwin_sigaltstack; uc_link: *s___darwin_ucontext; uc_mcsize: ulong; uc_mcontext: *s___darwin_mcontext64; }
export type u_sigval = struct #union { sival_int: int; sival_ptr: *; }
export type siginfo_t = struct { si_signo: int; si_errno: int; si_code: int; si_pid: int; si_uid: uint; si_status: int; si_addr: *; si_value: u_sigval; si_band: long; __pad: [7; ulong]; }
export type s_rusage_info_v6 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; ri_flags: uint64; ri_user_ptime: uint64; ri_system_ptime: uint64; ri_pinstructions: uint64; ri_pcycles: uint64; ri_energy_nj: uint64; ri_penergy_nj: uint64; ri_reserved: [14; uint64]; }
export type fd_set = struct { fds_bits: [32; int]; }
export type div_t = struct { quot: int; rem: int; }
export type ldiv_t = struct { quot: long; rem: long; }
export type lldiv_t = struct { quot: int64; rem: int64; }
export type Dl_info = struct { dli_fname: *char; dli_fbase: *; dli_sname: *char; dli_saddr: *; }
export type Elf32_Ehdr = struct { e_ident: [16; char]; e_type: ushort; e_machine: ushort; e_version: uint; e_entry: uint; e_phoff: uint; e_shoff: uint; e_flags: uint; e_ehsize: ushort; e_phentsize: ushort; e_phnum: ushort; e_shentsize: ushort; e_shnum: ushort; e_shstrndx: ushort; }
export type Elf64_Ehdr = struct { e_ident: [16; char]; e_type: ushort; e_machine: ushort; e_version: uint; e_entry: ulong; e_phoff: ulong; e_shoff: ulong; e_flags: uint; e_ehsize: ushort; e_phentsize: ushort; e_phnum: ushort; e_shentsize: ushort; e_shnum: ushort; e_shstrndx: ushort; }
export type Elf32_Shdr = struct { sh_name: uint; sh_type: uint; sh_flags: uint; sh_addr: uint; sh_offset: uint; sh_size: uint; sh_link: uint; sh_info: uint; sh_addralign: uint; sh_entsize: uint; }
export type Elf64_Shdr = struct { sh_name: uint; sh_type: uint; sh_flags: ulong; sh_addr: ulong; sh_offset: ulong; sh_size: ulong; sh_link: uint; sh_info: uint; sh_addralign: ulong; sh_entsize: ulong; }
export type Elf32_Sym = struct { st_name: uint; st_value: uint; st_size: uint; st_info: char; st_other: char; st_shndx: ushort; }
export type Elf64_Sym = struct { st_name: uint; st_info: char; st_other: char; st_shndx: ushort; st_value: ulong; st_size: ulong; }
export type Elf32_Rel = struct { r_offset: uint; r_info: uint; }
export type Elf32_Rela = struct { r_offset: uint; r_info: uint; r_addend: int; }
export type Elf64_Rel = struct { r_offset: ulong; r_info: ulong; }
export type Elf64_Rela = struct { r_offset: ulong; r_info: ulong; r_addend: long; }
export type Elf32_Nhdr = struct { n_namesz: uint; n_descsz: uint; n_type: uint; }
export type Elf64_Nhdr = struct { n_namesz: uint; n_descsz: uint; n_type: uint; }
export type Elf32_Phdr = struct { p_type: uint; p_offset: uint; p_vaddr: uint; p_paddr: uint; p_filesz: uint; p_memsz: uint; p_flags: uint; p_align: uint; }
export type Elf64_Phdr = struct { p_type: uint; p_flags: uint; p_offset: ulong; p_vaddr: ulong; p_paddr: ulong; p_filesz: ulong; p_memsz: ulong; p_align: ulong; }
export type Elf32_Dyn = struct { d_tag: int; d_un: struct #union { d_val: uint; d_ptr: uint; }; }
export type Elf64_Dyn = struct { d_tag: long; d_un: struct #union { d_val: ulong; d_ptr: ulong; }; }
export type Elf32_Syminfo = struct { si_boundto: ushort; si_flags: ushort; }
export type Elf64_Syminfo = struct { si_boundto: ushort; si_flags: ushort; }
export type Elf32_Verdef = struct { vd_version: ushort; vd_flags: ushort; vd_ndx: ushort; vd_cnt: ushort; vd_hash: uint; vd_aux: uint; vd_next: uint; }
export type Elf32_Verdaux = struct { vda_name: uint; vda_next: uint; }
export type Elf32_Verneed = struct { vn_version: ushort; vn_cnt: ushort; vn_file: uint; vn_aux: uint; vn_next: uint; }
export type Elf32_Vernaux = struct { vna_hash: uint; vna_flags: ushort; vna_other: ushort; vna_name: uint; vna_next: uint; }
export type Elf64_Verdef = struct { vd_version: ushort; vd_flags: ushort; vd_ndx: ushort; vd_cnt: ushort; vd_hash: uint; vd_aux: uint; vd_next: uint; }
export type Elf64_Verdaux = struct { vda_name: uint; vda_next: uint; }
export type Elf64_Verneed = struct { vn_version: ushort; vn_cnt: ushort; vn_file: uint; vn_aux: uint; vn_next: uint; }
export type Elf64_Vernaux = struct { vna_hash: uint; vna_flags: ushort; vna_other: ushort; vna_name: uint; vna_next: uint; }
export type Elf32_Move = struct { m_value: ulong; m_info: uint; m_poffset: uint; m_repeat: ushort; m_stride: ushort; }
export type Elf64_Move = struct { m_value: ulong; m_info: ulong; m_poffset: ulong; m_repeat: ushort; m_stride: ushort; }
export type Elf32_Cap = struct { c_tag: uint; c_un: struct #union { c_val: uint; c_ptr: uint; }; }
export type Elf64_Cap = struct { c_tag: ulong; c_un: struct #union { c_val: ulong; c_ptr: ulong; }; }
export type Elf_Cmd = enum { ELF_C_NULL = 0; ELF_C_READ; ELF_C_WRITE; ELF_C_CLR; ELF_C_SET; ELF_C_FDDONE; ELF_C_FDREAD; ELF_C_RDWR; ELF_C_NUM; }
export type Elf_Kind = enum { ELF_K_NONE = 0; ELF_K_AR; ELF_K_COFF; ELF_K_ELF; ELF_K_NUM; }
export type Elf_Type = enum { ELF_T_BYTE = 0; ELF_T_ADDR; ELF_T_DYN; ELF_T_EHDR; ELF_T_HALF; ELF_T_OFF; ELF_T_PHDR; ELF_T_RELA; ELF_T_REL; ELF_T_SHDR; ELF_T_SWORD; ELF_T_SYM; ELF_T_WORD; ELF_T_SXWORD; ELF_T_XWORD; ELF_T_VDEF; ELF_T_VNEED; ELF_T_NUM; }
export type Elf
export type Elf_Scn
export type Elf_Arhdr = struct { ar_name: *char; ar_date: long; ar_uid: long; ar_gid: long; ar_mode: ulong; ar_size: int64; ar_rawname: *char; }
export type Elf_Arsym = struct { as_name: *char; as_off: ulong; as_hash: ulong; }
export type Elf_Data = struct { d_buf: *; d_type: Elf_Type; d_size: ulong; d_off: int64; d_align: ulong; d_version: uint; }
export type DIR = struct { __dd_fd: int; __dd_loc: long; __dd_size: long; __dd_buf: *char; __dd_len: int; __dd_seek: long; __padding: long; __dd_flags: int; __dd_lock: s__opaque_pthread_mutex_t; __dd_td: *s__telldir; }
export type s___darwin_pthread_handler_rec = struct { __routine: def (*) -> (); __arg: *; __next: *s___darwin_pthread_handler_rec; }
export type s__opaque_pthread_t = struct { __sig: long; __cleanup_stack: *s___darwin_pthread_handler_rec; __opaque: [8176; char]; }
export type s_timespec = struct { tv_sec: long; tv_nsec: long; }
export type s_ostat = struct { st_dev: ushort; st_ino: uint64; st_mode: ushort; st_nlink: ushort; st_uid: ushort; st_gid: ushort; st_rdev: ushort; st_size: int; st_atimespec: s_timespec; st_mtimespec: s_timespec; st_ctimespec: s_timespec; st_blksize: int; st_blocks: int; st_flags: uint; st_gen: uint; }
export type s_stat = struct { st_dev: int; st_mode: ushort; st_nlink: ushort; st_ino: uint64; st_uid: uint; st_gid: uint; st_rdev: int; st_atimespec: s_timespec; st_mtimespec: s_timespec; st_ctimespec: s_timespec; st_birthtimespec: s_timespec; st_size: int64; st_blocks: int64; st_blksize: int; st_flags: uint; st_gen: uint; st_lspare: int; st_qspare: [2; int64]; }
export type s__filesec
export type s_winsize = struct { ws_row: ushort; ws_col: ushort; ws_xpixel: ushort; ws_ypixel: ushort; }
export type s_ttysize = struct { ts_lines: ushort; ts_cols: ushort; ts_xxx: ushort; ts_yyy: ushort; }
export type s___darwin_arm_exception_state = struct { __exception: uint; __fsr: uint; __far: uint; }
export type s___darwin_arm_exception_state64 = struct { __far: uint64; __esr: uint; __exception: uint; }
export type s___darwin_arm_thread_state = struct { __r: [13; uint]; __sp: uint; __lr: uint; __pc: uint; __cpsr: uint; }
export type s___darwin_arm_thread_state64 = struct { __x: [29; uint64]; __fp: uint64; __lr: uint64; __sp: uint64; __pc: uint64; __cpsr: uint; __pad: uint; }
export type s___darwin_arm_vfp_state = struct { __r: [64; uint]; __fpscr: uint; }
export type s___darwin_arm_neon_state64 = struct { __v: [32; uint128]; __fpsr: uint; __fpcr: uint; }
export type s___darwin_arm_neon_state = struct { __v: [16; uint128]; __fpsr: uint; __fpcr: uint; }
export type s___arm_pagein_state = struct { __pagein_error: int; }
export type s___arm_legacy_debug_state = struct { __bvr: [16; uint]; __bcr: [16; uint]; __wvr: [16; uint]; __wcr: [16; uint]; }
export type s___darwin_arm_debug_state32 = struct { __bvr: [16; uint]; __bcr: [16; uint]; __wvr: [16; uint]; __wcr: [16; uint]; __mdscr_el1: uint64; }
export type s___darwin_arm_debug_state64 = struct { __bvr: [16; uint64]; __bcr: [16; uint64]; __wvr: [16; uint64]; __wcr: [16; uint64]; __mdscr_el1: uint64; }
export type s___darwin_arm_cpmu_state64 = struct { __ctrs: [16; uint64]; }
export type s___darwin_mcontext32 = struct { __es: s___darwin_arm_exception_state; __ss: s___darwin_arm_thread_state; __fs: s___darwin_arm_vfp_state; }
export type s___darwin_mcontext64 = struct { __es: s___darwin_arm_exception_state64; __ss: s___darwin_arm_thread_state64; __ns: s___darwin_arm_neon_state64; }
export type s_sigevent = struct { sigev_notify: int; sigev_signo: int; sigev_value: u_sigval; sigev_notify_function: def (u_sigval) -> (); sigev_notify_attributes: *s__opaque_pthread_attr_t; }
export type u___sigaction_u = struct #union { __sa_handler: def (int) -> (); __sa_sigaction: def (int, *siginfo_t, *) -> (); }
export type s___sigaction = struct { __sigaction_u: u___sigaction_u; sa_tramp: def (*, int, int, *siginfo_t, *) -> (); sa_mask: uint; sa_flags: int; }
export type s_sigaction = struct { __sigaction_u: u___sigaction_u; sa_mask: uint; sa_flags: int; }
export type s_sigvec = struct { sv_handler: def (int) -> (); sv_mask: int; sv_flags: int; }
export type s_sigstack = struct { ss_sp: *char; ss_onstack: int; }
export type s_timeval = struct { tv_sec: long; tv_usec: int; }
export type s_rusage = struct { ru_utime: s_timeval; ru_stime: s_timeval; ru_maxrss: long; ru_ixrss: long; ru_idrss: long; ru_isrss: long; ru_minflt: long; ru_majflt: long; ru_nswap: long; ru_inblock: long; ru_oublock: long; ru_msgsnd: long; ru_msgrcv: long; ru_nsignals: long; ru_nvcsw: long; ru_nivcsw: long; }
export type s_rusage_info_v0 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; }
export type s_rusage_info_v1 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; }
export type s_rusage_info_v2 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; }
export type s_rusage_info_v3 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; }
export type s_rusage_info_v4 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; }
export type s_rusage_info_v5 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; ri_flags: uint64; }
export type s_rlimit = struct { rlim_cur: uint64; rlim_max: uint64; }
export type s_proc_rlimit_control_wakeupmon = struct { wm_flags: uint; wm_rate: int; }
export type s__OSUnalignedU16 = struct { __val: ushort; }
export type s__OSUnalignedU32 = struct { __val: uint; }
export type s__OSUnalignedU64 = struct { __val: uint64; }
export type u_wait = struct #union { w_status: int; w_T: struct { #bits(7) w_Termsig: uint; #bits(1) w_Coredump: uint; #bits(8) w_Retcode: uint; #bits(16) w_Filler: uint; }; w_S: struct { #bits(8) w_Stopval: uint; #bits(8) w_Stopsig: uint; #bits(16) w_Filler: uint; }; }
export type s_accessx_descriptor = struct { ad_name_offset: uint; ad_flags: int; ad_pad: [2; int]; }
export type s_fssearchblock
export type s_searchstate
export type s_termios = struct { c_iflag: ulong; c_oflag: ulong; c_cflag: ulong; c_lflag: ulong; c_cc: [20; char]; c_ispeed: ulong; c_ospeed: ulong; }
export type s_pollfd = struct { fd: int; events: short; revents: short; }
export type s_dirent = struct { d_ino: uint64; d_seekoff: uint64; d_reclen: ushort; d_namlen: ushort; d_type: char; d_name: [1024; char]; }
export type s__telldir
export type s_image_offset = struct { uuid: [16; char]; offset: uint; }
export import def #extern chmod(_0: *char, _1: ushort) -> int
export import def #extern fchmod(_0: int, _1: ushort) -> int
export import def #extern fstat(_0: int, _1: *s_stat) -> int
export import def #extern lstat(_0: *char, _1: *s_stat) -> int
export import def #extern mkdir(_0: *char, _1: ushort) -> int
export import def #extern mkfifo(_0: *char, _1: ushort) -> int
export import def #extern stat(_0: *char, _1: *s_stat) -> int
export import def #extern mknod(_0: *char, _1: ushort, _2: int) -> int
export import def #extern umask(_0: ushort) -> ushort
export import def #extern fchmodat(_0: int, _1: *char, _2: ushort, _3: int) -> int
export import def #extern fstatat(_0: int, _1: *char, _2: *s_stat, _3: int) -> int
export import def #extern mkdirat(_0: int, _1: *char, _2: ushort) -> int
export import def #extern mkfifoat(_0: int, _1: *char, _2: ushort) -> int
export import def #extern mknodat(_0: int, _1: *char, _2: ushort, _3: int) -> int
export import def #extern futimens(__fd: int, __times: *s_timespec) -> int
export import def #extern utimensat(__fd: int, __path: *char, __times: *s_timespec, __flag: int) -> int
export import def #extern chflags(_0: *char, _1: uint) -> int
export import def #extern chmodx_np(_0: *char, _1: *s__filesec) -> int
export import def #extern fchflags(_0: int, _1: uint) -> int
export import def #extern fchmodx_np(_0: int, _1: *s__filesec) -> int
export import def #extern fstatx_np(_0: int, _1: *s_stat, _2: *s__filesec) -> int
export import def #extern lchflags(_0: *char, _1: uint) -> int
export import def #extern lstatx_np(_0: *char, _1: *s_stat, _2: *s__filesec) -> int
export import def #extern mkdirx_np(_0: *char, _1: *s__filesec) -> int
export import def #extern mkfifox_np(_0: *char, _1: *s__filesec) -> int
export import def #extern statx_np(_0: *char, _1: *s_stat, _2: *s__filesec) -> int
export import def #extern umaskx_np(_0: *s__filesec) -> int
export import def #extern ioctl(_0: int, _1: ulong, ...) -> int
export import def #extern signal(_0: int, _1: def (int) -> ())
export import def #extern getpriority(_0: int, _1: uint) -> int
export import def #extern getiopolicy_np(_0: int, _1: int) -> int
export import def #extern getrlimit(_0: int, _1: *s_rlimit) -> int
export import def #extern getrusage(_0: int, _1: *s_rusage) -> int
export import def #extern setpriority(_0: int, _1: uint, _2: int) -> int
export import def #extern setiopolicy_np(_0: int, _1: int, _2: int) -> int
export import def #extern setrlimit(_0: int, _1: *s_rlimit) -> int
export import def #extern wait(_0: *int) -> int
export import def #extern waitpid(_0: int, _1: *int, _2: int) -> int
export import def #extern waitid(_0: idtype_t, _1: uint, _2: *siginfo_t, _3: int) -> int
export import def #extern wait3(_0: *int, _1: int, _2: *s_rusage) -> int
export import def #extern wait4(_0: int, _1: *int, _2: int, _3: *s_rusage) -> int
export import def #extern mlockall(_0: int) -> int
export import def #extern munlockall() -> int
export import def #extern mlock(_0: *, _1: ulong) -> int
export import def #extern mmap(_0: *, _1: ulong, _2: int, _3: int, _4: int, _5: int64) -> *
export import def #extern mprotect(_0: *, _1: ulong, _2: int) -> int
export import def #extern msync(_0: *, _1: ulong, _2: int) -> int
export import def #extern munlock(_0: *, _1: ulong) -> int
export import def #extern munmap(_0: *, _1: ulong) -> int
export import def #extern posix_madvise(_0: *, _1: ulong, _2: int) -> int
export import def #extern madvise(_0: *, _1: ulong, _2: int) -> int
export import def #extern mincore(_0: *, _1: ulong, _2: *char) -> int
export import def #extern minherit(_0: *, _1: ulong, _2: int) -> int
export import def #extern __darwin_check_fd_set_overflow(_0: int, _1: *, _2: int) -> int
export import def #extern getattrlistbulk(_0: int, _1: *, _2: *, _3: ulong, _4: uint64) -> int
export import def #extern getattrlistat(_0: int, _1: *char, _2: *, _3: *, _4: ulong, _5: ulong) -> int
export import def #extern setattrlistat(_0: int, _1: *char, _2: *, _3: *, _4: ulong, _5: uint) -> int
export import def #extern freadlink(_0: int, _1: *char, _2: ulong) -> long
export import def #extern faccessat(_0: int, _1: *char, _2: int, _3: int) -> int
export import def #extern fchownat(_0: int, _1: *char, _2: uint, _3: uint, _4: int) -> int
export import def #extern linkat(_0: int, _1: *char, _2: int, _3: *char, _4: int) -> int
export import def #extern readlinkat(_0: int, _1: *char, _2: *char, _3: ulong) -> long
export import def #extern symlinkat(_0: *char, _1: int, _2: *char) -> int
export import def #extern unlinkat(_0: int, _1: *char, _2: int) -> int
export import def #extern _exit(_0: int)
export import def #extern access(_0: *char, _1: int) -> int
export import def #extern alarm(_0: uint) -> uint
export import def #extern chdir(_0: *char) -> int
export import def #extern chown(_0: *char, _1: uint, _2: uint) -> int
export import def #extern close(_0: int) -> int
export import def #extern dup(_0: int) -> int
export import def #extern dup2(_0: int, _1: int) -> int
export import def #extern execl(__path: *char, __arg0: *char, ...) -> int
export import def #extern execle(__path: *char, __arg0: *char, ...) -> int
export import def #extern execlp(__file: *char, __arg0: *char, ...) -> int
export import def #extern execv(__path: *char, __argv: **char) -> int
export import def #extern execve(__file: *char, __argv: **char, __envp: **char) -> int
export import def #extern execvp(__file: *char, __argv: **char) -> int
export import def #extern fork() -> int
export import def #extern fpathconf(_0: int, _1: int) -> long
export import def #extern getcwd(_0: *char, _1: ulong) -> *char
export import def #extern getegid() -> uint
export import def #extern geteuid() -> uint
export import def #extern getgid() -> uint
export import def #extern getgroups(_0: int, _1: *uint) -> int
export import def #extern getlogin() -> *char
export import def #extern getpgrp() -> int
export import def #extern getpid() -> int
export import def #extern getppid() -> int
export import def #extern getuid() -> uint
export import def #extern isatty(_0: int) -> int
export import def #extern link(_0: *char, _1: *char) -> int
export import def #extern lseek(_0: int, _1: int64, _2: int) -> int64
export import def #extern pathconf(_0: *char, _1: int) -> long
export import def #extern pause() -> int
export import def #extern pipe(_0: *int) -> int
export import def #extern read(_0: int, _1: *, _2: ulong) -> long
export import def #extern rmdir(_0: *char) -> int
export import def #extern setgid(_0: uint) -> int
export import def #extern setpgid(_0: int, _1: int) -> int
export import def #extern setsid() -> int
export import def #extern setuid(_0: uint) -> int
export import def #extern sleep(_0: uint) -> uint
export import def #extern sysconf(_0: int) -> long
export import def #extern tcgetpgrp(_0: int) -> int
export import def #extern tcsetpgrp(_0: int, _1: int) -> int
export import def #extern ttyname(_0: int) -> *char
export import def #extern ttyname_r(_0: int, _1: *char, _2: ulong) -> int
export import def #extern unlink(_0: *char) -> int
export import def #extern write(__fd: int, __buf: *, __nbyte: ulong) -> long
export import def #extern confstr(_0: int, _1: *char, _2: ulong) -> ulong
export import def #extern getopt(_0: int, _1: **char, _2: *char) -> int
export import def #extern ctermid(_0: *char) -> *char
export import def #extern brk(_0: *) -> *
export import def #extern chroot(_0: *char) -> int
export import def #extern encrypt(_0: *char, _1: int)
export import def #extern fchdir(_0: int) -> int
export import def #extern gethostid() -> long
export import def #extern getpgid(_0: int) -> int
export import def #extern getsid(_0: int) -> int
export import def #extern getdtablesize() -> int
export import def #extern getpagesize() -> int
export import def #extern getpass(_0: *char) -> *char
export import def #extern lchown(_0: *char, _1: uint, _2: uint) -> int
export import def #extern lockf(_0: int, _1: int, _2: int64) -> int
export import def #extern nice(_0: int) -> int
export import def #extern pread(__fd: int, __buf: *, __nbyte: ulong, __offset: int64) -> long
export import def #extern pwrite(__fd: int, __buf: *, __nbyte: ulong, __offset: int64) -> long
export import def #extern sbrk(_0: int) -> *
export import def #extern setpgrp() -> int
export import def #extern setregid(_0: uint, _1: uint) -> int
export import def #extern setreuid(_0: uint, _1: uint) -> int
export import def #extern swab(_0: *, _1: *, _2: long)
export import def #extern sync()
export import def #extern truncate(_0: *char, _1: int64) -> int
export import def #extern ualarm(_0: uint, _1: uint) -> uint
export import def #extern usleep(_0: uint) -> int
export import def #extern vfork() -> int
export import def #extern fsync(_0: int) -> int
export import def #extern ftruncate(_0: int, _1: int64) -> int
export import def #extern getlogin_r(_0: *char, _1: ulong) -> int
export import def #extern fchown(_0: int, _1: uint, _2: uint) -> int
export import def #extern gethostname(_0: *char, _1: ulong) -> int
export import def #extern readlink(_0: *char, _1: *char, _2: ulong) -> long
export import def #extern setegid(_0: uint) -> int
export import def #extern seteuid(_0: uint) -> int
export import def #extern symlink(_0: *char, _1: *char) -> int
export import def #extern pselect(_0: int, _1: *fd_set, _2: *fd_set, _3: *fd_set, _4: *s_timespec, _5: *uint) -> int
export import def #extern select(_0: int, _1: *fd_set, _2: *fd_set, _3: *fd_set, _4: *s_timeval) -> int
export import def #extern _Exit(_0: int)
export import def #extern accessx_np(_0: *s_accessx_descriptor, _1: ulong, _2: *int, _3: uint) -> int
export import def #extern acct(_0: *char) -> int
export import def #extern endusershell()
export import def #extern execvP(__file: *char, __searchpath: *char, __argv: **char) -> int
export import def #extern fflagstostr(_0: ulong) -> *char
export import def #extern getdomainname(_0: *char, _1: int) -> int
export import def #extern getgrouplist(_0: *char, _1: int, _2: *int, _3: *int) -> int
export import def #extern gethostuuid(_0: *char, _1: *s_timespec) -> int
export import def #extern getmode(_0: *, _1: ushort) -> ushort
export import def #extern getpeereid(_0: int, _1: *uint, _2: *uint) -> int
export import def #extern getsgroups_np(_0: *int, _1: *char) -> int
export import def #extern getusershell() -> *char
export import def #extern getwgroups_np(_0: *int, _1: *char) -> int
export import def #extern initgroups(_0: *char, _1: int) -> int
export import def #extern issetugid() -> int
export import def #extern mkdtemp(_0: *char) -> *char
export import def #extern mkpath_np(path: *char, omode: ushort) -> int
export import def #extern mkpathat_np(dfd: int, path: *char, omode: ushort) -> int
export import def #extern mkstemp(_0: *char) -> int
export import def #extern mkstemps(_0: *char, _1: int) -> int
export import def #extern mkostemp(path: *char, oflags: int) -> int
export import def #extern mkostemps(path: *char, slen: int, oflags: int) -> int
export import def #extern mkstemp_dprotected_np(path: *char, dpclass: int, dpflags: int) -> int
export import def #extern mkdtempat_np(dfd: int, path: *char) -> *char
export import def #extern mkstempsat_np(dfd: int, path: *char, slen: int) -> int
export import def #extern mkostempsat_np(dfd: int, path: *char, slen: int, oflags: int) -> int
export import def #extern nfssvc(_0: int, _1: *) -> int
export import def #extern pthread_setugid_np(_0: uint, _1: uint) -> int
export import def #extern pthread_getugid_np(_0: *uint, _1: *uint) -> int
export import def #extern reboot(_0: int) -> int
export import def #extern rcmd(_0: **char, _1: int, _2: *char, _3: *char, _4: *char, _5: *int) -> int
export import def #extern rcmd_af(_0: **char, _1: int, _2: *char, _3: *char, _4: *char, _5: *int, _6: int) -> int
export import def #extern rresvport(_0: *int) -> int
export import def #extern rresvport_af(_0: *int, _1: int) -> int
export import def #extern iruserok(_0: ulong, _1: int, _2: *char, _3: *char) -> int
export import def #extern iruserok_sa(_0: *, _1: int, _2: int, _3: *char, _4: *char) -> int
export import def #extern ruserok(_0: *char, _1: int, _2: *char, _3: *char) -> int
export import def #extern setdomainname(_0: *char, _1: int) -> int
export import def #extern setgroups(_0: int, _1: *uint) -> int
export import def #extern sethostid(_0: long)
export import def #extern sethostname(_0: *char, _1: int) -> int
export import def #extern setkey(_0: *char)
export import def #extern setmode(_0: *char) -> *
export import def #extern setrgid(_0: uint) -> int
export import def #extern setruid(_0: uint) -> int
export import def #extern setsgroups_np(_0: int, _1: *char) -> int
export import def #extern setusershell()
export import def #extern setwgroups_np(_0: int, _1: *char) -> int
export import def #extern strtofflags(_0: **char, _1: *ulong, _2: *ulong) -> int
export import def #extern swapon(_0: *char) -> int
export import def #extern ttyslot() -> int
export import def #extern undelete(_0: *char) -> int
export import def #extern valloc(_0: ulong) -> *
export import def #extern syscall(_0: int, ...) -> int
export import def #extern getsubopt(_0: **char, _1: **char, _2: **char) -> int
export import def #extern fgetattrlist(_0: int, _1: *, _2: *, _3: ulong, _4: uint) -> int
export import def #extern fsetattrlist(_0: int, _1: *, _2: *, _3: ulong, _4: uint) -> int
export import def #extern getattrlist(_0: *char, _1: *, _2: *, _3: ulong, _4: uint) -> int
export import def #extern setattrlist(_0: *char, _1: *, _2: *, _3: ulong, _4: uint) -> int
export import def #extern exchangedata(_0: *char, _1: *char, _2: uint) -> int
export import def #extern getdirentriesattr(_0: int, _1: *, _2: *, _3: ulong, _4: *uint, _5: *uint, _6: *uint, _7: uint) -> int
export import def #extern searchfs(_0: *char, _1: *s_fssearchblock, _2: *ulong, _3: uint, _4: uint, _5: *s_searchstate) -> int
export import def #extern fsctl(_0: *char, _1: ulong, _2: *, _3: uint) -> int
export import def #extern ffsctl(_0: int, _1: ulong, _2: *, _3: uint) -> int
export import def #extern fsync_volume_np(_0: int, _1: int) -> int
export import def #extern sync_volume_np(_0: *char, _1: int) -> int
export import def #extern cfgetispeed(_0: *s_termios) -> ulong
export import def #extern cfgetospeed(_0: *s_termios) -> ulong
export import def #extern cfsetispeed(_0: *s_termios, _1: ulong) -> int
export import def #extern cfsetospeed(_0: *s_termios, _1: ulong) -> int
export import def #extern tcgetattr(_0: int, _1: *s_termios) -> int
export import def #extern tcsetattr(_0: int, _1: int, _2: *s_termios) -> int
export import def #extern tcdrain(_0: int) -> int
export import def #extern tcflow(_0: int, _1: int) -> int
export import def #extern tcflush(_0: int, _1: int) -> int
export import def #extern tcsendbreak(_0: int, _1: int) -> int
export import def #extern cfmakeraw(_0: *s_termios)
export import def #extern cfsetspeed(_0: *s_termios, _1: ulong) -> int
export import def #extern tcgetsid(_0: int) -> int
export import def #extern aligned_alloc(__alignment: ulong, __size: ulong) -> *
export import def #extern posix_memalign(__memptr: **, __alignment: ulong, __size: ulong) -> int
export import def #extern atoll(_0: *char) -> int64
export import def #extern llabs(_0: int64) -> int64
export import def #extern lldiv(_0: int64, _1: int64) -> lldiv_t
export import def #extern strtof(_0: *char, _1: **char) -> float
export import def #extern strtold(_0: *char, _1: **char) -> float80
export import def #extern strtoll(__str: *char, __endptr: **char, __base: int) -> int64
export import def #extern strtoull(__str: *char, __endptr: **char, __base: int) -> uint64
export import def #extern a64l(_0: *char) -> long
export import def #extern drand48() -> double
export import def #extern ecvt(_0: double, _1: int, _2: *int, _3: *int) -> *char
export import def #extern erand48(_0: *ushort) -> double
export import def #extern fcvt(_0: double, _1: int, _2: *int, _3: *int) -> *char
export import def #extern gcvt(_0: double, _1: int, _2: *char) -> *char
export import def #extern grantpt(_0: int) -> int
export import def #extern initstate(_0: uint, _1: *char, _2: ulong) -> *char
export import def #extern jrand48(_0: *ushort) -> long
export import def #extern l64a(_0: long) -> *char
export import def #extern lcong48(_0: *ushort)
export import def #extern lrand48() -> long
export import def #extern mrand48() -> long
export import def #extern nrand48(_0: *ushort) -> long
export import def #extern posix_openpt(_0: int) -> int
export import def #extern ptsname(_0: int) -> *char
export import def #extern ptsname_r(fildes: int, buffer: *char, buflen: ulong) -> int
export import def #extern putenv(_0: *char) -> int
export import def #extern random() -> long
export import def #extern rand_r(_0: *uint) -> int
export import def #extern realpath(_0: *char, _1: *char) -> *char
export import def #extern seed48(_0: *ushort) -> *ushort
export import def #extern setenv(__name: *char, __value: *char, __overwrite: int) -> int
export import def #extern setstate(_0: *char) -> *char
export import def #extern srand48(_0: long)
export import def #extern srandom(_0: uint)
export import def #extern unlockpt(_0: int) -> int
export import def #extern unsetenv(_0: *char) -> int
export import def #extern arc4random() -> uint
export import def #extern arc4random_addrandom(_0: *char, _1: int)
export import def #extern arc4random_buf(__buf: *, __nbytes: ulong)
export import def #extern arc4random_stir()
export import def #extern arc4random_uniform(__upper_bound: uint) -> uint
export import def #extern atexit_b(_0: void) -> int
export import def #extern bsearch_b(__key: *, __base: *, __nel: ulong, __width: ulong, __compar: int) -> *
export import def #extern cgetcap(_0: *char, _1: *char, _2: int) -> *char
export import def #extern cgetclose() -> int
export import def #extern cgetent(_0: **char, _1: **char, _2: *char) -> int
export import def #extern cgetfirst(_0: **char, _1: **char) -> int
export import def #extern cgetmatch(_0: *char, _1: *char) -> int
export import def #extern cgetnext(_0: **char, _1: **char) -> int
export import def #extern cgetnum(_0: *char, _1: *char, _2: *long) -> int
export import def #extern cgetset(_0: *char) -> int
export import def #extern cgetstr(_0: *char, _1: *char, _2: **char) -> int
export import def #extern cgetustr(_0: *char, _1: *char, _2: **char) -> int
export import def #extern daemon(_0: int, _1: int) -> int
export import def #extern devname(_0: int, _1: ushort) -> *char
export import def #extern devname_r(_0: int, _1: ushort, buf: *char, len: int) -> *char
export import def #extern getbsize(_0: *int, _1: *long) -> *char
export import def #extern getloadavg(_0: *double, _1: int) -> int
export import def #extern getprogname() -> *char
export import def #extern setprogname(_0: *char)
export import def #extern heapsort(__base: *, __nel: ulong, __width: ulong, __compar: def (*, *) -> (int)) -> int
export import def #extern heapsort_b(__base: *, __nel: ulong, __width: ulong, __compar: int) -> int
export import def #extern mergesort(__base: *, __nel: ulong, __width: ulong, __compar: def (*, *) -> (int)) -> int
export import def #extern mergesort_b(__base: *, __nel: ulong, __width: ulong, __compar: int) -> int
export import def #extern psort(__base: *, __nel: ulong, __width: ulong, __compar: def (*, *) -> (int))
export import def #extern psort_b(__base: *, __nel: ulong, __width: ulong, __compar: int)
export import def #extern psort_r(__base: *, __nel: ulong, __width: ulong, _3: *, __compar: def (*, *, *) -> (int))
export import def #extern qsort_b(__base: *, __nel: ulong, __width: ulong, __compar: int)
export import def #extern qsort_r(__base: *, __nel: ulong, __width: ulong, _3: *, __compar: def (*, *, *) -> (int))
export import def #extern radixsort(__base: **char, __nel: int, __table: *char, __endbyte: uint) -> int
export import def #extern rpmatch(_0: *char) -> int
export import def #extern sradixsort(__base: **char, __nel: int, __table: *char, __endbyte: uint) -> int
export import def #extern sranddev()
export import def #extern srandomdev()
export import def #extern reallocf(__ptr: *, __size: ulong) -> *
export import def #extern strtonum(__numstr: *char, __minval: int64, __maxval: int64, __errstrp: **char) -> int64
export import def #extern strtoq(__str: *char, __endptr: **char, __base: int) -> int64
export import def #extern strtouq(__str: *char, __endptr: **char, __base: int) -> uint64
export import def #extern dladdr(_0: *, _1: *Dl_info) -> int
export import def #extern dlclose(__handle: *) -> int
export import def #extern dlerror() -> *char
export import def #extern dlopen(__path: *char, __mode: int) -> *
export import def #extern dlsym(__handle: *, __symbol: *char) -> *
export import def #extern dlopen_preflight(__path: *char) -> uint8
export import def #extern elf_begin(__fd: int, __cmd: Elf_Cmd, __ref: *Elf) -> *Elf
export import def #extern elf_memory(__image: *char, __size: ulong) -> *Elf
export import def #extern elf_cntl(__elf: *Elf, __cmd: Elf_Cmd) -> int
export import def #extern elf_end(__elf: *Elf) -> int
export import def #extern elf_errmsg(__err: int) -> *char
export import def #extern elf_errno() -> int
export import def #extern elf_fill(__fill: int)
export import def #extern elf_flagdata(__data: *Elf_Data, __cmd: Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagehdr(__elf: *Elf, __cmd: Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagelf(__elf: *Elf, __cmd: Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagphdr(__elf: *Elf, __cmd: Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagscn(__scn: *Elf_Scn, __cmd: Elf_Cmd, __flags: uint) -> uint
export import def #extern elf_flagshdr(__scn: *Elf_Scn, __cmd: Elf_Cmd, __flags: uint) -> uint
export import def #extern elf32_fsize(__type: Elf_Type, __count: ulong, __ver: uint) -> ulong
export import def #extern elf_getarhdr(__elf: *Elf) -> *Elf_Arhdr
export import def #extern elf_getarsym(__elf: *Elf, __ptr: *ulong) -> *Elf_Arsym
export import def #extern elf_getbase(__elf: *Elf) -> int64
export import def #extern elf_getdata(__scn: *Elf_Scn, __data: *Elf_Data) -> *Elf_Data
export import def #extern elf32_getehdr(__elf: *Elf) -> *Elf32_Ehdr
export import def #extern elf_getident(__elf: *Elf, __ptr: *ulong) -> *char
export import def #extern elf32_getphdr(__elf: *Elf) -> *Elf32_Phdr
export import def #extern elf_getscn(__elf: *Elf, __index: ulong) -> *Elf_Scn
export import def #extern elf32_getshdr(__scn: *Elf_Scn) -> *Elf32_Shdr
export import def #extern elf_hash(__name: *char) -> ulong
export import def #extern elf_kind(__elf: *Elf) -> Elf_Kind
export import def #extern elf_ndxscn(__scn: *Elf_Scn) -> ulong
export import def #extern elf_newdata(__scn: *Elf_Scn) -> *Elf_Data
export import def #extern elf32_newehdr(__elf: *Elf) -> *Elf32_Ehdr
export import def #extern elf32_newphdr(__elf: *Elf, __count: ulong) -> *Elf32_Phdr
export import def #extern elf_newscn(__elf: *Elf) -> *Elf_Scn
export import def #extern elf_next(__elf: *Elf) -> Elf_Cmd
export import def #extern elf_nextscn(__elf: *Elf, __scn: *Elf_Scn) -> *Elf_Scn
export import def #extern elf_rand(__elf: *Elf, __offset: ulong) -> ulong
export import def #extern elf_rawdata(__scn: *Elf_Scn, __data: *Elf_Data) -> *Elf_Data
export import def #extern elf_rawfile(__elf: *Elf, __ptr: *ulong) -> *char
export import def #extern elf_strptr(__elf: *Elf, __section: ulong, __offset: ulong) -> *char
export import def #extern elf_update(__elf: *Elf, __cmd: Elf_Cmd) -> int64
export import def #extern elf_version(__ver: uint) -> uint
export import def #extern elf32_xlatetof(__dst: *Elf_Data, __src: *Elf_Data, __encode: uint) -> *Elf_Data
export import def #extern elf32_xlatetom(__dst: *Elf_Data, __src: *Elf_Data, __encode: uint) -> *Elf_Data
export import def #extern elf32_checksum(__elf: *Elf) -> long
export import def #extern elf64_getehdr(__elf: *Elf) -> *Elf64_Ehdr
export import def #extern elf64_newehdr(__elf: *Elf) -> *Elf64_Ehdr
export import def #extern elf64_getphdr(__elf: *Elf) -> *Elf64_Phdr
export import def #extern elf64_newphdr(__elf: *Elf, __count: ulong) -> *Elf64_Phdr
export import def #extern elf64_getshdr(__scn: *Elf_Scn) -> *Elf64_Shdr
export import def #extern elf64_fsize(__type: Elf_Type, __count: ulong, __ver: uint) -> ulong
export import def #extern elf64_xlatetof(__dst: *Elf_Data, __src: *Elf_Data, __encode: uint) -> *Elf_Data
export import def #extern elf64_xlatetom(__dst: *Elf_Data, __src: *Elf_Data, __encode: uint) -> *Elf_Data
export import def #extern elf64_checksum(__elf: *Elf) -> long
export import def #extern elf_getphnum(__elf: *Elf, __resultp: *ulong) -> int
export import def #extern elf_getshnum(__elf: *Elf, __resultp: *ulong) -> int
export import def #extern elf_getshstrndx(__elf: *Elf, __resultp: *ulong) -> int
export import def #extern elf_getphdrnum(__elf: *Elf, __resultp: *ulong) -> int
export import def #extern elf_getshdrnum(__elf: *Elf, __resultp: *ulong) -> int
export import def #extern elf_getshdrstrndx(__elf: *Elf, __resultp: *ulong) -> int
export import def #extern elfx_update_shstrndx(__elf: *Elf, __index: ulong) -> int
export import def #extern elfx_movscn(__elf: *Elf, __scn: *Elf_Scn, __after: *Elf_Scn) -> ulong
export import def #extern elfx_remscn(__elf: *Elf, __scn: *Elf_Scn) -> ulong
export import def #extern elf_delscn(__elf: *Elf, __scn: *Elf_Scn) -> ulong
export import def #extern poll(_0: *s_pollfd, _1: uint, _2: int) -> int
export import def #extern fnmatch(_0: *char, _1: *char, _2: int) -> int
export import def #extern closedir(_0: *DIR) -> int
export import def #extern opendir(_0: *char) -> *DIR
export import def #extern readdir(_0: *DIR) -> *s_dirent
export import def #extern readdir_r(_0: *DIR, _1: *s_dirent, _2: **s_dirent) -> int
export import def #extern rewinddir(_0: *DIR)
export import def #extern seekdir(_0: *DIR, _1: long)
export import def #extern telldir(_0: *DIR) -> long
export import def #extern fdopendir(_0: int) -> *DIR
export import def #extern alphasort(_0: **s_dirent, _1: **s_dirent) -> int
export import def #extern dirfd(dirp: *DIR) -> int
export import def #extern scandir(_0: *char, _1: ***s_dirent, _2: def (*s_dirent) -> (int), _3: def (**s_dirent, **s_dirent) -> (int)) -> int
export import def #extern scandir_b(_0: *char, _1: ***s_dirent, _2: int, _3: int) -> int
export import def #extern getdirentries(_0: int, _1: *char, _2: int, _3: *long) -> int
export import def #extern __opendir2(_0: *char, _1: int) -> *DIR
export import def #extern __error() -> *int
export import def #extern uuid_clear(uu: *char)
export import def #extern uuid_compare(uu1: *char, uu2: *char) -> int
export import def #extern uuid_copy(dst: *char, src: *char)
export import def #extern uuid_generate(out: *char)
export import def #extern uuid_generate_random(out: *char)
export import def #extern uuid_generate_time(out: *char)
export import def #extern uuid_is_null(uu: *char) -> int
export import def #extern uuid_parse(in_: *char, uu: *char) -> int
export import def #extern uuid_unparse(uu: *char, out: *char)
export import def #extern uuid_unparse_lower(uu: *char, out: *char)
export import def #extern uuid_unparse_upper(uu: *char, out: *char)
export import def #extern backtrace(_0: **, _1: int) -> int
export import def #extern backtrace_from_fp(startfp: *, array: **, size: int) -> int
export import def #extern backtrace_symbols(_0: **, _1: int) -> **char
export import def #extern backtrace_symbols_fd(_0: **, _1: int, _2: int)
export import def #extern backtrace_image_offsets(array: **, image_offsets: *s_image_offset, size: int)
export import def #extern backtrace_async(array: **, length: ulong, task_id: *uint) -> ulong
export import var #extern optarg: *char
export import var #extern optind: int
export import var #extern opterr: int
export import var #extern optopt: int
export import var #extern suboptarg: *char
export import var #extern optreset: int
export import var #extern __mb_cur_max: int
