export const _CLOCK_REALTIME: int = 0
export const _CLOCK_MONOTONIC: int = 6
export const _CLOCK_MONOTONIC_RAW: int = 4
export const _CLOCK_MONOTONIC_RAW_APPROX: int = 5
export const _CLOCK_UPTIME_RAW: int = 8
export const _CLOCK_UPTIME_RAW_APPROX: int = 9
export const _CLOCK_PROCESS_CPUTIME_ID: int = 12
export const _CLOCK_THREAD_CPUTIME_ID: int = 16
export type __mbstate_t = struct #union { __mbstate8: [128; char]; _mbstateL: int64; }
export type s__opaque_pthread_attr_t = struct { __sig: long; __opaque: [56; char]; }
export type s__opaque_pthread_cond_t = struct { __sig: long; __opaque: [40; char]; }
export type s__opaque_pthread_condattr_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_mutex_t = struct { __sig: long; __opaque: [56; char]; }
export type s__opaque_pthread_mutexattr_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_once_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_rwlock_t = struct { __sig: long; __opaque: [192; char]; }
export type s__opaque_pthread_rwlockattr_t = struct { __sig: long; __opaque: [16; char]; }
export type idtype_t = enum { P_ALL; P_PID; P_PGID; }
export type s___darwin_sigaltstack = struct { ss_sp: *; ss_size: ulong; ss_flags: int; }
export type s___darwin_ucontext = struct { uc_onstack: int; uc_sigmask: uint; uc_stack: s___darwin_sigaltstack; uc_link: *s___darwin_ucontext; uc_mcsize: ulong; uc_mcontext: *s___darwin_mcontext64; }
export type u_sigval = struct #union { sival_int: int; sival_ptr: *; }
export type siginfo_t = struct { si_signo: int; si_errno: int; si_code: int; si_pid: int; si_uid: uint; si_status: int; si_addr: *; si_value: u_sigval; si_band: long; __pad: [7; ulong]; }
export type s_rusage_info_v6 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; ri_flags: uint64; ri_user_ptime: uint64; ri_system_ptime: uint64; ri_pinstructions: uint64; ri_pcycles: uint64; ri_energy_nj: uint64; ri_penergy_nj: uint64; ri_reserved: [14; uint64]; }
export type div_t = struct { quot: int; rem: int; }
export type ldiv_t = struct { quot: long; rem: long; }
export type lldiv_t = struct { quot: int64; rem: int64; }
export type s___sbuf = struct { _base: *char; _size: int; }
export type FILE = struct { _p: *char; _r: int; _w: int; _flags: short; _file: short; _bf: s___sbuf; _lbfsize: int; _cookie: *; _close: def (*) -> (int); _read: def (*, *char, int) -> (int); _seek: def (*, int64, int) -> (int64); _write: def (*, *char, int) -> (int); _ub: s___sbuf; _extra: *s___sFILEX; _ur: int; _ubuf: [3; char]; _nbuf: [1; char]; _lb: s___sbuf; _blksize: int; _offset: int64; }
export type clockid_t = enum { _CLOCK_REALTIME = 0; _CLOCK_MONOTONIC = 6; _CLOCK_MONOTONIC_RAW = 4; _CLOCK_MONOTONIC_RAW_APPROX = 5; _CLOCK_UPTIME_RAW = 8; _CLOCK_UPTIME_RAW_APPROX = 9; _CLOCK_PROCESS_CPUTIME_ID = 12; _CLOCK_THREAD_CPUTIME_ID = 16; }
export type _RuneEntry = struct { __min: int; __max: int; __map: int; __types: *uint; }
export type _RuneRange = struct { __nranges: int; __ranges: *_RuneEntry; }
export type _RuneCharClass = struct { __name: [14; char]; __mask: uint; }
export type _RuneLocale = struct { __magic: [8; char]; __encoding: [32; char]; __sgetrune: def (*char, ulong, **char) -> (int); __sputrune: def (int, *char, ulong, **char) -> (int); __invalid_rune: int; __runetype: [256; uint]; __maplower: [256; int]; __mapupper: [256; int]; __runetype_ext: _RuneRange; __maplower_ext: _RuneRange; __mapupper_ext: _RuneRange; __variable: *; __variable_len: int; __ncharclasses: int; __charclasses: *_RuneCharClass; }
export type s___darwin_pthread_handler_rec = struct { __routine: def (*) -> (); __arg: *; __next: *s___darwin_pthread_handler_rec; }
export type s__opaque_pthread_t = struct { __sig: long; __cleanup_stack: *s___darwin_pthread_handler_rec; __opaque: [8176; char]; }
export type s___darwin_arm_exception_state = struct { __exception: uint; __fsr: uint; __far: uint; }
export type s___darwin_arm_exception_state64 = struct { __far: uint64; __esr: uint; __exception: uint; }
export type s___darwin_arm_thread_state = struct { __r: [13; uint]; __sp: uint; __lr: uint; __pc: uint; __cpsr: uint; }
export type s___darwin_arm_thread_state64 = struct { __x: [29; uint64]; __fp: uint64; __lr: uint64; __sp: uint64; __pc: uint64; __cpsr: uint; __pad: uint; }
export type s___darwin_arm_vfp_state = struct { __r: [64; uint]; __fpscr: uint; }
export type s___darwin_arm_neon_state64 = struct { __v: [32; uint128]; __fpsr: uint; __fpcr: uint; }
export type s___darwin_arm_neon_state = struct { __v: [16; uint128]; __fpsr: uint; __fpcr: uint; }
export type s___arm_pagein_state = struct { __pagein_error: int; }
export type s___arm_legacy_debug_state = struct { __bvr: [16; uint]; __bcr: [16; uint]; __wvr: [16; uint]; __wcr: [16; uint]; }
export type s___darwin_arm_debug_state32 = struct { __bvr: [16; uint]; __bcr: [16; uint]; __wvr: [16; uint]; __wcr: [16; uint]; __mdscr_el1: uint64; }
export type s___darwin_arm_debug_state64 = struct { __bvr: [16; uint64]; __bcr: [16; uint64]; __wvr: [16; uint64]; __wcr: [16; uint64]; __mdscr_el1: uint64; }
export type s___darwin_arm_cpmu_state64 = struct { __ctrs: [16; uint64]; }
export type s___darwin_mcontext32 = struct { __es: s___darwin_arm_exception_state; __ss: s___darwin_arm_thread_state; __fs: s___darwin_arm_vfp_state; }
export type s___darwin_mcontext64 = struct { __es: s___darwin_arm_exception_state64; __ss: s___darwin_arm_thread_state64; __ns: s___darwin_arm_neon_state64; }
export type s_sigevent = struct { sigev_notify: int; sigev_signo: int; sigev_value: u_sigval; sigev_notify_function: def (u_sigval) -> (); sigev_notify_attributes: *s__opaque_pthread_attr_t; }
export type u___sigaction_u = struct #union { __sa_handler: def (int) -> (); __sa_sigaction: def (int, *siginfo_t, *) -> (); }
export type s___sigaction = struct { __sigaction_u: u___sigaction_u; sa_tramp: def (*, int, int, *siginfo_t, *) -> (); sa_mask: uint; sa_flags: int; }
export type s_sigaction = struct { __sigaction_u: u___sigaction_u; sa_mask: uint; sa_flags: int; }
export type s_sigvec = struct { sv_handler: def (int) -> (); sv_mask: int; sv_flags: int; }
export type s_sigstack = struct { ss_sp: *char; ss_onstack: int; }
export type s_timeval = struct { tv_sec: long; tv_usec: int; }
export type s_rusage = struct { ru_utime: s_timeval; ru_stime: s_timeval; ru_maxrss: long; ru_ixrss: long; ru_idrss: long; ru_isrss: long; ru_minflt: long; ru_majflt: long; ru_nswap: long; ru_inblock: long; ru_oublock: long; ru_msgsnd: long; ru_msgrcv: long; ru_nsignals: long; ru_nvcsw: long; ru_nivcsw: long; }
export type s_rusage_info_v0 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; }
export type s_rusage_info_v1 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; }
export type s_rusage_info_v2 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; }
export type s_rusage_info_v3 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; }
export type s_rusage_info_v4 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; }
export type s_rusage_info_v5 = struct { ri_uuid: [16; char]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; ri_flags: uint64; }
export type s_rlimit = struct { rlim_cur: uint64; rlim_max: uint64; }
export type s_proc_rlimit_control_wakeupmon = struct { wm_flags: uint; wm_rate: int; }
export type s__OSUnalignedU16 = struct { __val: ushort; }
export type s__OSUnalignedU32 = struct { __val: uint; }
export type s__OSUnalignedU64 = struct { __val: uint64; }
export type u_wait = struct #union { w_status: int; w_T: struct { #bits(7) w_Termsig: uint; #bits(1) w_Coredump: uint; #bits(8) w_Retcode: uint; #bits(16) w_Filler: uint; }; w_S: struct { #bits(8) w_Stopval: uint; #bits(8) w_Stopsig: uint; #bits(16) w_Filler: uint; }; }
export type s___sFILEX
export type s_timespec = struct { tv_sec: long; tv_nsec: long; }
export type s_tm = struct { tm_sec: int; tm_min: int; tm_hour: int; tm_mday: int; tm_mon: int; tm_year: int; tm_wday: int; tm_yday: int; tm_isdst: int; tm_gmtoff: long; tm_zone: *char; }
export type s___float2 = struct { __sinval: float; __cosval: float; }
export type s___double2 = struct { __sinval: double; __cosval: double; }
export type s_exception = struct { type_: int; name: *char; arg1: double; arg2: double; retval: double; }
export type s_lconv = struct { decimal_point: *char; thousands_sep: *char; grouping: *char; int_curr_symbol: *char; currency_symbol: *char; mon_decimal_point: *char; mon_thousands_sep: *char; mon_grouping: *char; positive_sign: *char; negative_sign: *char; int_frac_digits: char; frac_digits: char; p_cs_precedes: char; p_sep_by_space: char; n_cs_precedes: char; n_sep_by_space: char; p_sign_posn: char; n_sign_posn: char; int_p_cs_precedes: char; int_n_cs_precedes: char; int_p_sep_by_space: char; int_n_sep_by_space: char; int_p_sign_posn: char; int_n_sign_posn: char; }
export import def #extern malloc(__size: ulong) -> *
export import def #extern calloc(__count: ulong, __size: ulong) -> *
export import def #extern free(_0: *)
export import def #extern realloc(__ptr: *, __size: ulong) -> *
export import def #extern abort()
export import def #extern abs(_0: int) -> int
export import def #extern atexit(_0: def () -> ()) -> int
export import def #extern atof(_0: *char) -> double
export import def #extern atoi(_0: *char) -> int
export import def #extern atol(_0: *char) -> long
export import def #extern bsearch(__key: *, __base: *, __nel: ulong, __width: ulong, __compar: def (*, *) -> (int)) -> *
export import def #extern div(_0: int, _1: int) -> div_t
export import def #extern exit(_0: int)
export import def #extern getenv(_0: *char) -> *char
export import def #extern labs(_0: long) -> long
export import def #extern ldiv(_0: long, _1: long) -> ldiv_t
export import def #extern mblen(__s: *char, __n: ulong) -> int
export import def #extern mbstowcs(_0: *int, _1: *char, _2: ulong) -> ulong
export import def #extern mbtowc(_0: *int, _1: *char, _2: ulong) -> int
export import def #extern qsort(__base: *, __nel: ulong, __width: ulong, __compar: def (*, *) -> (int))
export import def #extern rand() -> int
export import def #extern srand(_0: uint)
export import def #extern strtod(_0: *char, _1: **char) -> double
export import def #extern strtol(__str: *char, __endptr: **char, __base: int) -> long
export import def #extern strtoul(__str: *char, __endptr: **char, __base: int) -> ulong
export import def #extern system(_0: *char) -> int
export import def #extern wcstombs(_0: *char, _1: *int, _2: ulong) -> ulong
export import def #extern wctomb(_0: *char, _1: int) -> int
export import def #extern renameat(_0: int, _1: *char, _2: int, _3: *char) -> int
export import def #extern renamex_np(_0: *char, _1: *char, _2: uint) -> int
export import def #extern renameatx_np(_0: int, _1: *char, _2: int, _3: *char, _4: uint) -> int
export import def #extern clearerr(_0: *FILE)
export import def #extern fclose(_0: *FILE) -> int
export import def #extern feof(_0: *FILE) -> int
export import def #extern ferror(_0: *FILE) -> int
export import def #extern fflush(_0: *FILE) -> int
export import def #extern fgetc(_0: *FILE) -> int
export import def #extern fgetpos(_0: *FILE, _1: *int64) -> int
export import def #extern fgets(_0: *char, _1: int, _2: *FILE) -> *char
export import def #extern fopen(__filename: *char, __mode: *char) -> *FILE
export import def #extern fprintf(_0: *FILE, _1: *char, ...) -> int
export import def #extern fputc(_0: int, _1: *FILE) -> int
export import def #extern fputs(_0: *char, _1: *FILE) -> int
export import def #extern fread(__ptr: *, __size: ulong, __nitems: ulong, __stream: *FILE) -> ulong
export import def #extern freopen(_0: *char, _1: *char, _2: *FILE) -> *FILE
export import def #extern fscanf(_0: *FILE, _1: *char, ...) -> int
export import def #extern fseek(_0: *FILE, _1: long, _2: int) -> int
export import def #extern fsetpos(_0: *FILE, _1: *int64) -> int
export import def #extern ftell(_0: *FILE) -> long
export import def #extern fwrite(__ptr: *, __size: ulong, __nitems: ulong, __stream: *FILE) -> ulong
export import def #extern getc(_0: *FILE) -> int
export import def #extern getchar() -> int
export import def #extern gets(_0: *char) -> *char
export import def #extern perror(_0: *char)
export import def #extern printf(_0: *char, ...) -> int
export import def #extern putc(_0: int, _1: *FILE) -> int
export import def #extern putchar(_0: int) -> int
export import def #extern puts(_0: *char) -> int
export import def #extern remove(_0: *char) -> int
export import def #extern rename(__old: *char, __new: *char) -> int
export import def #extern rewind(_0: *FILE)
export import def #extern scanf(_0: *char, ...) -> int
export import def #extern setbuf(_0: *FILE, _1: *char)
export import def #extern setvbuf(_0: *FILE, _1: *char, _2: int, _3: ulong) -> int
export import def #extern sprintf(_0: *char, _1: *char, ...) -> int
export import def #extern sscanf(_0: *char, _1: *char, ...) -> int
export import def #extern tmpfile() -> *FILE
export import def #extern ungetc(_0: int, _1: *FILE) -> int
export import def #extern vfprintf(_0: *FILE, _1: *char, _2: *char) -> int
export import def #extern vprintf(_0: *char, _1: *char) -> int
export import def #extern vsprintf(_0: *char, _1: *char, _2: *char) -> int
export import def #extern fdopen(_0: int, _1: *char) -> *FILE
export import def #extern fileno(_0: *FILE) -> int
export import def #extern pclose(_0: *FILE) -> int
export import def #extern popen(_0: *char, _1: *char) -> *FILE
export import def #extern __srget(_0: *FILE) -> int
export import def #extern __svfscanf(_0: *FILE, _1: *char, _2: *char) -> int
export import def #extern __swbuf(_0: int, _1: *FILE) -> int
export import def #extern flockfile(_0: *FILE)
export import def #extern ftrylockfile(_0: *FILE) -> int
export import def #extern funlockfile(_0: *FILE)
export import def #extern getc_unlocked(_0: *FILE) -> int
export import def #extern getchar_unlocked() -> int
export import def #extern putc_unlocked(_0: int, _1: *FILE) -> int
export import def #extern putchar_unlocked(_0: int) -> int
export import def #extern getw(_0: *FILE) -> int
export import def #extern putw(_0: int, _1: *FILE) -> int
export import def #extern fseeko(__stream: *FILE, __offset: int64, __whence: int) -> int
export import def #extern ftello(__stream: *FILE) -> int64
export import def #extern snprintf(__str: *char, __size: ulong, __format: *char, ...) -> int
export import def #extern vfscanf(__stream: *FILE, __format: *char, _2: *char) -> int
export import def #extern vscanf(__format: *char, _1: *char) -> int
export import def #extern vsnprintf(__str: *char, __size: ulong, __format: *char, _3: *char) -> int
export import def #extern vsscanf(__str: *char, __format: *char, _2: *char) -> int
export import def #extern dprintf(_0: int, _1: *char, ...) -> int
export import def #extern vdprintf(_0: int, _1: *char, _2: *char) -> int
export import def #extern getdelim(__linep: **char, __linecapp: *ulong, __delimiter: int, __stream: *FILE) -> long
export import def #extern getline(__linep: **char, __linecapp: *ulong, __stream: *FILE) -> long
export import def #extern fmemopen(__buf: *, __size: ulong, __mode: *char) -> *FILE
export import def #extern open_memstream(__bufp: **char, __sizep: *ulong) -> *FILE
export import def #extern asprintf(_0: **char, _1: *char, ...) -> int
export import def #extern ctermid_r(_0: *char) -> *char
export import def #extern fgetln(_0: *FILE, _1: *ulong) -> *char
export import def #extern fmtcheck(_0: *char, _1: *char) -> *char
export import def #extern fpurge(_0: *FILE) -> int
export import def #extern setbuffer(_0: *FILE, _1: *char, _2: int)
export import def #extern setlinebuf(_0: *FILE) -> int
export import def #extern vasprintf(_0: **char, _1: *char, _2: *char) -> int
export import def #extern funopen(_0: *, _1: def (*, *char, int) -> (int), _2: def (*, *char, int) -> (int), _3: def (*, int64, int) -> (int64), _4: def (*) -> (int)) -> *FILE
export import def #extern __sprintf_chk(_0: *char, _1: int, _2: ulong, _3: *char, ...) -> int
export import def #extern __snprintf_chk(_0: *char, _1: ulong, _2: int, _3: ulong, _4: *char, ...) -> int
export import def #extern __vsprintf_chk(_0: *char, _1: int, _2: ulong, _3: *char, _4: *char) -> int
export import def #extern __vsnprintf_chk(_0: *char, _1: ulong, _2: int, _3: ulong, _4: *char, _5: *char) -> int
export import def #extern memchr(__s: *, __c: int, __n: ulong) -> *
export import def #extern memcmp(__s1: *, __s2: *, __n: ulong) -> int
export import def #extern memcpy(__dst: *, __src: *, __n: ulong) -> *
export import def #extern memmove(__dst: *, __src: *, __len: ulong) -> *
export import def #extern memset(__b: *, __c: int, __len: ulong) -> *
export import def #extern strcat(__s1: *char, __s2: *char) -> *char
export import def #extern strchr(__s: *char, __c: int) -> *char
export import def #extern strcmp(__s1: *char, __s2: *char) -> int
export import def #extern strcoll(__s1: *char, __s2: *char) -> int
export import def #extern strcpy(__dst: *char, __src: *char) -> *char
export import def #extern strcspn(__s: *char, __charset: *char) -> ulong
export import def #extern strerror(__errnum: int) -> *char
export import def #extern strlen(__s: *char) -> ulong
export import def #extern strncat(__s1: *char, __s2: *char, __n: ulong) -> *char
export import def #extern strncmp(__s1: *char, __s2: *char, __n: ulong) -> int
export import def #extern strncpy(__dst: *char, __src: *char, __n: ulong) -> *char
export import def #extern strpbrk(__s: *char, __charset: *char) -> *char
export import def #extern strrchr(__s: *char, __c: int) -> *char
export import def #extern strspn(__s: *char, __charset: *char) -> ulong
export import def #extern strstr(__big: *char, __little: *char) -> *char
export import def #extern strtok(__str: *char, __sep: *char) -> *char
export import def #extern strxfrm(__s1: *char, __s2: *char, __n: ulong) -> ulong
export import def #extern strtok_r(__str: *char, __sep: *char, __lasts: **char) -> *char
export import def #extern strerror_r(__errnum: int, __strerrbuf: *char, __buflen: ulong) -> int
export import def #extern strdup(__s1: *char) -> *char
export import def #extern memccpy(__dst: *, __src: *, __c: int, __n: ulong) -> *
export import def #extern stpcpy(__dst: *char, __src: *char) -> *char
export import def #extern stpncpy(__dst: *char, __src: *char, __n: ulong) -> *char
export import def #extern strndup(__s1: *char, __n: ulong) -> *char
export import def #extern strnlen(__s1: *char, __n: ulong) -> ulong
export import def #extern strsignal(__sig: int) -> *char
export import def #extern memset_s(__s: *, __smax: ulong, __c: int, __n: ulong) -> int
export import def #extern memmem(__big: *, __big_len: ulong, __little: *, __little_len: ulong) -> *
export import def #extern memset_pattern4(__b: *, __pattern4: *, __len: ulong)
export import def #extern memset_pattern8(__b: *, __pattern8: *, __len: ulong)
export import def #extern memset_pattern16(__b: *, __pattern16: *, __len: ulong)
export import def #extern strcasestr(__big: *char, __little: *char) -> *char
export import def #extern strnstr(__big: *char, __little: *char, __len: ulong) -> *char
export import def #extern strlcat(__dst: *char, __source: *char, __size: ulong) -> ulong
export import def #extern strlcpy(__dst: *char, __source: *char, __size: ulong) -> ulong
export import def #extern strmode(__mode: int, __bp: *char)
export import def #extern strsep(__stringp: **char, __delim: *char) -> *char
export import def #extern timingsafe_bcmp(__b1: *, __b2: *, __len: ulong) -> int
export import def #extern strsignal_r(__sig: int, __strsignalbuf: *char, __buflen: ulong) -> int
export import def #extern bcmp(_0: *, _1: *, _2: ulong) -> int
export import def #extern bcopy(_0: *, _1: *, _2: ulong)
export import def #extern bzero(_0: *, _1: ulong)
export import def #extern index(_0: *char, _1: int) -> *char
export import def #extern rindex(_0: *char, _1: int) -> *char
export import def #extern ffs(_0: int) -> int
export import def #extern strcasecmp(_0: *char, _1: *char) -> int
export import def #extern strncasecmp(_0: *char, _1: *char, _2: ulong) -> int
export import def #extern ffsl(_0: long) -> int
export import def #extern ffsll(_0: int64) -> int
export import def #extern fls(_0: int) -> int
export import def #extern flsl(_0: long) -> int
export import def #extern flsll(_0: int64) -> int
export import def #extern asctime(_0: *s_tm) -> *char
export import def #extern clock() -> ulong
export import def #extern ctime(_0: *long) -> *char
export import def #extern difftime(_0: long, _1: long) -> double
export import def #extern getdate(_0: *char) -> *s_tm
export import def #extern gmtime(_0: *long) -> *s_tm
export import def #extern localtime(_0: *long) -> *s_tm
export import def #extern mktime(_0: *s_tm) -> long
export import def #extern strftime(_0: *char, _1: ulong, _2: *char, _3: *s_tm) -> ulong
export import def #extern strptime(_0: *char, _1: *char, _2: *s_tm) -> *char
export import def #extern time(_0: *long) -> long
export import def #extern tzset()
export import def #extern asctime_r(_0: *s_tm, _1: *char) -> *char
export import def #extern ctime_r(_0: *long, _1: *char) -> *char
export import def #extern gmtime_r(_0: *long, _1: *s_tm) -> *s_tm
export import def #extern localtime_r(_0: *long, _1: *s_tm) -> *s_tm
export import def #extern posix2time(_0: long) -> long
export import def #extern tzsetwall()
export import def #extern time2posix(_0: long) -> long
export import def #extern timelocal(_0: *s_tm) -> long
export import def #extern timegm(_0: *s_tm) -> long
export import def #extern nanosleep(__rqtp: *s_timespec, __rmtp: *s_timespec) -> int
export import def #extern clock_getres(__clock_id: clockid_t, __res: *s_timespec) -> int
export import def #extern clock_gettime(__clock_id: clockid_t, __tp: *s_timespec) -> int
export import def #extern clock_gettime_nsec_np(__clock_id: clockid_t) -> uint64
export import def #extern clock_settime(__clock_id: clockid_t, __tp: *s_timespec) -> int
export import def #extern timespec_get(ts: *s_timespec, base: int) -> int
export import def #extern __math_errhandling() -> int
export import def #extern __fpclassifyf(_0: float) -> int
export import def #extern __fpclassifyd(_0: double) -> int
export import def #extern __fpclassifyl(_0: float80) -> int
export import def #extern acosf(_0: float) -> float
export import def #extern acos(_0: double) -> double
export import def #extern acosl(_0: float80) -> float80
export import def #extern asinf(_0: float) -> float
export import def #extern asin(_0: double) -> double
export import def #extern asinl(_0: float80) -> float80
export import def #extern atanf(_0: float) -> float
export import def #extern atan(_0: double) -> double
export import def #extern atanl(_0: float80) -> float80
export import def #extern atan2f(_0: float, _1: float) -> float
export import def #extern atan2(_0: double, _1: double) -> double
export import def #extern atan2l(_0: float80, _1: float80) -> float80
export import def #extern cosf(_0: float) -> float
export import def #extern cos(_0: double) -> double
export import def #extern cosl(_0: float80) -> float80
export import def #extern sinf(_0: float) -> float
export import def #extern sin(_0: double) -> double
export import def #extern sinl(_0: float80) -> float80
export import def #extern tanf(_0: float) -> float
export import def #extern tan(_0: double) -> double
export import def #extern tanl(_0: float80) -> float80
export import def #extern acoshf(_0: float) -> float
export import def #extern acosh(_0: double) -> double
export import def #extern acoshl(_0: float80) -> float80
export import def #extern asinhf(_0: float) -> float
export import def #extern asinh(_0: double) -> double
export import def #extern asinhl(_0: float80) -> float80
export import def #extern atanhf(_0: float) -> float
export import def #extern atanh(_0: double) -> double
export import def #extern atanhl(_0: float80) -> float80
export import def #extern coshf(_0: float) -> float
export import def #extern cosh(_0: double) -> double
export import def #extern coshl(_0: float80) -> float80
export import def #extern sinhf(_0: float) -> float
export import def #extern sinh(_0: double) -> double
export import def #extern sinhl(_0: float80) -> float80
export import def #extern tanhf(_0: float) -> float
export import def #extern tanh(_0: double) -> double
export import def #extern tanhl(_0: float80) -> float80
export import def #extern expf(_0: float) -> float
export import def #extern exp(_0: double) -> double
export import def #extern expl(_0: float80) -> float80
export import def #extern exp2f(_0: float) -> float
export import def #extern exp2(_0: double) -> double
export import def #extern exp2l(_0: float80) -> float80
export import def #extern expm1f(_0: float) -> float
export import def #extern expm1(_0: double) -> double
export import def #extern expm1l(_0: float80) -> float80
export import def #extern logf(_0: float) -> float
export import def #extern log(_0: double) -> double
export import def #extern logl(_0: float80) -> float80
export import def #extern log10f(_0: float) -> float
export import def #extern log10(_0: double) -> double
export import def #extern log10l(_0: float80) -> float80
export import def #extern log2f(_0: float) -> float
export import def #extern log2(_0: double) -> double
export import def #extern log2l(_0: float80) -> float80
export import def #extern log1pf(_0: float) -> float
export import def #extern log1p(_0: double) -> double
export import def #extern log1pl(_0: float80) -> float80
export import def #extern logbf(_0: float) -> float
export import def #extern logb(_0: double) -> double
export import def #extern logbl(_0: float80) -> float80
export import def #extern modff(_0: float, _1: *float) -> float
export import def #extern modf(_0: double, _1: *double) -> double
export import def #extern modfl(_0: float80, _1: *float80) -> float80
export import def #extern ldexpf(_0: float, _1: int) -> float
export import def #extern ldexp(_0: double, _1: int) -> double
export import def #extern ldexpl(_0: float80, _1: int) -> float80
export import def #extern frexpf(_0: float, _1: *int) -> float
export import def #extern frexp(_0: double, _1: *int) -> double
export import def #extern frexpl(_0: float80, _1: *int) -> float80
export import def #extern ilogbf(_0: float) -> int
export import def #extern ilogb(_0: double) -> int
export import def #extern ilogbl(_0: float80) -> int
export import def #extern scalbnf(_0: float, _1: int) -> float
export import def #extern scalbn(_0: double, _1: int) -> double
export import def #extern scalbnl(_0: float80, _1: int) -> float80
export import def #extern scalblnf(_0: float, _1: long) -> float
export import def #extern scalbln(_0: double, _1: long) -> double
export import def #extern scalblnl(_0: float80, _1: long) -> float80
export import def #extern fabsf(_0: float) -> float
export import def #extern fabs(_0: double) -> double
export import def #extern fabsl(_0: float80) -> float80
export import def #extern cbrtf(_0: float) -> float
export import def #extern cbrt(_0: double) -> double
export import def #extern cbrtl(_0: float80) -> float80
export import def #extern hypotf(_0: float, _1: float) -> float
export import def #extern hypot(_0: double, _1: double) -> double
export import def #extern hypotl(_0: float80, _1: float80) -> float80
export import def #extern powf(_0: float, _1: float) -> float
export import def #extern pow(_0: double, _1: double) -> double
export import def #extern powl(_0: float80, _1: float80) -> float80
export import def #extern sqrtf(_0: float) -> float
export import def #extern sqrt(_0: double) -> double
export import def #extern sqrtl(_0: float80) -> float80
export import def #extern erff(_0: float) -> float
export import def #extern erf(_0: double) -> double
export import def #extern erfl(_0: float80) -> float80
export import def #extern erfcf(_0: float) -> float
export import def #extern erfc(_0: double) -> double
export import def #extern erfcl(_0: float80) -> float80
export import def #extern lgammaf(_0: float) -> float
export import def #extern lgamma(_0: double) -> double
export import def #extern lgammal(_0: float80) -> float80
export import def #extern tgammaf(_0: float) -> float
export import def #extern tgamma(_0: double) -> double
export import def #extern tgammal(_0: float80) -> float80
export import def #extern ceilf(_0: float) -> float
export import def #extern ceil(_0: double) -> double
export import def #extern ceill(_0: float80) -> float80
export import def #extern floorf(_0: float) -> float
export import def #extern floor(_0: double) -> double
export import def #extern floorl(_0: float80) -> float80
export import def #extern nearbyintf(_0: float) -> float
export import def #extern nearbyint(_0: double) -> double
export import def #extern nearbyintl(_0: float80) -> float80
export import def #extern rintf(_0: float) -> float
export import def #extern rint(_0: double) -> double
export import def #extern rintl(_0: float80) -> float80
export import def #extern lrintf(_0: float) -> long
export import def #extern lrint(_0: double) -> long
export import def #extern lrintl(_0: float80) -> long
export import def #extern roundf(_0: float) -> float
export import def #extern round(_0: double) -> double
export import def #extern roundl(_0: float80) -> float80
export import def #extern lroundf(_0: float) -> long
export import def #extern lround(_0: double) -> long
export import def #extern lroundl(_0: float80) -> long
export import def #extern llrintf(_0: float) -> int64
export import def #extern llrint(_0: double) -> int64
export import def #extern llrintl(_0: float80) -> int64
export import def #extern llroundf(_0: float) -> int64
export import def #extern llround(_0: double) -> int64
export import def #extern llroundl(_0: float80) -> int64
export import def #extern truncf(_0: float) -> float
export import def #extern trunc(_0: double) -> double
export import def #extern truncl(_0: float80) -> float80
export import def #extern fmodf(_0: float, _1: float) -> float
export import def #extern fmod(_0: double, _1: double) -> double
export import def #extern fmodl(_0: float80, _1: float80) -> float80
export import def #extern remainderf(_0: float, _1: float) -> float
export import def #extern remainder(_0: double, _1: double) -> double
export import def #extern remainderl(_0: float80, _1: float80) -> float80
export import def #extern remquof(_0: float, _1: float, _2: *int) -> float
export import def #extern remquo(_0: double, _1: double, _2: *int) -> double
export import def #extern remquol(_0: float80, _1: float80, _2: *int) -> float80
export import def #extern copysignf(_0: float, _1: float) -> float
export import def #extern copysign(_0: double, _1: double) -> double
export import def #extern copysignl(_0: float80, _1: float80) -> float80
export import def #extern nanf(_0: *char) -> float
export import def #extern nan(_0: *char) -> double
export import def #extern nanl(_0: *char) -> float80
export import def #extern nextafterf(_0: float, _1: float) -> float
export import def #extern nextafter(_0: double, _1: double) -> double
export import def #extern nextafterl(_0: float80, _1: float80) -> float80
export import def #extern nexttoward(_0: double, _1: float80) -> double
export import def #extern nexttowardf(_0: float, _1: float80) -> float
export import def #extern nexttowardl(_0: float80, _1: float80) -> float80
export import def #extern fdimf(_0: float, _1: float) -> float
export import def #extern fdim(_0: double, _1: double) -> double
export import def #extern fdiml(_0: float80, _1: float80) -> float80
export import def #extern fmaxf(_0: float, _1: float) -> float
export import def #extern fmax(_0: double, _1: double) -> double
export import def #extern fmaxl(_0: float80, _1: float80) -> float80
export import def #extern fminf(_0: float, _1: float) -> float
export import def #extern fmin(_0: double, _1: double) -> double
export import def #extern fminl(_0: float80, _1: float80) -> float80
export import def #extern fmaf(_0: float, _1: float, _2: float) -> float
export import def #extern fma(_0: double, _1: double, _2: double) -> double
export import def #extern fmal(_0: float80, _1: float80, _2: float80) -> float80
export import def #extern __exp10f(_0: float) -> float
export import def #extern __exp10(_0: double) -> double
export import def #extern __cospif(_0: float) -> float
export import def #extern __cospi(_0: double) -> double
export import def #extern __sinpif(_0: float) -> float
export import def #extern __sinpi(_0: double) -> double
export import def #extern __tanpif(_0: float) -> float
export import def #extern __tanpi(_0: double) -> double
export import def #extern __sincosf_stret(_0: float) -> s___float2
export import def #extern __sincos_stret(_0: double) -> s___double2
export import def #extern __sincospif_stret(_0: float) -> s___float2
export import def #extern __sincospi_stret(_0: double) -> s___double2
export import def #extern j0(_0: double) -> double
export import def #extern j1(_0: double) -> double
export import def #extern jn(_0: int, _1: double) -> double
export import def #extern y0(_0: double) -> double
export import def #extern y1(_0: double) -> double
export import def #extern yn(_0: int, _1: double) -> double
export import def #extern scalb(_0: double, _1: double) -> double
export import def #extern __assert_rtn(_0: *char, _1: *char, _2: int, _3: *char)
export import def #extern raise(_0: int) -> int
export import def #extern bsd_signal(_0: int, _1: def (int) -> ())
export import def #extern kill(_0: int, _1: int) -> int
export import def #extern killpg(_0: int, _1: int) -> int
export import def #extern pthread_kill(_0: *s__opaque_pthread_t, _1: int) -> int
export import def #extern pthread_sigmask(_0: int, _1: *uint, _2: *uint) -> int
export import def #extern sigaction(_0: int, _1: *s_sigaction, _2: *s_sigaction) -> int
export import def #extern sigaddset(_0: *uint, _1: int) -> int
export import def #extern sigaltstack(_0: *s___darwin_sigaltstack, _1: *s___darwin_sigaltstack) -> int
export import def #extern sigdelset(_0: *uint, _1: int) -> int
export import def #extern sigemptyset(_0: *uint) -> int
export import def #extern sigfillset(_0: *uint) -> int
export import def #extern sighold(_0: int) -> int
export import def #extern sigignore(_0: int) -> int
export import def #extern siginterrupt(_0: int, _1: int) -> int
export import def #extern sigismember(_0: *uint, _1: int) -> int
export import def #extern sigpause(_0: int) -> int
export import def #extern sigpending(_0: *uint) -> int
export import def #extern sigprocmask(_0: int, _1: *uint, _2: *uint) -> int
export import def #extern sigrelse(_0: int) -> int
export import def #extern sigset(_0: int, _1: def (int) -> ())
export import def #extern sigsuspend(_0: *uint) -> int
export import def #extern sigwait(_0: *uint, _1: *int) -> int
export import def #extern psignal(_0: uint, _1: *char)
export import def #extern sigblock(_0: int) -> int
export import def #extern sigsetmask(_0: int) -> int
export import def #extern sigvec(_0: int, _1: *s_sigvec, _2: *s_sigvec) -> int
export import def #extern ___runetype(_0: int) -> ulong
export import def #extern ___tolower(_0: int) -> int
export import def #extern ___toupper(_0: int) -> int
export import def #extern __maskrune(_0: int, _1: ulong) -> int
export import def #extern __toupper(_0: int) -> int
export import def #extern __tolower(_0: int) -> int
export import def #extern isalnum(_0: int) -> int
export import def #extern isalpha(_0: int) -> int
export import def #extern isblank(_0: int) -> int
export import def #extern iscntrl(_0: int) -> int
export import def #extern isdigit(_0: int) -> int
export import def #extern isgraph(_0: int) -> int
export import def #extern islower(_0: int) -> int
export import def #extern isprint(_0: int) -> int
export import def #extern ispunct(_0: int) -> int
export import def #extern isspace(_0: int) -> int
export import def #extern isupper(_0: int) -> int
export import def #extern isxdigit(_0: int) -> int
export import def #extern tolower(_0: int) -> int
export import def #extern toupper(_0: int) -> int
export import def #extern localeconv() -> *s_lconv
export import def #extern setlocale(_0: int, _1: *char) -> *char
export import def #extern setjmp(_0: *int) -> int
export import def #extern longjmp(_0: *int, _1: int)
export import def #extern _setjmp(_0: *int) -> int
export import def #extern _longjmp(_0: *int, _1: int)
export import def #extern sigsetjmp(_0: *int, _1: int) -> int
export import def #extern siglongjmp(_0: *int, _1: int)
export import var #extern __stdinp: *FILE
export import var #extern __stdoutp: *FILE
export import var #extern __stderrp: *FILE
export import var #extern tzname: **char
export import var #extern getdate_err: int
export import var #extern timezone: long
export import var #extern daylight: int
export import var #extern signgam: int
export import var #extern sys_signame: [32; *char]
export import var #extern _DefaultRuneLocale: _RuneLocale
export import var #extern _CurrentRuneLocale: *_RuneLocale
