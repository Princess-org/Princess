export type u___mbstate_t = struct #union { __mbstate8: [128; char]; _mbstateL: int64; }
export type s__opaque_pthread_attr_t
export type s__opaque_pthread_cond_t
export type s__opaque_pthread_condattr_t
export type s__opaque_pthread_mutex_t
export type s__opaque_pthread_mutexattr_t
export type s__opaque_pthread_once_t
export type s__opaque_pthread_rwlock_t
export type s__opaque_pthread_rwlockattr_t
export type s__opaque_pthread_t
export type e_idtype_t = enum { P_ALL; P_PID = 1; P_PGID = 2; }
export type s___darwin_mcontext64
export type s___darwin_sigaltstack
export type s___darwin_ucontext
export type u_sigval
export type s___siginfo = struct { si_signo: int; si_errno: int; si_code: int; si_pid: int; si_uid: uint; si_status: int; si_addr: *; si_value: u_sigval; si_band: long; __pad: [7; ulong]; }
export type s_rusage_info_v6
export type s_div_t = struct { quot: int; rem: int; }
export type s_ldiv_t = struct { quot: long; rem: long; }
export type s_lldiv_t = struct { quot: int64; rem: int64; }
export type s__malloc_zone_t
export type s___sbuf
export type s___sFILEX
export type s___sFILE = struct { _p: *uint8; _r: int; _w: int; _flags: short; _file: short; _bf: s___sbuf; _lbfsize: int; _cookie: *; _close: def * -> int; _read: def [*, *char, int] -> int; _seek: def [*, int64, int] -> int64; _write: def [*, *char, int] -> int; _ub: s___sbuf; _extra: *s___sFILEX; _ur: int; _ubuf: [3; uint8]; _nbuf: [1; uint8]; _lb: s___sbuf; _blksize: int; _offset: int64; }
export type e_clockid_t = enum { _CLOCK_REALTIME; _CLOCK_MONOTONIC = 6; _CLOCK_MONOTONIC_RAW = 4; _CLOCK_MONOTONIC_RAW_APPROX = 5; _CLOCK_UPTIME_RAW = 8; _CLOCK_UPTIME_RAW_APPROX = 9; _CLOCK_PROCESS_CPUTIME_ID = 12; _CLOCK_THREAD_CPUTIME_ID = 16; }
export type s__RuneEntry = struct { __min: int; __max: int; __map: int; __types: *uint; }
export type s__RuneRange = struct { __nranges: int; __ranges: *s__RuneEntry; }
export type s__RuneCharClass = struct { __name: [14; char]; __mask: uint; }
export type s__RuneLocale = struct { __magic: [8; char]; __encoding: [32; char]; __sgetrune: def [*char, ulong, **char] -> int; __sputrune: def [int, *char, ulong, **char] -> int; __invalid_rune: int; __runetype: [256; uint]; __maplower: [256; int]; __mapupper: [256; int]; __runetype_ext: s__RuneRange; __maplower_ext: s__RuneRange; __mapupper_ext: s__RuneRange; __variable: *; __variable_len: int; __ncharclasses: int; __charclasses: *s__RuneCharClass; }
export type s___darwin_pthread_handler_rec
export type s___darwin_pthread_handler_rec = struct { __routine: def * -> ; __arg: *; __next: *s___darwin_pthread_handler_rec; }
export type s__opaque_pthread_attr_t = struct { __sig: long; __opaque: [56; char]; }
export type s__opaque_pthread_cond_t = struct { __sig: long; __opaque: [40; char]; }
export type s__opaque_pthread_condattr_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_mutex_t = struct { __sig: long; __opaque: [56; char]; }
export type s__opaque_pthread_mutexattr_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_once_t = struct { __sig: long; __opaque: [8; char]; }
export type s__opaque_pthread_rwlock_t = struct { __sig: long; __opaque: [192; char]; }
export type s__opaque_pthread_rwlockattr_t = struct { __sig: long; __opaque: [16; char]; }
export type s__opaque_pthread_t = struct { __sig: long; __cleanup_stack: *s___darwin_pthread_handler_rec; __opaque: [8176; char]; }
export type s___darwin_arm_exception_state = struct { __exception: uint; __fsr: uint; __far: uint; }
export type s___darwin_arm_exception_state64 = struct { __far: uint64; __esr: uint; __exception: uint; }
export type s___darwin_arm_thread_state = struct { __r: [13; uint]; __sp: uint; __lr: uint; __pc: uint; __cpsr: uint; }
export type s___darwin_arm_thread_state64 = struct { __x: [29; uint64]; __fp: uint64; __lr: uint64; __sp: uint64; __pc: uint64; __cpsr: uint; __pad: uint; }
export type s___darwin_arm_vfp_state = struct { __r: [64; uint]; __fpscr: uint; }
export type s___darwin_arm_neon_state64 = struct { __v: [32; uint128]; __fpsr: uint; __fpcr: uint; }
export type s___darwin_arm_neon_state = struct { __v: [16; uint128]; __fpsr: uint; __fpcr: uint; }
export type s___arm_pagein_state = struct { __pagein_error: int; }
export type s___arm_legacy_debug_state = struct { __bvr: [16; uint]; __bcr: [16; uint]; __wvr: [16; uint]; __wcr: [16; uint]; }
export type s___darwin_arm_debug_state32 = struct { __bvr: [16; uint]; __bcr: [16; uint]; __wvr: [16; uint]; __wcr: [16; uint]; __mdscr_el1: uint64; }
export type s___darwin_arm_debug_state64 = struct { __bvr: [16; uint64]; __bcr: [16; uint64]; __wvr: [16; uint64]; __wcr: [16; uint64]; __mdscr_el1: uint64; }
export type s___darwin_arm_cpmu_state64 = struct { __ctrs: [16; uint64]; }
export type s___darwin_mcontext32 = struct { __es: s___darwin_arm_exception_state; __ss: s___darwin_arm_thread_state; __fs: s___darwin_arm_vfp_state; }
export type s___darwin_mcontext64 = struct { __es: s___darwin_arm_exception_state64; __ss: s___darwin_arm_thread_state64; __ns: s___darwin_arm_neon_state64; }
export type s___darwin_sigaltstack = struct { ss_sp: *; ss_size: ulong; ss_flags: int; }
export type s___darwin_ucontext = struct { uc_onstack: int; uc_sigmask: uint; uc_stack: s___darwin_sigaltstack; uc_link: *s___darwin_ucontext; uc_mcsize: ulong; uc_mcontext: *s___darwin_mcontext64; }
export type u_sigval = struct #union { sival_int: int; sival_ptr: *; }
export type s_sigevent = struct { sigev_notify: int; sigev_signo: int; sigev_value: u_sigval; sigev_notify_function: def u_sigval -> ; sigev_notify_attributes: *s__opaque_pthread_attr_t; }
export type u___sigaction_u = struct #union { __sa_handler: def int -> ; __sa_sigaction: def [int, *s___siginfo, *] -> ; }
export type s___sigaction = struct { __sigaction_u: u___sigaction_u; sa_tramp: def [*, int, int, *s___siginfo, *] -> ; sa_mask: uint; sa_flags: int; }
export type s_sigaction = struct { __sigaction_u: u___sigaction_u; sa_mask: uint; sa_flags: int; }
export type s_sigvec = struct { sv_handler: def int -> ; sv_mask: int; sv_flags: int; }
export type s_sigstack = struct { ss_sp: *char; ss_onstack: int; }
export type s_timeval = struct { tv_sec: long; tv_usec: int; }
export type s_rusage = struct { ru_utime: s_timeval; ru_stime: s_timeval; ru_maxrss: long; ru_ixrss: long; ru_idrss: long; ru_isrss: long; ru_minflt: long; ru_majflt: long; ru_nswap: long; ru_inblock: long; ru_oublock: long; ru_msgsnd: long; ru_msgrcv: long; ru_nsignals: long; ru_nvcsw: long; ru_nivcsw: long; }
export type s_rusage_info_v0 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; }
export type s_rusage_info_v1 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; }
export type s_rusage_info_v2 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; }
export type s_rusage_info_v3 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; }
export type s_rusage_info_v4 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; }
export type s_rusage_info_v5 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; ri_flags: uint64; }
export type s_rusage_info_v6 = struct { ri_uuid: [16; uint8]; ri_user_time: uint64; ri_system_time: uint64; ri_pkg_idle_wkups: uint64; ri_interrupt_wkups: uint64; ri_pageins: uint64; ri_wired_size: uint64; ri_resident_size: uint64; ri_phys_footprint: uint64; ri_proc_start_abstime: uint64; ri_proc_exit_abstime: uint64; ri_child_user_time: uint64; ri_child_system_time: uint64; ri_child_pkg_idle_wkups: uint64; ri_child_interrupt_wkups: uint64; ri_child_pageins: uint64; ri_child_elapsed_abstime: uint64; ri_diskio_bytesread: uint64; ri_diskio_byteswritten: uint64; ri_cpu_time_qos_default: uint64; ri_cpu_time_qos_maintenance: uint64; ri_cpu_time_qos_background: uint64; ri_cpu_time_qos_utility: uint64; ri_cpu_time_qos_legacy: uint64; ri_cpu_time_qos_user_initiated: uint64; ri_cpu_time_qos_user_interactive: uint64; ri_billed_system_time: uint64; ri_serviced_system_time: uint64; ri_logical_writes: uint64; ri_lifetime_max_phys_footprint: uint64; ri_instructions: uint64; ri_cycles: uint64; ri_billed_energy: uint64; ri_serviced_energy: uint64; ri_interval_max_phys_footprint: uint64; ri_runnable_time: uint64; ri_flags: uint64; ri_user_ptime: uint64; ri_system_ptime: uint64; ri_pinstructions: uint64; ri_pcycles: uint64; ri_energy_nj: uint64; ri_penergy_nj: uint64; ri_secure_time_in_system: uint64; ri_secure_ptime_in_system: uint64; ri_reserved: [12; uint64]; }
export type s_rlimit = struct { rlim_cur: uint64; rlim_max: uint64; }
export type s_proc_rlimit_control_wakeupmon = struct { wm_flags: uint; wm_rate: int; }
export type s__OSUnalignedU16
export type s__OSUnalignedU32
export type s__OSUnalignedU64
export type u_wait = struct #union { w_status: int; w_T: struct { #bits(7) w_Termsig: uint; #bits(1) w_Coredump: uint; #bits(8) w_Retcode: uint; #bits(16) w_Filler: uint; }; w_S: struct { #bits(8) w_Stopval: uint; #bits(8) w_Stopsig: uint; #bits(16) w_Filler: uint; }; }
export type s___sbuf = struct { _base: *uint8; _size: int; }
export type s___sFILEX
export type s_timespec = struct { tv_sec: long; tv_nsec: long; }
export type s_tm = struct { tm_sec: int; tm_min: int; tm_hour: int; tm_mday: int; tm_mon: int; tm_year: int; tm_wday: int; tm_yday: int; tm_isdst: int; tm_gmtoff: long; tm_zone: *char; }
export type s___float2 = struct { __sinval: float; __cosval: float; }
export type s___double2 = struct { __sinval: double; __cosval: double; }
export type s_exception = struct { type_: int; name: *char; arg1: double; arg2: double; retval: double; }
export type s_lconv = struct { decimal_point: *char; thousands_sep: *char; grouping: *char; int_curr_symbol: *char; currency_symbol: *char; mon_decimal_point: *char; mon_thousands_sep: *char; mon_grouping: *char; positive_sign: *char; negative_sign: *char; int_frac_digits: char; frac_digits: char; p_cs_precedes: char; p_sep_by_space: char; n_cs_precedes: char; n_sep_by_space: char; p_sign_posn: char; n_sign_posn: char; int_p_cs_precedes: char; int_n_cs_precedes: char; int_p_sep_by_space: char; int_n_sep_by_space: char; int_p_sign_posn: char; int_n_sign_posn: char; }
export const __llvm__: int = 1
export const __clang__: int = 1
export const __clang_major__: int = 17
export const __clang_minor__: int = 0
export const __clang_patchlevel__: int = 6
export const __clang_version__: [char] = "17.0.6 "
export const __GNUC__: int = 4
export const __GNUC_MINOR__: int = 2
export const __GNUC_PATCHLEVEL__: int = 1
export const __GXX_ABI_VERSION: int = 1002
export const __ATOMIC_RELAXED: int = 0
export const __ATOMIC_CONSUME: int = 1
export const __ATOMIC_ACQUIRE: int = 2
export const __ATOMIC_RELEASE: int = 3
export const __ATOMIC_ACQ_REL: int = 4
export const __ATOMIC_SEQ_CST: int = 5
export const __OPENCL_MEMORY_SCOPE_WORK_ITEM: int = 0
export const __OPENCL_MEMORY_SCOPE_WORK_GROUP: int = 1
export const __OPENCL_MEMORY_SCOPE_DEVICE: int = 2
export const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: int = 3
export const __OPENCL_MEMORY_SCOPE_SUB_GROUP: int = 4
export const __PRAGMA_REDEFINE_EXTNAME: int = 1
export const __VERSION__: [char] = "Homebrew Clang 17.0.6"
export const __OBJC_BOOL_IS_BOOL: int = 1
export const __CONSTANT_CFSTRINGS__: int = 1
export const __BLOCKS__: int = 1
export const __clang_literal_encoding__: [char] = "UTF-8"
export const __clang_wide_literal_encoding__: [char] = "UTF-32"
export const __ORDER_LITTLE_ENDIAN__: int = 1234
export const __ORDER_BIG_ENDIAN__: int = 4321
export const __ORDER_PDP_ENDIAN__: int = 3412
export const __LITTLE_ENDIAN__: int = 1
export const _LP64: int = 1
export const __LP64__: int = 1
export const __CHAR_BIT__: int = 8
export const __BOOL_WIDTH__: int = 8
export const __SHRT_WIDTH__: int = 16
export const __INT_WIDTH__: int = 32
export const __LONG_WIDTH__: int = 64
export const __LLONG_WIDTH__: int = 64
export const __BITINT_MAXWIDTH__: int = 128
export const __SCHAR_MAX__: int = 127
export const __SHRT_MAX__: int = 32767
export const __INT_MAX__: int = 2147483647
export const __WCHAR_MAX__: int = 2147483647
export const __WCHAR_WIDTH__: int = 32
export const __WINT_MAX__: int = 2147483647
export const __WINT_WIDTH__: int = 32
export const __INTMAX_WIDTH__: int = 64
export const __SIZE_WIDTH__: int = 64
export const __UINTMAX_WIDTH__: int = 64
export const __PTRDIFF_WIDTH__: int = 64
export const __INTPTR_WIDTH__: int = 64
export const __UINTPTR_WIDTH__: int = 64
export const __SIZEOF_DOUBLE__: int = 8
export const __SIZEOF_FLOAT__: int = 4
export const __SIZEOF_INT__: int = 4
export const __SIZEOF_LONG__: int = 8
export const __SIZEOF_LONG_DOUBLE__: int = 8
export const __SIZEOF_LONG_LONG__: int = 8
export const __SIZEOF_POINTER__: int = 8
export const __SIZEOF_SHORT__: int = 2
export const __SIZEOF_PTRDIFF_T__: int = 8
export const __SIZEOF_SIZE_T__: int = 8
export const __SIZEOF_WCHAR_T__: int = 4
export const __SIZEOF_WINT_T__: int = 4
export const __SIZEOF_INT128__: int = 16
export const __INTMAX_FMTd__: [char] = "ld"
export const __INTMAX_FMTi__: [char] = "li"
export const __UINTMAX_FMTo__: [char] = "lo"
export const __UINTMAX_FMTu__: [char] = "lu"
export const __UINTMAX_FMTx__: [char] = "lx"
export const __UINTMAX_FMTX__: [char] = "lX"
export const __PTRDIFF_FMTd__: [char] = "ld"
export const __PTRDIFF_FMTi__: [char] = "li"
export const __INTPTR_FMTd__: [char] = "ld"
export const __INTPTR_FMTi__: [char] = "li"
export const __SIZE_FMTo__: [char] = "lo"
export const __SIZE_FMTu__: [char] = "lu"
export const __SIZE_FMTx__: [char] = "lx"
export const __SIZE_FMTX__: [char] = "lX"
export const __SIG_ATOMIC_MAX__: int = 2147483647
export const __SIG_ATOMIC_WIDTH__: int = 32
export const __UINTPTR_FMTo__: [char] = "lo"
export const __UINTPTR_FMTu__: [char] = "lu"
export const __UINTPTR_FMTx__: [char] = "lx"
export const __UINTPTR_FMTX__: [char] = "lX"
export const __FLT16_HAS_DENORM__: int = 1
export const __FLT16_DIG__: int = 3
export const __FLT16_DECIMAL_DIG__: int = 5
export const __FLT16_HAS_INFINITY__: int = 1
export const __FLT16_HAS_QUIET_NAN__: int = 1
export const __FLT16_MANT_DIG__: int = 11
export const __FLT16_MAX_10_EXP__: int = 4
export const __FLT16_MAX_EXP__: int = 16
export const __FLT_HAS_DENORM__: int = 1
export const __FLT_DIG__: int = 6
export const __FLT_DECIMAL_DIG__: int = 9
export const __FLT_HAS_INFINITY__: int = 1
export const __FLT_HAS_QUIET_NAN__: int = 1
export const __FLT_MANT_DIG__: int = 24
export const __FLT_MAX_10_EXP__: int = 38
export const __FLT_MAX_EXP__: int = 128
export const __DBL_DENORM_MIN__: double = 4.9406564584124654e-324
export const __DBL_HAS_DENORM__: int = 1
export const __DBL_DIG__: int = 15
export const __DBL_DECIMAL_DIG__: int = 17
export const __DBL_EPSILON__: double = 2.2204460492503131e-16
export const __DBL_HAS_INFINITY__: int = 1
export const __DBL_HAS_QUIET_NAN__: int = 1
export const __DBL_MANT_DIG__: int = 53
export const __DBL_MAX_10_EXP__: int = 308
export const __DBL_MAX_EXP__: int = 1024
export const __DBL_MAX__: double = 1.7976931348623157e+308
export const __DBL_MIN__: double = 2.2250738585072014e-308
export const __LDBL_HAS_DENORM__: int = 1
export const __LDBL_DIG__: int = 15
export const __LDBL_DECIMAL_DIG__: int = 17
export const __LDBL_HAS_INFINITY__: int = 1
export const __LDBL_HAS_QUIET_NAN__: int = 1
export const __LDBL_MANT_DIG__: int = 53
export const __LDBL_MAX_10_EXP__: int = 308
export const __LDBL_MAX_EXP__: int = 1024
export const __POINTER_WIDTH__: int = 64
export const __BIGGEST_ALIGNMENT__: int = 8
export const __INT8_FMTd__: [char] = "hhd"
export const __INT8_FMTi__: [char] = "hhi"
export const __INT16_FMTd__: [char] = "hd"
export const __INT16_FMTi__: [char] = "hi"
export const __INT32_FMTd__: [char] = "d"
export const __INT32_FMTi__: [char] = "i"
export const __INT64_FMTd__: [char] = "lld"
export const __INT64_FMTi__: [char] = "lli"
export const __UINT8_FMTo__: [char] = "hho"
export const __UINT8_FMTu__: [char] = "hhu"
export const __UINT8_FMTx__: [char] = "hhx"
export const __UINT8_FMTX__: [char] = "hhX"
export const __UINT8_MAX__: int = 255
export const __INT8_MAX__: int = 127
export const __UINT16_FMTo__: [char] = "ho"
export const __UINT16_FMTu__: [char] = "hu"
export const __UINT16_FMTx__: [char] = "hx"
export const __UINT16_FMTX__: [char] = "hX"
export const __UINT16_MAX__: int = 65535
export const __INT16_MAX__: int = 32767
export const __UINT32_FMTo__: [char] = "o"
export const __UINT32_FMTu__: [char] = "u"
export const __UINT32_FMTx__: [char] = "x"
export const __UINT32_FMTX__: [char] = "X"
export const __INT32_MAX__: int = 2147483647
export const __UINT64_FMTo__: [char] = "llo"
export const __UINT64_FMTu__: [char] = "llu"
export const __UINT64_FMTx__: [char] = "llx"
export const __UINT64_FMTX__: [char] = "llX"
export const __INT_LEAST8_MAX__: int = 127
export const __INT_LEAST8_WIDTH__: int = 8
export const __INT_LEAST8_FMTd__: [char] = "hhd"
export const __INT_LEAST8_FMTi__: [char] = "hhi"
export const __UINT_LEAST8_MAX__: int = 255
export const __UINT_LEAST8_FMTo__: [char] = "hho"
export const __UINT_LEAST8_FMTu__: [char] = "hhu"
export const __UINT_LEAST8_FMTx__: [char] = "hhx"
export const __UINT_LEAST8_FMTX__: [char] = "hhX"
export const __INT_LEAST16_MAX__: int = 32767
export const __INT_LEAST16_WIDTH__: int = 16
export const __INT_LEAST16_FMTd__: [char] = "hd"
export const __INT_LEAST16_FMTi__: [char] = "hi"
export const __UINT_LEAST16_MAX__: int = 65535
export const __UINT_LEAST16_FMTo__: [char] = "ho"
export const __UINT_LEAST16_FMTu__: [char] = "hu"
export const __UINT_LEAST16_FMTx__: [char] = "hx"
export const __UINT_LEAST16_FMTX__: [char] = "hX"
export const __INT_LEAST32_MAX__: int = 2147483647
export const __INT_LEAST32_WIDTH__: int = 32
export const __INT_LEAST32_FMTd__: [char] = "d"
export const __INT_LEAST32_FMTi__: [char] = "i"
export const __UINT_LEAST32_FMTo__: [char] = "o"
export const __UINT_LEAST32_FMTu__: [char] = "u"
export const __UINT_LEAST32_FMTx__: [char] = "x"
export const __UINT_LEAST32_FMTX__: [char] = "X"
export const __INT_LEAST64_WIDTH__: int = 64
export const __INT_LEAST64_FMTd__: [char] = "lld"
export const __INT_LEAST64_FMTi__: [char] = "lli"
export const __UINT_LEAST64_FMTo__: [char] = "llo"
export const __UINT_LEAST64_FMTu__: [char] = "llu"
export const __UINT_LEAST64_FMTx__: [char] = "llx"
export const __UINT_LEAST64_FMTX__: [char] = "llX"
export const __INT_FAST8_MAX__: int = 127
export const __INT_FAST8_WIDTH__: int = 8
export const __INT_FAST8_FMTd__: [char] = "hhd"
export const __INT_FAST8_FMTi__: [char] = "hhi"
export const __UINT_FAST8_MAX__: int = 255
export const __UINT_FAST8_FMTo__: [char] = "hho"
export const __UINT_FAST8_FMTu__: [char] = "hhu"
export const __UINT_FAST8_FMTx__: [char] = "hhx"
export const __UINT_FAST8_FMTX__: [char] = "hhX"
export const __INT_FAST16_MAX__: int = 32767
export const __INT_FAST16_WIDTH__: int = 16
export const __INT_FAST16_FMTd__: [char] = "hd"
export const __INT_FAST16_FMTi__: [char] = "hi"
export const __UINT_FAST16_MAX__: int = 65535
export const __UINT_FAST16_FMTo__: [char] = "ho"
export const __UINT_FAST16_FMTu__: [char] = "hu"
export const __UINT_FAST16_FMTx__: [char] = "hx"
export const __UINT_FAST16_FMTX__: [char] = "hX"
export const __INT_FAST32_MAX__: int = 2147483647
export const __INT_FAST32_WIDTH__: int = 32
export const __INT_FAST32_FMTd__: [char] = "d"
export const __INT_FAST32_FMTi__: [char] = "i"
export const __UINT_FAST32_FMTo__: [char] = "o"
export const __UINT_FAST32_FMTu__: [char] = "u"
export const __UINT_FAST32_FMTx__: [char] = "x"
export const __UINT_FAST32_FMTX__: [char] = "X"
export const __INT_FAST64_WIDTH__: int = 64
export const __INT_FAST64_FMTd__: [char] = "lld"
export const __INT_FAST64_FMTi__: [char] = "lli"
export const __UINT_FAST64_FMTo__: [char] = "llo"
export const __UINT_FAST64_FMTu__: [char] = "llu"
export const __UINT_FAST64_FMTx__: [char] = "llx"
export const __UINT_FAST64_FMTX__: [char] = "llX"
export const __NO_MATH_ERRNO__: int = 1
export const __FINITE_MATH_ONLY__: int = 0
export const __GNUC_STDC_INLINE__: int = 1
export const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: int = 1
export const __CLANG_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_INT_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __CLANG_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __GCC_ATOMIC_BOOL_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: int = 2
export const __GCC_ATOMIC_SHORT_LOCK_FREE: int = 2
export const __GCC_ATOMIC_INT_LOCK_FREE: int = 2
export const __GCC_ATOMIC_LONG_LOCK_FREE: int = 2
export const __GCC_ATOMIC_LLONG_LOCK_FREE: int = 2
export const __GCC_ATOMIC_POINTER_LOCK_FREE: int = 2
export const __NO_INLINE__: int = 1
export const __PIC__: int = 2
export const __pic__: int = 2
export const __FLT_RADIX__: int = 2
export const __SSP__: int = 1
export const __AARCH64EL__: int = 1
export const __aarch64__: int = 1
export const __GCC_ASM_FLAG_OUTPUTS__: int = 1
export const __AARCH64_CMODEL_SMALL__: int = 1
export const __ARM_ACLE: int = 200
export const __ARM_ARCH: int = 8
export const __ARM_64BIT_STATE: int = 1
export const __ARM_PCS_AAPCS64: int = 1
export const __ARM_ARCH_ISA_A64: int = 1
export const __ARM_FEATURE_CLZ: int = 1
export const __ARM_FEATURE_FMA: int = 1
export const __ARM_FEATURE_IDIV: int = 1
export const __ARM_FEATURE_DIV: int = 1
export const __ARM_FEATURE_NUMERIC_MAXMIN: int = 1
export const __ARM_FEATURE_DIRECTED_ROUNDING: int = 1
export const __ARM_ALIGN_MAX_STACK_PWR: int = 4
export const __ARM_FP16_FORMAT_IEEE: int = 1
export const __ARM_FP16_ARGS: int = 1
export const __ARM_SIZEOF_WCHAR_T: int = 4
export const __ARM_SIZEOF_MINIMAL_ENUM: int = 4
export const __ARM_NEON: int = 1
export const __ARM_FEATURE_CRC32: int = 1
export const __ARM_FEATURE_RCPC: int = 1
export const __HAVE_FUNCTION_MULTI_VERSIONING: int = 1
export const __ARM_FEATURE_CRYPTO: int = 1
export const __ARM_FEATURE_AES: int = 1
export const __ARM_FEATURE_SHA2: int = 1
export const __ARM_FEATURE_SHA3: int = 1
export const __ARM_FEATURE_SHA512: int = 1
export const __ARM_FEATURE_UNALIGNED: int = 1
export const __ARM_FEATURE_FP16_VECTOR_ARITHMETIC: int = 1
export const __ARM_FEATURE_FP16_SCALAR_ARITHMETIC: int = 1
export const __ARM_FEATURE_DOTPROD: int = 1
export const __ARM_FEATURE_ATOMICS: int = 1
export const __ARM_FEATURE_FP16_FML: int = 1
export const __ARM_FEATURE_FRINT: int = 1
export const __ARM_FEATURE_BTI: int = 1
export const __ARM_FEATURE_COMPLEX: int = 1
export const __ARM_FEATURE_JCVT: int = 1
export const __ARM_FEATURE_PAUTH: int = 1
export const __ARM_FEATURE_QRDMX: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: int = 1
export const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: int = 1
export const __FP_FAST_FMA: int = 1
export const __FP_FAST_FMAF: int = 1
export const __AARCH64_SIMD__: int = 1
export const __ARM64_ARCH_8__: int = 1
export const __ARM_NEON__: int = 1
export const __arm64: int = 1
export const __arm64__: int = 1
export const __APPLE_CC__: int = 6000
export const __APPLE__: int = 1
export const __STDC_NO_THREADS__: int = 1
export const __DYNAMIC__: int = 1
export const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__: int = 140000
export const __ENVIRONMENT_OS_VERSION_MIN_REQUIRED__: int = 140000
export const __MACH__: int = 1
export const __STDC__: int = 1
export const __STDC_HOSTED__: int = 1
export const __STDC_UTF_16__: int = 1
export const __STDC_UTF_32__: int = 1
export const __GCC_HAVE_DWARF2_CFI_ASM: int = 1
export const __API_TO_BE_DEPRECATED: int = 100000
export const __API_TO_BE_DEPRECATED_MACOS: int = 100000
export const __API_TO_BE_DEPRECATED_IOS: int = 100000
export const __API_TO_BE_DEPRECATED_MACCATALYST: int = 100000
export const __API_TO_BE_DEPRECATED_WATCHOS: int = 100000
export const __API_TO_BE_DEPRECATED_TVOS: int = 100000
export const __API_TO_BE_DEPRECATED_DRIVERKIT: int = 100000
export const __API_TO_BE_DEPRECATED_VISIONOS: int = 100000
export const __MAC_10_0: int = 1000
export const __MAC_10_1: int = 1010
export const __MAC_10_2: int = 1020
export const __MAC_10_3: int = 1030
export const __MAC_10_4: int = 1040
export const __MAC_10_5: int = 1050
export const __MAC_10_6: int = 1060
export const __MAC_10_7: int = 1070
export const __MAC_10_8: int = 1080
export const __MAC_10_9: int = 1090
export const __MAC_10_10: int = 101000
export const __MAC_10_10_2: int = 101002
export const __MAC_10_10_3: int = 101003
export const __MAC_10_11: int = 101100
export const __MAC_10_11_2: int = 101102
export const __MAC_10_11_3: int = 101103
export const __MAC_10_11_4: int = 101104
export const __MAC_10_12: int = 101200
export const __MAC_10_12_1: int = 101201
export const __MAC_10_12_2: int = 101202
export const __MAC_10_12_4: int = 101204
export const __MAC_10_13: int = 101300
export const __MAC_10_13_1: int = 101301
export const __MAC_10_13_2: int = 101302
export const __MAC_10_13_4: int = 101304
export const __MAC_10_14: int = 101400
export const __MAC_10_14_1: int = 101401
export const __MAC_10_14_4: int = 101404
export const __MAC_10_14_5: int = 101405
export const __MAC_10_14_6: int = 101406
export const __MAC_10_15: int = 101500
export const __MAC_10_15_1: int = 101501
export const __MAC_10_15_4: int = 101504
export const __MAC_10_16: int = 101600
export const __MAC_11_0: int = 110000
export const __MAC_11_1: int = 110100
export const __MAC_11_3: int = 110300
export const __MAC_11_4: int = 110400
export const __MAC_11_5: int = 110500
export const __MAC_11_6: int = 110600
export const __MAC_12_0: int = 120000
export const __MAC_12_1: int = 120100
export const __MAC_12_2: int = 120200
export const __MAC_12_3: int = 120300
export const __MAC_12_4: int = 120400
export const __MAC_12_5: int = 120500
export const __MAC_12_6: int = 120600
export const __MAC_12_7: int = 120700
export const __MAC_13_0: int = 130000
export const __MAC_13_1: int = 130100
export const __MAC_13_2: int = 130200
export const __MAC_13_3: int = 130300
export const __MAC_13_4: int = 130400
export const __MAC_13_5: int = 130500
export const __MAC_13_6: int = 130600
export const __MAC_14_0: int = 140000
export const __MAC_14_1: int = 140100
export const __MAC_14_2: int = 140200
export const __MAC_14_3: int = 140300
export const __MAC_14_4: int = 140400
export const __IPHONE_2_0: int = 20000
export const __IPHONE_2_1: int = 20100
export const __IPHONE_2_2: int = 20200
export const __IPHONE_3_0: int = 30000
export const __IPHONE_3_1: int = 30100
export const __IPHONE_3_2: int = 30200
export const __IPHONE_4_0: int = 40000
export const __IPHONE_4_1: int = 40100
export const __IPHONE_4_2: int = 40200
export const __IPHONE_4_3: int = 40300
export const __IPHONE_5_0: int = 50000
export const __IPHONE_5_1: int = 50100
export const __IPHONE_6_0: int = 60000
export const __IPHONE_6_1: int = 60100
export const __IPHONE_7_0: int = 70000
export const __IPHONE_7_1: int = 70100
export const __IPHONE_8_0: int = 80000
export const __IPHONE_8_1: int = 80100
export const __IPHONE_8_2: int = 80200
export const __IPHONE_8_3: int = 80300
export const __IPHONE_8_4: int = 80400
export const __IPHONE_9_0: int = 90000
export const __IPHONE_9_1: int = 90100
export const __IPHONE_9_2: int = 90200
export const __IPHONE_9_3: int = 90300
export const __IPHONE_10_0: int = 100000
export const __IPHONE_10_1: int = 100100
export const __IPHONE_10_2: int = 100200
export const __IPHONE_10_3: int = 100300
export const __IPHONE_11_0: int = 110000
export const __IPHONE_11_1: int = 110100
export const __IPHONE_11_2: int = 110200
export const __IPHONE_11_3: int = 110300
export const __IPHONE_11_4: int = 110400
export const __IPHONE_12_0: int = 120000
export const __IPHONE_12_1: int = 120100
export const __IPHONE_12_2: int = 120200
export const __IPHONE_12_3: int = 120300
export const __IPHONE_12_4: int = 120400
export const __IPHONE_13_0: int = 130000
export const __IPHONE_13_1: int = 130100
export const __IPHONE_13_2: int = 130200
export const __IPHONE_13_3: int = 130300
export const __IPHONE_13_4: int = 130400
export const __IPHONE_13_5: int = 130500
export const __IPHONE_13_6: int = 130600
export const __IPHONE_13_7: int = 130700
export const __IPHONE_14_0: int = 140000
export const __IPHONE_14_1: int = 140100
export const __IPHONE_14_2: int = 140200
export const __IPHONE_14_3: int = 140300
export const __IPHONE_14_5: int = 140500
export const __IPHONE_14_4: int = 140400
export const __IPHONE_14_6: int = 140600
export const __IPHONE_14_7: int = 140700
export const __IPHONE_14_8: int = 140800
export const __IPHONE_15_0: int = 150000
export const __IPHONE_15_1: int = 150100
export const __IPHONE_15_2: int = 150200
export const __IPHONE_15_3: int = 150300
export const __IPHONE_15_4: int = 150400
export const __IPHONE_15_5: int = 150500
export const __IPHONE_15_6: int = 150600
export const __IPHONE_15_7: int = 150700
export const __IPHONE_15_8: int = 150800
export const __IPHONE_16_0: int = 160000
export const __IPHONE_16_1: int = 160100
export const __IPHONE_16_2: int = 160200
export const __IPHONE_16_3: int = 160300
export const __IPHONE_16_4: int = 160400
export const __IPHONE_16_5: int = 160500
export const __IPHONE_16_6: int = 160600
export const __IPHONE_16_7: int = 160700
export const __IPHONE_17_0: int = 170000
export const __IPHONE_17_1: int = 170100
export const __IPHONE_17_2: int = 170200
export const __IPHONE_17_3: int = 170300
export const __IPHONE_17_4: int = 170400
export const __WATCHOS_1_0: int = 10000
export const __WATCHOS_2_0: int = 20000
export const __WATCHOS_2_1: int = 20100
export const __WATCHOS_2_2: int = 20200
export const __WATCHOS_3_0: int = 30000
export const __WATCHOS_3_1: int = 30100
export const __WATCHOS_3_1_1: int = 30101
export const __WATCHOS_3_2: int = 30200
export const __WATCHOS_4_0: int = 40000
export const __WATCHOS_4_1: int = 40100
export const __WATCHOS_4_2: int = 40200
export const __WATCHOS_4_3: int = 40300
export const __WATCHOS_5_0: int = 50000
export const __WATCHOS_5_1: int = 50100
export const __WATCHOS_5_2: int = 50200
export const __WATCHOS_5_3: int = 50300
export const __WATCHOS_6_0: int = 60000
export const __WATCHOS_6_1: int = 60100
export const __WATCHOS_6_2: int = 60200
export const __WATCHOS_7_0: int = 70000
export const __WATCHOS_7_1: int = 70100
export const __WATCHOS_7_2: int = 70200
export const __WATCHOS_7_3: int = 70300
export const __WATCHOS_7_4: int = 70400
export const __WATCHOS_7_5: int = 70500
export const __WATCHOS_7_6: int = 70600
export const __WATCHOS_8_0: int = 80000
export const __WATCHOS_8_1: int = 80100
export const __WATCHOS_8_3: int = 80300
export const __WATCHOS_8_4: int = 80400
export const __WATCHOS_8_5: int = 80500
export const __WATCHOS_8_6: int = 80600
export const __WATCHOS_8_7: int = 80700
export const __WATCHOS_8_8: int = 80800
export const __WATCHOS_9_0: int = 90000
export const __WATCHOS_9_1: int = 90100
export const __WATCHOS_9_2: int = 90200
export const __WATCHOS_9_3: int = 90300
export const __WATCHOS_9_4: int = 90400
export const __WATCHOS_9_5: int = 90500
export const __WATCHOS_9_6: int = 90600
export const __WATCHOS_10_0: int = 100000
export const __WATCHOS_10_1: int = 100100
export const __WATCHOS_10_2: int = 100200
export const __WATCHOS_10_3: int = 100300
export const __WATCHOS_10_4: int = 100400
export const __TVOS_9_0: int = 90000
export const __TVOS_9_1: int = 90100
export const __TVOS_9_2: int = 90200
export const __TVOS_10_0: int = 100000
export const __TVOS_10_0_1: int = 100001
export const __TVOS_10_1: int = 100100
export const __TVOS_10_2: int = 100200
export const __TVOS_11_0: int = 110000
export const __TVOS_11_1: int = 110100
export const __TVOS_11_2: int = 110200
export const __TVOS_11_3: int = 110300
export const __TVOS_11_4: int = 110400
export const __TVOS_12_0: int = 120000
export const __TVOS_12_1: int = 120100
export const __TVOS_12_2: int = 120200
export const __TVOS_12_3: int = 120300
export const __TVOS_12_4: int = 120400
export const __TVOS_13_0: int = 130000
export const __TVOS_13_2: int = 130200
export const __TVOS_13_3: int = 130300
export const __TVOS_13_4: int = 130400
export const __TVOS_14_0: int = 140000
export const __TVOS_14_1: int = 140100
export const __TVOS_14_2: int = 140200
export const __TVOS_14_3: int = 140300
export const __TVOS_14_5: int = 140500
export const __TVOS_14_6: int = 140600
export const __TVOS_14_7: int = 140700
export const __TVOS_15_0: int = 150000
export const __TVOS_15_1: int = 150100
export const __TVOS_15_2: int = 150200
export const __TVOS_15_3: int = 150300
export const __TVOS_15_4: int = 150400
export const __TVOS_15_5: int = 150500
export const __TVOS_15_6: int = 150600
export const __TVOS_16_0: int = 160000
export const __TVOS_16_1: int = 160100
export const __TVOS_16_2: int = 160200
export const __TVOS_16_3: int = 160300
export const __TVOS_16_4: int = 160400
export const __TVOS_16_5: int = 160500
export const __TVOS_16_6: int = 160600
export const __TVOS_17_0: int = 170000
export const __TVOS_17_1: int = 170100
export const __TVOS_17_2: int = 170200
export const __TVOS_17_3: int = 170300
export const __TVOS_17_4: int = 170400
export const __BRIDGEOS_2_0: int = 20000
export const __BRIDGEOS_3_0: int = 30000
export const __BRIDGEOS_3_1: int = 30100
export const __BRIDGEOS_3_4: int = 30400
export const __BRIDGEOS_4_0: int = 40000
export const __BRIDGEOS_4_1: int = 40100
export const __BRIDGEOS_5_0: int = 50000
export const __BRIDGEOS_5_1: int = 50100
export const __BRIDGEOS_5_3: int = 50300
export const __BRIDGEOS_6_0: int = 60000
export const __BRIDGEOS_6_2: int = 60200
export const __BRIDGEOS_6_4: int = 60400
export const __BRIDGEOS_6_5: int = 60500
export const __BRIDGEOS_6_6: int = 60600
export const __BRIDGEOS_7_0: int = 70000
export const __BRIDGEOS_7_1: int = 70100
export const __BRIDGEOS_7_2: int = 70200
export const __BRIDGEOS_7_3: int = 70300
export const __BRIDGEOS_7_4: int = 70400
export const __BRIDGEOS_7_6: int = 70600
export const __BRIDGEOS_8_0: int = 80000
export const __BRIDGEOS_8_1: int = 80100
export const __BRIDGEOS_8_2: int = 80200
export const __BRIDGEOS_8_3: int = 80300
export const __BRIDGEOS_8_4: int = 80400
export const __DRIVERKIT_19_0: int = 190000
export const __DRIVERKIT_20_0: int = 200000
export const __DRIVERKIT_21_0: int = 210000
export const __DRIVERKIT_22_0: int = 220000
export const __DRIVERKIT_22_4: int = 220400
export const __DRIVERKIT_22_5: int = 220500
export const __DRIVERKIT_22_6: int = 220600
export const __DRIVERKIT_23_0: int = 230000
export const __DRIVERKIT_23_1: int = 230100
export const __DRIVERKIT_23_2: int = 230200
export const __DRIVERKIT_23_3: int = 230300
export const __DRIVERKIT_23_4: int = 230400
export const __VISIONOS_1_0: int = 10000
export const __VISIONOS_1_1: int = 10100
export const __ENABLE_LEGACY_MAC_AVAILABILITY: int = 1
export const __has_safe_buffers: int = 1
export const __DARWIN_ONLY_64_BIT_INO_T: int = 1
export const __DARWIN_ONLY_UNIX_CONFORMANCE: int = 1
export const __DARWIN_ONLY_VERS_1050: int = 1
export const __DARWIN_UNIX03: int = 1
export const __DARWIN_64_BIT_INO_T: int = 1
export const __DARWIN_VERS_1050: int = 1
export const __DARWIN_NON_CANCELABLE: int = 0
export const __DARWIN_SUF_EXTSN: [char] = "$DARWIN_EXTSN"
export const __STDC_WANT_LIB_EXT1__: int = 1
export const __DARWIN_NO_LONG_LONG: int = 0
export const _DARWIN_FEATURE_64_BIT_INODE: int = 1
export const _DARWIN_FEATURE_ONLY_64_BIT_INODE: int = 1
export const _DARWIN_FEATURE_ONLY_VERS_1050: int = 1
export const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: int = 1
export const _DARWIN_FEATURE_UNIX_CONFORMANCE: int = 3
export const __has_ptrcheck: int = 0
export const __PTHREAD_SIZE__: int = 8176
export const __PTHREAD_ATTR_SIZE__: int = 56
export const __PTHREAD_MUTEXATTR_SIZE__: int = 8
export const __PTHREAD_MUTEX_SIZE__: int = 56
export const __PTHREAD_CONDATTR_SIZE__: int = 8
export const __PTHREAD_COND_SIZE__: int = 40
export const __PTHREAD_ONCE_SIZE__: int = 8
export const __PTHREAD_RWLOCK_SIZE__: int = 192
export const __PTHREAD_RWLOCKATTR_SIZE__: int = 16
export const _FORTIFY_SOURCE: int = 2
export const __DARWIN_NSIG: int = 32
export const _ARM_SIGNAL_: int = 1
export const SIGHUP: int = 1
export const SIGINT: int = 2
export const SIGQUIT: int = 3
export const SIGILL: int = 4
export const SIGTRAP: int = 5
export const SIGABRT: int = 6
export const SIGEMT: int = 7
export const SIGFPE: int = 8
export const SIGKILL: int = 9
export const SIGBUS: int = 10
export const SIGSEGV: int = 11
export const SIGSYS: int = 12
export const SIGPIPE: int = 13
export const SIGALRM: int = 14
export const SIGTERM: int = 15
export const SIGURG: int = 16
export const SIGSTOP: int = 17
export const SIGTSTP: int = 18
export const SIGCONT: int = 19
export const SIGCHLD: int = 20
export const SIGTTIN: int = 21
export const SIGTTOU: int = 22
export const SIGIO: int = 23
export const SIGXCPU: int = 24
export const SIGXFSZ: int = 25
export const SIGVTALRM: int = 26
export const SIGPROF: int = 27
export const SIGWINCH: int = 28
export const SIGINFO: int = 29
export const SIGUSR1: int = 30
export const SIGUSR2: int = 31
export const __DARWIN_OPAQUE_ARM_THREAD_STATE64: int = 0
export const SIGEV_NONE: int = 0
export const SIGEV_SIGNAL: int = 1
export const SIGEV_THREAD: int = 3
export const ILL_NOOP: int = 0
export const ILL_ILLOPC: int = 1
export const ILL_ILLTRP: int = 2
export const ILL_PRVOPC: int = 3
export const ILL_ILLOPN: int = 4
export const ILL_ILLADR: int = 5
export const ILL_PRVREG: int = 6
export const ILL_COPROC: int = 7
export const ILL_BADSTK: int = 8
export const FPE_NOOP: int = 0
export const FPE_FLTDIV: int = 1
export const FPE_FLTOVF: int = 2
export const FPE_FLTUND: int = 3
export const FPE_FLTRES: int = 4
export const FPE_FLTINV: int = 5
export const FPE_FLTSUB: int = 6
export const FPE_INTDIV: int = 7
export const FPE_INTOVF: int = 8
export const SEGV_NOOP: int = 0
export const SEGV_MAPERR: int = 1
export const SEGV_ACCERR: int = 2
export const BUS_NOOP: int = 0
export const BUS_ADRALN: int = 1
export const BUS_ADRERR: int = 2
export const BUS_OBJERR: int = 3
export const TRAP_BRKPT: int = 1
export const TRAP_TRACE: int = 2
export const CLD_NOOP: int = 0
export const CLD_EXITED: int = 1
export const CLD_KILLED: int = 2
export const CLD_DUMPED: int = 3
export const CLD_TRAPPED: int = 4
export const CLD_STOPPED: int = 5
export const CLD_CONTINUED: int = 6
export const POLL_IN: int = 1
export const POLL_OUT: int = 2
export const POLL_MSG: int = 3
export const POLL_ERR: int = 4
export const POLL_PRI: int = 5
export const POLL_HUP: int = 6
export const SIG_BLOCK: int = 1
export const SIG_UNBLOCK: int = 2
export const SIG_SETMASK: int = 3
export const MINSIGSTKSZ: int = 32768
export const SIGSTKSZ: int = 131072
export const __WORDSIZE: int = 64
export const INT8_MAX: int = 127
export const INT16_MAX: int = 32767
export const INT32_MAX: int = 2147483647
export const UINT8_MAX: int = 255
export const UINT16_MAX: int = 65535
export const PRIO_PROCESS: int = 0
export const PRIO_PGRP: int = 1
export const PRIO_USER: int = 2
export const PRIO_DARWIN_THREAD: int = 3
export const PRIO_DARWIN_PROCESS: int = 4
export const PRIO_MAX: int = 20
export const RUSAGE_SELF: int = 0
export const RUSAGE_INFO_V0: int = 0
export const RUSAGE_INFO_V1: int = 1
export const RUSAGE_INFO_V2: int = 2
export const RUSAGE_INFO_V3: int = 3
export const RUSAGE_INFO_V4: int = 4
export const RUSAGE_INFO_V5: int = 5
export const RUSAGE_INFO_V6: int = 6
export const RLIMIT_CPU: int = 0
export const RLIMIT_FSIZE: int = 1
export const RLIMIT_DATA: int = 2
export const RLIMIT_STACK: int = 3
export const RLIMIT_CORE: int = 4
export const RLIMIT_AS: int = 5
export const RLIMIT_MEMLOCK: int = 6
export const RLIMIT_NPROC: int = 7
export const RLIMIT_NOFILE: int = 8
export const RLIM_NLIMITS: int = 9
export const IOPOL_TYPE_DISK: int = 0
export const IOPOL_TYPE_VFS_ATIME_UPDATES: int = 2
export const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: int = 3
export const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: int = 4
export const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: int = 5
export const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: int = 6
export const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: int = 7
export const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: int = 8
export const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: int = 9
export const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: int = 10
export const IOPOL_SCOPE_PROCESS: int = 0
export const IOPOL_SCOPE_THREAD: int = 1
export const IOPOL_SCOPE_DARWIN_BG: int = 2
export const IOPOL_DEFAULT: int = 0
export const IOPOL_IMPORTANT: int = 1
export const IOPOL_PASSIVE: int = 2
export const IOPOL_THROTTLE: int = 3
export const IOPOL_UTILITY: int = 4
export const IOPOL_STANDARD: int = 5
export const IOPOL_ATIME_UPDATES_DEFAULT: int = 0
export const IOPOL_ATIME_UPDATES_OFF: int = 1
export const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: int = 0
export const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: int = 1
export const IOPOL_MATERIALIZE_DATALESS_FILES_ON: int = 2
export const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: int = 0
export const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: int = 1
export const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: int = 0
export const IOPOL_VFS_TRIGGER_RESOLVE_OFF: int = 1
export const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: int = 0
export const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: int = 1
export const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: int = 0
export const IOPOL_VFS_IGNORE_PERMISSIONS_ON: int = 1
export const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: int = 0
export const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: int = 1
export const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: int = 0
export const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: int = 1
export const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: int = 0
export const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: int = 1
export const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: int = 0
export const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: int = 1
export const WCOREFLAG: int = 0200
export const _WSTOPPED: int = 0177
export const WAIT_MYPGRP: int = 0
export const _QUAD_HIGHWORD: int = 1
export const _QUAD_LOWWORD: int = 0
export const __DARWIN_LITTLE_ENDIAN: int = 1234
export const __DARWIN_BIG_ENDIAN: int = 4321
export const __DARWIN_PDP_ENDIAN: int = 3412
export const EXIT_FAILURE: int = 1
export const EXIT_SUCCESS: int = 0
export const SEEK_SET: int = 0
export const SEEK_CUR: int = 1
export const SEEK_END: int = 2
export const SEEK_HOLE: int = 3
export const SEEK_DATA: int = 4
export const _IOFBF: int = 0
export const _IOLBF: int = 1
export const _IONBF: int = 2
export const BUFSIZ: int = 1024
export const FOPEN_MAX: int = 20
export const FILENAME_MAX: int = 1024
export const P_tmpdir: [char] = "/var/tmp/"
export const L_tmpnam: int = 1024
export const TMP_MAX: int = 308915776
export const L_ctermid: int = 1024
export const _USE_FORTIFY_LEVEL: int = 2
export const __HAS_FIXED_CHK_PROTOTYPES: int = 1
export const TIME_UTC: int = 1
export const FP_NAN: int = 1
export const FP_INFINITE: int = 2
export const FP_ZERO: int = 3
export const FP_NORMAL: int = 4
export const FP_SUBNORMAL: int = 5
export const FP_SUPERNORMAL: int = 6
export const FP_FAST_FMA: int = 1
export const FP_FAST_FMAF: int = 1
export const FP_FAST_FMAL: int = 1
export const MATH_ERRNO: int = 1
export const MATH_ERREXCEPT: int = 2
export const M_E: double = 2.71828182845904523536028747135266250
export const M_LOG2E: double = 1.44269504088896340735992468100189214
export const M_LOG10E: double = 0.434294481903251827651128918916605082
export const M_LN2: double = 0.693147180559945309417232121458176568
export const M_LN10: double = 2.30258509299404568401799145468436421
export const M_PI: double = 3.14159265358979323846264338327950288
export const M_PI_2: double = 1.57079632679489661923132169163975144
export const M_PI_4: double = 0.785398163397448309615660845819875721
export const M_1_PI: double = 0.318309886183790671537767526745028724
export const M_2_PI: double = 0.636619772367581343075535053490057448
export const M_2_SQRTPI: double = 1.12837916709551257389615890312154517
export const M_SQRT2: double = 1.41421356237309504880168872420969808
export const M_SQRT1_2: double = 0.707106781186547524400844362104849039
export const X_TLOSS: double = 1.41484755040568800000e+16
export const DOMAIN: int = 1
export const SING: int = 2
export const OVERFLOW: int = 3
export const UNDERFLOW: int = 4
export const TLOSS: int = 5
export const PLOSS: int = 6
export const _RUNE_MAGIC_A: [char] = "RuneMagA"
export const _CTYPE_SWS: int = 30
export const LC_ALL: int = 0
export const LC_COLLATE: int = 1
export const LC_CTYPE: int = 2
export const LC_MONETARY: int = 3
export const LC_NUMERIC: int = 4
export const LC_TIME: int = 5
export const LC_MESSAGES: int = 6
export const _LC_LAST: int = 7
export const EPERM: int = 1
export const ENOENT: int = 2
export const ESRCH: int = 3
export const EINTR: int = 4
export const EIO: int = 5
export const ENXIO: int = 6
export const E2BIG: int = 7
export const ENOEXEC: int = 8
export const EBADF: int = 9
export const ECHILD: int = 10
export const EDEADLK: int = 11
export const ENOMEM: int = 12
export const EACCES: int = 13
export const EFAULT: int = 14
export const ENOTBLK: int = 15
export const EBUSY: int = 16
export const EEXIST: int = 17
export const EXDEV: int = 18
export const ENODEV: int = 19
export const ENOTDIR: int = 20
export const EISDIR: int = 21
export const EINVAL: int = 22
export const ENFILE: int = 23
export const EMFILE: int = 24
export const ENOTTY: int = 25
export const ETXTBSY: int = 26
export const EFBIG: int = 27
export const ENOSPC: int = 28
export const ESPIPE: int = 29
export const EROFS: int = 30
export const EMLINK: int = 31
export const EPIPE: int = 32
export const EDOM: int = 33
export const ERANGE: int = 34
export const EAGAIN: int = 35
export const EINPROGRESS: int = 36
export const EALREADY: int = 37
export const ENOTSOCK: int = 38
export const EDESTADDRREQ: int = 39
export const EMSGSIZE: int = 40
export const EPROTOTYPE: int = 41
export const ENOPROTOOPT: int = 42
export const EPROTONOSUPPORT: int = 43
export const ESOCKTNOSUPPORT: int = 44
export const ENOTSUP: int = 45
export const EPFNOSUPPORT: int = 46
export const EAFNOSUPPORT: int = 47
export const EADDRINUSE: int = 48
export const EADDRNOTAVAIL: int = 49
export const ENETDOWN: int = 50
export const ENETUNREACH: int = 51
export const ENETRESET: int = 52
export const ECONNABORTED: int = 53
export const ECONNRESET: int = 54
export const ENOBUFS: int = 55
export const EISCONN: int = 56
export const ENOTCONN: int = 57
export const ESHUTDOWN: int = 58
export const ETOOMANYREFS: int = 59
export const ETIMEDOUT: int = 60
export const ECONNREFUSED: int = 61
export const ELOOP: int = 62
export const ENAMETOOLONG: int = 63
export const EHOSTDOWN: int = 64
export const EHOSTUNREACH: int = 65
export const ENOTEMPTY: int = 66
export const EPROCLIM: int = 67
export const EUSERS: int = 68
export const EDQUOT: int = 69
export const ESTALE: int = 70
export const EREMOTE: int = 71
export const EBADRPC: int = 72
export const ERPCMISMATCH: int = 73
export const EPROGUNAVAIL: int = 74
export const EPROGMISMATCH: int = 75
export const EPROCUNAVAIL: int = 76
export const ENOLCK: int = 77
export const ENOSYS: int = 78
export const EFTYPE: int = 79
export const EAUTH: int = 80
export const ENEEDAUTH: int = 81
export const EPWROFF: int = 82
export const EDEVERR: int = 83
export const EOVERFLOW: int = 84
export const EBADEXEC: int = 85
export const EBADARCH: int = 86
export const ESHLIBVERS: int = 87
export const EBADMACHO: int = 88
export const ECANCELED: int = 89
export const EIDRM: int = 90
export const ENOMSG: int = 91
export const EILSEQ: int = 92
export const ENOATTR: int = 93
export const EBADMSG: int = 94
export const EMULTIHOP: int = 95
export const ENODATA: int = 96
export const ENOLINK: int = 97
export const ENOSR: int = 98
export const ENOSTR: int = 99
export const EPROTO: int = 100
export const ETIME: int = 101
export const EOPNOTSUPP: int = 102
export const ENOPOLICY: int = 103
export const ENOTRECOVERABLE: int = 104
export const EOWNERDEAD: int = 105
export const EQFULL: int = 106
export const ELAST: int = 106
export const FLT_HAS_SUBNORM: int = 1
export const DBL_HAS_SUBNORM: int = 1
export const LDBL_HAS_SUBNORM: int = 1
export const __DARWIN_CLK_TCK: int = 100
export const MB_LEN_MAX: int = 6
export const CHAR_BIT: int = 8
export const SCHAR_MAX: int = 127
export const UCHAR_MAX: int = 255
export const CHAR_MAX: int = 127
export const USHRT_MAX: int = 65535
export const SHRT_MAX: int = 32767
export const INT_MAX: int = 2147483647
export const LONG_BIT: int = 64
export const WORD_BIT: int = 32
export const CHILD_MAX: int = 266
export const LINK_MAX: int = 32767
export const MAX_CANON: int = 1024
export const MAX_INPUT: int = 1024
export const NAME_MAX: int = 255
export const NGROUPS_MAX: int = 16
export const OPEN_MAX: int = 10240
export const PATH_MAX: int = 1024
export const PIPE_BUF: int = 512
export const BC_BASE_MAX: int = 99
export const BC_DIM_MAX: int = 2048
export const BC_SCALE_MAX: int = 99
export const BC_STRING_MAX: int = 1000
export const CHARCLASS_NAME_MAX: int = 14
export const COLL_WEIGHTS_MAX: int = 2
export const EQUIV_CLASS_MAX: int = 2
export const EXPR_NEST_MAX: int = 32
export const LINE_MAX: int = 2048
export const RE_DUP_MAX: int = 255
export const NZERO: int = 20
export const _POSIX_ARG_MAX: int = 4096
export const _POSIX_CHILD_MAX: int = 25
export const _POSIX_LINK_MAX: int = 8
export const _POSIX_MAX_CANON: int = 255
export const _POSIX_MAX_INPUT: int = 255
export const _POSIX_NAME_MAX: int = 14
export const _POSIX_NGROUPS_MAX: int = 8
export const _POSIX_OPEN_MAX: int = 20
export const _POSIX_PATH_MAX: int = 256
export const _POSIX_PIPE_BUF: int = 512
export const _POSIX_SSIZE_MAX: int = 32767
export const _POSIX_STREAM_MAX: int = 8
export const _POSIX_TZNAME_MAX: int = 6
export const _POSIX2_BC_BASE_MAX: int = 99
export const _POSIX2_BC_DIM_MAX: int = 2048
export const _POSIX2_BC_SCALE_MAX: int = 99
export const _POSIX2_BC_STRING_MAX: int = 1000
export const _POSIX2_EQUIV_CLASS_MAX: int = 2
export const _POSIX2_EXPR_NEST_MAX: int = 32
export const _POSIX2_LINE_MAX: int = 2048
export const _POSIX2_RE_DUP_MAX: int = 255
export const _POSIX_AIO_LISTIO_MAX: int = 2
export const _POSIX_AIO_MAX: int = 1
export const _POSIX_DELAYTIMER_MAX: int = 32
export const _POSIX_MQ_OPEN_MAX: int = 8
export const _POSIX_MQ_PRIO_MAX: int = 32
export const _POSIX_RTSIG_MAX: int = 8
export const _POSIX_SEM_NSEMS_MAX: int = 256
export const _POSIX_SEM_VALUE_MAX: int = 32767
export const _POSIX_SIGQUEUE_MAX: int = 32
export const _POSIX_TIMER_MAX: int = 32
export const _POSIX_CLOCKRES_MIN: int = 20000000
export const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: int = 4
export const _POSIX_THREAD_KEYS_MAX: int = 128
export const _POSIX_THREAD_THREADS_MAX: int = 64
export const PTHREAD_DESTRUCTOR_ITERATIONS: int = 4
export const PTHREAD_KEYS_MAX: int = 512
export const PTHREAD_STACK_MIN: int = 16384
export const _POSIX_HOST_NAME_MAX: int = 255
export const _POSIX_LOGIN_NAME_MAX: int = 9
export const _POSIX_SS_REPL_MAX: int = 4
export const _POSIX_SYMLINK_MAX: int = 255
export const _POSIX_SYMLOOP_MAX: int = 8
export const _POSIX_TRACE_EVENT_NAME_MAX: int = 30
export const _POSIX_TRACE_NAME_MAX: int = 8
export const _POSIX_TRACE_SYS_MAX: int = 8
export const _POSIX_TRACE_USER_EVENT_MAX: int = 32
export const _POSIX_TTY_NAME_MAX: int = 9
export const _POSIX2_CHARCLASS_NAME_MAX: int = 14
export const _POSIX2_COLL_WEIGHTS_MAX: int = 2
export const PASS_MAX: int = 128
export const NL_ARGMAX: int = 9
export const NL_LANGMAX: int = 14
export const NL_MSGMAX: int = 32767
export const NL_NMAX: int = 1
export const NL_SETMAX: int = 255
export const NL_TEXTMAX: int = 2048
export const _XOPEN_IOV_MAX: int = 16
export const IOV_MAX: int = 1024
export const _XOPEN_NAME_MAX: int = 255
export const _XOPEN_PATH_MAX: int = 1024
export const P_ALL: int = 0
export const P_PID: int = 1
export const P_PGID: int = 2
export import def #extern signal(_0: int, _1: def int -> ) -> def int -> 
export import def #extern getpriority(_0: int, _1: uint) -> int
export import def #extern getiopolicy_np(_0: int, _1: int) -> int
export import def #extern getrlimit(_0: int, _1: *s_rlimit) -> int
export import def #extern getrusage(_0: int, _1: *s_rusage) -> int
export import def #extern setpriority(_0: int, _1: uint, _2: int) -> int
export import def #extern setiopolicy_np(_0: int, _1: int, _2: int) -> int
export import def #extern setrlimit(_0: int, _1: *s_rlimit) -> int
export import def #extern wait(_0: *int) -> int
export import def #extern waitpid(_0: int, _1: *int, _2: int) -> int
export import def #extern waitid(_0: e_idtype_t, _1: uint, _2: *s___siginfo, _3: int) -> int
export import def #extern wait3(_0: *int, _1: int, _2: *s_rusage) -> int
export import def #extern wait4(_0: int, _1: *int, _2: int, _3: *s_rusage) -> int
export import var #extern __mb_cur_max: int
export import def #extern malloc_type_malloc(size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_calloc(count: ulong, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_free(ptr: *, type_id: uint64)
export import def #extern malloc_type_realloc(ptr: *, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_valloc(size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_aligned_alloc(alignment: ulong, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_posix_memalign(memptr: **, alignment: ulong, size: ulong, type_id: uint64) -> int
export import def #extern malloc_type_zone_malloc(zone: *s__malloc_zone_t, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_zone_calloc(zone: *s__malloc_zone_t, count: ulong, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_zone_free(zone: *s__malloc_zone_t, ptr: *, type_id: uint64)
export import def #extern malloc_type_zone_realloc(zone: *s__malloc_zone_t, ptr: *, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_zone_valloc(zone: *s__malloc_zone_t, size: ulong, type_id: uint64) -> *
export import def #extern malloc_type_zone_memalign(zone: *s__malloc_zone_t, alignment: ulong, size: ulong, type_id: uint64) -> *
export import def #extern malloc(__size: ulong) -> *
export import def #extern calloc(__count: ulong, __size: ulong) -> *
export import def #extern free(_0: *)
export import def #extern realloc(__ptr: *, __size: ulong) -> *
export import def #extern reallocf(__ptr: *, __size: ulong) -> *
export import def #extern valloc(_0: ulong) -> *
export import def #extern aligned_alloc(__alignment: ulong, __size: ulong) -> *
export import def #extern posix_memalign(__memptr: **, __alignment: ulong, __size: ulong) -> int
export import def #extern abort()
export import def #extern abs(_0: int) -> int
export import def #extern atexit(_0: def  -> ) -> int
export import def #extern atof(_0: *char) -> double
export import def #extern atoi(_0: *char) -> int
export import def #extern atol(_0: *char) -> long
export import def #extern atoll(_0: *char) -> int64
export import def #extern bsearch(__key: *, __base: *, __nel: ulong, __width: ulong, __compar: def [*, *] -> int) -> *
export import def #extern div(_0: int, _1: int) -> s_div_t
export import def #extern exit(_0: int)
export import def #extern getenv(_0: *char) -> *char
export import def #extern labs(_0: long) -> long
export import def #extern ldiv(_0: long, _1: long) -> s_ldiv_t
export import def #extern llabs(_0: int64) -> int64
export import def #extern lldiv(_0: int64, _1: int64) -> s_lldiv_t
export import def #extern mblen(__s: *char, __n: ulong) -> int
export import def #extern mbstowcs(_0: *int, _1: *char, _2: ulong) -> ulong
export import def #extern mbtowc(_0: *int, _1: *char, _2: ulong) -> int
export import def #extern qsort(__base: *, __nel: ulong, __width: ulong, __compar: def [*, *] -> int)
export import def #extern rand() -> int
export import def #extern srand(_0: uint)
export import def #extern strtod(_0: *char, _1: **char) -> double
export import def #extern strtof(_0: *char, _1: **char) -> float
export import def #extern strtol(__str: *char, __endptr: **char, __base: int) -> long
export import def #extern strtold(_0: *char, _1: **char) -> float80
export import def #extern strtoll(__str: *char, __endptr: **char, __base: int) -> int64
export import def #extern strtoul(__str: *char, __endptr: **char, __base: int) -> ulong
export import def #extern strtoull(__str: *char, __endptr: **char, __base: int) -> uint64
export import def #extern system(_0: *char) -> int
export import def #extern wcstombs(_0: *char, _1: *int, _2: ulong) -> ulong
export import def #extern wctomb(_0: *char, _1: int) -> int
export import def #extern _Exit(_0: int)
export import def #extern a64l(_0: *char) -> long
export import def #extern drand48() -> double
export import def #extern ecvt(_0: double, _1: int, _2: *int, _3: *int) -> *char
export import def #extern erand48(_0: *ushort) -> double
export import def #extern fcvt(_0: double, _1: int, _2: *int, _3: *int) -> *char
export import def #extern gcvt(_0: double, _1: int, _2: *char) -> *char
export import def #extern getsubopt(_0: **char, _1: **char, _2: **char) -> int
export import def #extern grantpt(_0: int) -> int
export import def #extern initstate(_0: uint, _1: *char, _2: ulong) -> *char
export import def #extern jrand48(_0: *ushort) -> long
export import def #extern l64a(_0: long) -> *char
export import def #extern lcong48(_0: *ushort)
export import def #extern lrand48() -> long
export import def #extern mkstemp(_0: *char) -> int
export import def #extern mrand48() -> long
export import def #extern nrand48(_0: *ushort) -> long
export import def #extern posix_openpt(_0: int) -> int
export import def #extern ptsname(_0: int) -> *char
export import def #extern ptsname_r(fildes: int, buffer: *char, buflen: ulong) -> int
export import def #extern putenv(_0: *char) -> int
export import def #extern random() -> long
export import def #extern rand_r(_0: *uint) -> int
export import def #extern realpath(_0: *char, _1: *char) -> *char
export import def #extern seed48(_0: *ushort) -> *ushort
export import def #extern setenv(__name: *char, __value: *char, __overwrite: int) -> int
export import def #extern setkey(_0: *char)
export import def #extern setstate(_0: *char) -> *char
export import def #extern srand48(_0: long)
export import def #extern srandom(_0: uint)
export import def #extern unlockpt(_0: int) -> int
export import def #extern unsetenv(_0: *char) -> int
export import def #extern arc4random() -> uint
export import def #extern arc4random_addrandom(_0: *uint8, _1: int)
export import def #extern arc4random_buf(__buf: *, __nbytes: ulong)
export import def #extern arc4random_stir()
export import def #extern arc4random_uniform(__upper_bound: uint) -> uint
export import def #extern cgetcap(_0: *char, _1: *char, _2: int) -> *char
export import def #extern cgetclose() -> int
export import def #extern cgetent(_0: **char, _1: **char, _2: *char) -> int
export import def #extern cgetfirst(_0: **char, _1: **char) -> int
export import def #extern cgetmatch(_0: *char, _1: *char) -> int
export import def #extern cgetnext(_0: **char, _1: **char) -> int
export import def #extern cgetnum(_0: *char, _1: *char, _2: *long) -> int
export import def #extern cgetset(_0: *char) -> int
export import def #extern cgetstr(_0: *char, _1: *char, _2: **char) -> int
export import def #extern cgetustr(_0: *char, _1: *char, _2: **char) -> int
export import def #extern daemon(_0: int, _1: int) -> int
export import def #extern devname(_0: int, _1: ushort) -> *char
export import def #extern devname_r(_0: int, _1: ushort, buf: *char, len: int) -> *char
export import def #extern getbsize(_0: *int, _1: *long) -> *char
export import def #extern getloadavg(_0: *double, _1: int) -> int
export import def #extern getprogname() -> *char
export import def #extern setprogname(_0: *char)
export import def #extern heapsort(__base: *, __nel: ulong, __width: ulong, __compar: def [*, *] -> int) -> int
export import def #extern mergesort(__base: *, __nel: ulong, __width: ulong, __compar: def [*, *] -> int) -> int
export import def #extern psort(__base: *, __nel: ulong, __width: ulong, __compar: def [*, *] -> int)
export import def #extern psort_r(__base: *, __nel: ulong, __width: ulong, _3: *, __compar: def [*, *, *] -> int)
export import def #extern qsort_r(__base: *, __nel: ulong, __width: ulong, _3: *, __compar: def [*, *, *] -> int)
export import def #extern radixsort(__base: **uint8, __nel: int, __table: *uint8, __endbyte: uint) -> int
export import def #extern sradixsort(__base: **uint8, __nel: int, __table: *uint8, __endbyte: uint) -> int
export import def #extern sranddev()
export import def #extern srandomdev()
export import def #extern strtonum(__numstr: *char, __minval: int64, __maxval: int64, __errstrp: **char) -> int64
export import var #extern suboptarg: *char
export import def #extern renameat(_0: int, _1: *char, _2: int, _3: *char) -> int
export import def #extern renamex_np(_0: *char, _1: *char, _2: uint) -> int
export import def #extern renameatx_np(_0: int, _1: *char, _2: int, _3: *char, _4: uint) -> int
export import var #extern __stdinp: *s___sFILE
export import var #extern __stdoutp: *s___sFILE
export import var #extern __stderrp: *s___sFILE
export import def #extern clearerr(_0: *s___sFILE)
export import def #extern fclose(_0: *s___sFILE) -> int
export import def #extern feof(_0: *s___sFILE) -> int
export import def #extern ferror(_0: *s___sFILE) -> int
export import def #extern fflush(_0: *s___sFILE) -> int
export import def #extern fgetc(_0: *s___sFILE) -> int
export import def #extern fgetpos(_0: *s___sFILE, _1: *int64) -> int
export import def #extern fgets(_0: *char, _1: int, _2: *s___sFILE) -> *char
export import def #extern fopen(__filename: *char, __mode: *char) -> *s___sFILE
export import def #extern fprintf(_0: *s___sFILE, _1: *char, ...) -> int
export import def #extern fputc(_0: int, _1: *s___sFILE) -> int
export import def #extern fputs(_0: *char, _1: *s___sFILE) -> int
export import def #extern fread(__ptr: *, __size: ulong, __nitems: ulong, __stream: *s___sFILE) -> ulong
export import def #extern freopen(_0: *char, _1: *char, _2: *s___sFILE) -> *s___sFILE
export import def #extern fscanf(_0: *s___sFILE, _1: *char, ...) -> int
export import def #extern fseek(_0: *s___sFILE, _1: long, _2: int) -> int
export import def #extern fsetpos(_0: *s___sFILE, _1: *int64) -> int
export import def #extern ftell(_0: *s___sFILE) -> long
export import def #extern fwrite(__ptr: *, __size: ulong, __nitems: ulong, __stream: *s___sFILE) -> ulong
export import def #extern getc(_0: *s___sFILE) -> int
export import def #extern getchar() -> int
export import def #extern gets(_0: *char) -> *char
export import def #extern perror(_0: *char)
export import def #extern printf(_0: *char, ...) -> int
export import def #extern putc(_0: int, _1: *s___sFILE) -> int
export import def #extern putchar(_0: int) -> int
export import def #extern puts(_0: *char) -> int
export import def #extern remove(_0: *char) -> int
export import def #extern rename(__old: *char, __new: *char) -> int
export import def #extern rewind(_0: *s___sFILE)
export import def #extern scanf(_0: *char, ...) -> int
export import def #extern setbuf(_0: *s___sFILE, _1: *char)
export import def #extern setvbuf(_0: *s___sFILE, _1: *char, _2: int, _3: ulong) -> int
export import def #extern sprintf(_0: *char, _1: *char, ...) -> int
export import def #extern sscanf(_0: *char, _1: *char, ...) -> int
export import def #extern tmpfile() -> *s___sFILE
export import def #extern ungetc(_0: int, _1: *s___sFILE) -> int
export import def #extern vfprintf(_0: *s___sFILE, _1: *char, _2: __va_list_tag) -> int
export import def #extern vprintf(_0: *char, _1: __va_list_tag) -> int
export import def #extern vsprintf(_0: *char, _1: *char, _2: __va_list_tag) -> int
export import def #extern ctermid(_0: *char) -> *char
export import def #extern fdopen(_0: int, _1: *char) -> *s___sFILE
export import def #extern fileno(_0: *s___sFILE) -> int
export import def #extern pclose(_0: *s___sFILE) -> int
export import def #extern popen(_0: *char, _1: *char) -> *s___sFILE
export import def #extern __srget(_0: *s___sFILE) -> int
export import def #extern __svfscanf(_0: *s___sFILE, _1: *char, _2: __va_list_tag) -> int
export import def #extern __swbuf(_0: int, _1: *s___sFILE) -> int
export import def #extern flockfile(_0: *s___sFILE)
export import def #extern ftrylockfile(_0: *s___sFILE) -> int
export import def #extern funlockfile(_0: *s___sFILE)
export import def #extern getc_unlocked(_0: *s___sFILE) -> int
export import def #extern getchar_unlocked() -> int
export import def #extern putc_unlocked(_0: int, _1: *s___sFILE) -> int
export import def #extern putchar_unlocked(_0: int) -> int
export import def #extern getw(_0: *s___sFILE) -> int
export import def #extern putw(_0: int, _1: *s___sFILE) -> int
export import def #extern fseeko(__stream: *s___sFILE, __offset: int64, __whence: int) -> int
export import def #extern ftello(__stream: *s___sFILE) -> int64
export import def #extern snprintf(__str: *char, __size: ulong, __format: *char, ...) -> int
export import def #extern vfscanf(__stream: *s___sFILE, __format: *char, _2: __va_list_tag) -> int
export import def #extern vscanf(__format: *char, _1: __va_list_tag) -> int
export import def #extern vsnprintf(__str: *char, __size: ulong, __format: *char, _3: __va_list_tag) -> int
export import def #extern vsscanf(__str: *char, __format: *char, _2: __va_list_tag) -> int
export import def #extern dprintf(_0: int, _1: *char, ...) -> int
export import def #extern vdprintf(_0: int, _1: *char, _2: __va_list_tag) -> int
export import def #extern getdelim(__linep: **char, __linecapp: *ulong, __delimiter: int, __stream: *s___sFILE) -> long
export import def #extern getline(__linep: **char, __linecapp: *ulong, __stream: *s___sFILE) -> long
export import def #extern fmemopen(__buf: *, __size: ulong, __mode: *char) -> *s___sFILE
export import def #extern open_memstream(__bufp: **char, __sizep: *ulong) -> *s___sFILE
export import def #extern asprintf(_0: **char, _1: *char, ...) -> int
export import def #extern ctermid_r(_0: *char) -> *char
export import def #extern fgetln(_0: *s___sFILE, _1: *ulong) -> *char
export import def #extern fmtcheck(_0: *char, _1: *char) -> *char
export import def #extern fpurge(_0: *s___sFILE) -> int
export import def #extern setbuffer(_0: *s___sFILE, _1: *char, _2: int)
export import def #extern setlinebuf(_0: *s___sFILE) -> int
export import def #extern vasprintf(_0: **char, _1: *char, _2: __va_list_tag) -> int
export import def #extern funopen(_0: *, _1: def [*, *char, int] -> int, _2: def [*, *char, int] -> int, _3: def [*, int64, int] -> int64, _4: def * -> int) -> *s___sFILE
export import def #extern __sprintf_chk(_0: *char, _1: int, _2: ulong, _3: *char, ...) -> int
export import def #extern __snprintf_chk(_0: *char, _1: ulong, _2: int, _3: ulong, _4: *char, ...) -> int
export import def #extern __vsprintf_chk(_0: *char, _1: int, _2: ulong, _3: *char, _4: __va_list_tag) -> int
export import def #extern __vsnprintf_chk(_0: *char, _1: ulong, _2: int, _3: ulong, _4: *char, _5: __va_list_tag) -> int
export import def #extern memchr(__s: *, __c: int, __n: ulong) -> *
export import def #extern memcmp(__s1: *, __s2: *, __n: ulong) -> int
export import def #extern memcpy(__dst: *, __src: *, __n: ulong) -> *
export import def #extern memmove(__dst: *, __src: *, __len: ulong) -> *
export import def #extern memset(__b: *, __c: int, __len: ulong) -> *
export import def #extern strcat(__s1: *char, __s2: *char) -> *char
export import def #extern strchr(__s: *char, __c: int) -> *char
export import def #extern strcmp(__s1: *char, __s2: *char) -> int
export import def #extern strcoll(__s1: *char, __s2: *char) -> int
export import def #extern strcpy(__dst: *char, __src: *char) -> *char
export import def #extern strcspn(__s: *char, __charset: *char) -> ulong
export import def #extern strerror(__errnum: int) -> *char
export import def #extern strlen(__s: *char) -> ulong
export import def #extern strncat(__s1: *char, __s2: *char, __n: ulong) -> *char
export import def #extern strncmp(__s1: *char, __s2: *char, __n: ulong) -> int
export import def #extern strncpy(__dst: *char, __src: *char, __n: ulong) -> *char
export import def #extern strpbrk(__s: *char, __charset: *char) -> *char
export import def #extern strrchr(__s: *char, __c: int) -> *char
export import def #extern strspn(__s: *char, __charset: *char) -> ulong
export import def #extern strstr(__big: *char, __little: *char) -> *char
export import def #extern strtok(__str: *char, __sep: *char) -> *char
export import def #extern strxfrm(__s1: *char, __s2: *char, __n: ulong) -> ulong
export import def #extern strtok_r(__str: *char, __sep: *char, __lasts: **char) -> *char
export import def #extern strerror_r(__errnum: int, __strerrbuf: *char, __buflen: ulong) -> int
export import def #extern strdup(__s1: *char) -> *char
export import def #extern memccpy(__dst: *, __src: *, __c: int, __n: ulong) -> *
export import def #extern stpcpy(__dst: *char, __src: *char) -> *char
export import def #extern stpncpy(__dst: *char, __src: *char, __n: ulong) -> *char
export import def #extern strndup(__s1: *char, __n: ulong) -> *char
export import def #extern strnlen(__s1: *char, __n: ulong) -> ulong
export import def #extern strsignal(__sig: int) -> *char
export import def #extern memset_s(__s: *, __smax: ulong, __c: int, __n: ulong) -> int
export import def #extern memmem(__big: *, __big_len: ulong, __little: *, __little_len: ulong) -> *
export import def #extern memset_pattern4(__b: *, __pattern4: *, __len: ulong)
export import def #extern memset_pattern8(__b: *, __pattern8: *, __len: ulong)
export import def #extern memset_pattern16(__b: *, __pattern16: *, __len: ulong)
export import def #extern strcasestr(__big: *char, __little: *char) -> *char
export import def #extern strnstr(__big: *char, __little: *char, __len: ulong) -> *char
export import def #extern strlcat(__dst: *char, __source: *char, __size: ulong) -> ulong
export import def #extern strlcpy(__dst: *char, __source: *char, __size: ulong) -> ulong
export import def #extern strmode(__mode: int, __bp: *char)
export import def #extern strsep(__stringp: **char, __delim: *char) -> *char
export import def #extern swab(_0: *, _1: *, _2: long)
export import def #extern timingsafe_bcmp(__b1: *, __b2: *, __len: ulong) -> int
export import def #extern strsignal_r(__sig: int, __strsignalbuf: *char, __buflen: ulong) -> int
export import def #extern bcmp(_0: *, _1: *, _2: ulong) -> int
export import def #extern bcopy(_0: *, _1: *, _2: ulong)
export import def #extern bzero(_0: *, _1: ulong)
export import def #extern index(_0: *char, _1: int) -> *char
export import def #extern rindex(_0: *char, _1: int) -> *char
export import def #extern ffs(_0: int) -> int
export import def #extern strcasecmp(_0: *char, _1: *char) -> int
export import def #extern strncasecmp(_0: *char, _1: *char, _2: ulong) -> int
export import def #extern ffsl(_0: long) -> int
export import def #extern ffsll(_0: int64) -> int
export import def #extern fls(_0: int) -> int
export import def #extern flsl(_0: long) -> int
export import def #extern flsll(_0: int64) -> int
export import var #extern tzname: **char
export import var #extern getdate_err: int
export import var #extern timezone: long
export import var #extern daylight: int
export import def #extern asctime(_0: *s_tm) -> *char
export import def #extern clock() -> ulong
export import def #extern ctime(_0: *long) -> *char
export import def #extern difftime(_0: long, _1: long) -> double
export import def #extern getdate(_0: *char) -> *s_tm
export import def #extern gmtime(_0: *long) -> *s_tm
export import def #extern localtime(_0: *long) -> *s_tm
export import def #extern mktime(_0: *s_tm) -> long
export import def #extern strftime(_0: *char, _1: ulong, _2: *char, _3: *s_tm) -> ulong
export import def #extern strptime(_0: *char, _1: *char, _2: *s_tm) -> *char
export import def #extern time(_0: *long) -> long
export import def #extern tzset()
export import def #extern asctime_r(_0: *s_tm, _1: *char) -> *char
export import def #extern ctime_r(_0: *long, _1: *char) -> *char
export import def #extern gmtime_r(_0: *long, _1: *s_tm) -> *s_tm
export import def #extern localtime_r(_0: *long, _1: *s_tm) -> *s_tm
export import def #extern posix2time(_0: long) -> long
export import def #extern tzsetwall()
export import def #extern time2posix(_0: long) -> long
export import def #extern timegm(_0: *s_tm) -> long
export import def #extern nanosleep(__rqtp: *s_timespec, __rmtp: *s_timespec) -> int
export const _CLOCK_REALTIME: int = 0
export const _CLOCK_MONOTONIC: int = 6
export const _CLOCK_MONOTONIC_RAW: int = 4
export const _CLOCK_MONOTONIC_RAW_APPROX: int = 5
export const _CLOCK_UPTIME_RAW: int = 8
export const _CLOCK_UPTIME_RAW_APPROX: int = 9
export const _CLOCK_PROCESS_CPUTIME_ID: int = 12
export const _CLOCK_THREAD_CPUTIME_ID: int = 16
export import def #extern clock_getres(__clock_id: e_clockid_t, __res: *s_timespec) -> int
export import def #extern clock_gettime(__clock_id: e_clockid_t, __tp: *s_timespec) -> int
export import def #extern clock_gettime_nsec_np(__clock_id: e_clockid_t) -> uint64
export import def #extern clock_settime(__clock_id: e_clockid_t, __tp: *s_timespec) -> int
export import def #extern timespec_get(ts: *s_timespec, base: int) -> int
export import def #extern __math_errhandling() -> int
export import def #extern __fpclassifyf(_0: float) -> int
export import def #extern __fpclassifyd(_0: double) -> int
export import def #extern __fpclassifyl(_0: float80) -> int
export import def #extern __inline_isfinitef(__x: float) -> int
export import def #extern __inline_isfinited(__x: double) -> int
export import def #extern __inline_isfinitel(__x: float80) -> int
export import def #extern __inline_isinff(__x: float) -> int
export import def #extern __inline_isinfd(__x: double) -> int
export import def #extern __inline_isinfl(__x: float80) -> int
export import def #extern __inline_isnanf(__x: float) -> int
export import def #extern __inline_isnand(__x: double) -> int
export import def #extern __inline_isnanl(__x: float80) -> int
export import def #extern __inline_isnormalf(__x: float) -> int
export import def #extern __inline_isnormald(__x: double) -> int
export import def #extern __inline_isnormall(__x: float80) -> int
export import def #extern __inline_signbitf(__x: float) -> int
export import def #extern __inline_signbitd(__x: double) -> int
export import def #extern __inline_signbitl(__x: float80) -> int
export import def #extern acosf(_0: float) -> float
export import def #extern acos(_0: double) -> double
export import def #extern acosl(_0: float80) -> float80
export import def #extern asinf(_0: float) -> float
export import def #extern asin(_0: double) -> double
export import def #extern asinl(_0: float80) -> float80
export import def #extern atanf(_0: float) -> float
export import def #extern atan(_0: double) -> double
export import def #extern atanl(_0: float80) -> float80
export import def #extern atan2f(_0: float, _1: float) -> float
export import def #extern atan2(_0: double, _1: double) -> double
export import def #extern atan2l(_0: float80, _1: float80) -> float80
export import def #extern cosf(_0: float) -> float
export import def #extern cos(_0: double) -> double
export import def #extern cosl(_0: float80) -> float80
export import def #extern sinf(_0: float) -> float
export import def #extern sin(_0: double) -> double
export import def #extern sinl(_0: float80) -> float80
export import def #extern tanf(_0: float) -> float
export import def #extern tan(_0: double) -> double
export import def #extern tanl(_0: float80) -> float80
export import def #extern acoshf(_0: float) -> float
export import def #extern acosh(_0: double) -> double
export import def #extern acoshl(_0: float80) -> float80
export import def #extern asinhf(_0: float) -> float
export import def #extern asinh(_0: double) -> double
export import def #extern asinhl(_0: float80) -> float80
export import def #extern atanhf(_0: float) -> float
export import def #extern atanh(_0: double) -> double
export import def #extern atanhl(_0: float80) -> float80
export import def #extern coshf(_0: float) -> float
export import def #extern cosh(_0: double) -> double
export import def #extern coshl(_0: float80) -> float80
export import def #extern sinhf(_0: float) -> float
export import def #extern sinh(_0: double) -> double
export import def #extern sinhl(_0: float80) -> float80
export import def #extern tanhf(_0: float) -> float
export import def #extern tanh(_0: double) -> double
export import def #extern tanhl(_0: float80) -> float80
export import def #extern expf(_0: float) -> float
export import def #extern exp(_0: double) -> double
export import def #extern expl(_0: float80) -> float80
export import def #extern exp2f(_0: float) -> float
export import def #extern exp2(_0: double) -> double
export import def #extern exp2l(_0: float80) -> float80
export import def #extern expm1f(_0: float) -> float
export import def #extern expm1(_0: double) -> double
export import def #extern expm1l(_0: float80) -> float80
export import def #extern logf(_0: float) -> float
export import def #extern log(_0: double) -> double
export import def #extern logl(_0: float80) -> float80
export import def #extern log10f(_0: float) -> float
export import def #extern log10(_0: double) -> double
export import def #extern log10l(_0: float80) -> float80
export import def #extern log2f(_0: float) -> float
export import def #extern log2(_0: double) -> double
export import def #extern log2l(_0: float80) -> float80
export import def #extern log1pf(_0: float) -> float
export import def #extern log1p(_0: double) -> double
export import def #extern log1pl(_0: float80) -> float80
export import def #extern logbf(_0: float) -> float
export import def #extern logb(_0: double) -> double
export import def #extern logbl(_0: float80) -> float80
export import def #extern modff(_0: float, _1: *float) -> float
export import def #extern modf(_0: double, _1: *double) -> double
export import def #extern modfl(_0: float80, _1: *float80) -> float80
export import def #extern ldexpf(_0: float, _1: int) -> float
export import def #extern ldexp(_0: double, _1: int) -> double
export import def #extern ldexpl(_0: float80, _1: int) -> float80
export import def #extern frexpf(_0: float, _1: *int) -> float
export import def #extern frexp(_0: double, _1: *int) -> double
export import def #extern frexpl(_0: float80, _1: *int) -> float80
export import def #extern ilogbf(_0: float) -> int
export import def #extern ilogb(_0: double) -> int
export import def #extern ilogbl(_0: float80) -> int
export import def #extern scalbnf(_0: float, _1: int) -> float
export import def #extern scalbn(_0: double, _1: int) -> double
export import def #extern scalbnl(_0: float80, _1: int) -> float80
export import def #extern scalblnf(_0: float, _1: long) -> float
export import def #extern scalbln(_0: double, _1: long) -> double
export import def #extern scalblnl(_0: float80, _1: long) -> float80
export import def #extern fabsf(_0: float) -> float
export import def #extern fabs(_0: double) -> double
export import def #extern fabsl(_0: float80) -> float80
export import def #extern cbrtf(_0: float) -> float
export import def #extern cbrt(_0: double) -> double
export import def #extern cbrtl(_0: float80) -> float80
export import def #extern hypotf(_0: float, _1: float) -> float
export import def #extern hypot(_0: double, _1: double) -> double
export import def #extern hypotl(_0: float80, _1: float80) -> float80
export import def #extern powf(_0: float, _1: float) -> float
export import def #extern pow(_0: double, _1: double) -> double
export import def #extern powl(_0: float80, _1: float80) -> float80
export import def #extern sqrtf(_0: float) -> float
export import def #extern sqrt(_0: double) -> double
export import def #extern sqrtl(_0: float80) -> float80
export import def #extern erff(_0: float) -> float
export import def #extern erf(_0: double) -> double
export import def #extern erfl(_0: float80) -> float80
export import def #extern erfcf(_0: float) -> float
export import def #extern erfc(_0: double) -> double
export import def #extern erfcl(_0: float80) -> float80
export import def #extern lgammaf(_0: float) -> float
export import def #extern lgamma(_0: double) -> double
export import def #extern lgammal(_0: float80) -> float80
export import def #extern tgammaf(_0: float) -> float
export import def #extern tgamma(_0: double) -> double
export import def #extern tgammal(_0: float80) -> float80
export import def #extern ceilf(_0: float) -> float
export import def #extern ceil(_0: double) -> double
export import def #extern ceill(_0: float80) -> float80
export import def #extern floorf(_0: float) -> float
export import def #extern floor(_0: double) -> double
export import def #extern floorl(_0: float80) -> float80
export import def #extern nearbyintf(_0: float) -> float
export import def #extern nearbyint(_0: double) -> double
export import def #extern nearbyintl(_0: float80) -> float80
export import def #extern rintf(_0: float) -> float
export import def #extern rint(_0: double) -> double
export import def #extern rintl(_0: float80) -> float80
export import def #extern lrintf(_0: float) -> long
export import def #extern lrint(_0: double) -> long
export import def #extern lrintl(_0: float80) -> long
export import def #extern roundf(_0: float) -> float
export import def #extern round(_0: double) -> double
export import def #extern roundl(_0: float80) -> float80
export import def #extern lroundf(_0: float) -> long
export import def #extern lround(_0: double) -> long
export import def #extern lroundl(_0: float80) -> long
export import def #extern llrintf(_0: float) -> int64
export import def #extern llrint(_0: double) -> int64
export import def #extern llrintl(_0: float80) -> int64
export import def #extern llroundf(_0: float) -> int64
export import def #extern llround(_0: double) -> int64
export import def #extern llroundl(_0: float80) -> int64
export import def #extern truncf(_0: float) -> float
export import def #extern trunc(_0: double) -> double
export import def #extern truncl(_0: float80) -> float80
export import def #extern fmodf(_0: float, _1: float) -> float
export import def #extern fmod(_0: double, _1: double) -> double
export import def #extern fmodl(_0: float80, _1: float80) -> float80
export import def #extern remainderf(_0: float, _1: float) -> float
export import def #extern remainder(_0: double, _1: double) -> double
export import def #extern remainderl(_0: float80, _1: float80) -> float80
export import def #extern remquof(_0: float, _1: float, _2: *int) -> float
export import def #extern remquo(_0: double, _1: double, _2: *int) -> double
export import def #extern remquol(_0: float80, _1: float80, _2: *int) -> float80
export import def #extern copysignf(_0: float, _1: float) -> float
export import def #extern copysign(_0: double, _1: double) -> double
export import def #extern copysignl(_0: float80, _1: float80) -> float80
export import def #extern nanf(_0: *char) -> float
export import def #extern nan(_0: *char) -> double
export import def #extern nanl(_0: *char) -> float80
export import def #extern nextafterf(_0: float, _1: float) -> float
export import def #extern nextafter(_0: double, _1: double) -> double
export import def #extern nextafterl(_0: float80, _1: float80) -> float80
export import def #extern nexttoward(_0: double, _1: float80) -> double
export import def #extern nexttowardf(_0: float, _1: float80) -> float
export import def #extern nexttowardl(_0: float80, _1: float80) -> float80
export import def #extern fdimf(_0: float, _1: float) -> float
export import def #extern fdim(_0: double, _1: double) -> double
export import def #extern fdiml(_0: float80, _1: float80) -> float80
export import def #extern fmaxf(_0: float, _1: float) -> float
export import def #extern fmax(_0: double, _1: double) -> double
export import def #extern fmaxl(_0: float80, _1: float80) -> float80
export import def #extern fminf(_0: float, _1: float) -> float
export import def #extern fmin(_0: double, _1: double) -> double
export import def #extern fminl(_0: float80, _1: float80) -> float80
export import def #extern fmaf(_0: float, _1: float, _2: float) -> float
export import def #extern fma(_0: double, _1: double, _2: double) -> double
export import def #extern fmal(_0: float80, _1: float80, _2: float80) -> float80
export import def #extern __exp10f(_0: float) -> float
export import def #extern __exp10(_0: double) -> double
export import def #extern __sincosf(__x: float, __sinp: *float, __cosp: *float)
export import def #extern __sincos(__x: double, __sinp: *double, __cosp: *double)
export import def #extern __cospif(_0: float) -> float
export import def #extern __cospi(_0: double) -> double
export import def #extern __sinpif(_0: float) -> float
export import def #extern __sinpi(_0: double) -> double
export import def #extern __tanpif(_0: float) -> float
export import def #extern __tanpi(_0: double) -> double
export import def #extern __sincospif(__x: float, __sinp: *float, __cosp: *float)
export import def #extern __sincospi(__x: double, __sinp: *double, __cosp: *double)
export import def #extern __sincosf_stret(_0: float) -> s___float2
export import def #extern __sincos_stret(_0: double) -> s___double2
export import def #extern __sincospif_stret(_0: float) -> s___float2
export import def #extern __sincospi_stret(_0: double) -> s___double2
export import def #extern j0(_0: double) -> double
export import def #extern j1(_0: double) -> double
export import def #extern jn(_0: int, _1: double) -> double
export import def #extern y0(_0: double) -> double
export import def #extern y1(_0: double) -> double
export import def #extern yn(_0: int, _1: double) -> double
export import def #extern scalb(_0: double, _1: double) -> double
export import var #extern signgam: int
export import def #extern __assert_rtn(_0: *char, _1: *char, _2: int, _3: *char)
export import var #extern sys_signame: **char
export import def #extern raise(_0: int) -> int
export import def #extern bsd_signal(_0: int, _1: def int -> ) -> def int -> 
export import def #extern kill(_0: int, _1: int) -> int
export import def #extern killpg(_0: int, _1: int) -> int
export import def #extern pthread_kill(_0: *s__opaque_pthread_t, _1: int) -> int
export import def #extern pthread_sigmask(_0: int, _1: *uint, _2: *uint) -> int
export import def #extern sigaction(_0: int, _1: *s_sigaction, _2: *s_sigaction) -> int
export import def #extern sigaddset(_0: *uint, _1: int) -> int
export import def #extern sigaltstack(_0: *s___darwin_sigaltstack, _1: *s___darwin_sigaltstack) -> int
export import def #extern sigdelset(_0: *uint, _1: int) -> int
export import def #extern sigemptyset(_0: *uint) -> int
export import def #extern sigfillset(_0: *uint) -> int
export import def #extern sighold(_0: int) -> int
export import def #extern sigignore(_0: int) -> int
export import def #extern siginterrupt(_0: int, _1: int) -> int
export import def #extern sigismember(_0: *uint, _1: int) -> int
export import def #extern sigpause(_0: int) -> int
export import def #extern sigpending(_0: *uint) -> int
export import def #extern sigprocmask(_0: int, _1: *uint, _2: *uint) -> int
export import def #extern sigrelse(_0: int) -> int
export import def #extern sigset(_0: int, _1: def int -> ) -> def int -> 
export import def #extern sigsuspend(_0: *uint) -> int
export import def #extern sigwait(_0: *uint, _1: *int) -> int
export import def #extern psignal(_0: int, _1: *char)
export import def #extern sigvec(_0: int, _1: *s_sigvec, _2: *s_sigvec) -> int
export import var #extern _DefaultRuneLocale: s__RuneLocale
export import var #extern _CurrentRuneLocale: *s__RuneLocale
export import def #extern ___runetype(_0: int) -> ulong
export import def #extern ___tolower(_0: int) -> int
export import def #extern ___toupper(_0: int) -> int
export import def #extern isascii(_c: int) -> int
export import def #extern __maskrune(_0: int, _1: ulong) -> int
export import def #extern __istype(_c: int, _f: ulong) -> int
export import def #extern __isctype(_c: int, _f: ulong) -> int
export import def #extern __toupper(_0: int) -> int
export import def #extern __tolower(_0: int) -> int
export import def #extern __wcwidth(_c: int) -> int
export import def #extern isalnum(_c: int) -> int
export import def #extern isalpha(_c: int) -> int
export import def #extern isblank(_c: int) -> int
export import def #extern iscntrl(_c: int) -> int
export import def #extern isdigit(_c: int) -> int
export import def #extern isgraph(_c: int) -> int
export import def #extern islower(_c: int) -> int
export import def #extern isprint(_c: int) -> int
export import def #extern ispunct(_c: int) -> int
export import def #extern isspace(_c: int) -> int
export import def #extern isupper(_c: int) -> int
export import def #extern isxdigit(_c: int) -> int
export import def #extern toascii(_c: int) -> int
export import def #extern tolower(_c: int) -> int
export import def #extern toupper(_c: int) -> int
export import def #extern digittoint(_c: int) -> int
export import def #extern ishexnumber(_c: int) -> int
export import def #extern isideogram(_c: int) -> int
export import def #extern isnumber(_c: int) -> int
export import def #extern isphonogram(_c: int) -> int
export import def #extern isrune(_c: int) -> int
export import def #extern isspecial(_c: int) -> int
export import def #extern localeconv() -> *s_lconv
export import def #extern setlocale(_0: int, _1: *char) -> *char
export import def #extern setjmp(_0: *int) -> int
export import def #extern longjmp(_0: *int, _1: int)
export import def #extern _setjmp(_0: *int) -> int
export import def #extern _longjmp(_0: *int, _1: int)
export import def #extern sigsetjmp(_0: *int, _1: int) -> int
export import def #extern siglongjmp(_0: *int, _1: int)
export import def #extern __error() -> *int
