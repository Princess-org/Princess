import io
import process

#if defined WIN32 {
    // TODO Somehow on windows the dll doesn't inherit the mode
    cstd::_setmode(1, 0x8000)
    cstd::_setmode(2, 0x8000)
}

export let tmpfolder = tmpfolder("princess")

export def query_compiler -> Str {
    var compiler: Str = runtime::executable
    let env = cstd::getenv("PRINCESS_COMPILER".value)
    if env { compiler = make_string(env) }
    return compiler
}

export def run_compiler_on_source(str: String, args: [String]) -> String {
    let file = tmpfolder + "/main.pr"
    let fh = open(file, "w")
    fprint(fh, str)
    fh.close()

    return run_compiler(file, args)
}

export def run_compiler(file: String, args: [String]) -> String {
    let r, w = io::pipe(io::NO_BLOCKING)

    let compiler = query_compiler()

    let res = allocate_ref(String, args.size + 2)
    res(0) = file
    res(1) = "--no-incremental" // TODO Enable incremental compilation
    for var i in 0..args.size {
        res(i + 2) = args(i)
    }

    let proc = *process::spawn(
        compiler,
        res,
        stdout = w
    )
    var ast: Str
    while proc.running {
        proc.wait(100)
        ast = ast + r.read_remaining()
    }
    proc.dispose()

    if proc.exit_code {
        close(r)
        close(w)
        return null
    }

    fflush(w)
    close(w)
    close(r)
    return ast
}

def read_until_prompt(stream: File) -> Str {
    var buf: StringBuffer = ""
    while not ferror(stream) {
        var c: char
        while read(stream, *c) {
            buf += c
            if buf.ends_with(">>> ") {
                return buf.substring(0, buf.length() - 5)
            }
        }
    }
    return [] !Str
}

export def run_repl(input: String) -> String {
    let rstdin, wstdin = io::pipe()
    let rstdout, wstdout = io::pipe()
    defer {
        close(rstdin)
        close(wstdin)
        close(rstdout)
        close(wstdout)
    }

    let compiler = query_compiler()
    let proc = *process::spawn(
        compiler,
        [] ![String],
        stdout = wstdout,
        stdin = rstdin
    )

    read_until_prompt(rstdout)
    wstdin.write(@input.to_array(), input.length)
    wstdin.write('\r')
    fflush(wstdin)

    var result = read_until_prompt(rstdout)
    result = result.substring(2, result.length())
    
    wstdin.write(3 !char)
    fflush(wstdin)

    proc.wait()
    proc.dispose()
    if proc.exit_code {
        return null
    }

    return result
}

export def test_file(name: String) -> Str {
    return dirname(__file__) + "/runtime/" + name
}

export def executable(name: String) -> Str {
    #if defined WIN32 {
        return name + ".exe"
    }
    return name
}

export def compile_source(src: String) -> int {
    return run_source(src, run = false)
}

export def run_source(src: String, run: bool = true) -> int {
    let file = tmpfolder + "/main"
    let fh = open(file + ".pr", "w")
    fprint(fh, src)
    fh.close()
    return run_file(file, run)
}

export def compile_file(name: String) -> int {
    return run_file(name, run = false)
}

export def run_file(name: String, run: bool = true) -> int {
    let src = name + ".pr"
    let exe = executable(name)

    let res = run_compiler(src, ["-o"! String, exe !String])
    if not res { return 1 }

    if run {
        let proc = *process::spawn(exe, [] ![String])
        proc.wait()
        proc.dispose()
        return proc.exit_code
    }
    return 0
}