import json
import common

def parse(str: String) -> &Json {
    return json::parse(common::run_compiler_on_source(str, ["--ast" !String]))
}

def program(jsn: &Json) -> &Json {
    let obj = json::make_object()
    obj("kind") = "Program"
    let body = json::make_array()
    body.push(jsn)
    obj("body") = body
    return obj
}

def #test test_identifiers {
    assert parse("foo") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo"],
        "prefixed": false, "args": null
    }"""))

    assert parse("foo::bar::baz") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar", "baz"],
        "prefixed": false, "args": null
    }"""))

    /*assert parse("::foo::bar::baz") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar", "baz"],
        "prefixed": true, "args": null
    }"""))*/ // TODO Fix this
    
    /*assert parse("foo::bar::") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar"],
        "prefixed": false, "args": null
    }"""))*/ // TODO Fix this

    assert parse("foo::bar::(int)") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar"],
        "prefixed": false,
        "args": [{
            "kind": "Identifier", "path": ["int"],
            "prefixed": false, "args": null
        }]
    }"""))

    assert parse("foo::bar::(int, [] -> [])") == program(json::parse("""{
      "kind": "Identifier",
      "path": [
        "foo",
        "bar"
      ],
      "prefixed": false,
      "args": [
        {
          "kind": "Identifier",
          "path": [
            "int"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "FunctionT",
          "args": [
          ],
          "ret": [
          ]
        }
      ]
    }"""))
    
    assert parse("foo::bar::(int, [] -> [])") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar"],
        "prefixed": false, 
        "args": [{
            "kind": "Identifier", "path": ["int"],
            "prefixed": false, "args": null
        }, {
            "kind": "FunctionT", "args": [], "ret": []
        }]
    }"""))
}

def #test test_binary_operators {
    assert parse("1 + 2 * 3 - 5") == program(json::parse("""{\
        "kind": "Sub",
        "left": {
            "kind": "Add",
            "left": { "kind": "Integer", "value": 1 },
            "right": {
                "kind": "Mul",
                "left": { "kind": "Integer", "value": 2 },
                "right": { "kind": "Integer", "value": 3 }
            }
        },
        "right": { "kind": "Integer", "value": 5 }
    }"""))

    assert parse("1 << 5 + 0xFF >> 1") == program(json::parse("""{\
        "kind": "Add",
        "left": {
            "kind": "Shl",
            "left": { "kind": "Integer", "value": 1 },
            "right": { "kind": "Integer", "value": 5 }
        },
        "right": {
            "kind": "Shr",
            "left": { "kind": "Integer", "value": 255 },
            "right": { "kind": "Integer", "value": 1}
        }
    }"""))

    assert parse("0 and 2 or 5") == program(json::parse("""{\
        "kind": "Or",
        "left": {
            "kind": "And",
            "left": { "kind": "Integer", "value": 0 },
            "right": { "kind": "Integer", "value": 2 }
        },
        "right": { "kind": "Integer", "value": 5 }
    }"""))
}

def #test test_comparison_operators {
    assert parse("a == 5 and b != 6 or c <= 10 and d >= 5") ==
        program(json::parse("""{\
            "kind": "Or",
            "left": {
                "kind": "And",
                "left": {
                    "kind": "Eq",
                    "left": {
                        "kind": "Identifier",
                        "path": ["a"],
                        "prefixed": false,
                        "args": null
                    },
                    "right": { "kind": "Integer", "value": 5 }
                },
                "right": {
                    "kind": "NEq",
                    "left": {
                        "kind": "Identifier",
                        "path": ["b"],
                        "prefixed": false,
                        "args": null
                    },
                    "right": { "kind": "Integer", "value": 6 }
                }
            },
            "right": {
                "kind": "And",
                "left": {
                    "kind": "LEq",
                    "left": {
                        "kind": "Identifier",
                        "path": ["c"],
                        "prefixed": false,
                        "args": null
                    },
                    "right": { "kind": "Integer", "value": 10 }
                },
                "right": {
                    "kind": "GEq",
                    "left": {
                        "kind": "Identifier",
                        "path": ["d"],
                        "prefixed": false,
                        "args": null
                    },
                    "right": { "kind": "Integer", "value": 5.00000 }
                    }
                }
            }
        
        }"""))


    assert parse("10 > a > 5") == program(json::parse("""{\
        "kind": "Gt",
        "left": {
            "kind": "Gt",
            "left": { "kind": "Integer", "value": 10 },
            "right": {
                "kind": "Identifier",
                "path": ["a"],
                "prefixed": false,
                "args": null
            }
        },
        "right": { "kind": "Integer", "value": 5 }
    }"""))
}

def #test test_not {
    assert parse("not true") == program(json::parse("""{\
        "kind": "Not",
        "expr": { "kind": "Boolean", "value": true }
    }"""))

    assert parse("not not true") == program(json::parse("""{\
        "kind": "Not",
        "expr": {
            "kind": "Not",
            "expr": { "kind": "Boolean", "value": true}
        }
    }"""))
}

def #test test_prefix_operators {
    assert parse("*foo and @bar and ~foo") == program(json::parse("""{\
        "kind": "And",
        "left": {
        "kind": "And",
            "left": {
                "kind": "Ptr",
                "expr": {
                "kind": "Identifier",
                "path": [
                    "foo"
                ],
                "prefixed": false,
                "args": null
                }
            },
            "right": {
                "kind": "Deref",
                "expr": {
                "kind": "Identifier",
                "path": [
                    "bar"
                ],
                "prefixed": false,
                "args": null
                }
            }
        },
        "right": {
            "kind": "BNot",
            "expr": {
                "kind": "Identifier",
                "path": [
                    "foo"
                ],
                "prefixed": false,
                "args": null
            }
        }
    }"""))

    assert parse("+foo and -foo") == program(json::parse("""{\
        "kind": "And",
        "left": {
            "kind": "UAdd",
            "expr": {
            "kind": "Identifier",
            "path": [
                "foo"
            ],
            "prefixed": false,
            "args": null
            }
        },
        "right": {
            "kind": "USub",
            "expr": {
            "kind": "Identifier",
            "path": [
                "foo"
            ],
            "prefixed": false,
            "args": null
            }
        }
    }"""))
}

def #test test_cast {
    assert parse("5 !int") == program(json::parse("""{\
        "kind": "Cast",
            "left": {
            "kind": "Integer",
            "value": 5
        },
        "right": {
            "kind": "Identifier",
            "path": [
                "int"
            ],
            "prefixed": false,
            "args": null
        }
    }"""))

    assert parse("5 * 5 !int") == program(json::parse("""{\
        "kind": "Mul",
        "left": {
            "kind": "Integer",
            "value": 5
        },
        "right": {
            "kind": "Cast",
            "left": {
                "kind": "Integer",
                "value": 5
            },
            "right": {
                "kind": "Identifier",
                "path": [
                    "int"
                ],
                "prefixed": false,
                "args": null
            }
        }
    }"""))
}

/*def #test test_array_subscript {
    assert parse("foo[1 + 5][1]") == program(json::parse("""{\
        "kind": "ArraySubscript",
        "left": {
            "kind": "ArraySubscript",
            "left": {
                "kind": "Identifier",
                "path": [
                    "foo"
                ],
                "prefixed": false,
                "args": null
            },
            "right": {
                "kind": "Add",
                "left": {
                    "kind": "Integer",
                    "value": 1
                },
                "right": {
                    "kind": "Integer",
                    "value": 5
                }
            }
        },
        "right": {
            "kind": "Integer",
            "value": 1
        }
    }"""))
}*/

def #test test_member_access {
    assert parse("foo.bar.baz") == program(json::parse("""{\
        "kind": "MemberAccess",
        "left": {
            "kind": "MemberAccess",
            "left": {
                "kind": "Identifier",
                "path": [
                    "foo"
                ],
                "prefixed": false,
                "args": null
            },
            "right": {
                "kind": "Identifier",
                "path": [
                    "bar"
                ],
                "prefixed": false,
                "args": null
            }
        },
        "right": {
            "kind": "Identifier",
            "path": [
                "baz"
            ],
            "prefixed": false,
            "args": null
        }
    }"""))
}

def #test test_range {
    assert parse("a..b") == program(json::parse("""{\
        "kind": "Range",
        "left": {
            "kind": "Identifier",
            "path": [
                "a"
            ],
            "prefixed": false,
            "args": null
        },
        "right": {
            "kind": "Identifier",
            "path": [
                "b"
            ],
            "prefixed": false,
        "args": null
        }
    }"""))

    assert parse("a..=b..c") == program(json::parse("""{\
        "kind": "Range",
        "left": {
            "kind": "RangeInc",
            "left": {
                "kind": "Identifier",
                "path": [
                    "a"
                ],
                "prefixed": false,
                "args": null
            },
            "right": {
                "kind": "Identifier",
                "path": [
                    "b"
                ],
                "prefixed": false,
                "args": null
            }
        },
        "right": {
            "kind": "Identifier",
            "path": [
                "c"
            ],
            "prefixed": false,
            "args": null
        }
    }"""))
}

def #test test_size_of {
    assert parse("size_of foo") == program(json::parse("""{\
        "kind": "SizeOf",
        "expr": {
            "kind": "Identifier",
            "path": [
                "foo"
            ],
            "prefixed": false,
            "args": null
        }
    }"""))

    assert parse("size_of type *Foo") == program(json::parse("""{\
        "kind": "SizeOf",
        "expr": {
            "kind": "PtrT",
            "kw": "VAR",
            "tpe": {
                "kind": "Identifier",
                "path": [
                    "Foo"
                ],
                "prefixed": false,
                "args": null
            }
        }
    }"""))
}

def #test test_align_of {
    assert parse("align_of foo") == program(json::parse("""{\
        "kind": "AlignOf",
        "expr": {
            "kind": "Identifier",
            "path": [
                "foo"
            ],
            "prefixed": false,
            "args": null
        }
    }"""))

    assert parse("align_of type *Foo") == program(json::parse("""{\
        "kind": "AlignOf",
        "expr": {
            "kind": "PtrT",
            "kw": "VAR",
            "tpe": {
                "kind": "Identifier",
                "path": [
                    "Foo"
                ],
                "prefixed": false,
                "args": null
            }
        }
    }"""))
}

def #test test_type_of {
    assert parse("type_of a") == program(json::parse("""{\
        "kind": "TypeOf",
        "expr": {
            "kind": "Identifier",
            "path": [
                "a"
            ],
            "prefixed": false,
            "args": null
        }
    }"""))

    assert parse("(type type_of a)") == program(json::parse("""{\
        "kind": "TypeOf",
        "expr": {
            "kind": "Identifier",
            "path": [
                "a"
            ],
            "prefixed": false,
            "args": null
        }
    }"""))
}

def #test test_vardecl {
    assert parse("var foo = 5") == program(json::parse("""{
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "VAR",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
        {
          "kind": "Integer",
          "value": 5.00000
        }
      ]
    }"""))

    assert parse("const foo = 5") == program(json::parse("""{
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "CONST",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
        {
          "kind": "Integer",
          "value": 5.00000
        }
      ]
    }"""))

    assert parse("var foo, bar = 1, 2") == program(json::parse("""{
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "VAR",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        },
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "bar"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
        {
          "kind": "Integer",
          "value": 1.00000
        },
        {
          "kind": "Integer",
          "value": 2.00000
        }
      ]
    }"""))

    assert parse("let foo, (bar) = 1, 2") == program(json::parse("""{
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "LET",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        },
        {
          "kind": "IdAssign",
          "value": {
            "kind": "Identifier",
            "path": [
              "bar"
            ],
            "prefixed": false,
            "args": null
          }
        }
      ],
      "right": [
        {
          "kind": "Integer",
          "value": 1.00000
        },
        {
          "kind": "Integer",
          "value": 2.00000
        }
      ]
    }"""))

    assert parse("export var foo") == program(json::parse("""{
      "kind": "VarDecl",
      "share": "EXPORT",
      "kw": "VAR",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
      ]
    }
    """))

    assert parse("export import var bar") == program(json::parse("""{
      "kind": "VarDecl",
      "share": "BOTH",
      "kw": "VAR",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "bar"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
      ]
    }"""))
    
    assert parse("var foo: int, bar: int") == program(json::parse("""{
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "VAR",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "Identifier",
            "path": [
              "int"
            ],
            "prefixed": false,
            "args": null
          }
        },
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "bar"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "Identifier",
            "path": [
              "int"
            ],
            "prefixed": false,
            "args": null
          }
        }
      ],
      "right": [
      ]
    }"""))

    assert parse("export let foo: int = 5") == program(json::parse("""{
      "kind": "VarDecl",
      "share": "EXPORT",
      "kw": "LET",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "Identifier",
            "path": [
              "int"
            ],
            "prefixed": false,
            "args": null
          }
        }
      ],
      "right": [
        {
          "kind": "Integer",
          "value": 5.00000
        }
      ]
    }"""))
}

def #test test_typedecl {
    assert parse("type A") == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
      ]
    }"""))

    assert parse("export type A, B") == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "EXPORT",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "B"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
      ]
    }"""))

    assert parse("type A = Foo") == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Identifier",
          "path": [
            "Foo"
          ],
          "prefixed": false,
          "args": null
        }
      ]
    }"""))

    assert parse("type A = unsigned word(16)") == program(json::parse(""" {
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Unsigned",
          "expr": {
            "kind": "Word",
            "size": 16.00000
          }
        }
      ]
    }"""))

    assert parse("type A, B = int, float") == program(json::parse(""" {
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "B"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Identifier",
          "path": [
            "int"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "float"
          ],
          "prefixed": false,
          "args": null
        }
      ]
    }"""))
}

def #test test_simple_types {
    assert parse("(type int)") == program(json::parse("""{
      "kind": "Identifier",
      "path": [
        "int"
      ],
      "prefixed": false,
      "args": null
    }"""))
    
    assert parse("(type word(16))") == program(json::parse("""{
      "kind": "Word",
      "size": 16.00000
    }"""))

    assert parse("(type unsigned word(32))") == program(json::parse("""{
      "kind": "Unsigned",
      "expr": {
        "kind": "Word",
        "size": 32.00000
      }
    }"""))
}

def #test test_variant_types {
    assert parse("(type A | B | C)") == program(json::parse("""{
      "kind": "VariantT",
      "body": [
        {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "B"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "C"
          ],
          "prefixed": false,
          "args": null
        }
      ]
    }"""))
    assert parse("(type A | B -> C | D)") == program(json::parse("""{
      "kind": "FunctionT",
      "args": [
        {
          "kind": "VariantT",
          "body": [
            {
              "kind": "Identifier",
              "path": [
                "A"
              ],
              "prefixed": false,
              "args": null
            },
            {
              "kind": "Identifier",
              "path": [
                "B"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        }
      ],
      "ret": [
        {
          "kind": "VariantT",
          "body": [
            {
              "kind": "Identifier",
              "path": [
                "C"
              ],
              "prefixed": false,
              "args": null
            },
            {
              "kind": "Identifier",
              "path": [
                "D"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        }
      ]
    }"""))
}

def #test test_function_types {
    assert parse("(type T -> F)") == program(json::parse("""{
      "kind": "FunctionT",
      "args": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "ret": [
        {
          "kind": "Identifier",
          "path": [
            "F"
          ],
          "prefixed": false,
          "args": null
        }
      ]
    }"""))

    let empty_1 = parse("(type ->)")
    let empty_2 = parse("(type (->))")
    let empty_3 = parse("(type [] -> [])")
    let empty_ref = program(json::parse("""{
        "kind": "FunctionT",
        "args": [
        ],
        "ret": [
        ]
    }"""))
    assert empty_1 == empty_2 and empty_2 == empty_3 and
        empty_3 == empty_ref
        

    assert parse("(type A -> B -> C)") == program(json::parse("""{
      "kind": "FunctionT",
      "args": [
        {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "ret": [
        {
          "kind": "FunctionT",
          "args": [
            {
              "kind": "Identifier",
              "path": [
                "B"
              ],
              "prefixed": false,
              "args": null
            }
          ],
          "ret": [
            {
              "kind": "Identifier",
              "path": [
                "C"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        }
      ]
    }"""))

    assert parse("(type [A, B] -> [C, D])") == program(json::parse("""{
      "kind": "FunctionT",
      "args": [
        {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "B"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "ret": [
        {
          "kind": "Identifier",
          "path": [
            "C"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "D"
          ],
          "prefixed": false,
          "args": null
        }
      ]
    }"""))
}

def #test test_pointer_types {
    assert parse("(type *A)") == program(json::parse("""{
      "kind": "PtrT",
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "A"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type **A)") == program(json::parse("""{
      "kind": "PtrT",
      "kw": "VAR",
      "tpe": {
        "kind": "PtrT",
        "kw": "VAR",
        "tpe": {
          "kind": "Identifier",
          "path": [
            "A"
          ],
          "prefixed": false,
          "args": null
        }
      }
    }"""))

    assert parse("(type &A)") == program(json::parse("""{
      "kind": "RefT",
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "A"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type &&**A)") == program(json::parse("""{
      "kind": "RefT",
      "kw": "VAR",
      "tpe": {
        "kind": "RefT",
        "kw": "VAR",
        "tpe": {
          "kind": "PtrT",
          "kw": "VAR",
          "tpe": {
            "kind": "PtrT",
            "kw": "VAR",
            "tpe": {
              "kind": "Identifier",
              "path": [
                "A"
              ],
              "prefixed": false,
              "args": null
            }
          }
        }
      }
    }"""))

    assert parse("(type *)") == program(json::parse("""{
      "kind": "PtrT",
      "kw": "VAR",
      "tpe": null
    }"""))

    assert parse("(type &*)") == program(json::parse("""{
      "kind": "RefT",
      "kw": "VAR",
      "tpe": {
        "kind": "PtrT",
        "kw": "VAR",
        "tpe": null
      }
    }"""))

    assert parse("(type *let A)") == program(json::parse("""{
      "kind": "PtrT",
      "kw": "LET",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "A"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type *var A)") == program(json::parse("""{
      "kind": "PtrT",
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "A"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))
    
    assert parse("(type &let A)") == program(json::parse("""{
      "kind": "RefT",
      "kw": "LET",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "A"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))
    
    assert parse("(type &var A)") == program(json::parse("""{
      "kind": "RefT",
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "A"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type weak_ref)") == program(json::parse(""" {
      "kind": "WeakRefT",
      "kw": "VAR",
      "tpe": null
    }"""))

    assert parse("(type weak_ref(T))") == program(json::parse("""{
      "kind": "WeakRefT",
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "T"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type weak_ref(var T))") == program(json::parse("""{
      "kind": "WeakRefT",
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "T"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type weak_ref(let *T))") == program(json::parse("""{
      "kind": "WeakRefT",
      "kw": "LET",
      "tpe": {
        "kind": "PtrT",
        "kw": "VAR",
        "tpe": {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      }
    }"""))

    assert parse("(type weak_ref())") == program(json::parse(""" {
      "kind": "WeakRefT",
      "kw": "VAR",
      "tpe": null
    }"""))

    assert parse("(type weak_ref(let))") == program(json::parse("""{
      "kind": "WeakRefT",
      "kw": "LET",
      "tpe": null
    }"""))

    assert parse("(type weak_ref(var))") == program(json::parse(""" {
      "kind": "WeakRefT",
      "kw": "VAR",
      "tpe": null
    }"""))
}

def #test test_array_types {
    assert parse("(type [T])") == program(json::parse("""{
      "kind": "ArrayT",
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "T"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type [5; T])") == program(json::parse(""" {
      "kind": "ArrayStaticT",
      "n": {
        "kind": "Integer",
        "value": 5.00000
      },
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "T"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type [?; T])") == program(json::parse("""{
      "kind": "ArrayStaticT",
      "n": null,
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "T"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type [let T])") == program(json::parse(""" {
      "kind": "ArrayT",
      "kw": "LET",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "T"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type [5; var T])") == program(json::parse("""{
      "kind": "ArrayStaticT",
      "n": {
        "kind": "Integer",
        "value": 5.00000
      },
      "kw": "VAR",
      "tpe": {
        "kind": "Identifier",
        "path": [
          "T"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert parse("(type [5; [T]])") == program(json::parse("""{
      "kind": "ArrayStaticT",
      "n": {
        "kind": "Integer",
        "value": 5.00000
      },
      "kw": "VAR",
      "tpe": {
        "kind": "ArrayT",
        "kw": "VAR",
        "tpe": {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      }
    }"""))

    assert parse("(type [5; var [let T]])") == program(json::parse("""{
      "kind": "ArrayStaticT",
      "n": {
        "kind": "Integer",
        "value": 5.00000
      },
      "kw": "VAR",
      "tpe": {
        "kind": "ArrayT",
        "kw": "LET",
        "tpe": {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      }
    }"""))   
}

def #test test_generic_type {
    assert parse("(type Poly(int))") == program(json::parse("""{
      "kind": "TypeConstructor",
      "name": {
        "kind": "Identifier",
        "path": [
          "Poly"
        ],
        "prefixed": false,
        "args": null
      },
      "args": [
        {
          "kind": "Identifier",
          "path": [
            "int"
          ],
          "prefixed": false,
          "args": null
        }
      ]
    }"""))
}

def #test test_func_call {
    assert parse("really::long::path::foo()") == program(json::parse("""{
      "kind": "FuncCall",
      "left": {
        "kind": "Identifier",
        "path": [
          "really",
          "long",
          "path",
          "foo"
        ],
        "prefixed": false,
        "args": null
      },
      "args": [
      ],
      "kwargs": [
      ]
    }"""))

    assert parse("foo(bar, baz)") == program(json::parse("""{
      "kind": "FuncCall",
      "left": {
        "kind": "Identifier",
        "path": [
          "foo"
        ],
        "prefixed": false,
        "args": null
      },
      "args": [
        {
          "kind": "Identifier",
          "path": [
            "bar"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "baz"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "kwargs": [
      ]
    }"""))

    assert parse("foo(bar, baz = 20)") == program(json::parse("""{
      "kind": "FuncCall",
      "left": {
        "kind": "Identifier",
        "path": [
          "foo"
        ],
        "prefixed": false,
        "args": null
      },
      "args": [
        {
          "kind": "Identifier",
          "path": [
            "bar"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "kwargs": [
        {
          "kind": "NamedArg",
          "name": {
            "kind": "Identifier",
            "path": [
              "baz"
            ],
            "prefixed": false,
            "args": null
          },
          "value": {
            "kind": "Integer",
            "value": 20.00000
          }
        }
      ]
    }"""))

    assert parse("foo(0)(1)") == program(json::parse("""{
      "kind": "FuncCall",
      "left": {
        "kind": "FuncCall",
        "left": {
          "kind": "Identifier",
          "path": [
            "foo"
          ],
          "prefixed": false,
          "args": null
        },
        "args": [
          {
            "kind": "Integer",
            "value": 0.00000
          }
        ],
        "kwargs": [
        ]
      },
      "args": [
        {
          "kind": "Integer",
          "value": 1.00000
        }
      ],
      "kwargs": [
      ]
    }"""))

    assert parse("#inline foo()") == program(json::parse("""{
      "kind": "FuncCall",
      "left": {
        "kind": "Identifier",
        "path": [
          "foo"
        ],
        "prefixed": false,
        "args": null
      },
      "args": [
      ],
      "kwargs": [
      ],
      "inline": 1
    }"""))

    assert parse("#no_inline foo") == program(json::parse("""{
      "kind": "FuncCall",
      "left": {
        "kind": "Identifier",
        "path": [
          "foo"
        ],
        "prefixed": false,
        "args": null
      },
      "args": [
      ],
      "kwargs": [
      ],
      "inline": 2
    }"""))
}

def #test test_assign {
    assert parse("a = b") == program(json::parse("""{
      "kind": "Assign",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "a"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Identifier",
          "path": [
            "b"
          ],
          "prefixed": false,
          "args": null
        }
      ]
    }"""))

    assert parse("a, b = c, d") == program(json::parse("""{
      "kind": "Assign",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "a"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "b"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Identifier",
          "path": [
            "c"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "d"
          ],
          "prefixed": false,
          "args": null
        }
      ]
    }"""))

    assert parse("a, b = c, d = e, f") == program(json::parse("""{
      "kind": "Assign",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "a"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "b"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Assign",
          "left": [
            {
              "kind": "Identifier",
              "path": [
                "c"
              ],
              "prefixed": false,
              "args": null
            },
            {
              "kind": "Identifier",
              "path": [
                "d"
              ],
              "prefixed": false,
              "args": null
            }
          ],
          "right": [
            {
              "kind": "Identifier",
              "path": [
                "e"
              ],
              "prefixed": false,
              "args": null
            },
            {
              "kind": "Identifier",
              "path": [
                "f"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        }
      ]
    }"""))
}

def #test test_assign_op {
    assert parse("a += 2") == program(json::parse("""{
      "kind": "AddEq",
      "left": {
        "kind": "Identifier",
        "path": [
          "a"
        ],
        "prefixed": false,
        "args": null
      },
      "right": {
        "kind": "Integer",
        "value": 2.00000
      }
    }"""))

    assert parse("a *= 2 %= 3") == program(json::parse("""{
      "kind": "MulEq",
      "left": {
        "kind": "Identifier",
        "path": [
          "a"
        ],
        "prefixed": false,
        "args": null
      },
      "right": {
        "kind": "ModEq",
        "left": {
          "kind": "Integer",
          "value": 2.00000
        },
        "right": {
          "kind": "Integer",
          "value": 3.00000
        }
      }
    }"""))

    assert parse("a ++= 2 = b += 2") == program(json::parse("""{
      "kind": "Assign",
      "left": [
        {
          "kind": "PAddEq",
          "left": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "right": {
            "kind": "Integer",
            "value": 2.00000
          }
        }
      ],
      "right": [
        {
          "kind": "AddEq",
          "left": {
            "kind": "Identifier",
            "path": [
              "b"
            ],
            "prefixed": false,
            "args": null
          },
          "right": {
            "kind": "Integer",
            "value": 2.00000
          }
        }
      ]
    }"""))
}

def #test test_statements {
    assert parse("""
    var foo = 20
    foo += 10
    print(foo)""") == json::parse("""{
        "kind": "Program",
        "body": [
            {
            "kind": "VarDecl",
            "share": "NONE",
            "kw": "VAR",
            "left": [
                {
                "kind": "IdDecl",
                "value": {
                    "kind": "Identifier",
                    "path": [
                    "foo"
                    ],
                    "prefixed": false,
                    "args": null
                },
                "tpe": null
                }
            ],
            "right": [
                {
                "kind": "Integer",
                "value": 20.00000
                }
            ]
            },
            {
            "kind": "AddEq",
            "left": {
                "kind": "Identifier",
                "path": [
                "foo"
                ],
                "prefixed": false,
                "args": null
            },
            "right": {
                "kind": "Integer",
                "value": 10.00000
            }
            },
            {
            "kind": "FuncCall",
            "left": {
                "kind": "Identifier",
                "path": [
                "print"
                ],
                "prefixed": false,
                "args": null
            },
            "args": [
                {
                "kind": "Identifier",
                "path": [
                    "foo"
                ],
                "prefixed": false,
                "args": null
                }
            ],
            "kwargs": [
            ]
            }
        ]
        }""")
}

def #test test_if_statement {
    assert parse(""" 
        #if foo {
            // Do something
        } else if bar {
            // Do something else
        } else {
            // Do more
        }
    """) == program(json::parse("""{
      "kind": "StaticIf",
      "cond": {
        "kind": "Identifier",
        "path": [
          "foo"
        ],
        "prefixed": false,
        "args": null
      },
      "body": [
      ],
      "else_if": [
        {
          "kind": "ElseIf",
          "cond": {
            "kind": "Identifier",
            "path": [
              "bar"
            ],
            "prefixed": false,
            "args": null
          },
          "body": [
          ]
        }
      ],
      "else_": {
        "kind": "Else",
        "body": [
        ]
      }
    }
    """))

    assert parse("""
        if foo == null {
            print("Hello World")
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "If",
      "cond": {
        "kind": "Eq",
        "left": {
          "kind": "Identifier",
          "path": [
            "foo"
          ],
          "prefixed": false,
          "args": null
        },
        "right": {
          "kind": "Null"
        }
      },
      "body": [
        {
          "kind": "FuncCall",
          "left": {
            "kind": "Identifier",
            "path": [
              "print"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
            {
              "kind": "String",
              "value": "Hello World"
            }
          ],
          "kwargs": [
          ]
        }
      ],
      "else_if": [
      ],
      "else_": null
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}
    """)

    assert parse("""
        if true {
            // Do something
        } else {
            // Do something else
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "If",
      "cond": {
        "kind": "Boolean",
        "value": true
      },
      "body": [
      ],
      "else_if": [
      ],
      "else_": {
        "kind": "Else",
        "body": [
        ]
      }
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")

    assert parse("""
        if true {
            print(0)
        } else if false {
            print(0)
            print(1)
        } else if true {
            // Do more
        } else {
            // Or else...!
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "If",
      "cond": {
        "kind": "Boolean",
        "value": true
      },
      "body": [
        {
          "kind": "FuncCall",
          "left": {
            "kind": "Identifier",
            "path": [
              "print"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
            {
              "kind": "Integer",
              "value": 0.00000
            }
          ],
          "kwargs": [
          ]
        }
      ],
      "else_if": [
        {
          "kind": "ElseIf",
          "cond": {
            "kind": "Boolean",
            "value": false
          },
          "body": [
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Integer",
                  "value": 0.00000
                }
              ],
              "kwargs": [
              ]
            },
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Integer",
                  "value": 1.00000
                }
              ],
              "kwargs": [
              ]
            }
          ]
        },
        {
          "kind": "ElseIf",
          "cond": {
            "kind": "Boolean",
            "value": true
          },
          "body": [
          ]
        }
      ],
      "else_": {
        "kind": "Else",
        "body": [
        ]
      }
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")

    assert parse("""
        if true {
            print(0)
        } else if false {
            print(1)
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "If",
      "cond": {
        "kind": "Boolean",
        "value": true
      },
      "body": [
        {
          "kind": "FuncCall",
          "left": {
            "kind": "Identifier",
            "path": [
              "print"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
            {
              "kind": "Integer",
              "value": 0.00000
            }
          ],
          "kwargs": [
          ]
        }
      ],
      "else_if": [
        {
          "kind": "ElseIf",
          "cond": {
            "kind": "Boolean",
            "value": false
          },
          "body": [
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Integer",
                  "value": 1.00000
                }
              ],
              "kwargs": [
              ]
            }
          ]
        }
      ],
      "else_": null
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")

    assert parse("""
        if must {
            if go {
                if deeper {

                }
            }
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "If",
      "cond": {
        "kind": "Identifier",
        "path": [
          "must"
        ],
        "prefixed": false,
        "args": null
      },
      "body": [
        {
          "kind": "If",
          "cond": {
            "kind": "Identifier",
            "path": [
              "go"
            ],
            "prefixed": false,
            "args": null
          },
          "body": [
            {
              "kind": "If",
              "cond": {
                "kind": "Identifier",
                "path": [
                  "deeper"
                ],
                "prefixed": false,
                "args": null
              },
              "body": [
              ],
              "else_if": [
              ],
              "else_": null
            }
          ],
          "else_if": [
          ],
          "else_": null
        }
      ],
      "else_if": [
      ],
      "else_": null
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")

    assert parse("""
        if false
        {
            // on new line
        }
        else
        {
            // Very ugly
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "If",
      "cond": {
        "kind": "Boolean",
        "value": false
      },
      "body": [
      ],
      "else_if": [
      ],
      "else_": {
        "kind": "Else",
        "body": [
        ]
      }
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")
}

def #test test_loop {
    assert parse("""
        loop {
            nop()
            break
            continue
        }
        end
        """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "Loop",
      "body": [
        {
          "kind": "FuncCall",
          "left": {
            "kind": "Identifier",
            "path": [
              "nop"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
          ],
          "kwargs": [
          ]
        },
        {
          "kind": "Break"
        },
        {
          "kind": "Continue"
        }
      ]
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")
}

def #test test_for_loop {
    assert parse("""
        for var i in 0..10 {
            nop()
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "For",
      "iddecl": {
        "kind": "ForIdDecl",
        "kw": "VAR",
        "ident": {
          "kind": "Identifier",
          "path": [
            "i"
          ],
          "prefixed": false,
          "args": null
        }
      },
      "expr": {
        "kind": "Range",
        "left": {
          "kind": "Integer",
          "value": 0.00000
        },
        "right": {
          "kind": "Integer",
          "value": 10.00000
        }
      },
      "body": [
        {
          "kind": "FuncCall",
          "left": {
            "kind": "Identifier",
            "path": [
              "nop"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
          ],
          "kwargs": [
          ]
        }
      ]
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")

    assert parse("""
        var i = 0
        for i in 0..10 {
            nop()
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "VAR",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "i"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
        {
          "kind": "Integer",
          "value": 0.00000
        }
      ]
    },
    {
      "kind": "For",
      "iddecl": {
        "kind": "Identifier",
        "path": [
          "i"
        ],
        "prefixed": false,
        "args": null
      },
      "expr": {
        "kind": "Range",
        "left": {
          "kind": "Integer",
          "value": 0.00000
        },
        "right": {
          "kind": "Integer",
          "value": 10.00000
        }
      },
      "body": [
        {
          "kind": "FuncCall",
          "left": {
            "kind": "Identifier",
            "path": [
              "nop"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
          ],
          "kwargs": [
          ]
        }
      ]
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")
}

def #test test_while_loop {
    assert parse("""
        while true {
            nop()
        }
        end
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "While",
      "expr": {
        "kind": "Boolean",
        "value": true
      },
      "body": [
        {
          "kind": "FuncCall",
          "left": {
            "kind": "Identifier",
            "path": [
              "nop"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
          ],
          "kwargs": [
          ]
        }
      ]
    },
    {
      "kind": "Identifier",
      "path": [
        "end"
      ],
      "prefixed": false,
      "args": null
    }
  ]
}""")
}

def #test test_return {
    assert parse("return") == program(json::parse("""{
        "kind": "Return",
        "body": []
    }"""))

    assert parse("return 1, 2, 3") == program(json::parse("""{
        "kind": "Return",
        "body": [
            { "kind": "Integer", "value": 1 },
            { "kind": "Integer", "value": 2 },
            { "kind": "Integer", "value": 3 }
        ]
    }
    """))

    assert parse("""
        return 1,
            2
    """) == program(json::parse("""{
        "kind": "Return",
        "body": [
            { "kind": "Integer", "value": 1 },
            { "kind": "Integer", "value": 2 }
        ]
    }"""))
}

def #test test_yield {
    assert parse("yield") == program(json::parse("""{
        "kind": "Yield",
        "body": []
    }"""))

    assert parse("yield 1, 2, 3") == program(json::parse("""{
        "kind": "Yield",
        "body": [
            { "kind": "Integer", "value": 1 },
            { "kind": "Integer", "value": 2 },
            { "kind": "Integer", "value": 3 }
        ]
    }
    """))

    assert parse("""
        yield 1,
            2
    """) == program(json::parse("""{
        "kind": "Yield",
        "body": [
            { "kind": "Integer", "value": 1 },
            { "kind": "Integer", "value": 2 }
        ]
    }"""))
}

def #test test_yield_from {
    assert parse("""
        yield from iterator()
    """) == program(json::parse("""{
      "kind": "YieldFrom",
      "expr": {
        "kind": "FuncCall",
        "left": {
          "kind": "Identifier",
          "path": [
            "iterator"
          ],
          "prefixed": false,
          "args": null
        },
        "args": [
        ],
        "kwargs": [
        ]
      }
    }"""))

    assert parse("""
        yield from 10 + 10
    """) == program(json::parse("""{
      "kind": "YieldFrom",
      "expr": {
        "kind": "Add",
        "left": {
          "kind": "Integer",
          "value": 10.000000
        },
        "right": {
          "kind": "Integer",
          "value": 10.000000
        }
      }
    }"""))
}

def #test test_struct {
    assert parse("""
        type T = struct {
            a: int
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "a"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "int"
                ],
                "prefixed": false,
                "args": null
              }
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        type T = struct {
            a: int
            b: struct {
                a: int
            }
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "a"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "int"
                ],
                "prefixed": false,
                "args": null
              }
            },
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "b"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Struct",
                "body": [
                  {
                    "kind": "IdDeclStruct",
                    "ident": {
                      "kind": "Identifier",
                      "path": [
                        "a"
                      ],
                      "prefixed": false,
                      "args": null
                    },
                    "tpe": {
                      "kind": "Identifier",
                      "path": [
                        "int"
                      ],
                      "prefixed": false,
                      "args": null
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
    }"""))

    assert parse("""
    type T = struct #union {
        a: int
        b: long
    }""") == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Union",
          "body": [
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "a"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "int"
                ],
                "prefixed": false,
                "args": null
              }
            },
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "b"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "long"
                ],
                "prefixed": false,
                "args": null
              }
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        type T = struct {
            a: int
            struct #union {
                a: int
                b: long
            }
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "a"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "int"
                ],
                "prefixed": false,
                "args": null
              }
            },
            {
              "kind": "Union",
              "body": [
                {
                  "kind": "IdDeclStruct",
                  "ident": {
                    "kind": "Identifier",
                    "path": [
                      "a"
                    ],
                    "prefixed": false,
                    "args": null
                  },
                  "tpe": {
                    "kind": "Identifier",
                    "path": [
                      "int"
                    ],
                    "prefixed": false,
                    "args": null
                  }
                },
                {
                  "kind": "IdDeclStruct",
                  "ident": {
                    "kind": "Identifier",
                    "path": [
                      "b"
                    ],
                    "prefixed": false,
                    "args": null
                  },
                  "tpe": {
                    "kind": "Identifier",
                    "path": [
                      "long"
                    ],
                    "prefixed": false,
                    "args": null
                  }
                }
              ]
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        type T = struct {
            const i: int = 20
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
            {
              "kind": "IdDeclStruct",
              "value": {
                "kind": "Integer",
                "value": 20.000000
              },
              "ident": {
                "kind": "Identifier",
                "path": [
                  "i"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "int"
                ],
                "prefixed": false,
                "args": null
              }
            }
          ]
        }
      ]
    }"""))
}

def #test test_embed {
    assert parse("""
        type T = struct {
            X
            a: int 
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
            {
              "kind": "IdDeclStruct",
              "is_embed": true,
              "ident": null,
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "X"
                ],
                "prefixed": false,
                "args": null
              }
            },
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "a"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "int"
                ],
                "prefixed": false,
                "args": null
              }
            }
          ]
        }
      ]
    }
    """))

    assert parse("""
        type T = struct {
            &X
            a: int
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
            {
              "kind": "IdDeclStruct",
              "is_embed": true,
              "ident": null,
              "tpe": {
                "kind": "RefT",
                "kw": "VAR",
                "tpe": {
                  "kind": "Identifier",
                  "path": [
                    "X"
                  ],
                  "prefixed": false,
                  "args": null
                }
              }
            },
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "a"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "int"
                ],
                "prefixed": false,
                "args": null
              }
            }
          ]
        }
      ]
    }
    """))
}

def #test test_interface {
    assert parse("""
        type I = interface {
            def foo -> int
            def + (o: &I)
            var bar: int
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "I"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "StructuralT",
          "body": [
            {
              "kind": "StructuralMember",
              "kw": "DEF",
              "name": {
                "kind": "Identifier",
                "path": [
                  "foo"
                ],
                "prefixed": false,
                "args": null
              },
              "params": [
              ],
              "returns": [
                {
                  "kind": "Identifier",
                  "path": [
                    "int"
                  ],
                  "prefixed": false,
                  "args": null
                }
              ]
            },
            {
              "kind": "StructuralMember",
              "kw": "DEF",
              "name": {
                "kind": "Identifier",
                "path": [
                  "__add__"
                ],
                "prefixed": false,
                "args": null
              },
              "params": [
                {
                  "kind": "Parameter",
                  "kw": "VAR",
                  "name": {
                    "kind": "Identifier",
                    "path": [
                      "o"
                    ],
                    "prefixed": false,
                    "args": null
                  },
                  "tpe": {
                    "kind": "RefT",
                    "kw": "VAR",
                    "tpe": {
                      "kind": "Identifier",
                      "path": [
                        "I"
                      ],
                      "prefixed": false,
                      "args": null
                    }
                  },
                  "value": null
                }
              ],
              "returns": [
              ]
            },
            {
              "kind": "StructuralMember",
              "kw": "VAR",
              "name": {
                "kind": "Identifier",
                "path": [
                  "bar"
                ],
                "prefixed": false,
                "args": null
              },
              "params": null,
              "returns": [
                {
                  "kind": "Identifier",
                  "path": [
                    "int"
                  ],
                  "prefixed": false,
                  "args": null
                }
              ]
            }
          ]
        }
      ]
    }"""))
}

def #test test_type_constructor {
    assert parse("""
        type S(type T) = struct {}
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "TypeConstructor",
          "name": {
            "kind": "Identifier",
            "path": [
              "S"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
            {
              "kind": "Parameter",
              "kw": "VAR",
              "name": {
                "kind": "Identifier",
                "path": [
                  "T"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": null,
              "value": null
            }
          ]
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
          ]
        }
      ]
    }"""))
}

def #test test_import {

    assert parse("import module") == program(json::parse("""{
      "kind": "Import",
      "body": [
        {
          "kind": "ImportModule",
          "name": {
            "kind": "Identifier",
            "path": [
              "module"
            ],
            "prefixed": false,
            "args": null
          },
          "alias": null
        }
      ]
    }"""))

    assert parse("import module as mod") == program(json::parse("""{
      "kind": "Import",
      "body": [
        {
          "kind": "ImportModule",
          "name": {
            "kind": "Identifier",
            "path": [
              "module"
            ],
            "prefixed": false,
            "args": null
          },
          "alias": {
            "kind": "Identifier",
            "path": [
              "mod"
            ],
            "prefixed": false,
            "args": null
          }
        }
      ]
    }"""))

    assert parse("import a as foo, bar") == program(json::parse("""{
      "kind": "Import",
      "body": [
        {
          "kind": "ImportModule",
          "name": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "alias": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          }
        },
        {
          "kind": "ImportModule",
          "name": {
            "kind": "Identifier",
            "path": [
              "bar"
            ],
            "prefixed": false,
            "args": null
          },
          "alias": null
        }
      ]
    }"""))

    assert parse("
        import 
            Module as mod,
            foo,
            bar as baz") == program(json::parse("""{
      "kind": "Import",
      "body": [
        {
          "kind": "ImportModule",
          "name": {
            "kind": "Identifier",
            "path": [
              "Module"
            ],
            "prefixed": false,
            "args": null
          },
          "alias": {
            "kind": "Identifier",
            "path": [
              "mod"
            ],
            "prefixed": false,
            "args": null
          }
        },
        {
          "kind": "ImportModule",
          "name": {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          "alias": null
        },
        {
          "kind": "ImportModule",
          "name": {
            "kind": "Identifier",
            "path": [
              "bar"
            ],
            "prefixed": false,
            "args": null
          },
          "alias": {
            "kind": "Identifier",
            "path": [
              "baz"
            ],
            "prefixed": false,
            "args": null
          }
        }
      ]
    }"""))
}

def #test test_enum {
    assert parse("""
        type T = enum {
            FOO
            BAR
            BAZ
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Enum",
          "tpe": null,
          "body": [
            {
              "kind": "IdDeclEnum",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "FOO"
                ],
                "prefixed": false,
                "args": null
              },
              "value": null
            },
            {
              "kind": "IdDeclEnum",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "BAR"
                ],
                "prefixed": false,
                "args": null
              },
              "value": null
            },
            {
              "kind": "IdDeclEnum",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "BAZ"
                ],
                "prefixed": false,
                "args": null
              },
              "value": null
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        type T = enum {
            FOO = 10
            BAR
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Enum",
          "tpe": null,
          "body": [
            {
              "kind": "IdDeclEnum",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "FOO"
                ],
                "prefixed": false,
                "args": null
              },
              "value": {
                "kind": "Integer",
                "value": 10.00000
              }
            },
            {
              "kind": "IdDeclEnum",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "BAR"
                ],
                "prefixed": false,
                "args": null
              },
              "value": null
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        type T = enum: long {
            FOO; BAR
        }
    """) == program(json::parse("""{
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Enum",
          "tpe": {
            "kind": "Identifier",
            "path": [
              "long"
            ],
            "prefixed": false,
            "args": null
          },
          "body": [
            {
              "kind": "IdDeclEnum",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "FOO"
                ],
                "prefixed": false,
                "args": null
              },
              "value": null
            },
            {
              "kind": "IdDeclEnum",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "BAR"
                ],
                "prefixed": false,
                "args": null
              },
              "value": null
            }
          ]
        }
      ]
    }"""))
}

def #test test_switch_stmt {
    assert parse("""
        switch value {}
    """) == program(json::parse("""{
      "kind": "Switch",
      "expr": {
        "kind": "Identifier",
        "path": [
          "value"
        ],
        "prefixed": false,
        "args": null
      },
      "body": [
      ]
    }"""))
    
    assert parse("""
    switch value {
        case 1; one
        case 2; two
        case; default
    }
    """) == program(json::parse("""{
      "kind": "Switch",
      "expr": {
        "kind": "Identifier",
        "path": [
          "value"
        ],
        "prefixed": false,
        "args": null
      },
      "body": [
        {
          "kind": "Case",
          "expr": [
            {
              "kind": "Integer",
              "value": 1.00000
            }
          ],
          "body": [
            {
              "kind": "Identifier",
              "path": [
                "one"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        },
        {
          "kind": "Case",
          "expr": [
            {
              "kind": "Integer",
              "value": 2.00000
            }
          ],
          "body": [
            {
              "kind": "Identifier",
              "path": [
                "two"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        },
        {
          "kind": "Case",
          "expr": [
          ],
          "body": [
            {
              "kind": "Identifier",
              "path": [
                "default"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        switch value {
            case 1
                print(foo)
                print(bar)
            case 2
                print(bar)
                print(foo)
        }
    """) == program(json::parse("""{
      "kind": "Switch",
      "expr": {
        "kind": "Identifier",
        "path": [
          "value"
        ],
        "prefixed": false,
        "args": null
      },
      "body": [
        {
          "kind": "Case",
          "expr": [
            {
              "kind": "Integer",
              "value": 1.00000
            }
          ],
          "body": [
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Identifier",
                  "path": [
                    "foo"
                  ],
                  "prefixed": false,
                  "args": null
                }
              ],
              "kwargs": [
              ]
            },
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Identifier",
                  "path": [
                    "bar"
                  ],
                  "prefixed": false,
                  "args": null
                }
              ],
              "kwargs": [
              ]
            }
          ]
        },
        {
          "kind": "Case",
          "expr": [
            {
              "kind": "Integer",
              "value": 2.00000
            }
          ],
          "body": [
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Identifier",
                  "path": [
                    "bar"
                  ],
                  "prefixed": false,
                  "args": null
                }
              ],
              "kwargs": [
              ]
            },
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Identifier",
                  "path": [
                    "foo"
                  ],
                  "prefixed": false,
                  "args": null
                }
              ],
              "kwargs": [
              ]
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        switch value {
            case 1..10
                print(foo)
            case 11..20
                print(bar)
        }
    """) == program(json::parse("""{
      "kind": "Switch",
      "expr": {
        "kind": "Identifier",
        "path": [
          "value"
        ],
        "prefixed": false,
        "args": null
      },
      "body": [
        {
          "kind": "Case",
          "expr": [
            {
              "kind": "Range",
              "left": {
                "kind": "Integer",
                "value": 1.00000
              },
              "right": {
                "kind": "Integer",
                "value": 10.00000
              }
            }
          ],
          "body": [
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Identifier",
                  "path": [
                    "foo"
                  ],
                  "prefixed": false,
                  "args": null
                }
              ],
              "kwargs": [
              ]
            }
          ]
        },
        {
          "kind": "Case",
          "expr": [
            {
              "kind": "Range",
              "left": {
                "kind": "Integer",
                "value": 11.00000
              },
              "right": {
                "kind": "Integer",
                "value": 20.00000
              }
            }
          ],
          "body": [
            {
              "kind": "FuncCall",
              "left": {
                "kind": "Identifier",
                "path": [
                  "print"
                ],
                "prefixed": false,
                "args": null
              },
              "args": [
                {
                  "kind": "Identifier",
                  "path": [
                    "bar"
                  ],
                  "prefixed": false,
                  "args": null
                }
              ],
              "kwargs": [
              ]
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        switch value {
            case 10, 20
                one
            case 20..30, 30..40
                two
        }
    """) == program(json::parse("""{
      "kind": "Switch",
      "expr": {
        "kind": "Identifier",
        "path": [
          "value"
        ],
        "prefixed": false,
        "args": null
      },
      "body": [
        {
          "kind": "Case",
          "expr": [
            {
              "kind": "Integer",
              "value": 10.00000
            },
            {
              "kind": "Integer",
              "value": 20.00000
            }
          ],
          "body": [
            {
              "kind": "Identifier",
              "path": [
                "one"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        },
        {
          "kind": "Case",
          "expr": [
            {
              "kind": "Range",
              "left": {
                "kind": "Integer",
                "value": 20.00000
              },
              "right": {
                "kind": "Integer",
                "value": 30.00000
              }
            },
            {
              "kind": "Range",
              "left": {
                "kind": "Integer",
                "value": 30.00000
              },
              "right": {
                "kind": "Integer",
                "value": 40.00000
              }
            }
          ],
          "body": [
            {
              "kind": "Identifier",
              "path": [
                "two"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        }
      ]
    }"""))
}

def #test test_function {
    assert parse("""
        def test
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
      ],
      "returns": [
      ],
      "body": null
    }"""))

    assert parse("""
        implicit def test
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
      ],
      "returns": [
      ],
      "body": null,
      "implicit": true
    }"""))

    assert parse("""
        def test(a: int)
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
        {
          "kind": "Parameter",
          "kw": "VAR",
          "name": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "Identifier",
            "path": [
              "int"
            ],
            "prefixed": false,
            "args": null
          },
          "value": null
        }
      ],
      "returns": [
      ],
      "body": null
    }"""))

    assert parse("""
        def test(type T, var a: int, let b: int)
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
        {
          "kind": "Parameter",
          "kw": "TYPE",
          "name": {
            "kind": "Identifier",
            "path": [
              "T"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null,
          "value": null
        },
        {
          "kind": "Parameter",
          "kw": "VAR",
          "name": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "Identifier",
            "path": [
              "int"
            ],
            "prefixed": false,
            "args": null
          },
          "value": null
        },
        {
          "kind": "Parameter",
          "kw": "LET",
          "name": {
            "kind": "Identifier",
            "path": [
              "b"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "Identifier",
            "path": [
              "int"
            ],
            "prefixed": false,
            "args": null
          },
          "value": null
        }
      ],
      "returns": [
      ],
      "body": null
    }"""))
    
    assert parse("""
        def test -> int, float
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
      ],
      "returns": [
        {
          "kind": "Identifier",
          "path": [
            "int"
          ],
          "prefixed": false,
          "args": null
        },
        {
          "kind": "Identifier",
          "path": [
            "float"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "body": null,
    }"""))

    assert parse("""
        def test() {
            return
        }
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
      ],
      "returns": [
      ],
      "body": [
        {
          "kind": "Return",
          "body": [
          ]
        }
      ]
    }"""))

    assert parse("""
        def test(var a: int) -> int {
            return a
        }
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
        {
          "kind": "Parameter",
          "kw": "VAR",
          "name": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "Identifier",
            "path": [
              "int"
            ],
            "prefixed": false,
            "args": null
          },
          "value": null
        }
      ],
      "returns": [
        {
          "kind": "Identifier",
          "path": [
            "int"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "body": [
        {
          "kind": "Return",
          "body": [
            {
              "kind": "Identifier",
              "path": [
                "a"
              ],
              "prefixed": false,
              "args": null
            }
          ]
        }
      ]
    }"""))

    assert parse("""
        def test(type T = *int, a: int = 0)
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
        {
          "kind": "Parameter",
          "kw": "TYPE",
          "name": {
            "kind": "Identifier",
            "path": [
              "T"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null,
          "value": {
            "kind": "PtrT",
            "kw": "VAR",
            "tpe": {
              "kind": "Identifier",
              "path": [
                "int"
              ],
              "prefixed": false,
              "args": null
            }
          }
        },
        {
          "kind": "Parameter",
          "kw": "VAR",
          "name": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "Identifier",
            "path": [
              "int"
            ],
            "prefixed": false,
            "args": null
          },
          "value": {
            "kind": "Integer",
            "value": 0.00000
          }
        }
      ],
      "returns": [
      ],
      "body": null
    }"""))

    assert parse("""
        def test(a: type T) -> T
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
        {
          "kind": "Parameter",
          "kw": "VAR",
          "name": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "TypeT",
            "expr": {
              "kind": "Identifier",
              "path": [
                "T"
              ],
              "prefixed": false,
              "args": null
            }
          },
          "value": null
        }
      ],
      "returns": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "body": null
    }"""))

    assert parse("""
        def test(a: type [T]) -> T
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
        {
          "kind": "Parameter",
          "kw": "VAR",
          "name": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "TypeT",
            "expr": {
              "kind": "ArrayT",
              "kw": "VAR",
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "T"
                ],
                "prefixed": false,
                "args": null
              }
            }
          },
          "value": null
        }
      ],
      "returns": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "body": null
    }"""))

    assert parse("""
        def test(a: type [type T]) -> T
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
        {
          "kind": "Parameter",
          "kw": "VAR",
          "name": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": {
            "kind": "TypeT",
            "expr": {
              "kind": "ArrayT",
              "kw": "VAR",
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "T"
                ],
                "prefixed": false,
                "args": null
              }
            }
          },
          "value": null
        }
      ],
      "returns": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "body": null
    }"""))

    assert parse("""
        def #inline test() {}
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "test"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
      ],
      "returns": [
      ],
      "body": [
      ],
      "inline": true
    }"""))
}

def #test test_array_literal {
    let a = parse("""
        [1, 2, 3]
    """)

    let b = parse("""
        [
            1,
            2,
            3
        ]
    """)

    let res = json::parse("""{
    "kind": "Program",
    "body": [
        {
        "kind": "StructLit",
        "args": [
            {
            "kind": "Integer",
            "value": 1.00000
            },
            {
            "kind": "Integer",
            "value": 2.00000
            },
            {
            "kind": "Integer",
            "value": 3.00000
            }
          ],
          "kwargs": []
        }
    ]
    }""")
    
    assert a == b
    assert b == res
}

def #test test_struct_literal {
    assert parse("""
        [foo, bar] !Struct
    """) == program(json::parse("""{
      "kind": "Cast",
      "left": {
        "kind": "StructLit",
        "args": [
          {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          },
          {
            "kind": "Identifier",
            "path": [
              "bar"
            ],
            "prefixed": false,
            "args": null
          }
        ],
        "kwargs": [
        ]
      },
      "right": {
        "kind": "Identifier",
        "path": [
          "Struct"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    let a = parse("""
        [foo, bar = 20, baz = 40] !Struct
    """)

    let b = parse("""
        [
            foo,
            bar = 20,
            baz = 40
        ] !Struct
    """)

    let res = program(json::parse("""{
      "kind": "Cast",
      "left": {
        "kind": "StructLit",
        "args": [
          {
            "kind": "Identifier",
            "path": [
              "foo"
            ],
            "prefixed": false,
            "args": null
          }
        ],
        "kwargs": [
          {
            "kind": "NamedArg",
            "name": {
              "kind": "Identifier",
              "path": [
                "bar"
              ],
              "prefixed": false,
              "args": null
            },
            "value": {
              "kind": "Integer",
              "value": 20.00000
            }
          },
          {
            "kind": "NamedArg",
            "name": {
              "kind": "Identifier",
              "path": [
                "baz"
              ],
              "prefixed": false,
              "args": null
            },
            "value": {
              "kind": "Integer",
              "value": 40.00000
            }
          }
        ]
      },
      "right": {
        "kind": "Identifier",
        "path": [
          "Struct"
        ],
        "prefixed": false,
        "args": null
      }
    }"""))

    assert a == b
    assert b == res
}

def #test test_if_expression {
    assert parse("""
        let a = 10 if 10 > 20 else 20
    """) == program(json::parse("""{
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "LET",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
        {
          "kind": "IfExpr",
          "cond": {
            "kind": "Gt",
            "left": {
              "kind": "Integer",
              "value": 10.00000
            },
            "right": {
              "kind": "Integer",
              "value": 20.00000
            }
          },
          "if_true": {
            "kind": "Integer",
            "value": 10.00000
          },
          "if_false": {
            "kind": "Integer",
            "value": 20.00000
          }
        }
      ]
    }"""))

    assert parse("""
        let a = 10 if 10 > 20 else 20 if 20 > 30 else 40
    """) == program(json::parse("""{
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "LET",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
        {
          "kind": "IfExpr",
          "cond": {
            "kind": "Gt",
            "left": {
              "kind": "Integer",
              "value": 10.00000
            },
            "right": {
              "kind": "Integer",
              "value": 20.00000
            }
          },
          "if_true": {
            "kind": "Integer",
            "value": 10.00000
          },
          "if_false": {
            "kind": "IfExpr",
            "cond": {
              "kind": "Gt",
              "left": {
                "kind": "Integer",
                "value": 20.00000
              },
              "right": {
                "kind": "Integer",
                "value": 30.00000
              }
            },
            "if_true": {
              "kind": "Integer",
              "value": 20.00000
            },
            "if_false": {
              "kind": "Integer",
              "value": 40.00000
            }
          }
        }
      ]
    }"""))

    assert parse("""
        foo(10 if true else 20)
    """) == program(json::parse("""{
      "kind": "FuncCall",
      "left": {
        "kind": "Identifier",
        "path": [
          "foo"
        ],
        "prefixed": false,
        "args": null
      },
      "args": [
        {
          "kind": "IfExpr",
          "cond": {
            "kind": "Boolean",
            "value": true
          },
          "if_true": {
            "kind": "Integer",
            "value": 10.00000
          },
          "if_false": {
            "kind": "Integer",
            "value": 20.00000
          }
        }
      ],
      "kwargs": [
      ]
    }"""))
}

def #test test_closures {
    assert parse("""
        def fun {
            def fun {
                def fun {
                    def fun {

                    }
                }
            }
        }
    """) == program(json::parse("""{
      "kind": "Def",
      "share": "NONE",
      "name": {
        "kind": "Identifier",
        "path": [
          "fun"
        ],
        "prefixed": false,
        "args": null
      },
      "params": [
      ],
      "returns": [
      ],
      "body": [
        {
          "kind": "Def",
          "share": "NONE",
          "name": {
            "kind": "Identifier",
            "path": [
              "fun"
            ],
            "prefixed": false,
            "args": null
          },
          "params": [
          ],
          "returns": [
          ],
          "body": [
            {
              "kind": "Def",
              "share": "NONE",
              "name": {
                "kind": "Identifier",
                "path": [
                  "fun"
                ],
                "prefixed": false,
                "args": null
              },
              "params": [
              ],
              "returns": [
              ],
              "body": [
                {
                  "kind": "Def",
                  "share": "NONE",
                  "name": {
                    "kind": "Identifier",
                    "path": [
                      "fun"
                    ],
                    "prefixed": false,
                    "args": null
                  },
                  "params": [
                  ],
                  "returns": [
                  ],
                  "body": [
                  ]
                }
              ]
            }
          ]
        }
      ]
    }"""))
}

def #test test_bug_1 {
    assert parse("""
        type T = struct {
            a: int
            // New line here
        }
        type E = struct { }
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "T"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
            {
              "kind": "IdDeclStruct",
              "ident": {
                "kind": "Identifier",
                "path": [
                  "a"
                ],
                "prefixed": false,
                "args": null
              },
              "tpe": {
                "kind": "Identifier",
                "path": [
                  "int"
                ],
                "prefixed": false,
                "args": null
              }
            }
          ]
        }
      ]
    },
    {
      "kind": "TypeDecl",
      "share": "NONE",
      "left": [
        {
          "kind": "Identifier",
          "path": [
            "E"
          ],
          "prefixed": false,
          "args": null
        }
      ],
      "right": [
        {
          "kind": "Struct",
          "body": [
          ]
        }
      ]
    }
  ]
}""")
}

def #test test_bug_2 {
    assert parse("""
        var a = 20; a += 10
    """) == json::parse("""{
  "kind": "Program",
  "body": [
    {
      "kind": "VarDecl",
      "share": "NONE",
      "kw": "VAR",
      "left": [
        {
          "kind": "IdDecl",
          "value": {
            "kind": "Identifier",
            "path": [
              "a"
            ],
            "prefixed": false,
            "args": null
          },
          "tpe": null
        }
      ],
      "right": [
        {
          "kind": "Integer",
          "value": 20.00000
        }
      ]
    },
    {
      "kind": "AddEq",
      "left": {
        "kind": "Identifier",
        "path": [
          "a"
        ],
        "prefixed": false,
        "args": null
      },
      "right": {
        "kind": "Integer",
        "value": 10.00000
      }
    }
  ]
}""")
}

def #test test_lambda {
    assert parse("""
        function({ x: int -> 
            print(x) 
            return x * 2
        })
    """) == json::parse("""{
      "kind": "Program",
      "body": [
        {
          "kind": "FuncCall",
          "left": {
            "kind": "Identifier",
            "path": [
              "function"
            ],
            "prefixed": false,
            "args": null
          },
          "args": [
            {
              "kind": "Lambda",
              "parameters": [
                {
                  "kind": "Parameter",
                  "kw": "VAR",
                  "name": {
                    "kind": "Identifier",
                    "path": [
                      "x"
                    ],
                    "prefixed": false,
                    "args": null
                  },
                  "tpe": {
                    "kind": "Identifier",
                    "path": [
                      "int"
                    ],
                    "prefixed": false,
                    "args": null
                  },
                  "value": null
                }
              ],
              "body": [
                {
                  "kind": "FuncCall",
                  "left": {
                    "kind": "Identifier",
                    "path": [
                      "print"
                    ],
                    "prefixed": false,
                    "args": null
                  },
                  "args": [
                    {
                      "kind": "Identifier",
                      "path": [
                        "x"
                      ],
                      "prefixed": false,
                      "args": null
                    }
                  ],
                  "kwargs": [
                  ]
                },
                {
                  "kind": "Return",
                  "body": [
                    {
                      "kind": "Mul",
                      "left": {
                        "kind": "Identifier",
                        "path": [
                          "x"
                        ],
                        "prefixed": false,
                        "args": null
                      },
                      "right": {
                        "kind": "Integer",
                        "value": 2.000000
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "kwargs": [
          ]
        }
      ]
    }""")
}