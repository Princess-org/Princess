import common
import json

def lex(str: String) -> &Json {
    return json::parse(common::run_compiler_on_source(str, ["--tokens" !String])) 
}

def #test test_empty_file {
    assert lex("") == json::parse("""[{
        "kind": "EOF",
        "line": 0,
        "column": 0 }]""") 
}

def #test test_float_literal {
    assert lex("123.45678")[0] == json::parse("""{\
        "kind": "FLOAT", "line": 0, "column": 0, "value": 123.45678 }""")

    assert lex(".5")[0] == json::parse("""{\
        "kind": "FLOAT", "line": 0, "column": 0, "value": 0.5 }""")

    assert lex("10.")[0] == json::parse("""{\
        "kind": "FLOAT", "line": 0, "column": 0, "value": 10 }""")

    assert lex("10E10")[0] == json::parse("""{\
        "kind": "FLOAT", "line": 0, "column": 0, "value": 100000000000 }""")

    assert lex("10.e10")[0] == json::parse("""{\
        "kind": "FLOAT", "line": 0, "column": 0, "value": 100000000000 }""")

    assert lex("10E+10")[0] == json::parse("""{\
        "kind": "FLOAT", "line": 0, "column": 0, "value": 100000000000 }""")

    assert lex("10E-5")[0] == json::parse("""{\
        "kind": "FLOAT", "line": 0, "column": 0, "value": 0.0001 }""") }

def #test test_int_literal {
    assert lex("156")[0] == json::parse("""{\
        "kind": "INTEGER", "line": 0, "column": 0, "value": 156 }""")

    assert lex("0b100100")[0] == json::parse("""{\
        "kind": "INTEGER", "line": 0, "column": 0, "value": 36 }""")

    assert lex("0xDEADBABE")[0] == json::parse("""{\
        "kind": "INTEGER", "line": 0, "column": 0, "value": 3735927486 }""")
    
    assert lex("0o172")[0] == json::parse("""{\
        "kind": "INTEGER", "line": 0, "column": 0, "value": 122 }""") }

def #test test_char_literal {
    assert lex("'A'")[0] == json::parse("""{\
        "kind": "CHAR", "line": 0, "column": 0, "value": 65 }""")
    
    assert lex("'A' 'B'") == json::parse("""[\
        { "kind": "CHAR", "line": 0, "column": 0, "value": 65  },
        { "kind": "WHITESPACE", "line": 0, "column": 3  },
        { "kind": "CHAR", "line": 0, "column": 4, "value": 66  },
        { "kind": "EOF", "line": 0, "column": 6  }
    ]""")

    assert lex("'\\a'")[0] == json::parse("""{\
        "kind": "CHAR", "line": 0, "column": 0, "value": 7 }""")

    assert lex("'\\xFF'")[0] == json::parse("""{\
        "kind": "CHAR", "line": 0, "column": 0, "value": 255 }""") }

def #test test_char_literal_error {
    assert lex("'A")[0] == json::parse("""{\
        "kind": "ERROR", "line": 0, "column": 0,
        "value": "Unexpected end of file while parsing character" }""")

    assert lex("'\\d'")[0] == json::parse("""{\
        "kind": "ERROR", "line": 0, "column": 0,
        "value": "Invalid escape sequence" }""")

    assert lex("'\\x'")[0] == json::parse("""{\
        "kind": "ERROR", "line": 0, "column": 0,
        "value": "Invalid escape sequence" }""") }

def #test test_string_literal {
    assert lex("\"this is a test\"")[0] == json::parse("""{\
        "kind": "STRING", "line": 0, "column": 0,
        "value": "this is a test" }""")

    assert lex("\"test\" \"more\"") == json::parse("""[
        { "kind": "STRING", "line": 0, "column": 0, "value": "test"  },
        { "kind": "WHITESPACE", "line": 0, "column": 6  },
        { "kind": "STRING", "line": 0, "column": 7, "value": "more"  },
        { "kind": "EOF", "line": 0, "column": 12  }
    ]""")

    assert lex("\"\\a\\b\\f\\n\\r\\t\\v\\'\\\"\\\\\"")[0] == json::parse("""{\
        "kind": "STRING", "line": 0, "column": 0,
        "value": "\\u0007\\u0008\\u000C\\u000A\\u000D\\u0009\\u000B\\u0027\\u0022\\u005C" }""")

    assert lex("\"\\xFF\"")[0] == json::parse("""{\
        "kind": "STRING", "line": 0, "column": 0, "value": "\xFF" }""")

    assert lex("\"\\u01FF\"")[0] == json::parse("""{\
        "kind": "STRING", "line": 0, "column": 0, "value": "\u01FF" }""")

    assert lex("\"\\u88AA\"")[0] == json::parse("""{\
        "kind": "STRING", "line": 0, "column": 0, "value": "\u88AA" }""")

    assert lex("\"\\U0010FFFF\"")[0] == json::parse("""{\
        "kind": "STRING", "line": 0, "column": 0, "value": "\U0010FFFF" }""")

    assert lex("\"\n\n\"")[0] == json::parse("""{\
        "kind": "STRING", "line": 0, "column": 0, "value": "\\n\\n" }""") }

def #test test_string_literal_error {
    assert lex("\"this is a test")[0] == json::parse("""{\
        "kind": "ERROR", "line": 0, "column": 0,
        "value": "Unexpected end of file while parsing string literal" }""")

    assert lex("\"test \\d \"")[0] == json::parse("""{\
        "kind": "ERROR", "line": 0, "column": 0,
        "value": "Invalid escape sequence" }""")
    
    assert lex("\"\\UGHRR\"")[0] == json::parse("""{\
        "kind": "ERROR", "line": 0, "column": 0,
        "value": "Invalid escape sequence" }""")

    assert lex("\"\\UFF0000FF\"")[0] == json::parse("""{\
        "kind": "ERROR", "line": 0, "column": 0,
        "value": "Invalid unicode sequence" }""") }

def #test test_identifier {
    assert lex("foo_bar")[0] == json::parse("""{\
        "kind": "IDENTIFIER", "line": 0, "column": 0,
        "value": "foo_bar" }""")

    assert lex("foo bar") == json::parse("""[\
        { "kind": "IDENTIFIER", "line": 0, "column": 0, "value": "foo"  },
        { "kind": "WHITESPACE", "line": 0, "column": 3  },
        { "kind": "IDENTIFIER", "line": 0, "column": 4, "value": "bar"  },
        { "kind": "EOF", "line": 0, "column": 6  }
    ]""")

    assert lex("def foo") == json::parse("""[
        { "kind": "K_DEF", "line": 0, "column": 0  },
        { "kind": "WHITESPACE", "line": 0, "column": 3  },
        { "kind": "IDENTIFIER", "line": 0, "column": 4, "value": "foo"  },
        { "kind": "EOF", "line": 0, "column": 6  }
    ]""") }

def #test test_pragma {
    assert lex("#union")[0] == json::parse("""{\
        "kind": "PRAGMA", "line": 0, "column": 0,
        "value": "#union" }""")

    assert lex("##compiler_dep")[0] == json::parse("""{\
        "kind": "PRAGMA", "line": 0, "column": 0,
        "value": "##compiler_dep" }""") }

def #test test_comment {
    assert lex("//This is a test")[0] == json::parse("""{\
        "kind": "COMMENT", "line": 0, "column": 0,
        "value": "//This is a test" }""")
    
    assert lex("//This
                //Test") == 

    json::parse("""[
        { "kind": "COMMENT", "line": 0, "column": 0, "value": "//This"  },
        { "kind": "NEW_LINE", "line": 0, "column": 6  },
        { "kind": "WHITESPACE", "line": 1,"column": 0  },
        { "kind": "COMMENT", "line": 1, "column": 16, "value": "//Test"  },
        { "kind": "EOF", "line": 1, "column": 21  } }]""")

    assert lex("/*This*/")[0] == json::parse("""{\
        "kind": "COMMENT", "line": 0, "column": 0,
        "value": "/*This*/" }""")

    assert lex("/*Nested/*Comment*/*/")[0] == json::parse("""{\
        "kind": "COMMENT", "line": 0, "column": 0,
        "value": "/*Nested/*Comment*/*/" }""") }

def #test test_symbols {
    assert lex("foo+bar") == json::parse("""[\
        { "kind": "IDENTIFIER", "line": 0, "column": 0, "value": "foo"  },
        { "kind": "OP_ADD", "line": 0, "column": 3  },
        { "kind": "IDENTIFIER", "line": 0, "column": 4, "value": "bar"  },
        { "kind": "EOF", "line": 0, "column": 6 }
    ]""")

    assert lex("1..2") == json::parse("""[\
        { "kind": "INTEGER","line": 0, "column": 0, "value": 1  },
        { "kind": "OP_RANGE", "line": 0, "column": 1  },
        { "kind": "INTEGER", "line": 0, "column": 3, "value": 2  },
        { "kind": "EOF", "line": 0, "column": 3  }
    ]""")

    // TODO add more tests 
}

def #test test_newline_in_parens {
    // No newlines emitted inside of parens, instead you get whitespace
    assert lex("(\nident\n)") == json::parse("""[\
        { "kind": "O_PAREN", "line": 0, "column": 0 },
        { "kind": "WHITESPACE", "line": 0, "column": 1 },
        { "kind": "IDENTIFIER", "line": 1, "column": 0, "value": "ident" },
        { "kind": "WHITESPACE", "line": 1, "column": 5 },
        { "kind": "C_PAREN", "line": 2, "column": 0 },
        { "kind": "EOF", "line": 2, "column": 1 }
    ]""")

    // Newlines in brackets
    assert lex("{\nident\n}") == json::parse("""[
        { "kind": "O_BRACE", "line": 0, "column": 0 },
        { "kind": "NEW_LINE", "line": 0, "column": 1 },
        { "kind": "IDENTIFIER", "line": 1, "column": 0, "value": "ident" },
        { "kind": "NEW_LINE", "line": 1, "column": 5 },
        { "kind": "C_BRACE", "line": 2, "column": 0 },
        { "kind": "EOF", "line": 2, "column": 0 }
    ]""")
}

def #test test_triple_quoted {
    assert lex("""
        \"""
            some triple quoted text
            that has multiple lines
        \"""
    """) == json::parse("""[\
        { "kind": "NEW_LINE", "line": 0, "column": 0 },
        { "kind": "WHITESPACE", "line": 1, "column": 0 },
        { "kind": "STRING", "line": 1, "column": 8, "value": "\n            some triple quoted text\n            that has multiple lines\n        " },
        { "kind": "NEW_LINE", "line": 4, "column": 10 },
        { "kind": "WHITESPACE", "line": 5, "column": 0 },
        { "kind": "EOF", "line": 5, "column": 3}
    ]""")
}

def #test test_complex {
    var str = """
        type T = struct {
            a: int
            b: string }

        def main(a: int, b: unsigned word) -> T {
            print("A: ", a, " B: ", b)
            var t: T = {
                a = 0, b = "Test string" } !T }
    """

    assert lex(str) == json::parse("""[\
        { "kind": "NEW_LINE", "line": 0, "column": 0 },
        { "kind": "WHITESPACE", "line": 1, "column": 0 },
        { "kind": "K_TYPE", "line": 1, "column": 8 },
        { "kind": "WHITESPACE", "line": 1, "column": 12 },
        { "kind": "IDENTIFIER", "line": 1, "column": 13, "value": "T" },
        { "kind": "WHITESPACE", "line": 1, "column": 14 },
        { "kind": "OP_ASSIGN", "line": 1, "column": 15 },
        { "kind": "WHITESPACE", "line": 1, "column": 16 },
        { "kind": "K_STRUCT", "line": 1, "column": 17 },
        { "kind": "WHITESPACE", "line": 1, "column": 23 },
        { "kind": "O_BRACE", "line": 1, "column": 24 },
        { "kind": "NEW_LINE", "line": 1, "column": 25 },
        { "kind": "WHITESPACE", "line": 2, "column": 0 },
        { "kind": "IDENTIFIER", "line": 2, "column": 12, "value": "a" },
        { "kind": "COLON", "line": 2, "column": 13 },
        { "kind": "WHITESPACE", "line": 2, "column": 14 },
        { "kind": "IDENTIFIER", "line": 2, "column": 15, "value": "int" },
        { "kind": "NEW_LINE", "line": 2, "column": 18 },
        { "kind": "WHITESPACE", "line": 3, "column": 0 },
        { "kind": "IDENTIFIER", "line": 3, "column": 12, "value": "b" },
        { "kind": "COLON", "line": 3, "column": 13 },
        { "kind": "WHITESPACE", "line": 3, "column": 14 },
        { "kind": "IDENTIFIER", "line": 3, "column": 15, "value": "string" },
        { "kind": "WHITESPACE", "line": 3, "column": 21 },
        { "kind": "C_BRACE", "line": 3, "column": 22 },
        { "kind": "NEW_LINE", "line": 3, "column": 23 },
        { "kind": "NEW_LINE", "line": 4, "column": 0 },
        { "kind": "WHITESPACE", "line": 5, "column": 0 },
        { "kind": "K_DEF", "line": 5, "column": 8 },
        { "kind": "WHITESPACE", "line": 5, "column": 11 },
        { "kind": "IDENTIFIER", "line": 5, "column": 12, "value": "main" },
        { "kind": "O_PAREN", "line": 5, "column": 16 },
        { "kind": "IDENTIFIER", "line": 5, "column": 17, "value": "a" },
        { "kind": "COLON", "line": 5, "column": 18 },
        { "kind": "WHITESPACE", "line": 5, "column": 19 },
        { "kind": "IDENTIFIER", "line": 5, "column": 20, "value": "int" },
        { "kind": "COMMA", "line": 5, "column": 23 },
        { "kind": "WHITESPACE", "line": 5, "column": 24 },
        { "kind": "IDENTIFIER", "line": 5, "column": 25, "value": "b" },
        { "kind": "COLON", "line": 5, "column": 26 },
        { "kind": "WHITESPACE", "line": 5, "column": 27 },
        { "kind": "K_UNSIGNED", "line": 5, "column": 28 },
        { "kind": "WHITESPACE", "line": 5, "column": 36 },
        { "kind": "K_WORD", "line": 5, "column": 37 },
        { "kind": "C_PAREN", "line": 5, "column": 41 },
        { "kind": "WHITESPACE", "line": 5, "column": 42 },
        { "kind": "ARROW", "line": 5, "column": 43 },
        { "kind": "WHITESPACE", "line": 5, "column": 45 },
        { "kind": "IDENTIFIER", "line": 5, "column": 46, "value": "T" },
        { "kind": "WHITESPACE", "line": 5, "column": 47 },
        { "kind": "O_BRACE", "line": 5, "column": 48 },
        { "kind": "NEW_LINE", "line": 5, "column": 49 },
        { "kind": "WHITESPACE", "line": 6, "column": 0 },
        { "kind": "IDENTIFIER", "line": 6, "column": 12, "value": "print" },
        { "kind": "O_PAREN", "line": 6, "column": 17 },
        { "kind": "STRING", "line": 6, "column": 18, "value": "A: " },
        { "kind": "COMMA", "line": 6, "column": 23 },
        { "kind": "WHITESPACE", "line": 6, "column": 24 },
        { "kind": "IDENTIFIER", "line": 6, "column": 25, "value": "a" },
        { "kind": "COMMA", "line": 6, "column": 26 },
        { "kind": "WHITESPACE", "line": 6, "column": 27 },
        { "kind": "STRING", "line": 6, "column": 28, "value": " B: " },
        { "kind": "COMMA", "line": 6, "column": 34 },
        { "kind": "WHITESPACE", "line": 6, "column": 35 },
        { "kind": "IDENTIFIER", "line": 6, "column": 36, "value": "b" },
        { "kind": "C_PAREN", "line": 6, "column": 37 },
        { "kind": "NEW_LINE", "line": 6, "column": 38 },
        { "kind": "WHITESPACE", "line": 7, "column": 0 },
        { "kind": "K_VAR", "line": 7, "column": 12 },
        { "kind": "WHITESPACE", "line": 7, "column": 15 },
        { "kind": "IDENTIFIER", "line": 7, "column": 16, "value": "t" },
        { "kind": "COLON", "line": 7, "column": 17 },
        { "kind": "WHITESPACE", "line": 7, "column": 18 },
        { "kind": "IDENTIFIER", "line": 7, "column": 19, "value": "T" },
        { "kind": "WHITESPACE", "line": 7, "column": 20 },
        { "kind": "OP_ASSIGN", "line": 7, "column": 21 },
        { "kind": "WHITESPACE", "line": 7, "column": 22 },
        { "kind": "O_BRACE", "line": 7, "column": 23 },
        { "kind": "NEW_LINE", "line": 7, "column": 24 },
        { "kind": "WHITESPACE", "line": 8, "column": 0 },
        { "kind": "IDENTIFIER", "line": 8, "column": 16, "value": "a" },
        { "kind": "WHITESPACE", "line": 8, "column": 17 },
        { "kind": "OP_ASSIGN", "line": 8, "column": 18 },
        { "kind": "WHITESPACE", "line": 8, "column": 19 },
        { "kind": "INTEGER", "line": 8, "column": 20, "value": 0 },
        { "kind": "COMMA", "line": 8, "column": 21 },
        { "kind": "WHITESPACE", "line": 8, "column": 22 },
        { "kind": "IDENTIFIER", "line": 8, "column": 23, "value": "b" },
        { "kind": "WHITESPACE", "line": 8, "column": 24 },
        { "kind": "OP_ASSIGN", "line": 8, "column": 25 },
        { "kind": "WHITESPACE", "line": 8, "column": 26 },
        { "kind": "STRING", "line": 8, "column": 27, "value": "Test string" },
        { "kind": "WHITESPACE", "line": 8, "column": 40 },
        { "kind": "C_BRACE", "line": 8, "column": 41 },
        { "kind": "WHITESPACE", "line": 8, "column": 42 },
        { "kind": "OP_CAST", "line": 8, "column": 43 },
        { "kind": "IDENTIFIER", "line": 8, "column": 44, "value": "T" },
        { "kind": "WHITESPACE", "line": 8, "column": 45 },
        { "kind": "C_BRACE", "line": 8, "column": 46 },
        { "kind": "NEW_LINE", "line": 8, "column": 47 },
        { "kind": "WHITESPACE", "line": 9, "column": 0 },
        { "kind": "EOF", "line": 9, "column": 3 }
    ]""")
}