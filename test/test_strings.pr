def #test test_conversions {
    let a = "some string"
    let b: &string = a
    let c: Str = a
    let d: StringBuffer = a
    let e: StringSlice = a.slice(0, a.length())
    assert a == b
    assert b == c
    assert c == d
    assert d == e
}

def #test test_equality {
    let a = "some"
    let b = "other"
    let c = "some"

    assert a == c
    assert a != b
}

def #test test_append {
    var s: String
    s = "a" + 10
    assert s == "a10"
    s = 10 + "a"
    assert s == "10a"

    s = "a" + 10.5
    assert s == "a10.500000"
    s = 10.5 + "a"
    assert s == "10.500000a"
    
    s = "a" + 'b'
    assert s == "ab"
    s = 'b' + "a"
    assert s == "ba"
}

def #test test_string_buffer {
    var sb: StringBuffer = ""
    sb += 10
    sb += "what"
    sb += 'a'
    assert sb == "10whata"

    let s: Str = sb
    assert s == "10whata"
}

def #test test_long_str {
    let ls: Str = """
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, 
        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
        Ut enim ad minim veniam, quis nostrud exercitation ullamco 
        laboris nisi ut aliquip ex ea commodo consequat. Duis aute 
        irure dolor in reprehenderit in voluptate velit esse cillum 
        dolore eu fugiat nulla pariatur. Excepteur sint occaecat 
        cupidatat non proident, sunt in culpa qui officia deserunt 
        mollit anim id est laborum.
    """

    assert not is_short_str(*ls)
    assert ls.long_str.data != null
    assert @ls.long_str.refcount == 2
    assert length(ls) == 522
}

def #test test_short_str {
    let ss: Str = "short string"
    
    assert is_short_str(*ss)
    assert ss.short_str.data.value != null
    assert ss.short_str.count == 12
    assert length(ss) == 12
}

def #test test_slice {
    let s1 = "some string"
    let s2: Str = s1
    let s3: &[char] = s1
    let s4: String = s1

    let slc1 = s1.slice(0, 4)
    let slc2 = s2.slice(0, 4)
    let slc3 = s3.slice(0, 4)
    let slc4 = s4.slice(0, 4)
    
    assert slc1 == slc2
    assert slc2 == slc3
    assert slc3 == slc4
    assert slc4 == "some"
}

type MyString = struct {
    str: Str
}

export def apply(s: &MyString, index: size_t) -> char {
    return s.str(index)
}
export def length(s: &MyString) -> size_t {
    return s.str.length()
}

def #test test_custom_str {
    let a: MyString = [str = "some string"] !MyString
    let s: String = a
    let slc = s.slice(0, 4)
    let sbs = s.substring(0, 4)

    assert slc == "some"
    assert sbs == "some"
}

def #test test_remove {
    let a: Str = "some string"
    assert a.remove(1) == "sme string"
    assert a.remove(1, 5) == "string"
    assert a.remove(0) == "ome string"
}

def #test test_insert {
    let a: Str = "some string"
    assert a.insert(4, 's') == "somes string"
    assert a.insert(4, " more") == "some more string"
    assert a.insert(0, "really ") == "really some string"
}

def #test test_substring {
    let a: Str = "abcdefg"
    let b: StringSlice = a.slice(0, a.length())
    let c: &[char] = a.to_array()

    assert a.substring(1, 4) == "bcd"
    assert b.substring(1, 4) == "bcd"
    assert c.substring(1, 4) == "bcd"
}

def #test test_index_of {
    let a: Str = "abcdefabcdef"
    assert a.index_of("bcd") == 1
    assert a.index_of("foo") == -1
    assert a.index_of("bcd", 4) == 7
}

def #test test_last_index_of {
    let a: Str = "abcdefabcdef"
    assert a.last_index_of("bcd") == 7
    assert a.last_index_of("foo") == -1
}

def #test test_ends_with {
    let a: Str = "abcdefabcdef"
    assert a.ends_with("cdef")
    assert not a.ends_with("abc")
}

def #test test_starts_with {
    let a: Str = "abcdefabcdef"
    assert a.starts_with("abcd")
    assert not a.starts_with("def")
}

def #test test_strip_margin {
    let a: Str = "\
        |something here
        |something there"
    assert a.strip_margin() == "something here\nsomething there"
}

def #test test_match {
    let a: Str = "some string"
    assert "s*tr*g".match(a)
    assert "s?me s?ring".match(a)
    assert "s?me s*ng".match(a)

    assert not "a*bc".match(a)
    assert not "s?me strong".match(a)
    assert not "s?me s*og".match(a)
}

def #test test_utf8_encode {
    assert utf8_encode(0x41) == "A"
    assert utf8_encode(0x0500) == "\u0500"
    assert utf8_encode(0x1FB00) == "\U0001FB00"
}