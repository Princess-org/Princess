import common

def #test test_constants {
    let src = """
        const c = 4
        def test_constants {
            // We can't use pointers here
            const c = 4
            assert c == 4
        }
        test_constants
        assert c == 4
    """
    assert run_source(src) == 0
}

def #test test_func_call {
    let src = """
        def sum(a: int, b: int) -> int {
            return a + b
        }

        def test_func_call {
            // TODO Varargs don't work for some reason
            const s = sum(10, 20)
            assert s == 30
        }
        test_func_call
    """
    assert run_source(src) == 0
}

def #test test_static_if {
    let src = """
        def sum(a: int, b: int) -> int {
            return a + b
        }

        def test_static_if {
            const s = sum(10, 20)
            #if s > 10 {
                var a: int = 10
            } else {
                var a: int = 20
            }
            assert a == 10
        }
        test_static_if
    """
    assert run_source(src) == 0
}

def #test test_c_functions {
    let src = """
        def return_random_number -> long {
            cstd::srand(100)
            return cstd::rand()
        }

        def test_c_functions {
            const ac = return_random_number()
            let al = return_random_number()

            assert ac == al
        }
        test_c_functions
    """
    assert run_source(src) == 0
}

def #test test_strings {
    // TODO Work on letting consteval serialize strings
    let src = """
        def unsafe_copy(s: Str) -> string {
            let res = allocate(char, s.length() + 1)
            res(s.length()) = '\\0'
            for var i in 0..s.length() {
                res(i) = s(i)
            }
            return res
        }

        def append_str(a: string, b: string) -> string {
            let res = a + b
            return unsafe_copy(res)
        }

        const hello_world = append_str("Hello ", "World!")

        def test_strings {
            assert hello_world == "Hello World!"
        }
        test_strings
    """
    assert run_source(src) == 0
}

def #test test_bug_1 {
    let src = """
        def test_bug_1_ -> bool {
            return true == (true == true)
        }

        def test_bug_1 {
            const ac = test_bug_1_()
            let al = test_bug_1_()
            assert ac == al == true
        }
        test_bug_1
    """
    assert run_source(src) == 0
}