type Node = interface {
    def walk() -> int
}

type Add = struct {
    left: &Node
    right: &Node
}

def walk(add: &Add) -> int {
    return add.left.walk() + add.right.walk()
}

type Sub = struct {
    left: &Node
    right: &Node
}

def walk(sub: &Sub) -> int {
    return sub.left.walk() - sub.right.walk()
}

type Value = struct {
    value: int
}

def walk(value: &Value) -> int {
    return value.value
}

def test_expr {
    // 10 + (40 - 20) + 40
    let expr = [
        left = [
            left = [value = 10] !&Value, 
            right = [
                left = [value = 40] !&Value, 
                right = [value = 20] !&Value
            ] !&Sub
        ] !&Add, 
        right = [value = 40] !&Value 
    ] !&Add

    let result = walk(expr)
    assert result == 70
}
test_expr