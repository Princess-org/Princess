type Struct4 = struct { a: int; b: float }
type Interface = interface {
    def function(a: int) -> int
}

def function(s: Struct4, a: int) -> int {
    return s.a + a
}

def test_reflection {
    type T = int
    assert T.kind == runtime::TypeKind::WORD
    assert T.name == "int32"
    assert T.unsig == false

    assert Struct4.kind == runtime::TypeKind::STRUCT
    assert Struct4.fields.size == 2
    assert Struct4.fields(0).tpe == int
    assert Struct4.fields(0).name == "a"
    assert Struct4.fields(1).tpe == float
    assert Struct4.fields(1).name == "b"

    assert Struct4.type_members.size == 1
    let member = Struct4.type_members(0)
    assert member.name == "main::function::(main::Struct4, int32)"
    assert member.parameter_t.size == 2
    assert member.parameter_t(0) == Struct4
    assert member.parameter_t(1) == int
    assert member.return_t.size == 1
    assert member.return_t(0) == int

    assert Interface.kind == runtime::TypeKind::STRUCTURAL
    assert Interface.structural_members.size == 1
    let smember = Interface.structural_members(0)
    assert smember.name == "function"
    assert smember.parameter_t.size == 1
    assert smember.parameter_t(0) == int
    assert smember.return_t.size == 1
    assert smember.return_t(0) == int

    assert runtime::implements(Struct4, Interface)
}
test_reflection