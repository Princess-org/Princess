import common
import json

def compile(str: String) -> &Json {
    let include_dir = dirname(__file__)
    let types = run_compiler_on_source(str, [
        "--continue-on-output" !String, 
        "--typed-ast" !String, 
        "--name" !String, 
        "main" !String,
        "--include" !String,
        include_dir !String
    ])

    if not types { return null }
    return json::parse(types)
}

def #test test_arithmetic {
    var str = """
        10 + 10 + 10
        10 * 2 + 5 / 4 - 5 % 3
        10.5 / 4.0
        10 << 1 + 10 >> 2
        -10
        -10.5
    """
    assert compile(str) != null
}

def #test test_compare {
    var str = """
        let a = 10 == 20
        let b = 10 > 20
        let c = 10 < 20
        
        let d = 5
        let e = 1 < d < 10
    """
    assert compile(str) != null
}

def #test test_pointer_arithmetic {
    var str = """
        let a = 20
        let b = *a
        let c = b ++ 20 -- 5
        
        var d: *int
        @(d ++ 10) = 20
    """
    assert compile(str) != null
}

def #test test_assign_eq {
    var str = """
        var a = 10
        a += 20
        a <<= 1
        a >>= 2
        a *= 5
        a /= 10
    """
    assert compile(str) != null
}

def #test test_string_literal {
    // Conversion between static and dynamic arrays
    var str = """
        def function -> [4; char] {}

        var a: [char] = "abc"
        var b: [char] = function()

        def two_returns -> [4; char], [5; char] {}
        var c: [char], d: [char] = two_returns()
    """
    assert compile(str) != null
}

def #test test_boolean_op {
    var str = """
        let a = true
        let b = false
        let c = a and b
        let d = a or b
        let e = not d
    """
    assert compile(str) != null
}

def #test test_assert {
    var str = """
        assert
        assert 1 == 2
        assert 1 == 2, \"What is this\"
    """
    assert compile(str) != null
}

def #test test_function_pointers {
    var str = """
        def some_function -> int { return 20 }
        let a = *some_function
        let b = a()
    """
    assert compile(str) != null
}

def #test test_if_expression {
    var str = """
        let a = 10 if 10 > 20 else 5
        var b: int
        var c: int
        @(*b if 10 > 20 else *c) = 10
    """
    assert compile(str) != null
}

def #test test_if {
    var str = """
        def foo -> int { return 0 }

        if true {
            foo()
        }
        foo()

        if true {
            let x = foo()
        } else if false {
            let x = foo()
        } else if true {
            let x = foo()
        }
        let x = foo()

        if true {
            foo()
        } else {
            foo()
        }
        foo()

        if true {
            foo()
            if true {
                foo()
            } else {
                foo()
            }
        } else {
            foo()
            if true {
                foo()
            } else if true {
                foo()
            } else {
                foo()
            }
        }
        foo()
    """
    assert compile(str) != null
}

def #test test_loop {
    var str = """
        def foo
        loop {
            foo()
            continue
            foo()
            break
            foo()
        }

        loop {
            if true {
                break
            } else {
                continue
            }
            break
        }

        loop {
            continue
            loop {
                continue
                break
            }
            break
        }
    """
    assert compile(str) != null
}

def #test test_while {
    var str = """
        var i = 0
        while i < 10 {
            i += 1
        }
    """
    assert compile(str) != null
}

def #test test_for {
    var str = """
        for var i in 0..10 {
            print(i)
        }

        var j = 0
        for j in 0..=10 {
            print(j)
        }
    """
    assert compile(str) != null
}

def #test test_vardecl {
    var str = """
        var foo: byte = 5
        var bar: long
        let baz, (bar) = 0, 1
    """
    var res = compile(str)
    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "byte"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "long"
    assert res("body")(2)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(2)("left")(1)("value")("type_tag")("name").as_string() == "long"
}

def #test test_vardecl_fail {
    var str = """
        const a, b = 20
        var c, d = 10, 20, 30
        var c = 10
        var e, (c) = 10
        var f: int = "string"
    """
    assert compile(str) == null
    assert env.err() == strip_margin("""
        |main@2:9
        |        const a, b = 20
        |        ^~~~~~~~~~~~~~~
        |Unbalanced assignment
        |
        |main@4:13
        |        var c = 10
        |            ^
        |Redeclaration of `c`
        |
        |main@5:16
        |        var e, (c) = 10
        |               ^~~
        |Must assign a value
        |
        |main@6:13
        |        var f: int = "string"
        |            ^~~~~~
        |Incompatible types [char] and int\n""")
}

def #test test_var_let {
    var str = """
        let a: *let int = null
        a = null
        @a = 20

        var b: [let int]
        b(0) = 20

        var c: [4; let int]
        c(0) = 20
    """
    assert compile(str) == null
    assert env.err() == strip_margin("""
        |main@3:9
        |        a = null
        |        ^
        |Assignment to non var
        |
        |main@4:9
        |        @a = 20
        |        ^~
        |Assignment to non var
        |
        |main@7:9
        |        b(0) = 20
        |        ^~~~
        |Assignment to non var
        |
        |main@10:9
        |        c(0) = 20
        |        ^~~~
        |Assignment to non var\n""")
}

def #test test_literals {
    var str = """
        let v1 = "string"
        let v2 = 'c'
        let v3 = 0.0
        let v4 = 0xFF
        let v5 = false
    """
    var res = compile(str)
    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "[char]"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "char"
    assert res("body")(2)("left")(0)("value")("type_tag")("name").as_string() == "double"
    assert res("body")(3)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(4)("left")(0)("value")("type_tag")("name").as_string() == "bool"
}

def #test test_switch {
    var str = """
        let a = 20
        switch a {
            case 10; print(1)
            case 11..=19; print(2)
            case 20, 25; print(3)
            case; print(4)
        }

        switch a {
            case 0..=100; print(1)
            case 101, 102, 103; print(2)
            case 104..200, 205; print(3)
            case; print(4)
        }
    """
    assert compile(str) != null
}

def #test test_assign {
    var str = """
        var foo = 5
        var bar = 10

        foo, bar = 10, 20

        def function -> int, int {
            return 0, 0
        }
        foo, bar = function()
    """
    assert compile(str) != null
}

def #test test_assign_fail {
    var str = """
        var v
        let foo = 20
        foo = 40
        var bar: int
        bar = "string"
    """
    assert compile(str) == null
    assert env.err() == strip_margin("
        |main@4:9
        |        foo = 40
        |        ^~~
        |Assignment to non var
        |
        |main@6:9
        |        bar = \"string\"
        |        ^~~
        |Incompatible types, can't assign [char] to int
        |
        |main@2:13
        |        var v
        |            ^
        |Need to specify a type\n")
}

def #test test_operators {
    var str = """
        let foo = 0
        let bar = -foo
        let baz = +50
        let v3 = 10 + 20
        let v4 = v3 + 0 !short
        let v5 = 0 !long - 0 !int
        let v6 = 0 !long & 0 !int
    """
    let res = compile(str)

    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(2)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(3)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(4)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(5)("left")(0)("value")("type_tag")("name").as_string() == "long"
    assert res("body")(6)("left")(0)("value")("type_tag")("name").as_string() == "long"
}

def #test test_operators_fail {
    var str = """
        var a = 0 !float
        var b = 1
        var c = a & b
        var d = \"string\"
        var e = not d
    """
    assert compile(str) == null
    assert env.err() == strip_margin("
        |main@4:17
        |        var c = a & b
        |                ^~~~~
        |Invalid operands of type float and int to bitwise operator
        |
        |main@6:17
        |        var e = not d
        |                ^~~~~
        |Incompatible type [char], must be boolean type\n")
}

def #test test_def {
    var str = """
        def foo
        def foo {}
        def foo(a: int) {}
        def foo(a: long...) {}
        def bar(a: type T, type B) {}
        implicit def convert(a: int) -> double {
            return a
        }
    """
    assert compile(str) != null
}

def #test test_def_fail {
    var str = """
        def foo {}
        def foo {}

        def bar {
            export var foo: int
            export def nested_function {}
        }

        implicit def convert(a: int) -> double {
            return a
        }
        implicit def to_double(a: int) -> double {
            return a
        }

        implicit def convert(a: int, b: double) -> int, double {
            return a, b
        }
    """
    assert compile(str) == null
    assert env.err() == strip_margin("""
        |main@3:13
        |        def foo {}
        |            ^~~
        |Function `foo` was already declared previously (same arguments)
        |
        |main@17:22
        |        implicit def convert(a: int, b: double) -> int, double {
        |                     ^~~~~~~
        |Implicit function can only have one parameter
        |
        |main@17:22
        |        implicit def convert(a: int, b: double) -> int, double {
        |                     ^~~~~~~
        |Implicit function can only have one return type
        |
        |main@6:20
        |            export var foo: int
        |                   ^~~~~~~~~~~~
        |Can't share non top level variable
        |
        |main@7:24
        |            export def nested_function {}
        |                       ^~~~~~~~~~~~~~~
        |Invalid modifier to closure
        |
        |main@10:22
        |        implicit def convert(a: int) -> double {
        |                     ^~~~~~~
        |Duplicate implicit function
        |
        |main@13:22
        |        implicit def to_double(a: int) -> double {
        |                     ^~~~~~~~~
        |Duplicate implicit function\n""")
}

def #test test_def_polymorph {
    var str = """
        def function(type T) -> T {
            var t: T
            return t
        }
        function(int)

        def function2(a: type T) -> T {
            return a
        }
        function2(10)
    """
    assert compile(str) != null
}

def #test test_typedecl {
    var str = """
        type A = int
        type B = A

        var a: B = 0

        type C
        type C = int
    """
    assert compile(str) != null
}

def #test test_generic_type {
    var str = """
        type S(type T) = struct {
            a: T
        }
        type F = S(int)   
    """
    assert compile(str) != null
}

def #test test_typedecl_fail {
    var str = """
        type A = int
        type A = float
        var B = 0
        type B = int
        type module::A
        type module::A = int
    """
    assert compile(str) == null
    assert env.err() == strip_margin("""
        |main@3:9
        |        type A = float
        |        ^~~~~~~~~~~~~~
        |Redeclaration of `A`
        |
        |main@5:9
        |        type B = int
        |        ^~~~~~~~~~~~
        |Redeclaration of `B`
        |
        |main@6:14
        |        type module::A
        |             ^~~~~~~~~
        |Can't declare type in sub scope
        |
        |main@7:14
        |        type module::A = int
        |             ^~~~~~~~~
        |Can't declare type in sub scope\n""")
}

def #test test_struct {
    var str = """
        type A = struct {
            a: int32
            b: int64
            c: int16
            d: int8
        }
        type B = struct {
            a: int8
            b: int16
        }
        type C = struct {
            a: int16
            b: int8
            c: int32
        }
        type D = struct #union {
            a: int8
            b: int32
            c: int64
        }
    """
    let res = compile(str)
    let A = res("body")(0)("right")(0)("type_tag")
    assert A("size").as_double() == 24
    assert A("align").as_double() == 8

    let B = res("body")(1)("right")(0)("type_tag")
    assert B("size").as_double() == 4
    assert B("align").as_double() == 2

    let C = res("body")(2)("right")(0)("type_tag")
    assert C("size").as_double() == 8
    assert C("align").as_double() == 4

    let D = res("body")(3)("right")(0)("type_tag")
    assert D("size").as_double() == 8
    assert D("align").as_double() == 8
}

def #test test_struct_lit {
    let src = """
        type T = struct {
            a: int
            b: int
        }
        let a = [a = 10, b = 20] !T

        let b = 20
        let c = 50
        let d = [a = b, b = c] !T

        type A = struct {
            a: int
        }
        type B = struct {
            b: A
            c: int
        }

        let e = 20
        let f = 50
        let g = [b = [a = e] !A, c = f] !B

        def ret_a -> A {
            return [a = 10]
        }

        let h: A = [a = 10]
        var i: A
        i = [a = 10]

        type C = struct {
            a: int
            b: int
            c: int
        }
        let j = [a = 10] !C
    """
    assert compile(src) != null
}

def #test test_size_of {
    var str = """
        type T = struct {
            a: int
            b: int
        }

        let a = size_of T
        let b = size_of int
        let c = size_of type *
        let d = size_of type_of a
        let e = size_of type_of a + b
    """
    assert compile(str) != null
}

def #test test_align_of {
    var str = """
        type T = struct {
            a: int
            b: int
        }

        let a = align_of T
        let b = align_of int
        let c = align_of type *
        let d = align_of type_of a
        let e = align_of type_of a + b
    """
    assert compile(str) != null
}

def #test test_type_of {
    var str = "
        let a = 20
        let b: (type_of a) = 30

        def some_function(type T) {}

        some_function(type_of a)
    "
    assert compile(str) != null
}

def #test test_import {
    let str = """
        import runtime::module::a

        runtime::module::a::multiply_by_2(4)

        def multiply_by_2(a: int) -> int {
            return a * 2
        }

        multiply_by_2(10)
        multiply_by_2(10.5)
    """
    assert compile(str) != null
}

def #test test_import_fail {
    let str = """
        import test::a as A
        multiply_by_2(10.5)
    """
    assert compile(str) == null
    assert env.err() == strip_margin("
        |main@2:16
        |        import test::a as A
        |               ^~~~~~~
        |Module `test::a` could not be found
        |
        |main@3:9
        |        multiply_by_2(10.5)
        |        ^~~~~~~~~~~~~
        |Function `multiply_by_2` not found. Arguments were of type double\n")
}

def #test test_return {
    let str = """
        def foo -> int {
            return 0
        }
        def bar -> int, bool {
            return 0, true
        }
        def baz -> int, bool {
            return bar()
        }
    """
    assert compile(str) != null
}

def #test test_return_fail {
    let str = """
        def foo -> int, bool {
            return false, 'c'
        }
    """
    assert compile(str) == null
    assert env.err() == strip_margin("
        |main@3:13
        |            return false, 'c'
        |            ^~~~~~~~~~~~~~~~~
        |Wrong type of return argument, got bool, expected int
        |
        |main@3:13
        |            return false, 'c'
        |            ^~~~~~~~~~~~~~~~~
        |Wrong type of return argument, got char, expected bool\n")
}

def #test test_pointers {
    let str = """
        let a = 10
        let b = *a
        let c = @b
    """
    let res = compile(str)

    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "*int"
    assert res("body")(2)("left")(0)("value")("type_tag")("name").as_string() == "int"
}

def #test test_pointers_fail {
    let str = """
        let a = 10
        let b = @a
    """

    assert compile(str) == null
    assert env.err() == strip_margin("
        |main@3:17
        |        let b = @a
        |                ^~
        |Needs to be a pointer or reference type, got int\n")
}

def #test test_ref {
    var str = """
        var a: &int
        var b: &
        b = a

        var c: &int = 20
        var d = c

        var e: &int = 20
        var f = @e

        var g: &int = 20
        var h = g !&float
        var i = g !*int
    """

    let res = compile(str)

    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "&int"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "&"
    assert res("body")(3)("left")(0)("value")("type_tag")("name").as_string() == "&int"
    assert res("body")(4)("left")(0)("value")("type_tag")("name").as_string() == "&int"
    assert res("body")(5)("left")(0)("value")("type_tag")("name").as_string() == "&int"
    assert res("body")(6)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(7)("left")(0)("value")("type_tag")("name").as_string() == "&int"
    assert res("body")(8)("left")(0)("value")("type_tag")("name").as_string() == "&float"
    assert res("body")(9)("left")(0)("value")("type_tag")("name").as_string() == "*int"
}

def #test test_convert {
    var str = """
        let a = 10 !float
        let b = a !int

        let c = 10 !float + 20
        let d = 10 !uint + 20

        let e = 200 !bool
        let f = 1.5 !bool
        let g: *int = null
        let h = g !bool

        let i: int64 = 20
        let j: int16 = 20

        def foo(a: int64) {}
        foo(10)
    """
    let res = compile(str)

    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "float"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(2)("left")(0)("value")("type_tag")("name").as_string() == "float"
    assert res("body")(3)("left")(0)("value")("type_tag")("name").as_string() == "uint"
    assert res("body")(4)("left")(0)("value")("type_tag")("name").as_string() == "bool"
    assert res("body")(5)("left")(0)("value")("type_tag")("name").as_string() == "bool"
    assert res("body")(6)("left")(0)("value")("type_tag")("name").as_string() == "*int"
    assert res("body")(7)("left")(0)("value")("type_tag")("name").as_string() == "bool"
}

def #test test_member_access {
    let str = """
        type T = struct {
            a: int
            b: double
        }
        var foo: T
        let a = foo.a
        let b = foo.b
    """
    let res = compile(str)

    assert res("body")(2)("left")(0)("value")("type_tag")("name").as_string() == "int"
    assert res("body")(3)("left")(0)("value")("type_tag")("name").as_string() == "double"
}

def #test test_array_subscript {
    let str = """
        var a: [4; int]
        let b = a(2)
    """
    let res = compile(str)

    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "[4; int]"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "int"
}

def #test test_array_lit {
    let str = """
        let a = [1, 2, 3, 4]
        let b: [int] = a
    """
    let res = compile(str)

    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "[4; int]"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "[int]"
}

def #test test_array_inference {
    let str = """
        let a: [?; int] = [1, 2, 3, 4]
        let b: [int] = [1, 2, 3, 4]
    """
    let res = compile(str)

    assert res("body")(0)("left")(0)("value")("type_tag")("name").as_string() == "[4; int]"
    assert res("body")(1)("left")(0)("value")("type_tag")("name").as_string() == "[int]"
}

def #test test_array_inference_fail {
    let str = """
        let a: [?; float] = [1, 2, 3, 4]
    """
    assert compile(str) == null
    assert env.err() == strip_margin("
        |main@2:13
        |        let a: [?; float] = [1, 2, 3, 4]
        |            ^~~~~~~~~~~~~
        |Incompatible types [4; int] and [?; float]\n")
}

def #test test_array_size_and_value {
    let str = """
        let a = [1, 2, 3, 4]
        let b: [int] = a
        let c = a.size
        let d = a.value
        let e = b.size
        let f = b.value 
    """
    assert compile(str) != null
}

def #test test_call {
    let str = """
        def demo_function_1
        def demo_function_2(a: int)
        demo_function_1() // empty function
        demo_function_2(42) // function with unnamed parameter
        demo_function_2(a=42) // function with named parameter
    """
    assert compile(str) != null
}

def #test test_call_fail {
    let str = """
        def demo_function_2(a: int)
        demo_function_2(a=42, a=11) // function with named parameter twice

        def no_return
        var a: int
        a = no_return()
    """
    assert compile(str) == null
    assert env.err() == strip_margin("
        |main@3:31
        |        demo_function_2(a=42, a=11) // function with named parameter twice
        |                              ^~~~
        |Cannot have the same parameter name multiple times in a function call. Parameter name was `a`.
        |
        |main@7:9
        |        a = no_return()
        |        ^
        |Incompatible types, can't assign void to int\n")
}

def #test test_yield {
    let str = """
        def some_function -> int {
            yield 20
            yield 30
            return 40
        }
        for var i in some_function() {
            print(i)
        }
    """
    assert compile(str) != null
}

def #test test_yield_from {
    let str = """
        def some_function -> char {
            var str = "some characters"
            yield from str
            yield from str.iterate()
            yield 'A'
        }
        for var i in some_function() {
            print(i)
        }
    """
    assert compile(str) != null
}

def #test test_closure {
    let str = """
        def some_function {
            var a: int = 4
            def inner_function {
                print(a)
                let a_ref = *a
                @a_ref = 20
            }
            inner_function()
        }
    """
    assert compile(str) != null
}

def #test test_closure_fail {
    let str = """
        def some_function {
            export def inner_function {}
            def inner_function(a: int = 20) {}
            def inner_function(a: int...) {}
        }
    """
    assert compile(str) == null
    assert env.err() == strip_margin("
        |main@3:24
        |            export def inner_function {}
        |                       ^~~~~~~~~~~~~~
        |Invalid modifier to closure
        |
        |main@4:32
        |            def inner_function(a: int = 20) {}
        |                               ^~~~~~~~~~~
        |Can't have default parameters for closure
        |
        |main@5:32
        |            def inner_function(a: int...) {}
        |                               ^~~~~~~~~
        |Can't have varargs for closure\n")
}

def #test test_interface {
    let str = """
        type I = interface {
            def a -> int
            def a = (a: int)
            var b: int
        }
    """
    assert compile(str) != null
}

def #test test_variants {
    let str = """
        type S = struct { a: int }
        type T = struct { b: int }
        type X = S | T | int

        let a = [a = 10] !S
        var x: X = a
        print(x.type)
        x = 20
        x = [b = 20] !T
    """
    assert compile(str) != null
}