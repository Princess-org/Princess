import getopt
import vector

def #test test_positional {
    let args = ["test", "some", "arg", "more"]

    var arg1: Str
    var arg2: &[Str]

    let options = [
        option(*arg1, "arg1"),
        option(*arg2, "arg2", 2)
    ]
    let parser = getopt::make_parser(options, "-")
    assert parser.parse(args)
    
    assert arg1 == "some"
    assert arg2(0) == "arg"
    assert arg2(1) == "more"
}

def #test test_longopts {
    let args = [
        "test",
        "--arg1", 
        "--arg2=test", 
        "--arg3", "test", 
        "--arg4", "foo", "bar"
    ]
    
    var arg1: bool
    var arg2: Str
    var arg3: Str
    var arg4: &[Str]
    var arg5: Str = "default"

    let options = [
        option(*arg1, "--arg1"),
        option(*arg2, "--arg2"),
        option(*arg3, "--arg3"),
        option(*arg4, "--arg4", 2),
        option(*arg5, "--arg5")
    ]
    let parser = getopt::make_parser(options, "-")
    assert parser.parse(args)

    assert arg1 == true
    assert arg2 == "test"
    assert arg3 == "test"
    assert arg4(0) == "foo"
    assert arg4(1) == "bar"
    assert arg5 == "default"
}

def #test test_shortopts {
    let args = [
        "test",
        "-ab",
        "-cFoo",
        "-d", "test",
        "-e", "foo", "bar"
    ]

    var arg1 = false
    var arg2 = true
    var arg3: Str
    var arg4: Str
    var arg5: &[Str]

    let options = [
        option(*arg1, "--arg1").set_shortop('a'),
        option(*arg2, "--arg2").set_shortop('b'),
        option(*arg3, "--arg3").set_shortop('c'),
        option(*arg4, "--arg4").set_shortop('d'),
        option(*arg5, "--arg5", 2).set_shortop('e')
    ]
    let parser = getopt::make_parser(options, "-")
    assert parser.parse(args)

    assert arg1 == true
    assert arg2 == false
    assert arg3 == "Foo"
    assert arg4 == "test"
    assert arg5(0) == "foo"
    assert arg5(1) == "bar"
}

def #test test_end_of_parameters {
    let args = [
        "test",
        "foo",
        "--",
        "--baz",
        "--goo"
    ]

    var all: &Vector(Str)

    let options = [
        option(*all, "all")
    ]

    let parser = getopt::make_parser(options, "-")

    assert parser.parse(args)
    assert all.length == 3
    assert all(0) == "foo"
    assert all(1) == "--baz"
    assert all(2) == "--goo"
}