import c::cpreprocess
import c::clexer
import json

def preproc(str: String) -> &Json {
    let tokens = lex(str, "<snippet>")
    preprocess(tokens)
    let res = tokens_to_json(tokens)
    delete(tokens)
    return res
}

def #test test_ident_macros {
    var input = """
        #define NUM 20
        #define TEST NUM
        TEST + NEXT
    """

    assert preproc(input) == json::parse("""[\
        { "kind": "START" },
        { "kind": "PP_NUMBER", "value": "20" },
        { "kind": "OP_ADD", "value": "+" },
        { "kind": "IDENTIFIER", "value": "NEXT" },
        { "kind": "EOF" }
    ]""")

    input = """
        #define stdout stdout
        stdout
    """

    assert preproc(input) ==  json::parse("""[\
        { "kind": "START" },
        { "kind": "IDENTIFIER", "value": "stdout" },
        { "kind": "EOF" }
    ]""")
}

def #test test_undef {
    var input = """
        #define TEST 20
        TEST
        #undef TEST
        TEST
    """

    assert preproc(input) == json::parse("""[\
        { "kind": "START" },
        { "kind": "PP_NUMBER", "value": "20" },
        { "kind": "IDENTIFIER", "value": "TEST" },
        { "kind": "EOF" }
    ]""")
}

def #test test_stringify {
    var input = """
        #define TEST foo
        #define str(a) #a
        str(TEST some    arguments+2)
    """
    
    assert preproc(input)[1] == json::parse("""
        { "kind": "STRING", "value": "TEST some arguments+2" }
    """)
}

def #test test_fun_macro {
    var input = """
        #define TEST foo
        #define m(a) a
        m(TEST)
    """

    assert preproc(input) == json::parse("""[\
        { "kind": "START" },
        { "kind": "IDENTIFIER", "value": "foo" },
        { "kind": "EOF" }
    ]""")
    
    input = """
        #define f(a) a*g
        #define g(a) f(a)
        f(1)(2)(3)
    """

    assert preproc(input) == json::parse("""[\
        { "kind": "START" },
        { "kind": "PP_NUMBER", "value": "1" },
        { "kind": "OP_MUL", "value": "*" },
        { "kind": "PP_NUMBER", "value": "2" },
        { "kind": "OP_MUL", "value": "*" },
        { "kind": "IDENTIFIER", "value": "g" },
        { "kind": "O_PAREN", "value": "(" },
        { "kind": "PP_NUMBER", "value": "3" },
        { "kind": "C_PAREN", "value": ")" },
        { "kind": "EOF" }
    ]""")
}

def #test test_x_macro {
    var input = """
        #define LIST_OF_VARIABLES \
            X(value1) \
            X(value2) \
            X(value3)

        #define X(name) int name;
        LIST_OF_VARIABLES
        #undef X
    """

    assert preproc(input) == json::parse("""[\
        {"kind": "START" }, 
        {"kind": "IDENTIFIER","value": "int" },
        {"kind": "IDENTIFIER","value": "value1" },
        {"kind": "SEMICOLON","value": ";" },
        {"kind": "IDENTIFIER","value": "int" },
        {"kind": "IDENTIFIER","value": "value2" },
        {"kind": "SEMICOLON","value": ";" },
        {"kind": "IDENTIFIER","value": "int" },
        {"kind": "IDENTIFIER","value": "value3" },
        {"kind": "SEMICOLON","value": ";" },
        {"kind": "EOF" }
    ]""")
    
}