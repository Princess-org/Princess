import common
import map

// TODO these tests don't nearly cover all cases
def #test test_map_simple {
    let m = map::make(int)
    m("foo") = 20
    m("bar") = 50

    assert map::size(m) == 2
    assert m("foo") == 20
    assert m("bar") == 50
    
    map::remove(m, "foo")
    assert map::size(m) == 1
    assert not map::get(m, "foo").exists
}

def #test test_map_collision {
    let m = map::make(int)
    m("JUvEoj") = 20
    m("JVVdoj") = 50

    assert map::size(m) == 2
    assert m("JUvEoj") == 20
    assert m("JVVdoj") == 50

    map::remove(m, "JVVdoj")
    assert map::size(m) == 1
    assert not map::get(m, "JVVdoj").exists
}

def #test test_map_resize {
    let m = map::make(int, 2)
    m("1") = 1
    m("2") = 2
    m("3") = 3
    m("4") = 4

    assert map::size(m) == 4

    assert m("1") == 1
    assert m("2") == 2
    assert m("3") == 3
    assert m("4") == 4
}

def is_in(array: &[Str], key: String) -> bool {
    for var i in 0..array.size {
        let value = array(i)
        if value == key {
            return true
        }
    }
    return false
}

def #test test_map_keys {
    let m = map::make(int)
    m("JUvEoj") = 20
    m("JVVdoj") = 50
    m("foo") = 0
    m("bar") = 1

    let keys = map::keys(m)
    assert keys.size == 4
    assert is_in(keys, "JUvEoj")
    assert is_in(keys, "JVVdoj")
    assert is_in(keys, "foo")
    assert is_in(keys, "bar")
}