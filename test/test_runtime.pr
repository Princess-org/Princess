import common

def #test test_vector {
    assert run_file(test_file("test_vector")) == 0
    assert env.out() == strip_margin("\
        |Destructing Vector
        |0 20 30 40 
        |Destructing S: 40
        |Destructing S: 30
        |Destructing S: 20
        |Destructing S: 0
        |Destructing Vector
        |Destructing Vector
        |Destructing S: 20
        |Destructing S: 30
        |Destructing S: 40
        |Destructing S: 0\n"
    )
}

def #test test_expr_eval {
    assert run_file(test_file("test_expr_eval")) == 0
}

def #test test_loop {
    let src = """
        def test_loop {
            var cnt = 0
            while cnt < 10 {
                print(cnt)
                cnt += 1
            }
            print("\n")

            for var i in 0..10 {
                print(i)
            }
            print("\n")

            let foo: *int = null
            while foo != null {
                @foo = 10
            }

            for var i in 0..10 {
                if i == 5 { continue }
                print(i)
            }
            print("\n")
        }
        test_loop
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |0123456789
        |0123456789
        |012346789\n"
    )
}

def #test test_import {
    assert run_file(test_file("test_imports")) == 0
    assert env.out() == "0\n"    
}

def #test test_print {
    let src = """
        type Point = struct {
            x: int
            y: int
        }

        def test_print {
            let a = 20
            let b = 0xDEADBABE !*
            print("Hello World ", 1, " ", 'x', " ", 10.5, " ", b, "\n")
            error("Hello World ", 1, " ", 'x', " ", 10.5, " ", b, "\n")

            let point: Point = {10, 20}
            print(point, "\n")

            let array = [1, 2, 3, 4]
            print(array, "\n")
        }
        test_print
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |Hello World 1 x 10.500000 0xdeadbabe
        |{x = 10, y = 20} !main::Point
        |[1, 2, 3, 4]\n"
    )
    assert env.err() == strip_margin("\
        |Hello World 1 x 10.500000 0xdeadbabe\n"
    )
}

def #test test_function_calls {
    let src = """
        def pass_dynamic_array(a: string) {
            print(a)
        }

        def function(a: int, b: double) -> double { return a * b }
        def function(b: double, a: int) -> double { return a * b }
        def function -> int { return 10 }

        def test_function_calls {
            pass_dynamic_array("Some string\n")
            pass_dynamic_array(a = "Named parameter\n")

            function(2, 1.5)
            function(1.5, 2)
            function(2, b = 1.5)
            function(1.5, a = 2)
            // function(a = 1, b = 1.5) # Ambiguous reference

            assert function == 10
        }
        test_function_calls
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |Some string
        |Named parameter\n"
    )
}

def #test test_length {
    let src = """
        def test_length {
            let a = "Some string"
            assert length(a) == 11
            assert a.length == 11
        }
        test_length
    """
    assert run_source(src) == 0
}

def #test test_allocate {
    let src = """
        def test_allocate {
            let a = allocate(size_of int) !*int
            @a = 10
            assert @a == 10
            free(a)

            let b = allocate(int)
            @b = 20
            assert @b == 20
            free(b)

            let c = allocate(int, 10)
            c[0] = 10
            c[9] = 20
            assert c[0] == 10
            assert c[9] == 20
            free(c)
        }
        test_allocate
    """
    assert run_source(src) == 0
}

def #test test_file_binary {
    let src = """
        def test_file_binary {
            mkdir("tmp")
            let fp = open("tmp/test_file_io_binary", "wb+")
            
            let str = "Some text"
            write(fp, str)
            let i = 10
            write(fp, *i)

            rewind(fp)

            var str2: [10; char]
            read(fp, str2)
            print(str2, "\n")

            var i2: int
            read(fp, *i2)
            print(i2, "\n")

            close(fp)
        }
        test_file_binary
    """
    assert run_source(src) == 0
}

def #test test_file_text {
    let src = """
        def test_file_text {
            mkdir("tmp")
            let fp = open("tmp/test_file_io_text", "w+")

            fprint(fp, "This is a test\n", 10)

            seek(fp, 0, SEEK_SET) // Same as rewind

            var buffer: [20; char]
            read_line(fp, buffer)
            print(buffer)
            var num: int
            cstd::fscanf(fp, "%d".value, *num)
            print(num, "\n")

            close(fp)
        }
        test_file_text
    """
    assert run_source(src) == 0
}

def #test test_operators {
    // TODO We need to test a lot more
    let src = """
        def test_operators {
            let g = true and false
            let h = true and true
            let i = false and true
            assert not g
            assert h
            assert not i
        }
        test_operators
    """
    assert run_source(src) == 0
}

def #test test_enum {
    let src = """
        type Enum = enum {
            A = 10;
            B; C; D
        }

        type Enum2 = enum {
            A = 10
            B = A
            C
        }

        def pass_enum(a: Enum) {}

        def test_enum {
            assert Enum::A == 10
            assert Enum::B == 11
            pass_enum(Enum::A)
            let a = Enum::A !int
            let b = 10 !Enum
            pass_enum(b)

            print(to_string(Enum::A), "\n")
            print(Enum::B, "\n")
        }
        test_enum
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |A
        |11\n"
    )
}

def #test test_function_pointers {
    let src = """
        def some_function {
            print("Hello\n")
        }

        def test_function_pointers {
            let function = *some_function
            function()
        }
        test_function_pointers
    """
    assert run_source(src) == 0
    assert env.out() == "Hello\n"
}

def #test test_structs {
    let src = """
        type Struct = struct {
            a: &string
            b: int
            c: char
        }

        def test_structs {
            let s = {
                c = 10
            } !Struct
            assert s.a == null
            assert s.c == 10
            assert s.b == 0
        }
        test_structs
    """
    assert run_source(src) == 0
}

def #test test_unions {
    let src = """
        type Union = struct #union {
            a: string
            b: long
            c: int
        }

        def test_unions {
            let u = {
                "some string"
            } !Union
            print(u, "\n")

            let u2 = {
                b = 20
            } !Union
            u2.b = 120
            print(u2.c, "\n")

            let u3 = {} !Union
        }
        test_unions
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |{a = some string, b = 12, c = 12} !main::Union
        |120\n"
    )
}

def #test test_generic_type {
    let src = """
        type S(type T) = struct {
            t: T
        }
    
        def test_generic_type {
            let s = {10} !S(int)
            assert (type_of s.t) == int
        }
        test_generic_type
    """
    assert run_source(src) == 0
}

def #test test_strings {
    let src = """
        def test_strings {
            let stra = "Some value"
            assert stra == "Some value"
            assert stra != "Other value"
        }
        test_strings
    """
    assert run_source(src) == 0
}

def #test test_if_stmts {
    let src = """
        def test_if_stmts {
            if false {
                print("false\n")
            } else if starts_with("foo", "f") {
                print("true\n")
            } else {
                print("false\n")
            }
        }
        test_if_stmts
    """
    assert run_source(src) == 0
    assert env.out() == "true\n"
}

def #test test_recursion {
    let src = """
        def fact(n: int) -> int {
            if n <= 1 { return 1 }
            else {
                return n * fact(n - 1)
            }
        }

        def test_recursion {
            assert fact(10) == 3628800
        }
        test_recursion
    """
    assert run_source(src) == 0
}

def #test test_scoping {
    let src = """
        def test_scoping {
            var a = 10
            if true {
                assert a == 10
                a = 15
                var a = 20
                assert a == 20
            }
            assert a == 15
        }
    """
    assert run_source(src) == 0
}

def #test test_arrays {
    let src = """
        def pass_array(a: [int]) {
            for var i in 0..a.size {
                print(a[i], " ")
            }
            print("\n")
        }

        def test_arrays {
            let a = [10, 20, 30]
            let b = [] ![int]
            pass_array(a)
            pass_array(b)
        }
        test_arrays
    """
    assert run_source(src) == 0
    assert env.out() == "10 20 30 \n\n"
}

def #test test_deref {
    let src = """
        type Struct2 = struct {
            a: int
            t: *Struct2
        }

        def test_deref {
            let s = allocate(Struct2)
            s.a = 10
            s.t = allocate(Struct2)
            s.t.a = 20
            print(s.a, " ", s.t.a, "\n")
        }
        test_deref
    """
    assert run_source(src) == 0
    assert env.out() == "10 20\n"
}

def #test test_ucs {
    let src = """
        type Struct2 = struct {
            a: int
            t: *Struct2
        }

        def function(s: Struct2) -> int { return s.a }
        def function(s: Struct2, a: int) -> int { return s.a + a }
        def inc(a: int) -> int { return a + 1}

        def test_ucs {
            let s: Struct2 = { 10, null }
            
            assert s.function() == 10
            assert s.function.inc == 11
            assert s.function(10).inc() == 21
        }
        test_ucs
    """
    assert run_source(src) == 0
}

def #test test_anonymous {
    let src = """
        type Struct3 = struct {
            a: int
            b: struct {
                c: int
                d: int
            }
            struct #union {
                e: int64
                f: double
            }
        }

        def test_anonymous {
            var s: Struct3
            s = {10, {20, 30}}
            s.a = 10
            s.b = {20, 30}
            s.e = 0x4034800000000000

            print(s.f, "\n")
        }
        test_anonymous
    """
    assert run_source(src) == 0
    assert env.out() == "20.500000\n"
}

def #test test_varargs {
    let src = """
        def sum(args: int...) -> int {
            var sum = 0
            for var i in 0..args.size {
                sum += args[i]
            }
            return sum
        }

        def my_print(args: string...) {
            for var i in 0..args.size {
                print(args[i], " ")
            }
            print("\n")
        }

        def test_varargs {
            assert sum(1, 2, 3) == 6
            assert sum([1, 2, 3]) == 6
            my_print("foo", "bar", "baz")
        }
        test_varargs
    """
    assert run_source(src) == 0
    assert env.out() == "foo bar baz \n"
}

def #test test_if_expression {
    let src = """
        type Struct = struct {
            a: &string
            b: int
            c: char
        }

        def test_if_expression {
            // TODO I've seen these fail but I can't quite pin down what's wrong with them
            var a = 10 if 10 > 20 else 20
            assert a == 20
            var b: int
            @(*a if 10 > 20 else *b) = 30
            assert b == 30

            let c = { c = 10 } !Struct
            let d = { c = 0 } !Struct if 10 > 20 else c
            assert d.c == 10
        }
        test_if_expression
    """
    assert run_source(src) == 0
}

def #test test_default_parameters {
    let src = """
        def takes_default_param(a: int = 0, b: string = "some value") {
            print(a, " ", b, "\n")
        }

        def test_default_parameters {
            takes_default_param()
            takes_default_param(10)
            takes_default_param(20, "Hello world!")
        }
        test_default_parameters
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |0 some value
        |10 some value
        |20 Hello world!\n"
    )
}

def #test test_function_overloads {
    let src = """
        def function(a: int, b: double) -> double { return a * b }
        def function(b: double, a: int) -> double { return a * b }
        def function -> int { return 10 }

        def test_function_overloads {
            let f1 = *function::()
            let f2 = *function::(int, double)
            let f3 = *function::(double, int)

            assert f1() == 10
            assert f2(10, 10.5) == 105
            assert f3(10.5, 10) == 105
        }
        test_function_overloads
    """
    assert run_source(src) == 0
}

def #test test_underscore {
    let src = """
        def test_underscore {
            let _, _ = 10, 20
            assert _ == 20
            _ = "Hello World!"
            assert _ == "Hello World!"
        }
        test_underscore
    """
    assert run_source(src) == 0
}

def #test test_def_polymorph {
    let src = """
        type Struct = struct {
            a: &string
            b: int
            c: char
        }

        def function(type T) -> size_t {
            return T.size
        }

        def add(a: type T, b: T) -> T {
            return a + b
        }

        def test_def_polymorph {
            assert function(int) == 4
            assert function(Struct) == 32

            assert add(10, 10) == 20
            assert add(10.5, 20.5) == 31.0
        }
        test_def_polymorph
    """
    assert run_source(src) == 0
}

def #test test_type_of {
    let src = """
        def test_type_of {
            let a = 20
            let b: (type_of a) = 30
            type T = type_of a

            assert T == int
            assert (type_of b) == int
        }
        test_type_of
    """
    assert run_source(src) == 0
}

def #test test_reflection {
    assert run_file(test_file("test_reflection")) == 0
}

def #test test_yield {
    let src = """
        def range_for(a: int, b: int) -> int {
            for var i in a..b {
                yield i
            }
        }

        def range_while(a: int, b: int) -> int {
            var i = a
            while i < b {
                yield i
                i = i + 1
            }
        }

        def test_yield {
            for var i in range_for(0, 10) {
                print(i, " ")
            }
            print("\n")

            for var i in range_while(0, 10) {
                print(i, " ")
            }
            print("\n")
        }
        test_yield
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |0 1 2 3 4 5 6 7 8 9 
        |0 1 2 3 4 5 6 7 8 9 \n"
    )
}

def #test test_yield_from {
    let src = """
        def generator -> char {
            let str = "some string"
            yield from str
            yield 'A'
            yield 'B'
            yield 'C'
            yield from str.iterate()
        }
        
        def test_yield_from {
            for var c in generator() {
                print(c)
            }
            print("\n")
        }
        test_yield_from
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |some stringABCsome string\n"
    )
}

def #test test_generators {
    let src = """
        type Struct5 = struct {
            a: int; b: int; c: int
        }

        def iterate(s: *Struct5) -> int {
            yield s.a
            yield s.b
            yield s.c
        }

        def test_generators {
            let s = { 10, 20, 30 } !Struct5

            for var i in *s {
                print(i, " ")
            }
            print("\n")
        }
        test_generators
    """
    assert run_source(src) == 0
    assert env.out() == strip_margin("\
        |10 20 30 \n"
    )
}

def #test test_closures {
    let src = """
        def test_closures {
            def inner(a: int) -> int {
                def inner -> int {
                    return a
                }
                return inner()
            }
            assert inner(10) == 10

            var a = 20
            var b = 30
            def capture {
                assert a == 20
                let local = *b
                @local = 40
                assert @local == 40
            }
            capture()
            assert b == 40
        }
        test_closures
    """
    assert run_source(src) == 0
}

def #test test_inline {
    let str = """
        def add(a: int, b: int) -> int {
            return a + b
        }
        def #inline add_inline(a: int, b: int) -> int {
            return a + b
        }

        def test_inline {
            let a = add_inline(10, 20)
            assert a == 30
            let b = add(10, 20)
            assert b == 30
            let c = #inline add(10, 20)
            assert c == 30
            let d = #no_inline add_inline(10, 20)
            assert d == 30
        }
        test_inline
    """
    assert run_source(str) == 0
}