import cpreprocess
import typechecking
import parser
import vector

type Node = interface {
    var tpe: &typechecking::Type
    def typecheck
    //def convert -> &parser::Node
}

def eval(node: &Node) -> int64 {
    if ref_type(node).implements(Constexpr) {
        return (node !&Constexpr).eval()
    }
    return 0
}

type Constexpr = interface {
    def eval -> int64
}

type Program = struct {
    tpe: &typechecking::Type
    body: &Vector(&Node)
}

def typecheck(program: &Program) {
    for var node in program.body {
        typecheck(node)
    }
}

type BinaryOp = interface {
    def left -> &Node
    def right -> &Node
}

def typecheck(binop: &BinaryOp) {
    // TODO
}

type Add = struct { tpe: &typechecking::Type; left: &Node; right: &Node }
type Sub = struct { tpe: &typechecking::Type; left: &Node; right: &Node }
type Mul = struct { tpe: &typechecking::Type; left: &Node; right: &Node }
type Div = struct { tpe: &typechecking::Type; left: &Node; right: &Node }

// Parser implementation
export def parse(tokens: *TokenList) -> &Node {
    let program = { body = vector::make(type &Node) } !&Program
    let add: &Node = {} !&Add
    program.body.push(add)

    return program
}