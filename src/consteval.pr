// This scans a file and predeclares every type, function and variable
// It is resonsible for setting up the scopes for the tree
// It also evaluates constant expressions and static ifs

import vector
import map
import set
import builtins
import toolchain
import scope
import parser
import typechecking
import compiler
import util
import debug
import errors

export let const_module = toolchain::make_module(
    filename = null,
    modulename = "const",
    node = null,
    scpe = scope::enter_function_scope(builtins::builtins, null),
)

export var is_static = false
// This is for compiling expressions
export let compiler_state = compiler::make_state(const_module)

const_module.scope.module = const_module
const_module.state = typechecking::make_state(const_module)
const_module.compiler_state = compiler_state

import eval

export def make_value(value: compiler::Value) -> &scope::Value {
    let svalue = [
        value = value,
        tpe = value.tpe
    ] !&scope::Value
    return svalue
}

// If we store the state we need to create a permanent copy
export def copy_state(state: &typechecking::State) -> &typechecking::State {
    let new_state: &typechecking::State = @state
    new_state.function_stack = vector::copy(state.function_stack)
    return new_state
}

def set_current_function -> &compiler::Function {
    let block = compiler::make_block()
    var is_compiled = false
    let previous_function = compiler_state.current_function()
    if previous_function {
        is_compiled = previous_function.is_compiled
    }
    let function = [
        name = "main",
        unmangled = "main",
        forward_declare = true,
        allocas = vector::make(type &compiler::Insn),
        block = block,
        function_locals = set::make(),
        used_type_meta = set::make(type &typechecking::Type),
        is_compiled = is_compiled
    ] !&compiler::Function
    compiler_state.function_stack.push(function)
    compiler_state.current_block = block

    return function
}

export def expr(node: &parser::Node, state: &typechecking::State) -> compiler::Value {
    if not node { return compiler::NO_VALUE }
    walk(node.parent, node, state)
    let previous_block = compiler_state.current_block
    let function = set_current_function()
    typechecking::walk(node.parent, node, state)
    walk(node.parent, node, state)
    var result = compiler::walk_expression(node, compiler_state)
    vector::insert(function.block.insn, 0, function.allocas)
    let estate = eval::eval(compiler_state)
    result = eval::get_value(result, estate)
    compiler_state.function_stack.pop()
    compiler_state.current_block = previous_block
    return result
}

export def boolean_expr(node: &parser::Node, state: &typechecking::State) -> compiler::Value {
    if not node { return compiler::NO_VALUE }
    walk(node.parent, node, state)
    let previous_block = compiler_state.current_block
    let function = set_current_function()
    typechecking::walk(node.parent, node, state)
    walk(node.parent, node, state)
    var result = compiler::walk_expression(node, compiler_state)
    result = compiler::convert_to(node, result, builtins::bool_, compiler_state)
    vector::insert(function.block.insn, 0, function.allocas)
    let estate = eval::eval(compiler_state)
    result = eval::get_value(result, estate)
    compiler_state.function_stack.pop()
    compiler_state.current_block = previous_block
    return result
}

def walk_IfExpr(node: &parser::Node, state: &typechecking::State) {
    state.scope = scope::enter_scope(state.scope)
    walk(node, node.value.if_expr.if_true, state)
    state.scope = scope::exit_scope(state.scope)

    walk(node, node.value.if_expr.cond, state)

    state.scope = scope::enter_scope(state.scope)
    walk(node, node.value.if_expr.if_false, state)
    state.scope = scope::exit_scope(state.scope)
}

def walk_StaticIf(node: &parser::Node, state: &typechecking::State) {
    let prev_is_static = is_static
    is_static = true
    var result = boolean_expr(node.value.if_.cond, state)
    is_static = prev_is_static

    var body: &Vector(&parser::Node) = null
    if result.i {
        body = node.value.if_.body
    } else {
        for var i in 0..vector::length(node.value.if_.else_if) {
            let else_if = node.value.if_.else_if(i)
            
            let prev_is_static = is_static
            is_static = true
            result = boolean_expr(else_if.value.else_if.cond, state)
            is_static = prev_is_static

            if result.i { 
                body = else_if.value.else_if.body
                break
            }
        }
        let else_ = node.value.if_.else_
        if not result.i and else_ {
            body = else_.value.body
        }
    }
    
    let index = node.parent.body.index_of(node)
    vector::remove(node.parent.body, index)
    if body {
        body = vector::copy(body)
        vector::insert(node.parent.body, index, body)
        for var i in 0..vector::length(body) {
            walk(node.parent, body(i), state)
        }
    }
}

def walk_Import(node: &parser::Node, state: &typechecking::State) {
    let imports = (@node).value.body
    for var i in 0..vector::length(imports) {
        let imprt = imports(i)
        var name = (@imprt).value.import_module.name
        if not name { return }

        var alias = (@imprt).value.import_module.alias
        if not alias {
            alias = name
        }
        
        state.module.imports.add(toolchain::identifier_to_path(name))
        let module = toolchain::consteval_module(name, state.module)
        toolchain::progress_update(state.module, ProgressUpdate::CONTINUE)

        if not module {
            errors::errorn(name, "Module `", parser::identifier_to_str(name), "` could not be found")
            return
        }
        name.svalue = scope::insert_module(state.scope, alias, module)
    }
    compiler::predeclare_functions(state.module)
}

def walk_From(node: &parser::Node, state: &typechecking::State) {
    let module = node.value.from_.module
    let imprt = scope::get(state.scope, module, force_compile = false, dry_run = true)
    if not imprt or not imprt.tpe or imprt.tpe.kind != typechecking::TypeKind::NAMESPACE {
        errors::errorn(module, "Can't find module `", parser::identifier_to_str(module), "`, did you forget to import it?")
    }
    let mod = toolchain::consteval_module(module, state.module)
    for var i in 0..node.value.from_.idents.length {
        var ident = node.value.from_.idents(i)
        if ident.kind == parser::NodeKind::STAR {
            ident = null
        } else {
            typechecking::lookup_identifier_types(ident, state)
        }
        scope::insert_re_export(state.scope, ident, mod)
    }
}

export def evaluate_parameter(node: &parser::Node, param: &parser::Node, tpe: &typechecking::Type, state: &typechecking::State) -> &compiler::Value {
    var value: &compiler::Value = null
    if param.value.param.value {
        // Set up temporary scope
        let prev_scope = compiler_state.module.scope
        let temp_scope = scope::enter_scope(state.module.scope)

        compiler_state.scope = temp_scope
        let previous_block = compiler_state.current_block
        let function = set_current_function()
        typechecking::walk(node, param.value.param.value, state)
        var result = compiler::walk_expression(param.value.param.value, compiler_state)
        vector::insert(function.block.insn, 0, function.allocas)
        let gvalue = compiler::make_global_value(result.tpe, "default_param", null, compiler_state)
        let estate = eval::eval(compiler_state)
        result = eval::get_value(result, estate)
        
        compiler_state.scope = prev_scope

        if result.kind != compiler::ValueKind::NULL {
            eval::set_value(gvalue, result, estate)

            let global = eval::serialize_value(gvalue.name, state.module, compiler_state)
            if global.value {
                value = global.value

                if not typechecking::is_assignable(tpe, value.tpe, state.module) {
                    errors::errorn(param.value.param.value, debug::type_to_str(value.tpe), " is not assignable to ", debug::type_to_str(tpe))
                }
            } else {
                global.private = false
                value = [ kind = compiler::ValueKind::GLOBAL, tpe = typechecking::pointer(global.tpe), name = global.name ] !&compiler::Value

                if not typechecking::is_assignable(tpe, global.tpe, state.module) {
                    errors::errorn(param.value.param.value, debug::type_to_str(global.tpe), " is not assignable to ", debug::type_to_str(tpe))
                }
            }
        } else {
            if typechecking::is_pointer(tpe) {
                value = [ kind = compiler::ValueKind::NULL, tpe = tpe ] !&compiler::Value
            } else if typechecking::is_ref(tpe) {
                let values = zero_allocate(compiler::Value, 3)
                values(0) = [ kind = compiler::ValueKind::NULL, tpe = pointer(builtins::int64_) ] !compiler::Value
                values(1) = [ kind = compiler::ValueKind::NULL, tpe = pointer(tpe.tpe) ] !compiler::Value
                values(2) = [ kind = compiler::ValueKind::NULL, tpe = pointer(builtins::Type_) ] !compiler::Value

                value = [ kind = compiler::ValueKind::STRUCT, tpe = tpe, values = values ] !&compiler::Value  
            } else {
                errors::errorn(param.value.param.value, "Can only assign null to a pointer or reference")
            }
        }
        compiler_state.function_stack.pop()
        compiler_state.current_block = previous_block
    }
    return value
}

def unwrap_type_def(tpe: &typechecking::Type) -> &typechecking::Type {
    if not tpe { return tpe }
    if tpe.kind != typechecking::TypeKind::TYPE_DEF { return tpe }

    var res = copy(tpe.tpe)
    tpe = res
    while is_box(tpe) {
        tpe = tpe.tpe
    }
    if tpe and tpe.kind == typechecking::TypeKind::STUB {
        @tpe = @make_type_raw(typechecking::TypeKind::TYPE)
    }

    return res
}

export def walk_Def(node: &parser::Node, state: &typechecking::State) {
    let share = node.value.def_.share
    let name = node.value.def_.name
    let params = node.value.def_.params
    let returns = node.value.def_.returns
    let extern = node.value.def_.extern
    let dllimport = node.value.def_.dllimport
    let dllexport = node.value.def_.dllexport
    let test = node.value.def_.test
    let impl = node.value.def_.impl
    let has_yield = node.value.def_.has_yield

    var body = node.value.def_.body
    let imported = (share !int & parser::ShareMarker::IMPORT !int) != 0
    let exported = (share !int & parser::ShareMarker::EXPORT !int) != 0

    if not name { return }

    let parameter_t = vector::make(typechecking::NamedParameter)
    let return_t = vector::make(type &typechecking::Type)

    if test {
        parameter_t.push([
            kw = parser::VarDecl::LET,
            name = "env",
            _tpe = pointer(builtins::TestEnvironment_)
        ] !NamedParameter)
    }

    if impl {
        if params.length != 1 {
            errors::errorn(name, "Implicit function can only have one parameter")
        }
        if returns.length != 1 {
            errors::errorn(name, "Implicit function can only have one return type")
        }
    }

    for var i in 0..vector::length(params) {
        let param = params(i)
        assert param.kind == parser::NodeKind::PARAMETER

        var tpe: &typechecking::Type = null
        if param.value.param.kw == parser::VarDecl::TYPE {
            tpe = typechecking::copy(builtins::type_)
            if not param.value.param.name { continue }
            tpe.type_name = tpe.name = scope::last_path_element(param.value.param.name)
        } else {
            tpe = typechecking::type_lookup(param.value.param.tpe, state, null, true)
        }

        var value: &compiler::Value
        if param.value.param.value {
            value = [] !&compiler::Value // Set the value to satisfy overload resolution
        }

        let name = param.value.param.name
        parameter_t.push([
            kw = param.value.param.kw,
            name = last_ident_to_str(name),
            _tpe = tpe,
            varargs = (@param).value.param.varargs,
            node = name,
            value = value,
            type_node = param.value.param.tpe
        ] !typechecking::NamedParameter)
    }
    for var i in 0..vector::length(returns) {
        let n = returns(i)
        let tpe = typechecking::type_lookup(n, state, null, true)
        return_t.push(tpe)
    }

    let tpe = typechecking::make_function_type_n(name, parameter_t, return_t, state.module, extern, test = test)
    tpe.node = node
    let current_function = errors::current_function
    let current_signature = errors::current_signature
    errors::current_function = tpe.type_name
    errors::current_signature = node.signature_hash

    if body {
        node.inner_scope = scope::enter_function_scope(state.scope)
    }

    var function = node.value.def_.function

    if state.function_stack.length <= 1 {
        if function {
            node.svalue = scope::create_function(state.scope, name, function.value)
        } else {
            if body {
                node.svalue = scope::create_function(state.scope, name, share, tpe, scope::Phase::DEFINED, node, copy_state(state), impl = impl)
            } else {
                node.svalue = scope::create_function(state.scope, name, share, tpe, scope::Phase::DECLARED, node, null)
            }
        }
        if node.svalue {
            node.svalue.imported = imported
        }
    }

    name.svalue = node.svalue

    if not function {
        function = [
            tpe = tpe,
            module = state.module,
            locals = map::make(type &typechecking::Type),
            unmangled = parser::identifier_to_str(name),
            is_closure = node.parent.kind != parser::NodeKind::PROGRAM,
            scope = state.scope,
            inner_scope = node.inner_scope,
            captures = vector::make(type weak_ref(scope::Value)),
            dllimport = dllimport,
            dllexport = dllexport or test,
            test = test,
            imported = imported
        ] !&compiler::Function
        node.value.def_.function = function
    }
    function.has_yield = has_yield

    if has_yield {
        let generator_ctor = typechecking::type_lookup(parser::make_identifier("Generator"), state, lookup_default = true)
        var generator = [ kind = typechecking::TypeKind::GENERIC ] !&typechecking::Type
        generator.tc_incomplete = true
        generator.tc_args = vector::make(type &typechecking::Type)
        generator.tc_args.push(tpe.return_t(0))
        generator.tc_tpe = generator_ctor
        generator._tpe = generator_ctor // TODO This is a bit dodgy

        tpe.return_t = vector::make(type &typechecking::Type)
        tpe.return_t.push(reference(generator))
        let name = typechecking::append_module(tpe.name, state.module.module)
        tpe.type_name = typechecking::mangle_function_name(name, tpe.parameter_t)
    }

    // TODO Move this to typechecking maybe
    if vector::length(tpe.parameter_t) > 0 {
        let first_param = tpe.parameter_t(0)
        typechecking::create_type_entry(unwrap_type_def(first_param.tpe), exported, tpe, state.module)

        let type_constructor = typechecking::get_type_constructor(first_param.tpe)
        if type_constructor and type_constructor.cache {
            let type_name = debug::type_to_str(first_param.tpe, full_name = true)
            if not map::contains(type_constructor.cache, type_name) {
                typechecking::generate_concrete_functions(type_constructor, first_param.tpe, state)
                type_constructor.cache(type_name) = first_param.tpe
            } 
        }    
    }

    errors::current_function = current_function
    errors::current_signature = current_signature
    node.tpe = tpe
}

export def walk_TypeDecl(node: &parser::Node, state: &typechecking::State) {
    let share = node.value.type_decl.share
    let left = node.value.type_decl.left
    let right = node.value.type_decl.right

    node.value.type_decl.children = vector::make(type &parser::Node)

    let current_signature = errors::current_signature
    errors::current_signature = node.signature_hash
    defer errors::current_signature = current_signature

    let parent = node.parent
    for var i in 0..vector::length(left) {
        let left = left(i)
        var name = left
        if not name { continue }
        if name.kind == parser::NodeKind::TYPE_CONSTRUCTOR {
            name = left.value.type_constructor.name
        }

        var value: &parser::Node = null
        if i < vector::length(right) {
            value = right(i)
        }
        var tpe: &typechecking::Type

        if vector::length(name.value.identifier.path) > 1 {
            errors::errorn(name, "Can't declare type in sub scope")
            return
        }

        let typedef = [ kind = parser::NodeKind::TYPE_DECL, loc = node.loc, parent = node.parent, scope = state.scope ] !&parser::Node
        typedef.value.type_decl.share = share
        typedef.value.type_decl.left = vector::make(type &parser::Node)
        typedef.value.type_decl.left.push(left)
        typedef.value.type_decl.right = vector::make(type &parser::Node)
        typedef.value.type_decl.right.push(value)
        typedef.value.type_decl.doc = node.value.type_decl.doc
        parser::hash_type_decl(typedef)

        node.value.type_decl.children.push(typedef)

        if value {
            if value.kind == parser::NodeKind::ENUM_T {
                tpe = typechecking::copy(typechecking::type_lookup(value, state))
                tpe.name = parser::identifier_to_str(name)
                tpe.type_name = typechecking::append_module(tpe.name, value.loc.module)

                var constant: int64 = 0
                // Create all the constants
                state.scope = scope::enter_scope(state.scope)
                for var i in 0..vector::length(value.value.t_enum.body) {
                    let iddecl = value.value.t_enum.body(i)
                    if iddecl.value.id_decl_enum.value {
                        constant = expr(iddecl.value.id_decl_enum.value, state).i
                    }

                    let c = [ kind = compiler::ValueKind::INT, tpe = tpe.tpe, i = constant ] !&compiler::Value
                    scope::create_variable(state.scope, iddecl.value.id_decl_enum.ident, 
                        share, parser::VarDecl::CONST, tpe, c)

                    constant += 1
                }

                value.scope = state.scope
                tpe.scope = state.scope
                state.scope = scope::exit_scope(state.scope)

                // Create to_string function
                let parameter_t = vector::make(typechecking::NamedParameter)
                let return_t = vector::make(type &typechecking::Type)
                parameter_t.push([ name = "enum", _tpe = tpe] !typechecking::NamedParameter)
                return_t.push(builtins::string_)

                let ident = parser::make_identifier("to_string")
                let ftpe = typechecking::make_function_type_n(ident, parameter_t, return_t)
                let v = scope::create_function(state.scope, ident, parser::ShareMarker::EXPORT, ftpe)
                v.identifier = ident
                left.svalue = scope::create_type(state.scope, name, share, tpe, scope::Phase::DEFINED, null, null)
            } else {
                tpe = typechecking::make_type(typechecking::TypeKind::STUB, name)
                tpe.node = value
                tpe.module = state.module
                left.svalue = scope::create_type(state.scope, name, share, tpe, scope::Phase::DEFINED, typedef, copy_state(state))
            }
            value.tpe = tpe
        } else {
            tpe = typechecking::make_type(typechecking::TypeKind::STUB, name)
            tpe.node = value
            tpe.module = state.module
            left.svalue = scope::create_type(state.scope, name, share, tpe, scope::Phase::DECLARED, null, null)
        }

        parent.body.insert(parent.body.index_of(node), typedef)

        left.tpe = tpe
    }
    
    let index = parent.body.index_of(node)
    parent.body.remove(index)
}

export def walk_top_VarDecl(node: &parser::Node, state: &typechecking::State) {
    let share = node.value.var_decl.share
    let kw = node.value.var_decl.kw
    let left = node.value.var_decl.left
    let right = node.value.var_decl.right
    let extern = node.value.var_decl.extern
    let dllimport = node.value.var_decl.dllimport
    let dllexport = node.value.var_decl.dllexport

    let current_signature = errors::current_signature
    errors::current_signature = node.signature_hash
    defer errors::current_signature = current_signature

    if kw == parser::VarDecl::CONST {
        let prev_is_static = is_static
        is_static = true

        for var i in 0..vector::length(right) {
            walk(node, right(i), state)
        }

        // We need to walk twice to catch static function calls
        for var i in 0..vector::length(right) {
            walk(node, right(i), state)
        }

        let previous_block = compiler_state.current_block
        let function = set_current_function()
        typechecking::walk_VarDecl(node, state, true)
        let assign = compiler::walk_top_VarDecl(node, compiler_state, true)
        compiler::walk_expression(assign, compiler_state)
        vector::insert(function.block.insn, 0, function.allocas)
        eval::eval(compiler_state)

        for var i in 0..vector::length(left) {
            let n = left(i)
            if n.kind != parser::NodeKind::ID_DECL {
                errors::errorn(n, "Can't assign in const statement")
                break
            }
            let ident = n.value.id_decl.value
            let global = eval::serialize_value(ident.svalue.assembly_name(compiler_state), state.module, compiler_state)
            if global {
                ident.svalue.value = global.value
            }
        }
        is_static = prev_is_static
        compiler_state.function_stack.pop()
        compiler_state.current_block = previous_block

        return
    }

    for var i in 0..vector::length(left) {
        let n = left(i)
        if n.kind == parser::NodeKind::ID_DECL {
            if n.value.id_decl.value {
                if scope::last_path_element(n.value.id_decl.value) == "_" {
                    errors::errorn(n.value.id_decl.value, "Can't use underscore at top level")
                    continue
                }

                n.svalue = scope::create_variable(
                    state.scope, n.value.id_decl.value, 
                    share, kw, typechecking::make_type_raw(typechecking::TypeKind::STUB), 
                    extern, dllimport, dllexport, null, scope::Phase::DEFINED, node, copy_state(state)
                )
            }
        } else {
            walk(node, n, state)
        }
    }
    for var i in 0..vector::length(right) {
        walk(node, right(i), state)
    }
}

def walk_VarDecl(node: &parser::Node, state: &typechecking::State) {
    let kw = node.value.var_decl.kw
    let left = node.value.var_decl.left
    let right = node.value.var_decl.right

    if kw == parser::VarDecl::CONST {
        for var i in 0..vector::length(left) {
            let n = left(i)
            if n.kind != parser::NodeKind::ID_DECL {
                errors::errorn(n, "Can't assign in const statement")
                return
            }
            let ident = n.value.id_decl.value
            if ident.svalue { return }
        }

        let prev_is_static = is_static
        is_static = true

        for var i in 0..vector::length(right) {
            walk(node, right(i), state)
        }

        let previous_block = compiler_state.current_block
        let function = set_current_function()
        typechecking::walk_VarDecl(node, state, true)
        // We need to walk twice to catch static function calls
        for var i in 0..vector::length(right) {
            walk(node, right(i), state)
        }

        compiler::walk_VarDecl(node, compiler_state, true)
        vector::insert(function.block.insn, 0, function.allocas)
        let estate = eval::eval(compiler_state)
        let locals = eval::get_stack_frame(estate).locals

        for var i in 0..vector::length(left) {
            let n = left(i)
            let name = n.value.id_decl.value
            let value = scope::get(state.scope, name)
            // TODO We need to serialize these ones as well, move them out of the function
            let mem = locals(value.assembly_name(compiler_state))
            let ptr = eval::get(mem, typechecking::pointer(value.tpe))
            let constant = eval::get(ptr.i !*, value.tpe)
            value.value = constant
        }
 
        compiler_state.current_block = previous_block
        compiler_state.function_stack.pop()
        compiler::create_dyn_dispatch(state.module.dyn_dispatch_consteval, state.module.compiler_state)

        is_static = prev_is_static
        return
    }

    for var i in 0..vector::length(left) {
        let left = left(i)
        if left.kind != parser::NodeKind::ID_DECL {
            walk(node, left, state)
        } else {
            left.scope = state.scope
            if left.value.id_decl.tpe {
                left.value.id_decl.tpe.parent = left
            }
        }
    }
    for var i in 0..vector::length(right) {
        walk(node, right(i), state)
    }
}

def walk_UnaryOp(node: &parser::Node, state: &typechecking::State) {
    walk(node, node.value.expr, state)
}

def walk_BinaryOp(node: &parser::Node, state: &typechecking::State) {
    walk(node, node.value.bin_op.left, state)
    walk(node, node.value.bin_op.right, state)
}

def walk_BooleanOp(node: &parser::Node, state: &typechecking::State) {
    state.scope = scope::enter_scope(state.scope)
    walk(node, node.value.bin_op.left, state)
    state.scope = scope::exit_scope(state.scope)
    
    state.scope = scope::enter_scope(state.scope)
    walk(node, node.value.bin_op.right, state)
    state.scope = scope::exit_scope(state.scope)
}

def walk_Assign(node: &parser::Node, state: &typechecking::State) {
    for var i in 0..vector::length(node.value.assign.left) {
        walk(node, node.value.assign.left(i), state)
    }
    for var i in 0..vector::length(node.value.assign.right) {
        walk(node, node.value.assign.right(i), state)
    }
}

def walk_Return(node: &parser::Node, state: &typechecking::State) {
    for var i in 0..vector::length(node.value.body) {
        walk(node, node.value.body(i), state)
    }
}

def walk_Yield(node: &parser::Node, state: &typechecking::State) {
    let function = typechecking::current_function(state)

    for var i in 0..vector::length(node.value.body) {
        walk(node, node.value.body(i), state)
    }
}

// This loads a module that hasn't been preprocessed yet
export def load_function(value: &scope::Value) {
    let module = value.ident.module
    if not module { return }
    if not module.is_dirty and not module.node {
        module.is_dirty = true
        toolchain::reset_and_consteval(module)
    }
}

// This function compiles a function that is called in constant evaluation
export def compile_function(value: &scope::Value, context: &scope::Scope, arguments: &Vector(typechecking::NamedParameter) = null) -> &scope::Value {
    load_function(value)
    
    var node = value.node
    var state = value.state

    var is_repurposed = false // When There's no node and we find a new function we don't need to typecheck anymore
    if not node {
        if not arguments { return value }

        // Reset
        value.ident.module.scope.remove(value)
        let new_value = scope::get_function(value.ident.module.scope, make_identifier(value.name), arguments)
        if not new_value { return value }
        is_repurposed = true

        value = new_value
        node = new_value.node

        if not node {
            return value 
        }
        state = new_value.state
    }

    var function = node.value.def_.function
    if function.is_typechecked and not is_repurposed { return value }

    let is_polymorph = typechecking::is_polymorph(function.tpe)
    if not is_polymorph { 
        compiler::predeclare_function(function, overwrite = true)
        const_module.result.functions(function.name) = function 
    }

    if not state { return value }
    if not is_polymorph { state.module.result.functions(function.name) = function }

    if function.is_compiled { return value }
    if not node.value.def_.body { return value }
    
    let prev_static = is_static
    is_static = true
    
    if not function.is_typechecked {
        if arguments and is_polymorph {
            node = typechecking::walk_Def_with_type_argument(node, arguments, context, state)
            function = node.value.def_.function
            compiler::predeclare_function(function, overwrite = true)
            const_module.result.functions(function.name) = function 
        } else {
            walk_Def(node, state)
            typechecking::walk_Def(node, state)
        }
    }

    function.is_compiled = true

    //print("Creating function ", function.tpe.type_name, "\n")

    // This is a big ugly but what can we do
    let debug = toolchain::debug_sym
    toolchain::debug_sym = false
    compiler::create_function(node, node.tpe, node.value.def_.body, node.inner_scope, null, compiler_state)
    toolchain::debug_sym = debug
    
    if function.defer_functions {
        for var i in 0..vector::length(function.defer_functions) {
            let deferf = function.defer_functions(i)
            const_module.result.functions(deferf.name) = deferf
        }
    }
    
    compiler::create_dyn_dispatch(state.module.dyn_dispatch_consteval, state.module.compiler_state)

    is_static = prev_static
    return function.value
}

export def walk_Call(node: &parser::Node, state: &typechecking::State) {
    let left = node.value.func_call.left
    walk(node, left, state)
    
    for var i in 0..vector::length(node.value.func_call.args) {
        walk(node, node.value.func_call.args(i), state)
    }
    for var i in 0..vector::length(node.value.func_call.kwargs) {
        let named_arg = node.value.func_call.kwargs(i)
        if not named_arg { continue }
        walk(node, named_arg.value.named_arg.value, state)
    }
}

def walk_Ptr(node: &parser::Node, state: &typechecking::State) {
    walk(node, node.value.expr, state)
    if is_static {
        if not node.value.expr.svalue { return }
        compile_function(node.value.expr.svalue, state.scope)
    }
}

def walk_Switch(node: &parser::Node, state: &typechecking::State) {
    walk(node, node.value.switch_.expr, state)
    for var i in 0..vector::length(node.value.switch_.body) {
        walk(node, node.value.switch_.body(i), state)
    }
}

def walk_Case(node: &parser::Node, state: &typechecking::State) {
    for var i in 0..vector::length(node.value.case_.expr) {
        walk(node, node.value.case_.expr(i), state)
    }

    state.scope = scope::enter_scope(state.scope)
    node.inner_scope = state.scope
    let body = vector::copy(node.value.case_.body)
    for var i in 0..vector::length(body) {
        walk(node, body(i), state)
    }
    state.scope = scope::exit_scope(state.scope)
}

def walk_Defer(node: &parser::Node, state: &typechecking::State) {
    let function = typechecking::current_function(state)
    function.has_defer = true

    state.scope = scope::enter_scope(state.scope)
    node.inner_scope = state.scope
    let body = vector::copy(node.value.body)
    for var i in 0..vector::length(body) {
        walk(node, body(i), state)
    }
    state.scope = scope::exit_scope(state.scope)   
}

def walk_If(node: &parser::Node, state: &typechecking::State) {
    walk(node, node.value.if_.cond, state)
    
    state.scope = scope::enter_scope(state.scope)
    node.inner_scope = state.scope
    let body = vector::copy(node.value.if_.body)
    for var i in 0..vector::length(body) {
        walk(node, body(i), state)
    }
    state.scope = scope::exit_scope(state.scope)

    for var i in 0..vector::length(node.value.if_.else_if) {
        let else_if = node.value.if_.else_if(i)
        state.scope = scope::enter_scope(state.scope)
        else_if.scope = state.scope
        walk(node, else_if.value.else_if.cond, state)
        state.scope = scope::exit_scope(state.scope)

        state.scope = scope::enter_scope(state.scope)
        else_if.inner_scope = state.scope
        let body = vector::copy(else_if.value.else_if.body)
        for var i in 0..vector::length(body) {
            walk(node, body(i), state)
        }
        state.scope = scope::exit_scope(state.scope)
    }
    if node.value.if_.else_ {
        let else_ = node.value.if_.else_
        state.scope = scope::enter_scope(state.scope)
        else_.inner_scope = state.scope
        let body = vector::copy(else_.value.body)
        for var i in 0..vector::length(body) {
            walk(node, body(i), state)
        }
        state.scope = scope::exit_scope(state.scope)
    }
}

def walk_For(node: &parser::Node, state: &typechecking::State) {
    walk(node, node.value.for_loop.expr, state)
    state.scope = scope::enter_scope(state.scope)
    node.inner_scope = state.scope
    let body = vector::copy(node.value.for_loop.body)
    for var i in 0..vector::length(body) {
        walk(node, body(i), state)
    }
    state.scope = scope::exit_scope(state.scope)
}

def walk_While(node: &parser::Node, state: &typechecking::State) {
    state.scope = scope::enter_scope(state.scope)
    walk(node, node.value.while_loop.expr, state)
    node.inner_scope = state.scope
    let body = vector::copy(node.value.while_loop.body)
    for var i in 0..vector::length(body) {
        walk(node, body(i), state)
    }
    state.scope = scope::exit_scope(state.scope)
}

def walk_Loop(node: &parser::Node, state: &typechecking::State) {
    state.scope = scope::enter_scope(state.scope)
    node.inner_scope = state.scope
    let body = vector::copy(node.value.body)
    for var i in 0..vector::length(body) {
        walk(node, body(i), state)
    }
    state.scope = scope::exit_scope(state.scope)
}

def walk_StructLit(node: &parser::Node, state: &typechecking::State) {
    for var i in 0..vector::length(node.value.struct_lit.args) {
        walk(node, node.value.struct_lit.args(i), state)
    }
    for var i in 0..vector::length(node.value.struct_lit.kwargs) {
        let named_arg = node.value.struct_lit.kwargs(i)
        walk(node, named_arg.value.named_arg.value, state)
    }
}

def walk_ArrayLit(node: &parser::Node, state: &typechecking::State) {
    for var i in 0..node.value.body.length {
        walk(node, node.value.body(i), state)
    }
}

def walk_Defined(node: &parser::Node, state: &typechecking::State) {
    let expr = node.value.expr

    let boolean_node = [
        kind = parser::NodeKind::BOOLEAN,
        parent = node.parent,
        loc = node.loc
    ] !parser::Node

    if expr and expr.kind == parser::NodeKind::IDENTIFIER {
        typechecking::lookup_identifier_types(expr, state)
        let ident = scope::get(state.scope, expr)
        boolean_node.value.i = (not not ident) !int64
    } else {
        errors::errorn(node, "define needs an identifier")
    }

    @node = boolean_node
}

def walk_Error(node: &parser::Node, state: &typechecking::State) {
    let expr = node.value.expr
    let prev_is_static = is_static
    is_static = true
    walk(node, expr, state)

    let previous_block = compiler_state.current_block
    let function = set_current_function()
    typechecking::walk(node, expr, state)
    walk(node, expr, state)
    compiler::create_dyn_dispatch(state.module.dyn_dispatch_consteval, state.module.compiler_state)
    is_static = prev_is_static

    var result = compiler::walk_expression(expr, compiler_state)
    vector::insert(function.block.insn, 0, function.allocas)
    let estate = eval::eval(compiler_state)
    result = eval::get_value(result, estate)
    if not typechecking::equals(result.tpe, builtins::string_) {
        errors::errorn(node, "Error pragma expects string, got ", debug::type_to_str(result.tpe))
    } else {
        var ptr: *char = null
        if result.kind == compiler::ValueKind::ADDRESS {
            let mem = eval::get_address(@result.addr, estate)
            let val = eval::get(eval::get(mem, typechecking::pointer(result.tpe)).i !*, result.tpe)
            ptr = val.values(1).i !*char
        } else {
            ptr = result.values(1).i !*char
        } 
        errors::errorn(node, make_string(ptr))
    }

    @node = [
        kind = parser::NodeKind::NULL,
        parent = node.parent,
        loc = node.loc
    ] !parser::Node
    compiler_state.current_block = previous_block
    compiler_state.function_stack.pop()
}

def walk_Assert(node: &parser::Node, state: &typechecking::State) {
    let cond = node.value.assert_.cond
    let msg = node.value.assert_.message
    walk(node, cond, state)
    walk(node, msg, state)
}

def walk_top(parent: &parser::Node, node: &parser::Node, state: &typechecking::State) {
    node.parent = parent
    node.module = state.module
    node.scope = state.scope
    
    switch node.kind !int {
        case parser::NodeKind::IMPORT:
            walk_Import(node, state)
        case parser::NodeKind::DEF:
            if not state.shallow_walk { walk_Def(node, state) }
        case parser::NodeKind::TYPE_DECL:
            if not state.shallow_walk { walk_TypeDecl(node, state) }
        case parser::NodeKind::VAR_DECL:
            if not state.shallow_walk { walk_top_VarDecl(node, state) }
        case: do_walk(node, state)
    }
}

export def walk(parent: &parser::Node, node: &parser::Node, state: &typechecking::State) {
    if not node { return }

    node.parent = parent
    node.module = state.module
    node.scope = state.scope

    if parent and parent.kind == parser::NodeKind::PROGRAM {
        walk_top(parent, node, state)
        return
    }
    do_walk(node, state)
}

def do_walk(node: &parser::Node, state: &typechecking::State) {
    switch node.kind !int {
        case parser::NodeKind::VAR_DECL:
            walk_VarDecl(node, state)
        case parser::NodeKind::ASSIGN:
            walk_Assign(node, state)
        case parser::NodeKind::RETURN:
            walk_Return(node, state)
        case parser::NodeKind::YIELD:
            walk_Yield(node, state)
        case parser::NodeKind::FUNC_CALL:
            walk_Call(node, state)
        case parser::NodeKind::SWITCH:
            walk_Switch(node, state)
        case parser::NodeKind::CASE:
            walk_Case(node, state)
        case parser::NodeKind::IF:
            walk_If(node, state)
        case parser::NodeKind::STATIC_IF:
            walk_StaticIf(node, state)
        case parser::NodeKind::IF_EXPR:
            walk_IfExpr(node, state)
        case parser::NodeKind::FOR:
            walk_For(node, state)
        case parser::NodeKind::WHILE:
            walk_While(node, state)
        case parser::NodeKind::LOOP:
            walk_Loop(node, state)
        case parser::NodeKind::STRUCT_LIT:
            walk_StructLit(node, state)
        case parser::NodeKind::ARRAY_LIT:
            walk_ArrayLit(node, state)
        case parser::NodeKind::RANGE, parser::NodeKind::RANGE_INC, parser::NodeKind::MEMBER_ACCESS, parser::NodeKind::CAST, 
            parser::NodeKind::ADD..=parser::NodeKind::MOD, parser::NodeKind::BAND..=parser::NodeKind::SHR_EQ:
            
            walk_BinaryOp(node, state)
        case parser::NodeKind::AND, parser::NodeKind::OR:
            walk_BooleanOp(node, state)
        case parser::NodeKind::PTR:
            walk_Ptr(node, state)
        case parser::NodeKind::SIZE_OF, parser::NodeKind::ALIGN_OF, parser::NodeKind::DEREF..=parser::NodeKind::NOT, parser::NodeKind::YIELD_FROM:
            walk_UnaryOp(node, state)
        case parser::NodeKind::IDENTIFIER:
            // walk_Identifier(node, state)
        case parser::NodeKind::DEFINED:
            walk_Defined(node, state)
        case parser::NodeKind::ERROR:
            walk_Error(node, state)
        case parser::NodeKind::DEFER:
            walk_Defer(node, state)
        case parser::NodeKind::ASSERT:
            walk_Assert(node, state)
        case parser::NodeKind::FROM:
            walk_From(node, state)
    }
}

export def import_stdlib(state: &typechecking::State) {
    let cstd_ident = parser::make_identifier("cstd")
    let cstd = toolchain::consteval_module(cstd_ident, state.module) 
    scope::insert_module(state.module.scope, cstd_ident, cstd)
    
    if not toolchain::no_stdlib {
        let std_ident = parser::make_identifier("std")
        let std = toolchain::consteval_module(std_ident, state.module) 
        toolchain::progress_update(state.module, toolchain::ProgressUpdate::CONTINUE)
        scope::insert_module(state.module.scope, std_ident, std)

        let runtime_ident = parser::make_identifier("runtime")
        let runtime = toolchain::consteval_module(runtime_ident, state.module) 
        toolchain::progress_update(state.module, toolchain::ProgressUpdate::CONTINUE)
        scope::insert_module(state.module.scope, runtime_ident, runtime)

        let optional_ident = parser::make_identifier("optional")
        let optional = toolchain::consteval_module(optional_ident, state.module) 
        toolchain::progress_update(state.module, toolchain::ProgressUpdate::CONTINUE)
        scope::insert_module(state.module.scope, optional_ident, optional)
    }
}

export def consteval(module: &toolchain::Module) {
    let state = typechecking::make_state(module)
    module.state = state
    consteval(state)

    if module.module == "std" {
        toolchain::load_file_type()
    }
}

export var time_spent: int64 = 0

export def consteval(state: &typechecking::State) {
    toolchain::progress_update(state.module, ProgressUpdate::START)

    state.scope.module = state.module

    let prev_is_static = is_static
    is_static = true

    let start = util::millis()

    let node = state.module.node
    assert(node.kind == parser::NodeKind::PROGRAM)

    if not toolchain::is_preload(state.module) {
        import_stdlib(state)
    }

    compiler::predeclare_functions(state.module)

    let function = [
        is_global = true,
        locals = map::make(type &typechecking::Type)
    ] !&compiler::Function
    node.value.program.function = function

    typechecking::push_function(state, function)

    let body = vector::copy(node.body)
    for var i in 0..vector::length(body) {
        let n = body(i)
        walk(node, n, state)
    }
    let end = util::millis()

    typechecking::pop_function(state)
    time_spent += end - start

    is_static = prev_is_static

    toolchain::progress_update(state.module, ProgressUpdate::END)
}

export def consteval(node: &parser::Node, state: &typechecking::State) {
    assert node.kind == parser::NodeKind::PROGRAM

    let prev_is_static = is_static
    is_static = true
    
    let function = [
        is_global = true,
        locals = map::make(type &typechecking::Type)
    ] !&compiler::Function
    node.value.program.function = function

    typechecking::push_function(state, function)

    let body = vector::copy(node.body)
    for var i in 0..vector::length(body) {
        let n = body(i)
        if n and n.kind != parser::NodeKind::TYPE_DECL and
            n.kind != parser::NodeKind::VAR_DECL and
            n.kind != parser::NodeKind::DEF {

            walk(node, n, state)
        }
    }

    typechecking::pop_function(state)
    is_static = prev_is_static
}