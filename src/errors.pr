import lexer
import parser
import compiler
import map
import parser

export var error_count = 0
export var suppress_errors = false

export type Diagnostic = struct {
    filename: Str
    function: Str
    signature: uint64
    line: int
    column: int
    end_line: int
    end_column: int
    text: Str
    message: Str
}

export def hash(diag: Diagnostic) -> uint64 {
    return combine_hashes(
        hash(diag.filename), 
        hash(diag.function), 
        diag.signature,
        diag.line !uint64, 
        diag.column !uint64, 
        diag.end_line !uint64,
        diag.end_column !uint64,
        hash(diag.message)
    )
}
export def == (this: Diagnostic, other: Diagnostic) -> bool {
    return this.filename == other.filename and
        this.function == other.function and
        this.signature == other.signature and
        this.line == other.line and
        this.column == other.column and
        this.end_line == other.end_line and
        this.end_column == other.end_column and
        this.message == other.message
}
export def != (this: Diagnostic, other: Diagnostic) -> bool {
    return not (this == other)
}

export var error_handler: (Diagnostic) -> () = *print_error

export def errorv(msg: String...) {
    error("error: [eval] ")
    for var i in 0..msg.size {
        error(msg[i])
    }
    error("\n")
    error_count += 1
}

// TODO Passing a parameter with global state is a bad idea
export var current_function: String
export var current_signature: uint64

export def print_error(diagnostic: Diagnostic) {
    error("\r\n")
    error(diagnostic.filename, "@", diagnostic.line + 1, ":", diagnostic.column + 1, "\n")
    error(diagnostic.text, "\n")
    for var i in 0..diagnostic.column {
        error(" ")
    }
    error("^")

    var end_column = diagnostic.end_column
    if diagnostic.end_line > diagnostic.line {
        end_column = length(diagnostic.text) !int - 1
    }
    for var i in 0..(end_column - diagnostic.column - 1) {
        error("~")
    }
    error("\n")
    
    error(diagnostic.message)
    error("\n")

    error_count += 1
}

export def errorn(node: &parser::Node, msg: String...) {
    if suppress_errors { return }

    if not node { assert(false) }
    var filename = (@node).loc.display_name
    let line = (@node).loc.line
    let column = (@node).loc.column
    let end_line = node.loc.end_line
    var end_column = node.loc.end_column
    let lines = node.loc.lines
    let str = lines[line] if lines else {} !Str

    if not filename {
        filename = node.loc.filename
    }

    var message: StringBuffer = ""
    for var fragment in msg {
        message += fragment
    }
    let diagnostic = {
        filename = filename,
        function = current_function,
        signature = current_signature,
        line = line,
        column = column,
        end_line = end_line,
        end_column = end_column,
        text = str,
        message = message
    } !Diagnostic
    error_handler(diagnostic)
}

export def errort(token: lexer::Token, state: &parser::ParseState, msg: String...) {
    if suppress_errors { return }
    if state.has_error { return }

    let filename = (@state).filename
    let line = token.line
    let column = token.column
    let end_line = token.end_line
    var end_column = token.end_column
    let str = (@state).lines[line]

    var message: StringBuffer = ""
    for var fragment in msg {
        message += fragment
    }
    let diagnostic = {
        filename = filename,
        function = current_function,
        signature = current_signature,
        line = line,
        column = column,
        end_line = end_line,
        end_column = end_column,
        text = str,
        message = message
    } !Diagnostic
    error_handler(diagnostic)

    state.has_error = true
}