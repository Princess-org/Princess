// This is the entry point for a language server as defined by the LSP
import vector
import map
import json
import toolchain
import parser
import scope
import typechecking
import debug

import document
import cache

const VERSION = "0.0.1"

const ParseError = -32700
const InvalidRequest = -32600
const MethodNotFound = -32601
const InvalidParams = -32602
const InternalError = -32603

const ServerNotInitialized = -32002
const UnknownErrorCode = -32001

type MessageType = enum {
    Error = 1
    Warning = 2
    Info = 3
    Log = 4
}

// TODO I'd like to do this but it doesn't work
//export type DocumentUri = Str

export def uri_to_path(uri: Str) -> Str {
    if uri.starts_with("file://") {
        return uri.substring(7)
    }
    abort("Unsupported protocol in uri: " + uri)
}

export def path_to_uri(path: Str) -> Str {
    return "file://" + path
}

export type TextDocumentIdentifier = struct {
    uri: Str
}

export type Range = struct {
	start: U16Position
	end: U16Position
}

export type Location = struct {
	uri: Str
	range: Range
}

export type U16Position = struct {
    line: int
    character: int
}

export type U8Position = struct {
    line: int
    character: int
}


type WorkspaceFolder = struct {
    uri: Str
    name: Str
}

type TextDocumentItem = struct {
    uri: Str
    languageId: Str
    version: int
    text: Str
}

type DidOpenTextDocumentParams = struct {
    textDocument: TextDocumentItem
}

def did_open(id: int, params: DidOpenTextDocumentParams) {
    if params.textDocument.languageId != "princess" { return }
    document::open_document(params.textDocument.uri, params.textDocument.text)
}

type VersionedTextDocumentIdentifier = struct {
    uri: Str
    version: int
}

export type TextDocumentContentChangeEvent = struct {
    range: &Json
    text: Str
}

export type TextDocumentChangeEvent = struct {
    end: U8Position
    lines: int
    characters: int
}

type DidChangeTextDocumentParams = struct {
    textDocument: VersionedTextDocumentIdentifier
    contentChanges: &[TextDocumentContentChangeEvent]
}

def did_change(id: int, params: DidChangeTextDocumentParams) {
    document::change_document(params.textDocument.uri, params.contentChanges)
}

export type DidSaveTextDocumentParams = struct {
    textDocument: TextDocumentIdentifier
    text: Str
}

def did_save(id: int, params: DidSaveTextDocumentParams) {
    document::save_document(params.textDocument.uri, params.text)
}

type HoverParams = struct {
    textDocument: TextDocumentIdentifier
    position: U16Position
}

const PlainText = "plaintext"
const Markdown = "markdown"

type MarkupContent = struct {
    kind: Str
    value: Str
}

type Hover = struct {
    contents: MarkupContent
}

def hover(id: int, params: HoverParams) {
    let module = toolchain::find_module_by_path(uri_to_path(params.textDocument.uri))
    if not module { send_reply(id, null); return }	
    let svalue = find_value_at(module, params.position)
    if not svalue or not svalue.tpe { send_reply(id, null); return }

    var res: Str
    if svalue.tpe.kind == typechecking::TypeKind::FUNCTION {
        res = "(function) " + svalue.name + ": " + debug::type_to_str(svalue.tpe)
    } else if svalue.tpe.kind == typechecking::TypeKind::NAMESPACE {
        res = "(module) " + svalue.name
    } else if svalue.modifier == VarDecl::TYPE {
        let tpe = svalue.value.value_tpe
        if tpe.kind == typechecking::TypeKind::STRUCTURAL {
            res = "(interface) " + svalue.name
        } else if tpe.kind == typechecking::TypeKind::STRUCT {
            res = "(struct) " + svalue.name
        } else if tpe.kind == typechecking::TypeKind::UNION {
            res = "(union) " + svalue.name 
        } else {
            res = "(type) " + svalue.name
        }
    } else if svalue.modifier == VarDecl::CONST {
        res = "(constant) " + svalue.name + ": " + debug::type_to_str(svalue.tpe)
    } else {
        res = "(variable) " + svalue.name + ": " + debug::type_to_str(svalue.tpe)
    }
    res = "```princess\n" + res + "\n\n```"

    let content = {
        kind = Markdown,
        value = res
    } !MarkupContent
    let hover = {
        contents = content
    } !Hover
    send_reply(id, json::serialize(*hover))
}

type DefinitionParams = struct {
    textDocument: TextDocumentIdentifier
    position: U16Position
}

def find_value_at(module: &toolchain::Module, position: U16Position) -> &scope::Value {
    let u8pos = document::u16_pos_to_u8(module.filename, position)
    let node = parser::find(module.node, u8pos.line, u8pos.character)
    if not node { return null }
    if node.kind != parser::NodeKind::IDENTIFIER { return null }
    let svalue = node.svalue
    return svalue
}

def go_to_definition(id: int, params: DefinitionParams) {
    let path = uri_to_path(params.textDocument.uri)
    let module = toolchain::find_module_by_path(path)
    if not module { send_reply(id, null); return }	
    let svalue = find_value_at(module, params.position)
    if not svalue { send_reply(id, null); return }
    let sloc = svalue.loc
    if parser::is_invalid(sloc) { send_reply(id, null); return }
    //error("Go to: ", svalue !*, " ", sloc.line, " ", sloc.column, "\n")


    let loc = {
        uri = path_to_uri(sloc.filename),
        range = {
            start = document::u8_pos_to_u16(sloc.filename, { sloc.line, sloc.column } !U8Position),
            end = document::u8_pos_to_u16(sloc.filename, { sloc.end_line, sloc.end_column } !U8Position)
        } !Range
    } !Location
    send_reply(id, json::serialize(*loc))
}

type CompletionParams = struct {
    textDocument: TextDocumentIdentifier
    position: U16Position
    // TODO context?
}

type CompletionItemKind = enum {
    Text = 1
	Method = 2
	Function = 3
	Constructor = 4
	Field = 5
	Variable = 6
	Class = 7
	Interface = 8
	Module = 9
	Property = 10
	Unit = 11
	Value = 12
	Enum = 13
	Keyword = 14
	Snippet = 15
	Color = 16
	File = 17
	Reference = 18
	Folder = 19
	EnumMember = 20
	Constant = 21
	Struct = 22
	Event = 23
	Operator = 24
	TypeParameter = 25
}

type CompletionItemTag = enum {
    Deprecated = 1
}

type CompletionItemLabelDetails = struct {
    detail: Str
    description: Str
}

type CompletionItem = struct {
    _label: Str
    labelDetails: CompletionItemLabelDetails
    kind: int
    tags: &[int]
    detail: Str
    sortText: Str
    insertText: Str
    insertTextFormat: int
}

type InsertTextFormat = enum {
    PlainText = 1
    Snippet = 2
}

def params_to_string(tpe: &typechecking::Type) -> Str {
    var name: StringBuffer = "("
    for var i in 0..tpe.parameter_t.length {
        let param = tpe.parameter_t[i]
        name += param.name
        name += ": "
        name += debug::type_to_str(param.tpe)
        if i < tpe.parameter_t.length - 1 {
            name += ", "
        }
    }
    name += ")"
    if tpe.return_t.length > 0 {
        name += " -> "
        for var i in 0..tpe.return_t.length {
            name += debug::type_to_str(tpe.return_t[i])
            if i < tpe.return_t.length - 1 {
                name += ", "
            }
        }
    }
    return name
}

def push_completion_value(value: &scope::Value, module: &toolchain::Module, completions: &Vector(CompletionItem)) {
    if value.is_internal { return }

    var kind = CompletionItemKind::Variable
    var detail: Str
    var function_type: Str

    if value.modifier == parser::VarDecl::TYPE {
        let value_tpe = value.value.value_tpe
        if typechecking::is_struct(value_tpe) {
            kind = CompletionItemKind::Struct
        } else if typechecking::is_interface(value_tpe) {
            kind = CompletionItemKind::Interface 
        } else if typechecking::is_enum(value_tpe) {
            kind = CompletionItemKind::Enum
        } else {
            kind = CompletionItemKind::Interface
        }
    } else if value.modifier == parser::VarDecl::CONST {
        if value.tpe.kind == typechecking::TypeKind::FUNCTION {
            kind = CompletionItemKind::Function
            detail = params_to_string(value.tpe)
        } else if value.tpe.kind == typechecking::TypeKind::NAMESPACE {
            kind = CompletionItemKind::Module
        } else {
            kind = CompletionItemKind::Constant
            detail = ": " + debug::type_to_str(value.tpe)
        }
    } else {
        detail = ": " + debug::type_to_str(value.tpe)
    }

    var smod: Str
    if value.ident.module and value.ident.module != module {
        smod = value.ident.module.module
    }

    completions.push({
        _label = value.name,
        labelDetails = {
            detail = detail,
            description = smod
        } !CompletionItemLabelDetails,
        kind = kind !int,
        insertText = value.name + ("($0)" if kind == CompletionItemKind::Function else ""),
        insertTextFormat = InsertTextFormat::Snippet !int if kind == CompletionItemKind::Function else InsertTextFormat::PlainText !int
    } !CompletionItem)
}

def push_members(node: &parser::Node, completions: &Vector(CompletionItem)) {
    let left = node.value.bin_op.left
    if left {
        let scpe = left.scope
        let tpe = left.tpe
        if typechecking::is_struct(tpe) {
            for var field in @tpe.fields {
                completions.push({
                    _label = field.name,
                    labelDetails = {
                        description = "",
                        detail = ": " + debug::type_to_str(field.tpe)
                    } !CompletionItemLabelDetails,
                    kind = CompletionItemKind::Field !int,
                } !CompletionItem)
            }
        }
        let functions = scope::find_functions(scpe, tpe)
        for var i in 0..functions.length {
            let function = functions[i]
            if function.is_internal { continue }
            completions.push({
                _label = function.name,
                labelDetails = {
                    description = "",
                    detail = params_to_string(function.tpe)
                } !CompletionItemLabelDetails,
                kind = CompletionItemKind::Function !int
            } !CompletionItem)
        }
    }
}

def complete(id: int, params: CompletionParams) {
    let path = uri_to_path(params.textDocument.uri)
    let module = toolchain::find_module_by_path(path)
    if not module { send_reply(id, null); return }
    let position = document::u16_pos_to_u8(path, params.position)

    let completions = vector::make(CompletionItem)

    var node = parser::find(module.node, position.line, position.character)
    if node {
        if node.kind == parser::NodeKind::MEMBER_ACCESS {
            push_members(node, completions)
        } else if node.kind == parser::NodeKind::IDENTIFIER {
            var scpe = node.scope
            var check_export = false
            if node.value.identifier.path.length > 1 {
                let prefix = vector::make(String)
                for var i in 0..(node.value.identifier.path.length - 1) {
                    prefix.push(node.value.identifier.path[i])
                }

                let ns_ident = parser::copy_node(node)
                ns_ident.value.identifier.path = prefix
                let ns = scope::get(scpe, ns_ident, force_compile = false, dry_run = true)
                if ns { 
                    scpe = ns._module 
                    check_export = true
                }
            }

            let parent = node.parent
            if parent and parent.kind == parser::NodeKind::MEMBER_ACCESS {
                push_members(parent, completions)
            } else if parent and (parent.kind == parser::NodeKind::REF_T or 
                parent.kind == parser::NodeKind::PTR_T or parent.kind == parser::NodeKind::WEAK_REF_T or
                parent.kind == parser::NodeKind::ARRAY_STATIC_T or parent.kind == parser::NodeKind::ARRAY_T or
                parent.kind == parser::NodeKind::ID_DECL and parent.value.id_decl.tpe == node or
                parent.kind == parser::NodeKind::ID_DECL_STRUCT and parent.value.id_decl_struct.tpe == node) {

                let values = scope::find_all(parent.scope, check_export)
                for var i in 0..values.length {
                    let value = values[i]
                    if value.modifier == parser::VarDecl::TYPE or 
                        value.modifier == parser::VarDecl::CONST and value.tpe.kind == typechecking::TypeKind::NAMESPACE {
                        push_completion_value(value, module, completions)
                    }
                }
            } else {
                let values = scope::find_all(scpe, check_export)
                for var i in 0..values.length {
                    let value = values[i]
                    push_completion_value(value, module, completions)
                }
            }
        } else {
            let values = scope::find_all(node.scope, false)
            for var i in 0..values.length {
                let value = values[i]
                push_completion_value(value, module, completions)
            }
        }
    }

    let arr = completions.to_array()
    send_reply(id, json::serialize(*arr))
}

export type DiagnosticSeverity = enum {
    Error = 1
    Warning = 2
    Information = 3
    Hint = 4
}

export type Diagnostic = struct {
    range: Range
    severity: int
    message: Str
}

export type PublishDiagnosticsParams = struct {
    uri: Str
    diagnostics: &[Diagnostic]
}

export def publish_diagnostics(params: PublishDiagnosticsParams) {
    send_notification("textDocument/publishDiagnostics", json::serialize(*params))
}

type SignatureHelpTriggerKind = enum {
    Invoked = 1
    TriggerCharacter = 2
    ContentChange = 3
}

type SignatureHelpContext = struct {
    triggerKind: int
    triggerCharacter: Str
    isRetrigger: bool
    activeSignatureHelp: &Json // TODO Allow optionals
}

type ParameterInformation = struct {
    _label: &[uint]
    documentation: Str
}

type SignatureInformation = struct {
    _label: Str
    documentation: Str
    parameters: &[ParameterInformation]
}

type SignatureHelp = struct {
    signatures: &[SignatureInformation]
    activeSignature: uint
    activeParameter: uint
}

type SignatureHelpParams = struct {
    textDocument: TextDocumentIdentifier
    position: U16Position
    context: SignatureHelpContext
}

def create_signature(value: &scope::Value) -> SignatureInformation {
    var name = value.name + "("
    var parameters = vector::make(ParameterInformation)
    for var i in 0..value.tpe.parameter_t.length {
        let start_index = name.length() !uint
        let param = value.tpe.parameter_t[i]
        name += param.name
        name += ": "
        name += debug::type_to_str(param.tpe)
        let end_index = name.length() !uint
        if i < value.tpe.parameter_t.length - 1 {
            name += ", "
        }
        parameters.push({
            _label = [start_index, end_index]
        } !ParameterInformation)
    }
    name += ")"
    if value.tpe.return_t.length > 0 {
        name += " -> "
        for var i in 0..value.tpe.return_t.length {
            name += debug::type_to_str(value.tpe.return_t[i])
            if i < value.tpe.return_t.length - 1 {
                name += ", "
            }
        }
    }

    return {
        _label = name,
        parameters = parameters.to_array(),
        documentation = ""
    } !SignatureInformation
}

def signature_help(id: int, params: SignatureHelpParams) {
    let path = uri_to_path(params.textDocument.uri)
    let module = toolchain::find_module_by_path(path)
    if not module { send_reply(id, null); return }
    let position = document::u16_pos_to_u8(path, params.position)
    var node = parser::find(module.node, position.line, position.character)

    var param = node
    var is_parameter = false
    var active_par = 0

    if not node { 
        send_reply(id, null); return
    }
    if node.kind != parser::NodeKind::FUNC_CALL {
        is_parameter = true
        node = node.parent
    }
    if not node or not node.scope or node.kind != parser::NodeKind::FUNC_CALL {
        send_reply(id, null); return
    }
    if is_parameter {
        for var i in 0..node.value.func_call.args.length {
            if node.value.func_call.args[i] == param {
                active_par = i
                break
            }
        }
    } else {
        active_par = max(0, node.value.func_call.args.length - 1) !uint
    }
    
    let left = node.value.func_call.left
    if not left {
        send_reply(id, null); return
    }
    if left.kind != parser::NodeKind::IDENTIFIER {
        // TODO
        send_reply(id, null); return
    }

    var name: Str
    if vector::length(left.value.identifier.path) > 1 {
        // TODO
        send_reply(id, null); return
    }

    name = parser::identifier_to_str(left)
    let functions = scope::find_functions(node.scope, name)
    if functions.length == 0 { send_reply(id, null); return }

    let args = vector::make(typechecking::NamedParameter)
    for var i in 0..node.value.func_call.args.length {
        let arg = node.value.func_call.args[i]
        if not arg { continue }
        args.push({ _tpe = arg.tpe } !typechecking::NamedParameter)
    }
    for var i in 0..node.value.func_call.kwargs.length {
        let kwarg = node.value.func_call.kwargs[i]
        if not kwarg { continue }
        args.push({ 
            name = parser::identifier_to_str(kwarg.value.named_arg.name),
            _tpe = kwarg.value.named_arg.value.tpe 
        } !typechecking::NamedParameter)
    }

    var active_sig = 0
    var smallest_score = std::MAX_INT32

    let infos = vector::make(SignatureInformation)
    for var i in 0..functions.length {
        let fun = functions[i]
        let score = typechecking::overload_score(fun.tpe, args, module, false, partial = true)
        if score >= 0 and score < smallest_score { 
            active_sig = i
            smallest_score = score 
        }
        infos.push(create_signature(functions[i]))
    }

    let help = {
        signatures = infos.to_array(),
        activeSignature = active_sig,
        activeParameter = active_par
    } !SignatureHelp
    send_reply(id, json::serialize(*help))
}

type DocumentSymbolParams = struct {
    textDocument: TextDocumentIdentifier
}

type SymbolKind = enum {
	File = 1
	Module = 2
	Namespace = 3
	Package = 4
	Class = 5
	Method = 6
	Property = 7
	Field = 8
	Constructor = 9
	Enum = 10
	Interface = 11
	Function = 12
	Variable = 13
	Constant = 14
	String = 15
	Number = 16
	Boolean = 17
	Array = 18
	Object = 19
	Key = 20
	Null = 21
	EnumMember = 22
	Struct = 23
	Event = 24
	Operator = 25
	TypeParameter = 26
}

type SymbolTag = enum {
    Deprecated = 1
}

type DocumentSymbol = struct {
    name: Str
    //detail: Str
    kind: int // TODO SymbolKind
    //tags: &[SymbolTag]
    deprecated: bool
    range: Range
    selectionRange: Range
    children: &[DocumentSymbol]
}

def source_loc_to_range(path: Str, loc: parser::SourceLoc) -> Range {
    return {
        start = document::u8_pos_to_u16(path, { loc.line, loc.column } !U8Position),
        end = document::u8_pos_to_u16(path, { loc.end_line, loc.end_column } !U8Position)
    } !Range
}

def type_children(path: Str, node: &parser::Node) -> &Vector(DocumentSymbol) {
    let children = vector::make(DocumentSymbol)
    if node.kind == parser::NodeKind::STRUCT_T {
        for var i in 0..node.value.body.length {
            let child = node.value.body[i]
            // TODO anonymous structs
            if not child or child.kind != parser::NodeKind::ID_DECL_STRUCT { continue }

            let tpe = child.value.id_decl_struct.tpe
            let name = child.value.id_decl_struct.ident

            if not tpe or not name { continue }

            var sub_children = vector::make(DocumentSymbol)
            if child.kind == parser::NodeKind::STRUCT_T {
                sub_children = type_children(path, tpe)
            }
            children.push({
                name = parser::identifier_to_str(name),
                kind = SymbolKind::Field !int,
                range = source_loc_to_range(path, child.loc),
                selectionRange = source_loc_to_range(path, name.loc),
                children = sub_children.to_array()
            } !DocumentSymbol)
        }
    } else if node.kind == parser::NodeKind::ENUM_T {
        // TODO Implement this
    } else if node.kind == parser::NodeKind::STRUCTURAL_T {
        // TODO Implement this
    }
    return children
}

def document_symbol(id: int, params: DocumentSymbolParams) {
    let path = uri_to_path(params.textDocument.uri)
    let module = toolchain::find_module_by_path(path)
    if not module { send_reply(id, null); return }

    let symbols = vector::make(DocumentSymbol)

    for var i in 0..module.node.value.program.body.length {
        let node = module.node.value.program.body[i]
        if not node { continue }
        if node.kind == parser::NodeKind::TYPE_DECL {
            for var i in 0..node.value.type_decl.left.length {
                var name = node.value.type_decl.left[i]
                if name.kind == parser::NodeKind::TYPE_CONSTRUCTOR {
                    name = name.value.type_constructor.name
                }
                let tpe = name.tpe
                if not tpe { continue } 

                var range_loc = source_loc_to_range(path, name.loc)

                var children = vector::make(DocumentSymbol)
                if i < vector::length(node.value.type_decl.right) {
                    let right = node.value.type_decl.right[i]
                    if not right { continue }
                    children = type_children(path, right)
                    range_loc = source_loc_to_range(path, right.loc)
                }

                var kind = SymbolKind::Constant
                if typechecking::is_struct(tpe) {
                    kind = SymbolKind::Struct
                } else if typechecking::is_enum(tpe) {
                    kind = SymbolKind::Enum
                } else if typechecking::is_interface(tpe) {
                    kind = SymbolKind::Interface
                }

                symbols.push({
                    name = parser::identifier_to_str(name),
                    kind = kind !int,
                    range = range_loc,
                    selectionRange = range_loc,
                    children = children.to_array()
                } !DocumentSymbol)
            }
        } else if node.kind == parser::NodeKind::DEF {
            if not node.value.def_.name or not node.tpe { continue }
            
            let tpe = node.tpe
            var name: StringBuffer = parser::identifier_to_str(node.value.def_.name) + "("
            for var i in 0..tpe.parameter_t.length {
                let param = tpe.parameter_t[i]
                name += debug::type_to_str(param.tpe)
                if i < tpe.parameter_t.length - 1 {
                    name += ", "
                }
            }
            name += ")"

            symbols.push({
                name = name,
                kind = SymbolKind::Function !int,
                range = source_loc_to_range(path, node.loc),
                selectionRange = source_loc_to_range(path, node.value.def_.name.loc),
                children = allocate_ref(DocumentSymbol, 0)
            } !DocumentSymbol)
        } else if node.kind == parser::NodeKind::VAR_DECL {

        }
    }

    send_reply(id, json::serialize(*symbols.to_array()))
}

type InlayHintParams = struct {
    textDocument: TextDocumentIdentifier
    range: Range
}

type InlayHintKind = enum {
    Type = 1
    Parameter = 2
}

type InlayHint = struct {
    position: U16Position
    _label: Str
    kind: int
}

def inlay_hint(id: int, params: InlayHintParams) {
    let inlay_hints = vector::make(InlayHint)

    let path = uri_to_path(params.textDocument.uri)
    let module = toolchain::find_module_by_path(path)
    if not module { send_reply(id, null) }

    for var i in 0..module.inlay_hints.length {
        let node = module.inlay_hints[i]
        let left = node.value.var_decl.left
        for var j in 0..left.length {
            let id_decl = left[j]
            if id_decl and id_decl.kind == parser::NodeKind::ID_DECL and not id_decl.value.id_decl.tpe {
                let ident = id_decl.value.id_decl.value
                if ident and ident.tpe {
                    inlay_hints.push({
                        position = document::u8_pos_to_u16(path, { line = ident.loc.end_line, character = ident.loc.end_column - 1 } !U8Position),
                        _label = ": " + debug::type_to_str(ident.tpe),
                        kind = InlayHintKind::Type !int
                    } !InlayHint)
                }
            }
        }
    }

    let arr = inlay_hints.to_array()
    send_reply(id, json::serialize(*arr))
}

type FileChangeType = enum {
    Created = 1
    Changed = 2
    Deleted = 3
}

type FileEvent = struct {
    uri: Str
    _type: uint
}

type DidChangeWatchedFilesParams = struct {
    changes: &[FileEvent]
}

def did_change_watched_files(id: int, params: DidChangeWatchedFilesParams) {
    for var event in @params.changes {
        switch event._type {
        case FileChangeType::Created:
            document::on_created(event.uri)
        case FileChangeType::Changed:
            document::on_changed(event.uri)
        case FileChangeType::Deleted:
            document::on_deleted(event.uri)
        }
    }
}

type InitializeParams = struct {
    processId: int
    clientInfo: struct {
        name: Str
        version: Str
    }
    locale: Str
    rootPath: Str
    rootUri: Str
    initializationOptions: &Json
    capabilities: &Json
    trace: Str
    workspaceFolders: &[WorkspaceFolder]
}

def initialize(id: int, params: InitializeParams) {
    let result = json::make_object()

    let capabilities = json::make_object()
    capabilities["positionEncoding"] = "utf-16" // TODO Also support utf-8

    let sync_options = json::make_object()
    sync_options["change"] = 2 // Incremental
    sync_options["openClose"] = true

    let save_options = json::make_object()
    save_options["includeText"] = true
    sync_options["save"] = save_options

    let completion_options = json::make_object()

    let trigger_characters = json::make_array()
    trigger_characters.push(".")
    trigger_characters.push(":")
    completion_options["triggerCharacters"] = trigger_characters
    
    let completion_item = json::make_object()
    completion_item["labelDetailsSupport"] = true
    completion_options["completionItem"] = completion_item

    let signature_help_options = json::make_object()

    let sh_trigger_characters = json::make_array()
    sh_trigger_characters.push("(")
    sh_trigger_characters.push(",")
    signature_help_options["triggerCharacters"] = sh_trigger_characters

    capabilities["textDocumentSync"] = sync_options
    capabilities["completionProvider"] = completion_options
    capabilities["signatureHelpProvider"] = signature_help_options
    capabilities["definitionProvider"] = true
    capabilities["hoverProvider"] = true
    capabilities["documentSymbolProvider"] = true
    capabilities["inlayHintProvider"] = true

    let serverInfo = json::make_object()
    serverInfo["name"] = "Princess Language Server"
    serverInfo["version"] = VERSION

    result["capabilities"] = capabilities
    result["serverInfo"] = serverInfo
    
    send_reply(id, result)
}

def initialized {
    let watcherPr = json::make_object()
    watcherPr["globPattern"] = "**/*.pr"
    let watchers = json::make_array()
    watchers.push(watcherPr)

    let registerOptions = json::make_object()
    registerOptions["watchers"] = watchers

    let registration = json::make_object()
    registration["id"] = "didChangeWatchedFiles"
    registration["method"] = "workspace/didChangeWatchedFiles"
    registration["registerOptions"] = registerOptions

    let registrations = json::make_array()
    registrations.push(registration)

    let obj = json::make_object()
    obj["registrations"] = registrations

    def on_register(reply: &Json) {}
    send_request("client/registerCapability", obj, reply = on_register)
}

type Header = &Vector(String)

def get(header: Header, key: Str) -> Str {
    for var i in 0..header.length {
        let entry = header[i]
        if entry.starts_with(key + ": ") {
            return entry.substring(entry.index_of(": ") + 2)
        }
    }
    return {} !Str
}

def read_header -> Header {
    let header = vector::make(String)
    loop {
        var s: StringBuffer = ""
        loop {
            var c: char
            if read(std::stdin(), *c) < 1 { return header }
            if c == '\r' {
                if read(std::stdin(), *c) < 1 { return header }
                if c == '\n' {
                    break
                }
            } else {
                s += c
            }
        }
        if s.length == 0 {
            break
        }
        header.push(s)
    }
    return header
}

def send_message(payload: &Json) {
    let message = to_string(payload)
    print("Content-Length: ", message.length, "\r\n")
    print("Content-Type: application/vscode-jsonrpc charset=utf-8\r\n")
    print("\r\n")
    print(message)
    fflush(std::stdout())
}

def log_message(str: Str, tpe: int = MessageType::Log) {
    let obj = json::make_object()
    obj["type"] = tpe
    obj["message"] = str
    send_request("window/logMessage", obj)
}

var request_id: size_t = 0
export def send_request(method: Str, params: &Json, reply: (&Json) -> ()) {
    on_reply(request_id, reply)
    send_request(method, params)
}

export def send_request(method: Str, params: &Json) {
    let obj = json::make_object()
    obj["jsonrpc"] = "2.0"
    obj["id"] = request_id !int
    obj["method"] = method
    obj["params"] = params
    send_message(obj)
    request_id += 1
}

def send_notification(method: Str, params: &Json) {
    let obj = json::make_object()
    obj["jsonrpc"] = "2.0"
    obj["method"] = method
    obj["params"] = params
    send_message(obj)
}

def send_error(id: int, error_code: int, message: Str, data: &Json = null) {
    error(message, "\n")

    let obj = json::make_object()
    obj["jsonrpc"] = "2.0"
    obj["id"] = id

    let error = json::make_object()
    error["code"] = error_code
    error["message"] = message
    if data {
        error["data"] = data
    }
 
    obj["error"] = error

    send_message(obj)
}

def send_reply(id: int, data: &Json) {
    let obj = json::make_object()
    obj["jsonrpc"] = "2.0"
    obj["id"] = id
    obj["result"] = data
    send_message(obj)
}

def read_message -> &Json {
    let header = read_header()
    if not header {
        send_error(0, ParseError, "Invalid header")
        return null
    }
    let content_length = parse_int(header.get("Content-Length"))
    if content_length == 0 {
        send_error(0, ParseError, "Invalid Content-Length")
        return null
    }
    let encoding = header.get("Content-Type")
    if encoding {
        if encoding != "application/vscode-jsonrpc charset=utf-8" and
            encoding != "application/vscode-jsonrpc charset=utf8" {
            
            send_error(0, ParseError, "Incalid Content-Type")
            return null
        }
    }

    let message_str = zero_allocate(char, content_length + 1)
    read(std::stdin(), message_str, content_length)
    let message = json::parse(message_str)
    if message.status == json::Status::JSON_ERROR {
        send_error(0, ParseError, "Can't parse content as json")
        return null
    }
    return message
}

var is_initialized = false
var is_shutdown = false
var reply_handlers = map::make(size_t, type (&Json) -> ())

def on_reply(id: size_t, handler: (&Json) -> ()) {
    reply_handlers[id] = handler
}

export def main -> int {
    cache::setup_error_handler()
    document::setup_file_loader()

    // Preparing toolchain
    toolchain::prepare_preload()
    toolchain::reset_types()

    loop {
        let message = read_message()
        if message {
            let id = message["id"].as_int() if message.has_item("id") else 0
            var method = message["method"].as_string() if message.has_item("method") else {} !Str
            let params = message["params"]

            if not method {
                if message.has_item("error") {
                    let error_msg = message["error"]["message"].as_string()
                    error("Error: ", error_msg, "\n")
                } else {
                    let request_id = id !size_t
                    // This is a response
                    if not reply_handlers.contains(request_id) {
                        //send_error(id, InvalidRequest, "Not a valid request id")
                        continue
                    }
                    let handler = reply_handlers[request_id]
                    handler(message["result"])
                    reply_handlers.remove(request_id)
                    continue
                }
            }
        
            if method == "exit" {
                if is_shutdown {
                    return 0
                } else {
                    return 1
                }
            }

            if is_shutdown {
                send_error(id, InvalidRequest, "Server is shut down")
                continue
            }

            if method == "shutdown" {
                is_shutdown = true
                send_reply(id, null);
                continue
            }

            if not is_initialized {
                if method == "initialize" {
                    is_initialized = true
                    let p = json::deserialize(params, InitializeParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { initialize(id, p.get()) }
                } else {
                    send_error(id, ServerNotInitialized, "Server not initialized!")
                }
                continue
            }

            if method {
                if method == "initialized" {
                    initialized()
                } else if method == "textDocument/definition" {
                    let p = json::deserialize(params, DefinitionParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { go_to_definition(id, p.get()) }
                } else if method == "textDocument/hover" {
                    let p = json::deserialize(params, HoverParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { hover(id, p.get()) }
                } else if method == "textDocument/completion" {
                    let p = json::deserialize(params, CompletionParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { complete(id, p.get()) }
                } else if method == "textDocument/signatureHelp" {
                    let p = json::deserialize(params, SignatureHelpParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { signature_help(id, p.get()) }
                } else if method == "textDocument/documentSymbol" {
                    let p = json::deserialize(params, DocumentSymbolParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { document_symbol(id, p.get()) }
                } else if method == "textDocument/didOpen" {
                    let p = json::deserialize(params, DidOpenTextDocumentParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { did_open(id, p.get()) }
                } else if method == "textDocument/didChange" {
                    let p = json::deserialize(params, DidChangeTextDocumentParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { did_change(id, p.get()) }
                } else if method == "textDocument/didSave" {
                    let p = json::deserialize(params, DidSaveTextDocumentParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { did_save(id, p.get()) }
                } else if method == "textDocument/inlayHint" {
                    let p = json::deserialize(params, InlayHintParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { inlay_hint(id, p.get()) }
                } else if method == "workspace/didChangeWatchedFiles" {
                    let p = json::deserialize(params, DidChangeWatchedFilesParams)
                    if not p.exists { send_error(id, ParseError, "Couldn't parse parameters") }
                    else { did_change_watched_files(id, p.get()) }
                } else {
                    send_error(id, MethodNotFound, "Method " + method + " not found")
                }
            } else {
                send_error(id, MethodNotFound, "No method specified")
            }
        }
    }
    return 1
}