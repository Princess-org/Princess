import map
import set
import vector
import util
import lexer
import parser
import consteval
import toolchain
import errors
import typechecking
import compiler
import scope
import util

import document
import server

export def setup_error_handler {
    errors::error_handler = *error_handler
}

type DiagnosticSet = &Set(errors::Diagnostic)
type ModuleDiagnostics = struct {
    members: &Map(uint64, DiagnosticSet)
    diagnostics: DiagnosticSet
}

let diagnostics = map::make(type &ModuleDiagnostics)

def error_to_diagnostic(error: errors::Diagnostic) -> server::Diagnostic {
    return {
        range = {
            start = document::u8_pos_to_u16(error.filename, { error.line, error.column } !server::U8Position),
            end = document::u8_pos_to_u16(error.filename, { error.end_line, error.end_column } !server::U8Position)
        } !server::Range,
        severity = server::DiagnosticSeverity::Error !int,
        message = error.message
    } !server::Diagnostic
}

def publish_diagnostics(module: &toolchain::Module) {
    if not diagnostics.contains(module.filename) { return }
    let mdiags = diagnostics[module.filename]

    let resolved = vector::make(server::Diagnostic)

    let keys = mdiags.members.keys()
    for var key in @keys {
        for var diagnostic in @map::keys(mdiags.members[key]) {   // TODO This is clashing with keys somehow
            resolved.push(error_to_diagnostic(diagnostic))
        }
    }
    for var diagnostic in @map::keys(mdiags.diagnostics) {
        resolved.push(error_to_diagnostic(diagnostic))
    }

    var params: server::PublishDiagnosticsParams
    params.uri = server::path_to_uri(module.filename)
    params.diagnostics = resolved.to_array()

    server::publish_diagnostics(params)
}

export def error_handler(diagnostic: errors::Diagnostic) {
    var mdiags = diagnostics.get_or_default(diagnostic.filename, null)
    if not mdiags {
        mdiags = {
            members = map::make(uint64, DiagnosticSet),
            diagnostics = set::make(errors::Diagnostic)
        } !ModuleDiagnostics
        diagnostics[diagnostic.filename] = mdiags
    }

    if diagnostic.signature != 0 {
        var fdiags = mdiags.members.get_or_default(diagnostic.signature, null)
        if not fdiags {
            fdiags = set::make(errors::Diagnostic)
            mdiags.members[diagnostic.signature] = fdiags
        }
        fdiags.add(diagnostic)
    } else {
        mdiags.diagnostics.add(diagnostic)
    }
}

export def offset_errors(path: Str, start: server::U8Position, end: server::U8Position, text: Str) {
    if not diagnostics.contains(path) { return }
    let mdiags = diagnostics[path]

    for var key in @mdiags.members.keys() {
        let fdiags = mdiags.members[key]
        let new = set::make(errors::Diagnostic)
        for var diagnostic in @fdiags.keys() {
            if start.line != end.line or start.character != end.character {
                if diagnostic.line > end.line {
                    diagnostic.line -= end.line - start.line
                    diagnostic.end_line -= end.line - start.line
                }
                if diagnostic.line == end.line and end.character <= diagnostic.column {
                    if diagnostic.line == diagnostic.end_line {
                        if start.line == end.line {
                            diagnostic.column -= end.character - start.character
                            diagnostic.end_column -= end.character - start.character
                        } else {
                            diagnostic.column -= end.character
                            diagnostic.end_column -= end.character
                        }
                    } else {
                        if start.line == end.line {
                            diagnostic.column -= end.character - start.character
                        } else {
                            diagnostic.column -= end.character
                        }
                    }
                }
            }
            if diagnostic.line >= start.line {
                var last_newline = 0
                var nlc = 0
                for var i in 0..text.length() {
                    let c = text[i]
                    if c == '\n' {
                        last_newline = i
                        nlc += 1
                    }
                }
                if nlc > 0 {
                    diagnostic.line += nlc
                    diagnostic.end_line += nlc
                }
                if diagnostic.line == start.line and start.character <= diagnostic.column {
                    diagnostic.column += text.length() - 1 - last_newline
                    diagnostic.end_column += text.length() - 1 - last_newline
                }
            }
            
            new.add(diagnostic)
        }

        mdiags.members[key] = new
    }
}


def reset_state(module: &toolchain::Module) {
    // Reset the state
    module.state.scope = module.scope
    module.state.function_stack = vector::make(type &compiler::Function)
    module.state.function_stack.push(module.node.value.program.function)

    module.compiler_state.no_instructions = true
    module.compiler_state.function_stack = vector::make(type &compiler::Function)
    module.compiler_state.function_stack.push(module.node.value.program.function)
    module.compiler_state.current_block = compiler::make_block()
}

def consteval_node(module: &toolchain::Module, node: &parser::Node) {
    parser::clear(node)

    if not node { return }
    node.parent = module.node
    node.scope = module.scope

    reset_state(module)

    var mdiags = diagnostics.get_or_default(module.filename, null)
    if mdiags {
        mdiags.members.remove(node.signature_hash)
    }

    if node.kind == parser::NodeKind::DEF {
        consteval::walk_Def(node, module.state)
    } else if node.kind == parser::NodeKind::VAR_DECL {
        consteval::walk_top_VarDecl(node, module.state)
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        // consteval messes with the nodes a bit so we have to restore the original state
        // all copies of the type declaration have the same hash as the node, we need
        // to remove all of them
        if node.parent.body.index_of(node) == -1 {
            let new_body = vector::make(type &parser::Node)
            for var i in 0..node.parent.body.length {
                let n = node.parent.body[i]
                if n._hash != node._hash {
                    new_body.push(n)
                }
            }

            node.parent.value.program.body = new_body
            node.parent.body = new_body
            insert_at_position(node.parent, node)
        }

        consteval::walk_TypeDecl(node, module.state)
    }
}

def recompile_node(module: &toolchain::Module, node: &parser::Node) {
    if not node { return }
    node.parent = module.node
    node.scope = module.scope

    reset_state(module)

    if node.kind == parser::NodeKind::DEF {
        if not node.value.def_.is_compiled and not typechecking::is_polymorph(node.tpe) {
            if node.value.def_.function {
                node.value.def_.function.is_typechecked = false
                module.result.functions.remove(node.value.def_.function.name)
            }
            typechecking::walk_Def(node, module.state)
            compiler::verify_function(node)
            compiler::predeclare_function(node.tpe, module)
            compiler::create_function(node, node.tpe, node.value.def_.body, node.inner_scope, null, module.compiler_state)
        }
    } else if node.kind == parser::NodeKind::VAR_DECL {
        typechecking::walk_top_VarDecl(node, module.state)
        let assign = compiler::walk_top_VarDecl(node, module.compiler_state, false)
        compiler::walk_Assign(assign, module.compiler_state)
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        for var i in 0..node.value.type_decl.children.length {
            let child = node.value.type_decl.children[i]
            if not child.svalue {
                typechecking::walk_TypeDecl(child, module.state)
            }
            compiler::walk_TypeDecl(child, module.compiler_state)
        }
    }
}

type ToResolve = struct {
    module: &toolchain::Module
    node: &parser::Node
}
export def hash(to_resolve: ToResolve) -> uint64 {
    return (to_resolve.node !*) !uint64
}
export def == (this: ToResolve, other: ToResolve) -> bool {
    return this.node == other.node
}
export def != (this: ToResolve, other: ToResolve) -> bool {
    return not (this == other)
}

var nodes_to_resolve = set::make(ToResolve)

def recompile_nodes {
    let keys = nodes_to_resolve.keys()
    for var i in 0..keys.size {
        let key = keys[i]
        consteval_node(key.module, key.node)
    }
    for var i in 0..keys.size {
        let key = keys[i]
        recompile_node(key.module, key.node)
    }
    nodes_to_resolve.clear()
}

def queue_node(module: &toolchain::Module, node: &parser::Node) {
    if node.kind == parser::NodeKind::DEF {
        node.value.def_.is_compiled = false
    }
    nodes_to_resolve.add({ module, node } !ToResolve)
}

def resolve_dependencies(node: &parser::Node) {
    if not node { return } 
    if node.kind == parser::NodeKind::VAR_DECL {
        for var i in 0..node.value.var_decl.left.length {
            let left = node.value.var_decl.left[i]
            if not left { continue }
            resolve_dependencies(left.svalue)
        } 
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        for var i in 0..node.value.type_decl.left.length {
            let left = node.value.type_decl.left[i]
            if not left { continue }
            resolve_dependencies(left.svalue)
        } 
    } else {
        let value = node.svalue
        resolve_dependencies(value)
    }
}

def resolve_dependencies(value: &scope::Value) {
    if not value { return }
    let keys = value.dependants.keys()
    for var dependant in @keys {
        let node = dependant.module.node
        for var i in 0..node.value.program.body.length {
            let n = node.value.program.body[i]
            if n.kind == parser::NodeKind::DEF {
                if n.svalue and n.svalue.ident == dependant {
                    remove(dependant.module, n)
                    queue_node(dependant.module, n)
                    break
                }
            } else if n.kind == parser::NodeKind::VAR_DECL {
                for var i in 0..n.value.var_decl.left.length {
                    let left = n.value.var_decl.left[i]
                    if left and left.svalue and left.svalue.ident == dependant {
                        remove(dependant.module, n)
                        queue_node(dependant.module, n)
                        break
                    }
                }
            } else if n.kind == parser::NodeKind::TYPE_DECL {
                for var i in 0..n.value.type_decl.left.length {
                    let left = n.value.type_decl.left[i]
                    if left and left.svalue and left.svalue.ident == dependant {
                        remove(dependant.module, n)
                        queue_node(dependant.module, n)
                        break
                    }
                }
            }
        }
    }
}

def remove(module: &toolchain::Module, node: &parser::Node) {
    if not node { return }
    let new_queue = set::make(ToResolve)
    for var to_resolve in @nodes_to_resolve.keys() {
        if to_resolve.node != node {
            new_queue.add(to_resolve)
        }
    }
    nodes_to_resolve = new_queue
    
    var mdiags = diagnostics.get_or_default(module.filename, null)
    if mdiags {
        mdiags.members.remove(node.signature_hash)
    }

    if node.kind == parser::NodeKind::VAR_DECL {
        for var i in 0..node.value.var_decl.left.length {
            let left = node.value.var_decl.left[i]
            if not left { continue }
            if left.svalue {
                module.unresolved.remove(left.svalue.ident)
                scope::remove(module.scope, left.svalue)
            }
        } 
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        for var i in 0..node.value.type_decl.left.length {
            let left = node.value.type_decl.left[i]
            if not left { continue }
            if left.svalue {
                module.unresolved.remove(left.svalue.ident)
                scope::remove(module.scope, left.svalue)
            }
        }
    } else if node.kind == parser::NodeKind::DEF {
        // Remove all inlay hints related to this function
        let new_inlay_hints = vector::make(type &parser::Node)
        for var i in 0..module.inlay_hints.length {
            var inlay = module.inlay_hints[i]
            var parent = inlay
            var found = false
            while parent {
                if parent == node {
                    found = true
                    break
                }
                parent = parent.parent
            }
            if not found {
                new_inlay_hints.push(inlay)
            }
        }
        module.inlay_hints = new_inlay_hints


        let value = node.svalue
        if value {
            module.unresolved.remove(value.ident)
            scope::remove(module.scope, value)
        }
    }
}

def recompile_unresolved(ident: scope::Ident) {
    let keys1 = toolchain::modules.keys()
    for var key1 in @keys1 {
        let module = toolchain::modules[key1]
        let keys2 = map::keys(module.unresolved)
        for var key2 in @keys2 {
            let value = module.unresolved[key2]
            let keys3 = value.unresolved.keys()
            for var unresolved in @keys3 {
                if unresolved.fuzzy_equals(ident) {
                    remove(value.ident.module, value.node)
                    queue_node(value.ident.module, value.node)
                }
            }
        }
    }
}

def recompile_unresolved(node: &parser::Node) {
    if node.kind == parser::NodeKind::DEF {
        let name = typechecking::last_ident_to_str(node.value.def_.name)
        let ident = scope::make_ident(name)
        recompile_unresolved(ident)
    } else if node.kind == parser::NodeKind::VAR_DECL {
        for var i in 0..node.value.var_decl.left.length {
            let left = node.value.var_decl.left[i]
            if not left or left.kind != parser::NodeKind::IDENTIFIER { continue }
            let name = typechecking::last_ident_to_str(left)
            let ident = scope::make_ident(name)
            recompile_unresolved(ident)
        } 
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        for var i in 0..node.value.type_decl.left.length {
            var left = node.value.type_decl.left[i]
            if not left { continue }
            if left.kind == parser::NodeKind::TYPE_CONSTRUCTOR {
                left = left.value.type_constructor.name
            }
            if not left or left.kind != parser::NodeKind::IDENTIFIER { continue }
            let name = typechecking::last_ident_to_str(left)
            let ident = scope::make_ident(name)
            recompile_unresolved(ident)
        } 
    }
}

def find_signature(n: &parser::Node, program: &parser::Node) -> &parser::Node, size_t {
    if n.signature_hash == 0 { return null, 0 }
    for var j in 0..program.value.program.body.length {
        let n2 = program.value.program.body[j]
        if n2 and n2.kind == n.kind {
            if n.signature_hash == n2.signature_hash {
                return n2, j
            }
        }
    }
    return null, 0
}

def transfer_state(frm: &parser::Node, to: &parser::Node) {
    if frm.kind == parser::NodeKind::DEF {
        let fun = frm.value.def_.function
        to.value.def_.function = fun
        if fun and fun.value {
            fun.value.node = to
        }
    }
}

def insert_at_position(node: &parser::Node, n: &parser::Node) {
    var found = false
    for var j in 0..node.value.program.body.length {
        let n2 = node.value.program.body[j]
        if n2.loc.line > n.loc.line or
            (n2.loc.line == n.loc.line and n2.loc.column > n.loc.column) {
            
            node.value.program.body.insert(j, n)
            found = true
            break
        }
    }
    if not found {
        node.value.program.body.push(n)
    }
}

export def recompile(path: Str) { 
    recompile(path, null)
}

export def recompile(path: Str, changes: &[server::TextDocumentChangeEvent]) {
    var module = toolchain::find_module_by_path(path)

    let mdiags = diagnostics.get_or_default(path, null)
    if mdiags {
        mdiags.diagnostics = set::make(errors::Diagnostic)
    }

    errors::current_function = null
    errors::current_signature = 0

    if not module or not changes {
        error("Compiling ", path, "\n")
        // Do a full compile
        module = toolchain::consteval_file(path, toolchain::extract_module_name(path), recompile = true)
        module.compiler_state.no_instructions = true
        typechecking::typecheck(module)
        compiler::compile(module)

    } else {
        // Create a diff and only compile functions as needed
        let buf = document::load_file(path)
        let lines = util::split_lines(buf)
        let tokens = lexer::lex(buf)

        module.text = buf
        module.lines = lines
        
        let new_node = parser::parse(tokens, lines, path, toolchain::extract_module_name(path))
        delete(tokens)

        // Current imports
        var old_imports = module.scope.imports
        if not old_imports {
            old_imports = vector::make(scope::ImportedModule)
        }

        // Remove all imports
        module.scope.imports = null
        consteval::import_stdlib(module.state)

        let node = module.node
        let new_body = vector::make(type &parser::Node)

        parser::offset(node, changes)

        module.state.shallow_walk = true
        consteval::consteval(new_node, module.state)
        module.state.shallow_walk = false

        // compile top level code
        typechecking::typecheck(new_node, module.state)
        compiler::compile(new_node, module.compiler_state)

        // Iterate top level functions
        for var i in 0..new_node.value.program.body.length {
            let n = new_node.value.program.body[i]
            if n.kind != parser::NodeKind::DEF and
                n.kind != parser::NodeKind::VAR_DECL and
                n.kind != parser::NodeKind::TYPE_DECL {
                n.parent = node
                new_body.push(n)
                continue
            }

            var found = false
            for var j in 0..node.value.program.body.length {
                let n2 = node.value.program.body[j]
                if n2._hash == n._hash {
                    found = true
                    new_body.push(n2)
                }
            }
            if not found {
                // Check for signatures
                var n2, loc = find_signature(n, node)
                if not n2 {
                    // Add new node
                    new_body.push(n)
                    queue_node(module, n)
                    recompile_unresolved(n)
                } else {
                    remove(module, n2)
                    transfer_state(n2, n)

                    new_body.push(n)

                    queue_node(module, n)
                    if n.kind != parser::NodeKind::DEF or n2.loc != n.loc {
                        resolve_dependencies(n2)
                    }
                }
            }
        }

        // Remove unused functions from old body
        for var i in 0..node.value.program.body.length {
            let n = node.value.program.body[i]
            if n and n.kind != parser::NodeKind::DEF and
                n.kind != parser::NodeKind::VAR_DECL and
                n.kind != parser::NodeKind::TYPE_DECL {
                continue
            }

            var found = false
            for var j in 0..new_node.value.program.body.length {
                let n2 = new_node.value.program.body[j]
                if n2._hash == n._hash {
                    found = true
                    break
                }
            }
            if not found {
                remove(module, n)
                resolve_dependencies(n)
            }
        }
        
        node.value.program.body = new_body
        node.body = new_body

        var new_imports = module.scope.imports
        if not new_imports {
            new_imports = vector::make(scope::ImportedModule)
        }
        
        // Compare imports to old imports
        for var i in 0..old_imports.length {
            let imprt = old_imports[i]
            var found = false
            for var j in 0..new_imports.length {
                let nimport = new_imports[j].module
                if nimport == imprt.module {
                    found = true
                    break
                }
            }
            if not found {
                // Remove import
                let all_functions = imprt.module.scope.all_functions()
                for var function in all_functions {
                    for var dependant in @function.dependants.keys() {
                        if dependant.module == module {
                            let n = dependant.find().node
                            remove(module, n)
                            queue_node(module, n)
                        }
                    }
                }
            }
        }
        for var i in 0..new_imports.length {
            let imprt = new_imports[i]
            var found = false
            for var j in 0..old_imports.length {
                let nimport = old_imports[j].module
                if nimport == imprt.module {
                    found = true
                    break
                }
            }
            if not found {
                // Add import
                let all_functions = imprt.module.scope.all_functions()
                for var function in all_functions {
                    for var ident in @module.unresolved.keys() {
                        let value = module.unresolved[ident]
                        for var unresolved in @value.unresolved.keys() {
                            if function.ident == unresolved {
                                remove(module, value.node)
                                queue_node(module, value.node)
                            }
                        }
                    }
                }
            }
        }

        recompile_nodes()
    }

    publish_diagnostics(module)
    server::send_request("workspace/inlayHint/refresh", null)
}

export def check_imports(path: Str) -> bool {
    var did_change = false
    let keys = toolchain::modules.keys()
    for var i in 0..keys.size {
        let module = toolchain::modules[keys[i]]
        for var import_ in @map::keys(module.imports) {
            let abspath = toolchain::find_module_file(import_, module)
            if abspath == path {
                recompile(module.filename)
                did_change = true
            }
        }
    }
    return did_change
}