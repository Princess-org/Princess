
#if defined WIN32 {
    import windows
} else {
    import linux
}

import vector

export def find_substr(str: &string, search: &string, start: int) -> int {
    if start >= length(str) {
        return -1
    }
    for var i in start..length(str) {
        if str[i] == search[0] {
            var j = 0
            while j < length(search) {
                if i + j >= length(str) {
                    return -1
                }
                if str[i + j] != search[j] {
                    break
                }
                j += 1
            }
            if j == length(search) {
                return i
            }
            i += j
        }
    }
    return -1
}

export def replace_all(str: &string, search: &string, replace: &string) -> &string {
    var ret: &string = ""

    var i = 0
    var j = find_substr(str, search, 0)
    while j != -1 {
        var before = zero_allocate(char, j - i + 1)
        memcopy(str.value ++ i, before.value, j - i)
        ret += before
        ret += replace
        free(before)

        i = j + (length(search) !int)
        j = find_substr(str, search, i)
    }
    var after = zero_allocate(char, length(str) - i + 1)
    memcopy(str.value ++ i, after.value, length(str) - i)
    ret += after
    free(after)
    return ret
}

export def split_lines(s: &string) -> &[&string] {
    let size = length(s)

    var lines = 1
    for var i in 0..size {
        let ch = s[i]
        if ch == '\n' {
            lines += 1
        }
    }
    var result = allocate_ref(type &string, lines)
    if size == 0 {
        result[0] = ""
        return result
    }

    var line = 0
    var j = 0
    var k = 0
    var l = 0
    while j < size {
        let ch = s[j]
        if ch == '\n' {
            if j - 1 >= 0 and s[j - 1] == '\r' {
                l = j - 2
            } else {
                l = j - 1
            }

            result[line] = s.substring(k, max(l, k) !size_t + 1)

            k = j + 1
            line += 1
        }
        j += 1
    }

    result[line] = s.substring(min(k, size - 1) !size_t, size)

    return result
}

export def split(str: &string, by: &string) -> &[&string] {
    let res = vector::make(type &string)
    if str.index_of(by) < 0 {
        res.push(str)
        return res.to_array()
    }

    var start: int64 = 0
    var index = str.index_of(by)
    while index > 0 {
        res.push(str.substring(start, index))
        start = index + by.length()
        index = str.index_of(by, start)
    }
    res.push(str.substring(start))
    return res.to_array()
}

export def exe_folder -> &string {
    return dirname(executable_file())
}

export def double_to_hex_str(f: double) -> &string {
    var n = @(*f !*uint64)
    return int_to_hex_str(n)
}

export def exists(filename: &string) -> bool {
    let fp = open(@filename, "r")
    if fp {
        close(fp)
        return true
    }
    return false
}

export def gcd(a: int, b: int) -> int {
    while b != 0 {
        var t = b
        b = a % b
        a = t
    }
    return a
}

export def lcm(a: int, b: int) -> int { 
    return (a * b) / gcd(a, b)
}

export def millis -> int64 {
    #if defined WIN32 {
        var now: cstd::s__timespec64
        cstd::_timespec64_get(*now, 1)
    } else {
        var now: cstd::s_timespec
        cstd::timespec_get(*now, 1)
    }
    return (now.tv_sec !int64) * 1000 + (now.tv_nsec !int64) / 1000000
}

// TODO Unicode...
// TODO StringBuffer
export def repr(s: &string, zero: bool) -> &string {
    var res: &string = "\""
    for var i in 0..length(s) {
        let c = s[i] !uint8
        if c < 32 or c > 126 or c == 34 {
            let esc = int_to_hex_str(c, prefix = false)
            res += '\\'
            if length(esc) == 2 {
                res += esc
            } else {
                res += '0' + esc
            }
        } else if c == 92 {
            res += "\\5C" 
        } else {
            res += c
        }
    }
    if zero {
        res += "\\00"
    }
    res += '"'
    return res
}

export type TermSize = struct {
    row: int
    col: int
}

export def get_terminal_size -> TermSize {
    #if defined WIN32 {
        var csbi: windows::CONSOLE_SCREEN_BUFFER_INFO
        windows::GetConsoleScreenBufferInfo(windows::GetStdHandle(-11), *csbi)
        return {
            csbi.srWindow.Bottom - csbi.srWindow.Top + 1,
            csbi.srWindow.Right - csbi.srWindow.Left + 1
        } !TermSize
    } else {
        const TIOCGWINSZ = 0x5413
        var winsize: linux::s_winsize
        linux::ioctl(1, TIOCGWINSZ, *winsize)
        return { winsize.ws_row, winsize.ws_col } !TermSize
    }
    
}

export def is_a_tty(fd: File) -> bool {
    #if defined WIN32 {
        return cstd::_isatty(cstd::fileno(fd)) == 1
    } else {
        return linux::isatty(cstd::fileno(fd)) == 1
    }
}

export def bytes_in_glyph(c: char) -> int {
    if c & 0b10000000 == 0 {
        return 1
    } else if c & 0b11100000 == 0b11000000 {
        return 2
    } else if c & 0b11110000 == 0b11100000 {
        return 3
    } else if c & 0b11111000 == 0b11110000 {
        return 4
    } else if c & 0b11111100 == 0b11111000 {
        return 5
    } else if c & 0b11111110 == 0b11111100 {
        return 6
    }
    return 1
}

// Most basic unicode handling
export def count_glyphs(str: &string, until: size_t) -> size_t {
    var i = 0
    var count = 0
    while i < until {
        let b = str[i]
        i += bytes_in_glyph(b)
        count += 1
    }
    return count
}

export def count_glyphs(str: &string) -> size_t {
    return count_glyphs(str, length(str))
}