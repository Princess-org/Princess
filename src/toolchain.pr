// This file handles all global state related to compiling

import vector
import util
import map
import set
import lexer
import compiler
import parser
import typechecking
import scope
import codegen
import debug
import builtins
import consteval
import errors
import serialize
import json
import imports
import io
import constants

// Contains the scopes for already compiled modules 
// map of Module
export let modules = map::make(type &Module)
modules["builtin"] = builtins::builtins_module

export def find_module(name: Str) -> &Module {
    let keys = modules.keys()
    for var i in 0..keys.size {
        let module = modules[keys[i]]
        if module.module == name {
            return module
        }
    }
    return null
}

export def find_module_by_path(path: Str) -> &Module {
    let keys = modules.keys()
    for var i in 0..keys.size {
        let module = modules[keys[i]]
        if module.filename == path {
            return module
        }
    }
    return null
}

// When there's a context switch (i.e it does jump to another module) it
// calls START on the new module and when the previous module gains focus agin it signals
// CONTINUE and later END when the whole processing inside the current stage is done
export type ProgressUpdate = enum {
    START
    CONTINUE
    END
}

export var file_loader: (String) -> (String) = *load_file
export var progress_handler: (&Module, ProgressUpdate) -> ()

var last_module: &Module
export def progress_update(module: &Module, update: ProgressUpdate) {
    if last_module == module and update == ProgressUpdate::CONTINUE {
        return
    }
    //if progress_handler {
        progress_handler(module, update)
    //}
    last_module = module
}

export var include_path = vector::make(Str)
export var clang_flags = vector::make(Str)
export var link_directories = vector::make(Str)
export var link_libraries = vector::make(Str)
export var link_flags = vector::make(Str)
export var rdynamic = false

export var dependency_graph = false
export var no_incremental = false
// This is so that new entries don't depend on modules that are already collected
export var no_dependency_tracking = false
export var is_shared = false
export var no_stdlib = false

let include: Str = util::exe_folder() + "/../include"
let stdlib: Str = util::exe_folder() + "/../std"

#if defined WIN32 {
    include_path.push(include + "/windows")
} else if defined MACOS {
    include_path.push(include + "/macos")
} else {
    include_path.push(include + "/linux")
}

include_path.push(include)
include_path.push(stdlib)
include_path.push(".")
export var outfolder: Str = ".princess"

#if defined WIN32 {
    export var outfile: Str = "a.exe"
    let clang = "clang.exe"
} else {
    export var outfile: Str = "a.out"
    let clang = "clang-13"
}

// Debug stuff 
export var print_ast = false
export var print_tokens = false
export var print_typed_ast = false
export var emit_only_functions = false
export var continue_on_output = false
// This flag controls emitting debug information to llvm
export var debug_sym = false
export var main_file_name: Str

var main_module_file: Str

export def add_define(define: Str) {
    let tokens = lexer::lex(define)
    let program = parser::parse(tokens, [define.to_str()], "<internal>", "<internal>")
    if errors::error_count != 0 {
        error("Error parsing define `", define, "`\n")
        exit(1)
    }
    delete(tokens)
    let body = program.body
    if vector::length(body) != 1 {
        error("Too many statements in define `", define, "`\n")
        exit(1)
    }
    let node = vector::peek(body)
    if node.kind == parser::NodeKind::ASSIGN {
        if vector::length(node.value.assign.left) != vector::length(node.value.assign.right) != 1 {
            error("Invalid define `", define, "`, must be single assignment\n")
            exit(1)
        }
        let identifier = vector::peek(node.value.assign.left)
        let right = vector::peek(node.value.assign.right)

        if identifier.kind != parser::NodeKind::IDENTIFIER {
            error("Invalid define `", define, "`, must be single assignment\n")
            exit(1)
        }

        var value: &compiler::Value

        switch right.kind {
            /*case parser::NodeKind::STRING:
                @value = { 
                    kind = compiler::ValueKind::STRING, 
                    tpe = typechecking::make_static_array(builtins::char_, right.value.str.size), 
                    s = right.value.str 
                } !compiler::Value*/
            case parser::NodeKind::INTEGER:
                value = { kind = compiler::ValueKind::INT, tpe = builtins::int_, i = right.value.i } !&compiler::Value
            case parser::NodeKind::BOOLEAN:
                value = { kind = compiler::ValueKind::BOOL, tpe = builtins::bool_, i = right.value.i } !&compiler::Value
            case parser::NodeKind::CHAR:
                value = { kind = compiler::ValueKind::INT, tpe = builtins::char_, i = right.value.i } !&compiler::Value
            case parser::NodeKind::FLOAT:
                value = { kind = compiler::ValueKind::FLOAT, tpe = builtins::double_, f = right.value.f } !&compiler::Value
            case: error("Invalid define, `", define, "`, must be basic type\n")
        }
        scope::create_variable(builtins::builtins, identifier, parser::ShareMarker::NONE, parser::VarDecl::CONST, value.tpe, value)
    } else if node.kind == parser::NodeKind::IDENTIFIER {
        let value = { kind = compiler::ValueKind::BOOL, tpe = builtins::bool_, i = true !int64 } !&compiler::Value
        scope::create_variable(builtins::builtins, node, parser::ShareMarker::NONE, parser::VarDecl::CONST, builtins::bool_, value)
    } else {
        error("Invalid define `", define, "`, must be an assignment or an identifier\n")
        exit(1)
    }
}

export type Stage = enum {
    INITIAL
    READ_CACHE
    PREPROCESS
    RESOLVE_DEPENDENCIES
    TYPECHECKING
    COMPILING
    CODEGEN
    BACKEND
}

export type Module = struct {
    display_name: Str
    filename: Str
    file: Str
    module: Str
    text: Str
    lines: &[Str]
    tokens: *lexer::TokenList
    node: &parser::Node
    scope: &scope::Scope
    // This is code that gets inserted by consteval/eval
    // it must be prepended to the main function 
    code: &compiler::Block
    result: &compiler::Result
    // TODO This should not be needed
    imported: &SSet
    difile: &compiler::Value
    stage: Stage
    imports: &Set(Str)
    dependants: &Set(weak_ref(Module))
    // List of Type
    // This is a list of functions that are generated for dynamic dispatch
    dyn_dispatch: &Vector(&typechecking::Type)
    // This is needed to generate functions from create_destructor
    compiler_state: &compiler::State
    state: &typechecking::State
    unresolved: &Map(scope::Ident, weak_ref(scope::Value))
    // Incremental compilation
    // This is set to true if the source file is newer than the cache or 
    // any of the dependencies changed
    is_dirty: bool
    deserialize: &serialize::Deserialize
    closures: &Vector(&scope::Value)

    // For the LSP we need to keep track of the inlay hints per function
    inlay_hints: &Vector(&parser::Node)

    // This exists to make sure that we filter out modules that got deleted
    // without invalidating all of the scope::Idents out there
    is_deleted: bool
}

export def hash(this: &Module) -> uint64 {
    return map::hash(this.filename)
}
export def == (this: &Module, other: &Module) -> bool {
    if not this and not other { return true }
    if not this or not other { return false }
    return this.filename == other.filename
}
export def != (this: &Module, other: &Module) -> bool {
    return not (this == other)
}

export def make_module(
    filename: String, modulename: String, 
    node: &parser::Node, scpe: &scope::Scope, 
    text: String = null, lines: &[Str] = null,
    display_name: String = null
) -> &Module {

    let module = {
        text = text,
        lines = lines,
        display_name = display_name,
        filename = filename,
        module = modulename,
        node = node,
        scope = scpe,
        result = compiler::make_result(),
        code = compiler::make_block(),  
        imported = set::make(),
        imports = set::make(Str),
        dependants = set::make(type weak_ref(Module)),
        dyn_dispatch = vector::make(type &typechecking::Type),
        unresolved = map::make(scope::Ident, type weak_ref(scope::Value)),
        inlay_hints = vector::make(type &parser::Node),
        closures = vector::make(type &scope::Value),
        is_dirty = no_incremental
    } !&Module
    module.compiler_state = compiler::make_state(module)
    module.file = util::replace_all(module.module, "::", ".")
    return module
}

export def is_preload(module: &Module) -> bool {
    if module.module == "runtime" { 
        return true 
    } else if module.module == "const" {
        return false
    }

    let mfilename = absolute_path(module.filename)
    let ifilename = absolute_path(include)
    let std_filename = absolute_path(stdlib)

    return starts_with(mfilename, ifilename) or starts_with(mfilename, std_filename)
}

export def identifier_to_path(module: &parser::Node) -> Str {
    assert module.kind == parser::NodeKind::IDENTIFIER
    
    var path: StringBuffer = ""
    if module.value.identifier.prefixed {
        path = "/"
    }

    let ident = module.value.identifier.path
    let len = vector::length(ident)
    for var i in 0..len {
        var str = ident[i]
        path += str
        if i < len - 1 {
            path += "/"
        }
    }
    return path
}

export def find_module_file(module: &parser::Node, calling_module: &Module) -> Str {
    return find_module_file(identifier_to_path(module), calling_module)
}

export def find_module_file(path: String, calling_module: &Module) -> Str {
    if path == "runtime" {
        return "runtime"
    } else if path == "main" {
        return main_module_file
    }

    if not path.starts_with("/") and calling_module.filename {
        let base = dirname(calling_module.filename)
        let module_path = absolute_path(base + "/" + path + ".pr")
        if util::exists(module_path) {
            return module_path
        }
    }
    for var i in 0..vector::length(include_path) {
        let module_path = absolute_path(include_path[i] + "/" + path + ".pr")
        if util::exists(module_path) {
            return module_path
        }
    }
    return {} !Str
} 

export def typecheck_module(name: &parser::Node, calling_module: &Module) -> &Module {
    let filename = find_module_file(name, calling_module)
    if not filename { return null }
    var module = modules.get_or_default(filename, null)
    if module {
        return typecheck_module(module)
    }
    return module
}

// name is an identifier
export def typecheck_module(module: &Module) -> &Module {
    if module and module.stage < Stage::TYPECHECKING {
        module.stage = Stage::TYPECHECKING
        if module.is_dirty or no_incremental {
            typechecking::typecheck(module)
        } else {
            let imports = module.scope.imports
            if imports {
                for var i in 0..imports.length {
                    let imprt = imports[i]
                    typecheck_module(imprt.module)
                }
            }
        }
        return module
    }
    return null
}

export def compile_module(name: &parser::Node, calling_module: &Module) -> &Module {
    let filename = find_module_file(name, calling_module)
    if not filename { return null }
    var module = modules.get_or_default(filename, null)
    if module {
        return compile_module(module)
    }
    return module
}

export def compile_module(module: &Module) -> &Module {
    if module and module.stage < Stage::COMPILING {
        module.stage = Stage::COMPILING
        if module.is_dirty or no_incremental {
            compiler::compile(module)
        } else {
            let imports = module.scope.imports
            if imports {
                for var i in 0..imports.length {
                    let imprt = imports[i]
                    compile_module(imprt.module)
                } 
            }
        }
        return module
    }
    return null
}

export def load_file(filename: String) -> String {
    let fh = open(filename, "rb")
    if not fh {
        return null
    }

    let buf = read_all(fh)
    close(fh)
    return buf
}

export def create_module_if_absent(filename: String, modulename: String, display_name: String = null, recompile: bool = false) -> &Module {
    if modulename == "runtime" {
        return runtime_
    }
    var module = modules.get_or_default(filename, null)
    if module and not recompile {
        return module   
    }
    if not module {
        module = {} !&Module
    }

    let buf = file_loader(filename)
    if not buf {
        error("File \"", filename, "\" doesn't exist\n")
        return null
    }
    let lines = util::split_lines(buf)

    let sc = scope::enter_function_scope(builtins::builtins, null)
    @module = @make_module(filename, modulename, null, sc, display_name = display_name)
    sc.module = module
    modules[filename] = module
    module.text = buf
    module.lines = lines
    
    //serialize::resolver_pass(module)
    return module
}

export def reset(module: &Module) {
    let all_values = scope::all_values(module.scope)
    let polymorphs = vector::make(type &scope::Value)
    for var value in all_values {
        value.phase = scope::Phase::DECLARED // Reset values
        if value.tpe and value.modifier == parser::VarDecl::CONST and 
            value.tpe.kind == typechecking::TypeKind::FUNCTION and 
            typechecking::is_polymorph(value.tpe) {
                
            polymorphs.push(value)
        }
    }

    for var value in polymorphs {
        module.scope.remove(value)
    }
    
    module.scope.imports = vector::make(scope::ImportedModule)
    module.scope.re_exports = null
    module.stage = Stage::READ_CACHE
}

export def reset_and_consteval(module: &Module) {
    if module.module == "builtin" { return }
    reset(module) 
    consteval_module(module)
}

export def consteval_module(module: &Module, display_name: String = null) {
    if module.stage !int < Stage::READ_CACHE {
        serialize::resolver_pass(module)
    }
    if (not module.is_dirty and not no_incremental) or module.stage !int >= Stage::PREPROCESS !int { return }
    let modulename = module.module
    module.stage = Stage::PREPROCESS

    if not module.tokens {
        imports::find_imports(module)
    }
    let node = parser::parse(module.tokens, module.lines, module.filename, module.module, display_name = display_name)
    delete(module.tokens)
    module.tokens = null
    
    module.node = node
    module.compiler_state = compiler::make_state(module)
    
    let ident = make_identifier("__file__")
    if not scope::get(module.scope, ident) {
        let filename_type = typechecking::make_static_array(builtins::char_, module.filename.length() + 1)
        let exe_global = compiler::make_global_value(
            filename_type, "__file__", 
            { kind = compiler::ValueKind::STRING, tpe = filename_type, s = module.filename.to_array() } !&compiler::Value,
            module.compiler_state, private = false
        )
        let exe_value = scope::create_variable(
            module.scope, ident, 
            parser::ShareMarker::NONE, parser::VarDecl::LET, filename_type, null 
            // TODO We might want to export this but remove __file__ from the reexport
        )
        exe_value._assembly_name = exe_global.name
        exe_value.identifier = ident
    }
    if module.is_dirty { 
        reset(module)
        module.stage = Stage::PREPROCESS
    }
    consteval::consteval(module)
}

export def consteval_file(filename: String, modulename: String, display_name: String = null, recompile: bool = false) -> &Module {
    var module: &Module
    if modules.contains(filename) {
        module = modules[filename]
        if (not module.is_dirty and not no_incremental) or module.stage !int >= Stage::PREPROCESS !int {
            return module
        }
    } else {
        module = create_module_if_absent(filename, modulename, display_name, recompile = recompile)
    }
    
    consteval_module(module, display_name)
    return module
}

export def resolve_dependencies(name: &parser::Node, calling_module: &Module) -> &Module {
    let modulename = parser::identifier_to_str(name)
    if modulename == "runtime" or modulename == "builtin" {
        return modules[modulename] // This module is special
    }

    let filename = find_module_file(name, calling_module)
    if not filename { return null }
    let module = modules.get_or_default(filename, null)
    if not module { return null }

    serialize::dependency_pass(module) 
    return module
}

// TODO This is inconsistent with the functions above, as a cached module is returned
// name is an identifier
export def consteval_module(name: &parser::Node, calling_module: &Module) -> &Module {
    let modulename = parser::identifier_to_str(name)
    if modulename == "runtime" or modulename == "builtin" {
        return modules[modulename] // This module is special
    }

    let filename = find_module_file(name, calling_module)
    if not filename { return null }

    return consteval_file(filename, modulename)
}

export var runtime_: &Module
export var types: &Module
export var types_state: &compiler::State

def create_runtime_module {
    if no_stdlib { return }
    if runtime_ { return }
    debug::trace("Creating runtime module")

    let src = to_str(constants::runtime_source)
    let lines = util::split_lines(src)
    let tokens = lexer::lex(src)
    let node = parser::parse(tokens, lines, "runtime.pr", "runtime")
    delete(tokens)

    let runtime_module = make_module(
        filename = "runtime.pr",
        modulename = "runtime",
        node = node,
        scpe = scope::enter_function_scope(builtins::builtins, null),
        text = src, lines = lines
    )
    runtime_module.is_dirty = true
    runtime_module.scope.module = runtime_module 

    let exe_file = executable_file()
    let exe_file_type = typechecking::make_static_array(builtins::char_, exe_file.length() + 1)
    let exe_global = compiler::make_global_value(
        exe_file_type, "executable", 
        { kind = compiler::ValueKind::STRING, tpe = exe_file_type, s = exe_file.to_array() } !&compiler::Value,
        runtime_module.compiler_state, private = false
    )
    let exe_value = scope::create_variable(
        runtime_module.scope, make_identifier("executable"), 
        parser::ShareMarker::EXPORT, parser::VarDecl::LET, exe_file_type, null
    )
    exe_value._assembly_name = exe_global.name

    modules["runtime"] = runtime_module
    runtime_ = runtime_module

    consteval::consteval(runtime_module)
    //runtime_module.stage = Stage::TYPECHECKING
    //typechecking::typecheck(runtime_module)
    //runtime_module.stage = Stage::COMPILING
    //compiler::compile(runtime_module)
    
    builtins::Type_ = scope::get_type(runtime_.scope, make_identifier("Type"))
    builtins::Ref_  = scope::get_type(runtime_.scope, make_identifier("Ref"))
    builtins::Function_  = scope::get_type(runtime_.scope, make_identifier("Function"))
    builtins::Generator_ = scope::get_type(runtime_.scope, make_identifier("Generator"))
    builtins::TestEnvironment_ = scope::get_type(runtime_.scope, make_identifier("TestEnvironment"))

    builtins::Field_ = scope::get_type(runtime_.scope, make_identifier("Field"))
    builtins::EnumValue_ = scope::get_type(runtime_.scope, make_identifier("EnumValue"))
}

def create_types_module {
    if types { return }
    debug::trace("Creating types module")
    types = make_module(
        filename = null,
        modulename = "type",
        node = null,
        scpe = scope::enter_scope(null, types)
    )
    types.is_dirty = true
    modules["type"] = types

    types_state = compiler::make_state(types)
    types_state.consteval = true
    types_state.scope = builtins::builtins
    types_state.current_block = types.code
}

export def prepare_preload {
    create_types_module()
    create_runtime_module()

    if no_stdlib { return }
    
    let keys = map::keys(runtime_.scope.fields)
    for var i in 0..keys.size {
        let name = keys[i]
        let value = runtime_.scope.fields[name]
        if typechecking::equals(value.tpe, builtins::type_) {
            let tpe = value.value.value_tpe
            types.result.structures[tpe.type_name] = tpe
        }
    }
}

export def create_types_main {
    let types = types 

    let types_main_ident = parser::make_identifier("__main__")
    types_main_ident.loc.module = types.module

    let args = vector::make(typechecking::NamedParameter)
    args.push({
        name = "args",
        _tpe = typechecking::array(builtins::string_)
    } !typechecking::NamedParameter)

    let main_tpe = typechecking::make_function_type_n(types_main_ident, args, vector::make(type &typechecking::Type), types)
    let value = scope::create_function(types.scope, types_main_ident, parser::ShareMarker::EXPORT, main_tpe)
    value.identifier = types_main_ident

    let types_main = compiler::predeclare_function(main_tpe, types)
    types_main.block = types.code
    types_main.forward_declare = false
    
    types.imported.add(main_tpe.type_name)
}

export def load_file_type {
    if no_stdlib { return }
    var std_module = find_module("std")
    if not std_module {
        std_module = create_module_if_absent(find_module_file("/std", null), "std") 
    }
    builtins::File_ = scope::get_type(std_module.scope, parser::make_identifier("File"))
}

export def reset_types {
    types.scope = scope::enter_scope(null, null)
    types.code = compiler::make_block()
    types_state.current_block = types.code
    types_state.consteval = false
    types_state.module.result = compiler::make_result()
    create_types_main()
}

export def extract_module_name(filename: String) -> Str {
    // TODO Path manipulation should be made easier
    var folder_sep = filename.last_index_of("/")
    if folder_sep == -1 {
        folder_sep = filename.last_index_of("\\")
    }
    if folder_sep == -1 {
        folder_sep = 0
    }
    return filename.substring(folder_sep + 1 if folder_sep > 0 else 0, filename.length() - 3)
}

def make_build_command -> Str {
    var build_command: StringBuffer = clang + " "
    for var i in 0..clang_flags.length {
        build_command += clang_flags[i] + " "
    }

    if debug::verbose { 
        build_command += "-v "
    }
    return build_command
}

export def compile_main_file(filename: String) {
    if not filename.ends_with(".pr") {
        error("File ", filename, " is not a Princess source file\n")
        exit(1)
    }
    include_path.push(absolute_path(dirname(filename)))

    mkdir(outfolder)

    if print_ast or print_tokens {
        let buf = file_loader(filename)
        if not buf {
            error("File \"", filename, "\" doesn't exist\n")
            exit(1)
        }

        let lines = util::split_lines(buf)
        let tokens = lexer::lex(buf)
        if print_tokens {
            print(json::to_string(lexer::token_list_to_json(tokens)), "\n")
            if not continue_on_output { exit(0) }
        }

        let node = parser::parse(tokens, lines, filename, "main")
        delete(tokens)
        if error_count > 0 { exit(1) }
        print(json::to_string(debug::node_to_json(node)), "\n")
        if not continue_on_output { return }
    }

    prepare_preload()
    create_types_main()

    main_module_file = filename
    var module = create_module_if_absent(filename, "main", display_name = main_file_name) 
    if not module { exit(1) }

    serialize::resolver_pass(module)
    if module.is_dirty { reset(module) }
    imports::find_imports(module)
    consteval_module(module, main_file_name)
    serialize::dependency_pass(module)

    typecheck_module(module)

    if print_typed_ast {
        if error_count > 0 { exit(1) }
        let main_json = json::make_object()
        for var module_name in @modules.keys() {
            let module = modules[module_name]
            let module_json = debug::node_to_json(module.node, types = true)
            main_json[module.module] = module_json
        }
        print(json::to_string(main_json), "\n")
        if not continue_on_output { return }
    }

    reset_types()
    compiler::import_structures(builtins::Type_, types)

    compile_module(module)
    
    let keys = modules.keys()
    for var i in 0..keys.size {
        let filename = keys[i]
        let module = modules[filename]
        if module.module == "builtin" { continue }
        serialize::generate_ctor_and_dtor(module)
    }

    debug::trace("Resolving types")
    compiler::resolve_types()
    debug::trace("Creating builtin functions")
    compiler::create_builtin_functions()

    if errors::error_count == 0 {
        debug::trace("Serializing state")
        let keys = modules.keys()
        for var i in 0..keys.size {
            let module = modules[keys[i]]
            if not module.filename { continue }
            if module.module == "runtime" or 
                module.module == "builtin" { continue }

            serialize::serialize(module)
        }
    }

    let ret = compiler::make_insn(compiler::InsnKind::RET)
    ret.value.ret.value = compiler::NO_VALUE
    types.code.insn.push(ret)

    if dependency_graph {
        print_dependency_graph(module)
        return
    }

    if errors::error_count == 0 {
        let keys = modules.keys()
        for var i in 0..keys.size {
            let filename = keys[i]
            let module = modules[filename]
            if module.module == "builtin" or not (module.is_dirty or no_incremental) { continue }
            codegen::gen(module)
        }


        is_shared = outfile.ends_with(".dll") or outfile.ends_with(".so")

        #if defined WIN32 {
            let compile_cstd = clang + " -S -emit-llvm -o " + outfolder + "/cstd_include.ll " + include + "/cstd.c"
            system(compile_cstd)
        }

        var build_command = make_build_command() + "-Wno-override-module -c "
        
        #if not defined WIN32 {
            if is_shared {
                build_command += "-fPIC "
            }
        }

        if debug_sym {
            #if defined WIN32 {
                build_command += "-g -gcodeview "
            } else {
                build_command += "-g "
            }
        }

        #if defined WIN32 {
            system(build_command + outfolder + "/cstd_include.ll -o " + outfolder + "/cstd_include.o")
        }

        for var i in 0..keys.size {
            let filename = keys[i]
            let module = modules[filename]
            if module.module == "builtin" or not (module.is_dirty or no_incremental) { continue }

            var combine = false
            if module.module != "type" and module.is_dirty and not no_incremental {
                var file = outfolder + "/" + module.file
                let old_obj = file + ".o"
                if exists(old_obj) {
                    combine = true
                   
                    let new_obj = file + "%incr.o"
                    var compile_new = make_build_command()
                    compile_new += "-c -o " + new_obj + " " + file + ".ll"
                    debug::trace(compile_new)
                    system(compile_new)

                    var compile_combine = make_build_command()
                    compile_combine += "-nostdlib -Wl,-r,-z,muldefs -o " + file + "%new.o" + " " + new_obj + " " + old_obj
                    debug::trace(compile_combine)
                    system(compile_combine)

                    system("cp " + file + "%new.o " + old_obj)
                }
            }
            
            if not combine {
                var cmd = build_command
                cmd += outfolder + "/" + module.file + ".ll "
                cmd += "-o " + outfolder + "/" + module.file + ".o "
                debug::trace(cmd)
                
                module.stage = Stage::BACKEND
                progress_update(module, ProgressUpdate::START)
                system(cmd)
                progress_update(module, ProgressUpdate::END)
            }
        }

        var link_command: StringBuffer = clang
        #if defined WIN32 {
            link_command += " -lUser32 -lKernel32 -lDbghelp "
        } else {
            link_command += " -lm -lpthread -ldl -lffi "
        }

        for var i in 0..link_directories.length {
            link_command += "--library-directory=\"" + link_directories[i].replace_all("\\", "\\\\") + "\" "
        }
        for var i in 0..link_libraries.length {
            link_command += "-l" + link_libraries[i] + " "
        }
        for var i in 0..link_flags.length {
            link_command += "--for-linker=\"" + link_flags[i] + "\" "
        }

        if rdynamic {
            link_command += "-rdynamic "
        }
        if debug::verbose { 
            link_command += "-v "
        }
        if debug_sym {
            link_command += "-g "
        }
        if is_shared {
            link_command += "-shared "
        }
        
        let keys2 = modules.keys()
        for var i in 0..keys2.size {
            let filename = keys2[i]
            let module = modules[filename]
            if module.module == "builtin" { continue }
            link_command += outfolder + "/" + module.file + ".o "
        }

        #if defined WIN32 {
            link_command += outfolder + "/cstd_include.o "
        }

        link_command += "--output "
        link_command += outfile + " "

        debug::trace("Linking with clang...")
        debug::trace(link_command)
        system(link_command)
    }
}

def print_dependency_graph(module: &Module, indent: String, last: bool) {
    let branch = "└── " if last else "├── "
    print(indent, branch, module.module, "\n")

    if last {
        indent += "    "
    } else {
        indent += "│   "
    }
        
    let keys = module.dependants.keys()
    for var i in 0..keys.size {
        let dependant = keys[i]
        print_dependency_graph(dependant, indent, i == keys.size - 1)
    }
}

def print_dependency_graph(module: &Module) {
    print_dependency_graph(module, "", true)
}