import parser
import scope
import map
import vector
import typechecking
import compiler
import toolchain

export let builtins = scope::enter_scope(null, null)
export let builtins_module = toolchain::make_module(null, "builtin", null, builtins)
builtins_module.stage = toolchain::Stage::COMPILING
builtins.module = builtins_module

def create_int_type(name: String, size: size_t, unsig: bool) -> &typechecking::Type {
    let ident = parser::make_identifier(name)
    var tpe = typechecking::make_type(typechecking::TypeKind::WORD, ident)
    tpe.size = size
    tpe.align = size
    tpe.unsig = unsig
    tpe.module = builtins_module
    scope::create_type(builtins, ident, parser::ShareMarker::EXPORT, tpe)
    return tpe
}

def create_float_type(name: String, size: size_t) -> &typechecking::Type {
    let ident = parser::make_identifier(name)
    var tpe = typechecking::make_type(typechecking::TypeKind::FLOAT, ident)
    tpe.size = size
    tpe.align = size
    tpe.unsig = false
    tpe.module = builtins_module
    scope::create_type(builtins, ident, parser::ShareMarker::EXPORT, tpe)
    return tpe
}

export let type_ = typechecking::make_type_raw(typechecking::TypeKind::TYPE)

let char_ident = parser::make_identifier("char")
export let char_ = typechecking::make_type(typechecking::TypeKind::CHAR, char_ident)
char_.size = size_of char
char_.align = align_of char
char_.unsig = true
char_.module = builtins_module
scope::create_type(builtins, char_ident, parser::ShareMarker::EXPORT, char_)

let bool_ident = parser::make_identifier("bool")
export let bool_ = typechecking::make_type(typechecking::TypeKind::BOOL, bool_ident)
bool_.size = (size_of bool)
bool_.align = (align_of bool)
// This isn't very well defined, but I guess we need this for treating bool as an arithmetic type
bool_.unsig = true
bool_.module = builtins_module

scope::create_type(builtins, bool_ident, parser::ShareMarker::EXPORT, bool_)

export let string_ = typechecking::array(char_)
string_.module = builtins_module
scope::create_type(builtins, parser::make_identifier("string"), parser::ShareMarker::EXPORT, string_)

export let float_   = create_float_type("float", size_of float)
export let double_  = create_float_type("double", size_of double)
export let float32_ = create_float_type("float32", size_of float32)
export let float64_ = create_float_type("float64", size_of float64)
export let float80_ = create_float_type("float80", size_of float80)

export let byte_    = create_int_type("byte", size_of byte, false)
export let short_   = create_int_type("short", size_of short, false)
export let int_     = create_int_type("int", size_of int, false)
export let long_    = create_int_type("long", size_of long, false)

export let ubyte_   = create_int_type("ubyte", size_of ubyte, true)
export let ushort_  = create_int_type("ushort", size_of ushort, true)
export let uint_    = create_int_type("uint", size_of uint, true)
export let ulong_   = create_int_type("ulong", size_of ulong, true)

export let int8_    = create_int_type("int8", size_of int8, false)
export let int16_   = create_int_type("int16", size_of int16, false)
export let int32_   = create_int_type("int32", size_of int32, false)
export let int64_   = create_int_type("int64", size_of int64, false)
export let int128_  = create_int_type("int128", 16, false)

export let uint8_   = create_int_type("uint8", size_of uint8, true)
export let uint16_  = create_int_type("uint16", size_of uint16, true)
export let uint32_  = create_int_type("uint32", size_of uint32, true)
export let uint64_  = create_int_type("uint64", size_of uint64, true)
export let uint128_ = create_int_type("uint128", 16, true)

export let size_t_  = create_int_type("size_t", size_of size_t, true)

#if not defined WIN32 {
    let va_list_ident = parser::make_identifier("__va_list_tag")
    export let __va_list_tag_ = typechecking::make_type(typechecking::TypeKind::STRUCT, va_list_ident)
    __va_list_tag_.fields = allocate_ref(typechecking::StructMember, 0)
    scope::create_type(builtins, va_list_ident, parser::ShareMarker::NONE, __va_list_tag_)
} else {
    // TODO add a #define or something like that
    scope::create_variable(
        builtins, parser::make_identifier("WIN32"), 
        parser::ShareMarker::EXPORT, parser::VarDecl::CONST, bool_, 
        [ kind = compiler::ValueKind::BOOL, tpe = bool_, i = 1 ] !&compiler::Value
    )
}
#if defined MACOS {
    scope::create_variable(
        builtins, parser::make_identifier("MACOS"), 
        parser::ShareMarker::EXPORT, parser::VarDecl::CONST, bool_, 
        [ kind = compiler::ValueKind::BOOL, tpe = bool_, i = 1 ] !&compiler::Value
    ) 
}

// These get set from toolchain
export var File_: &typechecking::Type = null
export var Type_: &typechecking::Type = null
export var Ref_ : &typechecking::Type = null
export var Function_: &typechecking::Type = null
export var Generator_: &typechecking::Type = null
export var TestEnvironment_: &typechecking::Type = null

export var Field_: &typechecking::Type = null
export var EnumValue_: &typechecking::Type = null