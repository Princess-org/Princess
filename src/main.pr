import constants
import preload
import map
import vector
import getopt
import toolchain
import util
import repl
import errors
import debug
import vector
import progress
import server::server

var continue_on_output = false
var defines = vector::make(Str)
var print_version = false
var language_server = false
var stdio = false // This doesn't actually do anything
var filename: Str

let options = [
    (option(*toolchain::print_ast, "--ast")
        .set_help("Print the ast when compiling")),
    (option(*toolchain::print_tokens, "--tokens")
        .set_help("Print the tokens when compiling")),
    (option(*toolchain::print_typed_ast, "--typed-ast")
        .set_help("Print AST with type information")),
    (option(*toolchain::emit_only_functions, "--emit-only-functions")
        .set_help("Only emit functions when printing the typed AST")),
    (option(*toolchain::emit_all_modules, "--emit-all-modules")
        .set_help("Emit all modules when outputting json")),
    (option(*toolchain::continue_on_output, "--continue-on-output")
        .set_help("Continue after printing the AST/Tokens")),
    (option(*toolchain::include_path, "--include")
        .set_shortop('I')
        .set_help("Include directory")
        .set_metavar("DIR")),
    (option(*defines, "--define")
        .set_shortop('D')
        .set_help("Define constants for compilation")
        .set_metavar("DEFINE")),
    (option(*toolchain::link_directories, "--link-directory")
        .set_shortop('L')
        .set_help("Add search directory for linked libraries")
        .set_metavar("DIR")),
    (option(*toolchain::link_libraries, "--link-library")
        .set_shortop('l')
        .set_help("Load library")
        .set_metavar("LIB")),
    (option(*toolchain::link_flags, "--link-flag")
        .set_help("Pass flag to the linker")
        .set_metavar("FLAG")),
    (option(*toolchain::clang_flags, "--clang")
        .set_shortop('C')
        .set_help("Pass flag to the clang backend")
        .set_metavar("FLAG")),
    (option(*toolchain::outfolder, "--buildfolder")
        .set_help("Output folder for temporary files")
        .set_metavar("DIR")),
    (option(*toolchain::outfile, "--outfile")
        .set_shortop('o')
        .set_help("Output file")
        .set_metavar("FILE")),
    (option(*toolchain::debug_sym, "--debug")
        .set_shortop('d')
        .set_help("Compile debug symbols")),
    (option(*toolchain::rdynamic, "--rdynamic")
        .set_help("Enable -rdynamic linker flag")), // TODO What does this actually do?
    (option(*toolchain::dependency_graph, "--dependency-graph")
        .set_help("Emit dependency graph")),
    (option(*print_version, "--version")
        .set_help("Print version info")),
    (option(*debug::verbose, "--verbose")
        .set_shortop('v')
        .set_help("Print detailed information when compiling")),
    (option(*progress::progress, "--progress")
        .set_shortop('p')
        .set_help("Display a progress indicator when compiling")),
    (option(*language_server, "--language-server")
        .set_help("Start a language server")),
    (option(*stdio, "--stdio")
        .set_help("Set up language server to use stdio")),
    (option(*toolchain::no_incremental, "--no-incremental")
        .set_help("Starts compiling non incrementally, all caches are invalidated")),
    (option(*toolchain::main_file_name, "--name")
        .set_help("Set name for the main file")
        .set_metavar("NAME")),
    (option(*toolchain::no_stdlib, "--no-stdlib")
        .set_help("Compile without importing std")),
    (option(*toolchain::trace_consteval, "--trace-consteval")
        .set_help("Trace code generated for consteval")),
    (option(*filename, "compile")
        .set_help("File to compile")
        .set_metavar("FILE"))
]

let parser = getopt::make_parser(options, "Princess Compiler")
let res = parser.parse(args)
if not res { exit(1) }

if print_version {
    print(constants::version, "\n")
    exit(0)
}

for var define in defines {
    toolchain::add_define(define)
}

if language_server {
    exit(server::server::main())
}

if not filename {
    toolchain::is_in_repl = true
    repl::run()
    exit(0)
}

toolchain::compile_main_file(filename)
if progress::progress {
    print("\n")
}

if errors::error_count > 0 {
    error("\nTotal errors: ", errors::error_count, "\n")
    exit(2)
}