import preload
import map
import vector
import getopt
import toolchain
import util
import repl
import errors
import debug
import vector
import progress
import server::server

let options = [
    (option("--ast", false)
        .set_help("Print the ast when compiling")),
    (option("--tokens", false)
        .set_help("Print the tokens when compiling")),
    (option("--typed-ast", false)
        .set_help("Print AST with type information")),
    (option("--emit-only-functions", false)
        .set_help("Only emit functions when printing the typed AST")),
    (option("--continue-on-output", false)
        .set_help("Continue after printing the AST/Tokens")),
    (option_repeat('I', "--include")
        .set_help("Include directory")
        .set_metavar("DIR")),
    (option_repeat('D', "--define")
        .set_help("Define constants for compilation")
        .set_metavar("DEFINE")),
    (option_repeat('L', "--link-directory")
        .set_help("Add search directory for linked libraries")
        .set_metavar("DIR")),
    (option_repeat('l', "--link-library")
        .set_help("Load library")
        .set_metavar("LIB")),
    (option_repeat("--link-flag")
        .set_help("Pass flag to the linker")
        .set_metavar("FLAG")),
    (option_repeat('C', "--clang")
        .set_help("Pass flag to the clang backend")
        .set_metavar("FLAG")),
    (option("--buildfolder", "")
        .set_help("Output folder for temporary files")
        .set_metavar("DIR")),
    (option('o', "--outfile", "")
        .set_help("Output file")
        .set_metavar("FILE")),
    (option('d', "--debug", false)
        .set_help("Compile debug symbols")),
    (option("--rdynamic", false)
        .set_help("Enable -rdynamic linker flag")), // TODO What does this actually do?
    (option("--time-report", false)
        .set_help("Emit timing information")),
    (option("--dependency-graph", false)
        .set_help("Emit dependency graph")),
    (option("--version", false)
        .set_help("Print version info")),
    (option('v', "--verbose", false)
        .set_help("Print detailed information when compiling")),
    (option('p', "--progress", false)
        .set_help("Display a progress indicator when compiling")),
    (option("--language-server", false)
        .set_help("Start a language server")),
    (option("--stdio", false)
        .set_help("Set up language server to use stdio")),
    (option("--no-incremental", false)
        .set_help("Starts compiling non incrementally, all caches are invalidated")),
    (option("--name", "")
        .set_help("Set name for the main file")),
    (option("--no-stdlib", false)
        .set_help("Compile without importing std")),
    (option("compile", "")
        .set_help("File to compile")
        .set_metavar("FILE"))
]
let parser = *getopt::make_parser(options, "Princess Compiler")
let res = parser.parse(args)
if not res { exit(1) }

let print_ast           = parser.get_value("--ast").b
let print_tokens        = parser.get_value("--tokens").b
let print_typed_ast     = parser.get_value("--typed-ast").b
let emit_only_functions = parser.get_value("--emit-only-functions").b
let continue_on_output  = parser.get_value("--continue-on-output").b
let includes            = parser.get_value("--include")
let defines             = parser.get_value("--define")
let link_directories    = parser.get_value("--link-directory")
let link_libraries      = parser.get_value("--link-library")
let link_flags      	= parser.get_value("--link-flag")
let clang_flags         = parser.get_value("--clang")
let outfolder           = parser.get_value("--buildfolder").str
let outfile             = parser.get_value("--outfile").str
let debug_sym           = parser.get_value("--debug").b
let rdynamic            = parser.get_value("--rdynamic").b
let time_report         = parser.get_value("--time-report").b
let dependency_graph    = parser.get_value("--dependency-graph").b
let print_version       = parser.get_value("--version").b
let verbose             = parser.get_value("--verbose").b
let progress_bar        = parser.get_value("--progress").b
let language_server     = parser.get_value("--language-server").b
let no_incremental      = parser.get_value("--no-incremental").b
let name                = parser.get_value("--name").str
let no_stdlib           = parser.get_value("--no-stdlib").b
let filename            = parser.get_value("compile").str

if print_version {
    print(toolchain::version, "\n")
    exit(0)
}

if time_report and dependency_graph {
    error("--time-report and --dependency-graph are mutually exclusive\n")
    exit(1)
}

def push_all_strings(value: &getopt::Value, vec: &Vector(Str)) {
    while value {
        vec.push(value.str)
        value = value.next
    }
}

push_all_strings(includes, toolchain::include_path)
push_all_strings(link_directories, toolchain::link_directories)
push_all_strings(link_libraries, toolchain::link_libraries)
push_all_strings(link_flags, toolchain::link_flags)
push_all_strings(clang_flags, toolchain::clang_flags)

if length(outfolder) > 0 {
    toolchain::outfolder = outfolder
}
if length(outfile) > 0 {
    toolchain::outfile = outfile
}

var define = defines
while define {
    toolchain::add_define(define.str)
    define = define.next
}

debug::verbose = verbose

if name.length > 0 {
    toolchain::main_file_name = name
}

toolchain::print_ast = print_ast
toolchain::print_tokens = print_tokens
toolchain::print_typed_ast = print_typed_ast
toolchain::emit_only_functions = emit_only_functions
toolchain::continue_on_output = continue_on_output
toolchain::debug_sym = debug_sym
toolchain::time_report = time_report
toolchain::dependency_graph = dependency_graph
toolchain::no_incremental = no_incremental or language_server
toolchain::rdynamic = rdynamic
toolchain::no_stdlib = no_stdlib

progress::progress = progress_bar

if language_server {
    exit(server::server::main())
}

if length(filename) == 0 {
    repl::run()
    exit(0)
}

toolchain::compile_main_file(filename)
print("\n")

if errors::error_count > 0 {
    error("\nTotal errors: ", errors::error_count, "\n")
    exit(2)
}