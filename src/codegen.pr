import vector
import set
import map
import util
import typechecking
import compiler
import scope
import debug
import toolchain
import builtins

def type_to_str(tpe: &typechecking::Type) -> &string {
    if not tpe { return "void" }
    var ret: &string
    switch tpe.kind !int {
        case typechecking::TypeKind::BOOL:
            ret = "i1"
        case typechecking::TypeKind::CHAR:
            ret = "i8"
        case typechecking::TypeKind::WORD:
            ret = "i" + tpe.size * 8
        case typechecking::TypeKind::FLOAT:
            // TODO We might want to support float128 as a different type
            switch tpe.size {
                case 4: ret = "float"
                case 8: ret = "double"
                case 16: ret = "x86_fp80"
                case: assert
            }
        case typechecking::TypeKind::POINTER:
            if tpe.tpe and tpe.tpe.kind != typechecking::TypeKind::STRUCTURAL {
                ret = type_to_str(tpe.tpe)
                ret += '*'
            } else {
                // void pointer is i8*
                ret = "i8*"
            }
        case typechecking::TypeKind::REFERENCE, typechecking::TypeKind::WEAK_REF:
            ret = "{i64*, "
            if tpe.tpe and tpe.tpe.kind != typechecking::TypeKind::STRUCTURAL {
                ret += type_to_str(tpe.tpe)
                ret += '*'
            } else {
                ret += "i8*"
            }
            ret += ", %\"runtime::Type\"*}"
        case typechecking::TypeKind::ARRAY:
            ret = "{i" + (size_of size_t) * 8 + ", "
            if tpe.tpe {
                ret += type_to_str(tpe.tpe) + '*'
            } else {
                ret += "i8*"
            }
            ret += '}'
        case typechecking::TypeKind::STATIC_ARRAY:
            assert tpe.length !uint64 < std::MAX_UINT64
            ret = "[" + tpe.length + " x " + type_to_str(tpe.tpe) + ']'
        case typechecking::TypeKind::STRUCT, typechecking::TypeKind::CLOSURE:
            if tpe.type_name {
                ret = "%\"" + tpe.type_name + '"'
            } else {
                // Anonymous struct
                ret = "{"
                let len = vector::length(tpe.field_types)
                for var i in 0..len {
                    let type_member = tpe.field_types[i]
                    ret += type_to_str(type_member.tpe)
                    if i < len - 1 {
                        ret += ", "
                    }
                }
                ret += '}'
            }
        case typechecking::TypeKind::UNION:
            if tpe.type_name {
                ret = "%\"" + tpe.type_name + '"'
            } else {
                ret = "{[" + tpe.size + " x i8]}"
            }
        case typechecking::TypeKind::ENUM:
            ret = type_to_str(tpe.tpe)
        case typechecking::TypeKind::FUNCTION:
            assert vector::length(tpe.return_t) <= 1
            if vector::length(tpe.return_t) == 1 {
                ret = type_to_str(tpe.return_t[0])
            } else {
                ret = "void"
            }
            ret += " ("
            let len = vector::length(tpe.parameter_t)
            for var i in 0..len {
                let param = tpe.parameter_t[i]
                ret += named_parameter_to_str(param)
                if i < len - 1 {
                    ret += ", "
                }
            }
            ret += ')'
        case typechecking::TypeKind::NULL:
            ret = "null"
        case typechecking::TypeKind::STUB:
            ret = "%\"" + tpe.type_name + '"'
        case: 
            error(debug::type_to_str(tpe), " ", typechecking::is_polymorph(tpe), "\n")
            error(tpe.kind, "\n")
            assert
    }
    return ret
}

def debug_value_to_str(value: compiler::DebugValue) -> &string {
    var ret: &string
    switch value.kind !int {
        case compiler::DebugValueKind::NULL:
            ret = "null"
        case compiler::DebugValueKind::STRING:
            ret = util::repr(value.s, false)
        case compiler::DebugValueKind::INT:
            ret = to_string(value.i)
        case compiler::DebugValueKind::BOOL:
            if value.i {
                ret = "true"
            } else {
                ret = "false"
            }
        case compiler::DebugValueKind::CONST:
            ret = value.name
        case compiler::DebugValueKind::METADATA:
            ret = "!" + value.name
        case compiler::DebugValueKind::DIEXP:
            ret = "!DIExpression()"
    }
    return ret
}

def value_to_str(value: compiler::Value) -> &string {
    var ret: &string
    switch value.kind !int {
        case compiler::ValueKind::ZEROINITIALIZER:
            ret = "zeroinitializer"
        case compiler::ValueKind::NULL:
            ret = "null"
        case compiler::ValueKind::UNDEF:
            ret = "undef"
        case compiler::ValueKind::METADATA:
            ret = "!" + value.name
        case compiler::ValueKind::LOCAL:
            ret = "%" + value.name
        case compiler::ValueKind::GLOBAL:
            ret = "@\"" + value.name + '"'
        case compiler::ValueKind::BOOL:
            if value.i {
                ret = "true"
            } else {
                ret = "false"
            }
        case compiler::ValueKind::INT:
            if value.tpe.unsig {
                ret = to_string(value.i !uint64)
            } else {
                ret = to_string(value.i)
            }
            if value.tpe.kind == typechecking::TypeKind::FLOAT {
                ret += ".0"
            }
        case compiler::ValueKind::FLOAT:
            ret = util::double_to_hex_str(value.f)
        case compiler::ValueKind::STRUCT:
            ret = ""
            if value.metadata {
                ret += '!'
            }
            ret += '{'
            for var i in 0..value.values.size {
                // TODO Figure out why we need that cast
                let val = value.values[i] !compiler::Value
                if val.tpe {
                    ret += type_to_str(val.tpe) + ' '
                }
                ret += value_to_str(val)
                if i < value.values.size - 1 {
                    ret += ", "
                }
            }
            ret += '}'
        case compiler::ValueKind::ARRAY:
            ret = "["
            for var i in 0..value.values.size {
                let val = value.values[i] !compiler::Value
                if val.tpe {
                    ret += type_to_str(val.tpe) + ' '
                }
                ret += value_to_str(val)
                if i < value.values.size - 1 {
                    ret += ", "
                }
            }
            ret += ']'
        case compiler::ValueKind::STRING:
            if value.metadata {
                ret = "!"
            } else {
                ret = "c"
            }
            ret += util::repr(value.s, not value.metadata)
        case compiler::ValueKind::DEBUG_INFO:
            ret = ""
            if value.distinct {
                ret += "distinct "
            }
            ret += '!' + value.name + '('
            for var i in 0..value.debug_values.size {
                let val = value.debug_values[i] !compiler::DebugParam
                ret += val.name + ": " + debug_value_to_str(val.value)
                if i < value.debug_values.size - 1 {
                    ret += ", "
                }
            }
            ret += ')'
        case: 
            error(value.kind, "\n")
            assert
    }
    return ret
}

def named_parameter_to_str(named: typechecking::NamedParameter) -> &string {
    var ret: &string = ""
    if named.varargs {
        if named.tpe {
            ret += "{i" + (size_of size_t) * 8 + ", " + type_to_str(named.tpe) + "*}"
        } else {
            ret += "..."
        }
    } else {
        ret += type_to_str(named.tpe)
    }
    return ret
}

def emit_arithmetic(fp: File, name: string, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.arith.ret))
    fprint(fp, " = ")
    fprint(fp, name, " ")
    fprint(fp, type_to_str((@insn).value.arith.ret.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.arith.left))
    fprint(fp, ", ")
    fprint(fp, value_to_str((@insn).value.arith.right))
}

def emit_ret(fp: File, insn: &compiler::Insn) {
    fprint(fp, "ret ")
    fprint(fp, type_to_str((@insn).value.ret.value.tpe))
    if (@insn).value.ret.value.tpe {
        fprint(fp, " ", value_to_str((@insn).value.ret.value))
    }
}

def emit_call(fp: File, insn: &compiler::Insn) {
    if (@insn).value.call.ret.tpe {
        fprint(fp, value_to_str((@insn).value.call.ret))
        fprint(fp, " = ")
    }
    fprint(fp, "call ")
    fprint(fp, type_to_str((@insn).value.call.ret.tpe))
    fprint(fp, " ")
    if (@insn).value.call.proto {
        let protosize = insn.value.call.proto.size
        fprint(fp, "(")
        for var i in 0..protosize {
            let arg = (@insn).value.call.proto[i]
            fprint(fp, named_parameter_to_str(arg))
            
            if i < protosize - 1 {
                fprint(fp, ", ")
            }
        }
        fprint(fp, ") ")
    }
    fprint(fp, value_to_str((@insn).value.call.name))
    fprint(fp, "(")
    let argsize = (@insn).value.call.args.size
    for var i in 0..argsize {
        let arg = (@insn).value.call.args[i]
        if arg.metadata {
            fprint(fp, "metadata ")
        }
        if arg.tpe {
            fprint(fp, type_to_str(arg.tpe), " ")
        }
        fprint(fp, value_to_str(arg))
        if i < argsize - 1 {
            fprint(fp, ", ")
        }
    }
    fprint(fp, ")")
}

def emit_alloca(fp: File, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.alloca.ret))
    fprint(fp, " = alloca ")
    fprint(fp, type_to_str((@insn).value.alloca.ret.tpe))
}

def emit_store(fp: File, insn: &compiler::Insn) {
    fprint(fp, "store ")
    fprint(fp, type_to_str((@insn).value.store.value.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.store.value))
    fprint(fp, ", ")
    fprint(fp, type_to_str((@insn).value.store.loc.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.store.loc))
}

def emit_load(fp: File, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.load.value))
    fprint(fp, " = load ")
    fprint(fp, type_to_str((@insn).value.load.value.tpe))
    fprint(fp, ", ")
    fprint(fp, type_to_str((@insn).value.load.loc.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.load.loc))
}

def emit_br(fp: File, insn: &compiler::Insn) {
    fprint(fp, "br ")
    fprint(fp, type_to_str((@insn).value.br.cond.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.br.cond))
    fprint(fp, ", label %")
    fprint(fp, (@insn).value.br.if_true.name)
    fprint(fp, ", label %")
    fprint(fp, (@insn).value.br.if_false.name)
}

def emit_br_unc(fp: File, insn: &compiler::Insn) {
    fprint(fp, "br label %")
    fprint(fp, (@insn).value.br_unc.label_.name)
}

def emit_insert_value(fp: File, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.insert_value.ret))
    fprint(fp, " = insertvalue ")
    fprint(fp, type_to_str((@insn).value.insert_value.value.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.insert_value.value))
    fprint(fp, ", ")
    fprint(fp, type_to_str((@insn).value.insert_value.element.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.insert_value.element))
    fprint(fp, ", ")

    let index = (@insn).value.insert_value.index
    for var i in 0..index.size {
        fprint(fp, index[i])
        if i < index.size - 1 {
            fprint(fp, ", ")
        }
    }
}

def emit_extract_value(fp: File, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.extract_value.ret))
    fprint(fp, " = extractvalue ")
    fprint(fp, type_to_str((@insn).value.extract_value.value.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.extract_value.value))
    fprint(fp, ", ")

    let index = (@insn).value.extract_value.index
    for var i in 0..index.size {
        fprint(fp, index[i])
        if i < index.size - 1 {
            fprint(fp, ", ")
        }
    }
}

def emit_convert(fp: File, name: string, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.convert.ret))
    fprint(fp, " = ", name, " ")
    fprint(fp, type_to_str((@insn).value.convert.value.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.convert.value))
    fprint(fp, " to ")
    fprint(fp, type_to_str((@insn).value.convert.ret.tpe))
}

def emit_gep(fp: File, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.gep.ret))
    fprint(fp, " = getelementptr ")
    fprint(fp, type_to_str((@insn).value.gep.tpe))
    fprint(fp, ", ")
    fprint(fp, type_to_str((@insn).value.gep.value.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.gep.value))
    fprint(fp, ", ")
        
    let index = (@insn).value.gep.index
    for var i in 0..index.size {
        fprint(fp, type_to_str(index[i].tpe))
        fprint(fp, " ")
        fprint(fp, value_to_str(index[i]))
        if i < index.size - 1 {
            fprint(fp, ", ")
        }
    }
}

def emit_icmp(fp: File, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.icmp.ret))
    fprint(fp, " = icmp ", (@insn).value.icmp.op.to_string(), " ")
    fprint(fp, type_to_str((@insn).value.icmp.left.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.icmp.left))
    fprint(fp, ", ")
    fprint(fp, value_to_str((@insn).value.icmp.right))
}

def emit_fcmp(fp: File, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.fcmp.ret))
    fprint(fp, " = fcmp ", (@insn).value.fcmp.op.to_string(), " ")
    fprint(fp, type_to_str((@insn).value.fcmp.left.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.fcmp.left))
    fprint(fp, ", ")
    fprint(fp, value_to_str((@insn).value.fcmp.right))
}


def emit_fneg(fp: File, insn: &compiler::Insn) {
    fprint(fp, value_to_str((@insn).value.fneg.ret))
    fprint(fp, " = fneg ")
    fprint(fp, type_to_str((@insn).value.fneg.value.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.fneg.value))
}

def emit_switch(fp: File, insn: &compiler::Insn) {
    fprint(fp, "switch ")
    fprint(fp, type_to_str((@insn).value.switch_.value.tpe))
    fprint(fp, " ")
    fprint(fp, value_to_str((@insn).value.switch_.value))
    fprint(fp, ", label %")
    fprint(fp, (@insn).value.switch_.otherwise.name)
    fprint(fp, " [\n")
    for var i in 0..vector::length((@insn).value.switch_.switch_values) {
        let sw = (@insn).value.switch_.switch_values[i]
        fprint(fp, "\t\t")
        fprint(fp, type_to_str(sw.value.tpe))
        fprint(fp, " ")
        fprint(fp, value_to_str(sw.value))
        fprint(fp, ", label %")
        fprint(fp, sw.label_.name)
        fprint(fp, "\n")
    }
    fprint(fp, "\t]")
}

def emit(fp: File, insn: &compiler::Insn) {
    fprint(fp, "\t")
    switch (@insn).kind !int {
        case compiler::InsnKind::FNEG:
            emit_fneg(fp, insn)
        case compiler::InsnKind::ADD:
            emit_arithmetic(fp, "add", insn)
        case compiler::InsnKind::FADD:
            emit_arithmetic(fp, "fadd", insn)
        case compiler::InsnKind::SUB:
            emit_arithmetic(fp, "sub", insn)
        case compiler::InsnKind::FSUB:
            emit_arithmetic(fp, "fsub", insn)
        case compiler::InsnKind::MUL:
            emit_arithmetic(fp, "mul", insn)
        case compiler::InsnKind::FMUL:
            emit_arithmetic(fp, "fmul", insn)
        case compiler::InsnKind::SREM:
            emit_arithmetic(fp, "srem", insn)
        case compiler::InsnKind::UREM:
            emit_arithmetic(fp, "urem", insn)
        case compiler::InsnKind::FREM:
            emit_arithmetic(fp, "frem", insn)
        case compiler::InsnKind::SDIV:
            emit_arithmetic(fp, "sdiv", insn)
        case compiler::InsnKind::UDIV:
            emit_arithmetic(fp, "udiv", insn)
        case compiler::InsnKind::FDIV:
            emit_arithmetic(fp, "fdiv", insn)
        case compiler::InsnKind::AND:
            emit_arithmetic(fp, "and", insn)
        case compiler::InsnKind::OR:
            emit_arithmetic(fp, "or", insn)
        case compiler::InsnKind::XOR:
            emit_arithmetic(fp, "xor", insn)
        case compiler::InsnKind::ASHR:
            emit_arithmetic(fp, "ashr", insn)
        case compiler::InsnKind::LSHR:
            emit_arithmetic(fp, "lshr", insn)
        case compiler::InsnKind::SHL:
            emit_arithmetic(fp, "shl", insn)
        case compiler::InsnKind::TRUNC:
            emit_convert(fp, "trunc", insn)
        case compiler::InsnKind::ZEXT:
            emit_convert(fp, "zext", insn)
        case compiler::InsnKind::SEXT:
            emit_convert(fp, "sext", insn)
        case compiler::InsnKind::FPTRUNC:
            emit_convert(fp, "fptrunc", insn)
        case compiler::InsnKind::FPEXT:
            emit_convert(fp, "fpext", insn)
        case compiler::InsnKind::FPTOUI:
            emit_convert(fp, "fptoui", insn)
        case compiler::InsnKind::FPTOSI:
            emit_convert(fp, "fptosi", insn)
        case compiler::InsnKind::UITOFP:
            emit_convert(fp, "uitofp", insn)
        case compiler::InsnKind::SITOFP:
            emit_convert(fp, "sitofp", insn)
        case compiler::InsnKind::PTRTOINT:
            emit_convert(fp, "ptrtoint", insn)
        case compiler::InsnKind::INTTOPTR:
            emit_convert(fp, "inttoptr", insn)
        case compiler::InsnKind::BITCAST:
            emit_convert(fp, "bitcast", insn)
        case compiler::InsnKind::ICMP:
            emit_icmp(fp, insn)
        case compiler::InsnKind::FCMP:
            emit_fcmp(fp, insn)
        case compiler::InsnKind::SWITCH:
            emit_switch(fp, insn)
        case compiler::InsnKind::GETELEMENTPTR:
            emit_gep(fp, insn)
        case compiler::InsnKind::INSERTVALUE:
            emit_insert_value(fp, insn)
        case compiler::InsnKind::EXTRACTVALUE:
            emit_extract_value(fp, insn)
        case compiler::InsnKind::ALLOCA:
            emit_alloca(fp, insn)
        case compiler::InsnKind::STORE:
            emit_store(fp, insn)
        case compiler::InsnKind::LOAD:
            emit_load(fp, insn)
        case compiler::InsnKind::CALL:
            emit_call(fp, insn)
        case compiler::InsnKind::BR:
            emit_br(fp, insn)
        case compiler::InsnKind::BR_UNC:
            emit_br_unc(fp, insn)
        case compiler::InsnKind::RET:
            emit_ret(fp, insn)
        case compiler::InsnKind::UNREACHABLE:
            fprint(fp, "unreachable")
        case: assert(false)
    }
    if (@insn).debug {
        fprint(fp, ", !dbg ")
        fprint(fp, value_to_str(@(@insn).debug))
    }
    fprint(fp, "\n")
}

def emit_block(fp: File, block: &compiler::Block) {
    fprint(fp, (@block).label_, ":\n")
    for var i in 0..vector::length((@block).insn) {
        let insn = (@block).insn[i]
        emit(fp, insn)
    }
}

def emit_function(fp: File, function: &compiler::Function, module: &toolchain::Module) {
    let forward_declare = function.forward_declare or function.module != module

    if forward_declare {
        fprint(fp, "declare ")
    } else {
        fprint(fp, "define ")
    }
    if function.dllimport {
        fprint(fp, "dllimport ")
    }

    if toolchain::is_shared {
        if function.dllexport {
            fprint(fp, "dllexport ")
        } else if not forward_declare {
            fprint(fp, "hidden ")
        }
    }
    
    fprint(fp, type_to_str((@function).ret), " ")
    fprint(fp, "@\"", (@function).name, "\"(")

    let len = vector::length((@function).args)
    for var i in 0..len {
        let np = (@function).args[i]
        if np.tpe and np.tpe.kind == typechecking::TypeKind::TYPE { continue }
        fprint(fp, named_parameter_to_str(np))

        if not (@function).forward_declare {
            fprint(fp, " ")
            fprint(fp, "%", np.name, ".value")
        }
        if i < len - 1 {
            fprint(fp, ", ")
        }
    }

    fprint(fp, ")")
    if (@function).debug and not forward_declare {
        fprint(fp, " !dbg ")
        fprint(fp, value_to_str(@(@function).debug))
    }
    if not forward_declare {
        fprint(fp, " {\n")
        var block = (@function).block
        while block {
            emit_block(fp, block)
            block = (@block).next
        }
        fprint(fp, "}\n")
    } else {
        fprint(fp, "\n")
    }
}

def emit_structure(fp: File, structure: &typechecking::Type) {
    #if not defined WIN32 {
        if structure == builtins::__va_list_tag_ { return }
    }

    fprint(fp, "%\"", (@structure).type_name, "\"")
    fprint(fp, " = type ")
    if (@structure).packed {
        fprint(fp, "<")
    }
    fprint(fp, "{")
    let len = vector::length(structure.field_types)
    for var i in 0..len {
        let type_member = structure.field_types[i]
        fprint(fp, type_to_str(type_member.tpe))
        if i < len - 1 {
            fprint(fp, ", ")
        }
    }
    fprint(fp, "}")
    if (@structure).packed {
        fprint(fp, ">")
    }
    fprint(fp, "\n")
}

def emit_union(fp: File, union_: &typechecking::Type) {
    fprint(fp, "%\"", (@union_).type_name, "\"")
    fprint(fp, " = type {")
    fprint(fp, type_to_str(union_.field_types[0].tpe))
    fprint(fp, "}\n")
}

def emit_stub(fp: File, stub: &typechecking::Type) {
    fprint(fp, "%\"", (@stub).type_name, "\"")
    fprint(fp, " = type opaque\n")
}

def emit_global(fp: File, global: &compiler::Global) {
    fprint(fp, "@\"", global.name, "\"")
    fprint(fp, " = ")
    if global.external {
        fprint(fp, "external ")
    }
    if global.private {
        fprint(fp, "private ")
    }
    if global.dllimport {
        fprint(fp, "dllimport ")
    }

    if toolchain::is_shared {
        if global.dllexport {
            fprint(fp, "dllexport ")
        } else if not global.private and not global.external {
            fprint(fp, "hidden ")
        }
    }
    
    fprint(fp, "global ")
    
    fprint(fp, type_to_str(global.tpe))
    fprint(fp, " ")
    if global.value {
        fprint(fp, value_to_str(@global.value))
    } else if not global.external {
        fprint(fp, "zeroinitializer")
    }
    if global.debug {
        fprint(fp, ", !dbg ")
        fprint(fp, value_to_str(@global.debug))
    }
    fprint(fp, "\n")
}

def gen_main_function(fp: File) {
    if toolchain::is_shared { return }
    fprint(fp, "define i32 @main(i32 %argc, i8** %argv) {\n")
    fprint(fp, "\t%size = zext i32 %argc to i64\n")
    fprint(fp, "\t%size.1 = mul i64 %size, ", size_of string, "\n")
    fprint(fp, "\t%args = call i8* @malloc(i64 %size.1)\n")
    fprint(fp, "\t%args.1 = bitcast i8* %args to {i64, i8*}*\n")
    fprint(fp, "\t%args.2 = insertvalue {i64, {i64, i8*}*} undef, i64 %size, 0\n")
    fprint(fp, "\t%args.3 = insertvalue {i64, {i64, i8*}*} %args.2, {i64, i8*}* %args.1, 1\n")
    fprint(fp, "\t%i = alloca i32\n")
    fprint(fp, "\tstore i32 0, i32* %i\n")
    fprint(fp, "\tbr label %loop\n")
    fprint(fp, "loop:\n")
    fprint(fp, "\t%i.1 = load i32, i32* %i\n")
    fprint(fp, "\t%cond = icmp eq i32 %argc, %i.1\n")
    fprint(fp, "\tbr i1 %cond, label %end, label %inner\n")
    fprint(fp, "inner:\n")
    fprint(fp, "\t%arg = getelementptr i8*, i8** %argv, i32 %i.1\n")
    fprint(fp, "\t%arg.1 = load i8*, i8** %arg\n")
    fprint(fp, "\t%arg.2 = getelementptr {i64, i8*}, {i64, i8*}* %args.1, i32 %i.1\n")
    fprint(fp, "\t%arglen = call i64 @strlen(i8* %arg.1)\n")
    fprint(fp, "\t%arglen.1 = add i64 %arglen, 1\n")
    fprint(fp, "\t%arg.3 = insertvalue {i64, i8*} undef, i64 %arglen.1, 0\n")
    fprint(fp, "\t%arg.4 = insertvalue {i64, i8*} %arg.3, i8* %arg.1, 1\n")
    fprint(fp, "\tstore {i64, i8*} %arg.4, {i64, i8*}* %arg.2\n")
    fprint(fp, "\t%i.2 = add i32 %i.1, 1\n")
    fprint(fp, "\tstore i32 %i.2, i32* %i\n")
    fprint(fp, "\tbr label %loop\n")
    fprint(fp, "end:\n")
    fprint(fp, "\tcall void @\"main::__main__::([[char]])\"({i64, {i64, i8*}*} %args.3)\n")
    fprint(fp, "\tcall void @\"main::__finalizer__::()\"()\n")
    fprint(fp, "\tcall void @free(i8* %args)\n")
    fprint(fp, "\tret i32 0\n")
    fprint(fp, "}\n")
}

def gen_header(fp: File, module: &toolchain::Module) {
    fprint(fp, "source_filename = \"", module.filename, "\"\n")
    #if defined WIN32 {
        fprint(fp, "target datalayout = \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n")
        fprint(fp, "target triple = \"x86_64-pc-windows-msvc\"\n")
    } else {
        fprint(fp, "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n")
        fprint(fp, "target triple = \"x86_64-pc-linux-gnu\"\n")
        fprint(fp, "%__va_list_tag = type { i32, i32, i8*, i8* }\n")
    }
}

export var time_spent: int64 = 0

export def gen(module: &toolchain::Module) {
    debug::trace("Generating code for ", module.module)
    let start = util::millis()
    let result = module.result

    let outfile = toolchain::outfolder + '/' + module.file + ".ll"
    let fp = open(@outfile, "w")
    
    fprint(fp, "; This file was compiled by the grace of your highness Princess Vic Nightfall\n")

    gen_header(fp, module)

    if module.module == "main" {
        module.imported.add("malloc")
        module.imported.add("free")
        module.imported.add("strlen")

        gen_main_function(fp)
    }

    let keys_structures = map::keys(result.structures)
    for var i in 0..keys_structures.size {
        let structure = result.structures[keys_structures[i]]
        switch (@structure).kind !int {
            case typechecking::TypeKind::STRUCT:
                emit_structure(fp, structure)
            case typechecking::TypeKind::UNION:
                emit_union(fp, structure)
            case typechecking::TypeKind::STUB:
                emit_stub(fp, structure)
        }
    }

    let keys_functions = map::keys((@result).functions)
    for var i in 0..keys_functions.size {
        let function = result.functions[keys_functions[i]]
        if map::contains(module.imported, (@function).name) {
            emit_function(fp, function, module)
        }
    }

    let keys_globals = map::keys((@result).globals)
    for var i in 0..keys_globals.size {
        let global = (@result).globals[keys_globals[i]]
        if global.private or map::contains(module.imported, global.name) {
            emit_global(fp, global)
        }
    }
    
    if toolchain::debug_sym {
        fprint(fp, "declare void @llvm.dbg.declare(metadata, metadata, metadata)\n")
    }
    
    let keys_meta = map::keys((@result).metadata)
    for var i in 0..keys_meta.size {
        let key = keys_meta[i]
        let value = (@result).metadata[key]
        fprint(fp, "!", key)
        fprint(fp, " = ")
        fprint(fp, value_to_str(@value))
        fprint(fp, "\n")
    }

    close(fp)
    let end = util::millis()
    time_spent += end - start
}