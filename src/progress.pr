import toolchain
import util
import debug

toolchain::progress_handler = *trace_progress

let is_tty = /*io::is_a_tty(std::stdout())*/ false

def on_print(args: [&]) -> int {
    erase_one_line()
    let count = fprint(std::stdout(), args)
    print_progress_bar()
    return count
}

def on_error(args: [&]) -> int {
    erase_one_line()
    let count = fprint(std::stderr(), args)
    print_progress_bar()
    return count
}

if is_tty {
    std::print_hook = *on_print
    std::error_hook = *on_error
}

def erase_one_line {

}

var task_count: int
var current_task: int
var current_module: Str

def print_progress_bar {
    let row = util::get_terminal_size().row
}

def trace_progress(module: &toolchain::Module, update: toolchain::ProgressUpdate) {
    if not is_tty {
        debug::trace("[" + to_string(module.stage) + "] " + module.module + " " + to_string(update))
        return
    }

    erase_one_line()
    if update == toolchain::ProgressUpdate::CONTINUE or update == toolchain::ProgressUpdate::START {
        current_module = module.module
    }
    print_progress_bar()
}