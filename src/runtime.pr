import cstd
import optional

// This is passed to tests as an implicit first argument
export type TestEnvironment = struct {
    out: def [] -> &string
    err: def [] -> &string
    assertion_handler: def [bool, *char] -> []
}

export type Generator(type T) = struct {
    implementation: def &Generator(T) -> optional::Optional(T)
    context: *
    free_context: def * -> []
    is_at_end: bool
}

export def destruct(this: *Generator(type T)) {
    if not this.is_at_end {
        this.free_context(this.context)
    }
    free(this.context)
    this.context = null
}

export def next(generator: &Generator(type T)) -> optional::Optional(T) {
    return generator.implementation(generator)
}

// TODO Potentially preserve type names
export type Type = struct {
    id: int64
    destructor: def * -> []
    constuctor: def [*, *] -> []
}

export type Refcount = struct {
    strong_cnt: int64
    weak_cnt: int64
}

export type Ref = struct {
    ref_count: *Refcount
    value: *
    tpe: *Type
}