import parser
import vector
import util
import typechecking
import json
import toolchain
import set

#if not defined WIN32 {
    import linux
}

def from_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("module") = node_to_json(node.value.from_.module, types)
    res("idents") = node_vec_to_json(node.value.from_.idents, types)
    return res
}

def bin_op_to_json(str: Str, node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = str
    res("left") = node_to_json(node.value.bin_op.left, types)
    res("right") = node_to_json(node.value.bin_op.right, types)
    return res
}

def un_op_to_json(str: Str, node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = str
    res("expr") = node_to_json(node.value.expr, types)
    return res
}

def node_vec_to_json(vec: &Vector(&parser::Node), types: bool, no_children: bool = false) -> &Json {
    if not vec {
        return json::make_null()
    } else {
        let res = json::make_array()
        for var i in 0..vector::length(vec) {
            let node = vec(i)
            if not node { continue }
            if no_children and toolchain::emit_only_functions and 
                (node.kind != parser::NodeKind::DEF and 
                node.kind != parser::NodeKind::VAR_DECL and 
                node.kind != parser::NodeKind::TYPE_DECL) {
                
                continue
            }
            if toolchain::emit_only_functions and node.kind == parser::NodeKind::DEF and
                node.value.def_.function.polymorph {
                
                continue
            }
            res.push(node_to_json(node, types))
        }
        return res
    }
}

def func_call_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "FuncCall"
    res("left") = node_to_json(node.value.func_call.left, types)
    res("args") = node_vec_to_json(node.value.func_call.args, types)
    res("kwargs") = node_vec_to_json(node.value.func_call.kwargs, types)
    let inline = node.value.func_call.inline
    if inline != parser::InlineSpecifier::NONE {
        res("inline") = inline !byte
    }
    return res
}

def var_decl_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "VarDecl"
    res("share") = to_string(node.value.var_decl.share)
    res("kw") = to_string(node.value.var_decl.kw)
    res("left") = node_vec_to_json(node.value.var_decl.left, types)
    res("right") = node_vec_to_json(node.value.var_decl.right, types)
    if node.value.var_decl.doc {
        res("doc") = to_string(node.value.var_decl.doc)
    }
    return res
}

def id_decl_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "IdDecl"
    res("value") = node_to_json(node.value.id_decl.value, types)
    res("tpe") = node_to_json(node.value.id_decl.tpe, types)
    return res
}

def id_decl_struct_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "IdDeclStruct"
    if node.value.id_decl_struct.is_embed {
        res("is_embed") = true
    }
    if node.value.id_decl_struct.is_bitfield {
        res("bit_size") = node.value.id_decl_struct.bit_size
    }
    if node.value.id_decl_struct.is_const {
        res("value") = node_to_json(node.value.id_decl_struct.value, types)
    }
    res("ident") = node_to_json(node.value.id_decl_struct.ident, types)
    res("tpe") = node_to_json(node.value.id_decl_struct.tpe, types)
    return res    
}

def id_decl_enum_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "IdDeclEnum"
    res("ident") = node_to_json(node.value.id_decl_enum.ident, types)
    res("value") = node_to_json(node.value.id_decl_enum.value, types)
    return res    
}

def enum_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Enum"
    res("tpe") = node_to_json(node.value.t_enum.tpe, types)
    res("body") = node_vec_to_json(node.value.t_enum.body, types)
    return res
}

def id_assign_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "IdAssign"
    res("value") = node_to_json(node.value.expr, types)
    return res
}

def named_arg_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "NamedArg"
    res("name") = node_to_json(node.value.named_arg.name, types)
    res("value") = node_to_json(node.value.named_arg.value, types)
    return res
}

def identifier_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Identifier"
    let path = json::make_array()
    for var i in 0..node.value.identifier.path.length {
        path.push(node.value.identifier.path(i))
    }
    res("path") = path
    res("prefixed") = node.value.identifier.prefixed
    res("args") = node_vec_to_json(node.value.identifier.args, types)
    return res
}

def function_t_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "FunctionT"
    res("args") = node_vec_to_json(node.value.t_func.args, types)
    res("ret") = node_vec_to_json(node.value.t_func.ret, types)
    return res
}

def ptrarray_to_json(str: Str, node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = str
    res("kw") = to_string(node.value.t_parr.kw)
    res("tpe") = node_to_json(node.value.t_parr.tpe, types)
    return res
}

def array_static_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "ArrayStaticT"
    res("n") = node_to_json(node.value.t_arrs.n, types)
    res("kw") = to_string(node.value.t_arrs.kw)
    res("tpe") = node_to_json(node.value.t_arrs.tpe, types)
    return res
}

def assign_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Assign"
    res("left") = node_vec_to_json(node.value.assign.left, types)
    res("right") = node_vec_to_json(node.value.assign.right, types)
    return res
}

def unsigned_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Unsigned"
    res("expr") = node_to_json(node.value.expr, types)
    return res
}

def switch_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Switch"
    res("expr") = node_to_json(node.value.switch_.expr, types)
    res("body") = node_vec_to_json(node.value.switch_.body, types)
    return res
}

def case_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Case"
    res("expr") = node_vec_to_json(node.value.case_.expr, types)
    res("body") = node_vec_to_json(node.value.case_.body, types)
    return res
}

def if_expr_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "IfExpr"
    res("cond") = node_to_json(node.value.if_expr.cond, types)
    res("if_true") = node_to_json(node.value.if_expr.if_true, types)
    res("if_false") = node_to_json(node.value.if_expr.if_false, types)
    return res
}

def if_to_json(node: &parser::Node, static_if: bool, types: bool) -> &Json {
    let res = json::make_object()
    if static_if {
        res("kind") = "StaticIf"
    } else {
        res("kind") = "If"
    }
    res("cond") = node_to_json(node.value.if_.cond, types)
    res("body") = node_vec_to_json(node.value.if_.body, types)
    res("else_if") = node_vec_to_json(node.value.if_.else_if, types)
    res("else_") = node_to_json(node.value.if_.else_, types)
    return res
}

def else_if_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "ElseIf"
    res("cond") = node_to_json(node.value.if_.cond, types)
    res("body") = node_vec_to_json(node.value.if_.body, types)
    return res
}

def else_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Else"
    res("body") = node_vec_to_json(node.value.body, types)
    return res
}

def type_decl_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "TypeDecl"
    res("share") = to_string(node.value.type_decl.share)
    res("left") = node_vec_to_json(node.value.type_decl.left, types)
    res("right") = node_vec_to_json(node.value.type_decl.right, types)
    if node.value.type_decl.doc {
        res("doc") = to_string(node.value.type_decl.doc)
    }
    return res
}

def loop_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Loop"
    res("body") = node_vec_to_json(node.value.body, types)
    return res
}

def for_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "For"
    res("iddecl") = node_to_json(node.value.for_loop.iddecl, types)
    res("expr") = node_to_json(node.value.for_loop.expr, types)
    res("body") = node_vec_to_json(node.value.for_loop.body, types)
    return res
}

def for_id_decl_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "ForIdDecl"
    res("kw") = to_string(node.value.for_id_decl.kw)
    res("ident") = node_to_json(node.value.for_id_decl.ident, types)
    return res
}

def while_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "While"
    res("expr") = node_to_json(node.value.while_loop.expr, types)
    res("body") = node_vec_to_json(node.value.while_loop.body, types)
    return res
}

def import_module_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "ImportModule"
    res("name") = node_to_json(node.value.import_module.name, types)
    res("alias") = node_to_json(node.value.import_module.alias, types)
    return res
}

def def_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Def"
    res("share") = to_string(node.value.def_.share)
    res("name") = node_to_json(node.value.def_.name, types)
    res("params") = node_vec_to_json(node.value.def_.params, types)
    res("returns") = node_vec_to_json(node.value.def_.returns, types)
    if not toolchain::emit_only_functions {
        res("body") = node_vec_to_json(node.value.def_.body, types)
    }
    if node.value.def_.impl {
        res("implicit") = true
    }
    if node.value.def_.inline {
        res("inline") = true
    }
    if node.value.def_.doc {
        res("doc") = to_string(node.value.def_.doc)
    }
    return res
}

def parameter_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Parameter"
    res("kw") = to_string(node.value.param.kw)
    res("name") = node_to_json(node.value.param.name, types)
    res("tpe") = node_to_json(node.value.param.tpe, types)
    res("value") = node_to_json(node.value.param.value, types)
    return res 
}

def struct_lit_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "StructLit"
    res("args") = node_vec_to_json(node.value.struct_lit.args, types)
    res("kwargs") = node_vec_to_json(node.value.struct_lit.kwargs, types)
    return res
}

def assert_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "Assert"
    res("cond") = node_to_json(node.value.assert_.cond, types)
    res("message") = node_to_json(node.value.assert_.message, types)
    return res
}

def structural_member_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "StructuralMember"
    res("kw") = to_string(node.value.structural_member.kw)
    res("name") = node_to_json(node.value.structural_member.name, types)
    res("params") = node_vec_to_json(node.value.structural_member.params, types)
    res("returns") = node_vec_to_json(node.value.structural_member.returns, types)
    return res
}

def type_constructor_to_json(node: &parser::Node, types: bool) -> &Json {
    let res = json::make_object()
    res("kind") = "TypeConstructor"
    res("name") = node_to_json(node.value.type_constructor.name, types)
    res("args") = node_vec_to_json(node.value.type_constructor.args, types)
    return res
}

export def node_to_json(node: &parser::Node, types: bool = false) -> &Json {
    if not node { return json::make_null() }
    var res: &Json
    switch (@node).kind !int {
        case parser::NodeKind::PROGRAM
            res = json::make_object()
            res("kind") = "Program"
            res("body") = node_vec_to_json(node.body, types, no_children = true)
        case parser::NodeKind::INTEGER
            res = json::make_object()
            res("kind") = "Integer"
            res("value") = node.value.i !double
        case parser::NodeKind::CHAR
            res = json::make_object()
            res("kind") = "Char"
            res("value") = node.value.i !double
        case parser::NodeKind::STRING
            res = json::make_object()
            res("kind") = "String"
            res("value") = node.value.str
        case parser::NodeKind::FLOAT
            res = json::make_object()
            res("kind") = "Float"
            res("value") = node.value.i !double
        case parser::NodeKind::BOOLEAN
            res = json::make_object()
            res("kind") = "Boolean"
            res("value") = node.value.i !bool
        case parser::NodeKind::IDENTIFIER
            res = identifier_to_json(node, types)
        case parser::NodeKind::DEFINED
            res = un_op_to_json("Defined", node, types)
        case parser::NodeKind::ERROR
            res = un_op_to_json("Error", node, types)
        case parser::NodeKind::YIELD_FROM
            res = un_op_to_json("YieldFrom", node, types)
        case parser::NodeKind::NULL
            res = json::make_object()
            res("kind") = "Null"
        case parser::NodeKind::UNDEF
            res = json::make_object()
            res("kind") = "Undef"
        case parser::NodeKind::RANGE
            res = bin_op_to_json("Range", node, types)
        case parser::NodeKind::RANGE_INC
            res = bin_op_to_json("RangeInc", node, types)
        case parser::NodeKind::STRUCT_LIT
            res = struct_lit_to_json(node, types)
        case parser::NodeKind::MEMBER_ACCESS
            res = bin_op_to_json("MemberAccess", node, types)
        case parser::NodeKind::CAST
            res = bin_op_to_json("Cast", node, types)
        case parser::NodeKind::SIZE_OF
            res = un_op_to_json("SizeOf", node, types)
        case parser::NodeKind::ALIGN_OF
            res = un_op_to_json("AlignOf", node, types)
        case parser::NodeKind::TYPE_OF_T
            res = un_op_to_json("TypeOf", node, types)
        case parser::NodeKind::ADD
            res = bin_op_to_json("Add", node, types)
        case parser::NodeKind::SUB
            res = bin_op_to_json("Sub", node, types)
        case parser::NodeKind::MUL
            res = bin_op_to_json("Mul", node, types)
        case parser::NodeKind::DIV
            res = bin_op_to_json("Div", node, types)
        case parser::NodeKind::MOD
            res = bin_op_to_json("Mod", node, types)
        case parser::NodeKind::AND
            res = bin_op_to_json("And", node, types)
        case parser::NodeKind::OR
            res = bin_op_to_json("Or", node, types)
        case parser::NodeKind::UADD
            res = un_op_to_json("UAdd", node, types)
        case parser::NodeKind::USUB
            res = un_op_to_json("USub", node, types)
        case parser::NodeKind::PTR
            res = un_op_to_json("Ptr", node, types)
        case parser::NodeKind::DEREF
            res = un_op_to_json("Deref", node, types)
        case parser::NodeKind::BNOT
            res = un_op_to_json("BNot", node, types)
        case parser::NodeKind::NOT
            res = un_op_to_json("Not", node, types)
        case parser::NodeKind::BAND
            res = bin_op_to_json("BAnd", node, types)
        case parser::NodeKind::BOR
            res = bin_op_to_json("BOr", node, types)
        case parser::NodeKind::BXOR
            res = bin_op_to_json("BXor", node, types)
        case parser::NodeKind::SHL
            res = bin_op_to_json("Shl", node, types)
        case parser::NodeKind::SHR
            res = bin_op_to_json("Shr", node, types)
        case parser::NodeKind::PADD
            res = bin_op_to_json("PAdd", node, types)
        case parser::NodeKind::PSUB
            res = bin_op_to_json("PSub", node, types)
        case parser::NodeKind::EQ
            res = bin_op_to_json("Eq", node, types)
        case parser::NodeKind::NEQ
            res = bin_op_to_json("NEq", node, types)
        case parser::NodeKind::GT
            res = bin_op_to_json("Gt", node, types)
        case parser::NodeKind::LT
            res = bin_op_to_json("Lt", node, types)
        case parser::NodeKind::GEQ
            res = bin_op_to_json("GEq", node, types)
        case parser::NodeKind::LEQ
            res = bin_op_to_json("LEq", node, types)
        case parser::NodeKind::PADD_EQ
            res = bin_op_to_json("PAddEq", node, types)
        case parser::NodeKind::PSUB_EQ
            res = bin_op_to_json("PSubEq", node, types)
        case parser::NodeKind::ADD_EQ
            res = bin_op_to_json("AddEq", node, types)
        case parser::NodeKind::SUB_EQ
            res = bin_op_to_json("SubEq", node, types)
        case parser::NodeKind::MUL_EQ
            res = bin_op_to_json("MulEq", node, types)
        case parser::NodeKind::DIV_EQ
            res = bin_op_to_json("DivEq", node, types)
        case parser::NodeKind::MOD_EQ
            res = bin_op_to_json("ModEq", node, types)
        case parser::NodeKind::AND_EQ
            res = bin_op_to_json("AndEq", node, types)
        case parser::NodeKind::OR_EQ
            res = bin_op_to_json("OrEq", node, types)
        case parser::NodeKind::XOR_EQ
            res = bin_op_to_json("XorEq", node, types)
        case parser::NodeKind::SHL_EQ
            res = bin_op_to_json("ShlEq", node, types)
        case parser::NodeKind::SHR_EQ
            res = bin_op_to_json("ShrEq", node, types)
        case parser::NodeKind::IMPORT
            res = json::make_object()
            res("kind") = "Import"
            res("body") = node_vec_to_json(node.value.body, types)
        case parser::NodeKind::IMPORT_MODULE
            res = import_module_to_json(node, types) 
        case parser::NodeKind::ASSIGN
            res = assign_to_json(node, types)
        case parser::NodeKind::DEF
            res = def_to_json(node, types)
        case parser::NodeKind::PARAMETER
            res = parameter_to_json(node, types)
        case parser::NodeKind::SWITCH
            res = switch_to_json(node, types)
        case parser::NodeKind::CASE
            res = case_to_json(node, types)
        case parser::NodeKind::IF_EXPR
            res = if_expr_to_json(node, types)
        case parser::NodeKind::IF
            res = if_to_json(node, false, types)
        case parser::NodeKind::STATIC_IF
            res = if_to_json(node, true, types)
        case parser::NodeKind::ELSE_IF
            res = else_if_to_json(node, types)
        case parser::NodeKind::ELSE
            res = else_to_json(node, types)
        case parser::NodeKind::LOOP
            res = loop_to_json(node, types)
        case parser::NodeKind::WHILE
            res = while_to_json(node, types)
        case parser::NodeKind::FOR
            res = for_to_json(node, types)
        case parser::NodeKind::FOR_ID_DECL
            res = for_id_decl_to_json(node, types)
        case parser::NodeKind::BREAK
            res = json::make_object()
            res("kind") = "Break"
        case parser::NodeKind::CONTINUE
            res = json::make_object()
            res("kind") = "Continue"
        case parser::NodeKind::RETURN
            res = json::make_object()
            res("kind") = "Return"
            res("body") = node_vec_to_json(node.value.body, types)
        case parser::NodeKind::YIELD
            res = json::make_object()
            res("kind") = "Yield"
            res("body") = node_vec_to_json(node.value.body, types)
        case parser::NodeKind::DEFER
            res = json::make_object()
            res("kind") = "Defer"
            res("body") = node_vec_to_json(node.value.body, types)
        case parser::NodeKind::ASSERT
            res = assert_to_json(node, types)
        //case parser::NodeKind::ARRAY_SUBSCRIPT
        //    res = bin_op_to_json("ArraySubscript", node, types)
        case parser::NodeKind::FUNC_CALL
            res = func_call_to_json(node, types)
        case parser::NodeKind::TYPE_DECL
            res = type_decl_to_json(node, types)
        case parser::NodeKind::VAR_DECL
            res = var_decl_to_json(node, types)
        case parser::NodeKind::ID_DECL
            res = id_decl_to_json(node, types)
        case parser::NodeKind::ID_ASSIGN
            res = id_assign_to_json(node, types)
        case parser::NodeKind::NAMED_ARG
            res = named_arg_to_json(node, types)
        case parser::NodeKind::ID_DECL_STRUCT
            res = id_decl_struct_to_json(node, types)
        case parser::NodeKind::ID_DECL_ENUM
            res = id_decl_enum_to_json(node, types)
        case parser::NodeKind::FROM
            res = from_to_json(node, types)
        case parser::NodeKind::ENUM_T
            res = enum_to_json(node, types)
        case parser::NodeKind::STRUCT_T
            res = json::make_object()
            res("kind") = "Struct"
            res("body") = node_vec_to_json(node.value.body, types)
        case parser::NodeKind::UNION_T
            res = json::make_object()
            res("kind") = "Union"
            res("body") = node_vec_to_json(node.value.body, types)
        case parser::NodeKind::FUNCTION_T, parser::NodeKind::CLOSURE_T
            res = function_t_to_json(node, types)
        case parser::NodeKind::UNSIGNED_T
            res = unsigned_to_json(node, types)
        case parser::NodeKind::PTR_T
            res = ptrarray_to_json("PtrT", node, types)
        case parser::NodeKind::REF_T
            res = ptrarray_to_json("RefT", node, types)
        case parser::NodeKind::ARRAY_T
            res = ptrarray_to_json("ArrayT", node, types)
        case parser::NodeKind::WEAK_REF_T
            res = ptrarray_to_json("WeakRefT", node, types)
        case parser::NodeKind::WORD_T
            res = json::make_object()
            res("kind") = "Word"
            res("size") = node.value.i !double
        case parser::NodeKind::ARRAY_STATIC_T
            res = array_static_to_json(node, types)
        case parser::NodeKind::VARIANT_T
            res = json::make_object()
            res("kind") = "VariantT"
            res("body") = node_vec_to_json(node.value.t_variant.variants, types)
        case parser::NodeKind::TYPE_T
            res = un_op_to_json("TypeT", node, types)
        case parser::NodeKind::STRUCTURAL_T
            res = json::make_object()
            res("kind") = "StructuralT"
            res("body") = node_vec_to_json(node.value.body, types)
        case parser::NodeKind::STRUCTURAL_T_MEMBER
            res = structural_member_to_json(node, types)
        case parser::NodeKind::TYPE_CONSTRUCTOR
            res = type_constructor_to_json(node, types)
        case parser::NodeKind::STAR
            res = json::make_object()
            res("kind") = "Star"
        case parser::NodeKind::LAMBDA
            res = json::make_object()
            res("kind") = "Lambda"
            res("parameters") = node_vec_to_json(node.value.lambda.parameters, types)
            res("body") = node_vec_to_json(node.value.lambda.body, types)
        case
            error(node.kind, "\n")
            assert

    }
    if types and node.tpe {
        let info = json::make_object()
        info("name") = type_to_str(node.tpe)
        info("size") = node.tpe.size
        info("align") = node.tpe.align
        if node.tpe.module {
            info("module") = node.tpe.module.module
        }
        res("type_tag") = info
        // TODO It should always do that
        if toolchain::print_typed_ast {
            let loc = json::make_object()
            loc("line") = node.loc.line
            loc("column") = node.loc.column
            res("loc") = loc
        }
    }
    return res
}

def function_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer = "def [" if tpe.kind == typechecking::TypeKind::FUNCTION else "["
    var len = vector::length(tpe.parameter_t)
    for var i in 0..len {
        let param = tpe.parameter_t(i)
        if param.varargs {
            if param.tpe {
                ret += type_to_str(param.tpe, full_name)
            }
            ret += "..."
        } else {
            ret += type_to_str(param.tpe, full_name)
        }
        if i < len - 1 {
            ret += ", "
        }
    }

    ret += "] -> ["
    len = vector::length(tpe.return_t)
    for var i in 0..len {
        ret += type_to_str(tpe.return_t(i))
        if i < len - 1 {
            ret += ", "
        }
    }
    ret += ']'

    return ret
}

def pointer_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer = "*"
    if tpe.kw == parser::VarDecl::LET {
        ret += "let "
    }
    if tpe.tpe { 
        ret += type_to_str(tpe.tpe, full_name)
    }
    return ret
}

def reference_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer = "&"
    if tpe.kw == parser::VarDecl::LET {
        ret += "let "
    }
    if tpe.tpe { 
        ret += type_to_str(tpe.tpe, full_name)
    }
    return ret
}

def weak_ref_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer = "weak_ref("
    
    if tpe.kw == parser::VarDecl::LET {
        ret += "let "
    }
    if tpe.tpe {
        ret += type_to_str(tpe.tpe, full_name)
    }

    ret += ')'
    return ret
}

def array_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer = "["
    if tpe.kw == parser::VarDecl::LET {
        ret += "let "
    }
    if tpe.tpe {
        ret += type_to_str(tpe.tpe, full_name)
    }
    ret += ']'
    return ret
}

def static_array_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer = "["
    if tpe.length !uint64 == std::MAX_UINT64 {
        ret += '?'
    } else {
        ret += tpe.length
    }
    ret += "; "
    if tpe.kw == parser::VarDecl::LET {
        ret += "let "
    }
    ret += type_to_str(tpe.tpe, full_name)
    ret += ']'
    return ret
}

def tuple_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer = "["
    let len = vector::length(tpe.return_t)
    for var i in 0..len {
        let rtpe = tpe.return_t(i)
        ret += type_to_str(rtpe, full_name)
        if i < len - 1 {
            ret += ", "
        }
    }
    ret += ']'
    return ret
}

def word_t_to_string(tpe: &typechecking::Type) -> Str {
    if tpe.unsig {
        return "uint" + tpe.size * 8
    }
    return "int" + tpe.size * 8
}

def float_t_to_string(tpe: &typechecking::Type) -> Str {
    return "float" + tpe.size * 8
}

def type_def_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    return "Type<" + type_to_str(tpe.tpe, full_name) + '>'
}

def variant_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    if not tpe.variants {
        return "any"
    }

    var ret: StringBuffer = "("
    let keys = tpe.variants.keys()
    for var i in 0..keys.size {
        let vtpe = keys(i)
        ret += type_to_str(vtpe, full_name)
        if i < keys.size - 1 {
            ret += " | "
        }
    }
    ret += ')'
    return ret
}

def tc_args_to_string(args: &Vector(&typechecking::Type), full_name: bool) -> Str {
    var ret: StringBuffer = "("
    let len = vector::length(args)
    for var i in 0..len {
        let arg = args(i)
        if arg and arg.kind == typechecking::TypeKind::TYPE_DEF {
            ret += "type"
        } else {
            ret += type_to_str(arg, full_name)
        }
        if i < len - 1 {
            ret += ", "
        }
    }
    ret += ')'
    return ret
}

def generic_t_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer
    if full_name {
        ret = tpe.tpe.type_name
    } else {
        ret = tpe.tpe.name
    }
    ret += tc_args_to_string(tpe.tc_args, full_name)
    return ret
}

def tc_args_to_string(tpe: &typechecking::Type, full_name: bool) -> Str {
    var ret: StringBuffer
    if full_name {
        ret = tpe.tc_tpe.type_name
    } else {
        ret = tpe.tc_tpe.name
    }
    ret += tc_args_to_string(tpe.tc_args, full_name)
    return ret
}

export def type_to_str(tpe: &typechecking::Type, full_name: bool = false) -> Str {
    if not tpe { return "(none)" }
    if tpe.tc_tpe { return tc_args_to_string(tpe, full_name) }
    switch tpe.kind !int {
        case typechecking::TypeKind::BOX
            return "Box<" + type_to_str(tpe.wk, full_name) + ">"
        case typechecking::TypeKind::VOID
            return "void"
        case typechecking::TypeKind::BOOL
            return "bool"
        case typechecking::TypeKind::CHAR
            return "char"
        case typechecking::TypeKind::WORD
            if full_name { return word_t_to_string(tpe) }
            return tpe.name
        case typechecking::TypeKind::FLOAT
            if full_name { return float_t_to_string(tpe) }
            return tpe.name
        case typechecking::TypeKind::ENUM,
            typechecking::TypeKind::STRUCT, typechecking::TypeKind::UNION,
            typechecking::TypeKind::STRUCTURAL,
            typechecking::TypeKind::TYPE_CONSTRUCTOR
            if tpe.is_anon { return "<anonymous>" }
            return tpe.type_name if full_name else tpe.name
        case typechecking::TypeKind::TYPE
            return "type"
        case typechecking::TypeKind::TYPE_DEF
            return type_def_t_to_string(tpe, full_name)
        case typechecking::TypeKind::FUNCTION, typechecking::TypeKind::CLOSURE
            return function_t_to_string(tpe, full_name)
        case typechecking::TypeKind::TUPLE
            return tuple_t_to_string(tpe, full_name)
        case typechecking::TypeKind::POINTER, typechecking::TypeKind::BYREF
            return pointer_t_to_string(tpe, full_name)
        case typechecking::TypeKind::REFERENCE
            return reference_t_to_string(tpe, full_name)
        case typechecking::TypeKind::WEAK_REF
            return weak_ref_t_to_string(tpe, full_name)
        case typechecking::TypeKind::ARRAY
            return array_t_to_string(tpe, full_name)
        case typechecking::TypeKind::STATIC_ARRAY
            return static_array_t_to_string(tpe, full_name)
        case typechecking::TypeKind::NAMESPACE
            return tpe.type_name if full_name else tpe.name
        case typechecking::TypeKind::RANGE
            return "Range"
        case typechecking::TypeKind::RANGE_INC
            return "RangeInc"
        case typechecking::TypeKind::STUB
            let s = tpe.type_name if full_name else tpe.name
            if not s {
                // Unique name by taking the address
                return to_string(tpe !* !size_t)
            }
            return s
        case typechecking::TypeKind::NULL
            return "null"
        case typechecking::TypeKind::UNDEF
            return "undef"
        case typechecking::TypeKind::GENERIC
            return generic_t_to_string(tpe, full_name)
        case typechecking::TypeKind::TUNION, typechecking::TypeKind::VARIANT
            return variant_t_to_string(tpe, full_name)
        case typechecking::TypeKind::TO_INFER
            return "<?>"
        case
            error(tpe.kind, "\n")
            assert
    }
}

export var verbose = false
let start_time = util::millis()

export def trace(msg: String...) {
    if verbose {
        let now = util::millis()
        let time_offset = (now - start_time) !double / 1000
        cstd::printf("[%4.1lfs] ".value, time_offset)

        for var i in 0..msg.size {
            print(msg(i))
        }
        print("\n")
    }
}