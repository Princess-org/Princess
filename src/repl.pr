import vector
import map
import toolchain
import util
import lexer
import parser
import compiler
import typechecking
import eval
import builtins
import scope
import debug
import consteval
import errors
import constants

#if not defined WIN32 {
    import linux
}

def read_input {
    var history = vector::make(Str)
    var history_item: size_t = 0
    history.push("")

    let isatty = util::is_a_tty(std::stdin())

    loop {
        var lines = vector::make(Str)
        lines.push("")

        var line = 0
        var column = 0

        var brace_stack_size = 0
        var brace_stack: *char = allocate(0) !*char

        var cont = false

        print(">>> ")
        fflush(std::stdout())
        loop {
            var c: char
            loop {
                #if defined WIN32 {
                    c = cstd::_getch() !char
                } else {
                    c = cstd::getchar() !char
                }
                
                if c == '\r' {
                    print("\r\n")
                    let current_line = lines[line]
                    if ((history.length > 1 and history[history.length - 2] != current_line) or 
                        history.length <= 1) and length(current_line) > 0 {

                        history.push(current_line)
                    }
                    history_item = history.length - 1
                    history[history_item] = ""

                    cont = false
                    break
                } else if c == 3 {
                    // ctrl + c
                    print("\r\n")
                    return
                } else if c == 9 {
                    // TODO Implement tabs properly
                    print("    ")
                    lines[line] = lines[line].insert(column, "    ")
                    column += 4
                } else if c == 12 {
                    // ctrl + l
                    print("\x1B[2J")
                    print("\x1B[H")
                    if cont {
                        print("... ")
                    } else {
                        print(">>> ")
                    }
                    print("\x1B7")
                    print(lines[line])
                    print("\x1B8")
                    
                    let width = util::get_terminal_size().col
                    let ucolumn = util::count_glyphs(lines[line], column)

                    if ucolumn / width > 0 { print("\x1B[", ucolumn / width, "B") }
                    if ucolumn % width > 0 { print("\x1B[", ucolumn % width, "C") }
                } else if 1 <= c <= 26 {
                    // Eat control characters
                } else if c == 127 {
                    // backspace
                    if column > 0 {
                        let ucolumn = util::count_glyphs(lines[line], column)
                        let width = util::get_terminal_size().col
                        if (ucolumn + 4) % width == 0 {
                            print("\x1B[1A")
                            print("\x1B[", width, "C")
                            print("\x1B[K")
                        } else {
                            print("\b\x1B[K")
                        }
                        
                        while lines[line][column - 1] & 0b11000000 == 0b10000000 {
                            column -= 1
                            lines[line] = lines[line].remove(column)
                        }
                        column -= 1
                        lines[line] = lines[line].remove(column)
                        
                        if column < lines[line].length {
                            print("\x1B7")
                            for var i in column..(lines[line].length) {
                                print(lines[line][i])
                            }
                            print(" \x1B8")
                        }
                    } else {
                        print("\a")
                    }
                } else if c == 27 {
                    c = cstd::getchar() !char
                    if c == 91 {
                        c = cstd::getchar() !char
                        if c == 51 {
                            c = cstd::getchar() !char
                            if c == 126 {
                                // del
                                if column < lines[line].length {
                                    for var i in 0..util::bytes_in_glyph(lines[line][column]) {
                                        lines[line] = lines[line].remove(column)
                                    }
                                    print("\x1B7")
                                    for var i in column..(lines[line].length) {
                                        print(lines[line][i])
                                    }
                                    print(" \x1B8")
                                } else {
                                    print("\a")
                                }
                            }
                        } else if c == 68 {
                            // left
                            if column > 0 {
                                let ucolumn = util::count_glyphs(lines[line], column)
                                let width = util::get_terminal_size().col
                                if (ucolumn + 4) % width == 0 {
                                    print("\x1B[1A")
                                    print("\x1B[", width, "C")
                                } else {
                                    print("\x1B[D")
                                }

                                while lines[line][column - 1] & 0b11000000 == 0b10000000 {
                                    column -= 1
                                }
                                column -= 1
                                
                            } else {
                                print("\a")
                            }
                        } else if c == 67 {
                            // right
                            if column < lines[line].length {
                                column += util::bytes_in_glyph(lines[line][column])
                                let ucolumn = util::count_glyphs(lines[line], column)
                                let width = util::get_terminal_size().col
                                if (ucolumn + 4) % width == 0 {
                                    print("\x1BE")
                                } else {
                                    print("\x1B[C")
                                }
                            } else {
                                print("\a")
                            }
                        } else if c == 65 {
                            // up
                            if history_item > 0 {
                                history_item -= 1

                                let ucolumn = util::count_glyphs(lines[line], column)
                                let width = util::get_terminal_size().col
                                if ucolumn / width > 0 { print("\x1B[", ucolumn / width, "A") }
                                print("\r")
                                print("\x1B[4C")
                                print("\x1B[J\x1B[K")
                                
                                lines[line] = history[history_item]
                                print(lines[line])
                                column = (lines[line].length) !int
                            }
                        } else if c == 66 {
                            // down
                            if history_item < history.length - 1 {
                                history_item += 1

                                let ucolumn = util::count_glyphs(lines[line], column)
                                let width = util::get_terminal_size().col
                                if ucolumn / width > 0 { print("\x1B[", ucolumn / width, "A") }
                                print("\r")
                                print("\x1B[4C")
                                print("\x1B[J\x1B[K")

                                lines[line] = history[history_item]
                                print(lines[line])
                                column = (lines[line].length) !int
                            }
                        }
                    }
                } else {
                    let count = util::bytes_in_glyph(c)

                    for var i in 0..count {
                        if i > 0 { c = cstd::getchar() !char }
                        lines[line] = lines[line].insert(column, c)
                        column += 1
                        if isatty { print(c) }
                    }

                    if isatty {
                        let ucolumn = util::count_glyphs(lines[line], column)
                        let width = util::get_terminal_size().col
                        if (ucolumn + 4) % width == 0 {
                            print("\x1BE")
                        }
                        if column < lines[line].length {
                            print("\x1B7")
                            for var i in column..(lines[line].length) {
                                print(lines[line][i])
                            }
                            print(" \x1B8")
                        }
                    }
                }
                history[history_item] = lines[line]
                fflush(std::stdout())
            }

            var br = false
            var in_string = false  
            var in_escape = false

            let str = lines[line]
            for var i in 0..str.length() {
                let c = str[i]
                if c == '\\' and in_string {
                    in_escape = true
                    continue
                } else if c == '"' and not in_escape { 
                    in_string = not in_string 
                } else if not in_string {
                    var last_brace = '\0'
                    if brace_stack_size > 0 {
                        last_brace = brace_stack[brace_stack_size - 1]
                    }
                    if c == '(' or c == '[' or c == '{' {
                        brace_stack_size += 1
                        brace_stack = reallocate(brace_stack, brace_stack_size * (size_of char))
                        brace_stack[brace_stack_size - 1] = c
                    } else if c == ')' or c == ']' or c == '}' {
                        if brace_stack_size > 0 {
                            if c == ')' and last_brace == '(' or c == ']' and last_brace == '[' or c == '}' and last_brace == '{' {
                                brace_stack_size -= 1
                                brace_stack = reallocate(brace_stack, brace_stack_size * (size_of char))
                            } else {
                                free(brace_stack)
                                brace_stack = null
                                brace_stack_size = 0
                                br = true
                            }
                        }
                    }
                }
                in_escape = false
            }

            if br or (c == '\r' and brace_stack_size == 0) {
                cont = false
                break
            } else if c == '\r' and brace_stack_size > 0 {
                column = 0
                line += 1
                lines.push("")
            }
            print("... ")
            cont = true
        }

        var res: StringBuffer = ""
        for var i in 0..=line {
            res += lines[i] + '\n'
        }
        execute(res)
    }
}

#if not defined WIN32 {
    var default_term: linux::s_termios
    var raw_term: linux::s_termios
}

export def run {
    print(constants::version, "\n")
    print("Press ctrl+c to quit\n")
    toolchain::no_incremental = true

    toolchain::prepare_preload()
    toolchain::create_types_main()

    #if not defined WIN32 {
        linux::tcgetattr(0, *default_term)
        linux::tcgetattr(0, *raw_term)
        linux::cfmakeraw(*raw_term)
        linux::tcsetattr(0, 1 /* TCSADRAIN */, *raw_term)
        cstd::setbuf(std::stdin(), null)
    }

    read_input()

    #if not defined WIN32 {
        linux::tcsetattr(0, 1 /* TCSADRAIN */, *default_term)
    }
}

var _args: [string] = args
var initialized = false
var stored_nodes = vector::make(type &parser::Node) // We need to keep references to all nodes around

def execute(source: Str) {
    #if not defined WIN32 {
        linux::tcsetattr(0, 1 /* TCSADRAIN */, *default_term)
        defer linux::tcsetattr(0, 1 /* TCSADRAIN */, *raw_term)
    }

    typechecking::clear_type_cache()

    let module = consteval::const_module
    let cstate = consteval::compiler_state
    module.code = compiler::make_block()

    errors::error_count = 0
    
    let tokens = lexer::lex(source)
    let lines = util::split_lines(source)
    var node = parser::parse(tokens, lines, "<stdin>", "main")
    module.node = node
    stored_nodes.push(node)

    assert(node.kind == parser::NodeKind::PROGRAM)
    if vector::length(node.body) > 0 {
        node = vector::peek(node.body) !&parser::Node
    } else {
        return
    }

    toolchain::types.code = compiler::make_block()
    toolchain::types_state.current_block = toolchain::types.code

    let state = typechecking::make_state(module)
    //state.is_static = true

    let runtime_ident = parser::make_identifier("runtime")
    scope::insert_module(module.scope, runtime_ident, toolchain::runtime_)

    consteval::consteval(state)
    typechecking::typecheck(state)

    if errors::error_count == 0 {
        // TODO Do it lua style with a = to emit the value
        switch node.kind !int {
            case parser::NodeKind::INTEGER..=parser::NodeKind::IDENTIFIER, parser::NodeKind::DEFINED,
                parser::NodeKind::RANGE..=parser::NodeKind::SHR_EQ,
                parser::NodeKind::ASSIGN, parser::NodeKind::FUNC_CALL:
                
                if node.tpe and node.tpe.kind != typechecking::TypeKind::VOID and node.tpe.kind != typechecking::TypeKind::TUPLE {
                    let old_node = parser::copy_node(node)

                    let new_line = {} !&parser::Node
                    new_line.kind = parser::NodeKind::STRING
                    new_line.value.str = "\n"
                    new_line.tpe = builtins::string_

                    let args = vector::make(type &Node)
                    args.push(old_node)
                    args.push(new_line)

                    let print_ident = parser::make_identifier("print")

                    @node = { scope = old_node.scope, tpe = builtins::int_ } !parser::Node
                    node.kind = parser::NodeKind::FUNC_CALL
                    node.value.func_call = {
                        left = print_ident,
                        args = args,
                        kwargs = vector::make(type &Node)
                    } !parser::NodeFuncCall
                    let svalue = scope::get(old_node.scope, print_ident)
                    print_ident.svalue = svalue
                    node.function = svalue.tpe
                }
        }
    }

    // We need to remove the main function so that we can create a new one
    map::remove(module.result.functions, "const::__main__::([[char]])")
    compiler::compile(cstate, true, true)

    var estate = {
        cstate = toolchain::types_state,
        stack = vector::make(type &eval::StackFrame)
    } !&eval::State

    var stack_frame = eval::make_stack_frame(toolchain::types.code, "main", 1)
    eval::push_stack_frame(stack_frame, estate)
    eval::eval(toolchain::types.code, estate)
    eval::pop_stack_frame(estate)

    let keys = map::keys(toolchain::types_state.globals)
    for var i in 0..keys.size {
        let key = keys[i]
        let value = toolchain::types_state.globals[key]
        cstate.globals[key] = value
    }

    if errors::error_count > 0 { return }
        
    let main_function = module.result.functions["const::__main__::([[char]])"]
    estate = {
        cstate = cstate,
        stack = vector::make(type &eval::StackFrame)
    } !&eval::State

    stack_frame = eval::make_stack_frame(main_function.block, "main", 1)

    let mem = allocate(size_of type *) !**
    @mem = (*_args) !*
    stack_frame.locals["args.value"] = mem

    eval::push_stack_frame(stack_frame, estate)
    eval::eval(main_function.block, estate)
    eval::pop_stack_frame(estate)   
}